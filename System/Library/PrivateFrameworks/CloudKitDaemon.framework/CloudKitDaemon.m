id sub_1BE9937C4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;

  v4 = a3;
  objc_msgSend_operation(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_metricOptionsForNetworkOperation_(a1, v8, (uint64_t)v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_sendRequestAnonymously(v4, v10, v11);

  v15 = objc_msgSend_anonymous(v9, v13, v14);
  objc_msgSend_setAnonymous_(v9, v16, v12 | v15);
  if (objc_msgSend_anonymous(v9, v17, v18))
  {
    objc_msgSend_setContainerScopedUserIdentifier_(v9, v19, 0);
    objc_msgSend_setContainerScopedDeviceIdentifier_(v9, v20, 0);
  }

  return v9;
}

id sub_1BE993860(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t isPushTriggerFired;
  const char *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  void *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  NSObject *v78;
  id v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  id v93;
  const char *v94;
  void *v95;
  const char *v96;
  id v97;
  id v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  id v103;
  void *v104;
  NSObject *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, void *);
  void *v113;
  id v114;
  id v115;
  _QWORD v116[4];
  id v117;
  _QWORD v118[4];
  id v119;
  uint8_t buf[4];
  void *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  objc_msgSend_containerID(v12, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_alloc_init(MEMORY[0x1E0D03760]);
  isPushTriggerFired = objc_msgSend_isPushTriggerFired(v11, v19, v20);
  objc_msgSend_setPushTrigger_(v18, v22, isPushTriggerFired);
  objc_msgSend__attributeCurrentContainer_config_(v18, v23, (uint64_t)v12, v13);
  if ((objc_msgSend_preferAnonymousRequests(v11, v24, v25) & 1) != 0)
    v28 = 1;
  else
    v28 = objc_msgSend_preferAnonymousRequests(v12, v26, v27);
  v29 = objc_msgSend_anonymous(v18, v26, v27);
  objc_msgSend_setAnonymous_(v18, v30, v28 | v29);
  if ((objc_msgSend_anonymous(v18, v31, v32) & 1) == 0)
  {
    objc_msgSend_containerScopedUserID(v12, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setContainerScopedUserIdentifier_(v18, v36, (uint64_t)v35);

    objc_msgSend_containerScopedUserIdentifier(v18, v37, v38);
    v39 = objc_claimAutoreleasedReturnValue();
    if (v39)
    {
      v40 = (void *)v39;
      objc_msgSend_containerScopedUserIdentifier(v18, v33, v34);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = objc_msgSend_length(v41, v42, v43);

      if (v44)
      {
        objc_msgSend_deviceIdentifier(v11, v33, v34);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setContainerScopedDeviceIdentifier_(v18, v46, (uint64_t)v45);

        objc_msgSend_containerScopedDeviceIdentifier(v18, v47, v48);
        v49 = objc_claimAutoreleasedReturnValue();
        if (!v49
          || (v50 = (void *)v49,
              objc_msgSend_containerScopedDeviceIdentifier(v18, v33, v34),
              v51 = (void *)objc_claimAutoreleasedReturnValue(),
              v54 = objc_msgSend_length(v51, v52, v53),
              v51,
              v50,
              !v54))
        {
          objc_msgSend_sharedManager(CKDDeviceIDManager, v33, v34);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_deviceIdentifierForContainer_(v55, v56, (uint64_t)v12);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setContainerScopedDeviceIdentifier_(v18, v58, (uint64_t)v57);

        }
      }
    }
  }
  objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(v11, v33, v34);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(v18, v60, (uint64_t)v59);

  objc_msgSend_applicationBundleIdentifierOverrideForNetworkAttribution(v11, v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(v18, v64, (uint64_t)v63);

  objc_msgSend_databaseScope(v11, v65, v66);
  CKDatabaseScopeString();
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDatabaseScope_(v18, v68, (uint64_t)v67);

  if (a4 == 2)
  {
    v75 = objc_msgSend_c2ClientApplicationMetricsReportFrequency_(v13, v69, (uint64_t)v17);
    objc_msgSend_setReportFrequency_(v18, v76, v75);
    v73 = objc_msgSend_c2ClientApplicationMetricsReportFrequencyBase_(v13, v77, (uint64_t)v17);
    goto LABEL_14;
  }
  if (a4 == 1)
  {
    v70 = objc_msgSend_c2ClientOperationMetricsReportFrequency_(v13, v69, (uint64_t)v17);
    objc_msgSend_setReportFrequency_(v18, v71, v70);
    v73 = objc_msgSend_c2ClientOperationMetricsReportFrequencyBase_(v13, v72, (uint64_t)v17);
LABEL_14:
    objc_msgSend_setReportFrequencyBase_(v18, v74, v73);
    goto LABEL_19;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v78 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BE990000, v78, OS_LOG_TYPE_ERROR, "Unsupported Event Metric Type. Unable to assign report frequency.", buf, 2u);
  }
LABEL_19:
  v79 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend_associatedOperationGroups(v11, v80, v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v83 = MEMORY[0x1E0C809B0];
  v118[0] = MEMORY[0x1E0C809B0];
  v118[1] = 3221225472;
  v118[2] = sub_1BE995438;
  v118[3] = &unk_1E7831F80;
  v84 = v79;
  v119 = v84;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v82, v85, (uint64_t)v118);

  objc_msgSend_allValues(v84, v86, v87);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOperationGroups_(v18, v89, (uint64_t)v88);

  objc_msgSend_associatedOperations(v11, v90, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v116[0] = v83;
  v116[1] = 3221225472;
  v116[2] = sub_1BE995248;
  v116[3] = &unk_1E7831FA8;
  v93 = v84;
  v117 = v93;
  objc_msgSend_CKMap_(v92, v94, (uint64_t)v116);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClientOperations_(v18, v96, (uint64_t)v95);

  v110 = v83;
  v111 = 3221225472;
  v112 = sub_1BE9C5AAC;
  v113 = &unk_1E7830D78;
  v97 = v11;
  v114 = v97;
  v98 = v14;
  v115 = v98;
  objc_msgSend_setDidCompleteWithError_(v18, v99, (uint64_t)&v110);
  objc_msgSend_didCompleteWithError(v18, v100, v101, v110, v111, v112, v113);
  v102 = (void *)objc_claimAutoreleasedReturnValue();

  if (v102)
  {
    v103 = v18;
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v104 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v105 = v104;
      objc_msgSend_metricUUID(v97, v106, v107);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v121 = v108;
      _os_log_impl(&dword_1BE990000, v105, OS_LOG_TYPE_INFO, "Failed to create CKEventMetric %@ didCompleteWithError callback.", buf, 0xCu);

    }
    v103 = 0;
  }

  return v103;
}

id sub_1BE993F40(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  id v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  const char *v71;
  void *v72;
  const char *v73;
  id v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  objc_class *v79;
  void *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  void *v84;
  const char *v85;
  id v87;
  _QWORD v88[2];

  v88[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend_container(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_serverConfig(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v6, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc_init(MEMORY[0x1E0D03760]);
  objc_msgSend__attributeCurrentContainer_config_(v13, v14, (uint64_t)v6, v9);
  v17 = objc_msgSend_preferAnonymousRequests(v3, v15, v16);
  v20 = objc_msgSend_anonymous(v13, v18, v19);
  objc_msgSend_setAnonymous_(v13, v21, v17 | v20);
  if ((objc_msgSend_anonymous(v13, v22, v23) & 1) == 0)
  {
    objc_msgSend_container(v3, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerScopedUserID(v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setContainerScopedUserIdentifier_(v13, v30, (uint64_t)v29);

    objc_msgSend_containerScopedUserIdentifier(v13, v31, v32);
    v33 = objc_claimAutoreleasedReturnValue();
    if (v33)
    {
      v34 = (void *)v33;
      objc_msgSend_containerScopedUserIdentifier(v13, v24, v25);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_length(v35, v36, v37);

      if (v38)
      {
        objc_msgSend_container(v3, v24, v25);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_deviceID(v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setContainerScopedDeviceIdentifier_(v13, v43, (uint64_t)v42);

      }
    }
  }
  objc_msgSend_applicationBundleIdentifierForContainerAccess(v3, v24, v25);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(v13, v45, (uint64_t)v44);

  objc_msgSend_applicationBundleIdentifierForNetworkAttribution(v3, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(v13, v49, (uint64_t)v48);

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_databaseScope(v3, v50, v51);
    CKDatabaseScopeString();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setDatabaseScope_(v13, v53, (uint64_t)v52);

  }
  v54 = objc_msgSend_c2NetworkMetricsReportFrequency_(v9, v50, (uint64_t)v12);
  objc_msgSend_setReportFrequency_(v13, v55, v54);
  v57 = objc_msgSend_c2NetworkMetricsReportFrequencyBase_(v9, v56, (uint64_t)v12);
  objc_msgSend_setReportFrequencyBase_(v13, v58, v57);
  objc_msgSend_topmostParentOperation(v3, v59, v60);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  if (v61)
  {
    v62 = objc_alloc_init(MEMORY[0x1E0D03750]);
    objc_msgSend_operationGroupID(v61, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOperationGroupId_(v62, v66, (uint64_t)v65);

    objc_msgSend_operationGroupName(v61, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOperationGroupName_(v62, v70, (uint64_t)v69);

    if (v62)
    {
      v88[0] = v62;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v71, (uint64_t)v88, 1);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setOperationGroups_(v13, v73, (uint64_t)v72);

    }
    v74 = objc_alloc_init(MEMORY[0x1E0D03758]);
    objc_msgSend_operationID(v61, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOperationId_(v74, v78, (uint64_t)v77);

    v79 = (objc_class *)objc_opt_class();
    NSStringFromClass(v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOperationType_(v74, v81, (uint64_t)v80);

    if (v74)
    {
      objc_msgSend_setOperationGroup_(v74, v82, (uint64_t)v62);
      v87 = v74;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v83, (uint64_t)&v87, 1);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setClientOperations_(v13, v85, (uint64_t)v84);

    }
  }

  return v13;
}

uint64_t sub_1BE994328(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  const char *v11;
  NSObject *v12;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!objc_msgSend_length(v1, v2, v3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LOWORD(v14) = 0;
    v8 = "Can't convert empty partition type string to a CKDPPartitionType";
    v9 = v7;
    v10 = 2;
    goto LABEL_8;
  }
  if ((objc_msgSend_isEqualToString_(v1, v4, (uint64_t)CFSTR("userPartition")) & 1) == 0)
  {
    if ((objc_msgSend_isEqualToString_(v1, v5, (uint64_t)CFSTR("appPartition")) & 1) != 0)
      goto LABEL_15;
    if ((objc_msgSend_isEqualToString_(v1, v11, (uint64_t)CFSTR("databaseSpecificPartition")) & 1) != 0)
    {
      v6 = 2;
      goto LABEL_16;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      v6 = 1;
      goto LABEL_16;
    }
    v14 = 138543362;
    v15 = v1;
    v8 = "Partition type \"%{public}@\" isn't known";
    v9 = v12;
    v10 = 12;
LABEL_8:
    _os_log_error_impl(&dword_1BE990000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, v10);
    goto LABEL_15;
  }
  v6 = 0;
LABEL_16:

  return v6;
}

void sub_1BE994784(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  objc_class *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  objc_class *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD);
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  objc_class *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  const char *v91;
  void *v92;
  const char *v93;
  objc_class *v94;
  void *v95;
  void *v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  objc_class *v106;
  void *v107;
  void *v108;
  const char *v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  NSObject *loga;
  NSObject *log;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint8_t v128[128];
  uint8_t buf[4];
  uint64_t v130;
  __int16 v131;
  void *v132;
  __int16 v133;
  void *v134;
  __int16 v135;
  void *v136;
  __int16 v137;
  void *v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  objc_msgSend_fakeErrorsByClassName(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_count(v4, v5, v6);

  if (!v7)
  {
LABEL_14:
    objc_msgSend_fakeResponseOperationResultByClassNameByItemID(*(void **)(a1 + 32), v8, v9);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend_count(v40, v41, v42);

    if (!v43)
    {
LABEL_37:
      objc_msgSend_performRequest(*(void **)(a1 + 40), v44, v45);
      return;
    }
    v46 = (objc_class *)objc_opt_class();
    NSStringFromClass(v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fakeResponseOperationResultByClassNameByItemID(*(void **)(a1 + 32), v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v50, v51, (uint64_t)v47);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v52)
    {
LABEL_36:

      goto LABEL_37;
    }
    objc_msgSend_fakeResponseOperationLifetimeByClassName(*(void **)(a1 + 32), v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v55, v56, (uint64_t)v47);
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_integerValue(v57, v58, v59) < 2)
    {
      if (objc_msgSend_integerValue(v57, v60, v61) == 1)
      {
        objc_msgSend_fakeResponseOperationResultByClassNameByItemID(*(void **)(a1 + 32), v70, v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectForKey_(v72, v73, (uint64_t)v47);

        objc_msgSend_fakeResponseOperationLifetimeByClassName(*(void **)(a1 + 32), v74, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectForKey_(v76, v77, (uint64_t)v47);

        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        objc_msgSend_allValues(v52, v78, v79);
        v65 = objc_claimAutoreleasedReturnValue();
        v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v80, (uint64_t)&v124, v128, 16);
        if (v81)
        {
          v84 = v81;
          v85 = *(_QWORD *)v125;
          do
          {
            for (i = 0; i != v84; ++i)
            {
              if (*(_QWORD *)v125 != v85)
                objc_enumerationMutation(v65);
              objc_msgSend_v2(*(void **)(*((_QWORD *)&v124 + 1) + 8 * i), v82, v83);
              v87 = objc_claimAutoreleasedReturnValue();
              v88 = (void *)v87;
              if (v87)
                (*(void (**)(uint64_t, _QWORD))(v87 + 16))(v87, 0);

            }
            v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v82, (uint64_t)&v124, v128, 16);
          }
          while (v84);
        }
      }
      else
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v89 = (void *)*MEMORY[0x1E0C952B0];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        v65 = v89;
        *(_DWORD *)buf = 134217984;
        v130 = objc_msgSend_integerValue(v57, v119, v120);
        _os_log_error_impl(&dword_1BE990000, v65, OS_LOG_TYPE_ERROR, "A fake response is being tracked that has an invalid lifetime of %li", buf, 0xCu);
      }
    }
    else
    {
      v62 = (void *)MEMORY[0x1E0CB37E8];
      v63 = objc_msgSend_integerValue(v57, v60, v61);
      objc_msgSend_numberWithInteger_(v62, v64, v63 - 1);
      v65 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_fakeResponseOperationLifetimeByClassName(*(void **)(a1 + 32), v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v65, v47);

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
LABEL_33:
    v90 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      loga = v90;
      v94 = (objc_class *)objc_opt_class();
      NSStringFromClass(v94);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      v96 = *(void **)(a1 + 40);
      objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v96, v97, 1, 0, 0);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKPropertiesStyleString(v121, v98, v99);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(*(void **)(a1 + 40), v101, 0, 1, 0);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKPropertiesStyleString(v102, v103, v104);
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v130 = (uint64_t)v95;
      v131 = 2048;
      v132 = v96;
      v133 = 2114;
      v134 = v100;
      v135 = 2112;
      v136 = v105;
      v137 = 2112;
      v138 = v52;
      _os_log_error_impl(&dword_1BE990000, loga, OS_LOG_TYPE_ERROR, "Asking URL Request <%{public}@: %p; %{public}@, %@> to return fake operation result %@",
        buf,
        0x34u);

    }
    objc_msgSend_CKMapValues_(v52, v91, (uint64_t)&unk_1E782F260);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFakeResponseOperationResultByItemID_(*(void **)(a1 + 40), v93, (uint64_t)v92);

    goto LABEL_36;
  }
  objc_msgSend_fakeErrorsByClassName(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (objc_class *)objc_opt_class();
  NSStringFromClass(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v13, (uint64_t)v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14 || (objc_msgSend_firstObject(v14, v15, v16), (v17 = objc_claimAutoreleasedReturnValue()) == 0))
  {

    goto LABEL_14;
  }
  v19 = (void *)v17;
  objc_msgSend_removeObjectAtIndex_(v14, v18, 0);
  if (!objc_msgSend_count(v14, v20, v21))
  {
    objc_msgSend_fakeErrorsByClassName(*(void **)(a1 + 32), v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (objc_class *)objc_opt_class();
    NSStringFromClass(v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v24, v27, (uint64_t)v26);

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v28 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
  {
    log = v28;
    v106 = (objc_class *)objc_opt_class();
    NSStringFromClass(v106);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = *(void **)(a1 + 40);
    objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v108, v109, 1, 0, 0);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKPropertiesStyleString(v110, v111, v112);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(*(void **)(a1 + 40), v114, 0, 1, 0);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKPropertiesStyleString(v115, v116, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v130 = (uint64_t)v107;
    v131 = 2048;
    v132 = v108;
    v133 = 2114;
    v134 = v113;
    v135 = 2112;
    v136 = v118;
    v137 = 2112;
    v138 = v19;
    _os_log_error_impl(&dword_1BE990000, log, OS_LOG_TYPE_ERROR, "Prematurely failing request <%{public}@: %p; %{public}@, %@> with error %@ because that's what you asked for",
      buf,
      0x34u);

  }
  v31 = *(void **)(a1 + 40);
  objc_msgSend_v1(v19, v29, v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v31, v33, (uint64_t)v32);

  objc_msgSend_v2(v19, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  if (v36)
  {
    objc_msgSend_v2(v19, v37, v38);
    v39 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v39[2](v39, 0);

  }
}

void sub_1BE99522C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1BE995248(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  int v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_alloc_init(MEMORY[0x1E0D03758]);
  objc_msgSend_operationID(v4, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOperationId_(v5, v9, (uint64_t)v8);

  objc_msgSend_operationType(v4, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOperationType_(v5, v13, (uint64_t)v12);

  v14 = *(void **)(a1 + 32);
  objc_msgSend_operationGroupID(v4, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v14, v18, (uint64_t)v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOperationGroup_(v5, v20, (uint64_t)v19);

  objc_msgSend_operationGroupID(v4, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  if (v23)
  {
    v26 = (void *)v23;
    objc_msgSend_operationGroup(v5, v24, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v27)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v28 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v30 = v28;
        objc_msgSend_operationID(v4, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_operationGroupID(v4, v34, v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = 138412546;
        v38 = v33;
        v39 = 2112;
        v40 = v36;
        _os_log_error_impl(&dword_1BE990000, v30, OS_LOG_TYPE_ERROR, "Operation Group Not Found, Unable to associate operation %@ with operation group %@.", (uint8_t *)&v37, 0x16u);

      }
    }
  }

  return v5;
}

void sub_1BE995438(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  id v19;

  v4 = (objc_class *)MEMORY[0x1E0D03750];
  v5 = a3;
  v19 = objc_alloc_init(v4);
  objc_msgSend_operationGroupID(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOperationGroupId_(v19, v9, (uint64_t)v8);

  objc_msgSend_operationGroupName(v5, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOperationGroupName_(v19, v13, (uint64_t)v12);

  v14 = *(void **)(a1 + 32);
  objc_msgSend_operationGroupID(v5, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setObject_forKeyedSubscript_(v14, v18, (uint64_t)v19, v17);
}

void sub_1BE995878(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE996340(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  char v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  const char *v29;
  _QWORD block[5];
  id v31;
  char v32;

  objc_msgSend_hash(*(void **)(a1 + 32), a2, a3);
  kdebug_trace();
  if (objc_msgSend_isParsing(*(void **)(a1 + 32), v4, v5))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v28, v29, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDProtobufResponseBodyParser.m"), 176, CFSTR("Someone is parsing on another thread!"));

  }
  objc_msgSend_setIsParsing_(*(void **)(a1 + 32), v6, 1);
  objc_msgSend_tailParserData(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = *(void **)(a1 + 40);
  if (v10)
  {
    if (v13)
    {
      objc_msgSend_tailParserData(*(void **)(a1 + 32), v11, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendData_(v14, v15, *(_QWORD *)(a1 + 40));

    }
    objc_msgSend_tailParserData(*(void **)(a1 + 32), v11, v12);
    v16 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v16 = objc_msgSend_mutableCopy(v13, v11, v12);
  }
  v18 = (void *)v16;
  objc_msgSend_setParserData_(*(void **)(a1 + 32), v17, v16);

  v19 = dispatch_group_create();
  v21 = objc_msgSend__parseObjects_group_(*(void **)(a1 + 32), v20, 0, v19);
  objc_msgSend_setIsParsing_(*(void **)(a1 + 32), v22, 0);
  objc_msgSend_hash(*(void **)(a1 + 32), v23, v24);
  kdebug_trace();
  if (*(_QWORD *)(a1 + 48))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v25, v26);
    CKGetGlobalQueue();
    v27 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BE9C2A58;
    block[3] = &unk_1E7833168;
    v32 = v21;
    block[4] = *(_QWORD *)(a1 + 32);
    v31 = *(id *)(a1 + 48);
    dispatch_group_notify(v19, v27, block);

  }
}

void sub_1BE996710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9967CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE996ADC(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  _QWORD v29[5];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_requiresConfiguration(*(void **)(a1 + 32), a2, a3);
  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_msgSend_container(v7, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 1645, CFSTR("You must set the container"));

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(void **)(a1 + 32);
      v15 = v11;
      objc_msgSend_requestUUID(v14, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v18;
      v32 = 2114;
      v33 = v21;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires configuration, getting it\"", buf, 0x16u);

    }
    objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operation(*(void **)(a1 + 32), v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_1BEA5815C;
    v29[3] = &unk_1E7830560;
    v29[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_fetchConfigurationForOperation_withCompletionHandler_(v22, v26, (uint64_t)v25, v29);

  }
  else
  {
    objc_msgSend__fetchContainerScopedUserID(v7, v4, v5);
  }
}

uint64_t sub_1BE996CF0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v30;
  const char *v31;
  int v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_requiresDeviceID(*(void **)(a1 + 32), a2, a3);
  v7 = *(void **)(a1 + 32);
  if (!v6)
    return objc_msgSend__acquireZoneGates(v7, v4, v5);
  objc_msgSend_container(v7, v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 1747, CFSTR("You must set the container"));

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(void **)(a1 + 32);
    v15 = v11;
    objc_msgSend_requestUUID(v14, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543618;
    v33 = v18;
    v34 = 2114;
    v35 = v21;
    _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires device id, getting it\"", (uint8_t *)&v32, 0x16u);

  }
  objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deviceID(v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDeviceID_(*(void **)(a1 + 32), v26, (uint64_t)v25);

  return objc_msgSend__acquireZoneGates(*(void **)(a1 + 32), v27, v28);
}

void sub_1BE997254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE997270(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  _QWORD v32[5];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_requiresAppPartitionURL(*(void **)(a1 + 32), a2, a3);
  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_msgSend_container(v7, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 1606, CFSTR("You must set the container"));

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(void **)(a1 + 32);
      v15 = v11;
      objc_msgSend_requestUUID(v14, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v18;
      v35 = 2114;
      v36 = v21;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires a url for the app partition, getting it\"", buf, 0x16u);

    }
    objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_serverType(*(void **)(a1 + 32), v23, v24);
    objc_msgSend_operation(*(void **)(a1 + 32), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1BEA5809C;
    v32[3] = &unk_1E7830F00;
    v32[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_fetchPublicURLForServerType_operation_completionHandler_(v22, v29, v25, v28, v32);

  }
  else
  {
    MEMORY[0x1E0DE7D20](v7, sel__setupPrivateDatabaseURL, v5);
  }
}

void sub_1BE997494(void **a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id *v23;
  id v24;
  void *v25;
  const char *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  _QWORD v33[4];
  _QWORD v34[2];
  id v35;
  id v36;
  uint8_t buf[4];
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95280]
    && objc_msgSend_checkAndClearUnitTestOverrides_(a1[4], a2, (uint64_t)CFSTR("ForceFetchGlobalConfig")))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    v5 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE990000, v4, OS_LOG_TYPE_INFO, "Forcing a fetch of the global config", buf, 2u);
    }
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend_globalConfiguration(a1[5], a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v6;
  if (v5)
  {

    v9 = 0;
LABEL_17:
    v21 = a1[4];
    v22 = a1[5];
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = sub_1BEBAA198;
    v33[3] = &unk_1E78361E8;
    v23 = (id *)v34;
    v24 = v21;
    v25 = a1[5];
    v34[0] = v24;
    v34[1] = v25;
    v36 = a1[7];
    v35 = a1[6];
    objc_msgSend__fetchGlobalConfigForOperation_completionHandler_(v22, v26, (uint64_t)v24, v33);

    v27 = v36;
    goto LABEL_18;
  }
  if (!v6)
  {
    objc_msgSend_deviceContext(a1[4], v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadataCache(v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_globalConfiguration(v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setGlobalConfiguration_(a1[5], v17, (uint64_t)v16);

    objc_msgSend_globalConfiguration(a1[5], v18, v19);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9)
      goto LABEL_17;
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v20 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v9;
      _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Fetched global configuration from metadata cache: %@", buf, 0xCu);
    }
  }
  if (objc_msgSend_isExpired(v9, v7, v8))
    goto LABEL_17;
  v28 = a1[7];
  if (!v28)
    goto LABEL_19;
  v29 = a1[6];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = sub_1BE9B8BE8;
  v30[3] = &unk_1E782EC68;
  v23 = &v32;
  v32 = v28;
  v9 = v9;
  v31 = v9;
  dispatch_async(v29, v30);
  v27 = v31;
LABEL_18:

LABEL_19:
}

void sub_1BE997E58(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_callbackQueue(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(id *)(a1 + 32);
  ck_call_or_dispatch_async_if_not_key();

}

void sub_1BE997F00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  os_signpost_id_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _QWORD *v27;
  os_log_t *v28;
  void *v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  os_log_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  void *v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  int v55;
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = voucher_copy();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 328);
  *(_QWORD *)(v3 + 328) = v2;

  objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_identifier(v16, v17, v18);

    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      LOWORD(v55) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v13, OS_SIGNPOST_EVENT, v19, "CKDURLRequest", "Establishing connection", (uint8_t *)&v55, 2u);
    }

  }
  objc_msgSend_hash(*(void **)(a1 + 32), v8, v9);
  kdebug_trace();
  objc_msgSend_metrics(*(void **)(a1 + 32), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_connections(v22, v23, v24);
  objc_msgSend_setConnections_(v22, v26, v25 + 1);

  v27 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v28 = (os_log_t *)MEMORY[0x1E0C952E0];
  v29 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(void **)(a1 + 32);
    v32 = v29;
    objc_msgSend_requestUUID(v31, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = 138543362;
    v56 = v35;
    _os_log_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"requestForEstablishedConnection\"", (uint8_t *)&v55, 0xCu);

  }
  objc_msgSend_valueForHTTPHeaderField_(*(void **)(a1 + 40), v30, *MEMORY[0x1E0C94850]);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (*v27 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v37 = *v28;
  if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
  {
    v50 = *(void **)(a1 + 32);
    v51 = v37;
    objc_msgSend_requestUUID(v50, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = 138543618;
    v56 = v54;
    v57 = 2112;
    v58 = v36;
    _os_log_debug_impl(&dword_1BE990000, v51, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"originalRequest header UUID=%@\"", (uint8_t *)&v55, 0x16u);

  }
  v40 = objc_msgSend_mutableCopy(*(void **)(a1 + 40), v38, v39);
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v42 = *(void **)(v41 + 40);
  *(_QWORD *)(v41 + 40) = v40;

  if (objc_msgSend_hasRequestBody(*(void **)(a1 + 32), v43, v44))
  {
    v47 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    objc_msgSend_requestBodyStream(*(void **)(a1 + 32), v45, v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setHTTPBodyStream_(v47, v49, (uint64_t)v48);

  }
}

void sub_1BE998418(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BE99844C(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BE998480(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BE9984B4(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BE9984E8(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_1BE99851C(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  os_activity_scope_state_s v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_osActivity(WeakRetained, v2, v3, 0, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    os_activity_scope_enter(v5, &v8);

    objc_msgSend__recordFetchesAvailable(v4, v6, v7);
    os_activity_scope_leave(&v8);
  }

}

void sub_1BE998580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE998934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE998A24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE998A38(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  id v48;

  v48 = a2;
  v7 = a3;
  if (!v7)
  {
    objc_msgSend_publicCloudDBURL(v48, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend_publicCloudDBURL(v48, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPublicCloudDBURL_(*(void **)(a1 + 32), v12, (uint64_t)v11);

    }
    objc_msgSend_publicShareServiceURL(v48, v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend_publicShareServiceURL(v48, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPublicShareServiceURL_(*(void **)(a1 + 32), v17, (uint64_t)v16);

    }
    objc_msgSend_publicDeviceServiceURL(v48, v14, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend_publicDeviceServiceURL(v48, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPublicDeviceServiceURL_(*(void **)(a1 + 32), v22, (uint64_t)v21);

    }
    objc_msgSend_publicCodeServiceURL(v48, v19, v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      objc_msgSend_publicCodeServiceURL(v48, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPublicCodeServiceURL_(*(void **)(a1 + 32), v27, (uint64_t)v26);

    }
    objc_msgSend_publicMetricsServiceURL(v48, v24, v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (v28)
    {
      objc_msgSend_publicMetricsServiceURL(v48, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPublicMetricsServiceURL_(*(void **)(a1 + 32), v32, (uint64_t)v31);

    }
    objc_msgSend_containerScopedUserID(v48, v29, v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      objc_msgSend_containerScopedUserID(v48, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setContainerScopedUserID_(*(void **)(a1 + 32), v37, (uint64_t)v36);

    }
    objc_msgSend_orgAdminUserID(v48, v34, v35);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if (v38)
    {
      objc_msgSend_orgAdminUserID(v48, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setOrgAdminUserID_(*(void **)(a1 + 32), v42, (uint64_t)v41);

    }
    if (objc_msgSend_environment(v48, v39, v40) != -1)
    {
      v45 = objc_msgSend_environment(v48, v43, v44);
      objc_msgSend_setCachedEnvironment_(*(void **)(a1 + 32), v46, v45);
    }
  }
  v47 = *(_QWORD *)(a1 + 40);
  if (v47)
    (*(void (**)(uint64_t, id, id))(v47 + 16))(v47, v48, v7);

}

void sub_1BE998C78(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  char isEqualToString;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  int v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      v17 = *(void **)(a1 + 48);
      v18 = *(void **)(a1 + 56);
      v19 = *(_QWORD *)(a1 + 64);
      v58 = 134218496;
      v59 = v17;
      v60 = 2048;
      v61 = v18;
      v62 = 2048;
      v63 = v19;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Sent body data of length %lld (%lld/%lld)", (uint8_t *)&v58, 0x20u);
    }

  }
  objc_msgSend_taskDescription(*(void **)(a1 + 40), v5, v6);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_taskDescription(v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v20, v27, (uint64_t)v26);

  v29 = (void *)*MEMORY[0x1E0C952F8];
  if ((isEqualToString & 1) != 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v29);
    v30 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEBUG))
    {
      v50 = *(void **)(a1 + 32);
      v51 = v30;
      objc_msgSend_requestUUID(v50, v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = *(void **)(a1 + 48);
      v56 = *(_QWORD *)(a1 + 56);
      v57 = *(void **)(a1 + 64);
      v58 = 138544130;
      v59 = v54;
      v60 = 2048;
      v61 = v55;
      v62 = 2048;
      v63 = v56;
      v64 = 2048;
      v65 = v57;
      _os_log_debug_impl(&dword_1BE990000, v51, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"URLSession:task:didSendBodyData: %lld totalBytesSent: %lld totalBytesExpectedToSend: %lld\"", (uint8_t *)&v58, 0x2Au);

    }
    objc_msgSend_requestProgressBlock(*(void **)(a1 + 32), v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (v33 && (*(_QWORD *)(a1 + 56) & 0x8000000000000000) == 0)
    {
      v34 = *(_QWORD *)(a1 + 64);

      if (v34 < 0)
        return;
      objc_msgSend_requestProgressBlock(*(void **)(a1 + 32), v35, v36);
      v37 = (id)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, _QWORD, uint64_t))v37 + 2))(v37, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 1);
      goto LABEL_19;
    }

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v29);
    v38 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v39 = *(void **)(a1 + 32);
      v37 = v38;
      objc_msgSend_requestUUID(v39, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = *(_QWORD *)(a1 + 40);
      objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = 138544130;
      v59 = v42;
      v60 = 2114;
      v61 = v45;
      v62 = 2112;
      v63 = v46;
      v64 = 2112;
      v65 = v49;
      _os_log_impl(&dword_1BE990000, (os_log_t)v37, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", (uint8_t *)&v58, 0x2Au);

LABEL_19:
    }
  }
}

void sub_1BE998FDC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  _QWORD *v24;
  os_log_t *v25;
  os_log_t v26;
  const char *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  os_log_t v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  id v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  const char *v100;
  void *v101;
  const char *v102;
  void *v103;
  const char *v104;
  void *v105;
  const char *v106;
  void *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  os_log_t v116;
  const char *v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  os_log_t v121;
  const char *v122;
  void *v123;
  NSObject *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  const char *v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  os_log_t v140;
  const char *v141;
  os_log_t v142;
  const char *v143;
  uint64_t v144;
  void *v145;
  NSObject *v146;
  const char *v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  const char *v156;
  const char *v157;
  uint64_t v158;
  os_log_t v159;
  const char *v160;
  void *v161;
  NSObject *v162;
  const char *v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  NSObject *v169;
  const char *v170;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  void *v175;
  void *v176;
  NSObject *v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint8_t buf[4];
  void *v183;
  __int16 v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Finishing", buf, 2u);
    }

  }
  objc_msgSend_requestDidComplete(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_response(*(void **)(a1 + 32), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueForHTTPHeaderField_(v19, v20, 0x1E7840D88);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = (_QWORD *)MEMORY[0x1E0C95300];
  v25 = (os_log_t *)MEMORY[0x1E0C952E0];
  if (v21)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v26 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_INFO))
    {
      v28 = *(void **)(a1 + 32);
      v29 = v26;
      objc_msgSend_requestUUID(v28, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v183 = v32;
      v184 = 2114;
      v185 = (uint64_t)v21;
      _os_log_impl(&dword_1BE990000, v29, OS_LOG_TYPE_INFO, "req: %{public}@, \"Server requested an AutoBugCapture snapshot to be triggered with reason: %{public}@\"", buf, 0x16u);

    }
    objc_msgSend_setServerProvidedAutoBugCaptureReason_(*(void **)(a1 + 32), v27, (uint64_t)v21);
  }
  objc_msgSend_response(*(void **)(a1 + 32), v22, v23);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueForHTTPHeaderField_(v33, v34, 0x1E7840DA8);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    if (*v24 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v37 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_INFO))
    {
      v38 = *(void **)(a1 + 32);
      v39 = v37;
      objc_msgSend_requestUUID(v38, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v183 = v42;
      v184 = 2114;
      v185 = (uint64_t)v35;
      _os_log_impl(&dword_1BE990000, v39, OS_LOG_TYPE_INFO, "req: %{public}@, \"Server requested a Tap-To-Radar prompt with reason: %{public}@\"", buf, 0x16u);

    }
    v43 = (void *)objc_opt_new();
    objc_msgSend_setTitle_(v43, v44, (uint64_t)v35);
    v45 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    objc_msgSend_appendFormat_(v45, v46, (uint64_t)CFSTR("Reason: %@\n"), v35);
    objc_msgSend_container(*(void **)(a1 + 32), v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerID(v49, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerIdentifier(v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v45, v56, (uint64_t)CFSTR("Container: %@\n"), v55);

    objc_msgSend_container(*(void **)(a1 + 32), v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_account(v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dsid(v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v45, v66, (uint64_t)CFSTR("DSID: %@\n"), v65);

    objc_msgSend_operation(*(void **)(a1 + 32), v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_topmostParentOperation(v69, v70, v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationID(v72, v73, v74);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v45, v76, (uint64_t)CFSTR("Operation ID: %@\n"), v75);

    objc_msgSend_requestUUID(*(void **)(a1 + 32), v77, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v45, v80, (uint64_t)CFSTR("Request UUID: %@"), v79);

    objc_msgSend_setRadarDescription_(v43, v81, (uint64_t)v45);
    objc_msgSend_response(*(void **)(a1 + 32), v82, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForHTTPHeaderField_(v84, v85, 0x1E7840DC8);
    v86 = (void *)objc_claimAutoreleasedReturnValue();

    if (v86)
    {
      objc_msgSend_componentsSeparatedByString_(v86, v87, (uint64_t)CFSTR("|"));
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v89, v90, v91))
      {
        objc_msgSend_objectAtIndexedSubscript_(v89, v92, 0);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setComponentName_(v43, v95, (uint64_t)v94);

      }
      if ((unint64_t)objc_msgSend_count(v89, v92, v93) >= 2)
      {
        objc_msgSend_objectAtIndexedSubscript_(v89, v96, 1);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setComponentVersion_(v43, v99, (uint64_t)v98);

      }
      if ((unint64_t)objc_msgSend_count(v89, v96, v97) >= 3)
      {
        objc_msgSend_objectAtIndexedSubscript_(v89, v100, 2);
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setComponentID_(v43, v102, (uint64_t)v101);

      }
    }
    objc_msgSend_response(*(void **)(a1 + 32), v87, v88);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForHTTPHeaderField_(v103, v104, 0x1E7840DE8);
    v105 = (void *)objc_claimAutoreleasedReturnValue();

    if (v105)
      objc_msgSend_setRelatedRadar_(v43, v106, (uint64_t)v105);
    objc_msgSend_setServerProvidedTapToRadarRequest_(*(void **)(a1 + 32), v106, (uint64_t)v43);

  }
  v107 = *(void **)(a1 + 32);
  v108 = *(_QWORD *)(a1 + 40);
  if (v108)
  {
    objc_msgSend_finishWithError_(v107, v36, v108);
    goto LABEL_45;
  }
  if ((objc_msgSend_isHandlingAuthRetry(v107, v36, 0) & 1) != 0)
    goto LABEL_45;
  objc_msgSend_response(*(void **)(a1 + 32), v109, v110);
  v111 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v111)
  {
    if (*v24 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v121 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      v123 = *(void **)(a1 + 32);
      v124 = v121;
      objc_msgSend_requestUUID(v123, v125, v126);
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      v128 = *(_QWORD *)(a1 + 32);
      v129 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v183 = v127;
      v184 = 2112;
      v185 = v128;
      v186 = 2112;
      v187 = v129;
      _os_log_impl(&dword_1BE990000, v124, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received a didCompleteWithError without an error but no response from the server. Treating the following task as an unknown error: %@ %@\"", buf, 0x20u);

    }
    v130 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v122, *MEMORY[0x1E0C94B20], 1000, CFSTR("Received a didCompleteWithError without receiving a response from the server"));
LABEL_44:
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(v130, v132, (uint64_t)v131);

    goto LABEL_45;
  }
  if (objc_msgSend_needsAuthRetry(*(void **)(a1 + 32), v112, v113))
  {
    if (*v24 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v116 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
    {
      v168 = *(void **)(a1 + 32);
      v169 = v116;
      objc_msgSend_requestUUID(v168, v170, v171);
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v173, v174);
      v175 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v183 = v172;
      v184 = 2114;
      v185 = (uint64_t)v175;
      _os_log_debug_impl(&dword_1BE990000, v169, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"%{public}@ request is marked as needing auth retry\"", buf, 0x16u);

    }
    objc_msgSend_setNeedsAuthRetry_(*(void **)(a1 + 32), v117, 0);
    v120 = *(void **)(a1 + 32);
LABEL_38:
    objc_msgSend__handleAuthFailure(v120, v118, v119);
    goto LABEL_45;
  }
  objc_msgSend_response(*(void **)(a1 + 32), v114, v115);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = objc_msgSend_statusCode(v133, v134, v135);

  if ((unint64_t)(objc_msgSend_responseStatusCode(*(void **)(a1 + 32), v136, v137) - 200) >= 0x64)
  {
    if (*v24 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v142 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      v145 = *(void **)(a1 + 32);
      v146 = v142;
      objc_msgSend_requestUUID(v145, v147, v148);
      v149 = (void *)objc_claimAutoreleasedReturnValue();
      v152 = objc_msgSend_responseStatusCode(*(void **)(a1 + 32), v150, v151);
      *(_DWORD *)buf = 138543618;
      v183 = v149;
      v184 = 2048;
      v185 = v152;
      _os_log_impl(&dword_1BE990000, v146, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Warn: request failed with http status %ld\"", buf, 0x16u);

    }
    v153 = objc_msgSend_responseStatusCode(*(void **)(a1 + 32), v143, v144);
    v120 = *(void **)(a1 + 32);
    if (v153 != 401)
    {
      objc_msgSend_response(v120, v118, v119);
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      CKErrorFromHTTPResponse();
      v155 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v156, (uint64_t)v155);
      goto LABEL_45;
    }
    goto LABEL_38;
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    if ((objc_msgSend_didReceiveResponseBodyData(*(void **)(a1 + 32), v138, v139) & 1) != 0
      || !objc_msgSend_expectsResponseBody(*(void **)(a1 + 32), v157, v158))
    {
      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v157, 0);
      goto LABEL_45;
    }
    if (*v24 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v159 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      v161 = *(void **)(a1 + 32);
      v162 = v159;
      objc_msgSend_requestUUID(v161, v163, v164);
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      v166 = *(_QWORD *)(a1 + 32);
      v167 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v183 = v165;
      v184 = 2112;
      v185 = v166;
      v186 = 2112;
      v187 = v167;
      _os_log_impl(&dword_1BE990000, v162, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received a didCompleteWithError without an error but no response body where one was expected. Treating the following task as an unknown error: %@ %@\"", buf, 0x20u);

    }
    v130 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v160, *MEMORY[0x1E0C94B20], 1000, CFSTR("Received a didCompleteWithError without an error but no response body where one was expected"));
    goto LABEL_44;
  }
  if (*v24 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v140 = *v25;
  if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
  {
    v176 = *(void **)(a1 + 32);
    v177 = v140;
    objc_msgSend_requestUUID(v176, v178, v179);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    v181 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v183 = v180;
    v184 = 2112;
    v185 = v181;
    _os_log_error_impl(&dword_1BE990000, v177, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Parser failed to parse with error %@\"", buf, 0x16u);

  }
  objc_msgSend_finishWithError_(*(void **)(a1 + 32), v141, *(_QWORD *)(a1 + 56));
LABEL_45:

}

void sub_1BE999AA0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  const __CFString *v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  const char *v61;
  const char *v62;
  const __CFString *v63;
  _QWORD v64[4];
  _QWORD v65[5];

  v65[4] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v64[0] = CFSTR("applicationID");
  objc_msgSend_applicationID(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v65[0] = v9;
  v64[1] = CFSTR("containerID");
  objc_msgSend_containerID(v6, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v65[1] = v12;
  v64[2] = CFSTR("personaID");
  objc_msgSend_personaID(v6, v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)v15;
  if (v15)
    v19 = (const __CFString *)v15;
  else
    v19 = &stru_1E7838F48;
  v65[2] = v19;
  v64[3] = CFSTR("accountID");
  objc_msgSend_accountID(*(void **)(a1 + 32), v16, v17);
  v20 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)v20;
  if (v20)
    v23 = (const __CFString *)v20;
  else
    v23 = &stru_1E7838F48;
  v65[3] = v23;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v21, (uint64_t)v65, v64, 4);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E0C950E0], v25, (uint64_t)v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = CFSTR("tokenRegistered");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v27, (uint64_t)&v63, 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v1(v26, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v2(v26, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_select_from_where_bindings_(v3, v35, (uint64_t)v28, CFSTR("AppContainerAccount"), v31, v34);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v36, v37, v38))
  {
    objc_msgSend_objectAtIndexedSubscript_(v36, v39, 0);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_tokenRegistered(*(void **)(a1 + 40), v42, v43) == -1)
    {
      objc_msgSend_objectForKeyedSubscript_(v41, v44, (uint64_t)CFSTR("tokenRegistered"));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend_integerValue(v45, v46, v47);
      objc_msgSend_setTokenRegistered_(*(void **)(a1 + 40), v49, v48);

    }
  }
  v50 = (void *)objc_msgSend_mutableCopy(v24, v39, v40);
  objc_msgSend_containerOptions(*(void **)(a1 + 40), v51, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v54, (uint64_t)v53, CFSTR("containerOptions"));

  v55 = (void *)MEMORY[0x1E0CB37E8];
  v58 = objc_msgSend_tokenRegistered(*(void **)(a1 + 40), v56, v57);
  objc_msgSend_numberWithInteger_(v55, v59, v58);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v61, (uint64_t)v60, CFSTR("tokenRegistered"));

  objc_msgSend_insertOrReplaceInto_values_(v3, v62, (uint64_t)CFSTR("AppContainerAccount"), v50);
}

void sub_1BE999F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE999F2C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;

  objc_msgSend_childOperations(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v4);
  objc_msgSend_childOperations(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v7, v8, *(_QWORD *)(a1 + 40));

  objc_sync_exit(v4);
  objc_msgSend_finishedChildOperationIDs(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v11);
  objc_msgSend_finishedChildOperationIDs(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationID(*(void **)(a1 + 40), v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v14, v18, (uint64_t)v17);

  objc_sync_exit(v11);
  objc_msgSend_combineMetricsWithOperation_(*(void **)(a1 + 32), v19, *(_QWORD *)(a1 + 40));
  objc_msgSend_childOperationsGroup(*(void **)(a1 + 32), v20, v21);
  v22 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v22);

}

void sub_1BE99A008(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE99A468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE99AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BE99AC9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE99ACB0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint8_t v14[16];

  objc_msgSend_sandboxExtensions(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_count(v4, v5, v6);

  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v14 = 0;
      _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Sending sandbox extensions to client...", v14, 2u);
    }
    v11 = *(void **)(a1 + 40);
    objc_msgSend_sandboxExtensions(*(void **)(a1 + 32), v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_consumeSandboxExtensions_reply_(v11, v13, (uint64_t)v12, &unk_1E782FBC0);

  }
}

void sub_1BE99BB50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE99BCEC(uint64_t a1, const char *a2)
{
  void **v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  os_signpost_id_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  char isEqualToString;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  char v36;
  void *v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  os_log_t *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  _BYTE *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  const char *v73;
  uint64_t v74;
  void *v75;
  CKDURLResponseOverrideProxy *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  void *v82;
  const char *v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  int v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  os_log_t v109;
  dispatch_semaphore_t v110;
  objc_class *v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  NSObject *v116;
  const char *v117;
  const char *v118;
  void *v119;
  void *v120;
  NSObject *v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  _QWORD v128[5];
  NSObject *v129;
  _BYTE *v130;
  _BYTE buf[24];
  uint64_t (*v132)(uint64_t, uint64_t);
  __int128 v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v3 = (void **)(a1 + 32);
  objc_msgSend_valueForHTTPHeaderField_(*(void **)(a1 + 32), a2, *MEMORY[0x1E0C94850]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_statusCode(*v3, v5, v6);
  objc_msgSend_signpost(*(void **)(a1 + 40), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend_signpost(*(void **)(a1 + 40), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v13, v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 40), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_identifier(v19, v20, v21);

    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v7;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v16, OS_SIGNPOST_EVENT, v22, "CKDURLRequest", "Received response %{public}@ with status code %zd", buf, 0x16u);
    }

  }
  objc_msgSend_taskDescription(*(void **)(a1 + 48), v11, v12);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_taskDescription(v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v23, v30, (uint64_t)v29);

  if ((isEqualToString & 1) != 0)
  {
    if (v4)
    {
      objc_msgSend_requestUUID(*(void **)(a1 + 40), v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend_isEqualToString_(v34, v35, (uint64_t)v4);

      if ((v36 & 1) == 0)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v37 = (void *)*MEMORY[0x1E0C952E0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
        {
          v38 = *(void **)(a1 + 40);
          v39 = v37;
          objc_msgSend_requestUUID(v38, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v43, v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_requestUUID(*(void **)(a1 + 40), v46, v47);
          v48 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          *(_QWORD *)&buf[4] = v42;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v45;
          *(_WORD *)&buf[22] = 2114;
          v132 = v48;
          LOWORD(v133) = 2114;
          *(_QWORD *)((char *)&v133 + 2) = v4;
          _os_log_impl(&dword_1BE990000, v39, OS_LOG_TYPE_INFO, "req: %{public}@, \"Warn: %{public}@ sent request UUID %{public}@, received %{public}@\"", buf, 0x2Au);

        }
      }
    }
    v49 = objc_msgSend_isCancelled(*(void **)(a1 + 40), v32, v33) ^ 1;
    v50 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v51 = (os_log_t *)MEMORY[0x1E0C952E0];
    v52 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v55 = *(void **)(a1 + 40);
      v56 = v52;
      objc_msgSend_requestUUID(v55, v57, v58);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      *(_QWORD *)&buf[4] = v59;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2048;
      v132 = (uint64_t (*)(uint64_t, uint64_t))v7;
      LOWORD(v133) = 2048;
      *(_QWORD *)((char *)&v133 + 2) = v49;
      _os_log_impl(&dword_1BE990000, v56, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received response UUID:%{public}@, status:%ld, responseDisposition:%ld\"", buf, 0x2Au);

    }
    v60 = (_BYTE *)MEMORY[0x1E0C95280];
    if (*MEMORY[0x1E0C95280] && (sub_1BEA550B8(*(void **)(a1 + 40), v53, v54) & 1) == 0)
    {
      v76 = [CKDURLResponseOverrideProxy alloc];
      v77 = *(_QWORD *)(a1 + 32);
      objc_msgSend_unitTestOverrides(*(void **)(a1 + 40), v78, v79);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = (void *)objc_msgSend_initWithResponse_overrides_(v76, v81, v77, v80);
      objc_msgSend_setResponse_(*(void **)(a1 + 40), v83, (uint64_t)v82);

    }
    else
    {
      objc_msgSend_setResponse_(*(void **)(a1 + 40), v53, *(_QWORD *)(a1 + 32));
    }
    objc_msgSend_shared(CKDTrafficLogger, v61, v62);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_requestUUID(*(void **)(a1 + 40), v85, v86);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_response(*(void **)(a1 + 40), v88, v89);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logResponseWithRequestUUID_response_completionHandler_(v84, v91, (uint64_t)v87, v90, &unk_1E7831190);

    if (*v60)
    {
      if ((objc_msgSend_isErrorInducerRequest(*(void **)(a1 + 40), v92, v93) & 1) == 0)
      {
        objc_msgSend_operation(*(void **)(a1 + 40), v94, v95);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_operationInfo(v96, v97, v98);
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        v102 = objc_msgSend_wantsDaemonRequestCallbacks(v99, v100, v101);

        if (v102)
        {
          objc_msgSend_operation(*(void **)(a1 + 40), v103, v104);
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_clientOperationCallbackProxy(v105, v106, v107);
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          if (v108)
          {
            if (*v50 != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v109 = *v51;
            if (os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
            {
              v120 = *(void **)(a1 + 40);
              v121 = v109;
              objc_msgSend_requestUUID(v120, v122, v123);
              v124 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v125, v126);
              v127 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v124;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v127;
              _os_log_debug_impl(&dword_1BE990000, v121, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"Request %{public}@ calling out to client about lifecycle transition\"", buf, 0x16u);

            }
            v110 = dispatch_semaphore_create(0);
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x3032000000;
            v132 = sub_1BE9BAF98;
            *(_QWORD *)&v133 = sub_1BE9BAD80;
            *((_QWORD *)&v133 + 1) = 0;
            v111 = (objc_class *)objc_opt_class();
            NSStringFromClass(v111);
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_testRequestProperties(*(void **)(a1 + 40), v113, v114);
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            v128[0] = MEMORY[0x1E0C809B0];
            v128[1] = 3221225472;
            v128[2] = sub_1BEA5A548;
            v128[3] = &unk_1E78311B8;
            v128[4] = *(_QWORD *)(a1 + 40);
            v130 = buf;
            v116 = v110;
            v129 = v116;
            objc_msgSend_handleDaemonRequestWillReceiveWithClassName_testRequestProperties_replyBlock_(v108, v117, (uint64_t)v112, v115, v128);

            dispatch_semaphore_wait(v116, 0xFFFFFFFFFFFFFFFFLL);
            v119 = *(void **)(*(_QWORD *)&buf[8] + 40);
            if (v119)
              objc_msgSend_takeActionOnURLRequest_(v119, v118, *(_QWORD *)(a1 + 40));

            _Block_object_dispose(buf, 8);
          }

        }
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v63 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v64 = *(void **)(a1 + 40);
      v65 = v63;
      objc_msgSend_requestUUID(v64, v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 48);
      objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      *(_QWORD *)&buf[4] = v68;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v71;
      *(_WORD *)&buf[22] = 2112;
      v132 = v72;
      LOWORD(v133) = 2112;
      *(_QWORD *)((char *)&v133 + 2) = v75;
      _os_log_impl(&dword_1BE990000, v65, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my session %@\"", buf, 0x2Au);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1BE99C490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE99C4B0(void **a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  char isEqualToString;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  unsigned __int8 v45;
  id v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  int v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  NSObject *v86;
  void *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  NSObject *v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  NSObject *v101;
  _QWORD block[4];
  id v103;
  _QWORD v104[4];
  NSObject *v105;
  _QWORD v106[4];
  NSObject *v107;
  uint8_t buf[4];
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  void *v113;
  __int16 v114;
  void *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(a1[4], a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(a1[4], v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(a1[4], v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      v19 = objc_msgSend_length(a1[5], v17, v18);
      *(_DWORD *)buf = 134349056;
      v109 = v19;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Received data of length %{public}tu", buf, 0xCu);
    }

  }
  v20 = a1[5];
  objc_msgSend_taskDescription(a1[6], v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_urlSessionTask(a1[4], v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_taskDescription(v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v23, v30, (uint64_t)v29);

  v32 = (void *)*MEMORY[0x1E0C952F8];
  if ((isEqualToString & 1) != 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v32);
    v33 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v36 = a1[4];
      v37 = v33;
      objc_msgSend_requestUUID(v36, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend_length(v20, v41, v42);
      *(_DWORD *)buf = 138543618;
      v109 = (uint64_t)v40;
      v110 = 2048;
      v111 = v43;
      _os_log_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:dataTask:_didReceiveData:completionHandler: %ld bytes\"", buf, 0x16u);

    }
    v44 = (id *)a1[4];
    if (!*MEMORY[0x1E0C95280])
    {
      objc_msgSend_setDidReceiveResponseBodyData_(v44, v34, 1);
      goto LABEL_23;
    }
    if (!v44[10] || (v45 = sub_1BEA550B8(v44, v34, v35), v44 = (id *)a1[4], (v45 & 1) != 0))
    {
LABEL_16:
      objc_msgSend_setDidReceiveResponseBodyData_(v44, v34, 1);
      objc_msgSend_clientProvidedAdditionalHeaderValues(a1[4], v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v49, v50, (uint64_t)CFSTR("TestName"));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend_isEqualToString_(v51, v52, (uint64_t)CFSTR("TestEmptyResponseBody"));

      if (v53)
        objc_msgSend_setDidReceiveResponseBodyData_(a1[4], v54, 0);
LABEL_23:
      objc_msgSend_response(a1[4], v54, v55);
      v58 = objc_claimAutoreleasedReturnValue();
      v71 = objc_msgSend_expectedContentLength(v58, v69, v70);
      objc_msgSend_responseProgressBlock(a1[4], v72, v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v74)
        goto LABEL_29;
      if (v71 == -1)
      {

        v77 = 0;
      }
      else
      {

        v77 = v71;
        if (v71 < 0)
        {
LABEL_29:
          objc_msgSend_responseBodyParser(a1[4], v75, v76);
          v82 = objc_claimAutoreleasedReturnValue();
          v84 = MEMORY[0x1E0C809B0];
          if (v82)
          {
            v85 = (void *)v82;
            v86 = dispatch_group_create();
          }
          else
          {
            objc_msgSend_valueForHTTPHeaderField_(v58, v83, 0x1E7840C68);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_defaultParserForContentType_(a1[4], v88, (uint64_t)v87);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setResponseBodyParser_(a1[4], v89, (uint64_t)v85);

            v86 = dispatch_group_create();
            if (!v85)
            {
LABEL_33:
              dispatch_group_enter(v86);
              objc_msgSend_shared(CKDTrafficLogger, v91, v92);
              v93 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_requestUUID(a1[4], v94, v95);
              v96 = (void *)objc_claimAutoreleasedReturnValue();
              v104[0] = v84;
              v104[1] = 3221225472;
              v104[2] = sub_1BE9C2664;
              v104[3] = &unk_1E782EA40;
              v97 = v86;
              v105 = v97;
              objc_msgSend_logPartialResponseObjectDataWithRequestUUID_objectData_completionHandler_(v93, v98, (uint64_t)v96, v20, v104);

              if (a1[7])
              {
                objc_msgSend_lifecycleQueue(a1[4], v99, v100);
                v101 = objc_claimAutoreleasedReturnValue();
                block[0] = v84;
                block[1] = 3221225472;
                block[2] = sub_1BE9C2658;
                block[3] = &unk_1E782EFD8;
                v103 = a1[7];
                dispatch_group_notify(v97, v101, block);

              }
              goto LABEL_36;
            }
          }
          dispatch_group_enter(v86);
          v106[0] = v84;
          v106[1] = 3221225472;
          v106[2] = sub_1BEA5AA28;
          v106[3] = &unk_1E782EDA8;
          v86 = v86;
          v107 = v86;
          objc_msgSend_processData_completionHandler_(v85, v90, (uint64_t)v20, v106);

          goto LABEL_33;
        }
      }
      objc_msgSend_responseProgressBlock(a1[4], v75, v76);
      v78 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v81 = objc_msgSend_countOfBytesReceived(a1[6], v79, v80);
      ((void (**)(_QWORD, uint64_t, uint64_t, BOOL))v78)[2](v78, v81, v77, v71 != -1);

      goto LABEL_29;
    }
    if (!*((_BYTE *)v44 + 88))
    {
      v46 = v44[10];

      *((_BYTE *)a1[4] + 88) = 1;
      v44 = (id *)a1[4];
      v20 = v46;
      goto LABEL_16;
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v32);
    v56 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v57 = a1[4];
      v58 = v56;
      objc_msgSend_requestUUID(v57, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(a1[4], v62, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = a1[6];
      objc_msgSend_urlSessionTask(a1[4], v66, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v109 = (uint64_t)v61;
      v110 = 2114;
      v111 = (uint64_t)v64;
      v112 = 2112;
      v113 = v65;
      v114 = 2112;
      v115 = v68;
      _os_log_impl(&dword_1BE990000, v58, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", buf, 0x2Au);

LABEL_36:
    }
  }

}

uint64_t sub_1BE99CAA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  os_signpost_id_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = voucher_copy();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 328);
  *(_QWORD *)(v3 + 328) = v2;

  objc_msgSend_setIsHandlingAuthRetry_(*(void **)(a1 + 32), v5, 0);
  objc_msgSend_setDidReceiveResponseBodyData_(*(void **)(a1 + 32), v6, 0);
  objc_msgSend_signpost(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v12, v13, v14);
    v15 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_identifier(v18, v19, v20);

    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      objc_msgSend_requestUUID(*(void **)(a1 + 32), v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(*(void **)(a1 + 32), v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = 138412546;
      v46 = v24;
      v47 = 2112;
      v48 = v27;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v21, "CKDURLRequest", "Identifier=%{signpost.description:attribute}@ Operation=%{signpost.description:attribute}@ ", (uint8_t *)&v45, 0x16u);

    }
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v10, v11);
  kdebug_trace();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v28 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(void **)(a1 + 32);
    v32 = v28;
    objc_msgSend_requestUUID(v31, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = 138543618;
    v46 = v35;
    v47 = 2114;
    v48 = v38;
    _os_log_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Performing\"", (uint8_t *)&v45, 0x16u);

  }
  objc_msgSend_validateAnonymousUserIDPropagation(*(void **)(a1 + 32), v29, v30);
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), v39, v40) & 1) != 0
    || objc_msgSend_isFinished(*(void **)(a1 + 32), v41, v42))
  {
    return objc_msgSend_finishWithError_(*(void **)(a1 + 32), v41, 0);
  }
  else
  {
    return objc_msgSend__validateAccountAccess(*(void **)(a1 + 32), v41, v43);
  }
}

void sub_1BE99CDC0(uint64_t a1)
{
  void *v2;
  dispatch_block_t v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  id v12;

  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = sub_1BE9B3898;
  v10 = &unk_1E782F4D0;
  v2 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v2;
  v3 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &v7);
  objc_msgSend_accountStatusWorkloop(*(void **)(a1 + 32), v4, v5, v7, v8, v9, v10, v11);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v6, v3);

}

void sub_1BE99D1D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE99D978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE99DA80(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  const __CFString *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD v36[5];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  const __CFString *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isErrorInducerRequest(*(void **)(a1 + 32), a2, a3) & 1) != 0)
  {
    v6 = 0;
    v7 = objc_msgSend_count(0, v4, v5);
  }
  else
  {
    objc_msgSend_zoneIDsToLock(*(void **)(a1 + 32), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend_count(v6, v10, v11);
  }
  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(void **)(a1 + 32);
      v16 = v12;
      objc_msgSend_requestUUID(v15, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend_expectDelayBeforeRequestBegins(*(void **)(a1 + 32), v23, v24);
      v26 = CFSTR("false");
      *(_DWORD *)buf = 138543874;
      v38 = v19;
      if (v25)
        v26 = CFSTR("true");
      v39 = 2112;
      v40 = v22;
      v41 = 2114;
      v42 = v26;
      _os_log_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%@ Requires zone id gates, grabbing them from gatekeeper, expectDelay %{public}@\"", buf, 0x20u);

    }
    objc_msgSend_container(*(void **)(a1 + 32), v13, v14);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_gatekeeper(v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = *(void **)(a1 + 32);
    v34 = objc_msgSend_expectDelayBeforeRequestBegins(v31, v32, v33);
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = sub_1BEA58D0C;
    v36[3] = &unk_1E7830FB8;
    v36[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_registerWaiter_forZoneIDs_expectDelayBeforeRequestBegins_completionHandler_(v30, v35, (uint64_t)v31, v6, v34, v36);

  }
  else
  {
    objc_msgSend__prepareAuthTokens(*(void **)(a1 + 32), v8, v9);
  }

}

uint64_t sub_1BE99DFE8(uint64_t a1, const char *a2)
{
  uint64_t result;

  result = objc_msgSend__lockedHasTCCAuthorization_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE99ED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE99F258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location,id a31)
{
  uint64_t v31;

  objc_destroyWeak(&location);
  objc_destroyWeak(&a31);
  objc_destroyWeak((id *)(v31 - 128));
  _Unwind_Resume(a1);
}

void sub_1BE99F430(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  id v27;
  _QWORD *v28;
  NSObject *v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  const char *v71;
  void *started;
  const char *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  NSObject *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  os_signpost_id_t v88;
  const char *v89;
  uint64_t v90;
  _QWORD *v91;
  void *v92;
  const char *v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  NSObject *v97;
  void *v98;
  const char *v99;
  void *v100;
  const char *v101;
  void *v102;
  void *v103;
  void *v104;
  NSObject *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  const char *v113;
  void *v114;
  const char *v115;
  void *v116;
  void *v117;
  void *v118;
  _QWORD block[5];
  id v120;
  id v121;
  id v122;
  id v123;
  uint8_t buf[4];
  id v125;
  __int16 v126;
  void *v127;
  __int16 v128;
  void *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  objc_msgSend_urlSessionTask(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v5, v6);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v112, v113, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 2242, CFSTR("The URL session data task should be nil"));

  }
  objc_msgSend_response(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v8, v9);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v114, v115, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 2243, CFSTR("Response should be nil"));

  }
  objc_msgSend_setRequest_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 40));
  objc_msgSend_setResponseBodyParser_(*(void **)(a1 + 32), v10, 0);
  objc_msgSend_setUrlSession_(*(void **)(a1 + 32), v11, 0);
  objc_msgSend_requestOptions(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_networkingDelegate(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sharedManager(MEMORY[0x1E0D03780], v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_request(*(void **)(a1 + 32), v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = *(_QWORD *)(a1 + 32);
  v123 = 0;
  objc_msgSend_createDataTaskWithRequest_options_delegate_sessionHandle_(v20, v25, (uint64_t)v23, v14, v24, &v123);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v123;

  v28 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v29 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    v125 = v27;
    v126 = 2112;
    v127 = v26;
    v128 = 2112;
    v129 = v17;
    _os_log_debug_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEBUG, "For session %@, task %@, set up networking delegate %@", buf, 0x20u);
  }
  v31 = *(void **)(a1 + 32);
  if (v26)
  {
    objc_msgSend_setUrlSession_(*(void **)(a1 + 32), v30, (uint64_t)v27);
    objc_msgSend_setUrlSessionTask_(*(void **)(a1 + 32), v32, (uint64_t)v26);
    if (*v28 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v117 = v17;
    v118 = v14;
    v33 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v36 = *(void **)(a1 + 32);
      v37 = v33;
      objc_msgSend_requestUUID(v36, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__CFNetworkTaskIdentifierString(*(void **)(a1 + 32), v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v125 = v40;
      v126 = 2114;
      v127 = v43;
      v128 = 2112;
      v129 = v46;
      _os_log_impl(&dword_1BE990000, v37, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@: Starting request with URL session data task %@\"", buf, 0x20u);

    }
    objc_msgSend_date(MEMORY[0x1E0C99D68], v34, v35, v27);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setDateRequestWentOut_(*(void **)(a1 + 32), v48, (uint64_t)v47);

    objc_msgSend_metrics(*(void **)(a1 + 32), v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metrics(*(void **)(a1 + 32), v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metrics(*(void **)(a1 + 32), v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_startDate(v57, v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_date(MEMORY[0x1E0C99D68], v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metrics(*(void **)(a1 + 32), v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_startDate(v66, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceDate_(v63, v70, (uint64_t)v69);
    started = (void *)objc_msgSend_newRangeWithOperationState_startDate_duration_(v54, v71, 0, v60);
    objc_msgSend_addRange_(v51, v73, (uint64_t)started);

    objc_msgSend_signpost(*(void **)(a1 + 32), v74, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = v116;
    if (v76)
    {
      objc_msgSend_signpost(*(void **)(a1 + 32), v77, v78);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_log(v79, v80, v81);
      v82 = objc_claimAutoreleasedReturnValue();

      objc_msgSend_signpost(*(void **)(a1 + 32), v83, v84);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = objc_msgSend_identifier(v85, v86, v87);

      if (v88 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v82))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1BE990000, v82, OS_SIGNPOST_EVENT, v88, "CKDURLRequest", "Resuming", buf, 2u);
      }

    }
    objc_msgSend_hash(*(void **)(a1 + 32), v77, v78);
    kdebug_trace();
    v91 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v89, v90);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v92, v93, (uint64_t)CFSTR("FakeRequestCFNetworkError"));
      v94 = (void *)objc_claimAutoreleasedReturnValue();

      if (v94)
      {
        dispatch_get_global_queue(0, 0);
        v97 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_1BEA5947C;
        block[3] = &unk_1E782F4A8;
        block[4] = *(_QWORD *)(a1 + 32);
        v120 = v116;
        v121 = v26;
        v122 = v94;
        dispatch_async(v97, block);

LABEL_22:
LABEL_30:
        v17 = v117;
        v14 = v118;
        goto LABEL_31;
      }
      objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v95, v96);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v100, v101, (uint64_t)CFSTR("SilentlyDropNetworkRequest"));
      v102 = (void *)objc_claimAutoreleasedReturnValue();

      if (v102)
      {
        if (*v91 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v103 = (void *)*MEMORY[0x1E0C952E0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
        {
          v104 = *(void **)(a1 + 32);
          v105 = v103;
          objc_msgSend_requestUUID(v104, v106, v107);
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v109, v110);
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v125 = v108;
          v126 = 2114;
          v127 = v111;
          _os_log_impl(&dword_1BE990000, v105, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@: Dropping network request; you asked for it\"",
            buf,
            0x16u);

        }
        goto LABEL_22;
      }
    }
    objc_msgSend_resume(v26, v89, v90);
    goto LABEL_30;
  }
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v30, *MEMORY[0x1E0C94B20], 1000, CFSTR("Can't create a NSURLSessionDataTask, failing the request"));
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v31, v99, (uint64_t)v98);

LABEL_31:
}

void sub_1BE9A02BC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  char isEqualToString;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  char v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  os_signpost_id_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  const char *v108;
  void *started;
  const char *v110;
  const char *v111;
  void *v112;
  void (**v113)(void *, _QWORD);
  const char *v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  NSObject *v125;
  const char *v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  os_signpost_id_t v131;
  void *v132;
  const char *v133;
  void *v134;
  void *v135;
  NSObject *v136;
  const char *v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  void *v146;
  _QWORD aBlock[5];
  id v148;
  id v149;
  uint8_t buf[4];
  void *v151;
  __int16 v152;
  void *v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  void *v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      v17 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v151 = v17;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Task completed with error: %@", buf, 0xCu);
    }

  }
  objc_msgSend_hash(*(void **)(a1 + 32), v5, v6);
  kdebug_trace();
  objc_msgSend_taskDescription(*(void **)(a1 + 48), v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_taskDescription(v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v20, v27, (uint64_t)v26);

  v29 = (void *)*MEMORY[0x1E0C952F8];
  if ((isEqualToString & 1) != 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v29);
    v30 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(void **)(a1 + 32);
      v34 = v30;
      objc_msgSend_requestUUID(v33, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v151 = v37;
      v152 = 2112;
      v153 = v38;
      _os_log_impl(&dword_1BE990000, v34, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:task:didCompleteWithError: %@\"", buf, 0x16u);

    }
    objc_msgSend__timingData(*(void **)(a1 + 48), v31, v32);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v39, v40, (uint64_t)CFSTR("_kCFNTimingDataConnectionReused"));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend_BOOLValue(v41, v42, v43);

    if ((v44 & 1) == 0)
    {
      objc_msgSend_signpost(*(void **)(a1 + 32), v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      if (v47)
      {
        objc_msgSend_signpost(*(void **)(a1 + 32), v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_log(v50, v51, v52);
        v53 = objc_claimAutoreleasedReturnValue();

        objc_msgSend_signpost(*(void **)(a1 + 32), v54, v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = objc_msgSend_identifier(v56, v57, v58);

        if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v53))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1BE990000, v53, OS_SIGNPOST_EVENT, v59, "CKDURLRequest", "Connection created", buf, 2u);
        }

      }
      objc_msgSend_hash(*(void **)(a1 + 32), v48, v49);
      kdebug_trace();
      objc_msgSend_metrics(*(void **)(a1 + 32), v60, v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = objc_msgSend_connectionsCreated(v62, v63, v64);
      objc_msgSend_setConnectionsCreated_(v62, v66, v65 + 1);

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 33) = 1;
    objc_msgSend_metrics(*(void **)(a1 + 32), v45, v46);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_countOfBytesSent(*(void **)(a1 + 48), v68, v69);
    v73 = objc_msgSend_bytesUploaded(v67, v71, v72);
    objc_msgSend_setBytesUploaded_(v67, v74, v73 + v70);

    objc_msgSend_metrics(*(void **)(a1 + 32), v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = objc_msgSend_countOfBytesReceived(*(void **)(a1 + 48), v78, v79);
    v83 = objc_msgSend_bytesDownloaded(v77, v81, v82);
    objc_msgSend_setBytesDownloaded_(v77, v84, v83 + v80);

    objc_msgSend__timingData(*(void **)(a1 + 48), v85, v86);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTimingData_(*(void **)(a1 + 32), v88, (uint64_t)v87);

    objc_msgSend_dateRequestWentOut(*(void **)(a1 + 32), v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();

    if (v91)
    {
      objc_msgSend_metrics(*(void **)(a1 + 32), v92, v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_metrics(*(void **)(a1 + 32), v95, v96);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dateRequestWentOut(*(void **)(a1 + 32), v98, v99);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_date(MEMORY[0x1E0C99D68], v101, v102);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dateRequestWentOut(*(void **)(a1 + 32), v104, v105);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_timeIntervalSinceDate_(v103, v107, (uint64_t)v106);
      started = (void *)objc_msgSend_newRangeWithOperationState_startDate_duration_(v97, v108, 1, v100);
      objc_msgSend_addRange_(v94, v110, (uint64_t)started);

      objc_msgSend_setDateRequestWentOut_(*(void **)(a1 + 32), v111, 0);
    }
    objc_msgSend__tearDownStreamWriter(*(void **)(a1 + 32), v92, v93);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1BEA5AF00;
    aBlock[3] = &unk_1E7831228;
    v112 = *(void **)(a1 + 40);
    aBlock[4] = *(_QWORD *)(a1 + 32);
    v148 = v112;
    v149 = *(id *)(a1 + 48);
    v113 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
    objc_msgSend_responseBodyParser(*(void **)(a1 + 32), v114, v115);
    v116 = (void *)objc_claimAutoreleasedReturnValue();

    if (v116)
    {
      objc_msgSend_signpost(*(void **)(a1 + 32), v117, v118);
      v119 = (void *)objc_claimAutoreleasedReturnValue();

      if (v119)
      {
        objc_msgSend_signpost(*(void **)(a1 + 32), v120, v121);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_log(v122, v123, v124);
        v125 = objc_claimAutoreleasedReturnValue();

        objc_msgSend_signpost(*(void **)(a1 + 32), v126, v127);
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        v131 = objc_msgSend_identifier(v128, v129, v130);

        if (v131 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v125))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1BE990000, v125, OS_SIGNPOST_EVENT, v131, "CKDURLRequest", "Parsing response", buf, 2u);
        }

      }
      objc_msgSend_responseBodyParser(*(void **)(a1 + 32), v120, v121);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_finishWithCompletion_(v132, v133, (uint64_t)v113);

    }
    else
    {
      v113[2](v113, 0);
    }

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v29);
    v134 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v135 = *(void **)(a1 + 32);
      v136 = v134;
      objc_msgSend_requestUUID(v135, v137, v138);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v140, v141);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      v143 = *(_QWORD *)(a1 + 48);
      objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v144, v145);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v151 = v139;
      v152 = 2114;
      v153 = v142;
      v154 = 2112;
      v155 = v143;
      v156 = 2112;
      v157 = v146;
      _os_log_impl(&dword_1BE990000, v136, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", buf, 0x2Au);

    }
  }
}

void sub_1BE9A0B5C(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  int IsAttached;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend_processScopedClientProxy(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  IsAttached = objc_msgSend_processIsAttached(v5, v6, v7);

  if (IsAttached)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v15 = 0;
    objc_msgSend_containerProxyFromSetupInfo_containerScopedClientProxy_outError_(WeakRetained, v9, v10, v11, &v15);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v15;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    (*(void (**)(uint64_t, void *, id))(v14 + 16))(v14, v12, v13);

}

void sub_1BE9A10EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;

  if (a2 == 1)
  {
    v10 = objc_begin_catch(exception_object);
    if (objc_msgSend_errorCode(v10, v11, v12) == 1006
      || objc_msgSend_errorCode(v10, v13, v14) == 1009)
    {
      v15 = (void *)MEMORY[0x1E0C94FF8];
      objc_msgSend_reason(v10, v13, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v15, v17, *MEMORY[0x1E0C94B20], 1009, CFSTR("Invalid predicate: %@"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v13, *MEMORY[0x1E0C94B20], 1000, CFSTR("Unknown error %@"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 0;
    }

    if (v9)
      *v9 = objc_retainAutorelease(v18);

    objc_end_catch();
    JUMPOUT(0x1BE9A0F1CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE9A1E10(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;

  objc_msgSend_createAssetAuthorizeGetRequestOptionsHeaderInfoWithKey_value_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    objc_msgSend_assetAuthorizeGetRequestOptions(*(void **)(a1 + 40), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_contentRequestHeaders(v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v9, v10, (uint64_t)v11);

  }
}

void sub_1BE9A281C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9A2868(_QWORD *a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  objc_msgSend__lockedCloudKitAuthTokenWithContainer_error_(v3, a2, v4, &obj);
  v6 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1BE9A2C24(_QWORD *a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  objc_msgSend__lockediCloudAuthTokenWithContainer_error_(v3, a2, v4, &obj);
  v6 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

uint64_t sub_1BE9A4390(void *a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  double v9;
  const char *v10;
  uint64_t v11;
  double v12;
  double v13;
  const char *v14;
  uint64_t v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  char v70;
  uint64_t v71;
  char v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;

  v3 = a3;
  objc_msgSend_startDate(v3, v4, v5);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_duration(v3, v6, v7);
  v9 = v8;
  objc_msgSend_queueing(v3, v10, v11);
  v13 = v12;
  objc_msgSend_executing(v3, v14, v15);
  v17 = v16;
  v81 = objc_msgSend_bytesUploaded(v3, v18, v19);
  v80 = objc_msgSend_bytesDownloaded(v3, v20, v21);
  v79 = objc_msgSend_connections(v3, v22, v23);
  v78 = objc_msgSend_connectionsCreated(v3, v24, v25);
  v77 = objc_msgSend_bytesFulfilledByPeers(v3, v26, v27);
  v76 = objc_msgSend_bytesFulfilledLocally(v3, v28, v29);
  v75 = objc_msgSend_bytesResumed(v3, v30, v31);
  objc_msgSend_totalBytesByChunkProfile(v3, v32, v33);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_chunkCountByChunkProfile(v3, v34, v35);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileCountByChunkProfile(v3, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = objc_msgSend_walrusEnabled(v3, v39, v40);
  v71 = objc_msgSend_zoneishKeysRolled(v3, v41, v42);
  v45 = objc_msgSend_perRecordKeysRolled(v3, v43, v44);
  v48 = objc_msgSend_zoneKeysRolled(v3, v46, v47);
  v51 = objc_msgSend_shareKeysRolled(v3, v49, v50);
  v54 = objc_msgSend_keyRollsSkippedBySizeCheck(v3, v52, v53);
  v57 = objc_msgSend_zoneKeysRemoved(v3, v55, v56);
  v60 = objc_msgSend_zoneishKeysRemoved(v3, v58, v59);
  v63 = objc_msgSend_recordKeysRemoved(v3, v61, v62);
  v66 = objc_msgSend_keysNotRemoved(v3, v64, v65);

  v70 = v72;
  v68 = objc_msgSend_initWithStartDate_duration_queueing_executing_bytesUploaded_bytesDownloaded_connections_connectionsCreated_bytesFulfilledByPeers_bytesFulfilledLocally_bytesResumed_totalBytesByChunkProfile_chunkCountByChunkProfile_fileCountByChunkProfile_walrusEnabled_zoneishKeysRolled_perRecordKeysRolled_zoneKeysRolled_shareKeysRolled_keyRollsSkippedBySizeCheck_zoneKeysRemoved_zoneishKeysRemoved_recordKeysRemoved_keysNotRemoved_(a1, v67, (uint64_t)v82, v81, v80, v79, v78, v77, v9, v13, v17, v76, v75, v74, v73, v38, v70, v71, v45,
          v48,
          v51,
          v54,
          v57,
          v60,
          v63,
          v66);

  return v68;
}

void sub_1BE9A4670(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  int canSyncUsingVersion_forContainerID;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  void *v34;
  const char *v35;
  uint8_t v36[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (!v5 || v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v30 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v36 = 0;
      _os_log_debug_impl(&dword_1BE990000, v30, OS_LOG_TYPE_DEBUG, "Couldn't get server configuration", v36, 2u);
      if (v9)
        goto LABEL_10;
    }
    else if (v9)
    {
LABEL_10:
      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v31, (uint64_t)v9);
LABEL_16:

      goto LABEL_17;
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v31, *MEMORY[0x1E0C947D8], 4, CFSTR("Didn't get any configuration from the server"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  objc_msgSend_container(*(void **)(a1 + 32), v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_applicationBundleIdentifierForContainerAccess(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_container(*(void **)(a1 + 32), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_applicationVersion(v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_container(*(void **)(a1 + 32), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  canSyncUsingVersion_forContainerID = objc_msgSend_applicationWithBundleID_canSyncUsingVersion_forContainerID_(v5, v26, (uint64_t)v13, v19, v25);

  if (!canSyncUsingVersion_forContainerID)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v32 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Application version is not allowed by the server", buf, 2u);
    }
    v34 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v33, *MEMORY[0x1E0C947D8], 18, CFSTR("Application version is not allowed by the server"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(v34, v35, (uint64_t)v9);
    goto LABEL_16;
  }
  objc_msgSend__determineNetworkServiceType(*(void **)(a1 + 32), v28, v29);
LABEL_17:

}

void sub_1BE9A4A80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9A4F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9A52D0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  id v45;

  v6 = a4;
  v7 = a3;
  objc_msgSend_containerID(v7, v8, v9);
  v45 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setupC2MetricsEndpointWithContainer_(a1, v10, (uint64_t)v7);
  objc_msgSend_applicationVersion(v7, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClientProcessVersion_(a1, v14, (uint64_t)v13);

  objc_msgSend_applicationBundleIdentifierForContainerAccess(v7, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClientProcessBundleId_(a1, v18, (uint64_t)v17);

  objc_msgSend_containerID(v7, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerIdentifier(v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setContainer_(a1, v25, (uint64_t)v24);

  objc_msgSend_containerID(v7, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_environment(v28, v29, v30);
  CKContainerEnvironmentString();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEnvironment_(a1, v32, (uint64_t)v31);

  v34 = objc_msgSend_c2AllOperationMetricsReportFrequency_(v6, v33, (uint64_t)v45);
  objc_msgSend_setReportClientOperationFrequency_(a1, v35, v34);
  v37 = objc_msgSend_c2AllOperationMetricsReportFrequencyBase_(v6, v36, (uint64_t)v45);
  objc_msgSend_setReportClientOperationFrequencyBase_(a1, v38, v37);
  v40 = objc_msgSend_c2AllOperationGroupMetricsReportFrequency_(v6, v39, (uint64_t)v45);
  objc_msgSend_setReportOperationGroupFrequency_(a1, v41, v40);
  v43 = objc_msgSend_c2AllOperationGroupMetricsReportFrequencyBase_(v6, v42, (uint64_t)v45);

  objc_msgSend_setReportOperationGroupFrequencyBase_(a1, v44, v43);
}

void sub_1BE9A7944(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_1BE9A7990(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t isCancelled;
  int isFinished;
  void *v8;
  void *v9;
  NSObject *v10;
  objc_class *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  objc_class *v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  isCancelled = objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3);
  if ((_DWORD)isCancelled)
  {
    isFinished = objc_msgSend_isFinished(*(void **)(a1 + 32), v4, v5);
    v8 = (void *)*MEMORY[0x1E0C952F8];
    if (!isFinished)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v8);
      v17 = (void *)*MEMORY[0x1E0C952D0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D0], OS_LOG_TYPE_DEFAULT))
      {
        v20 = v17;
        v21 = (objc_class *)objc_opt_class();
        NSStringFromClass(v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = *(void **)(a1 + 32);
        objc_msgSend_ckShortDescription(v23, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v36 = v22;
        v37 = 2048;
        v38 = v23;
        v39 = 2114;
        v40 = v26;
        _os_log_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p; %{public}@> was cancelled before it started",
          buf,
          0x20u);

      }
      objc_msgSend_transitionToExecuting(*(void **)(a1 + 32), v18, v19);
      v27 = (void *)MEMORY[0x1E0C94FF8];
      v28 = *MEMORY[0x1E0C94B20];
      objc_msgSend_operationID(*(void **)(a1 + 32), v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v27, v32, v28, 1, CFSTR("Operation %@ was cancelled before it started"), v31);
      v10 = objc_claimAutoreleasedReturnValue();

      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v33, (uint64_t)v10);
      goto LABEL_12;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v9 = (void *)*MEMORY[0x1E0C952D0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D0], OS_LOG_TYPE_DEFAULT))
    {
      v10 = v9;
      v11 = (objc_class *)objc_opt_class();
      NSStringFromClass(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(void **)(a1 + 32);
      objc_msgSend_ckShortDescription(v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v36 = v12;
      v37 = 2048;
      v38 = v13;
      v39 = 2114;
      v40 = v16;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p; %{public}@> is already cancelled and finished but it tried to start again",
        buf,
        0x20u);

LABEL_12:
    }
  }
  return isCancelled;
}

void sub_1BE9A7C64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9A8764(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9A87E4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *started;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  char v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  id v44;

  v44 = a2;
  objc_msgSend_metricExecuteStartDate(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startDate(v44, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v5, v9, (uint64_t)v8);
  v11 = v10;

  objc_msgSend_startDate(v44, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  started = (void *)objc_msgSend_newRangeWithOperationState_startDate_duration_(v44, v15, 0, v14, v11);

  objc_msgSend_addRange_(v44, v17, (uint64_t)started);
  if (objc_msgSend_isTopLevelDaemonOperation(*(void **)(a1 + 32), v18, v19))
  {
    objc_msgSend_container(*(void **)(a1 + 32), v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_options(v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_bypassPCSEncryption(v25, v26, v27);

    if ((v28 & 1) == 0)
    {
      objc_msgSend_deviceContext(*(void **)(a1 + 32), v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_accountDataSecurityObserver(v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_container(*(void **)(a1 + 32), v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_account(v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend_isWalrusEnabledForAccount_allowBlockingFetch_(v34, v41, (uint64_t)v40, 0);

      objc_msgSend_setWalrusEnabled_(v44, v43, v42);
    }
  }

}

void sub_1BE9A8A3C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  double v13;
  double v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *started;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  id v28;

  v28 = a2;
  objc_msgSend_metricExecuteStartDate(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_date(MEMORY[0x1E0C99D68], v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metricExecuteStartDate(*(void **)(a1 + 32), v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceDate_(v8, v12, (uint64_t)v11);
    v14 = v13;

    objc_msgSend_startDate(v28, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    started = (void *)objc_msgSend_newRangeWithOperationState_startDate_duration_(v28, v18, 1, v17, v14);

    objc_msgSend_addRange_(v28, v20, (uint64_t)started);
  }
  objc_msgSend_date(MEMORY[0x1E0C99D68], v6, v7);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startDate(v28, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v21, v25, (uint64_t)v24);
  objc_msgSend_setDuration_(v28, v26, v27);

}

void sub_1BE9A92F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9A9D10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9AA018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9AA0A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9AA6F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BE9AA84C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  os_signpost_id_t v21;
  void *v22;
  const char *v23;
  char v24;
  const char *v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  int v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  const char *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  const char *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  int v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  int isEqualToString;
  void *v92;
  const char *v93;
  void *v94;
  const char *v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  void *v136;
  const char *v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  const char *v145;
  uint64_t v146;
  int v147;
  const char *v148;
  uint64_t v149;
  _BYTE *v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  void *v159;
  id v160;
  const char *v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  objc_class *v169;
  id v170;
  const char *v171;
  void *v172;
  const char *v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  const char *v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  const char *v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  const char *v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  const char *v202;
  void *v203;
  const char *v204;
  void *v205;
  const char *v206;
  void *v207;
  const char *v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  const char *v212;
  void *v213;
  void *v214;
  const char *v215;
  void *v216;
  const char *v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  const char *v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  const char *v225;
  uint64_t v226;
  void *v227;
  const char *v228;
  const char *v229;
  uint64_t v230;
  void *v231;
  const char *v232;
  void *v233;
  int shouldCompressBody;
  const char *v235;
  uint64_t v236;
  dispatch_block_t *v237;
  const char *v238;
  int hasRequestBody;
  dispatch_block_t v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  void *v244;
  NSObject *v245;
  const char *v246;
  uint64_t v247;
  void *v248;
  const char *v249;
  uint64_t v250;
  _QWORD *v251;
  void *v252;
  const char *v253;
  void *v254;
  const char *v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  const char *v259;
  const char *v260;
  uint64_t v261;
  void *v262;
  const char *v263;
  uint64_t v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  objc_class *v271;
  void *v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  const char *v277;
  void *v278;
  NSObject *v279;
  const char *v280;
  uint64_t v281;
  void *v282;
  const char *v283;
  uint64_t v284;
  void *v285;
  void *v286;
  NSObject *v287;
  const char *v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  void *v293;
  const char *v294;
  uint64_t v295;
  void *v296;
  void *v297;
  NSObject *v298;
  const char *v299;
  uint64_t v300;
  void *v301;
  const char *v302;
  uint64_t v303;
  void *v304;
  void *v305;
  const char *v306;
  uint64_t v307;
  const char *v308;
  uint64_t v309;
  void *v310;
  NSObject *v311;
  const char *v312;
  uint64_t v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  _QWORD aBlock[4];
  id v320;
  id v321;
  uint8_t buf[4];
  void *v323;
  __int16 v324;
  void *v325;
  __int16 v326;
  _BYTE v327[10];
  __int16 v328;
  int v329;
  __int16 v330;
  uint64_t v331;
  __int16 v332;
  uint64_t v333;
  uint64_t v334;

  v334 = *MEMORY[0x1E0C80C00];
  objc_msgSend_tearDownResources(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_container(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_signpost(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v12, v13, v14);
    v15 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_identifier(v18, v19, v20);

    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v15, OS_SIGNPOST_EVENT, v21, "CKDURLRequest", "Performing", buf, 2u);
    }

  }
  objc_msgSend_hash(*(void **)(a1 + 32), v10, v11);
  kdebug_trace();
  v22 = *(void **)(a1 + 32);
  v321 = 0;
  v24 = objc_msgSend_validate_(v22, v23, (uint64_t)&v321);
  v27 = v321;
  v28 = (_QWORD *)MEMORY[0x1E0C95300];
  if ((v24 & 1) != 0)
  {
    objc_msgSend_url(*(void **)(a1 + 32), v25, v26);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)*MEMORY[0x1E0C952F8];
    if (!v29)
    {
      if (*v28 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v30);
      v165 = (void *)*MEMORY[0x1E0C952E0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
      {
        v297 = *(void **)(a1 + 32);
        v298 = v165;
        objc_msgSend_requestUUID(v297, v299, v300);
        v301 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v302, v303);
        v304 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v323 = v301;
        v324 = 2114;
        v325 = v304;
        _os_log_error_impl(&dword_1BE990000, v298, OS_LOG_TYPE_ERROR, "req: %{public}@, \"%{public}@ Request does not have a URL. Failing.\"", buf, 0x16u);

      }
      v166 = *(void **)(a1 + 32);
      v167 = (void *)MEMORY[0x1E0C94FF8];
      v168 = *MEMORY[0x1E0C94B20];
      v169 = (objc_class *)objc_opt_class();
      NSStringFromClass(v169);
      v170 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v167, v171, v168, 2005, CFSTR("Request (%@) does not have a URL"), v170);
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_finishWithError_(v166, v173, (uint64_t)v172);
      goto LABEL_88;
    }
    if (*v28 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v30);
    v31 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v32 = *(void **)(a1 + 32);
      v33 = v31;
      objc_msgSend_requestUUID(v32, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend_usesBackgroundSession(*(void **)(a1 + 32), v37, v38);
      v42 = objc_msgSend_allowsCellularAccess(*(void **)(a1 + 32), v40, v41);
      v45 = objc_msgSend_allowsExpensiveNetworkAccess(*(void **)(a1 + 32), v43, v44);
      objc_msgSend_timeoutIntervalForRequest(*(void **)(a1 + 32), v46, v47);
      v49 = v48;
      objc_msgSend_timeoutIntervalForResource(*(void **)(a1 + 32), v50, v51);
      *(_DWORD *)buf = 138544898;
      v323 = v36;
      v324 = 2112;
      v325 = v29;
      v326 = 1024;
      *(_DWORD *)v327 = v39;
      *(_WORD *)&v327[4] = 1024;
      *(_DWORD *)&v327[6] = v42;
      v328 = 1024;
      v329 = v45;
      v330 = 2048;
      v331 = v49;
      v332 = 2048;
      v333 = v52;
      _os_log_impl(&dword_1BE990000, v33, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Performing request with URL=%@ background=%d allowCellular=%d allowExpensive=%d (timeouts %.1lfs, %.1lfs)\"", buf, 0x3Cu);

    }
    v53 = objc_alloc(MEMORY[0x1E0C92C28]);
    v55 = (void *)objc_msgSend_initWithURL_(v53, v54, (uint64_t)v29);
    objc_msgSend_httpMethod(*(void **)(a1 + 32), v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setHTTPMethod_(v55, v59, (uint64_t)v58);

    if (objc_msgSend_hasRequestBody(*(void **)(a1 + 32), v60, v61))
    {
      objc_msgSend_requestContentType(*(void **)(a1 + 32), v62, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v65, (uint64_t)v64, 0x1E7840C68);

      objc_msgSend_prepareRequestOperationsForRequest_(*(void **)(a1 + 32), v66, (uint64_t)v55);
    }
    objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v62, v63);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_sendDebugHeader(v67, v68, v69);

    if (v70)
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v71, (uint64_t)CFSTR("DEBUG"), 0x1E7840D48);
    objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_testRunIDHeader(v73, v74, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_length(v76, v77, v78))
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v79, (uint64_t)v76, 0x1E7840D68);
    objc_msgSend_acceptContentType(*(void **)(a1 + 32), v79, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v82, (uint64_t)v81, 0x1E7840BE8);

    objc_msgSend_setValue_forHTTPHeaderField_(v55, v83, (uint64_t)CFSTR("gzip"), 0x1E7840C08);
    objc_msgSend_URL(v55, v84, v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_scheme(v86, v87, v88);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v89, v90, (uint64_t)CFSTR("https"));

    if (isEqualToString)
    {
      sub_1BE9C90DC();
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v93, (uint64_t)v92, 0x1E7840C88);

    }
    sub_1BE9C909C();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v95, (uint64_t)v94, 0x1E7840C48);

    objc_msgSend_requestUUID(*(void **)(a1 + 32), v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v99, (uint64_t)v98, *MEMORY[0x1E0C94850]);

    objc_msgSend_operationIDForProtobuf(*(void **)(a1 + 32), v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v103, (uint64_t)v102, 0x1E7840CC8);

    objc_msgSend_operationGroupID(*(void **)(a1 + 32), v104, v105);
    v106 = (void *)objc_claimAutoreleasedReturnValue();

    if (v106)
    {
      objc_msgSend_operationGroupID(*(void **)(a1 + 32), v107, v108);
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v110, (uint64_t)v109, 0x1E7840CE8);

    }
    objc_msgSend_operationGroupName(*(void **)(a1 + 32), v107, v108);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = objc_msgSend_length(v111, v112, v113);

    if (v114)
    {
      objc_msgSend_container(*(void **)(a1 + 32), v115, v116);
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(v117, v118, v119);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      v123 = objc_msgSend_specialContainerType(v120, v121, v122);

      if (v123 == 5)
      {
        objc_msgSend_operationGroupName(*(void **)(a1 + 32), v124, v125);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_CKProbablySafeHeaderValue(v126, v127, v128);
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setValue_forHTTPHeaderField_(v55, v130, (uint64_t)v129, 0x1E7840D08);

      }
      objc_msgSend_operationGroupName(*(void **)(a1 + 32), v124, v125);
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKBase64EncodedStructuredHeaderValueByteSequence(v131, v132, v133);
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v135, (uint64_t)v134, 0x1E7840D28);

    }
    v318 = v76;
    objc_msgSend_duetPreClearedMode(*(void **)(a1 + 32), v115, v116);
    CKStringForDuetPreClearedMode();
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v137, (uint64_t)v136, 0x1E7840EA8);

    objc_msgSend_applicationBundleIdentifierForContainerAccess(*(void **)(a1 + 32), v138, v139);
    v142 = objc_claimAutoreleasedReturnValue();
    if (v142)
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v140, v142, 0x1E7840E08);
    v317 = (void *)v142;
    objc_msgSend_applicationVersion(v6, v140, v141);
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v144, (uint64_t)v143, 0x1E7840E28);

    v147 = objc_msgSend_includeContainerServerInfo(*(void **)(a1 + 32), v145, v146);
    v150 = (_BYTE *)MEMORY[0x1E0C95280];
    if (v147)
    {
      objc_msgSend_containerID(v6, v148, v149);
      v151 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerIdentifier(v151, v152, v153);
      v154 = (void *)objc_claimAutoreleasedReturnValue();

      if (*v150)
      {
        objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v155, v156);
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v157, v158, (uint64_t)CFSTR("FakeContainerIdentifier"));
        v159 = (void *)objc_claimAutoreleasedReturnValue();

        if (v159)
        {
          v160 = v159;

          v154 = v160;
        }

      }
      if (v154)
        objc_msgSend_setValue_forHTTPHeaderField_(v55, v155, (uint64_t)v154, 0x1E7840E48);

    }
    else
    {
      objc_msgSend_setValue_forHTTPHeaderField_(v55, v148, (uint64_t)CFSTR("com.apple.cloudkit.ckctl.container"), 0x1E7840E48);
    }
    objc_msgSend_containerID(v6, v161, v162);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_environment(v174, v175, v176);
    CKContainerEnvironmentString();
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v178, (uint64_t)v177, 0x1E7840E68);

    if (objc_msgSend_allowsAuthedAccount(*(void **)(a1 + 32), v179, v180)
      && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v181, v182) & 1) == 0)
    {
      objc_msgSend_containerScopedUserID(v6, v181, v182);
      v184 = (void *)objc_claimAutoreleasedReturnValue();
      if (v184)
        objc_msgSend_setValue_forHTTPHeaderField_(v55, v183, (uint64_t)v184, 0x1E7840EC8);

    }
    if (objc_msgSend_usesCloudKitAuthToken(*(void **)(a1 + 32), v181, v182)
      && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v185, v186) & 1) == 0)
    {
      objc_msgSend_cloudKitAuthToken(*(void **)(a1 + 32), v185, v186);
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      if (v188)
        objc_msgSend_setValue_forHTTPHeaderField_(v55, v187, (uint64_t)v188, 0x1E7840EE8);

    }
    if (objc_msgSend_usesiCloudAuthToken(*(void **)(a1 + 32), v185, v186)
      && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v189, v190) & 1) == 0)
    {
      objc_msgSend_account(v6, v189, v190);
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dsid(v191, v192, v193);
      v194 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_iCloudAuthToken(*(void **)(a1 + 32), v195, v196);
      v197 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_length(v194, v198, v199) && objc_msgSend_length(v197, v200, v201))
      {
        v315 = v197;
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v202, (uint64_t)CFSTR("%@:%@"), v194, v197);
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_dataUsingEncoding_(v203, v204, 5);
        v205 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_base64EncodedStringWithOptions_(v205, v206, 0);
        v207 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v208, (uint64_t)CFSTR("Basic %@"), v207);
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_length(v209, v210, v211))
          objc_msgSend_setValue_forHTTPHeaderField_(v55, v212, (uint64_t)v209, 0x1E7840C28);

        v28 = (_QWORD *)MEMORY[0x1E0C95300];
        v197 = v315;
        v150 = (_BYTE *)MEMORY[0x1E0C95280];
      }
      else
      {
        if (*v28 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v213 = (void *)*MEMORY[0x1E0C952E0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
        {
          v316 = v197;
          v310 = *(void **)(a1 + 32);
          v311 = v213;
          objc_msgSend_requestUUID(v310, v312, v313);
          v314 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v323 = v314;
          v324 = 2112;
          v325 = v194;
          v326 = 2112;
          *(_QWORD *)v327 = v316;
          _os_log_error_impl(&dword_1BE990000, v311, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Skipping authorization header field for dsid: %@, iCloudAuthToken: %@\"", buf, 0x20u);

          v197 = v316;
        }
      }

    }
    objc_msgSend_databaseScope(*(void **)(a1 + 32), v189, v190);
    CKDatabaseScopeString();
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forHTTPHeaderField_(v55, v215, (uint64_t)v214, 0x1E7840E88);

    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1BEA5946C;
    aBlock[3] = &unk_1E7831058;
    v170 = v55;
    v320 = v170;
    v216 = _Block_copy(aBlock);
    objc_msgSend_additionalHeaderValues(*(void **)(a1 + 32), v217, v218);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v219, v220, (uint64_t)v216);

    objc_msgSend_traceHeaderValues(*(void **)(a1 + 32), v221, v222);
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v223, v224, (uint64_t)v216);

    objc_msgSend_clientProvidedAdditionalHeaderValues(*(void **)(a1 + 32), v225, v226);
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v227, v228, (uint64_t)v216);

    if (*v150)
    {
      objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v229, v230);
      v231 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v231, v232, (uint64_t)CFSTR("AllowJsonPayloadToBeReturned"));
      v233 = (void *)objc_claimAutoreleasedReturnValue();

      if (v233)
        objc_msgSend_setValue_forHTTPHeaderField_(v170, v229, (uint64_t)CFSTR("1"), CFSTR("X-CloudKit-Test-Json-Payload"));
    }
    shouldCompressBody = objc_msgSend_shouldCompressBody(*(void **)(a1 + 32), v229, v230);
    v237 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
    if (shouldCompressBody)
    {
      objc_msgSend_setValue_forHTTPHeaderField_(v170, v235, (uint64_t)CFSTR("gzip"), CFSTR("Content-Encoding"));
      objc_msgSend_addValue_forHTTPHeaderField_(v170, v238, (uint64_t)CFSTR("no-transform"), CFSTR("Cache-Control"));
    }
    hasRequestBody = objc_msgSend_hasRequestBody(*(void **)(a1 + 32), v235, v236);
    v240 = *v237;
    if (hasRequestBody)
    {
      if (*v28 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v240);
      v241 = (void *)*MEMORY[0x1E0C952E0];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEBUG))
        goto LABEL_82;
      v244 = *(void **)(a1 + 32);
      v245 = v241;
      objc_msgSend_requestUUID(v244, v246, v247);
      v248 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v249, v250);
      v251 = v28;
      v252 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v323 = v248;
      v324 = 2114;
      v325 = v252;
      v253 = "req: %{public}@, \"%{public}@ Outgoing request body is streamed\"";
    }
    else
    {
      if (*v28 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v240);
      v254 = (void *)*MEMORY[0x1E0C952E0];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEBUG))
        goto LABEL_82;
      v305 = *(void **)(a1 + 32);
      v245 = v254;
      objc_msgSend_requestUUID(v305, v306, v307);
      v248 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v308, v309);
      v251 = v28;
      v252 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v323 = v248;
      v324 = 2114;
      v325 = v252;
      v253 = "req: %{public}@, \"%{public}@ Outgoing request body is empty\"";
    }
    _os_log_debug_impl(&dword_1BE990000, v245, OS_LOG_TYPE_DEBUG, v253, buf, 0x16u);

    v28 = v251;
    v237 = (dispatch_block_t *)MEMORY[0x1E0C952F8];

LABEL_82:
    if (objc_msgSend_networkServiceType(*(void **)(a1 + 32), v242, v243))
    {
      if (*v28 != -1)
        dispatch_once(MEMORY[0x1E0C95300], *v237);
      v257 = (void *)*MEMORY[0x1E0C952E0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEBUG))
      {
        v286 = *(void **)(a1 + 32);
        v287 = v257;
        objc_msgSend_requestUUID(v286, v288, v289);
        v290 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v291, v292);
        v293 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_networkServiceType(*(void **)(a1 + 32), v294, v295);
        CKStringForNetworkServiceType();
        v296 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v323 = v290;
        v324 = 2114;
        v325 = v293;
        v326 = 2114;
        *(_QWORD *)v327 = v296;
        _os_log_debug_impl(&dword_1BE990000, v287, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"%{public}@ using custom network service type %{public}@\"", buf, 0x20u);

      }
    }
    v258 = objc_msgSend_networkServiceType(*(void **)(a1 + 32), v255, v256);
    objc_msgSend_setNetworkServiceType_(v170, v259, v258);
    objc_msgSend_shared(CKDTrafficLogger, v260, v261);
    v262 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_requestUUID(*(void **)(a1 + 32), v263, v264);
    v265 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_httpMethod(*(void **)(a1 + 32), v266, v267);
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    v271 = (objc_class *)objc_msgSend_requestMessageClass(*(void **)(a1 + 32), v269, v270);
    NSStringFromClass(v271);
    v272 = (void *)objc_claimAutoreleasedReturnValue();
    v275 = objc_msgSend_parsingStandaloneMessage(*(void **)(a1 + 32), v273, v274);
    objc_msgSend_logRequestWithRequestUUID_request_url_method_messageClass_parsingStandaloneMessage_completionHandler_(v262, v276, (uint64_t)v265, v170, v29, v268, v272, v275, &unk_1E7831078);

    objc_msgSend__loadRequest_(*(void **)(a1 + 32), v277, (uint64_t)v170);
    v172 = v318;
LABEL_88:

    goto LABEL_89;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v163 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
  {
    v278 = *(void **)(a1 + 32);
    v279 = v163;
    objc_msgSend_requestUUID(v278, v280, v281);
    v282 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v283, v284);
    v285 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v323 = v282;
    v324 = 2114;
    v325 = v285;
    v326 = 2112;
    *(_QWORD *)v327 = v27;
    _os_log_error_impl(&dword_1BE990000, v279, OS_LOG_TYPE_ERROR, "req: %{public}@, \"%{public}@ Validation error: [%@]\"", buf, 0x20u);

  }
  objc_msgSend_finishWithError_(*(void **)(a1 + 32), v164, (uint64_t)v27);
LABEL_89:

}

void sub_1BE9AE44C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9AE874(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend_isFinished(WeakRetained, v3, v4))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v6 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v7 = v6;
        objc_msgSend_ckShortDescription(v5, v8, v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543362;
        v13 = v10;
        _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "%{public}@ would've performed a block on the lifecycle queue but it was marked finished before it could.", (uint8_t *)&v12, 0xCu);

      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Would've performed a block on the lifecycle queue but it was deallocated before it could.", (uint8_t *)&v12, 2u);
    }
  }

}

void sub_1BE9AEA24(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (!objc_msgSend_isFinished(WeakRetained, v3, v4))
    {
      v12 = *(_QWORD *)(a1 + 40);
      goto LABEL_13;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v7 = v6;
      objc_msgSend_ckShortDescription(v5, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v10;
      _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "%{public}@ would've performed a block on the lifecycle queue but it was marked finished before it could.", (uint8_t *)&v13, 0xCu);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Would've performed a block on the lifecycle queue but it was deallocated before it could.", (uint8_t *)&v13, 2u);
    }
  }
  v12 = *(_QWORD *)(a1 + 32);
LABEL_13:
  (*(void (**)(void))(v12 + 16))();

}

void sub_1BE9AECE0(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  char isEqualToString;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  void *v50;
  void *v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  char v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  const char *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  char isEqual;
  const char *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  const char *v96;
  const char *v97;
  uint64_t v98;
  int isClientMainBundleAppleExecutable;
  const char *v100;
  uint64_t v101;
  int v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  const char *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  void *v112;
  const char *v113;
  void *v114;
  const char *v115;
  id v116;
  _QWORD v117[4];
  id v118;
  id v119;

  objc_msgSend_inlock_applicationMetadataForApplicationID_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_opt_new();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40), CFSTR("applicationID"));
  v8 = objc_msgSend_adopterProcessType(*(void **)(a1 + 48), v6, v7);
  v13 = objc_msgSend_adopterProcessType(v3, v9, v10);
  v14 = (void *)MEMORY[0x1E0CB37E8];
  v15 = v3;
  v16 = v8 != v13;
  if (v8 != v13)
    v15 = *(void **)(a1 + 48);
  v17 = objc_msgSend_adopterProcessType(v15, v11, v12);
  objc_msgSend_numberWithInteger_(v14, v18, v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v20, (uint64_t)v19, CFSTR("adopterProcessType"));

  objc_msgSend_applicationContainerPath(*(void **)(a1 + 48), v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_applicationContainerPath(v3, v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  if (v23 == (void *)v26)
  {

    v38 = v3;
  }
  else
  {
    v29 = (void *)v26;
    objc_msgSend_applicationContainerPath(*(void **)(a1 + 48), v27, v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_applicationContainerPath(v3, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v30, v34, (uint64_t)v33);

    v38 = v3;
    if ((isEqualToString & 1) == 0)
    {
      v16 = 1;
      objc_msgSend_applicationContainerPath(*(void **)(a1 + 48), v36, v37);
      goto LABEL_8;
    }
  }
  objc_msgSend_applicationContainerPath(v38, v36, v37);
LABEL_8:
  v39 = objc_claimAutoreleasedReturnValue();
  v41 = (void *)v39;
  if (v39)
    objc_msgSend_setObject_forKeyedSubscript_(v4, v40, v39, CFSTR("applicationContainerPath"));
  else
    objc_msgSend_setObject_forKeyedSubscript_(v4, v40, (uint64_t)&stru_1E7838F48, CFSTR("applicationContainerPath"));

  v44 = objc_msgSend_clientSDKVersion(*(void **)(a1 + 48), v42, v43);
  v49 = objc_msgSend_clientSDKVersion(v3, v45, v46);
  v50 = (void *)MEMORY[0x1E0CB37E8];
  v51 = v3;
  if (v44 != v49)
  {
    v51 = *(void **)(a1 + 48);
    v16 = 1;
  }
  v52 = objc_msgSend_clientSDKVersion(v51, v47, v48);
  objc_msgSend_numberWithUnsignedInt_(v50, v53, v52);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v55, (uint64_t)v54, CFSTR("clientSDKVersion"));

  objc_msgSend_containingBundleID(*(void **)(a1 + 48), v56, v57);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containingBundleID(v3, v59, v60);
  v61 = objc_claimAutoreleasedReturnValue();
  if (v58 == (void *)v61)
  {

    v73 = v3;
  }
  else
  {
    v64 = (void *)v61;
    objc_msgSend_containingBundleID(*(void **)(a1 + 48), v62, v63);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containingBundleID(v3, v66, v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_isEqualToString_(v65, v69, (uint64_t)v68);

    v73 = v3;
    if ((v70 & 1) == 0)
    {
      v16 = 1;
      objc_msgSend_containingBundleID(*(void **)(a1 + 48), v71, v72);
      goto LABEL_18;
    }
  }
  objc_msgSend_containingBundleID(v73, v71, v72);
LABEL_18:
  v74 = objc_claimAutoreleasedReturnValue();
  v76 = (void *)v74;
  if (v74)
    objc_msgSend_setObject_forKeyedSubscript_(v4, v75, v74, CFSTR("containingBundleID"));
  else
    objc_msgSend_setObject_forKeyedSubscript_(v4, v75, (uint64_t)&stru_1E7838F48, CFSTR("containingBundleID"));

  objc_msgSend_entitlements(*(void **)(a1 + 48), v77, v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entitlements(v3, v80, v81);
  v82 = objc_claimAutoreleasedReturnValue();
  if (v79 == (void *)v82)
  {

    v94 = v3;
  }
  else
  {
    v85 = (void *)v82;
    objc_msgSend_entitlements(*(void **)(a1 + 48), v83, v84);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_entitlements(v3, v87, v88);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v86, v90, (uint64_t)v89);

    v94 = v3;
    if ((isEqual & 1) == 0)
    {
      v16 = 1;
      objc_msgSend_entitlements(*(void **)(a1 + 48), v92, v93);
      goto LABEL_26;
    }
  }
  objc_msgSend_entitlements(v94, v92, v93);
LABEL_26:
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v96, (uint64_t)v95, CFSTR("entitlements"));

  isClientMainBundleAppleExecutable = objc_msgSend_isClientMainBundleAppleExecutable(*(void **)(a1 + 48), v97, v98);
  v102 = objc_msgSend_isClientMainBundleAppleExecutable(v3, v100, v101);
  v105 = (void *)MEMORY[0x1E0CB37E8];
  if (isClientMainBundleAppleExecutable != v102)
  {
    v106 = objc_msgSend_isClientMainBundleAppleExecutable(*(void **)(a1 + 48), v103, v104);
    objc_msgSend_numberWithBool_(v105, v107, v106);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v4, v109, (uint64_t)v108, CFSTR("isMainBundleAppleExecutable"));

LABEL_29:
    v114 = *(void **)(a1 + 32);
    v117[0] = MEMORY[0x1E0C809B0];
    v117[1] = 3221225472;
    v117[2] = sub_1BEC832F4;
    v117[3] = &unk_1E7838C28;
    v118 = v4;
    v119 = *(id *)(a1 + 40);
    v116 = (id)objc_msgSend_performDatabaseOperation_(v114, v115, (uint64_t)v117);

    goto LABEL_30;
  }
  v110 = objc_msgSend_isClientMainBundleAppleExecutable(v3, v103, v104);
  objc_msgSend_numberWithBool_(v105, v111, v110);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v113, (uint64_t)v112, CFSTR("isMainBundleAppleExecutable"));

  if (v16)
    goto LABEL_29;
LABEL_30:

}

void sub_1BE9AFD90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1BE9AFE10(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _QWORD v54[3];

  v54[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend_compoundPredicateType(a1, v7, v8) != 1)
  {
    if (objc_msgSend_compoundPredicateType(a1, v9, v10))
    {
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v26, *MEMORY[0x1E0C94B20], 1009, CFSTR("Unexpected expression: %@"), a1);
        v28 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v28 = 0;
      }
      goto LABEL_56;
    }
    objc_msgSend_subpredicates(a1, v26, v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v29, v30, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend_compoundPredicateType(v31, v32, v33))
    {
      objc_msgSend_CKDPQueryFiltersWithTranslator_error_(v31, v34, (uint64_t)v6, a4);
      v28 = (id)objc_claimAutoreleasedReturnValue();
LABEL_55:

      goto LABEL_56;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_CKDPQueryFiltersWithTranslator_error_(v31, v35, (uint64_t)v6, 0);
      v36 = (id)objc_claimAutoreleasedReturnValue();
      v39 = v36;
      if (v36 && objc_msgSend_count(v36, v37, v38) == 1)
      {
        objc_msgSend_objectAtIndexedSubscript_(v39, v40, 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 0;
        switch(objc_msgSend_type(v41, v42, v43))
        {
          case 2u:
            objc_msgSend_setType_(v41, v44, 1);
            goto LABEL_48;
          case 3u:
            objc_msgSend_setType_(v41, v44, 4);
            goto LABEL_48;
          case 4u:
            objc_msgSend_setType_(v41, v44, 3);
            goto LABEL_48;
          case 5u:
            objc_msgSend_setType_(v41, v44, 8);
            goto LABEL_48;
          case 6u:
            objc_msgSend_setType_(v41, v44, 7);
            goto LABEL_48;
          case 7u:
            objc_msgSend_setType_(v41, v44, 6);
            goto LABEL_48;
          case 8u:
            objc_msgSend_setType_(v41, v44, 5);
            goto LABEL_48;
          case 9u:
          case 0xAu:
          case 0xBu:
            goto LABEL_49;
          case 0xCu:
            objc_msgSend_setType_(v41, v44, 13);
            goto LABEL_48;
          case 0xDu:
            objc_msgSend_setType_(v41, v44, 12);
            goto LABEL_48;
          case 0xEu:
            objc_msgSend_setType_(v41, v44, 15);
            goto LABEL_48;
          case 0xFu:
            objc_msgSend_setType_(v41, v44, 14);
            goto LABEL_48;
          case 0x10u:
            objc_msgSend_setType_(v41, v44, 17);
            goto LABEL_48;
          case 0x11u:
            objc_msgSend_setType_(v41, v44, 16);
            goto LABEL_48;
          case 0x12u:
            objc_msgSend_setType_(v41, v44, 19);
            goto LABEL_48;
          case 0x13u:
            objc_msgSend_setType_(v41, v44, 18);
            goto LABEL_48;
          case 0x14u:
            objc_msgSend_setType_(v41, v44, 21);
            goto LABEL_48;
          case 0x15u:
            objc_msgSend_setType_(v41, v44, 20);
            goto LABEL_48;
          default:
            objc_msgSend_setType_(v41, v44, 2);
LABEL_48:
            v54[0] = v41;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v45, (uint64_t)v54, 1);
            v28 = (id)objc_claimAutoreleasedReturnValue();
LABEL_49:

            break;
        }
      }
      else
      {
        v28 = 0;
      }

      if (v28)
        goto LABEL_55;
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v46, *MEMORY[0x1E0C94B20], 1009, CFSTR("Invalid NOT predicate: %@"), a1);
        goto LABEL_53;
      }
    }
    else if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v35, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected comparison subpredicate: %@"), a1);
LABEL_53:
      v28 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    }
    v28 = 0;
    goto LABEL_55;
  }
  v11 = (void *)objc_opt_new();
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  objc_msgSend_subpredicates(a1, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v49, v53, 16);
  if (v16)
  {
    v18 = v16;
    v19 = 0;
    v20 = *(_QWORD *)v50;
    while (2)
    {
      v21 = 0;
      v22 = v19;
      do
      {
        if (*(_QWORD *)v50 != v20)
          objc_enumerationMutation(v14);
        v23 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v21);
        v48 = v22;
        objc_msgSend_CKDPQueryFiltersWithTranslator_error_(v23, v17, (uint64_t)v6, &v48);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v48;

        objc_msgSend_addObjectsFromArray_(v11, v25, (uint64_t)v24);
        if (a4 && v19)
        {
          v19 = objc_retainAutorelease(v19);
          *a4 = v19;

          v28 = 0;
          goto LABEL_18;
        }
        ++v21;
        v22 = v19;
      }
      while (v18 != v21);
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v49, v53, 16);
      if (v18)
        continue;
      break;
    }
  }
  else
  {
    v19 = 0;
  }

  v28 = v11;
LABEL_18:

LABEL_56:
  return v28;
}

id sub_1BE9B0248(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  void *v8;
  id v9;
  const char *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  id v17;
  const char *v19;
  id v20;
  void *v21;
  id v22;
  const char *v23;
  id v24;
  const char *v25;
  id v26;
  const char *v27;
  id v28;
  const char *v29;
  id v30;
  const char *v31;
  id v32;
  const char *v33;
  id v34;
  const char *v35;
  id v36;
  const char *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;

  v6 = a3;
  v47 = 0;
  objc_msgSend__parseFullTextSearchUsingContainsTranslator_withError_(a1, v7, (uint64_t)v6, &v47);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v47;
  v11 = v9;
  if (!v8)
  {
    v46 = v9;
    objc_msgSend__parseFullTextSearchFiltersWithTranslator_withError_(a1, v10, (uint64_t)v6, &v46);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v46;

    if (v13)
    {
      v17 = v13;
LABEL_5:
      v12 = v17;
LABEL_6:
      v11 = v14;
      goto LABEL_7;
    }
    if (v14)
      goto LABEL_11;
    if (objc_msgSend_options(a1, v15, v16))
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v19, *MEMORY[0x1E0C94B20], 1009, CFSTR("Predicate comparison options are not supported for expression: %@"), a1);
      v14 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
    v45 = 0;
    objc_msgSend__parseNearFiltersWithTranslator_withError_(a1, v19, (uint64_t)v6, &v45);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v45;
    v14 = v22;
    if (v21)
    {
LABEL_16:
      v17 = v21;
      goto LABEL_5;
    }
    if (!v22)
    {
      v44 = 0;
      objc_msgSend__parseListContainsFiltersWithTranslator_withError_(a1, v23, (uint64_t)v6, &v44);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v44;
      v14 = v24;
      if (v21)
        goto LABEL_16;
      if (!v24)
      {
        v43 = 0;
        objc_msgSend__parseInFiltersWithTranslator_withError_(a1, v25, (uint64_t)v6, &v43);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = v43;
        v14 = v26;
        if (v21)
          goto LABEL_16;
        if (!v26)
        {
          v42 = 0;
          objc_msgSend__parseListContainsAnyFiltersWithTranslator_withError_(a1, v27, (uint64_t)v6, &v42);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v42;
          v14 = v28;
          if (v21)
            goto LABEL_16;
          if (!v28)
          {
            v41 = 0;
            objc_msgSend__parseListContainsAllFiltersWithTranslator_withError_(a1, v29, (uint64_t)v6, &v41);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = v41;
            v14 = v30;
            if (v21)
              goto LABEL_16;
            if (!v30)
            {
              v40 = 0;
              objc_msgSend__parseBeginsWithFiltersWithTranslator_withError_(a1, v31, (uint64_t)v6, &v40);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v32 = v40;
              v14 = v32;
              if (v21)
                goto LABEL_16;
              if (!v32)
              {
                v39 = 0;
                objc_msgSend__parseBetweenFiltersWithTranslator_withError_(a1, v33, (uint64_t)v6, &v39);
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                v34 = v39;
                v14 = v34;
                if (v21)
                  goto LABEL_16;
                if (!v34)
                {
                  v38 = 0;
                  objc_msgSend__parseBasicOperatorFiltersWithTranslator_withError_(a1, v35, (uint64_t)v6, &v38);
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v36 = v38;
                  v14 = v36;
                  if (v21)
                    goto LABEL_16;
                  if (!v36)
                  {
                    if (!a4)
                    {
                      v12 = 0;
                      v11 = 0;
                      goto LABEL_7;
                    }
                    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v37, *MEMORY[0x1E0C94B20], 1009, CFSTR("Unexpected expression: %@"), a1);
                    v20 = (id)objc_claimAutoreleasedReturnValue();
                    v12 = 0;
                    v11 = 0;
                    goto LABEL_14;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_11:
    v12 = 0;
    if (!a4 || !v14)
      goto LABEL_6;
    v20 = objc_retainAutorelease(v14);
    v11 = v20;
    v12 = 0;
LABEL_14:
    *a4 = v20;
    goto LABEL_7;
  }
  v12 = v8;
LABEL_7:

  return v12;
}

id sub_1BE9B0544(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  int isEqualToString;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  int v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  double v47;
  double v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  void *v79;
  const char *v80;
  __CFString *v81;
  uint64_t v82;
  objc_class *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  char v88;
  _QWORD v89[2];

  v89[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_leftExpression(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_comparisonPredicateModifier(a1, v13, v14))
    goto LABEL_2;
  if (objc_msgSend_expressionType(v9, v15, v16) == 4)
  {
    objc_msgSend_function(v9, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v24, v25, (uint64_t)CFSTR("distanceToLocation:fromLocation:"));

    if (isEqualToString)
    {
      if (!objc_msgSend_predicateOperatorType(a1, v22, v23) || objc_msgSend_predicateOperatorType(a1, v27, v28) == 1)
      {
        v31 = objc_msgSend_expressionType(v12, v27, v28);
        v32 = v12;
        v33 = v9;
        if (v31)
        {
          if (a4)
          {
            objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v29, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected search radius on right hand side of operator: %@"), a1);
LABEL_21:
            v43 = (id)objc_claimAutoreleasedReturnValue();
            v17 = 0;
            goto LABEL_22;
          }
          goto LABEL_2;
        }
LABEL_23:
        objc_msgSend_constantValue(v32, v29, v30);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_doubleValue(v44, v45, v46);
        v48 = v47;

        v17 = v33;
        objc_msgSend_arguments(v17, v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = objc_msgSend_count(v51, v52, v53);

        if (v54 != 2)
        {
          if (!a4)
            goto LABEL_3;
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v55, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected expected 2 arguments for function distanceToLocation:fromLocation: %@"), a1);
          v43 = (id)objc_claimAutoreleasedReturnValue();
LABEL_22:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *a4 = v43;
          goto LABEL_4;
        }
        objc_msgSend_arguments(v17, v55, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v57, v58, 0);
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_arguments(v17, v60, v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v62, v63, 1);
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        v69 = objc_msgSend_expressionType(v59, v65, v66);
        v70 = v59;
        if (v69 == 3 || (v71 = objc_msgSend_expressionType(v64, v67, v68), v70 = v64, v71 == 3))
        {
          objc_msgSend_keyPath(v70, v67, v68);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v19 = 0;
        }
        v74 = objc_msgSend_expressionType(v59, v67, v68);
        v75 = v59;
        if (v74 && (v76 = objc_msgSend_expressionType(v64, v72, v73), v75 = v64, v76))
        {
          if (!v19)
          {
            v18 = 0;
            goto LABEL_40;
          }
        }
        else
        {
          objc_msgSend_constantValue(v75, v72, v73);
          v77 = objc_claimAutoreleasedReturnValue();
          v18 = (void *)v77;
          if (!v19)
          {
LABEL_40:
            if (a4)
            {
              objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v72, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected NSKeyPathExpressionType argument for distanceToLocation:fromLocation:"));
              v20 = 0;
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_48;
            }
            goto LABEL_47;
          }
          if (v77)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend__nearFilterWithKey_location_radius_translator_(a1, v78, (uint64_t)v19, v18, v6, v48);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              v89[0] = v79;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v80, (uint64_t)v89, 1);
              v20 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_48:
              goto LABEL_4;
            }
            if (!a4)
            {
LABEL_47:
              v20 = 0;
              goto LABEL_48;
            }
            v87 = (void *)MEMORY[0x1E0C94FF8];
            v82 = *MEMORY[0x1E0C94B20];
            v83 = (objc_class *)objc_opt_class();
            NSStringFromClass(v83);
            v84 = objc_claimAutoreleasedReturnValue();
            v85 = v82;
            v81 = (__CFString *)v84;
            v88 = 0;
            objc_msgSend_errorWithDomain_code_format_(v87, v86, v85, 1009, CFSTR("Expected CLLocation argument for distanceToLocation:fromLocation: but got %@"), v84);
LABEL_45:
            *a4 = (id)objc_claimAutoreleasedReturnValue();
            if ((v88 & 1) == 0)

            goto LABEL_47;
          }
        }
        if (!a4)
        {
          v18 = 0;
          goto LABEL_47;
        }
        v18 = 0;
        v81 = CFSTR("a nil location");
        v88 = 1;
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v72, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected CLLocation argument for distanceToLocation:fromLocation: but got %@"), CFSTR("a nil location"));
        goto LABEL_45;
      }
LABEL_19:
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v27, *MEMORY[0x1E0C94B20], 1009, CFSTR("Searching for locations outside of a specified circular area is not supported: %@"), a1);
        goto LABEL_21;
      }
      goto LABEL_2;
    }
  }
  if (objc_msgSend_expressionType(v12, v22, v23) != 4)
    goto LABEL_2;
  objc_msgSend_function(v12, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_isEqualToString_(v36, v37, (uint64_t)CFSTR("distanceToLocation:fromLocation:"));

  if (!v38)
    goto LABEL_2;
  if (objc_msgSend_predicateOperatorType(a1, v39, v40) != 2 && objc_msgSend_predicateOperatorType(a1, v27, v41) != 3)
    goto LABEL_19;
  v42 = objc_msgSend_expressionType(v9, v27, v41);
  v32 = v9;
  v33 = v12;
  if (!v42)
    goto LABEL_23;
  if (a4)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v29, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected search radius on left hand side of operator: %@"), a1);
    goto LABEL_21;
  }
LABEL_2:
  v17 = 0;
LABEL_3:
  v18 = 0;
  v19 = 0;
  v20 = 0;
LABEL_4:

  return v20;
}

id sub_1BE9B0A34(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  const char *v53;
  void *v55;
  _QWORD v56[2];

  v56[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_leftExpression(a1, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_expressionType(v7, v11, v12);
  v16 = objc_msgSend_expressionType(v10, v14, v15);
  if (objc_msgSend_predicateOperatorType(a1, v17, v18) == 10
    && objc_msgSend_comparisonPredicateModifier(a1, v19, v20) == 2
    && v13 == 3
    && (v16 == 14 || !v16))
  {
    v21 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v7, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v21, v26, (uint64_t)v25);

    objc_msgSend_setType_(v21, v27, 14);
    objc_msgSend_CKExpressionValue(v10, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEB19E08(v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v32, (uint64_t)v31);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v21, v34, (uint64_t)v33);

    v56[0] = v21;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v35, (uint64_t)v56, 1);
LABEL_16:
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_18;
  }
  if (objc_msgSend_predicateOperatorType(a1, v19, v20) != 10
    || objc_msgSend_comparisonPredicateModifier(a1, v36, v37) != 2)
  {
    v38 = 0;
    goto LABEL_18;
  }
  v38 = 0;
  v39 = v13 == 14 || v13 == 0;
  if (v39 && v16 == 3)
  {
    v21 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v10, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v21, v44, (uint64_t)v43);

    objc_msgSend_setType_(v21, v45, 14);
    objc_msgSend_CKExpressionValue(v7, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEB19E08(v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v50, (uint64_t)v49);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v21, v52, (uint64_t)v51);

    v55 = v21;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v53, (uint64_t)&v55, 1);
    goto LABEL_16;
  }
LABEL_18:

  return v38;
}

id sub_1BE9B0CB8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  const char *v37;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_leftExpression(a1, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_expressionType(v7, v11, v12);
  v16 = objc_msgSend_expressionType(v10, v14, v15);
  if (objc_msgSend_predicateOperatorType(a1, v17, v18) == 10
    && objc_msgSend_comparisonPredicateModifier(a1, v19, v20) == 1)
  {
    v21 = 0;
    v22 = v13 == 14 || v13 == 0;
    if (v22 && v16 == 3)
    {
      v23 = (void *)objc_opt_new();
      objc_msgSend_CKExpressionValue(v10, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BE9B2630(v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldName_(v23, v28, (uint64_t)v27);

      objc_msgSend_setType_(v23, v29, 20);
      objc_msgSend_CKExpressionValue(v7, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BEB19E08(v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValueFromObject_(v4, v34, (uint64_t)v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldValue_(v23, v36, (uint64_t)v35);

      v39[0] = v23;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v37, (uint64_t)v39, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

id sub_1BE9B0E68(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  BOOL v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  void *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  BOOL v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  const char *v67;
  void *v68;
  const char *v69;
  const char *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_leftExpression(a1, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_expressionType(v7, v11, v12);
  v16 = objc_msgSend_expressionType(v10, v14, v15);
  if (objc_msgSend_predicateOperatorType(a1, v17, v18) == 10
    && !objc_msgSend_comparisonPredicateModifier(a1, v19, v20)
    && v13 == 3
    && (v16 == 14 || !v16))
  {
    v21 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v7, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v21, v26, (uint64_t)v25);

    objc_msgSend_setType_(v21, v27, 3);
    objc_msgSend_CKExpressionValue(v10, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEB19E08(v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v32, (uint64_t)v31);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v21, v34, (uint64_t)v33);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v35, (uint64_t)&v74, 1, v72, v73, v21, v75);
LABEL_26:
    v55 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_27;
  }
  if (objc_msgSend_predicateOperatorType(a1, v19, v20) == 4
    && objc_msgSend_comparisonPredicateModifier(a1, v36, v37) == 2)
  {
    v38 = v13 == 14 || v13 == 0;
    if (v38 && v16 == 3)
    {
      v21 = (void *)objc_opt_new();
      objc_msgSend_CKExpressionValue(v10, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BE9B2630(v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldName_(v21, v43, (uint64_t)v42);

      objc_msgSend_setType_(v21, v44, 3);
      objc_msgSend_CKExpressionValue(v7, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BEB19E08(v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValueFromObject_(v4, v49, (uint64_t)v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldValue_(v21, v51, (uint64_t)v50);

      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v52, (uint64_t)&v73, 1, v72, v21, v74, v75);
      goto LABEL_26;
    }
  }
  if (objc_msgSend_predicateOperatorType(a1, v36, v37) == 99 && !objc_msgSend_comparisonPredicateModifier(a1, v53, v54))
  {
    v55 = 0;
    v56 = v13 == 14 || v13 == 0;
    if (v56 && v16 == 3)
    {
      v21 = (void *)objc_opt_new();
      objc_msgSend_CKExpressionValue(v10, v57, v58);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BE9B2630(v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldName_(v21, v61, (uint64_t)v60);

      objc_msgSend_setType_(v21, v62, 3);
      objc_msgSend_CKExpressionValue(v7, v63, v64);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BEB19E08(v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldValueFromObject_(v4, v67, (uint64_t)v66);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldValue_(v21, v69, (uint64_t)v68);

      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v70, (uint64_t)&v72, 1, v21, v73, v74, v75);
      goto LABEL_26;
    }
  }
  else
  {
    v55 = 0;
  }
LABEL_27:

  return v55;
}

id sub_1BE9B11B8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_leftExpression(a1, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_predicateOperatorType(a1, v11, v12) == 10
    && !objc_msgSend_comparisonPredicateModifier(a1, v13, v14)
    && !objc_msgSend_expressionType(v7, v13, v14)
    && objc_msgSend_expressionType(v10, v13, v14) == 3)
  {
    v15 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v10, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v15, v20, (uint64_t)v19);

    objc_msgSend_setType_(v15, v21, 12);
    objc_msgSend_CKExpressionValue(v7, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v25, (uint64_t)v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v15, v27, (uint64_t)v26);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v28, (uint64_t)&v67, 1, v65, v66, v15, v68);
LABEL_18:
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_15;
  }
  if (objc_msgSend_predicateOperatorType(a1, v13, v14) == 99
    && !objc_msgSend_comparisonPredicateModifier(a1, v29, v30)
    && objc_msgSend_expressionType(v7, v29, v30) == 3
    && !objc_msgSend_expressionType(v10, v29, v30))
  {
    v15 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v7, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v15, v56, (uint64_t)v55);

    objc_msgSend_setType_(v15, v57, 12);
    objc_msgSend_CKExpressionValue(v10, v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v61, (uint64_t)v60);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v15, v63, (uint64_t)v62);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v64, (uint64_t)&v66, 1, v65, v15, v67, v68);
    goto LABEL_18;
  }
  if (objc_msgSend_predicateOperatorType(a1, v29, v30) == 4
    && objc_msgSend_comparisonPredicateModifier(a1, v31, v32) == 2
    && objc_msgSend_expressionType(v7, v33, v34) == 3
    && !objc_msgSend_expressionType(v10, v35, v36))
  {
    v15 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v7, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v15, v43, (uint64_t)v42);

    objc_msgSend_setType_(v15, v44, 12);
    objc_msgSend_CKExpressionValue(v10, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v48, (uint64_t)v47);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v15, v50, (uint64_t)v49);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v51, (uint64_t)&v65, 1, v15, v66, v67, v68);
    goto LABEL_18;
  }
  v37 = 0;
LABEL_15:

  return v37;
}

id sub_1BE9B14CC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  const char *v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_leftExpression(a1, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_predicateOperatorType(a1, v11, v12) == 99
    && objc_msgSend_expressionType(v7, v13, v14) == 1
    && !objc_msgSend_expressionType(v10, v15, v16))
  {
    v19 = (void *)objc_opt_new();
    if (objc_msgSend_comparisonPredicateModifier(a1, v20, v21) == 1)
      objc_msgSend_setType_(v19, v22, 10);
    else
      objc_msgSend_setType_(v19, v22, 11);
    objc_msgSend_constantValue(v10, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fieldValueFromObject_(v4, v26, (uint64_t)v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v19, v28, (uint64_t)v27);

    v30[0] = v19;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v29, (uint64_t)v30, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

id sub_1BE9B1620(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  char isEqualToString;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  int v26;
  id v27;
  id v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  int v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  char v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  void *v59;
  const char *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  void *v65;
  const char *v66;
  _QWORD *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  const char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  objc_class *v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  id v93;
  void *v94;
  void *v95;
  void *v96;
  _QWORD v97[2];

  v97[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_leftExpression(a1, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_expressionType(v9, v13, v14) == 3)
  {
    objc_msgSend_keyPath(v9, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v17, v18, (uint64_t)CFSTR("allTokens"));

    v20 = v9;
    v21 = v12;
    if ((isEqualToString & 1) != 0)
      goto LABEL_5;
  }
  if (objc_msgSend_expressionType(v12, v15, v16) == 3)
  {
    objc_msgSend_keyPath(v12, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend_isEqualToString_(v24, v25, (uint64_t)CFSTR("allTokens"));

    v20 = v12;
    v21 = v9;
    if (v26)
    {
LABEL_5:
      v27 = v20;
      v28 = v21;
      v29 = (void *)objc_opt_new();
      v34 = objc_msgSend_expressionType(v28, v30, v31);
      if (!v34)
      {
        v94 = v29;
        objc_msgSend_constantValue(v28, v32, v33);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          if (a4)
          {
            objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v62, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required string or tokenize() arguments when comparing to special key-path allTokens: %@"), a1);
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }

          v61 = 0;
          v29 = v94;
          goto LABEL_34;
        }
        objc_msgSend_constantValue(v28, v62, v63);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v95 = v6;
        objc_msgSend_fieldValueFromObject_(v6, v64, (uint64_t)v59);
        v35 = a4;
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setFieldValue_(v94, v66, (uint64_t)v65);

        goto LABEL_17;
      }
      v95 = v6;
      v35 = a4;
      if (objc_msgSend_expressionType(v28, v32, v33) == 4
        && (objc_msgSend_function(v28, v36, v37),
            v38 = (void *)objc_claimAutoreleasedReturnValue(),
            v40 = objc_msgSend_isEqualToString_(v38, v39, (uint64_t)CFSTR("tokenize:using:")),
            v38,
            v40))
      {
        v93 = v27;
        v94 = v29;
        objc_msgSend_arguments(v28, v36, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v42, v43, 1);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_constantValue(v44, v45, v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend__comparisonOptionForString_(a1, v48, (uint64_t)v47);

        if ((v49 & 0xF) == 0xBLL)
        {
          objc_msgSend_arguments(v28, v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v52, v53, 0);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_constantValue(v54, v55, v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_fieldValueFromObject_(v95, v58, (uint64_t)v57);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setFieldValue_(v94, v60, (uint64_t)v59);
            v27 = v93;
LABEL_17:
            v67 = v35;

            if (objc_msgSend_comparisonPredicateModifier(a1, v68, v69) == 1 && v27 == v9)
            {
              v29 = v94;
              v6 = v95;
              if (v67)
              {
                objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v70, *MEMORY[0x1E0C94B20], 1009, CFSTR("Enumerating special key-path allTokens is not allowed: %@"), a1);
LABEL_59:
                v61 = 0;
                *v67 = (id)objc_claimAutoreleasedReturnValue();
                goto LABEL_34;
              }
              goto LABEL_60;
            }
            v29 = v94;
            v6 = v95;
            if (objc_msgSend_predicateOperatorType(a1, v70, v71) == 1000)
            {
              if (!v34
                && ((objc_msgSend_options(a1, v72, v73) & 4) != 0
                 || (objc_msgSend_options(a1, v72, v88) & 1) == 0
                 || (objc_msgSend_options(a1, v72, v89) & 2) == 0
                 || (objc_msgSend_options(a1, v72, v90) & 8) == 0))
              {
                if (v67)
                {
                  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v72, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required NSCaseInsensitivePredicateOption, NSDiacriticInsensitivePredicateOption, and NSLocaleSensitivePredicateOption comparison predicate options: %@"), a1);
                  goto LABEL_59;
                }
                goto LABEL_60;
              }
              if (objc_msgSend_comparisonPredicateModifier(a1, v72, v73) == 1)
                objc_msgSend_setType_(v94, v74, 10);
              else
                objc_msgSend_setType_(v94, v74, 11);
              v97[0] = v94;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v75, (uint64_t)v97, 1);
            }
            else
            {
              if (objc_msgSend_predicateOperatorType(a1, v72, v73) != 10)
              {
                if (v67)
                {
                  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v77, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required comparison operators TOKENMATCHES or IN when searching special key-path allTokens: %@"), a1);
                  goto LABEL_59;
                }
LABEL_60:
                v61 = 0;
                goto LABEL_34;
              }
              if (objc_msgSend_comparisonPredicateModifier(a1, v77, v78) == 2)
              {
                objc_msgSend_setType_(v94, v79, 11);
              }
              else
              {
                if (objc_msgSend_comparisonPredicateModifier(a1, v79, v80) != 1)
                {
                  if (v67)
                  {
                    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v91, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required predicate modifier ANY or ALL when searching special key-path allTokens: %@"), a1);
                    goto LABEL_59;
                  }
                  goto LABEL_60;
                }
                objc_msgSend_setType_(v94, v91, 10);
              }
              if (!objc_msgSend_expressionType(v28, v81, v82))
              {
                if (v67)
                {
                  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v92, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required tokenize() operand when searching special key-path allTokens: %@"), a1);
                  goto LABEL_59;
                }
                goto LABEL_60;
              }
              v96 = v94;
              objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v92, (uint64_t)&v96, 1);
            }
            v61 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_34:

            goto LABEL_35;
          }
          if (v35)
          {
            v83 = (void *)MEMORY[0x1E0C94FF8];
            v84 = *MEMORY[0x1E0C94B20];
            v85 = (objc_class *)objc_opt_class();
            NSStringFromClass(v85);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_errorWithDomain_code_format_(v83, v87, v84, 1009, CFSTR("Required string argument when using tokenize(), but got %@: %@"), v86, a1);
            *v35 = (id)objc_claimAutoreleasedReturnValue();

          }
          v61 = 0;
          v27 = v93;
          v29 = v94;
LABEL_33:
          v6 = v95;
          goto LABEL_34;
        }
        v27 = v93;
        v29 = v94;
        if (v35)
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v50, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required NSCaseInsensitivePredicateOption, NSDiacriticInsensitivePredicateOption, and NSLocaleSensitivePredicateOption tokenization options on tokenize() function: %@"), a1);
          goto LABEL_14;
        }
      }
      else if (v35)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v36, *MEMORY[0x1E0C94B20], 1009, CFSTR("Required string or tokenize() arguments when searching special key-path allTokens: %@"), a1);
LABEL_14:
        v61 = 0;
        *v35 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_33;
      }
      v61 = 0;
      goto LABEL_33;
    }
  }
  v61 = 0;
LABEL_35:

  return v61;
}

id sub_1BE9B1C2C(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  void *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  const char *v52;
  void *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  void *v57;
  void *v59;
  uint64_t v60;
  objc_class *v61;
  void *v62;
  const char *v63;
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_leftExpression(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_predicateOperatorType(a1, v13, v14) == 100
    && !objc_msgSend_comparisonPredicateModifier(a1, v15, v16)
    && objc_msgSend_expressionType(v9, v17, v18) == 3
    && objc_msgSend_expressionType(v12, v19, v20) == 14)
  {
    objc_msgSend_constantValue(v12, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v23, v24, v25) == 2)
    {
      objc_msgSend_objectAtIndexedSubscript_(v23, v26, 0);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKExpressionValue(v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_objectAtIndexedSubscript_(v23, v31, 1);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKExpressionValue(v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        v37 = (void *)objc_opt_new();
        v64 = (void *)objc_opt_new();
        objc_msgSend_CKExpressionValue(v9, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1BE9B2630(v40);
        v41 = (uint64_t)v30;
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setFieldName_(v37, v43, (uint64_t)v42);

        v30 = (void *)v41;
        objc_msgSend_fieldValueFromObject_(v6, v44, v41);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setFieldValue_(v37, v46, (uint64_t)v45);

        objc_msgSend_setType_(v37, v47, 8);
        objc_msgSend_fieldName(v37, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setFieldName_(v64, v51, (uint64_t)v50);

        objc_msgSend_fieldValueFromObject_(v6, v52, (uint64_t)v35);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setFieldValue_(v64, v54, (uint64_t)v53);

        objc_msgSend_setType_(v64, v55, 6);
        v65[0] = v37;
        v65[1] = v64;
        objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v56, (uint64_t)v65, 2);
        v57 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v36, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected array with two number arguments on right hand side: %@"), a1);
        v57 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v57 = 0;
      }

    }
    else
    {
      if (a4)
      {
        v59 = (void *)MEMORY[0x1E0C94FF8];
        v60 = *MEMORY[0x1E0C94B20];
        v61 = (objc_class *)objc_opt_class();
        NSStringFromClass(v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(v59, v63, v60, 1009, CFSTR("Expected array with two number arguments on right hand side, but got %@: %@"), v62, a1);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

      }
      v57 = 0;
    }

  }
  else
  {
    v57 = 0;
  }

  return v57;
}

id sub_1BE9B1F84(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  const char *v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_leftExpression(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_predicateOperatorType(a1, v13, v14) == 8
    && objc_msgSend_expressionType(v9, v15, v16) == 3
    && !objc_msgSend_expressionType(v12, v17, v18))
  {
    objc_msgSend_CKExpressionValue(v12, v19, v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (a4)
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v24, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected NSString or NSData on right hand side: %@"), a1);
          v21 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v21 = 0;
        }
        goto LABEL_17;
      }
    }
    v25 = (void *)objc_opt_new();
    objc_msgSend_CKExpressionValue(v9, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE9B2630(v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldName_(v25, v30, (uint64_t)v29);

    objc_msgSend_fieldValueFromObject_(v6, v31, (uint64_t)v23);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFieldValue_(v25, v33, (uint64_t)v32);

    if (objc_msgSend_comparisonPredicateModifier(a1, v34, v35))
    {
      if (objc_msgSend_comparisonPredicateModifier(a1, v36, v37) != 2)
      {
        v21 = 0;
        goto LABEL_16;
      }
      objc_msgSend_setType_(v25, v38, 18);
    }
    else
    {
      objc_msgSend_setType_(v25, v36, 16);
    }
    v40[0] = v25;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v39, (uint64_t)v40, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

LABEL_17:
    goto LABEL_5;
  }
  v21 = 0;
LABEL_5:

  return v21;
}

id sub_1BE9B21B0(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  int isEqualToString;
  uint64_t v34;
  void *v35;
  const char *v36;
  int v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  _BOOL4 v41;
  int v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  id v51;
  const char *v52;
  void *v54;
  uint64_t v55;
  objc_class *v56;
  void *v57;
  const char *v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  void *v65;
  const char *v66;
  const char *v67;
  _QWORD v68[2];

  v68[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_leftExpression(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rightExpression(a1, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_predicateOperatorType(a1, v13, v14) > 5)
  {
    v20 = 0;
LABEL_6:
    v21 = 0;
    goto LABEL_7;
  }
  if (objc_msgSend_expressionType(v9, v15, v16) == 3 || objc_msgSend_expressionType(v9, v17, v18) == 1)
  {
    v19 = 0;
    objc_msgSend_CKExpressionValue(v9, v17, v18);
LABEL_11:
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  if (objc_msgSend_expressionType(v12, v17, v18) == 3 || objc_msgSend_expressionType(v12, v23, v24) == 1)
  {
    v19 = 1;
    objc_msgSend_CKExpressionValue(v12, v23, v24);
    goto LABEL_11;
  }
  v19 = 0;
  v20 = 0;
LABEL_12:
  if (!objc_msgSend_expressionType(v9, v23, v24))
  {
    objc_msgSend_CKExpressionValue(v9, v25, v26);
LABEL_21:
    v38 = objc_claimAutoreleasedReturnValue();
LABEL_22:
    v21 = (void *)v38;
    if (v20)
      goto LABEL_23;
LABEL_41:
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v29, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected key-path in comparison expression: %@"), a1);
      v51 = (id)objc_claimAutoreleasedReturnValue();
      v20 = 0;
      goto LABEL_43;
    }
    v20 = 0;
    goto LABEL_7;
  }
  if (!objc_msgSend_expressionType(v12, v25, v26))
  {
    objc_msgSend_CKExpressionValue(v12, v27, v28);
    goto LABEL_21;
  }
  if (objc_msgSend_expressionType(v9, v27, v28) == 4)
  {
    objc_msgSend_function(v9, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)CFSTR("now"));

    if (isEqualToString)
      goto LABEL_18;
  }
  if (objc_msgSend_expressionType(v12, v29, v30) == 4)
  {
    objc_msgSend_function(v12, v29, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend_isEqualToString_(v35, v36, (uint64_t)CFSTR("now"));

    if (v37)
    {
LABEL_18:
      objc_msgSend_date(MEMORY[0x1E0C99D68], v29, v30);
      v38 = objc_claimAutoreleasedReturnValue();
      goto LABEL_22;
    }
  }
  v21 = 0;
  if (!v20)
    goto LABEL_41;
LABEL_23:
  if (objc_msgSend_isEqualToString_(v20, v29, *MEMORY[0x1E0C94A18]))
  {
    v41 = v21 != 0;
    v42 = 1;
    goto LABEL_25;
  }
  v50 = objc_msgSend_isEqualToString_(v20, v39, *MEMORY[0x1E0C949F8]);
  v42 = v50;
  v41 = v21 != 0;
  if (!v21 && (v50 & 1) == 0)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v39, *MEMORY[0x1E0C94B20], 1009, CFSTR("Expected constant value in comparison expression: %@"), a1);
      v51 = (id)objc_claimAutoreleasedReturnValue();
      v21 = 0;
LABEL_43:
      v22 = 0;
      *a4 = v51;
      goto LABEL_44;
    }
    goto LABEL_6;
  }
LABEL_25:
  v43 = objc_msgSend_predicateOperatorType(a1, v39, v40);
  v46 = v19;
  v47 = v43;
  if (v43 >= 4)
    v46 = 0;
  if (v46 == 1)
    v47 = qword_1BECBBCD0[v43];
  if (objc_msgSend_comparisonPredicateModifier(a1, v44, v45) == 1)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v48, *MEMORY[0x1E0C94B20], 1009, CFSTR("Aggregate operator ALL not allowed for comparison expression: %@"), a1);
LABEL_39:
      v51 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_43;
    }
  }
  else if (objc_msgSend_comparisonPredicateModifier(a1, v48, v49) == 2)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v52, *MEMORY[0x1E0C94B20], 1009, CFSTR("Aggregate operator ANY not allowed for comparison expression: %@"), a1);
      goto LABEL_39;
    }
  }
  else
  {
    if (CKValueIsAcceptablePredicateClass() || !(v41 | v42 ^ 1))
    {
      v59 = (void *)objc_opt_new();
      sub_1BE9B2630(v20);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldName_(v59, v61, (uint64_t)v60);

      v62 = sub_1BE9B2734(v47);
      objc_msgSend_setType_(v59, v63, v62);
      objc_msgSend_fieldValueFromObject_(v6, v64, (uint64_t)v21);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFieldValue_(v59, v66, (uint64_t)v65);

      v68[0] = v59;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v67, (uint64_t)v68, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_44;
    }
    if (a4)
    {
      v54 = (void *)MEMORY[0x1E0C94FF8];
      v55 = *MEMORY[0x1E0C94B20];
      v56 = (objc_class *)objc_opt_class();
      NSStringFromClass(v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(v54, v58, v55, 1009, CFSTR("Type '%@' not allowed in comparison expression: %@"), v57, a1);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
LABEL_7:
  v22 = 0;
LABEL_44:

  return v22;
}

id sub_1BE9B2630(void *a1)
{
  id v1;
  const char *v2;
  id v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  const char *v10;
  id v12;
  const char *v13;
  id v14;

  v1 = a1;
  if (objc_msgSend_isEqualToString_(v1, v2, *MEMORY[0x1E0C946A0]))
  {
    v12 = objc_alloc(MEMORY[0x1E0C94D90]);
    v14 = (id)objc_msgSend_initWithCode_format_(v12, v13, 12, CFSTR("Unsupported operation for special key-path allTokens"));
    objc_exception_throw(v14);
  }
  v3 = v1;
  v5 = v3;
  if (qword_1ED702890 == -1)
  {
    if (v3)
    {
LABEL_4:
      objc_msgSend_objectForKeyedSubscript_((void *)qword_1ED702888, v4, (uint64_t)v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&qword_1ED702890, &unk_1E78339E8);
    if (v5)
      goto LABEL_4;
  }
  v6 = 0;
LABEL_7:

  if (v6)
    v7 = v6;
  else
    v7 = v5;
  v8 = v7;

  v9 = (void *)objc_opt_new();
  objc_msgSend_setName_(v9, v10, (uint64_t)v8);

  return v9;
}

uint64_t sub_1BE9B2734(unint64_t a1)
{
  id v2;
  const char *v3;
  id v4;

  if (a1 >= 0xB || ((0x53Fu >> a1) & 1) == 0)
  {
    v2 = objc_alloc(MEMORY[0x1E0C94D90]);
    v4 = (id)objc_msgSend_initWithCode_format_(v2, v3, 12, CFSTR("Unexpected operator for predicate"));
    objc_exception_throw(v4);
  }
  return dword_1BECBBB7C[a1];
}

void sub_1BE9B3320(uint64_t a1)
{
  void *v2;
  dispatch_block_t v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, const char *, uint64_t);
  void *v10;
  uint64_t v11;
  id v12;

  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = sub_1BE9B3654;
  v10 = &unk_1E782F4D0;
  v2 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v2;
  v3 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &v7);
  objc_msgSend_accountStatusWorkloop(*(void **)(a1 + 32), v4, v5, v7, v8, v9, v10, v11);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v6, v3);

}

uint64_t sub_1BE9B3540(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  char hasCloudKitSystemServiceEntitlement;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  char isCloudSyncAllowed;
  uint64_t v17;
  NSObject *v19;
  uint8_t v20[16];

  v3 = a1;
  objc_msgSend_entitlements(a2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  hasCloudKitSystemServiceEntitlement = objc_msgSend_hasCloudKitSystemServiceEntitlement(v6, v7, v8);

  if ((hasCloudKitSystemServiceEntitlement & 1) != 0
    || (v10 = (void *)MEMORY[0x1E0D47230],
        v11 = v3,
        objc_msgSend_sharedConnection(v10, v12, v13),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        isCloudSyncAllowed = objc_msgSend_isCloudSyncAllowed_(v14, v15, (uint64_t)v11),
        v11,
        v14,
        (isCloudSyncAllowed & 1) != 0))
  {
    v17 = 0;
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = *MEMORY[0x1E0C952B0];
    v17 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1BE990000, v19, OS_LOG_TYPE_INFO, "ManagedConfiguration is restricting account access", v20, 2u);
    }
  }

  return v17;
}

void sub_1BE9B3654(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  CKDOperationInfoHolderOperation *v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  char isBackgroundAssetsExtension;
  const char *v18;
  uint64_t v19;
  const __CFString *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  int v26;
  uint64_t v27;
  id v28;

  if (objc_msgSend__accountStatus(*(void **)(a1 + 32), a2, a3) == 1)
  {
    objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E0C94F80], v4, v5);
    v28 = (id)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_opt_new();
    objc_msgSend_setResolvedConfiguration_(v6, v7, (uint64_t)v28);
    v8 = [CKDOperationInfoHolderOperation alloc];
    objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v9, (uint64_t)v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend_initWithOperationInfo_container_(v8, v11, (uint64_t)v6, v10);

    objc_msgSend_fetchImportantUserIDsForOperation_withCompletionHandler_(*(void **)(a1 + 32), v13, (uint64_t)v12, *(_QWORD *)(a1 + 40));
LABEL_10:

    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_entitlements(*(void **)(a1 + 32), v4, v5);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    isBackgroundAssetsExtension = objc_msgSend_isBackgroundAssetsExtension(v14, v15, v16);

    if ((isBackgroundAssetsExtension & 1) != 0)
    {
      v20 = CFSTR("Background Assets Extension processes don't have access to an iCloud account");
    }
    else
    {
      objc_msgSend_entitlements(*(void **)(a1 + 32), v18, v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_cloudServices(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_containsObject_(v24, v25, *MEMORY[0x1E0C95340]);

      v20 = CFSTR("CloudKit-Anonymous / App Clips processes don't have access to an iCloud account");
      if (v26)
        v20 = CFSTR("No iCloud account is configured");
    }
    v27 = *(_QWORD *)(a1 + 40);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v18, *MEMORY[0x1E0C947D8], 9, CFSTR("%@"), v20);
    v28 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v27 + 16))(v27, 0, 0);
    goto LABEL_10;
  }
}

void sub_1BE9B3898(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _BOOL4 v16;
  const char *v17;
  uint64_t hasTCCAuthorization;
  const char *v19;
  const char *v20;
  uint64_t v21;
  char v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  _BOOL8 v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  os_log_t *v38;
  _QWORD *v39;
  os_log_t v40;
  const __CFString *v41;
  void *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  __CFString *v46;
  os_log_t v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  int OnlyManatee;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  char v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  int isSecondaryAccount_error;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  int v76;
  uint64_t v77;
  const char *v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  const char *v89;
  void *v90;
  id v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  const char *v96;
  void *v97;
  __CFString *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  NSObject *v126;
  const char *v127;
  uint64_t v128;
  __CFString *v129;
  void *v130;
  int v131;
  void *v132;
  os_log_t v133;
  uint64_t v134;
  void *v135;
  NSObject *v136;
  const char *v137;
  uint64_t v138;
  __CFString *v139;
  const __CFString *v140;
  const __CFString *v141;
  id v142;
  id v143;
  uint8_t buf[4];
  const __CFString *v145;
  __int16 v146;
  void *v147;
  __int16 v148;
  const __CFString *v149;
  __int16 v150;
  const __CFString *v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v5 = objc_msgSend__accountStatus(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_setAccountStatus_(v2, v6, v5);
  objc_msgSend_setWalrusStatus_(v2, v7, 0);
  objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v8, 0);
  objc_msgSend_options(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_bypassPCSEncryption(v11, v12, v13);
  objc_msgSend_setBypassPCSEncryption_(v2, v15, v14);

  v16 = 1;
  hasTCCAuthorization = objc_msgSend_hasTCCAuthorization_(*(void **)(a1 + 32), v17, 1);
  objc_msgSend_setAccountAccessAuthorization_(v2, v19, hasTCCAuthorization);
  v22 = objc_msgSend_bypassPCSEncryption(v2, v20, v21);
  objc_msgSend_account(*(void **)(a1 + 32), v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isPrimaryAccount(v25, v26, v27) & 1) != 0)
  {
    v30 = 0;
  }
  else
  {
    objc_msgSend_deviceContext(*(void **)(a1 + 32), v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_testDeviceReference(v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v34 != 0;
    v30 = v34 == 0;

  }
  objc_msgSend_account(*(void **)(a1 + 32), v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v38 = (os_log_t *)MEMORY[0x1E0C952B0];
  v39 = (_QWORD *)MEMORY[0x1E0C95300];
  if (!v37)
    goto LABEL_12;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v40 = *v38;
  if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    if (v16)
      v41 = CFSTR(" not");
    else
      v41 = &stru_1E7838F48;
    v42 = *(void **)(a1 + 32);
    v43 = v40;
    objc_msgSend_containerID(v42, v44, v45);
    v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v145 = v41;
    v146 = 2048;
    v147 = v42;
    v148 = 2112;
    v149 = v46;
    _os_log_debug_impl(&dword_1BE990000, v43, OS_LOG_TYPE_DEBUG, "Current account is%@ secondary account for CKDContainer %p, containerID %@.", buf, 0x20u);

LABEL_12:
    if (*v39 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  }
  v47 = *v38;
  if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    v125 = *(void **)(a1 + 32);
    v126 = v47;
    objc_msgSend_accountOverrideInfo(v125, v127, v128);
    v129 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v130 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v145 = v129;
    v146 = 2048;
    v147 = v130;
    _os_log_debug_impl(&dword_1BE990000, v126, OS_LOG_TYPE_DEBUG, "Account Override info %@ for CKDContainer %p", buf, 0x16u);

  }
  objc_msgSend_options(*(void **)(a1 + 32), v48, v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  OnlyManatee = objc_msgSend_forceEnableReadOnlyManatee(v50, v51, v52);

  if (OnlyManatee)
  {
    objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v54, 3);
    goto LABEL_27;
  }
  if (objc_msgSend_accountStatus(v2, v54, v55) == 3)
    v58 = 1;
  else
    v58 = v22;
  if ((v58 & 1) == 0)
  {
    objc_msgSend_deviceContext(*(void **)(a1 + 32), v56, v57);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_accountDataSecurityObserver(v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_account(*(void **)(a1 + 32), v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    isSecondaryAccount_error = objc_msgSend_isManateeAvailableForAccount_isSecondaryAccount_error_(v62, v66, (uint64_t)v65, v30, 0);

    if (isSecondaryAccount_error)
    {
      v70 = objc_msgSend_deviceToDeviceEncryptionAvailability(v2, v68, v69);
      objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v71, v70 | 2);
    }
    else
    {
      objc_msgSend_account(*(void **)(a1 + 32), v68, v69);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = objc_msgSend_accountSupportsManatee_(v62, v75, (uint64_t)v74);

      if (!v76)
      {
LABEL_26:

        goto LABEL_27;
      }
    }
    v77 = objc_msgSend_deviceToDeviceEncryptionAvailability(v2, v72, v73);
    objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v78, v77 | 1);
    goto LABEL_26;
  }
LABEL_27:
  objc_msgSend_account(*(void **)(a1 + 32), v56, v57);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isCarryAccount(v79, v80, v81))
    objc_msgSend_setAccountPartition_(v2, v82, 2);
  else
    objc_msgSend_setAccountPartition_(v2, v82, 1);

  objc_msgSend_setHasValidCredentials_(v2, v83, 1);
  objc_msgSend_setNeedsToVerifyTerms_(v2, v84, 0);
  objc_msgSend_account(*(void **)(a1 + 32), v85, v86);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = *(_QWORD *)(a1 + 32);
  v143 = 0;
  objc_msgSend_iCloudAuthTokenWithContainer_error_(v87, v89, v88, &v143);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v143;

  if (!v90 || v91)
    objc_msgSend_setHasValidCredentials_(v2, v92, 0);
  objc_msgSend_account(*(void **)(a1 + 32), v92, v93);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = *(_QWORD *)(a1 + 32);
  v142 = v91;
  objc_msgSend_cloudKitAuthTokenWithContainer_error_(v94, v96, v95, &v142);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  v98 = (__CFString *)v142;

  if (!v97 || v98)
  {
    objc_msgSend_domain(v98, v99, v100);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = v101;
    if (v101 == (void *)*MEMORY[0x1E0C94B20])
    {
      v106 = objc_msgSend_code(v98, v102, v103);

      if (v106 == 1004)
        objc_msgSend_setNeedsToVerifyTerms_(v2, v105, 1);
    }
    else
    {

    }
    objc_msgSend_setHasValidCredentials_(v2, v105, 0);
  }
  if ((v22 & 1) == 0)
  {
    objc_msgSend_deviceContext(*(void **)(a1 + 32), v99, v100);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_accountDataSecurityObserver(v107, v108, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_account(*(void **)(a1 + 32), v111, v112);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isWalrusEnabledForAccount_allowBlockingFetch_(v110, v114, (uint64_t)v113, 1))
      objc_msgSend_setWalrusStatus_(v2, v115, 1);
    else
      objc_msgSend_setWalrusStatus_(v2, v115, 2);

  }
  if (objc_msgSend_accountStatus(v2, v99, v100) == 1 && (objc_msgSend_hasValidCredentials(v2, v116, v117) & 1) == 0)
  {
    objc_msgSend_clientSDKVersion(*(void **)(a1 + 32), v116, v117);
    if (CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24())
    {
      if ((objc_msgSend__isAdopterAppleInternal(*(void **)(a1 + 32), v116, v117) & 1) == 0)
        objc_msgSend_setAccountStatus_(v2, v116, 4);
    }
  }
  if (objc_msgSend_accountStatus(v2, v116, v117) == 1
    && objc_msgSend_walrusStatus(v2, v118, v119) == 1
    && (objc_msgSend_deviceToDeviceEncryptionAvailability(v2, v118, v119) & 2) == 0
    && (objc_msgSend_bypassPCSEncryption(v2, v118, v119) & 1) == 0)
  {
    objc_msgSend_options(*(void **)(a1 + 32), v118, v119);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_useClearAssetEncryption(v120, v121, v122))
    {

    }
    else
    {
      objc_msgSend_clientSDKVersion(*(void **)(a1 + 32), v123, v124);
      v131 = CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24();

      if (v131)
        objc_msgSend_setAccountStatus_(v2, v118, 4);
    }
  }
  objc_msgSend_build(v2, v118, v119);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  if (*v39 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v133 = *v38;
  if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    v135 = *(void **)(a1 + 32);
    v136 = v133;
    objc_msgSend_account(v135, v137, v138);
    v139 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v140 = &stru_1E7838F48;
    *(_DWORD *)buf = 138413058;
    v141 = CFSTR(".\nError was ");
    v145 = v139;
    v146 = 2112;
    if (!v98)
      v141 = &stru_1E7838F48;
    v147 = v132;
    if (v98)
      v140 = v98;
    v148 = 2114;
    v149 = v141;
    v150 = 2112;
    v151 = v140;
    _os_log_debug_impl(&dword_1BE990000, v136, OS_LOG_TYPE_DEBUG, "Returning account info for account %@ \nto client: %@%{public}@%@", buf, 0x2Au);

  }
  v134 = *(_QWORD *)(a1 + 40);
  if (v134)
    (*(void (**)(uint64_t, void *, _QWORD))(v134 + 16))(v134, v132, 0);

}

void sub_1BE9B42A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9B457C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BE9B46E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BE9B49B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B4B98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B4D70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B4F60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B5258(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B5ED4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  id v18;

  v4 = a3;
  if (v4)
  {
    v18 = v4;
    objc_msgSend_c2MetricsEndpoint(a1, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      objc_msgSend_baseURLForServerType_partitionType_(v18, v8, 4, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setC2MetricsEndpoint_(a1, v11, (uint64_t)v10);

      objc_msgSend_setAnonymous_(a1, v12, 0);
    }
    objc_msgSend_c2MetricsEndpoint(a1, v8, v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = v18;
    if (!v13)
    {
      objc_msgSend_baseURLForServerType_partitionType_(v18, v14, 4, 2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setC2MetricsEndpoint_(a1, v16, (uint64_t)v15);

      objc_msgSend_setAnonymous_(a1, v17, 1);
      v4 = v18;
    }
  }

}

void sub_1BE9B668C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE9B6940@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1BE9B6958()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9B696C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9B6980()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9B69AC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_1BE9B69BC()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1BE9B69EC()
{
  return swift_allocObject();
}

uint64_t sub_1BE9B6A00()
{
  return swift_bridgeObjectRetain();
}

void sub_1BE9B6B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9B6C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1BE9B6D34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B6EB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B6F3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B71A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  if (sub_1BE9C9624())
  {
    v1 = URLRequest.allHTTPHeaderFields.getter();
    if (!v1)
      v1 = Dictionary.init(dictionaryLiteral:)();
    v2 = v1;
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
    {
      v42 = MEMORY[0x1E0DEE9D8];
      sub_1BE9C92D8();
      v4 = sub_1BE9C95A4(v2);
      if ((v4 & 0x8000000000000000) == 0)
      {
        v6 = v4;
        if (v4 < 1 << *(_BYTE *)(v2 + 32))
        {
          v7 = v2 + 64;
          v34 = (uint64_t *)(v0 + 48);
          v35 = v0;
          while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
          {
            if (*(_DWORD *)(v2 + 36) != v5)
              goto LABEL_26;
            v37 = v3;
            v39 = v5;
            v8 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v6);
            v9 = *v8;
            v10 = v8[1];
            v11 = (unint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v6);
            v13 = *v11;
            v12 = v11[1];
            v41 = v9;
            *(_QWORD *)(v0 + 16) = v9;
            *(_QWORD *)(v0 + 24) = v10;
            strcpy((char *)(v0 + 32), "authorization");
            *(_WORD *)(v0 + 46) = -4864;
            sub_1BE9B7614();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (!StringProtocol.caseInsensitiveCompare<A>(_:)())
            {
              swift_bridgeObjectRetain();
              _StringGuts.grow(_:)(36);
              swift_bridgeObjectRelease();
              *v34 = String.count.getter();
              v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v14);
              swift_bridgeObjectRelease();
              v15._countAndFlagsBits = 0xD000000000000011;
              v15._object = (void *)0x80000001BECBD180;
              String.append(_:)(v15);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v13 = 0xD000000000000011;
              v12 = 0x80000001BECBD160;
            }
            v16 = *(_QWORD *)(v42 + 16);
            if (v16 >= *(_QWORD *)(v42 + 24) >> 1)
              sub_1BE9C92D8();
            *(_QWORD *)(v42 + 16) = v16 + 1;
            v17 = (_QWORD *)(v42 + 32 * v16);
            v17[4] = v41;
            v17[5] = v10;
            v17[6] = v13;
            v17[7] = v12;
            if ((uint64_t)v6 >= -(-1 << *(_BYTE *)(v2 + 32)))
              goto LABEL_27;
            v7 = v2 + 64;
            if ((*(_QWORD *)(v2 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
              goto LABEL_28;
            if (*(_DWORD *)(v2 + 36) != v39)
              goto LABEL_29;
            v18 = _HashTable.occupiedBucket(after:)();
            v3 = v37 - 1;
            if (v37 == 1)
            {
              sub_1BE9B6958();
              v0 = v35;
              v36 = v42;
              goto LABEL_24;
            }
            v6 = v18;
            v0 = v35;
            if ((v18 & 0x8000000000000000) == 0)
            {
              v5 = *(_DWORD *)(v2 + 36);
              if (v18 < 1 << *(_BYTE *)(v2 + 32))
                continue;
            }
            goto LABEL_30;
          }
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
        }
      }
LABEL_30:
      __break(1u);
    }
    else
    {
      sub_1BE9B6958();
      v36 = MEMORY[0x1E0DEE9D8];
LABEL_24:
      v19 = *(_QWORD **)(v0 + 136);
      v40 = *(_BYTE *)(v0 + 152);
      v20 = *(_QWORD *)(v0 + 112);
      v38 = *(_QWORD *)(v0 + 104);
      v21 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 96);
      v23 = *(_QWORD *)(v0 + 80);
      v24 = *(_QWORD *)(v0 + 56);
      v25 = *(_QWORD *)(v0 + 64);
      v26 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      swift_bridgeObjectRetain();
      Date.init()();
      v27 = (char *)v19 + v26[6];
      v28 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v27, v23, v28);
      swift_bridgeObjectRetain();
      v29 = sub_1BE9C94FC(v36);
      *v19 = v24;
      v19[1] = v25;
      v30 = (_QWORD *)((char *)v19 + v26[7]);
      *v30 = v21;
      v30[1] = v22;
      *(_QWORD *)((char *)v19 + v26[8]) = v29;
      v31 = (_QWORD *)((char *)v19 + v26[9]);
      *v31 = v38;
      v31[1] = v20;
      *((_BYTE *)v19 + v26[10]) = v40;
      swift_storeEnumTagMultiPayload();
      sub_1BE9BF3F4();
      v32 = (_QWORD *)sub_1BE9BDE34();
      *(_QWORD *)(v0 + 144) = v32;
      *v32 = v0;
      v32[1] = sub_1BE9CA730;
      v33 = sub_1BE9E14EC(*(_QWORD *)(v0 + 136));
      sub_1BE9BE600(v33);
    }
  }
  else
  {
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

unint64_t sub_1BE9B7614()
{
  unint64_t result;

  result = qword_1ED700758;
  if (!qword_1ED700758)
  {
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED700758);
  }
  return result;
}

void sub_1BE9B7668(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v16 = 138412290;
    v17 = v5;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Resuming new connection from client %@", (uint8_t *)&v16, 0xCu);
  }
  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clientConnections(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v9);
  objc_msgSend_clientConnections(v6, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v12, v13, *(_QWORD *)(a1 + 32));

  objc_sync_exit(v9);
  objc_msgSend_resume(*(void **)(a1 + 40), v14, v15);

}

void sub_1BE9B779C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9B7D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *a15, id *location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52,os_activity_scope_state_s state)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a15);
  objc_destroyWeak(&a52);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BE9B8874(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_setServerConfig_(WeakRetained, v7, (uint64_t)v9);

  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v5);

}

void sub_1BE9B894C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  id obj;

  objc_msgSend__tearDownOutputStream(*(void **)(a1 + 32), a2, a3);
  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = 0;

  objc_sync_exit(obj);
}

void sub_1BE9B8AD8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE9B8BE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_1BE9B8BFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(_QWORD);
  id WeakRetained;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  char isKindOfClass;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  const char *v37;
  int v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  void (**v47)(_QWORD);
  id v48;
  void *v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  void *v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  void *v68;
  const char *v69;
  void *v70;
  NSObject *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  void (**v83)(_QWORD);
  _QWORD v84[5];
  id v85;
  uint8_t buf[4];
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_operation(WeakRetained, v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (_BYTE *)MEMORY[0x1E0C95280];
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(WeakRetained, v13, v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)CFSTR("DropOperationUUIDsInResponse"));
    v19 = objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      v20 = (void *)v19;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
        objc_msgSend_setResponse_(v7, v13, 0);
    }
    else
    {

    }
  }
  v22 = objc_msgSend__handleServerProtobufResult_rawData_(WeakRetained, v13, (uint64_t)v7, v8);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && v22 <= 1)
  {
    v25 = v7;
    objc_msgSend_response(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationUUID(v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
    {
      v83 = v9;
      v34 = v8;
      v35 = v15;
      objc_msgSend_responseObjectUUIDs(WeakRetained, v32, v33);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_containsObject_(v36, v37, (uint64_t)v31);

      if (v38)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v15 = v35;
        v41 = (void *)*MEMORY[0x1E0C952E0];
        v8 = v34;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEBUG))
        {
          v75 = v41;
          objc_msgSend_requestUUID(WeakRetained, v76, v77);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v87 = v78;
          _os_log_debug_impl(&dword_1BE990000, v75, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"Warn: Dropping protobuf result since we've alredy returned it to the client. This likely happened because of a request timeout.\"", buf, 0xCu);

        }
        v83[2](v83);

        goto LABEL_38;
      }
      objc_msgSend_responseObjectUUIDs(WeakRetained, v39, v40);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v42, v43, (uint64_t)v31);

      v15 = v35;
      v8 = v34;
      v9 = v83;
    }
    objc_msgSend_header(v25, v32, v33);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (v46)
    {
      objc_msgSend_translator(WeakRetained, v44, v45);
      v47 = v9;
      v48 = v8;
      v49 = v15;
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_consumeResponseHeader_(v50, v51, (uint64_t)v46);

      v15 = v49;
      v8 = v48;
      v9 = v47;
      v16 = (_BYTE *)MEMORY[0x1E0C95280];
    }

  }
  if (*v16)
  {
    objc_msgSend_unitTestOverrides(WeakRetained, v23, v24);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v52, v53, (uint64_t)CFSTR("FakeZoneBusyResponseFromServer"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (v54)
    {
      v55 = (void *)objc_opt_new();
      objc_msgSend_setRetryAfterSeconds_(v55, v56, 20);
      v57 = (void *)objc_opt_new();
      objc_msgSend_setType_(v57, v58, 7);
      objc_msgSend_setServerError_(v55, v59, (uint64_t)v57);
      objc_msgSend_result(v7, v60, v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(v62, v63, (uint64_t)v55);

      objc_msgSend_result(v7, v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setCode_(v66, v67, 3);

      goto LABEL_27;
    }
  }
  if (v22 == 2)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v70 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
    {
      v79 = v70;
      objc_msgSend_requestUUID(WeakRetained, v80, v81);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v87 = v82;
      _os_log_error_impl(&dword_1BE990000, v79, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Task level failure encountered while parsing\"", buf, 0xCu);

      if (!v9)
        goto LABEL_38;
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v22 != 1)
  {
    if (!v22 && WeakRetained)
    {
      v84[0] = MEMORY[0x1E0C809B0];
      v84[1] = 3221225472;
      v84[2] = sub_1BEA55F78;
      v84[3] = &unk_1E7830D78;
      v84[4] = WeakRetained;
      v85 = v9;
      objc_msgSend_requestDidParseProtobufObject_completionHandler_(WeakRetained, v23, (uint64_t)v7, v84);

      goto LABEL_38;
    }
LABEL_36:
    if (!v9)
      goto LABEL_38;
LABEL_37:
    v9[2](v9);

    goto LABEL_38;
  }
LABEL_27:
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v68 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
  {
    v71 = v68;
    objc_msgSend_requestUUID(WeakRetained, v72, v73);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v87 = v74;
    _os_log_error_impl(&dword_1BE990000, v71, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Node level failure encountered while parsing\"", buf, 0xCu);

  }
  objc_msgSend_requestDidParseNodeFailure_(WeakRetained, v69, (uint64_t)v7);
  if (v9)
    goto LABEL_37;
LABEL_38:

}

void sub_1BE9BAD28(uint64_t a1)
{

}

void sub_1BE9BAD30(uint64_t a1)
{

}

void sub_1BE9BAD38(uint64_t a1)
{

}

void sub_1BE9BAD40(uint64_t a1)
{

}

void sub_1BE9BAD48(uint64_t a1)
{

}

void sub_1BE9BAD50(uint64_t a1)
{

}

void sub_1BE9BAD58(uint64_t a1)
{

}

void sub_1BE9BAD60(uint64_t a1)
{

}

void sub_1BE9BAD68(uint64_t a1)
{

}

void sub_1BE9BAD70(uint64_t a1)
{

}

void sub_1BE9BAD78(uint64_t a1)
{

}

void sub_1BE9BAD80(uint64_t a1)
{

}

void sub_1BE9BAD88(uint64_t a1)
{

}

void sub_1BE9BAD90(uint64_t a1)
{

}

void sub_1BE9BAD98(uint64_t a1)
{

}

void sub_1BE9BADA0(uint64_t a1)
{

}

void sub_1BE9BADA8(uint64_t a1)
{

}

void sub_1BE9BADB0(uint64_t a1)
{

}

void sub_1BE9BADB8(uint64_t a1)
{

}

void sub_1BE9BADC0(uint64_t a1)
{

}

void sub_1BE9BADC8(uint64_t a1)
{

}

void sub_1BE9BADD0(uint64_t a1)
{

}

void sub_1BE9BADD8(uint64_t a1)
{

}

void sub_1BE9BADE0(uint64_t a1)
{

}

void sub_1BE9BADE8(uint64_t a1)
{

}

void sub_1BE9BADF0(uint64_t a1)
{

}

void sub_1BE9BADF8(uint64_t a1)
{

}

void sub_1BE9BAE00(uint64_t a1)
{

}

void sub_1BE9BAE08(uint64_t a1)
{

}

void sub_1BE9BAE10(uint64_t a1)
{

}

void sub_1BE9BAE18(uint64_t a1)
{

}

void sub_1BE9BAE20(uint64_t a1)
{

}

void sub_1BE9BAE28(uint64_t a1)
{

}

void sub_1BE9BAE30(uint64_t a1)
{

}

void sub_1BE9BAE38(uint64_t a1)
{

}

void sub_1BE9BAE40(uint64_t a1)
{

}

void sub_1BE9BAE48(uint64_t a1)
{

}

void sub_1BE9BAE50(uint64_t a1)
{

}

void sub_1BE9BAE58(uint64_t a1)
{

}

void sub_1BE9BAE60(uint64_t a1)
{

}

void sub_1BE9BAE68(uint64_t a1)
{

}

void sub_1BE9BAE70(uint64_t a1)
{

}

void sub_1BE9BAE78(uint64_t a1)
{

}

void sub_1BE9BAE80(uint64_t a1)
{

}

void sub_1BE9BAE88(uint64_t a1)
{

}

void sub_1BE9BAE90(uint64_t a1)
{

}

void sub_1BE9BAE98(uint64_t a1)
{

}

void sub_1BE9BAEA0(uint64_t a1)
{

}

void sub_1BE9BAEA8(uint64_t a1)
{

}

void sub_1BE9BAEB0(uint64_t a1)
{

}

void sub_1BE9BAEB8(uint64_t a1)
{

}

void sub_1BE9BAEC0(uint64_t a1)
{

}

void sub_1BE9BAEC8(uint64_t a1)
{

}

void sub_1BE9BAED0(uint64_t a1)
{

}

void sub_1BE9BAED8(uint64_t a1)
{

}

void sub_1BE9BAEE0(uint64_t a1)
{

}

uint64_t sub_1BE9BAEE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAEF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAF98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAFA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAFB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAFC8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAFD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAFE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BAFF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB008(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB018(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB028(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB038(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB048(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB058(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB068(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB078(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB088(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB098(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB0A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB0B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB0C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB0D8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB0E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB0F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB108(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB118(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB128(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void *sub_1BE9BB138(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1BE9BB160(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB170(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB180(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB190(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB1A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB1B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB1C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB1D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB1E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB1F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB200(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB210(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB220(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB230(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB240(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB250(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB260(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1BE9BB270(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE9BB280(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  void *v59;
  void *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  int v66;
  void *v67;
  __int16 v68;
  id v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 32);
      v11 = v9;
      objc_msgSend_metricUUID(v10, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = 138412546;
      v67 = v14;
      v68 = 2112;
      v69 = v8;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Failed to fetch server configuration for CKEventMetric %@. %@", (uint8_t *)&v66, 0x16u);

    }
    v15 = *(_QWORD *)(a1 + 56);
    if (v15)
      (*(void (**)(void))(v15 + 16))();
  }
  else
  {
    if (objc_msgSend_isCKInternalMetric(*(void **)(a1 + 32), v6, v7))
      v16 = 1;
    else
      v16 = 2;
    v17 = objc_alloc_init(MEMORY[0x1E0D03768]);
    objc_msgSend_setAllowsCellularAccess_(v17, v18, *(unsigned __int8 *)(a1 + 64));
    objc_msgSend_set_allowsExpensiveAccess_(v17, v19, *(unsigned __int8 *)(a1 + 65));
    objc_msgSend_set_allowsPowerNapScheduling_(v17, v20, *(unsigned __int8 *)(a1 + 66));
    objc_msgSend_sourceApplicationSecondaryIdentifier(*(void **)(a1 + 40), v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_set_sourceApplicationSecondaryIdentifier_(v17, v24, (uint64_t)v23);

    objc_msgSend_privacyProxyFailClosedOverride(*(void **)(a1 + 40), v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPrivacyProxyFailClosedOverride_(v17, v28, (uint64_t)v27);

    objc_msgSend_applicationBundleIdentifierForNetworkAttribution(*(void **)(a1 + 40), v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_set_sourceApplicationBundleIdentifier_(v17, v32, (uint64_t)v31);

    objc_msgSend_metricUUID(*(void **)(a1 + 32), v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      objc_msgSend_metricUUID(*(void **)(a1 + 32), v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setMetricUUID_(v17, v39, (uint64_t)v38);

    }
    objc_msgSend_metricOptionsForEventMetric_metricType_container_config_reportingCompletionBlock_(MEMORY[0x1E0D03760], v36, *(_QWORD *)(a1 + 32), v16, *(_QWORD *)(a1 + 48), v5, *(_QWORD *)(a1 + 56));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setMetricOptions_(v17, v41, (uint64_t)v40);

    objc_msgSend_metricOptions(v17, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    if (v44)
    {
      v47 = (void *)MEMORY[0x1E0D03778];
      objc_msgSend_eventName(*(void **)(a1 + 32), v45, v46);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_startTime(*(void **)(a1 + 32), v49, v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_endTime(*(void **)(a1 + 32), v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_attributes(*(void **)(a1 + 32), v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_reportMetricWithOptions_genericMetricType_eventName_startTime_endTime_attributes_(v47, v58, (uint64_t)v17, v16, v48, v51, v54, v57);

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v59 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v60 = *(void **)(a1 + 32);
        v61 = v59;
        objc_msgSend_metricUUID(v60, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = 138412290;
        v67 = v64;
        _os_log_impl(&dword_1BE990000, v61, OS_LOG_TYPE_INFO, "Failed to set options for CKEventMetric %@", (uint8_t *)&v66, 0xCu);

      }
      v65 = *(_QWORD *)(a1 + 56);
      if (v65)
        (*(void (**)(void))(v65 + 16))();
    }

  }
}

id sub_1BE9BB630(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1C3B83E24]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_autoreleasePoolPop(v2);
  return (id)objc_opt_self();
}

void sub_1BE9BB678(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 48))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v2 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(a1 + 48);
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      objc_msgSend_operationID(v4, v6, v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 134218242;
      v10 = v3;
      v11 = 2114;
      v12 = v8;
      _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Finished waiting for all (%lu) child operations to finish for operation %{public}@", (uint8_t *)&v9, 0x16u);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1BE9BB798()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  type metadata accessor for ContinuousClock();
  sub_1BE9BB8AC(&qword_1ED7003A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  dispatch thunk of Clock.now.getter();
  sub_1BE9BB8AC(&qword_1ED7003A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  MEMORY[0x1C3B82654](v0 + 5, v2, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v5;
  v5(v1, v2);
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  *v6 = v0;
  v6[1] = sub_1BE9DFF14;
  sub_1BE9E14EC(v0[11]);
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

void sub_1BE9BB8AC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x1C3B84508](a3, v5), a1);
  }
  sub_1BE9B69D4();
}

void sub_1BE9BC9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for PartialTrafficLog(uint64_t a1)
{
  return sub_1BE9BDED4(a1, qword_1ED7006B0);
}

id CKCurrentPersonaID()
{
  const char *v0;
  uint64_t v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const __CFString *v15;
  __CFString *v16;
  int v17;
  const __CFString *v18;
  __int16 v19;
  __CFString *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!sub_1BE9BCC34())
    return 0;
  objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v0, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_currentPersona(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_isDataSeparatedPersona(v5, v6, v7))
  {
    objc_msgSend_userPersonaUniqueString(v5, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v12 = (id)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (v5)
      v15 = CFSTR("Current persona identifier is ");
    else
      v15 = CFSTR("No current persona found.");
    if (v5)
    {
      objc_msgSend_userPersonaUniqueString(v5, v13, v14);
      v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = &stru_1E7838F48;
    }
    v17 = 138412802;
    v18 = v15;
    v19 = 2112;
    v20 = v16;
    v21 = 2112;
    v22 = v10;
    _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "%@%@. Filtering to effective personaID %@", (uint8_t *)&v17, 0x20u);
    if (v5)

  }
  return v10;
}

uint64_t type metadata accessor for PartialTrafficLog.ResponseMetadata(uint64_t a1)
{
  return sub_1BE9BDED4(a1, qword_1ED700560);
}

uint64_t type metadata accessor for PartialTrafficLog.RequestMetadata(uint64_t a1)
{
  return sub_1BE9BDED4(a1, qword_1ED7004A0);
}

uint64_t static TrafficLogger.shared.getter()
{
  if (qword_1ED700428 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1BE9BCC34()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;

  if ((CKIsRunningInSyncBubble() & 1) != 0)
    return 0;
  objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v0, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend_isMultiUser(v3, v4, v5) ^ 1;

  return v2;
}

id CKGetPersonaAwareHomeCacheDirectory()
{
  if ((CKThreadIsInDataSeparatedPersonaContext() & 1) != 0)
    CKGetDataSeparatedVolumeCacheDirectory();
  else
    CKGetHomeCacheDir();
  return (id)objc_claimAutoreleasedReturnValue();
}

id CKGetPersonaAwareCacheDirectory()
{
  if ((CKThreadIsInDataSeparatedPersonaContext() & 1) != 0)
    CKGetDataSeparatedVolumeCacheDirectory();
  else
    CKGetHomeCacheDir();
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t CKThreadIsInDataSeparatedPersonaContext()
{
  const char *v0;
  uint64_t v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t isDataSeparatedPersona;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  int v16;
  const __CFString *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  __CFString *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!sub_1BE9BCC34())
    return 0;
  objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v0, v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_currentPersona(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  isDataSeparatedPersona = objc_msgSend_isDataSeparatedPersona(v5, v6, v7);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (id)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v13 = &stru_1E7838F48;
    if ((_DWORD)isDataSeparatedPersona)
      v14 = &stru_1E7838F48;
    else
      v14 = CFSTR(" not");
    if (v5)
      v15 = CFSTR(" Current persona identifier is ");
    else
      v15 = CFSTR(" No current persona found.");
    if (v5)
    {
      objc_msgSend_userPersonaUniqueString(v5, v10, v11);
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    v16 = 138412802;
    v17 = v14;
    v18 = 2112;
    v19 = v15;
    v20 = 2112;
    v21 = v13;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "CK is%@ running in data separated persona context.%@%@", (uint8_t *)&v16, 0x20u);
    if (v5)

  }
  return isDataSeparatedPersona;
}

id CKGetHomeCacheDir()
{
  if (qword_1ED702BC0 != -1)
    dispatch_once(&qword_1ED702BC0, &unk_1E7837A80);
  return (id)qword_1ED702BB8;
}

uint64_t CKDaemonOperationTypeForClass(void *a1)
{
  uint64_t v1;
  const char *v2;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = qword_1ED702BD0;
  v3 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ED702BD0, &unk_1E7837AA0);
  objc_msgSend_objectForKeyedSubscript_((void *)qword_1ED702BC8, v2, (uint64_t)v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend_integerValue(v4, v5, v6);
  return v7;
}

uint64_t CKDPResponseOperationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  CKDPResponseOperationResultError *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(CKDPResponseOperationResultError);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (CKDPResponseOperationResultErrorReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPOperationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  void *v38;
  id v39;
  BOOL v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_44;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_51:
        *(_DWORD *)(a1 + 32) = v22;
        goto LABEL_61;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_55:
        v40 = v28 != 0;
        v41 = 37;
        goto LABEL_60;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_59:
        v40 = v34 != 0;
        v41 = 36;
LABEL_60:
        *(_BYTE *)(a1 + v41) = v40;
        goto LABEL_61;
      case 5u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
LABEL_44:
        v38 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_61;
      case 6u:
        v39 = objc_alloc_init(MEMORY[0x1E0C94C70]);
        objc_storeStrong((id *)(a1 + 8), v39);
        if (PBReaderPlaceMark() && (CKDPIdentifierReadFrom() & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_61:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_61;
    }
  }
}

uint64_t sub_1BE9BD5CC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9C6D38();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E1530();
  swift_task_dealloc();
  sub_1BE9E14D4();
  return sub_1BE9BE2FC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9BD614(uint64_t a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6, uint64_t a7)
{
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;

  v11 = _Block_copy(aBlock);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = v11;
  v12[5] = a1;
  v13 = a3;
  v14 = a4;
  swift_retain();
  return sub_1BE9E14F8(a7, (uint64_t)v12);
}

uint64_t sub_1BE9BD684()
{
  return swift_task_alloc();
}

uint64_t sub_1BE9BD694()
{
  return swift_task_alloc();
}

uint64_t sub_1BE9BD6A8()
{
  return swift_bridgeObjectRelease();
}

void sub_1BE9BD6B0()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_1BE9BD6C8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return type metadata accessor for Date();
}

void sub_1BE9BD6E4()
{
  JUMPOUT(0x1C3B822A0);
}

uint64_t TrafficLogger.logResponse(requestUUID:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for Logger();
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = sub_1BE9BD684();
  v4[10] = sub_1BE9BEF78();
  v4[11] = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

uint64_t TrafficLogger.logRequest(requestUUID:request:url:method:messageClass:parsingStandaloneMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v11;

  *(_QWORD *)(v9 + 112) = a8;
  *(_QWORD *)(v9 + 120) = v8;
  *(_BYTE *)(v9 + 152) = v11;
  *(_QWORD *)(v9 + 96) = a6;
  *(_QWORD *)(v9 + 104) = a7;
  *(_QWORD *)(v9 + 80) = a4;
  *(_QWORD *)(v9 + 88) = a5;
  *(_QWORD *)(v9 + 64) = a2;
  *(_QWORD *)(v9 + 72) = a3;
  *(_QWORD *)(v9 + 56) = a1;
  *(_QWORD *)(v9 + 128) = sub_1BE9BEF78();
  *(_QWORD *)(v9 + 136) = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return swift_task_switch();
}

uint64_t sub_1BE9BD7A8()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  const void *v4;

  sub_1BE9BDB34();
  v2 = v1[6];
  v3 = v1[5];
  v4 = (const void *)v1[3];
  sub_1BE9B69AC();
  sub_1BE9BE5BC(v3, v2);
  sub_1BE9B6958();
  swift_release();
  sub_1BE9E1660();
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BE9BD818()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9C6D38();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E1530();
  swift_task_dealloc();
  return sub_1BE9BE2FC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9BD858(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1BE9BD864()
{
  return swift_beginAccess();
}

uint64_t sub_1BE9BD86C()
{
  return swift_allocObject();
}

uint64_t sub_1BE9BD878()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9BD888()
{
  return swift_task_alloc();
}

void sub_1BE9BD89C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_1BE9BD8AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_1BE9BD8B4()
{
  JUMPOUT(0x1C3B822A0);
}

uint64_t sub_1BE9BD8BC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9BD8C8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    sub_1BE9BE684();
    if (v7 != v8)
    {
      sub_1BE9B69F4();
      if (v7)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1BE9BDAF0();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (!v10)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  sub_1BE9BEF38(&qword_1ED7007B0);
  v11 = *(_QWORD *)(type metadata accessor for PartialTrafficLog(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (_QWORD *)swift_allocObject();
  v15 = j__malloc_size(v14);
  if (!v12 || (v15 - v13 == 0x8000000000000000 ? (v16 = v12 == -1) : (v16 = 0), v16))
  {
LABEL_23:
    sub_1BE9BF470();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v14[2] = v9;
  v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
LABEL_18:
  type metadata accessor for PartialTrafficLog(0);
  sub_1BE9F54BC();
  v18 = (unint64_t)v14 + v17;
  if ((a1 & 1) != 0)
  {
    sub_1BE9BE7AC(a4 + v17, v9, v18, (void (*)(_QWORD))type metadata accessor for PartialTrafficLog);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1BE9C92F4(0, v9, v18, a4);
  }
  return (uint64_t)v14;
}

uint64_t sub_1BE9BDA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1BE9BDA80()
{
  return swift_bridgeObjectRelease();
}

void sub_1BE9BDA88(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_1BE9BDAA0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1BE9BDAA8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1BE9BDAB8()
{
  return static String.Encoding.utf8.getter();
}

uint64_t sub_1BE9BDAC8()
{
  return String.hash(into:)();
}

uint64_t sub_1BE9BDAD8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1BE9BDAE0()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_1BE9BDB00()
{
  return swift_bridgeObjectRelease();
}

id sub_1BE9BDB2C(id a1)
{
  return a1;
}

void sub_1BE9BDB34()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1BE9BDB44(uint64_t a1, uint64_t a2)
{
  return sub_1BE9E2CB8(a1, a2);
}

uint64_t sub_1BE9BDB4C()
{
  return swift_bridgeObjectRetain_n();
}

void *sub_1BE9BDB54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = a1;
  return _Block_copy((const void *)(v2 - 160));
}

uint64_t sub_1BE9BDB60()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t sub_1BE9BDB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, v2);
}

uint64_t sub_1BE9BDB84()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1BE9BDB8C()
{
  uint64_t v0;

  sub_1BE9B69AC();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1BE9BDBC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = *(_QWORD **)(v0 + 48);
  if (!v1[17])
  {
    v2 = os_transaction_create();
    sub_1BE9C9F60(v2);
    v1 = *(_QWORD **)(v0 + 48);
  }
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  sub_1BE9BD864();
  sub_1BE9BE1B8();
  v5 = *(_QWORD *)(v1[14] + 16);
  sub_1BE9BE17C(v5);
  v6 = v1[14];
  *(_QWORD *)(v6 + 16) = v5 + 1;
  sub_1BE9BDE90(v4, v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v5);
  swift_endAccess();
  sub_1BE9BE1FC();
  v7 = v1[15];
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  if (v9)
  {
    __break(1u);
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 40);
  v1[15] = v10;
  sub_1BE9BDE90(v12, v11);
  if (swift_getEnumCaseMultiPayload() != 6)
  {
    sub_1BE9BE428(*(_QWORD *)(v0 + 80));
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v13 + 128);
  v9 = __OFADD__(v14, 1);
  v15 = v14 + 1;
  if (v9)
  {
LABEL_18:
    __break(1u);
    return;
  }
  *(_QWORD *)(v13 + 128) = v15;
LABEL_8:
  v16 = objc_msgSend((id)objc_opt_self(), sel_sharedOptions);
  v17 = objc_msgSend(v16, sel_shouldStreamTrafficLogs);

  if (v17)
  {
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v18;
    v19 = sub_1BE9DE6A4;
LABEL_13:
    *v18 = v0;
    v18[1] = v19;
    sub_1BE9DEA84();
    return;
  }
  v20 = *(_QWORD *)(v0 + 48);
  if (*(uint64_t *)(v20 + 128) > 9 || (uint64_t)v1[15] >= 300001)
  {
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v18;
    v19 = sub_1BE9DE6DC;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(v20 + 144))
  {
    v21 = *(_QWORD *)(v0 + 56);
    MEMORY[0x1C3B8242C]();
    v22 = type metadata accessor for TaskPriority();
    sub_1BE9BE35C(v21, v23, v24, v22);
    v25 = (_QWORD *)sub_1BE9C6C7C();
    v25[2] = 0;
    v25[3] = 0;
    v25[4] = v20;
    swift_retain();
    v26 = sub_1BE9DE918(v21, (uint64_t)&unk_1EF570110, (uint64_t)v25);
    sub_1BE9BEF00(v21, &qword_1ED700768);
    sub_1BE9C9F50(v26);
  }
  swift_task_dealloc();
  sub_1BE9E14D4();
  sub_1BE9BE2FC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9BDE34()
{
  return swift_task_alloc();
}

uint64_t sub_1BE9BDE3C(uint64_t a1)
{
  uint64_t v1;

  return _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, 1, v1);
}

void sub_1BE9BDE6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1BE9BDE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 208))(a1, v1);
}

uint64_t sub_1BE9BDE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a1, 1, 1, a4);
}

uint64_t sub_1BE9BDE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PartialTrafficLog(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE9BDED4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void initializeWithCopy for PartialTrafficLog()
{
  char *v0;

  v0 = (char *)sub_1BE9BDF58 + 4 * byte_1BECB9C51[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1BE9BDF58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v4 = v1[2];
  v3 = v1[3];
  swift_bridgeObjectRetain();
  sub_1BE9BE3E4(v4, v3);
  v0[2] = v4;
  v0[3] = v3;
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_1BE9BE110(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1BE9BE12C()
{
  return Data._Representation.subscript.getter();
}

uint64_t sub_1BE9BE138()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9BE144()
{
  return 0;
}

uint64_t sub_1BE9BE160()
{
  return swift_arrayDestroy();
}

uint64_t sub_1BE9BE174()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9BE17C(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    result = sub_1BE9BD8C8(v2 > 1, result + 1, 1, *v1);
    *v1 = result;
  }
  return result;
}

void sub_1BE9BE1B8()
{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
    *v0 = sub_1BE9BD8C8(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
  sub_1BE9B69D4();
}

void sub_1BE9BE1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;

  type metadata accessor for PartialTrafficLog(0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78]();
  sub_1BE9BDA90();
  sub_1BE9BE3B8(v0, v2 - v1, v3);
  v4 = (char *)&loc_1BE9BE26C + *((int *)qword_1BE9FB958 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_1BE9BE27C()
{
  uint64_t v0;

  sub_1BE9BE8F8(v0, type metadata accessor for PartialTrafficLog);
  return 22;
}

void sub_1BE9BE2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BEA036C0();
  v2 = sub_1BEA036A0();
  sub_1BE9BDA80();
  sub_1BEA0354C(v0);
  if (__OFADD__(v1, v2))
    __break(1u);
  JUMPOUT(0x1BE9BE298);
}

void sub_1BE9BE2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BEA036C0();
  v2 = sub_1BEA036A0();
  sub_1BE9BDA80();
  sub_1BEA0354C(v0);
  if (__OFADD__(v1, v2))
    __break(1u);
  JUMPOUT(0x1BE9BE298);
}

uint64_t sub_1BE9BE2FC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1BE9BE304()
{
  return swift_slowAlloc();
}

void sub_1BE9BE30C(unint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1BE9E273C(a1 > 1, v1, 1);
}

uint64_t sub_1BE9BE324()
{
  return swift_task_switch();
}

id sub_1BE9BE33C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, (SEL)(v3 + 328), v2, a1);
}

uint64_t sub_1BE9BE354()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9BE35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a1, 0, 1, a4);
}

uint64_t sub_1BE9BE368()
{
  return Logger.logObject.getter();
}

uint64_t sub_1BE9BE370(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1BE9BE38C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9BE3A8()
{
  return Logger.logObject.getter();
}

Swift::Int sub_1BE9BE3B0()
{
  return Hasher._finalize()();
}

void sub_1BE9BE3B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_1BEA036B0(a1, a2, a3);
  sub_1BE9BF4FC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_1BE9B69D4();
}

uint64_t sub_1BE9BE3E4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1BE9BE428(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PartialTrafficLog(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PartialTrafficLog(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      v4 = a1 + *(int *)(v3 + 20);
      v5 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      v6 = a1 + *(int *)(v3 + 24);
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 1:
    case 5:
      swift_bridgeObjectRelease();
      return sub_1BE9BE5BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    case 2:
    case 6:
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease();
      v8 = a1 + *(int *)(type metadata accessor for PartialTrafficLog.ResponseMetadata(0) + 20);
      v9 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      goto LABEL_6;
    case 4:
      swift_bridgeObjectRelease();
LABEL_6:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BE9BE5BC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1BE9BE600(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = v1;
  sub_1BE9BEF38(&qword_1ED700768);
  v2[7] = sub_1BE9BE6C0();
  v3 = sub_1BE9BEF78();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = sub_1BE9BD684();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

uint64_t sub_1BE9BE658@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_task_dealloc();
}

void sub_1BE9BE660(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  int v5;

  v3 = __OFSUB__(a1, v1);
  v4 = a1 - v1;
  v5 = v3;
  *(_DWORD *)(v2 - 156) = v5;
  *(_QWORD *)(v2 - 168) = v4;
}

uint64_t sub_1BE9BE678()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void sub_1BE9BE694(id a1)
{

}

uint64_t sub_1BE9BE6A4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1BE9BE6C0()
{
  return swift_task_alloc();
}

void sub_1BE9BE6D4()
{
  JUMPOUT(0x1C3B84598);
}

uint64_t sub_1BE9BE6E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9BE6FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1BE9BE714()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_1BE9BE734()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_1BE9BE754(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1BE9BEF38(a3);
}

void sub_1BE9BE760()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
}

uint64_t sub_1BE9BE774()
{
  return String.hash(into:)();
}

uint64_t sub_1BE9BE794()
{
  return swift_getEnumCaseMultiPayload();
}

void sub_1BE9BE7A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1BE9BE7AC(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;

  if (a2 < 0)
  {
    sub_1BE9BF470();
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    sub_1BE9F5488();
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    sub_1BE9F5488();
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void sub_1BE9BE888()
{
  void *v0;

}

uint64_t sub_1BE9BE890(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE9E2CB8(a1, v1);
}

void sub_1BE9BE898(uint64_t a1@<X8>)
{
  char v1;

  *(_QWORD *)(a1 + 64) |= 1 << v1;
}

void sub_1BE9BE8B0(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 256) = a1;
}

void sub_1BE9BE8EC()
{
  void *v0;

}

void sub_1BE9BE8F8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_1BE9B69D4();
}

uint64_t sub_1BE9BE930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  sub_1BE9BEF38(&qword_1ED700768);
  MEMORY[0x1E0C80A78]();
  sub_1BE9BDA90();
  v6 = v5 - v4;
  v7 = type metadata accessor for TaskPriority();
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v6, 1, 1, v7);
  v8 = (_QWORD *)sub_1BE9B69EC();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)sub_1BE9B69EC();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_1EF570B98;
  v9[5] = v8;
  sub_1BE9FAA70(v6, (uint64_t)&unk_1EF570BA8, (uint64_t)v9);
  return swift_release();
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1BE9BEA14()
{
  return swift_release();
}

uint64_t sub_1BE9BEA1C()
{
  return swift_release();
}

void sub_1BE9BEA38(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_1BE9BEF38(a2);
  sub_1BE9FB94C(*(_QWORD *)(v2 - 8));
  sub_1BE9B69D4();
}

uint64_t sub_1BE9BEA68()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9BEA70()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_1BE9BEA80(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

_QWORD *sub_1BE9BEAA4()
{
  _QWORD *v0;
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)v0[8];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[3];
  *result = v0[2];
  result[1] = v4;
  result[2] = v2;
  result[3] = v3;
  return result;
}

uint64_t sub_1BE9BEABC()
{
  return swift_task_dealloc();
}

void sub_1BE9BEAC4()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_unlock(v0);
}

uint64_t sub_1BE9BEAD0()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

unint64_t sub_1BE9BEAE8(uint64_t a1)
{
  _QWORD *v2;
  int64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];
  _BYTE __dst[72];
  _BYTE __src[72];
  _QWORD v29[6];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BE9BEF38(&qword_1ED7003B0);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  sub_1BE9C92A0(a1, v29);
  v3 = v29[3];
  v4 = v29[4];
  v21 = (unint64_t)(v29[2] + 64) >> 6;
  v22 = v29[1];
  v23 = v29[0];
  result = swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_6;
LABEL_5:
  v6 = (v4 - 1) & v4;
  v7 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; v7 = __clz(__rbit64(v10)) + (i << 6))
  {
    sub_1BE9BEEC4(*(_QWORD *)(v23 + 48) + 40 * v7, (uint64_t)__src);
    sub_1BE9BEE88(*(_QWORD *)(v23 + 56) + 32 * v7, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1BE9BEEC4((uint64_t)__dst, (uint64_t)v26);
    if (!swift_dynamicCast())
    {
      sub_1BE9BEF00((uint64_t)__dst, (uint64_t *)&unk_1ED700390);
LABEL_33:
      swift_bridgeObjectRelease();
      sub_1BE9E13C4();
      swift_release();
      return 0;
    }
    sub_1BE9BEE88((uint64_t)&__dst[40], (uint64_t)v26);
    sub_1BE9BEF00((uint64_t)__dst, (uint64_t *)&unk_1ED700390);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    result = sub_1BE9BF2A0(v24, v25);
    v12 = result;
    if ((v13 & 1) != 0)
    {
      v14 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v14 = v24;
      v14[1] = v25;
      v15 = (uint64_t *)(v2[7] + 16 * v12);
      result = swift_bridgeObjectRelease();
      *v15 = v24;
      v15[1] = v25;
      goto LABEL_29;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v16 = (uint64_t *)(v2[6] + 16 * result);
    *v16 = v24;
    v16[1] = v25;
    v17 = (uint64_t *)(v2[7] + 16 * result);
    *v17 = v24;
    v17[1] = v25;
    v18 = v2[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_37;
    v2[2] = v20;
LABEL_29:
    v3 = i;
    v4 = v6;
    if (v6)
      goto LABEL_5;
LABEL_6:
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_38;
    if (v9 >= v21)
      goto LABEL_34;
    v10 = *(_QWORD *)(v22 + 8 * v9);
    i = v3 + 1;
    if (!v10)
    {
      i = v3 + 2;
      if (v3 + 2 >= v21)
        goto LABEL_34;
      v10 = *(_QWORD *)(v22 + 8 * i);
      if (!v10)
      {
        i = v3 + 3;
        if (v3 + 3 >= v21)
          goto LABEL_34;
        v10 = *(_QWORD *)(v22 + 8 * i);
        if (!v10)
        {
          i = v3 + 4;
          if (v3 + 4 >= v21)
            goto LABEL_34;
          v10 = *(_QWORD *)(v22 + 8 * i);
          if (!v10)
          {
            i = v3 + 5;
            if (v3 + 5 >= v21)
              goto LABEL_34;
            v10 = *(_QWORD *)(v22 + 8 * i);
            if (!v10)
            {
              v11 = v3 + 6;
              while (v11 < v21)
              {
                v10 = *(_QWORD *)(v22 + 8 * v11++);
                if (v10)
                {
                  i = v11 - 1;
                  goto LABEL_21;
                }
              }
LABEL_34:
              sub_1BE9E13C4();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    v6 = (v10 - 1) & v10;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1BE9BEE88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1BE9BEEC4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

void sub_1BE9BEF00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1BE9BEF38(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_1BE9B69D4();
}

uint64_t sub_1BE9BEF38(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B844F0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1BE9BEF78()
{
  return type metadata accessor for PartialTrafficLog(0);
}

uint64_t sub_1BE9BEF80()
{
  return dispatch thunk of Hashable.hash(into:)();
}

void sub_1BE9BEF94()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 524) = 0;
  *(_DWORD *)(v0 - 528) = 0;
  *(_QWORD *)(v0 - 352) = 0;
}

void sub_1BE9BEFB0()
{
  void *v0;

}

void sub_1BE9BEFB8(uint64_t a1, unint64_t *a2)
{
  sub_1BEA04E64(0, a2);
}

void sub_1BE9BEFC0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  id v26;
  Swift::String v27;
  Swift::String v28;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  while (1)
  {
    v7 = *(v5 - 3);
    v6 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = sub_1BE9BF2A0(v7, v6);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v16 = v11;
    if (v10[3] < v15)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1BE9BEF38((uint64_t *)&unk_1ED7007B8);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v20 = (uint64_t *)(v19[6] + 16 * v12);
    *v20 = v7;
    v20[1] = v6;
    v21 = (_QWORD *)(v19[7] + 16 * v12);
    *v21 = v9;
    v21[1] = v8;
    v22 = v19[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_18;
    v5 += 4;
    v19[2] = v24;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  sub_1BE9E0B38(v15, a2 & 1);
  v17 = sub_1BE9BF2A0(v7, v6);
  if ((v16 & 1) != (v18 & 1))
    goto LABEL_19;
  v12 = v17;
  if ((v16 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v25 = (void *)swift_allocError();
  swift_willThrow();
  v26 = v25;
  sub_1BE9BEF38(&qword_1ED700400);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x80000001BECBD700;
  v27._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  v28._countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t sub_1BE9BF2A0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  sub_1BE9EDE14();
  sub_1BE9EDDC4();
  v4 = Hasher._finalize()();
  return sub_1BE9BF2F0(a1, a2, v4);
}

unint64_t sub_1BE9BF2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1BE9BF3D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1BE9BF3F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9BF3FC(uint64_t a1)
{
  unint64_t v1;

  return sub_1BE9BE5BC(a1, v1);
}

id sub_1BE9BF41C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1BE9BF424()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1BE9BF438(uint64_t a1)
{
  uint64_t v1;

  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1BE9BF44C()
{
  return swift_task_switch();
}

uint64_t sub_1BE9BF458()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1BE9BF468()
{
  return type metadata accessor for CKLogEvent();
}

uint64_t sub_1BE9BF484()
{
  return print(_:separator:terminator:)();
}

uint64_t sub_1BE9BF4B0()
{
  return swift_beginAccess();
}

uint64_t sub_1BE9BF4C0(uint64_t a1)
{
  return sub_1BE9BE600(a1);
}

uint64_t sub_1BE9BF4D0()
{
  return swift_release();
}

uint64_t sub_1BE9BF4EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_1BE9BF4FC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1BE9BF508(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1BE9BF524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 112));
}

uint64_t sub_1BE9BF534()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9BF540()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t TrafficLogger.logPartialResponseObjectData(requestUUID:objectData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = sub_1BE9BEF78();
  v5[8] = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

void CKMuckingWithPersonas(void *a1)
{
  void (**v1)(_QWORD);
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  id v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  os_log_t *v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  id v28;
  uint8_t buf[4];
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((sub_1BE9BCC34() & 1) != 0)
  {
    objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_currentPersona(v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 0;
    v9 = (void *)objc_msgSend_copyCurrentPersonaContextWithError_(v7, v8, (uint64_t)&v28);
    v10 = v28;

    v11 = (void **)MEMORY[0x1E0C952F8];
    v12 = (void *)*MEMORY[0x1E0C952F8];
    v13 = (_QWORD *)MEMORY[0x1E0C95300];
    v14 = (os_log_t *)MEMORY[0x1E0C952B0];
    if (v10)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v12);
      v15 = *v14;
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v30 = v10;
        _os_log_error_impl(&dword_1BE990000, v15, OS_LOG_TYPE_ERROR, "Error setting aside persona context: %@", buf, 0xCu);
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v12);
      v16 = *v14;
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v30 = v9;
        _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Current thread caching context %@", buf, 0xCu);
      }
    }
    v1[2](v1);
    if (v9)
    {
      objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_currentPersona(v19, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_restorePersonaWithSavedPersonaContext_(v22, v23, (uint64_t)v9);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      v25 = *v11;
      if (v24)
      {
        if (*v13 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v25);
        v26 = *v14;
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v30 = v24;
          _os_log_error_impl(&dword_1BE990000, v26, OS_LOG_TYPE_ERROR, "Error restoring persona context: %@", buf, 0xCu);
        }
      }
      else
      {
        if (*v13 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v25);
        v27 = *v14;
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v30 = v9;
          _os_log_debug_impl(&dword_1BE990000, v27, OS_LOG_TYPE_DEBUG, "Current thread restored context %@", buf, 0xCu);
        }
        v24 = 0;
      }
    }
    else
    {
      v24 = v10;
    }

  }
  else
  {
    v1[2](v1);
  }

}

uint64_t TrafficLogger.logPartialRequestObjectData(requestUUID:objectData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = sub_1BE9BEF78();
  v5[8] = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

uint64_t TrafficLogger.finishRequestLog(requestUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = sub_1BE9BEF78();
  v3[6] = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

BOOL CKAdoptPersonaID(void *a1)
{
  id v1;
  __CFString *v2;
  const char *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  int isEnterprisePersona;
  _QWORD *v8;
  os_log_t *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  __CFString *v18;
  void *v19;
  NSObject *v20;
  _BOOL8 v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  __CFString *v35;
  void *v36;
  NSObject *v37;
  NSObject *v38;
  os_log_t v39;
  const __CFString *v41;
  void *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  __CFString *v52;
  int v53;
  const __CFString *v54;
  __int16 v55;
  __CFString *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (sub_1BE9BCC34())
  {
    v2 = (__CFString *)v1;
    objc_msgSend_personaAttributesForPersonaUniqueString_(MEMORY[0x1E0DC5F00], v3, (uint64_t)v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    isEnterprisePersona = objc_msgSend_isEnterprisePersona(v4, v5, v6);

    v8 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (os_log_t *)MEMORY[0x1E0C952B0];
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v41 = CFSTR(" not");
      if (isEnterprisePersona)
        v41 = &stru_1E7838F48;
      v53 = 138412546;
      v54 = v41;
      v55 = 2112;
      v56 = v2;
      _os_log_debug_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEBUG, "Should%@ adopt persona with ID %@", (uint8_t *)&v53, 0x16u);
    }

    if ((isEnterprisePersona & 1) != 0)
    {
      objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_currentPersona(v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_generateAndRestorePersonaContextWithPersonaUniqueString_(v16, v17, (uint64_t)v2);
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();

      v19 = (void *)*MEMORY[0x1E0C952F8];
      if (v18)
      {
        if (*v8 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v19);
        v20 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_FAULT))
        {
          v53 = 138412546;
          v54 = v2;
          v55 = 2112;
          v56 = v18;
          _os_log_fault_impl(&dword_1BE990000, v20, OS_LOG_TYPE_FAULT, "Couldn't adopt personaID %@ : %@", (uint8_t *)&v53, 0x16u);
        }
        v21 = 0;
      }
      else
      {
        if (*v8 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v19);
        v38 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
        {
          v53 = 138412290;
          v54 = v2;
          _os_log_debug_impl(&dword_1BE990000, v38, OS_LOG_TYPE_DEBUG, "Current thread adopting persona %@", (uint8_t *)&v53, 0xCu);
        }
        v18 = 0;
        v21 = 1;
      }
    }
    else
    {
      v21 = v2 == 0;
      objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v11, v12);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_currentPersona(v22, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_userPersonaUniqueString(v25, v26, v27);
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_currentPersona(v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_generateAndRestorePersonaContextWithPersonaUniqueString_(v33, v34, 0);
      v35 = (__CFString *)objc_claimAutoreleasedReturnValue();

      v36 = (void *)*MEMORY[0x1E0C952F8];
      if (v35)
      {
        if (*v8 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v36);
        v37 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_FAULT))
        {
          v53 = 138412546;
          v54 = v18;
          v55 = 2112;
          v56 = v35;
          _os_log_fault_impl(&dword_1BE990000, v37, OS_LOG_TYPE_FAULT, "Couldn't drop current persona %@: %@", (uint8_t *)&v53, 0x16u);
        }
        v21 = 0;
      }
      else
      {
        if (*v8 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v36);
        v39 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
        {
          v42 = (void *)MEMORY[0x1E0DC5EE8];
          v43 = v39;
          objc_msgSend_sharedManager(v42, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_currentPersona(v46, v47, v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_userPersonaUniqueString(v49, v50, v51);
          v52 = (__CFString *)objc_claimAutoreleasedReturnValue();
          v53 = 138412546;
          v54 = v18;
          v55 = 2112;
          v56 = v52;
          _os_log_debug_impl(&dword_1BE990000, v43, OS_LOG_TYPE_DEBUG, "Current thread dropping persona %@. New persona is %@", (uint8_t *)&v53, 0x16u);

        }
      }

    }
  }
  else
  {
    v21 = 1;
  }

  return v21;
}

uint64_t TrafficLogger.logResponseConfiguration(requestUUID:format:messageClass:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = sub_1BE9BEF78();
  v6[9] = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

id CKVerifyFilters(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  char v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v1 = a1;
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v18, v22, 16);
  if (v3)
  {
    v6 = v3;
    v7 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v1);
        objc_msgSend_fieldName(*(void **)(*((_QWORD *)&v18 + 1) + 8 * i), v4, v5, (_QWORD)v18);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_name(v9, v10, v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        sub_1BE9BFEF0();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend_containsObject_(v13, v14, (uint64_t)v12);

        if ((v15 & 1) != 0 || !v12)
        {

          goto LABEL_13;
        }
        CKValidateKeyName();
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
          goto LABEL_14;
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v18, v22, 16);
      v16 = 0;
      if (v6)
        continue;
      break;
    }
  }
  else
  {
LABEL_13:
    v16 = 0;
  }
LABEL_14:

  return v16;
}

id sub_1BE9BFEF0()
{
  if (qword_1ED702880 != -1)
    dispatch_once(&qword_1ED702880, &unk_1E78339C8);
  return (id)qword_1ED702878;
}

uint64_t sub_1BE9BFF50(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  char isBackgroundAssetsExtension;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v22;
  int v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend_entitlements(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cloudServices(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_containsObject_(v10, v11, *MEMORY[0x1E0C95340]) & 1) == 0)
  {

LABEL_7:
    v20 = 0;
    goto LABEL_8;
  }
  objc_msgSend_entitlements(v4, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  isBackgroundAssetsExtension = objc_msgSend_isBackgroundAssetsExtension(v14, v15, v16);

  if ((isBackgroundAssetsExtension & 1) != 0 || (sub_1BE9B3540(v3, v4) & 1) != 0)
    goto LABEL_7;
  if ((objc_msgSend_hasTCCAuthorization(v4, v18, v19) & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v22 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v23 = 138412546;
      v24 = v3;
      v25 = 2112;
      v26 = v4;
      _os_log_impl(&dword_1BE990000, v22, OS_LOG_TYPE_INFO, "TCC rejected a token for bundleID:%@, container:%@", (uint8_t *)&v23, 0x16u);
    }
    goto LABEL_7;
  }
  v20 = 1;
LABEL_8:

  return v20;
}

void sub_1BE9C00E0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  id v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSObject *v42;
  id *v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  const char *v50;
  _QWORD v51[4];
  id v52;
  id v53;
  _QWORD v54[4];
  _QWORD v55[2];
  id v56;
  id v57;
  id v58;
  char v59;
  uint8_t buf[4];
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_account(*(void **)(a1 + 48), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_accountType(v9, v10, v11);

  if (v12 <= 1 && v6 == 0)
  {
    objc_msgSend_deviceContext(*(void **)(a1 + 56), v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadataCache(v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerID(*(void **)(a1 + 48), v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_account(*(void **)(a1 + 48), v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_accountID(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerServerInfoForContainerID_accountID_(v19, v29, (uint64_t)v22, v28);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v33, (uint64_t)v6, *(_QWORD *)(a1 + 40));

      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v34 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v61 = v6;
        _os_log_debug_impl(&dword_1BE990000, v34, OS_LOG_TYPE_DEBUG, "Set container info from cached metadata: %@", buf, 0xCu);
      }
    }
  }
  v35 = v6;
  v38 = v35;
  if (*(_BYTE *)(a1 + 80))
  {
    objc_msgSend_containerScopedUserID(v35, v36, v37);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v39)
    {

      goto LABEL_17;
    }
  }
  if (!v38)
  {
LABEL_17:
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v44 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v44, OS_LOG_TYPE_DEBUG, "No in-memory containerSpecificInfo, going to the server", buf, 2u);
    }
    v45 = *(void **)(a1 + 32);
    v46 = *(unsigned __int8 *)(a1 + 80);
    v54[0] = MEMORY[0x1E0C809B0];
    v54[1] = 3221225472;
    v54[2] = sub_1BEBAA314;
    v54[3] = &unk_1E7836238;
    v43 = (id *)v55;
    v47 = *(_QWORD *)(a1 + 56);
    v48 = *(id *)(a1 + 48);
    v49 = *(_QWORD *)(a1 + 32);
    v55[0] = v48;
    v55[1] = v49;
    v56 = *(id *)(a1 + 56);
    v59 = *(_BYTE *)(a1 + 80);
    v58 = *(id *)(a1 + 72);
    v57 = *(id *)(a1 + 64);
    objc_msgSend__fetchContainerSpecificInfoForOperation_requireUserIDs_completionHandler_(v45, v50, v47, v46, v54);

    v41 = 0;
    goto LABEL_22;
  }
  v40 = *(void **)(a1 + 72);
  v41 = v38;
  if (v40)
  {
    v42 = *(NSObject **)(a1 + 64);
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = sub_1BEBAA4AC;
    v51[3] = &unk_1E782EC68;
    v43 = &v53;
    v53 = v40;
    v41 = v38;
    v52 = v41;
    dispatch_async(v42, v51);

LABEL_22:
  }

}

void sub_1BE9C0480(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;

  v4 = (void *)MEMORY[0x1E0C94FF8];
  v5 = *MEMORY[0x1E0C94B20];
  objc_msgSend_operationID(*(void **)(a1 + 32), a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_format_(v4, v7, v5, 1000, CFSTR("Failed to get server info for container, operation unexpectedly missing container: %@ "), v6);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1BE9C0510(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = *(id *)(a1 + 32);
  objc_sync_enter(v8);
  if (v7)
  {
    v9 = *(id *)(a1 + 32);
    objc_sync_enter(v9);
    objc_msgSend_processScopedClientProxyCreator(*(void **)(a1 + 32), v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v14 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v25 = 138412546;
        v26 = v17;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Ignoring superfluous process scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
      }
      objc_msgSend_processScopedClientProxyCreator(*(void **)(a1 + 32), v15, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend_setProcessScopedClientProxyCreator_(*(void **)(a1 + 32), v13, (uint64_t)v7);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v23 = *MEMORY[0x1E0C952B0];
      v18 = v7;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = 138412546;
        v26 = v24;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "Got a process scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
        v18 = v7;
      }
    }
    objc_sync_exit(v9);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v25 = 138412546;
      v26 = v22;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_1BE990000, v19, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get process scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
    }
    objc_msgSend_processScopedClientProxyCreator(*(void **)(a1 + 32), v20, v21);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_sync_exit(v8);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1BE9C07F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9C0824(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v6;
      objc_msgSend_operationID(v8, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v14, 0x16u);

    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  objc_msgSend_perRequestGroup(*(void **)(a1 + 40), v3, v4);
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v13);

}

void sub_1BE9C0960(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  uint64_t v23;
  id v24;

  objc_msgSend_serverChangeTokenUpdatedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4
    && (v7 = (void *)v4,
        v8 = objc_msgSend_shouldReturnServerChangeTokensToAdopter(*(void **)(a1 + 32), v5, v6),
        v7,
        v8))
  {
    objc_msgSend_serverChangeTokenUpdatedBlock(*(void **)(a1 + 32), v5, v6);
    v9 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 40);
    objc_msgSend_error(*(void **)(a1 + 32), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = MEMORY[0x1E0C809B0];
    v20 = 3221225472;
    v21 = sub_1BE9C0824;
    v22 = &unk_1E782EB38;
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(id *)(a1 + 48);
    ((void (**)(_QWORD, uint64_t, uint64_t, void *, uint64_t *))v9)[2](v9, v11, v10, v14, &v19);

  }
  else
  {
    objc_msgSend_perRequestGroup(*(void **)(a1 + 48), v5, v6);
    v17 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v17);

  }
  objc_msgSend_fetchZonesGroup(*(void **)(a1 + 32), v15, v16, v19, v20, v21, v22, v23);
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v18);

}

void sub_1BE9C0A80(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id v5;
  const char *v6;
  id WeakRetained;

  v3 = (id *)(a1 + 32);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleAttributesChangedForZone_perRequestSchedulerInfo_(WeakRetained, v6, (uint64_t)v4, v5);

}

void sub_1BE9C0AEC(uint64_t a1, void *a2)
{
  id WeakRetained;
  const char *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend_isFinished(WeakRetained, v4, v5))
  {

    v8 = (id)MEMORY[0x1E0C9AA60];
  }
  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleChangedRecords_perRequestSchedulerInfo_(WeakRetained, v7, (uint64_t)v8, v6);

}

void sub_1BE9C0B68(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  _QWORD block[5];
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = sub_1BE9BAF98;
  v19 = sub_1BE9BAD80;
  v20 = 0;
  v2 = _os_activity_create(&dword_1BE990000, "url-request-transmission", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE997F00;
  block[3] = &unk_1E7831250;
  block[4] = *(_QWORD *)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v14 = &v15;
  os_activity_apply(v2, block);
  v3 = v13;
  v4 = v2;

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = v4;

  objc_msgSend_valueForHTTPHeaderField_((void *)v16[5], v6, *MEMORY[0x1E0C94850]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (id)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_requestUUID(*(void **)(a1 + 32), v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v22 = v11;
    v23 = 2112;
    v24 = v7;
    _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"[originalRequest mutableCopy] header UUID=%@\"", buf, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  _Block_object_dispose(&v15, 8);
}

void sub_1BE9C0D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9C0DAC(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  const char *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint8_t buf[16];

  objc_msgSend__perServicelookupKeyForContainer_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a1 + 72))
  {
    v19 = *(void **)(a1 + 32);
    objc_msgSend_containerID(*(void **)(a1 + 40), v3, v4);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_environment(v20, v21, v22);
    objc_msgSend_deviceIDsByContainerIdentifierInContainerEnvironment_(v19, v24, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)v5);
    v18 = objc_claimAutoreleasedReturnValue();

    if (v18)
    {
LABEL_7:
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v28 = *(void **)(v27 + 40);
      *(_QWORD *)(v27 + 40) = v18;

      goto LABEL_20;
    }
  }
  objc_msgSend_deviceContext(*(void **)(a1 + 40), v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReference(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (qword_1ED702B60 != -1)
      dispatch_once(&qword_1ED702B60, &unk_1E7837160);
    v12 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_containerID(*(void **)(a1 + 40), v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerIdentifier(v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v12, v17, (uint64_t)CFSTR("%@-%@"), v16, qword_1ED702B58);
    v18 = objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  objc_msgSend__savedDeviceIdentifierForService_lookupKey_success_(*(void **)(a1 + 32), v10, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (!*(_BYTE *)(a1 + 72))
    {
      v32 = *(void **)(a1 + 32);
      objc_msgSend_containerID(*(void **)(a1 + 40), v30, v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend_environment(v33, v34, v35);
      objc_msgSend_deviceIDsByContainerIdentifierInContainerEnvironment_(v32, v37, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v38, v39, (uint64_t)v29, v5);

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v40 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE990000, v40, OS_LOG_TYPE_INFO, "Fetched deviceID from keychain", buf, 2u);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v29);
  }
  else if (*(_BYTE *)(a1 + 73))
  {
    CKCreateGUID();
    v41 = objc_claimAutoreleasedReturnValue();
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v43 = *(void **)(v42 + 40);
    *(_QWORD *)(v42 + 40) = v41;

    objc_msgSend__saveDeviceIdentifier_forService_lookupKey_sysBound_success_(*(void **)(a1 + 32), v44, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0, 0);
  }

LABEL_20:
}

void sub_1BE9C1050(void **a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  const char *v28;
  id v29;

  v29 = a2;
  v5 = a3;
  if (objc_msgSend_status(v5, v6, v7) != 3)
  {
    objc_msgSend_objectForKeyedSubscript_(a1[4], v8, (uint64_t)v29);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      objc_msgSend_configurationsByRecordZoneID(a1[5], v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)v29);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend_copy(v14, v15, v16);
      v18 = v17;
      if (v17)
        v19 = v17;
      else
        v19 = (id)objc_opt_new();
      v20 = v19;

      v21 = objc_alloc(MEMORY[0x1E0C95100]);
      objc_msgSend_resultServerChangeTokenData(v5, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = (void *)objc_msgSend_initWithData_(v21, v25, (uint64_t)v24);
      objc_msgSend_setPreviousServerChangeToken_(v20, v27, (uint64_t)v26);

      objc_msgSend_setObject_forKeyedSubscript_(a1[6], v28, (uint64_t)v20, v29);
    }
  }

}

uint64_t sub_1BE9C1170(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE9C1180(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  BOOL v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  __CFString *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  NSObject *v54;
  dispatch_source_t v55;
  uint64_t v56;
  NSObject *v57;
  _QWORD *v58;
  dispatch_time_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  void *v68;
  NSObject *v69;
  const char *v70;
  uint64_t v71;
  id v72;
  const char *v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  void *v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _QWORD v87[5];
  id v88;
  _QWORD v89[4];
  id v90;
  NSObject *v91;
  id v92;
  id location;
  _BYTE handler[24];
  void *v95;
  id v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  objc_msgSend_callbackBlocks(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), v7, v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = *(void **)(a1 + 32);
    if (v12)
    {
      objc_msgSend_unitTestingPushTokens(v15, v13, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v16, v17, *(_QWORD *)(a1 + 48));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v18 == 0;

      v20 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend_accountID(*(void **)(a1 + 40), v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v20, v24, (uint64_t)CFSTR("For unit testing account %@, "), v23);
      v25 = (__CFString *)objc_claimAutoreleasedReturnValue();

      v28 = 0;
      if (!v19)
      {
LABEL_6:
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v29 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v75 = *(_QWORD *)(a1 + 48);
          v74 = *(void **)(a1 + 56);
          v76 = v29;
          objc_msgSend_apsEnvironmentString(v74, v77, v78);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)handler = 138543874;
          *(_QWORD *)&handler[4] = v25;
          *(_WORD *)&handler[12] = 2112;
          *(_QWORD *)&handler[14] = v75;
          *(_WORD *)&handler[22] = 2112;
          v95 = v79;
          _os_log_debug_impl(&dword_1BE990000, v76, OS_LOG_TYPE_DEBUG, "%{public}@Not refreshing token for %@ in environment %@, we're already registered", handler, 0x20u);

        }
        (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
        v6 = 0;
LABEL_21:

        goto LABEL_22;
      }
    }
    else
    {
      objc_msgSend_deviceContext(v15, v13, v14);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_metadataCache(v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v33, v34, *(_QWORD *)(a1 + 40));
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      v25 = &stru_1E7838F48;
      if (objc_msgSend_tokenRegistered(v28, v35, v36) == 1)
        goto LABEL_6;
    }
    v37 = *(_QWORD *)(a1 + 40);
    v38 = *(_QWORD *)(a1 + 64);
    objc_msgSend_sharedInternalUseContainers(CKDContainer, v26, v27);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v40, v37, v38, v39);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v42 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v80 = v42;
      objc_msgSend_apsEnvironmentString(v41, v81, v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)handler = 138543874;
      *(_QWORD *)&handler[4] = v25;
      *(_WORD *)&handler[12] = 2112;
      *(_QWORD *)&handler[14] = v41;
      *(_WORD *)&handler[22] = 2112;
      v95 = v83;
      _os_log_debug_impl(&dword_1BE990000, v80, OS_LOG_TYPE_DEBUG, "%{public}@Refreshing token for %@ in environment %@", handler, 0x20u);

    }
    v45 = (void *)MEMORY[0x1E0C99DE8];
    v46 = (void *)objc_msgSend_copy(*(void **)(a1 + 72), v43, v44);
    objc_msgSend_arrayWithObject_(v45, v47, (uint64_t)v46);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v50, v51, (uint64_t)v6, *(_QWORD *)(a1 + 40));

    objc_msgSend_queue(*(void **)(a1 + 32), v52, v53);
    v54 = objc_claimAutoreleasedReturnValue();
    v55 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v54);

    objc_initWeak(&location, *(id *)(a1 + 32));
    v56 = MEMORY[0x1E0C809B0];
    v89[0] = MEMORY[0x1E0C809B0];
    v89[1] = 3221225472;
    v89[2] = sub_1BEB60ABC;
    v89[3] = &unk_1E782E530;
    objc_copyWeak(&v92, &location);
    v90 = *(id *)(a1 + 40);
    v57 = v55;
    v91 = v57;
    v58 = v89;
    *(_QWORD *)handler = v56;
    *(_QWORD *)&handler[8] = 3221225472;
    *(_QWORD *)&handler[16] = sub_1BE9984B4;
    v95 = &unk_1E782EFD8;
    v96 = v58;
    dispatch_source_set_event_handler(v57, handler);

    v59 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v57, v59, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    objc_msgSend_callbackTimers(*(void **)(a1 + 32), v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v62, v63, (uint64_t)v57, *(_QWORD *)(a1 + 40));

    dispatch_resume(v57);
    objc_msgSend_apsEnvironmentString(v41, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sharedConnectionForAPSEnvironmentString_(CKDPushConnection, v67, (uint64_t)v66);
    v68 = (void *)objc_claimAutoreleasedReturnValue();

    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v69 = (id)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      v85 = *(_QWORD *)(a1 + 48);
      objc_msgSend_applicationBundleIdentifierForPush(v41, v70, v71);
      v84 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)handler = 138412546;
      *(_QWORD *)&handler[4] = v85;
      *(_WORD *)&handler[12] = 2114;
      *(_QWORD *)&handler[14] = v84;
      v86 = (void *)v84;
      _os_log_debug_impl(&dword_1BE990000, v69, OS_LOG_TYPE_DEBUG, "Requesting token for container tuple %@, push bundle identifier %{public}@", handler, 0x16u);

    }
    v87[0] = v56;
    v87[1] = 3221225472;
    v87[2] = sub_1BEB60C70;
    v87[3] = &unk_1E7834B88;
    v87[4] = *(_QWORD *)(a1 + 32);
    v72 = v41;
    v88 = v72;
    objc_msgSend_getToken_(v68, v73, (uint64_t)v87);

    objc_destroyWeak(&v92);
    objc_destroyWeak(&location);

    goto LABEL_21;
  }
  v9 = *(void **)(a1 + 72);
  if (v9)
  {
    v10 = (void *)objc_msgSend_copy(v9, v7, v8);
    objc_msgSend_addObject_(v6, v11, (uint64_t)v10);

  }
LABEL_22:

}

void sub_1BE9C17C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9C17EC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v6;
      objc_msgSend_operationID(v8, v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v14, 0x16u);

    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  objc_msgSend_perRequestGroup(*(void **)(a1 + 40), v3, v4);
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v13);

}

uint64_t sub_1BE9C1928(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE9C1938(uint64_t a1)
{
  void *v2;
  const char *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BE999AA0;
  v5[3] = &unk_1E7838C28;
  v2 = *(void **)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v4 = (id)objc_msgSend_performDatabaseOperation_(v2, v3, (uint64_t)v5);

}

void sub_1BE9C19C4(void **a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  void *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isCancelled(a1[4], a2, a3) & 1) == 0)
  {
    objc_msgSend_error(a1[5], v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend_error(a1[5], v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(a1[6], v10, (uint64_t)v9);

      objc_msgSend_perRequestGroup(a1[4], v11, v12);
      v29 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v29);

    }
    else
    {
      objc_msgSend__handleQueryRequestFinishedWithSchedulerInfo_(a1[6], v7, (uint64_t)a1[4]);
      if (objc_msgSend_fetchAllResults(a1[6], v13, v14))
      {
        objc_msgSend_resultsCursor(a1[5], v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v18 = (void *)*MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            v24 = a1[5];
            v25 = v18;
            objc_msgSend_resultsCursor(v24, v26, v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v31 = v28;
            _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another query with cursor %@", buf, 0xCu);

          }
          v21 = a1[6];
          objc_msgSend_resultsCursor(a1[5], v19, v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend__sendQueryRequestWithCursor_previousRequestSchedulerInfo_(v21, v23, (uint64_t)v22, a1[4]);

        }
      }
    }
  }
}

void sub_1BE9C1BA4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  dispatch_block_t *v5;
  void *v6;
  _QWORD *v7;
  os_log_t *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  char v29;
  os_log_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  objc_class *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  NSObject *log;
  _QWORD v63[4];
  id v64;
  id v65;
  id v66;
  char v67;
  _QWORD block[5];
  id v69;
  char v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  id v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
  v6 = (void *)*MEMORY[0x1E0C952F8];
  v7 = (_QWORD *)MEMORY[0x1E0C95300];
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v8 = (os_log_t *)MEMORY[0x1E0C952B0];
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      log = v9;
      v43 = (objc_class *)objc_opt_class();
      NSStringFromClass(v43);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v44, v45);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(WeakRetained, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v49, v50);
      *(_DWORD *)buf = 138544386;
      v72 = v61;
      v73 = 2048;
      v74 = v3;
      v75 = 2114;
      v76 = v60;
      v77 = 2114;
      v78 = v48;
      v79 = 2112;
      v80 = objc_claimAutoreleasedReturnValue();
      v51 = (void *)v80;
      _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Query request <%{public}@: %p; %{public}@> for operation %{public}@ finished with error %@",
        buf,
        0x34u);

    }
    v12 = objc_msgSend_numRequestsSent(WeakRetained, v10, v11);
    objc_msgSend_setNumRequestsSent_(WeakRetained, v13, v12 + 1);
    objc_msgSend_error(v3, v14, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18
      || !objc_msgSend_isExecuting(WeakRetained, v16, v17)
      || (objc_msgSend_isCancelled(WeakRetained, v19, v20) & 1) != 0
      || !objc_msgSend_fetchAllResults(WeakRetained, v21, v22))
    {

    }
    else
    {
      objc_msgSend_resultsCursor(v3, v23, v24);
      v25 = objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        v28 = (void *)v25;
        v29 = objc_msgSend_numRequestsSent(WeakRetained, v26, v27);

        if ((v29 & 1) != 0)
        {
          if (*v7 != -1)
            dispatch_once(MEMORY[0x1E0C95300], *v5);
          v30 = *v8;
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
          {
            v56 = v30;
            objc_msgSend_resultsCursor(v3, v57, v58);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v72 = v59;
            _os_log_debug_impl(&dword_1BE990000, v56, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another query with cursor %@", buf, 0xCu);

          }
          objc_msgSend_resultsCursor(v3, v31, v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend__sendQueryRequestWithCursor_previousRequestSchedulerInfo_(WeakRetained, v34, (uint64_t)v33, v4);

          v35 = *(NSObject **)(a1 + 32);
          objc_msgSend_callbackQueue(WeakRetained, v36, v37);
          v38 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = sub_1BEA4A418;
          block[3] = &unk_1E7830628;
          block[4] = WeakRetained;
          v69 = v4;
          v70 = *(_BYTE *)(a1 + 64);
          dispatch_group_notify(v35, v38, block);

          v39 = v69;
          goto LABEL_19;
        }
      }
    }
    v40 = *(NSObject **)(a1 + 32);
    objc_msgSend_callbackQueue(WeakRetained, v26, v27);
    v41 = objc_claimAutoreleasedReturnValue();
    v63[0] = MEMORY[0x1E0C809B0];
    v63[1] = 3221225472;
    v63[2] = sub_1BEA4A4AC;
    v63[3] = &unk_1E7830970;
    v64 = v4;
    v65 = v3;
    v66 = WeakRetained;
    v67 = *(_BYTE *)(a1 + 64);
    dispatch_group_notify(v40, v41, v63);

    v39 = v64;
LABEL_19:

    goto LABEL_24;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v6);
  v42 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v52 = v42;
    objc_msgSend_requestUUID(v3, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v72 = v55;
    _os_log_debug_impl(&dword_1BE990000, v52, OS_LOG_TYPE_DEBUG, "Owning operation for request %{public}@ no longer around. Bailing.", buf, 0xCu);

  }
LABEL_24:

}

uint64_t sub_1BE9C2014(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v3 = a1[4];
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Daemon submitted CKEventMetric %@.", (uint8_t *)&v7, 0xCu);
  }
  v4 = *(_QWORD *)(a1[6] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1BE9C210C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  const char *v23;
  void *v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  id v40;
  const char *v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  CKDAppContainerAccountMetadata *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  _QWORD v58[4];
  _QWORD v59[5];

  v59[4] = *MEMORY[0x1E0C80C00];
  objc_msgSend_appContainerTuple(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v58[0] = CFSTR("applicationID");
  objc_msgSend_applicationID(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v59[0] = v7;
  v58[1] = CFSTR("containerID");
  objc_msgSend_containerID(v4, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v59[1] = v10;
  v58[2] = CFSTR("personaID");
  objc_msgSend_personaID(v4, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v13;
  if (v13)
    v17 = (const __CFString *)v13;
  else
    v17 = &stru_1E7838F48;
  v59[2] = v17;
  v58[3] = CFSTR("accountID");
  objc_msgSend_accountID(*(void **)(a1 + 32), v14, v15);
  v18 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v18;
  if (v18)
    v21 = (const __CFString *)v18;
  else
    v21 = &stru_1E7838F48;
  v59[3] = v21;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v19, (uint64_t)v59, v58, 4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E0C950E0], v23, (uint64_t)v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = *(void **)(a1 + 40);
  v57[0] = CFSTR("containerOptions");
  v57[1] = CFSTR("tokenRegistered");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v26, (uint64_t)v57, 2);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v1(v24, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v2(v24, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_select_from_where_bindings_(v25, v34, (uint64_t)v27, CFSTR("AppContainerAccount"), v30, v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v35, v36, v37))
  {
    objc_msgSend_objectAtIndexedSubscript_(v35, v38, 0);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_alloc(MEMORY[0x1E0C94C50]);
    objc_msgSend_objectForKeyedSubscript_(v39, v41, (uint64_t)CFSTR("containerOptions"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = (void *)objc_msgSend_initWithSqliteRepresentation_(v40, v43, (uint64_t)v42);

    objc_msgSend_objectForKeyedSubscript_(v39, v45, (uint64_t)CFSTR("tokenRegistered"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend_integerValue(v46, v47, v48);

    v50 = [CKDAppContainerAccountMetadata alloc];
    v52 = objc_msgSend_initWithContainerOptions_tokenRegistered_(v50, v51, (uint64_t)v44, v49);
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v54 = *(void **)(v53 + 40);
    *(_QWORD *)(v53 + 40) = v52;

  }
  else
  {
    v55 = objc_opt_new();
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v39 = *(void **)(v56 + 40);
    *(_QWORD *)(v56 + 40) = v55;
  }

}

void sub_1BE9C23D0(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v7 = a3;
  if (v7)
  {
    v8 = 0;
  }
  else
  {
    switch(*(_QWORD *)(a1 + 40))
    {
      case 1:
        objc_msgSend_publicShareServiceURL(v11, v5, v6);
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      case 2:
        objc_msgSend_publicDeviceServiceURL(v11, v5, v6);
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        objc_msgSend_publicCodeServiceURL(v11, v5, v6);
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      case 4:
        objc_msgSend_publicMetricsServiceURL(v11, v5, v6);
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        objc_msgSend_publicCloudDBURL(v11, v5, v6);
        v9 = objc_claimAutoreleasedReturnValue();
        break;
    }
    v8 = (void *)v9;
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v8, v7);

}

void sub_1BE9C24B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v15 = v7;
    objc_msgSend_containerScopedUserID(v5, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_account(*(void **)(a1 + 32), v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dsid(v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543618;
    v26 = v18;
    v27 = 2112;
    v28 = v24;
    _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Fetched container scoped user ID of %{public}@ for dsid %@", (uint8_t *)&v25, 0x16u);

  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    objc_msgSend_containerScopedUserID(v5, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_orgAdminUserID(v5, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *, id))(v10 + 16))(v10, v11, v14, v6);

  }
}

uint64_t sub_1BE9C2658(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE9C2664(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BE9C266C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;

  objc_msgSend_clientOperationCallbackProxy(*(void **)(a1 + 32), a2, a3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationMetrics(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleOperationDidCompleteWithMetrics_error_(v11, v10, (uint64_t)v6, v9);

}

void sub_1BE9C26DC(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1BE9C26E4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BE9C26F0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const __CFString *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, void *);
  void *v39;
  uint64_t v40;
  id v41;
  uint8_t buf[4];
  const __CFString *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    objc_msgSend_setResultsCursor_(*(void **)(a1 + 32), v5, *(_QWORD *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v6;
    if (objc_msgSend_fetchAllResults(v25, v27, v28))
      v31 = CFSTR("true");
    else
      v31 = CFSTR("false");
    objc_msgSend_error(*(void **)(a1 + 32), v29, v30);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resultsCursor(*(void **)(a1 + 32), v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v43 = v31;
    v44 = 2112;
    v45 = v32;
    v46 = 2112;
    v47 = v35;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "fetchAllResults:%{public}@ error:%@ resultsCursor:%@", buf, 0x20u);

  }
  if (objc_msgSend_fetchAllResults(*(void **)(a1 + 32), v7, v8))
  {
    objc_msgSend_error(*(void **)(a1 + 32), v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {

    }
    else
    {
      objc_msgSend_resultsCursor(*(void **)(a1 + 32), v12, v13);
      v18 = objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        v19 = (void *)v18;
        objc_msgSend_queryCursorUpdatedBlock(*(void **)(a1 + 32), v9, v10);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          objc_msgSend_queryCursorUpdatedBlock(*(void **)(a1 + 32), v9, v10);
          v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          objc_msgSend_resultsCursor(*(void **)(a1 + 32), v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = MEMORY[0x1E0C809B0];
          v37 = 3221225472;
          v38 = sub_1BEA49A6C;
          v39 = &unk_1E782EB38;
          v40 = *(_QWORD *)(a1 + 32);
          v41 = *(id *)(a1 + 48);
          ((void (**)(_QWORD, void *, uint64_t *))v21)[2](v21, v24, &v36);

          goto LABEL_10;
        }
      }
    }
  }
  objc_msgSend_perRequestGroup(*(void **)(a1 + 48), v9, v10);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v14);

LABEL_10:
  objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), v15, v16, v36, v37, v38, v39, v40);
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v17);

}

void sub_1BE9C2968(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BE9C2998(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v10[0] = *(_QWORD *)(a1 + 32);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v4, (uint64_t)v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MMCSOperationMetricCombineMetrics();

  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_requestOperationCountsByOperationType(*(void **)(a1 + 48), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addRequestOperationCountsByOperationType_(v3, v9, (uint64_t)v8);

  }
}

void sub_1BE9C2A58(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
    v4 = objc_claimAutoreleasedReturnValue();
  }
  v5 = (id)v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_1BE9C2AB0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1BE9C2AC4(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  const char *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 32);
  v17 = 0;
  objc_msgSend__lockedCloudKitAuthTokenWithContainer_error_(WeakRetained, v4, v3, &v17);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v17;

  objc_msgSend_authTokenCallbackQueue(*(void **)(a1 + 40), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE9C2AB0;
  v13[3] = &unk_1E782EBF0;
  v10 = *(id *)(a1 + 48);
  v15 = v6;
  v16 = v10;
  v14 = v5;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, v13);

}

void sub_1BE9C2BB0(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  os_activity_scope_state_s v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_osActivity(WeakRetained, v2, v3, 0, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    os_activity_scope_enter(v5, &v8);

    objc_msgSend__flushFetchedRecordsToConsumerLocked(v4, v6, v7);
    os_activity_scope_leave(&v8);
  }

}

void sub_1BE9C2C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE9C2C28(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    objc_msgSend_hardwareID(*(void **)(a1 + 32), a2, a3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, _QWORD))(v3 + 16))(v3, v4, 0);

  }
}

void sub_1BE9C2C88(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  NSObject *v8;
  objc_class *v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = v2;
    v9 = (objc_class *)objc_opt_class();
    NSStringFromClass(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(a1 + 32);
    objc_msgSend_ckShortDescription(v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v10;
    v17 = 2048;
    v18 = v11;
    v19 = 2114;
    v20 = v14;
    _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Fetch aggregator <%{public}@: %p; %{public}@> finished",
      (uint8_t *)&v15,
      0x20u);

  }
  v5 = *(void **)(a1 + 32);
  objc_msgSend_error(v5, v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v5, v7, (uint64_t)v6);

}

void sub_1BE9C2DE8(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  id obj;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend_inlock_registrationsForDSID_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_containsObject_(v3, v4, *(_QWORD *)(a1 + 48)))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v24 = v8;
      _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Not adding registration to PDS, as PDS is already aware of %@", buf, 0xCu);
    }
  }
  else
  {
    objc_msgSend_inlock_registrar(*(void **)(a1 + 32), v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 48);
    objc_msgSend_userWithDSID_(MEMORY[0x1E0D65230], v11, *(_QWORD *)(a1 + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    obj = *(id *)(v13 + 40);
    LOBYTE(v10) = objc_msgSend_ensureRegistrationPresent_forUser_error_(v9, v14, v10, v12, &obj);
    objc_storeStrong((id *)(v13 + 40), obj);

    v15 = (void *)*MEMORY[0x1E0C952F8];
    if ((v10 & 1) != 0)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v15);
      v16 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v18 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v24 = v18;
        _os_log_impl(&dword_1BE990000, v16, OS_LOG_TYPE_INFO, "Added registration to PDS: %@", buf, 0xCu);
      }
      objc_msgSend_addObject_(v3, v17, *(_QWORD *)(a1 + 48));
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v15);
      v19 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 48);
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        v24 = v20;
        v25 = 2112;
        v26 = v21;
        _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "Unable to add registration to PDS: %@ %@", buf, 0x16u);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    }
  }

}

void sub_1BE9C307C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_1BE9C30C0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  _QWORD v15[5];
  id v16;

  objc_msgSend_tailParserData(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_tailParserData(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);

  }
  v9 = dispatch_group_create();
  objc_msgSend__parseObjects_group_(*(void **)(a1 + 32), v10, 1, v9);
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v11, v12);
    CKGetGlobalQueue();
    v13 = objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1BE9C307C;
    v15[3] = &unk_1E782EC68;
    v14 = *(id *)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 32);
    v16 = v14;
    dispatch_group_notify(v9, v13, v15);

  }
}

uint64_t sub_1BE9C31B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a2, sel_noteSystemIsAvailable, a3);
}

void sub_1BE9C31C0(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t Order;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v2 = *(id *)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v40, v44, 16);
  if (v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)v41;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v41 != v8)
          objc_enumerationMutation(v2);
        v10 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v9);
        objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 40), v5, v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = (void *)MEMORY[0x1E0CB37E8];
        Order = objc_msgSend_fetchOrder(v10, v13, v14);
        objc_msgSend_numberWithUnsignedInteger_(v12, v16, Order);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v11, v18, (uint64_t)v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v20, v21);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = *(_QWORD *)(a1 + 40);
          v31 = *(_QWORD *)(a1 + 48);
          v35 = objc_msgSend_fetchOrder(v10, v33, v34);
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v36, v31, v32, CFSTR("CKDRecordFetchAggregator.m"), 441, CFSTR("A fetch info with order %lu already exists. %@"), v35, v10, (_QWORD)v40);

        }
        objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 40), v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = (void *)MEMORY[0x1E0CB37E8];
        v26 = objc_msgSend_fetchOrder(v10, v24, v25);
        objc_msgSend_numberWithUnsignedInteger_(v23, v27, v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v22, v29, (uint64_t)v10, v28);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v40, v44, 16);
    }
    while (v7);
  }

  objc_msgSend_fetchSource(*(void **)(a1 + 40), v37, v38);
  v39 = objc_claimAutoreleasedReturnValue();
  dispatch_source_merge_data(v39, 1uLL);

}

void sub_1BE9C33C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  const __CFString *v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = a3;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (v8)
    {
      v23[0] = CFSTR("accountID");
      v23[1] = CFSTR("DSID");
      v24[0] = v8;
      v24[1] = v9;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)v24, v23, 2);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_insertOrReplaceInto_values_(v5, v11, (uint64_t)CFSTR("DSIDMap"), v10);
LABEL_6:

    }
  }
  else if (v8)
  {
    v21 = CFSTR("accountID");
    v22 = v8;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)&v22, &v21, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E0C950E0], v12, (uint64_t)v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_v1(v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_v2(v13, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deleteFrom_where_bindings_(v5, v20, (uint64_t)CFSTR("DSIDMap"), v16, v19);

    goto LABEL_6;
  }

}

void sub_1BE9C352C(uint64_t a1)
{
  void *v2;
  const char *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BE9C33C8;
  v5[3] = &unk_1E7838C28;
  v2 = *(void **)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v4 = (id)objc_msgSend_performDatabaseOperation_(v2, v3, (uint64_t)v5);

}

uint64_t sub_1BE9C35B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_noteSystemIsAvailable, a3);
}

void sub_1BE9C35C4(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend__protobufObjectParsedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_1BE9C360C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void (**v11)(_QWORD);
  id v12;
  id v13;
  const char *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 32);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1BE9C35C4;
  v15[3] = &unk_1E78303B0;
  v15[4] = v10;
  v16 = v7;
  v17 = v8;
  v11 = (void (**)(_QWORD))v9;
  v18 = v11;
  v12 = v8;
  v13 = v7;
  if ((objc_msgSend_performOnLifecycleQueueIfNotFinished_(v10, v14, (uint64_t)v15) & 1) == 0)
    v11[2](v11);

}

void sub_1BE9C36F0(uint64_t a1)
{
  char *v2;
  const char *v3;
  uint64_t v4;
  BOOL v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  CKDProtocolTranslator *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const char *v17;
  char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  CKDProtocolTranslator *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  const char *v59;
  char *v60;
  const char *v61;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = (char *)*(id *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v5 = v2 == 0;
  else
    v5 = 0;
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v22 = *(void **)(a1 + 48);
      v23 = v19;
      objc_msgSend_requestUUID(v22, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = *(_QWORD *)(a1 + 40);
      objc_msgSend_account(*(void **)(a1 + 56), v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dsid(v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v63 = v26;
      v64 = 2114;
      v65 = v27;
      v66 = 2112;
      v67 = v33;
      _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "req: %{public}@, \"Fetched container scoped user ID of %{public}@ for dsid %@\"", buf, 0x20u);

    }
    if (objc_msgSend_wantsProtocolTranslator(*(void **)(a1 + 48), v20, v21))
    {
      v36 = [CKDProtocolTranslator alloc];
      v37 = *(_QWORD *)(a1 + 56);
      v40 = objc_msgSend_databaseScope(*(void **)(a1 + 48), v38, v39);
      v42 = (void *)objc_msgSend_initWithContainer_databaseScope_(v36, v41, v37, v40);
      objc_msgSend_setTranslator_(*(void **)(a1 + 48), v43, (uint64_t)v42);

      objc_msgSend_pcsManager(*(void **)(a1 + 56), v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_translator(*(void **)(a1 + 48), v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setIdentityDelegate_(v49, v50, (uint64_t)v46);

      objc_msgSend_containerID(*(void **)(a1 + 56), v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = objc_msgSend_specialContainerType(v53, v54, v55);

      if (v56 == 4)
      {
        objc_msgSend_translator(*(void **)(a1 + 48), v34, v35);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setDontCreateValidatingParentReferences_(v57, v58, 1);

      }
    }
    objc_msgSend__fetchServerCertificatesIfNeeded(*(void **)(a1 + 48), v34, v35);
  }
  else
  {
    v60 = v2;
    if (objc_msgSend_allowsAnonymousAccount(*(void **)(a1 + 48), v3, v4))
    {
      if (objc_msgSend_wantsProtocolTranslator(*(void **)(a1 + 48), v6, v7))
      {
        v10 = [CKDProtocolTranslator alloc];
        v11 = *(_QWORD *)(a1 + 56);
        v14 = objc_msgSend_databaseScope(*(void **)(a1 + 48), v12, v13);
        v16 = (void *)objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v10, v15, v11, v14, 0);
        objc_msgSend_setTranslator_(*(void **)(a1 + 48), v17, (uint64_t)v16);

      }
      objc_msgSend__fetchServerCertificatesIfNeeded(*(void **)(a1 + 48), v8, v9);
      v18 = v60;
    }
    else
    {
      v59 = v60;
      if (!v60)
      {
        objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], 0, *MEMORY[0x1E0C94B20], 1004, 0, CFSTR("Account couldn't get container scoped user id, no underlying error received"));
        v59 = (const char *)objc_claimAutoreleasedReturnValue();
      }
      v61 = v59;
      objc_msgSend_finishWithError_(*(void **)(a1 + 48), v59, (uint64_t)v59);
      v18 = (char *)v61;
    }

  }
}

void sub_1BE9C3A0C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  CKDProtocolTranslator *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  _QWORD v33[4];
  id v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v4, v5);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v31, v32, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 1664, CFSTR("You must set the container"));

  }
  if (objc_msgSend_allowsAuthedAccount(*(void **)(a1 + 32), v4, v5)
    && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v7, v8) & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v18 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(void **)(a1 + 32);
      v20 = v18;
      objc_msgSend_requestUUID(v19, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v23;
      v38 = 2114;
      v39 = v26;
      _os_log_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ allows a container scoped user id, seeing if we have one\"", buf, 0x16u);

    }
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    objc_msgSend_operation(*(void **)(a1 + 32), v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = sub_1BEA5816C;
    v33[3] = &unk_1E7830F28;
    objc_copyWeak(&v35, (id *)buf);
    v34 = v6;
    objc_msgSend_fetchImportantUserIDsForOperation_withCompletionHandler_(v34, v30, (uint64_t)v29, v33);

    objc_destroyWeak(&v35);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    if (objc_msgSend_wantsProtocolTranslator(*(void **)(a1 + 32), v7, v8))
    {
      v11 = [CKDProtocolTranslator alloc];
      v14 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v12, v13);
      v16 = (void *)objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v11, v15, (uint64_t)v6, v14, 0);
      objc_msgSend_setTranslator_(*(void **)(a1 + 32), v17, (uint64_t)v16);

    }
    objc_msgSend__fetchServerCertificatesIfNeeded(*(void **)(a1 + 32), v9, v10);
  }

}

void sub_1BE9C3C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9C3CAC(_QWORD *a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  void *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  const __CFString *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v27 = CFSTR("accountID");
  v28[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v28, &v27, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E0C950E0], v5, (uint64_t)v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)a1[5];
  v26 = CFSTR("DSID");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v8, (uint64_t)&v26, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v1(v6, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_v2(v6, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_select_from_where_bindings_(v7, v16, (uint64_t)v9, CFSTR("DSIDMap"), v12, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v17, v18, v19))
  {
    objc_msgSend_objectAtIndexedSubscript_(v17, v20, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v21, v22, (uint64_t)CFSTR("DSID"));
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(a1[6] + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;

  }
}

void sub_1BE9C3E2C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id WeakRetained;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  void *v38;
  void *v39;
  const char *v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  uint8_t buf[4];
  void *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_setCloudKitAuthToken_(WeakRetained, v8, v5);
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v11, v12, (uint64_t)CFSTR("TestContainerSpecificOpWithNoCloudKitTokenNoRetry"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v14, 0);
      objc_msgSend_setDidRetryAuth_(WeakRetained, v16, 1);
LABEL_6:

      v5 = 0;
LABEL_7:
      v6 = 0;
      goto LABEL_26;
    }
    objc_msgSend_unitTestOverrides(WeakRetained, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)CFSTR("TestAuthTokenRenewalFailsBecauseRenewedTokenIsStale"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v20, 0);
      objc_msgSend_setDidRetryAuth_(WeakRetained, v22, 0);
      goto LABEL_6;
    }
    objc_msgSend_unitTestOverrides(WeakRetained, v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v23, v24, (uint64_t)CFSTR("TestNoCloudKitTokenInURLRequestNoRetry"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v26, 0);
      objc_msgSend_setDidRetryAuth_(WeakRetained, v28, 1);

      goto LABEL_7;
    }
    if ((objc_msgSend_didRetryAuth(WeakRetained, v26, v27) & 1) != 0
      || (objc_msgSend_unitTestOverrides(WeakRetained, v29, v30),
          v31 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v31, v32, (uint64_t)CFSTR("TestContainerSpecificOpWithBadCloudKitToken")),
          v33 = (void *)objc_claimAutoreleasedReturnValue(),
          v33,
          v31,
          !v33))
    {
      if ((objc_msgSend_didFetchNilAuthToken(WeakRetained, v29, v30) & 1) == 0)
      {
        objc_msgSend_unitTestOverrides(WeakRetained, v9, v10);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v36, v37, (uint64_t)CFSTR("TestContainerSpecificOpWithNoCloudKitToken"));
        v38 = (void *)objc_claimAutoreleasedReturnValue();

        if (v38)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v39 = (void *)*MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            v68 = v39;
            objc_msgSend_requestUUID(WeakRetained, v69, v70);
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v73 = v71;
            _os_log_debug_impl(&dword_1BE990000, v68, OS_LOG_TYPE_DEBUG, "Using nil CloudKit token for request %{public}@", buf, 0xCu);

          }
          objc_msgSend_setDidFetchNilAuthToken_(WeakRetained, v40, 1);
          objc_msgSend_setCloudKitAuthToken_(WeakRetained, v41, 0);

          v42 = (void *)MEMORY[0x1E0C94FF8];
          v43 = *MEMORY[0x1E0C94B20];
          objc_msgSend_container(WeakRetained, v44, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_account(v46, v47, v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_accountID(v49, v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_errorWithDomain_code_format_(v42, v53, v43, 1002, CFSTR("Didn't get CloudKit credentials for account %@ with no error"), v52);
          v54 = objc_claimAutoreleasedReturnValue();

          v5 = 0;
          v6 = (id)v54;
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v34 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v64 = v34;
        objc_msgSend_requestUUID(WeakRetained, v65, v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v73 = v67;
        _os_log_debug_impl(&dword_1BE990000, v64, OS_LOG_TYPE_DEBUG, "Using a fake CloudKit token for request %{public}@", buf, 0xCu);

      }
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v35, (uint64_t)CFSTR("tacos"));
    }
  }
  if (v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6);
LABEL_26:
  if (!(v5 | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)))
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v9, *MEMORY[0x1E0C94B20], 2011, CFSTR("Didn't get a CloudKit auth token"));
    v55 = objc_claimAutoreleasedReturnValue();
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v57 = *(void **)(v56 + 40);
    *(_QWORD *)(v56 + 40) = v55;

  }
  objc_msgSend_container(WeakRetained, v9, v10);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v58, v59, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v60 = objc_claimAutoreleasedReturnValue();
  v61 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v62 = *(void **)(v61 + 40);
  *(_QWORD *)(v61 + 40) = v60;

  objc_msgSend_setLastRetryAuthError_(WeakRetained, v63, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BE9C42E8(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  const char *v8;
  void *v9;
  id v10;
  const char *v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[4];
  __int128 v15;
  id v16;
  _QWORD v17[4];
  __int128 v18;
  id v19;

  if (objc_msgSend_usesCloudKitAuthToken(*(void **)(a1 + 32), a2, a3))
  {
    v6 = *(void **)(a1 + 32);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1BE9C3E2C;
    v17[3] = &unk_1E7830FE0;
    objc_copyWeak(&v19, (id *)(a1 + 56));
    v12 = *(_OWORD *)(a1 + 40);
    v7 = (id)v12;
    v18 = v12;
    objc_msgSend__authTokenWithCompletionHandler_(v6, v8, (uint64_t)v17);

    objc_destroyWeak(&v19);
  }
  if (objc_msgSend_usesiCloudAuthToken(*(void **)(a1 + 32), v4, v5, v12))
  {
    v9 = *(void **)(a1 + 32);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1BEA58D84;
    v14[3] = &unk_1E7830FE0;
    objc_copyWeak(&v16, (id *)(a1 + 56));
    v13 = *(_OWORD *)(a1 + 40);
    v10 = (id)v13;
    v15 = v13;
    objc_msgSend__authTokenWithCompletionHandler_(v9, v11, (uint64_t)v14);

    objc_destroyWeak(&v16);
  }
}

void sub_1BE9C441C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9C4434(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  const char *v31;
  _QWORD v32[5];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_requiresUserPartitionURL(*(void **)(a1 + 32), a2, a3);
  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_msgSend_container(v7, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDURLRequest.m"), 1625, CFSTR("You must set the container"));

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(void **)(a1 + 32);
      v15 = v11;
      objc_msgSend_requestUUID(v14, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v18;
      v35 = 2114;
      v36 = v21;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires a url for the user partition, getting it\"", buf, 0x16u);

    }
    objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_serverType(*(void **)(a1 + 32), v23, v24);
    objc_msgSend_operation(*(void **)(a1 + 32), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1BEA580AC;
    v32[3] = &unk_1E7830F00;
    v32[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_fetchPrivateURLForServerType_operation_completionHandler_(v22, v29, v25, v28, v32);

  }
  else
  {
    objc_msgSend__setupConfiguration(v7, v4, v5);
  }
}

void sub_1BE9C4658(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_requestInfos(WeakRetained, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v3, v4, v5);

  objc_msgSend_error(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v9, (uint64_t)v8);

}

void sub_1BE9C46BC(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  char v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  int isBackgroundAssetsExtension;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  const char *v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  void *v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  const char *v67;
  void *v68;
  const char *v69;
  void *v70;
  NSObject *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  int v75;
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_allowsAnonymousAccount(*(void **)(a1 + 32), a2, a3) & 1) != 0)
    goto LABEL_2;
  objc_msgSend_container(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entitlements(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cloudServices(v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_containsObject_(v12, v13, *MEMORY[0x1E0C95340]);

  if ((v14 & 1) != 0)
  {
    objc_msgSend_entitlements(v6, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    isBackgroundAssetsExtension = objc_msgSend_isBackgroundAssetsExtension(v17, v18, v19);

    if (isBackgroundAssetsExtension)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v23 = (void *)*MEMORY[0x1E0C952E0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(void **)(a1 + 32);
        v26 = v23;
        objc_msgSend_requestUUID(v25, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = 138543362;
        v76 = v29;
        _os_log_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account, which is unavailable for Background Assets Extension processes\"", (uint8_t *)&v75, 0xCu);

      }
      v30 = *(void **)(a1 + 32);
      objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v24, *MEMORY[0x1E0C94B20], 1002, 0, CFSTR("This request requires an authenticated account, which is unavailable for Background Assets Extension processes"));
    }
    else
    {
      objc_msgSend_account(v6, v21, v22);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend_accountType(v40, v41, v42);

      if (v43 == 1)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v46 = (void *)*MEMORY[0x1E0C952E0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
        {
          v48 = *(void **)(a1 + 32);
          v49 = v46;
          objc_msgSend_requestUUID(v48, v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v75 = 138543362;
          v76 = v52;
          _os_log_impl(&dword_1BE990000, v49, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account\"", (uint8_t *)&v75, 0xCu);

        }
        v30 = *(void **)(a1 + 32);
        objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v47, *MEMORY[0x1E0C94B20], 1002, 0, CFSTR("This request requires an authenticated account"));
      }
      else
      {
        if ((objc_msgSend_canAuthWithCloudKit(v6, v44, v45) & 1) == 0)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v55 = (void *)*MEMORY[0x1E0C952E0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
          {
            v57 = *(void **)(a1 + 32);
            v58 = v55;
            objc_msgSend_requestUUID(v57, v59, v60);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            v75 = 138543362;
            v76 = v61;
            _os_log_impl(&dword_1BE990000, v58, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account, the current account cannot auth with CloudKit\"", (uint8_t *)&v75, 0xCu);

          }
          objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v56, *MEMORY[0x1E0C94B20], 1002, 0, CFSTR("This request requires an authenticated account, the current account cannot auth with CloudKit"));
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_container(*(void **)(a1 + 32), v63, v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v65, v66, (uint64_t)v62);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_finishWithError_(*(void **)(a1 + 32), v67, (uint64_t)v38);
          goto LABEL_16;
        }
        if ((objc_msgSend_canAccessAccount(v6, v53, v54) & 1) != 0)
        {

LABEL_2:
          MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setupPublicDatabaseURL, v5);
          return;
        }
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v68 = (void *)*MEMORY[0x1E0C952E0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
        {
          v70 = *(void **)(a1 + 32);
          v71 = v68;
          objc_msgSend_requestUUID(v70, v72, v73);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          v75 = 138543362;
          v76 = v74;
          _os_log_impl(&dword_1BE990000, v71, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"CloudKit access was denied by user settings\"", (uint8_t *)&v75, 0xCu);

        }
        v30 = *(void **)(a1 + 32);
        objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v69, *MEMORY[0x1E0C94B20], 1002, 0, CFSTR("CloudKit access was denied by user settings"));
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v31 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(void **)(a1 + 32);
      v34 = v31;
      objc_msgSend_requestUUID(v33, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = 138543362;
      v76 = v37;
      _os_log_impl(&dword_1BE990000, v34, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account, which is unavailable for CloudKit-Anonymous / App Clips processes\"", (uint8_t *)&v75, 0xCu);

    }
    v30 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E0C94FF8], v32, *MEMORY[0x1E0C94B20], 1002, 0, CFSTR("This request requires an authenticated account, which is unavailable for CloudKit-Anonymous / App Clips processes"));
  }
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v30, v39, (uint64_t)v38);
LABEL_16:

}

void sub_1BE9C4C50(uint64_t a1, void *a2)
{
  __CFString *v3;
  id WeakRetained;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const __CFString *v13;
  const __CFString *v14;
  int v15;
  const __CFString *v16;
  __int16 v17;
  const __CFString *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = *MEMORY[0x1E0C952B0];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    if (!v3)
      goto LABEL_7;
    goto LABEL_5;
  }
  v13 = CFSTR(" with error: ");
  v14 = &stru_1E7838F48;
  if (v3)
    v14 = v3;
  else
    v13 = &stru_1E7838F48;
  v15 = 138543618;
  v16 = v13;
  v17 = 2112;
  v18 = v14;
  _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Batched Record fetches finished%{public}@%@", (uint8_t *)&v15, 0x16u);
  if (v3)
  {
LABEL_5:
    objc_msgSend_error(WeakRetained, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
      objc_msgSend_setError_(WeakRetained, v6, (uint64_t)v3);
  }
LABEL_7:
  objc_msgSend__noteOperationFinishedBlockEnd(WeakRetained, v6, v7);
  objc_msgSend_error(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v12, (uint64_t)v11);

}

void sub_1BE9C4DC4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  objc_msgSend_setRecordFetcher_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  objc_msgSend_recordFetcher(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setUseRecordCache_(v7, v8, 0);

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE9C4C50;
  v13[3] = &unk_1E78309E8;
  objc_copyWeak(&v14, (id *)(a1 + 40));
  objc_msgSend_recordFetcher(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFetchAggregatorCompletionBlock_(v11, v12, (uint64_t)v13);

  objc_destroyWeak(&v14);
}

void sub_1BE9C4E88(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9C4E9C(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  int hasOutOfProcessUIEntitlement;
  void *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  int hasCloudKitSystemServiceEntitlement;
  void *v65;
  const char *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  int v70;
  dispatch_semaphore_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  NSObject *v78;
  const char *v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  int v83;
  void *v84;
  void *v85;
  NSObject *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  NSObject *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  const char *v96;
  _QWORD v97[4];
  NSObject *v98;
  id v99;
  uint8_t buf[4];
  void *v101;
  __int16 v102;
  void *v103;
  __int16 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v4 = (void **)(a1 + 32);
  objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_requiresTokenRegistration(*v4, v6, v7);
  objc_msgSend_deviceContext(v5, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_pushBehavior(v11, v12, v13);

  if (v14)
    v17 = v8;
  else
    v17 = 0;
  if (v17 != 1)
  {
LABEL_20:
    v43 = 0;
    goto LABEL_21;
  }
  objc_msgSend_account(v5, v15, v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_accountType(v18, v19, v20);

  if (v21 == 1)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v24 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v25 = *(void **)(a1 + 32);
      v26 = v24;
      objc_msgSend_ckShortDescription(v25, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v101 = v29;
      _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Not registering push token for anonymous account: %{public}@", buf, 0xCu);

    }
    goto LABEL_20;
  }
  if ((objc_msgSend_canAuthWithCloudKit(v5, v22, v23) & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v42 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v90 = *(void **)(a1 + 32);
      v91 = v42;
      objc_msgSend_ckShortDescription(v90, v92, v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v101 = v94;
      _os_log_debug_impl(&dword_1BE990000, v91, OS_LOG_TYPE_DEBUG, "Not registering push token for account that can't auth: %{public}@", buf, 0xCu);

    }
    goto LABEL_20;
  }
  objc_msgSend_entitlements(v5, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v32, v33, v34);

  if (hasOutOfProcessUIEntitlement)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v36 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v37 = *(void **)(a1 + 32);
      v38 = v36;
      objc_msgSend_ckShortDescription(v37, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v101 = v41;
      _os_log_debug_impl(&dword_1BE990000, v38, OS_LOG_TYPE_DEBUG, "Not registering push token for OOP UI container operation: %{public}@", buf, 0xCu);

    }
    goto LABEL_20;
  }
  if (CKIsRunningInSyncBubble())
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v84 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v85 = *(void **)(a1 + 32);
      v86 = v84;
      objc_msgSend_ckShortDescription(v85, v87, v88);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v101 = v89;
      _os_log_debug_impl(&dword_1BE990000, v86, OS_LOG_TYPE_DEBUG, "Not registering push token, we're in a sync bubble: %{public}@", buf, 0xCu);

    }
    goto LABEL_20;
  }
  v43 = 1;
LABEL_21:
  objc_msgSend_operation(*(void **)(a1 + 32), v15, v16);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = (_BYTE *)MEMORY[0x1E0C95280];
  if (v43)
  {
    if (!v5)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v44, v45);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v95, v96, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v48 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v51 = *(void **)(a1 + 32);
      v52 = v48;
      objc_msgSend_requestUUID(v51, v53, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_entitlements(v5, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      hasCloudKitSystemServiceEntitlement = objc_msgSend_hasCloudKitSystemServiceEntitlement(v61, v62, v63);
      *(_DWORD *)buf = 138543874;
      v101 = v55;
      v102 = 2114;
      v103 = v58;
      v104 = 1024;
      v105 = hasCloudKitSystemServiceEntitlement;
      _os_log_impl(&dword_1BE990000, v52, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires push token registration, doing so. isCKSystemService=%d\"", buf, 0x1Cu);

    }
    if (*v47
      && (objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v49, v50),
          v65 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v65, v66, (uint64_t)CFSTR("WaitForTokenRegistration")),
          v67 = (void *)objc_claimAutoreleasedReturnValue(),
          v70 = objc_msgSend_BOOLValue(v67, v68, v69),
          v67,
          v65,
          v70))
    {
      v71 = dispatch_semaphore_create(0);
    }
    else
    {
      v71 = 0;
    }
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    objc_msgSend_deviceContext(v46, v72, v73);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_tokenRegistrationScheduler(v74, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();

    v97[0] = MEMORY[0x1E0C809B0];
    v97[1] = 3221225472;
    v97[2] = sub_1BEA5871C;
    v97[3] = &unk_1E78307E0;
    objc_copyWeak(&v99, (id *)buf);
    v78 = v71;
    v98 = v78;
    objc_msgSend_registerTokenForAdopterContainer_completionBlock_(v77, v79, (uint64_t)v5, v97);
    if (*v47 && v78)
      dispatch_semaphore_wait(v78, 0xFFFFFFFFFFFFFFFFLL);

    objc_destroyWeak(&v99);
    objc_destroyWeak((id *)buf);

  }
  if (*v47
    && (objc_msgSend_isErrorInducerRequest(*(void **)(a1 + 32), v44, v45) & 1) == 0
    && (objc_msgSend_operationInfo(v46, v44, v45),
        v80 = (void *)objc_claimAutoreleasedReturnValue(),
        v83 = objc_msgSend_wantsDaemonRequestCallbacks(v80, v81, v82),
        v80,
        v83))
  {
    objc_msgSend__performWillSendTestCallback(*(void **)(a1 + 32), v44, v45);
  }
  else
  {
    objc_msgSend__performRequest(*(void **)(a1 + 32), v44, v45);
  }

}

void sub_1BE9C5500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9C552C(uint64_t a1, const char *a2)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;

  if (a2)
  {
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend__prepareCloudKitAuthToken(WeakRetained, v2, v3);

  }
}

void sub_1BE9C5570(uint64_t a1)
{
  void *v2;
  const char *v3;
  _QWORD v4[5];
  id v5;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BE9C552C;
  v4[3] = &unk_1E782FFF0;
  v4[4] = v2;
  objc_copyWeak(&v5, &location);
  objc_msgSend_prepareRequestWithCompletion_(v2, v3, (uint64_t)v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_1BE9C5604(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1BE9C5620(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v4)
  {
    objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_aa_primaryAppleAccount(v5, v6, v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  }
  return v4;
}

void sub_1BE9C5688(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_requestCount(v6, v2, v3);
  objc_msgSend_setRequestCount_(v6, v5, v4 + 1);

}

uint64_t sub_1BE9C56BC(uint64_t a1, const char *a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BE99CAA8;
  v4[3] = &unk_1E782EA40;
  v4[4] = v2;
  return objc_msgSend_performASyncOnLifecycleQueueIfNotFinished_(v2, a2, (uint64_t)v4);
}

uint64_t sub_1BE9C5710(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v6 = *(void **)(a1 + 32);
    v7 = v2;
    objc_msgSend_ckShortDescription(v6, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v10;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Placeholder op %{public}@ finished", (uint8_t *)&v11, 0xCu);

  }
  return objc_msgSend_transitionToFinished(*(void **)(a1 + 32), v3, v4);
}

void sub_1BE9C581C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id WeakRetained;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;

  v11 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend_shared(CKDTrafficLogger, v3, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_requestUUID(WeakRetained, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logPartialRequestObjectDataWithRequestUUID_objectData_completionHandler_(v6, v10, (uint64_t)v9, v11, &unk_1E7830EB0);

  }
}

void sub_1BE9C58AC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v5 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v11 = 134217984;
    v12 = WeakRetained;
    _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Record fetcher finished for query %p", (uint8_t *)&v11, 0xCu);
    if (!v3)
      goto LABEL_7;
  }
  else if (!v3)
  {
    goto LABEL_7;
  }
  objc_msgSend_error(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
    objc_msgSend_setError_(WeakRetained, v6, (uint64_t)v3);
LABEL_7:
  objc_msgSend_error(WeakRetained, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v10, (uint64_t)v9);

}

void sub_1BE9C59F0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  objc_msgSend_setRecordFetcher_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BE9C58AC;
  v9[3] = &unk_1E78309E8;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  objc_msgSend_recordFetcher(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFetchAggregatorCompletionBlock_(v7, v8, (uint64_t)v9);

  objc_destroyWeak(&v10);
}

void sub_1BE9C5A98(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9C5AAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    objc_msgSend_metricUUID(v5, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138412546;
    v12 = v9;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "CKEventMetric %@ didCompleteWithError %@", (uint8_t *)&v11, 0x16u);

  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1BE9C5BD0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) == 0)
  {
    objc_msgSend_error(*(void **)(a1 + 40), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend_error(*(void **)(a1 + 40), v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 48), v10, (uint64_t)v9);

      objc_msgSend_perRequestGroup(*(void **)(a1 + 32), v11, v12);
      v28 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v28);

    }
    else
    {
      objc_msgSend__handleFetchDatabaseChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 48), v7, *(_QWORD *)(a1 + 32));
      if (objc_msgSend_fetchAllChanges(*(void **)(a1 + 48), v13, v14)
        && (objc_msgSend_status(*(void **)(a1 + 40), v15, v16) != 2 || *(_BYTE *)(a1 + 56)))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v17 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v23 = *(void **)(a1 + 40);
          v24 = v17;
          objc_msgSend_serverChangeTokenData(v23, v25, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v30 = v27;
          _os_log_debug_impl(&dword_1BE990000, v24, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch request with change token %@", buf, 0xCu);

        }
        v20 = *(void **)(a1 + 48);
        objc_msgSend_serverChangeTokenData(*(void **)(a1 + 40), v18, v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__sendFetchDatabaseChangesRequestWithChangeToken_previousRequestSchedulerInfo_(v20, v22, (uint64_t)v21, *(_QWORD *)(a1 + 32));

      }
    }
  }
}

void sub_1BE9C5DB0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  dispatch_block_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  _QWORD v18[5];
  _QWORD block[4];
  id v20;
  id v21;
  uint64_t v22;
  char v23;

  v2 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE9C5BD0;
  block[3] = &unk_1E7830970;
  v20 = *(id *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v21 = v3;
  v22 = v4;
  v23 = *(_BYTE *)(a1 + 56);
  v5 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v6, (uint64_t)v5);
  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v9, v5);

  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v18[0] = v2;
  v18[1] = 3221225472;
  v18[2] = sub_1BEBD9F74;
  v18[3] = &unk_1E782EA40;
  v18[4] = *(_QWORD *)(a1 + 48);
  dispatch_async(v12, v18);

  if (*(_BYTE *)(a1 + 57))
  {
    objc_msgSend_error(*(void **)(a1 + 48), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 32), v16, v17);
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 32), v16, v17);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 32), v13, v14);

}

void sub_1BE9C5EF8(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  id v6;
  void *v7;
  const char *v8;
  void *v9;
  int v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  os_log_t *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  os_log_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  NSObject *v48;
  NSObject *v49;
  objc_class *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  NSObject *log;
  _QWORD v66[4];
  id v67;
  id v68;
  id v69;
  char v70;
  char v71;
  _QWORD block[5];
  id v73;
  char v74;
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  id v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95280])
    {
      objc_msgSend_unitTestOverrides(WeakRetained, v4, v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)CFSTR("PipelineMetasyncRequestsForever"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = v9 != 0;
    }
    else
    {
      v10 = 0;
    }
    v16 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = (os_log_t *)MEMORY[0x1E0C952B0];
    v18 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      log = v18;
      v50 = (objc_class *)objc_opt_class();
      NSStringFromClass(v50);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v51, v52);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(WeakRetained, v53, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v56, v57);
      *(_DWORD *)buf = 138544386;
      v76 = v64;
      v77 = 2048;
      v78 = v3;
      v79 = 2114;
      v80 = v63;
      v81 = 2114;
      v82 = v55;
      v83 = 2112;
      v84 = objc_claimAutoreleasedReturnValue();
      v58 = (void *)v84;
      _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Fetch database changes request <%{public}@: %p; %{public}@> for operation %{public}@ finished with error %@",
        buf,
        0x34u);

    }
    v21 = objc_msgSend_numRequestsSent(WeakRetained, v19, v20);
    objc_msgSend_setNumRequestsSent_(WeakRetained, v22, v21 + 1);
    objc_msgSend_error(v3, v23, v24);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (v27
      || !objc_msgSend_isExecuting(WeakRetained, v25, v26)
      || (objc_msgSend_isCancelled(WeakRetained, v28, v29) & 1) != 0
      || !objc_msgSend_fetchAllChanges(WeakRetained, v30, v31)
      || ((objc_msgSend_status(v3, v32, v33) == 2) & ~v10) != 0)
    {

    }
    else if ((objc_msgSend_numRequestsSent(WeakRetained, v34, v35) & 1) != 0)
    {
      if (*v16 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v38 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        v59 = v38;
        objc_msgSend_serverChangeTokenData(v3, v60, v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v76 = v62;
        _os_log_debug_impl(&dword_1BE990000, v59, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch request with change token %{public}@", buf, 0xCu);

      }
      objc_msgSend_serverChangeTokenData(v3, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__sendFetchDatabaseChangesRequestWithChangeToken_previousRequestSchedulerInfo_(WeakRetained, v42, (uint64_t)v41, v6);

      v43 = *(NSObject **)(a1 + 32);
      objc_msgSend_callbackQueue(WeakRetained, v44, v45);
      v46 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1BEBD9EF4;
      block[3] = &unk_1E7830628;
      block[4] = WeakRetained;
      v73 = v6;
      v74 = *(_BYTE *)(a1 + 64);
      dispatch_group_notify(v43, v46, block);

      v47 = v73;
      goto LABEL_26;
    }
    v48 = *(NSObject **)(a1 + 32);
    objc_msgSend_callbackQueue(WeakRetained, v36, v37);
    v49 = objc_claimAutoreleasedReturnValue();
    v66[0] = MEMORY[0x1E0C809B0];
    v66[1] = 3221225472;
    v66[2] = sub_1BE9C5DB0;
    v66[3] = &unk_1E7836CC0;
    v67 = v6;
    v68 = v3;
    v69 = WeakRetained;
    v70 = v10;
    v71 = *(_BYTE *)(a1 + 64);
    dispatch_group_notify(v48, v49, v66);

    v47 = v67;
LABEL_26:

    goto LABEL_27;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v12 = v11;
    objc_msgSend_requestUUID(v3, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v76 = v15;
    _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "Owning operation for request %{public}@ no longer around. Bailing.", buf, 0xCu);

  }
LABEL_27:

}

void sub_1BE9C63D4(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) == 0)
  {
    objc_msgSend_error(*(void **)(a1 + 40), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend_error(*(void **)(a1 + 40), v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 48), v10, (uint64_t)v9);

      objc_msgSend_perRequestGroup(*(void **)(a1 + 32), v11, v12);
      v25 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v25);

    }
    else
    {
      objc_msgSend__handleFetchChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 48), v7, *(_QWORD *)(a1 + 32));
      if (objc_msgSend_fetchAllChanges(*(void **)(a1 + 48), v13, v14)
        && objc_msgSend_count(*(void **)(a1 + 56), v15, v16))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v17 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v19 = *(void **)(a1 + 56);
          v20 = v17;
          v23 = objc_msgSend_count(v19, v21, v22);
          v24 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218242;
          v27 = v23;
          v28 = 2112;
          v29 = v24;
          _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch changes request for %lu zones with options:\n%@", buf, 0x16u);

        }
        objc_msgSend__sendFetchChangesRequestForZoneIDs_withOptions_previousRequestSchedulerInfo_(*(void **)(a1 + 48), v18, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
      }
    }
  }
}

void sub_1BE9C6598(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  dispatch_block_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD block[4];
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;

  v2 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE9C63D4;
  block[3] = &unk_1E782E490;
  v21 = *(id *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 56);
  v22 = v3;
  v23 = v4;
  v24 = v5;
  v25 = *(id *)(a1 + 64);
  v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v7, (uint64_t)v6);
  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v10, v6);

  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v19[0] = v2;
  v19[1] = 3221225472;
  v19[2] = sub_1BEBD8C08;
  v19[3] = &unk_1E782EA40;
  v19[4] = *(_QWORD *)(a1 + 48);
  dispatch_async(v13, v19);

  if (*(_BYTE *)(a1 + 72))
  {
    objc_msgSend_error(*(void **)(a1 + 48), v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 32), v17, v18);
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 32), v17, v18);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 32), v14, v15);

}

void sub_1BE9C66FC(uint64_t a1)
{
  id WeakRetained;
  id v3;
  dispatch_block_t *v4;
  void *v5;
  _QWORD *v6;
  os_log_t *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  os_log_t v33;
  const char *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  objc_class *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSObject *log;
  _QWORD v63[4];
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  char v69;
  _QWORD block[5];
  id v71;
  char v72;
  uint8_t buf[4];
  uint64_t v74;
  __int16 v75;
  id v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
  v5 = (void *)*MEMORY[0x1E0C952F8];
  v6 = (_QWORD *)MEMORY[0x1E0C95300];
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v5);
    v7 = (os_log_t *)MEMORY[0x1E0C952B0];
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      log = v8;
      v43 = (objc_class *)objc_opt_class();
      NSStringFromClass(v43);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(v3, v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(WeakRetained, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_error(v3, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v74 = (uint64_t)v61;
      v75 = 2048;
      v76 = v3;
      v77 = 2114;
      v78 = v46;
      v79 = 2114;
      v80 = v49;
      v81 = 2112;
      v82 = v52;
      _os_log_debug_impl(&dword_1BE990000, log, OS_LOG_TYPE_DEBUG, "Batch Record Fetch request <%{public}@: %p; %{public}@> for operation %{public}@ finished with error %@",
        buf,
        0x34u);

    }
    objc_msgSend__optionsForZonesWithPendingChangesAfterRequest_(WeakRetained, v9, (uint64_t)v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allKeys(v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_numRequestsSent(WeakRetained, v14, v15);
    objc_msgSend_setNumRequestsSent_(WeakRetained, v17, v16 + 1);
    objc_msgSend_error(v3, v18, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v22
      && objc_msgSend_isExecuting(WeakRetained, v20, v21)
      && (objc_msgSend_isCancelled(WeakRetained, v23, v24) & 1) == 0
      && objc_msgSend_fetchAllChanges(WeakRetained, v25, v26)
      && objc_msgSend_count(v13, v27, v28))
    {
      if ((objc_msgSend_numRequestsSent(WeakRetained, v29, v30) & 1) != 0)
      {
        if (*v6 != -1)
          dispatch_once(MEMORY[0x1E0C95300], *v4);
        v33 = *v7;
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
        {
          v57 = v33;
          v60 = objc_msgSend_count(v13, v58, v59);
          *(_DWORD *)buf = 134218242;
          v74 = v60;
          v75 = 2112;
          v76 = v10;
          _os_log_debug_impl(&dword_1BE990000, v57, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch changes request for %lu zones with options:\n%@", buf, 0x16u);

        }
        objc_msgSend__sendFetchChangesRequestForZoneIDs_withOptions_previousRequestSchedulerInfo_(WeakRetained, v34, (uint64_t)v13, v10, *(_QWORD *)(a1 + 32));
        v35 = *(NSObject **)(a1 + 40);
        objc_msgSend_callbackQueue(WeakRetained, v36, v37);
        v38 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_1BEBD8B88;
        block[3] = &unk_1E7830628;
        block[4] = WeakRetained;
        v71 = *(id *)(a1 + 32);
        v72 = *(_BYTE *)(a1 + 64);
        dispatch_group_notify(v35, v38, block);

        v39 = v71;
        goto LABEL_19;
      }
    }
    else
    {

    }
    v40 = *(NSObject **)(a1 + 40);
    objc_msgSend_callbackQueue(WeakRetained, v31, v32);
    v41 = objc_claimAutoreleasedReturnValue();
    v63[0] = MEMORY[0x1E0C809B0];
    v63[1] = 3221225472;
    v63[2] = sub_1BE9C6598;
    v63[3] = &unk_1E7836BD0;
    v64 = *(id *)(a1 + 32);
    v65 = v3;
    v66 = WeakRetained;
    v67 = v13;
    v68 = v10;
    v69 = *(_BYTE *)(a1 + 64);
    dispatch_group_notify(v40, v41, v63);

    v39 = v64;
LABEL_19:

    goto LABEL_24;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v5);
  v42 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v53 = v42;
    objc_msgSend_requestUUID(v3, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v74 = (uint64_t)v56;
    _os_log_debug_impl(&dword_1BE990000, v53, OS_LOG_TYPE_DEBUG, "Owning operation for request %{public}@ no longer around. Bailing.", buf, 0xCu);

  }
LABEL_24:

}

void sub_1BE9C6B88(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v6 = a3;
  if (v10)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v10, v5, v7);
    else
      objc_msgSend_remoteObjectProxyWithErrorHandler_(v10, v5, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t sub_1BE9C6C24()
{
  return String.init(data:encoding:)();
}

uint64_t sub_1BE9C6C34()
{
  return swift_bridgeObjectRelease();
}

void sub_1BE9C6C4C()
{
  uint64_t v0;

}

void sub_1BE9C6C58()
{
  void *v0;

}

uint64_t sub_1BE9C6C60()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_1BE9C6C7C()
{
  return swift_allocObject();
}

uint64_t sub_1BE9C6C88()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9C6C90()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9C6CA4()
{
  return swift_arrayDestroy();
}

uint64_t sub_1BE9C6CB4()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1BE9C6CC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_1BE9C6CE4(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

void sub_1BE9C6D04()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

void sub_1BE9C6D38()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1BE9C6D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1BE9C6D50()
{
  return swift_arrayInitWithCopy();
}

id sub_1BE9C6D58()
{
  uint64_t v0;

  return *(id *)(v0 - 320);
}

uint64_t sub_1BE9C6D64()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

void sub_1BE9C6D7C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1BE9C6DA4()
{
  return type metadata accessor for TimeZone();
}

unint64_t sub_1BE9C6DAC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE9BF2A0(a1, v1);
}

uint64_t sub_1BE9C6DB8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1BE9C6DE8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPZoneRetrieveChangesResponseChangedZone *v18;
  const char *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_35;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v26;

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(CKDPZoneRetrieveChangesResponseChangedZone);
        objc_msgSend_addChangedZones_((void *)a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (sub_1BE9C7090((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BE9C7090(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPZoneCapabilities *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPZoneCapabilities *)objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom() & 1) != 0)
          goto LABEL_50;
        goto LABEL_66;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_54:
        v36 = 24;
        goto LABEL_59;
      case 3u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_58:
        v36 = 28;
LABEL_59:
        *(_DWORD *)(a1 + v36) = v21;
        goto LABEL_64;
      case 4u:
        v17 = objc_alloc_init(CKDPZoneCapabilities);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (sub_1BEBD7050((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_66;
        goto LABEL_50;
      case 5u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_63:
        *(_BYTE *)(a1 + 40) = v32 != 0;
        goto LABEL_64;
      case 6u:
        v17 = objc_alloc_init(CKDPAnonymousZoneInfo);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && sub_1BEB5A474((uint64_t)v17, a2))
        {
LABEL_50:
          PBReaderRecallMark();

LABEL_64:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_66:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_64;
    }
  }
}

uint64_t sub_1BE9C750C(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  int v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!objc_msgSend_length(v1, v2, v3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    LOWORD(v15) = 0;
    v12 = "Can't convert empty server type string to a CKDPServerType";
    v13 = v8;
    v14 = 2;
    goto LABEL_19;
  }
  if ((objc_msgSend_isEqualToString_(v1, v4, (uint64_t)CFSTR("CKDatabaseService")) & 1) != 0)
  {
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  if ((objc_msgSend_isEqualToString_(v1, v5, (uint64_t)CFSTR("CKShareService")) & 1) == 0)
  {
    if ((objc_msgSend_isEqualToString_(v1, v6, (uint64_t)CFSTR("CKDeviceService")) & 1) != 0)
    {
      v7 = 2;
      goto LABEL_9;
    }
    if ((objc_msgSend_isEqualToString_(v1, v10, (uint64_t)CFSTR("CKCodeService")) & 1) != 0)
    {
      v7 = 3;
      goto LABEL_9;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    v15 = 138543362;
    v16 = v1;
    v12 = "Server type \"%{public}@\" isn't known";
    v13 = v11;
    v14 = 12;
LABEL_19:
    _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v15, v14);
    goto LABEL_8;
  }
  v7 = 1;
LABEL_9:

  return v7;
}

BOOL sub_1BE9C76D4(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  CKDPShareAcceptResponse *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 259)
      {
        if ((int)v17 > 502)
        {
          if ((int)v17 <= 799)
          {
            switch((_DWORD)v17)
            {
              case 0x1F7:
                v18 = objc_alloc_init(CKDPShareAcceptResponse);
                objc_storeStrong(a1 + 28, v18);
                if (!PBReaderPlaceMark() || (sub_1BEB00544((uint64_t)v18, a2) & 1) == 0)
                {
LABEL_195:

                  return 0;
                }
                break;
              case 0x1F8:
                v18 = objc_alloc_init(CKDPShareDeclineResponse);
                objc_storeStrong(a1 + 30, v18);
                if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                  goto LABEL_195;
                break;
              case 0x201:
                v18 = objc_alloc_init(CKDPShareVettingInitiateResponse);
                objc_storeStrong(a1 + 31, v18);
                if (!PBReaderPlaceMark() || (sub_1BEBC712C((uint64_t)v18, a2) & 1) == 0)
                  goto LABEL_195;
                break;
              default:
                goto LABEL_172;
            }
          }
          else
          {
            if ((int)v17 <= 899)
            {
              switch((int)v17)
              {
                case 800:
                  v18 = objc_alloc_init(CKDPTokenRegistrationResponse);
                  objc_storeStrong(a1 + 35, v18);
                  if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                    goto LABEL_195;
                  goto LABEL_191;
                case 801:
                  v18 = objc_alloc_init(CKDPTokenUnregistrationResponse);
                  objc_storeStrong(a1 + 36, v18);
                  if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                    goto LABEL_195;
                  goto LABEL_191;
                case 802:
                  v18 = objc_alloc_init(CKDPSetBadgeCountResponse);
                  objc_storeStrong(a1 + 27, v18);
                  if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                    goto LABEL_195;
                  goto LABEL_191;
                case 803:
                  v18 = objc_alloc_init(CKDPNotificationSyncResponse);
                  objc_storeStrong(a1 + 16, v18);
                  if (!PBReaderPlaceMark()
                    || (CKDPNotificationSyncResponseReadFrom((uint64_t)v18, a2) & 1) == 0)
                  {
                    goto LABEL_195;
                  }
                  goto LABEL_191;
                case 804:
                  v18 = objc_alloc_init(CKDPNotificationMarkReadResponse);
                  objc_storeStrong(a1 + 15, v18);
                  if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                    goto LABEL_195;
                  goto LABEL_191;
                default:
                  goto LABEL_172;
              }
            }
            switch((_DWORD)v17)
            {
              case 0x384:
                v18 = objc_alloc_init(CKDPArchiveRecordsResponse);
                objc_storeStrong(a1 + 3, v18);
                if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                  goto LABEL_195;
                break;
              case 0x385:
                v18 = objc_alloc_init(CKDPMarkAssetBrokenResponse);
                objc_storeStrong(a1 + 10, v18);
                if (!PBReaderPlaceMark() || (sub_1BEC17830((uint64_t)v18, a2) & 1) == 0)
                  goto LABEL_195;
                break;
              case 0x44D:
                v18 = objc_alloc_init(CKDPCodeFunctionInvokeResponse);
                objc_storeStrong(a1 + 8, v18);
                if (!PBReaderPlaceMark() || !sub_1BEC36F8C((uint64_t)v18, a2))
                  goto LABEL_195;
                break;
              default:
LABEL_172:
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  return 0;
                continue;
            }
          }
        }
        else if ((int)v17 > 300)
        {
          switch((int)v17)
          {
            case 400:
              v18 = objc_alloc_init(CKDPUserRetrieveResponse);
              objc_storeStrong(a1 + 44, v18);
              if (!PBReaderPlaceMark() || (sub_1BEC593A8((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              break;
            case 401:
              v18 = objc_alloc_init(CKDPUserQueryResponse);
              objc_storeStrong(a1 + 43, v18);
              if (!PBReaderPlaceMark() || (sub_1BEC5DB88((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              break;
            case 402:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsRetrieveResponse);
              objc_storeStrong(a1 + 41, v18);
              if (!PBReaderPlaceMark() || !sub_1BEB5AB30((id *)&v18->super.super.isa, a2))
                goto LABEL_195;
              break;
            case 403:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsUpdateResponse);
              objc_storeStrong(a1 + 42, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              break;
            case 404:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsResetResponse);
              objc_storeStrong(a1 + 40, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              break;
            case 405:
              v18 = objc_alloc_init(CKDPUserPrivacySettingsBatchLookupResponse);
              objc_storeStrong(a1 + 39, v18);
              if (!PBReaderPlaceMark() || (sub_1BEB389DC(v18, a2) & 1) == 0)
                goto LABEL_195;
              break;
            default:
              if ((_DWORD)v17 == 301)
              {
                v18 = objc_alloc_init(CKDPSubscriptionRetrieveResponse);
                objc_storeStrong(a1 + 34, v18);
                if (!PBReaderPlaceMark() || (sub_1BEB392E4(v18, a2) & 1) == 0)
                  goto LABEL_195;
              }
              else
              {
                if ((_DWORD)v17 != 303)
                  goto LABEL_172;
                v18 = objc_alloc_init(CKDPSubscriptionDeleteResponse);
                objc_storeStrong(a1 + 33, v18);
                if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                  goto LABEL_195;
              }
              break;
          }
        }
        else if ((int)v17 > 270)
        {
          if ((_DWORD)v17 == 271)
          {
            v18 = objc_alloc_init(CKDPAnonymousShareRemoveResponse);
            objc_storeStrong(a1 + 2, v18);
            if (!PBReaderPlaceMark() || (sub_1BEB30D34((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_195;
          }
          else
          {
            if ((_DWORD)v17 != 300)
              goto LABEL_172;
            v18 = objc_alloc_init(CKDPSubscriptionCreateResponse);
            objc_storeStrong(a1 + 32, v18);
            if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
              goto LABEL_195;
          }
        }
        else if ((_DWORD)v17 == 260)
        {
          v18 = objc_alloc_init(CKDPUpdateMissingAssetStatusResponse);
          objc_storeStrong(a1 + 37, v18);
          if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
            goto LABEL_195;
        }
        else
        {
          if ((_DWORD)v17 != 270)
            goto LABEL_172;
          v18 = objc_alloc_init(CKDPAnonymousShareAddResponse);
          objc_storeStrong(a1 + 1, v18);
          if (!PBReaderPlaceMark() || (sub_1BEB60DEC((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_195;
        }
      }
      else
      {
        if ((int)v17 > 199)
        {
          switch((int)v17)
          {
            case 200:
              v18 = objc_alloc_init(CKDPZoneSaveResponse);
              objc_storeStrong(a1 + 49, v18);
              if (!PBReaderPlaceMark() || (sub_1BEC8A350((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 201:
              v18 = objc_alloc_init(CKDPZoneRetrieveResponse);
              objc_storeStrong(a1 + 48, v18);
              if (!PBReaderPlaceMark() || !sub_1BEBA0B9C(v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 202:
              v18 = objc_alloc_init(CKDPZoneDeleteResponse);
              objc_storeStrong(a1 + 46, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 203:
              v18 = objc_alloc_init(CKDPZoneRetrieveChangesResponse);
              objc_storeStrong(a1 + 47, v18);
              if (!PBReaderPlaceMark() || (sub_1BE9C6DE8((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 210:
              v18 = objc_alloc_init(CKDPRecordSaveResponse);
              objc_storeStrong(a1 + 24, v18);
              if (!PBReaderPlaceMark() || !sub_1BEACFA64((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 211:
              v18 = objc_alloc_init(CKDPRecordRetrieveResponse);
              objc_storeStrong(a1 + 22, v18);
              if (!PBReaderPlaceMark() || (sub_1BEC68150((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 212:
              v18 = objc_alloc_init(CKDPRecordRetrieveVersionsResponse);
              objc_storeStrong(a1 + 23, v18);
              if (!PBReaderPlaceMark() || (sub_1BEAE0CF8(v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 213:
              v18 = objc_alloc_init(CKDPRecordRetrieveChangesResponse);
              objc_storeStrong(a1 + 21, v18);
              if (!PBReaderPlaceMark() || (sub_1BE9C8A14((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 214:
              v18 = objc_alloc_init(CKDPRecordDeleteResponse);
              objc_storeStrong(a1 + 18, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 216:
              v18 = objc_alloc_init(CKDPRecordResolveTokenResponse);
              objc_storeStrong(a1 + 20, v18);
              if (!PBReaderPlaceMark() || (sub_1BEA09E10((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 217:
              v18 = objc_alloc_init(CKDPFetchArchivedRecordsResponse);
              objc_storeStrong(a1 + 7, v18);
              if (!PBReaderPlaceMark() || (sub_1BEC124C0((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 218:
              v18 = objc_alloc_init(CKDPRecordMoveResponse);
              objc_storeStrong(a1 + 19, v18);
              if (!PBReaderPlaceMark() || !sub_1BEBFFD50((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 219:
              v18 = objc_alloc_init(CKDPShareAccessResponse);
              objc_storeStrong(a1 + 29, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 220:
              v18 = objc_alloc_init(CKDPQueryRetrieveResponse);
              objc_storeStrong(a1 + 17, v18);
              if (!PBReaderPlaceMark() || !sub_1BE9C8EA8(v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 222:
              v18 = objc_alloc_init(CKDPMergeableDeltaSaveResponse);
              objc_storeStrong(a1 + 14, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 223:
              v18 = objc_alloc_init(CKDPMergeableDeltaMetadataRetrieveResponse);
              objc_storeStrong(a1 + 11, v18);
              if (!PBReaderPlaceMark() || !sub_1BEAF6F7C(v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 224:
              v18 = objc_alloc_init(CKDPMergeableDeltaReplaceResponse);
              objc_storeStrong(a1 + 12, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 225:
              v18 = objc_alloc_init(CKDPMergeableDeltaRetrieveResponse);
              objc_storeStrong(a1 + 13, v18);
              if (!PBReaderPlaceMark() || !sub_1BEC1F184(v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 230:
              v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveResponse);
              objc_storeStrong(a1 + 4, v18);
              if (!PBReaderPlaceMark() || !sub_1BEC38B84(v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 240:
              v18 = objc_alloc_init(CKDPDeleteContainerResponse);
              objc_storeStrong(a1 + 6, v18);
              if (!PBReaderPlaceMark() || !sub_1BEA3C814((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            case 243:
              v18 = objc_alloc_init(CKDPUserAvailableQuotaResponse);
              objc_storeStrong(a1 + 38, v18);
              if (!PBReaderPlaceMark() || (sub_1BEA0F7D0((uint64_t)v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 244:
              v18 = objc_alloc_init(CKDPBundlesForContainerResponse);
              objc_storeStrong(a1 + 5, v18);
              if (!PBReaderPlaceMark() || (sub_1BEAEF8B0(v18, a2) & 1) == 0)
                goto LABEL_195;
              goto LABEL_191;
            case 250:
              v18 = objc_alloc_init(CKDPWebAuthTokenRetrieveResponse);
              objc_storeStrong(a1 + 45, v18);
              if (!PBReaderPlaceMark() || !sub_1BEB07F28((uint64_t)v18, a2))
                goto LABEL_195;
              goto LABEL_191;
            default:
              goto LABEL_172;
          }
        }
        switch((_DWORD)v17)
        {
          case 2:
            v18 = objc_alloc_init(CKDPOperation);
            objc_storeStrong(a1 + 25, v18);
            if (!PBReaderPlaceMark() || (CKDPOperationReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_195;
            break;
          case 3:
            v18 = objc_alloc_init(CKDPResponseOperationResult);
            objc_storeStrong(a1 + 26, v18);
            if (!PBReaderPlaceMark() || (CKDPResponseOperationResultReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_195;
            break;
          case 4:
            v18 = objc_alloc_init(CKDPResponseOperationHeader);
            objc_storeStrong(a1 + 9, v18);
            if (!PBReaderPlaceMark() || !sub_1BE9C87FC(v18, a2))
              goto LABEL_195;
            break;
          default:
            goto LABEL_172;
        }
      }
LABEL_191:
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BE9C87FC(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPResponseOperationHeaderAssetAuthorizationResponse *v17;
  const char *v18;
  const char *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPResponseOperationHeaderAssetAuthorizationResponse);
        objc_msgSend_addAssetAuthorizationResponses_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEB113E0((char *)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPThrottlingConfig);
    objc_msgSend_addThrottleConfig_(a1, v19, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (sub_1BEAD1480((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BE9C8A14(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRecordRetrieveChangesResponseRecordChange *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  const char *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  const char *v35;
  const char *v36;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseRecordChange);
        objc_msgSend_addChangedRecord_((void *)a1, v18, (uint64_t)v17);
        if (PBReaderPlaceMark() && (sub_1BEB34DE4((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_52;
        goto LABEL_64;
      case 2u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 48;
        goto LABEL_24;
      case 3u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 32;
LABEL_24:
        v21 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_53;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_58:
        *(_DWORD *)(a1 + 40) = v24;
        goto LABEL_53;
      case 5u:
        v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseShareChange);
        objc_msgSend_addChangedShare_((void *)a1, v28, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEB91238((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_64;
        goto LABEL_52;
      case 6u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
LABEL_62:
        *(_BYTE *)(a1 + 72) = v31 != 0;
        goto LABEL_53;
      case 7u:
        v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseMergeableDeltaChange);
        objc_msgSend_addChangedDeltas_((void *)a1, v35, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1BEA1EF64((id *)&v17->super.super.isa, a2))
          goto LABEL_64;
        goto LABEL_52;
      case 8u:
        v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseSyncObligation);
        objc_msgSend_addSyncObligations_((void *)a1, v36, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEA8A6AC((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_64;
        goto LABEL_52;
      case 0xCu:
        v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseZoneAttributesChange);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark() && (sub_1BEB0CD90((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_52:
          PBReaderRecallMark();

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_64:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

BOOL sub_1BE9C8EA8(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPQueryRetrieveResponseQueryResult *v17;
  const char *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPQueryRetrieveResponseQueryResult);
        objc_msgSend_addQueryResults_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEC005F0((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v19 = objc_claimAutoreleasedReturnValue();
    v17 = (CKDPQueryRetrieveResponseQueryResult *)a1[1];
    a1[1] = v19;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_1BE9C909C()
{
  if (qword_1ED7027B8 != -1)
    dispatch_once(&qword_1ED7027B8, &unk_1E7832040);
  return (id)qword_1ED7027B0;
}

id sub_1BE9C90DC()
{
  if (qword_1ED7027C8 != -1)
    dispatch_once(&qword_1ED7027C8, &unk_1E7832060);
  return (id)qword_1ED7027C0;
}

uint64_t sub_1BE9C911C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

void sub_1BE9C91C0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;

  sub_1BE9BE394();
  if ((v6 & 1) != 0)
  {
    sub_1BE9BE684();
    if (v8 != v9)
    {
      sub_1BE9B69F4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1BE9BDAF0();
    }
  }
  else
  {
    v7 = v4;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_1BE9BEF38(v5);
    v12 = (_QWORD *)sub_1BE9B69EC();
    v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 32);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 4;
  v15 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v15, v10, v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  sub_1BE9F5508();
}

void sub_1BE9C9284()
{
  sub_1BE9C91C0();
}

uint64_t sub_1BE9C92A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void sub_1BE9C92D8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1BE9C9284();
  *v0 = v1;
}

uint64_t sub_1BE9C92F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for PartialTrafficLog(0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1BE9C9414(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1BE9BF470();
    sub_1BE9BE150();
  }
  else
  {
    sub_1BE9C6C40();
    if (v4 + 32 * v3 <= v2 || v2 + 32 * v3 <= v4)
    {
      sub_1BE9BEF38((uint64_t *)&unk_1ED700408);
      sub_1BE9B696C();
      return sub_1BE9BDAE0();
    }
    sub_1BE9BF470();
    sub_1BE9BE784();
  }
  result = sub_1BE9BE678();
  __break(1u);
  return result;
}

uint64_t sub_1BE9C94B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE9BEF38(&qword_1ED700768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE9C94FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BE9BEF38(&qword_1ED7003B0);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x1E0DEE9E0];
  }
  v4 = v1;
  v2 = swift_bridgeObjectRetain();
  sub_1BE9BEFC0(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1BE9C95A4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

BOOL sub_1BE9C9624()
{
  id v0;
  unsigned int v1;
  NSObject *v2;
  os_log_type_t v3;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedOptions);
  v1 = objc_msgSend(v0, sel_logTraffic);

  if (!v1)
    return 0;
  if (qword_1ED700418 != -1)
    swift_once();
  v2 = qword_1ED7002E0;
  v3 = static os_log_type_t.info.getter();
  return os_log_type_enabled(v2, v3);
}

uint64_t sub_1BE9C96DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)sub_1BE9E15A8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9BF3D0(v1, (uint64_t)sub_1BE9C96D8);
  return sub_1BE9BDA6C(v2, v3, v4, v5, v6);
}

uint64_t sub_1BE9C9724(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v4[4] = v7;
  v9 = a2;
  swift_retain();
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v4[5] = v10;
  v4[6] = v12;
  v13 = (_QWORD *)swift_task_alloc();
  v4[7] = v13;
  *v13 = v4;
  v13[1] = sub_1BE9C96D4;
  return TrafficLogger.logPartialResponseObjectData(requestUUID:objectData:)(v6, v8, v10, v12);
}

uint64_t sub_1BE9C97F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  if (sub_1BE9C9624())
  {
    sub_1BE9BEAA4();
    swift_storeEnumTagMultiPayload();
    sub_1BE9E166C();
    sub_1BE9E1620();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v1;
    *v1 = v0;
    v1[1] = sub_1BE9C986C;
    v2 = sub_1BE9E14EC(*(_QWORD *)(v0 + 64));
    return sub_1BE9BF4C0(v2);
  }
  else
  {
    swift_task_dealloc();
    return sub_1BE9BDAA8(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1BE9C9870()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)sub_1BE9E15A8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9BF3D0(v1, (uint64_t)sub_1BE9C96D8);
  return sub_1BE9BDA6C(v2, v3, v4, v5, v6);
}

uint64_t sub_1BE9C98B8(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v4[4] = v7;
  v9 = a2;
  swift_retain();
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v4[5] = v10;
  v4[6] = v12;
  v13 = (_QWORD *)swift_task_alloc();
  v4[7] = v13;
  *v13 = v4;
  v13[1] = sub_1BE9BD7A8;
  return TrafficLogger.logPartialRequestObjectData(requestUUID:objectData:)(v6, v8, v10, v12);
}

uint64_t sub_1BE9C9988()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  if (sub_1BE9C9624())
  {
    sub_1BE9BEAA4();
    swift_storeEnumTagMultiPayload();
    sub_1BE9E166C();
    sub_1BE9E1620();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v1;
    *v1 = v0;
    v1[1] = sub_1BE9BD818;
    v2 = sub_1BE9E14EC(*(_QWORD *)(v0 + 64));
    return sub_1BE9BF4C0(v2);
  }
  else
  {
    swift_task_dealloc();
    return sub_1BE9BDAA8(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1BE9C9A00(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void *v9;
  _QWORD *v10;
  id v11;

  v9 = _Block_copy(aBlock);
  v10 = (_QWORD *)sub_1BE9C6C7C();
  v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  v11 = a3;
  swift_retain();
  return sub_1BE9E14F8(a6, (uint64_t)v10);
}

uint64_t sub_1BE9C9A60()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD);

  v1 = (void (**)(_QWORD))*((_QWORD *)*v0 + 3);
  sub_1BE9B69AC();
  sub_1BE9BDA80();
  swift_release();
  sub_1BE9E1618();
  v1[2](v1);
  _Block_release(v1);
  return sub_1BE9BE2FC(v0[1]);
}

uint64_t sub_1BE9C9ACC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BE9C96D8;
  v2 = sub_1BE9E1568();
  return v3(v2);
}

uint64_t sub_1BE9C9B3C(int a1, uint64_t a2, uint64_t a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  v5[4] = v12;
  v5[5] = v10;
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc();
  v5[6] = v13;
  *v13 = v5;
  v13[1] = sub_1BE9C9A60;
  return TrafficLogger.logResponseConfiguration(requestUUID:format:messageClass:)(v8, v10, a2, a3, v12);
}

uint64_t sub_1BE9C9C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;

  if (sub_1BE9C9624())
  {
    v1 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 24);
    v4 = *(_OWORD *)(v0 + 32);
    *(_QWORD *)v1 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v1 + 8) = v3;
    *(_OWORD *)(v1 + 16) = v4;
    *(_QWORD *)(v1 + 32) = v2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_1BE9BF3F4();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v5;
    *v5 = v0;
    v5[1] = sub_1BE9C9D24;
    v6 = sub_1BE9E14EC(*(_QWORD *)(v0 + 72));
    return sub_1BE9BF4C0(v6);
  }
  else
  {
    swift_task_dealloc();
    return sub_1BE9BDAA8(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1BE9C9D24()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9C6D38();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E1530();
  swift_task_dealloc();
  return sub_1BE9BE2FC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9C9D64()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;

  sub_1BE9BDB34();
  v2 = *(const void **)(v1 + 24);
  sub_1BE9B69AC();
  sub_1BE9BDA80();
  swift_release();
  sub_1BE9E1604();
  _Block_release(v2);
  return sub_1BE9BDAA8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9C9DB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_1BE9E15B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9C6CC4(v1, (uint64_t)sub_1BE9C96D8);
  return sub_1BE9E14DC(v2, v3, v4, v5);
}

uint64_t sub_1BE9C9DF4(int a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  v3[4] = v5;
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_1BE9C9D64;
  return TrafficLogger.finishRequestLog(requestUUID:)(v4, v6);
}

uint64_t sub_1BE9C9E94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (sub_1BE9C9624())
  {
    v1 = *(_QWORD **)(v0 + 48);
    v2 = *(_QWORD *)(v0 + 24);
    *v1 = *(_QWORD *)(v0 + 16);
    v1[1] = v2;
    swift_storeEnumTagMultiPayload();
    sub_1BE9BF3F4();
    v3 = (_QWORD *)sub_1BE9BDE34();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_1BE9C9F10;
    v4 = sub_1BE9E14EC(*(_QWORD *)(v0 + 48));
    return sub_1BE9E1508(v4);
  }
  else
  {
    swift_task_dealloc();
    return sub_1BE9BE2FC(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1BE9C9F10()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9C6D38();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E1530();
  swift_task_dealloc();
  return sub_1BE9BE2FC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9C9F50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t sub_1BE9C9F60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = a1;
  return swift_unknownObjectRelease();
}

uint64_t sub_1BE9C9F70()
{
  uint64_t (**v0)(void);
  const void *v1;
  void *v2;

  v1 = (const void *)*((_QWORD *)*v0 + 4);
  v2 = (void *)*((_QWORD *)*v0 + 2);
  sub_1BE9B69AC();
  sub_1BE9BDA80();
  swift_release();

  sub_1BE9E1604();
  _Block_release(v1);
  return sub_1BE9BE2FC(v0[1]);
}

uint64_t sub_1BE9C9FD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)sub_1BE9E15A8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9BF3D0(v1, (uint64_t)sub_1BE9C96D8);
  return sub_1BE9BDA6C(v2, v3, v4, v5, v6);
}

uint64_t sub_1BE9CA01C(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v4[5] = v7;
  v9 = a2;
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v4[6] = v10;
  *v10 = v4;
  v10[1] = sub_1BE9C9F70;
  return TrafficLogger.logResponse(requestUUID:response:)(v6, v8, (uint64_t)v9);
}

uint64_t sub_1BE9CA0D4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  os_log_type_t v27;

  if (sub_1BE9C9624())
  {
    v1 = objc_msgSend(*(id *)(v0 + 40), sel_allHeaderFields);
    v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = sub_1BE9BEAE8(v2);
    sub_1BE9E1618();
    if (v3)
    {
      v4 = *(_QWORD **)(v0 + 88);
      v6 = *(_QWORD *)(v0 + 32);
      v5 = *(void **)(v0 + 40);
      v7 = *(_QWORD *)(v0 + 24);
      v8 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
      swift_bridgeObjectRetain();
      Date.init()();
      v9 = objc_msgSend(v5, sel_statusCode);
      *v4 = v7;
      v4[1] = v6;
      *(_QWORD *)((char *)v4 + *(int *)(v8 + 24)) = v9;
      *(_QWORD *)((char *)v4 + *(int *)(v8 + 28)) = v3;
      sub_1BE9E1654();
      swift_storeEnumTagMultiPayload();
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 96) = v10;
      *v10 = v0;
      v10[1] = sub_1BE9BD5CC;
      v11 = sub_1BE9E14EC(*(_QWORD *)(v0 + 88));
      return sub_1BE9BE600(v11);
    }
    v13 = *(void **)(v0 + 40);
    sub_1BE9E1610();
    v14 = v13;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    v17 = os_log_type_enabled(v15, v16);
    v19 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 56);
    v21 = *(void **)(v0 + 40);
    if (v17)
    {
      v27 = v16;
      v22 = (uint8_t *)sub_1BE9BE304();
      sub_1BE9BE304();
      *(_DWORD *)v22 = 136315138;
      v23 = objc_msgSend(v21, sel_allHeaderFields);
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      Dictionary.description.getter();
      swift_bridgeObjectRelease();
      v24 = sub_1BE9E1654();
      *(_QWORD *)(v0 + 16) = sub_1BE9E043C(v24, v25, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1BE9B6958();

      sub_1BE9BDA88(&dword_1BE990000, v15, v27, "Couldn't convert response headers to codable: %s", v22);
      swift_arrayDestroy();
      sub_1BE9BE6D4();
    }

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  swift_task_dealloc();
  sub_1BE9E14D4();
  return sub_1BE9BE110(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9CA3B4()
{
  uint64_t v0;
  _QWORD *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  sub_1BE9BDB34();
  v3 = v1[8];
  v2 = (const void *)v1[9];
  v4 = v1[5];
  v8 = v1[7];
  v9 = v1[6];
  v6 = v1[3];
  v5 = v1[4];
  sub_1BE9B69AC();
  sub_1BE9BDA80();
  sub_1BE9E1618();
  sub_1BE9B6958();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v9);
  sub_1BE9E1660();
  _Block_release(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BE9CA474()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BE9BDB8C;
  v2 = sub_1BE9E1568();
  return v3(v2);
}

uint64_t sub_1BE9CA508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  v8[2] = a8;
  v10 = type metadata accessor for URL();
  v8[3] = v10;
  v8[4] = *(_QWORD *)(v10 - 8);
  v11 = swift_task_alloc();
  v8[5] = v11;
  v12 = type metadata accessor for URLRequest();
  v8[6] = v12;
  v8[7] = *(_QWORD *)(v12 - 8);
  v13 = swift_task_alloc();
  v8[8] = v13;
  v8[9] = _Block_copy(a7);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  v8[10] = v14;
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;
  v8[11] = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;
  v8[12] = v20;
  swift_retain();
  v22 = (_QWORD *)swift_task_alloc();
  v8[13] = v22;
  *v22 = v8;
  v22[1] = sub_1BE9CA3B4;
  return TrafficLogger.logRequest(requestUUID:request:url:method:messageClass:parsingStandaloneMessage:)(v24, v15, v13, v11, v16, v18, v19, v21);
}

uint64_t sub_1BE9CA730()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9C6D38();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E1530();
  swift_task_dealloc();
  return sub_1BE9BE2FC(*(uint64_t (**)(void))(v1 + 8));
}

void sub_1BE9CACDC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

id sub_1BE9CAD00(void *a1, int a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  void (**v7)(id, void *);
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  void *v14;
  uint8_t v16[16];

  v7 = a3;
  if (a1)
  {
    objc_msgSend_xpcConnection(a1, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v8;
    if (v8)
    {
      if (a2)
        objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v7);
      else
        objc_msgSend_remoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v7);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v11 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v16 = 0;
        _os_log_error_impl(&dword_1BE990000, v11, OS_LOG_TYPE_ERROR, "Couldn't get connection to client", v16, 2u);
      }
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v12, *MEMORY[0x1E0C947D8], 1, CFSTR("Couldn't get connection to client"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        v7[2](v7, v13);

      v14 = 0;
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1BE9CC578(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BE9CDA50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9CE41C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9CE578(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE9CF428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9CFF38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE9D0CC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9D32F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9D3C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1BE9D4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9D48A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9D6A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a43);
  _Unwind_Resume(a1);
}

void sub_1BE9D6F08(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 168));
  objc_destroyWeak((id *)(v3 - 160));
  _Unwind_Resume(a1);
}

void sub_1BE9D7E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9D875C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  id *v9;
  id *v10;
  id *v11;
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v9);
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 144));
  objc_destroyWeak((id *)(v13 - 136));
  objc_destroyWeak((id *)(v13 - 128));
  _Unwind_Resume(a1);
}

void sub_1BE9D90A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  id *v36;

  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9D95D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  uint64_t v28;

  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v28 - 128));
  _Unwind_Resume(a1);
}

void sub_1BE9D9990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE9D9D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9DA280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE9DAB40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BE9DBF10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9DCD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1BE9DD0C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9DD580(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1BE9DD5A0(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  id v10;

  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_cacheChildAccounts(v4, v5, v6);

  if (v7)
    v10 = (id)objc_msgSend_childAccounts(a1, v8, v9);
  return objc_msgSend_aa_cloudKitAccount(a1, v8, v9);
}

void sub_1BE9DD5FC(int a1, int a2, unint64_t a3, unint64_t a4, CFIndex transferBufferSize)
{
  CFReadStreamRef *v7;
  CFWriteStreamRef *v8;
  id v9;
  id v10;

  v9 = 0;
  v10 = 0;
  if (!(a3 | a4))
    __assert_rtn("+[NSStream(BoundPairAdditions) createBoundInputStream:outputStream:bufferSize:]", "CKDProtobufStreamWriter.m", 30, "(inputStreamPtr != NULL) || (outputStreamPtr != NULL)");
  if (a3)
    v7 = (CFReadStreamRef *)&v10;
  else
    v7 = 0;
  if (a4)
    v8 = (CFWriteStreamRef *)&v9;
  else
    v8 = 0;
  CFStreamCreateBoundPair(0, v7, v8, transferBufferSize);
  if (a3)
    *(_QWORD *)a3 = v10;
  if (a4)
    *(_QWORD *)a4 = v9;
}

void sub_1BE9DD780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE9DE194(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  char hasDarkWakeNetworkReachabilityEnabledEntitlement;
  void *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  const char *v51;
  CKDOperationInfoHolderOperation *v52;
  const char *v53;
  void *v54;
  id v55;
  const char *v56;
  void *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  _QWORD v62[4];
  id v63;
  id v64;
  id v65;
  void (**v66)(_QWORD);
  char v67;
  char v68;
  char v69;
  uint8_t buf[4];
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v11 = a5;
  if (v8)
  {
    v12 = objc_msgSend_allowsCellularAccess(v7, v9, v10);
    v15 = objc_msgSend_allowsExpensiveNetworkAccess(v7, v13, v14);
    v18 = objc_msgSend_preferAnonymousRequests(v7, v16, v17);
    objc_msgSend_entitlements(v8, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    hasDarkWakeNetworkReachabilityEnabledEntitlement = objc_msgSend_hasDarkWakeNetworkReachabilityEnabledEntitlement(v21, v22, v23);

    v25 = (void *)objc_opt_new();
    objc_msgSend_setQualityOfService_(v25, v26, 9);
    objc_msgSend_setAllowsCellularAccess_(v25, v27, v12);
    objc_msgSend_setAllowsExpensiveNetworkAccess_(v25, v28, v15);
    objc_msgSend_setPreferAnonymousRequests_(v25, v29, v18);
    objc_msgSend_sourceApplicationBundleIdentifier(v7, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSourceApplicationBundleIdentifier_(v25, v33, (uint64_t)v32);

    objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(v7, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(v25, v37, (uint64_t)v36);

    objc_msgSend_applicationBundleIdentifierOverrideForNetworkAttribution(v7, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(v25, v41, (uint64_t)v40);

    objc_msgSend_sourceApplicationSecondaryIdentifier(v7, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_set_sourceApplicationSecondaryIdentifier_(v25, v45, (uint64_t)v44);

    objc_msgSend_privacyProxyFailClosedOverride(v7, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPrivacyProxyFailClosedOverride_(v25, v49, (uint64_t)v48);

    v50 = (void *)objc_opt_new();
    objc_msgSend_setResolvedConfiguration_(v50, v51, (uint64_t)v25);
    v52 = [CKDOperationInfoHolderOperation alloc];
    v54 = (void *)objc_msgSend_initWithOperationInfo_container_(v52, v53, (uint64_t)v50, v8);
    v62[0] = MEMORY[0x1E0C809B0];
    v62[1] = 3221225472;
    v62[2] = sub_1BE9BB280;
    v62[3] = &unk_1E7838100;
    v63 = v7;
    v67 = v12;
    v68 = v15;
    v69 = hasDarkWakeNetworkReachabilityEnabledEntitlement;
    v66 = v11;
    v64 = v54;
    v65 = v8;
    v55 = v54;
    objc_msgSend_fetchConfigurationForOperation_withCompletionHandler_(v65, v56, (uint64_t)v55, v62);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v57 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v58 = v57;
      objc_msgSend_metricUUID(v7, v59, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v71 = v61;
      _os_log_impl(&dword_1BE990000, v58, OS_LOG_TYPE_INFO, "CKDContainer missing for CKEventMetric %@", buf, 0xCu);

    }
    if (v11)
      v11[2](v11);
  }

}

uint64_t sub_1BE9DE4D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE9DE520();
  *a1 = result;
  return result;
}

uint64_t sub_1BE9DE4F8()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_1BE9DE550(v0);
}

uint64_t sub_1BE9DE520()
{
  sub_1BE9BD864();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9DE550(uint64_t a1)
{
  uint64_t v1;

  sub_1BE9BD864();
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

void sub_1BE9DE590()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

uint64_t static TrafficLogger.maxAccumulatedCountBeforeFlush.getter()
{
  return 10;
}

uint64_t static TrafficLogger.maxAccumulatedSizeBeforeFlush.getter()
{
  return 300000;
}

void sub_1BE9DE5DC()
{
  qword_1ED700868 = 58;
  *(_QWORD *)algn_1ED700870 = 0xE100000000000000;
}

id sub_1BE9DE5F4()
{
  id result;

  type metadata accessor for TrafficLogger();
  swift_allocObject();
  result = TrafficLogger.init()();
  qword_1ED7002F0 = (uint64_t)result;
  return result;
}

void TrafficLogger.__allocating_init()()
{
  swift_allocObject();
  TrafficLogger.init()();
  sub_1BE9B69D4();
}

uint64_t sub_1BE9DE658()
{
  uint64_t result;

  sub_1BE9E13FC();
  static __CKLogSubsystem.name.getter();
  result = OS_os_log.init(subsystem:category:)();
  qword_1ED7002E0 = result;
  return result;
}

uint64_t sub_1BE9DE6A4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9E1558();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E15E0();
  sub_1BE9E14D4();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9DE6DC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1BE9E1558();
  v1 = *v0;
  sub_1BE9BE658(v2);
  sub_1BE9E15E0();
  sub_1BE9E14D4();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9DE714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BE9DE774()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  ContinuousClock.init()();
  v1 = (_QWORD *)sub_1BE9BD694();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1BE9DE7E0;
  sub_1BE9E15C0();
  return v3();
}

uint64_t sub_1BE9DE7E0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_1BE9BDB34();
  *v2 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc();
  v4 = sub_1BE9E1654();
  v5(v4);
  sub_1BE9E15C0();
  return swift_task_switch();
}

uint64_t sub_1BE9DE850()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  _QWORD *v3;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_task_dealloc();
    v1 = (uint64_t (*)(void))sub_1BE9E15EC();
    return sub_1BE9BD858(v1);
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v3;
    *v3 = v0;
    v3[1] = sub_1BE9DE8E0;
    return sub_1BE9DEA84();
  }
}

uint64_t sub_1BE9DE8B4()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9DE8E0()
{
  _QWORD *v0;
  uint64_t (*v1)(void);

  sub_1BE9E1558();
  sub_1BE9BE658(v0);
  swift_task_dealloc();
  v1 = (uint64_t (*)(void))sub_1BE9E15EC();
  return sub_1BE9BD858(v1);
}

uint64_t sub_1BE9DE918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  sub_1BE9BEF38(&qword_1ED700768);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE9C94B4(a1, (uint64_t)v6);
  v7 = type metadata accessor for TaskPriority();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v6, 1, v7) == 1)
  {
    sub_1BE9BEF00((uint64_t)v6, &qword_1ED700768);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    v8 = dispatch thunk of Actor.unownedExecutor.getter();
    v10 = v9;
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  if (v10 | v8)
  {
    v12[0] = 0;
    v12[1] = 0;
    v12[2] = v8;
    v12[3] = v10;
  }
  return swift_task_create();
}

uint64_t sub_1BE9DEA84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  sub_1BE9BEF38(&qword_1ED700768);
  *(_QWORD *)(v1 + 48) = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

uint64_t sub_1BE9DEAC4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (_QWORD *)v0[5];
  sub_1BE9BD864();
  v2 = v1[14];
  swift_bridgeObjectRetain();
  sub_1BE9DE550(MEMORY[0x1E0DEE9D8]);
  v1[15] = 0;
  v1[16] = 0;
  v3 = v1[18];
  v4 = MEMORY[0x1E0DEE9C0];
  if (v3)
  {
    swift_retain();
    v5 = sub_1BE9BEF38(&qword_1ED700400);
    MEMORY[0x1C3B82450](v3, v4 + 8, v5, MEMORY[0x1E0DEDB38]);
    sub_1BE9BEA14();
  }
  v6 = v0[6];
  sub_1BE9C9F50(0);
  v7 = sub_1BE9C9F60(0);
  MEMORY[0x1C3B8242C](v7);
  v8 = type metadata accessor for TaskPriority();
  sub_1BE9BE35C(v6, v9, v10, v8);
  v11 = (_QWORD *)sub_1BE9C6C7C();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v2;
  v0[7] = sub_1BE9DF034(v6, (uint64_t)&unk_1EF570128, (uint64_t)v11);
  sub_1BE9BEF00(v6, &qword_1ED700768);
  v12 = (_QWORD *)swift_task_alloc();
  v0[8] = v12;
  *v12 = v0;
  v12[1] = sub_1BE9DEBFC;
  return Task<>.value.getter();
}

uint64_t sub_1BE9DEBFC()
{
  sub_1BE9BDB34();
  sub_1BE9B69AC();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

uint64_t sub_1BE9DEC34()
{
  uint64_t v0;

  swift_release();
  sub_1BE9E14D4();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9DEC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a4;
  v5 = type metadata accessor for Logger();
  v4[5] = v5;
  v4[6] = *(_QWORD *)(v5 - 8);
  v4[7] = swift_task_alloc();
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BE9DECDC()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16);
  sub_1BE9E1610();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (sub_1BE9E1580(v4))
  {
    v5 = (uint8_t *)sub_1BE9BE304();
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v1 + 24) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1BE9BDA88(&dword_1BE990000, v3, v0, "Will flush traffic logs. count=%ld", v5);
    sub_1BE9BE6D4();
  }

  v6 = *(void **)(v1 + 32);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 48) + 8);
  v20(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 40));
  v7 = static TrafficLogChunkedMessage.chunkedLogMessages(from:)(v6);
  v8 = v7[2];
  if (v8)
  {
    v9 = v7 + 5;
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      sub_1BE9E15B0();
      CKLogTrafficCompressed.getter();
      sub_1BE9E15B0();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.info.getter();
      v14 = sub_1BE9E1580(v13);
      v15 = *(_QWORD *)(v1 + 64);
      v16 = *(_QWORD *)(v1 + 40);
      if (v14)
      {
        v17 = v10;
        v18 = sub_1BE9BE304();
        v21 = sub_1BE9BE304();
        *(_DWORD *)v18 = 136315138;
        sub_1BE9E15B0();
        *(_QWORD *)(v18 + 4) = sub_1BE9E043C(v17, v11, &v21);
        swift_bridgeObjectRelease_n();
        sub_1BE9BDA88(&dword_1BE990000, v12, v0, "%s", (uint8_t *)v18);
        swift_arrayDestroy();
        sub_1BE9BE6D4();
      }
      swift_bridgeObjectRelease_n();

      v20(v15, v16);
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_1BE9E14D4();
  swift_task_dealloc();
  return sub_1BE9BE110(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1BE9DF034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  sub_1BE9DFFE0(a1, 0, 0, 0, 1, 0, 0);
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  return swift_task_create();
}

id TrafficLogger.init()()
{
  uint64_t v0;
  objc_class *v1;
  objc_super v3;

  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9D8];
  v1 = (objc_class *)type metadata accessor for TrafficLogger();
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  v3.receiver = (id)v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t TrafficLogger.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t TrafficLogger.__deallocating_deinit()
{
  TrafficLogger.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t TrafficLogger.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9DF1FC()
{
  return TrafficLogger.unownedExecutor.getter();
}

BOOL sub_1BE9DF214(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t sub_1BE9DF220(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t result;
  unint64_t i;
  int64_t v12;
  int64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _OWORD v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  _BYTE __dst[72];
  _BYTE __src[72];
  _QWORD v43[6];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BE9BEF38((uint64_t *)&unk_1EF570338);
    v2 = (_QWORD *)sub_1BE9E15F8();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  sub_1BE9C92A0(a1, v43);
  v3 = v43[0];
  v4 = v43[3];
  v31 = (unint64_t)(v43[2] + 64) >> 6;
  v32 = v43[1];
  v5 = v43[4];
  v6 = &__src[40];
  v7 = &__dst[40];
  v8 = &v37;
  v9 = &v39;
  result = swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v33 = (v5 - 1) & v5;
  v34 = v4;
  for (i = __clz(__rbit64(v5)) | (v4 << 6); ; i = v15 + (v16 << 6))
  {
    sub_1BE9BEEC4(*(_QWORD *)(v3 + 48) + 40 * i, (uint64_t)__src);
    sub_1BE9BEE88(*(_QWORD *)(v3 + 56) + 32 * i, (uint64_t)v6);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1BE9BEEC4((uint64_t)__dst, (uint64_t)v36);
    if (!swift_dynamicCast())
    {
      sub_1BE9BEF00((uint64_t)__dst, (uint64_t *)&unk_1ED700390);
      swift_bridgeObjectRelease();
      sub_1BE9E1640();
      sub_1BE9E13C4();
      sub_1BE9BEA14();
      return 0;
    }
    sub_1BE9BEE88((uint64_t)v7, (uint64_t)v36);
    sub_1BE9BEF00((uint64_t)__dst, (uint64_t *)&unk_1ED700390);
    sub_1BE9E13CC(v36, v8);
    v38 = v35;
    sub_1BE9E13CC(v8, v9);
    v17 = v38;
    sub_1BE9E13CC(v9, v40);
    sub_1BE9E13CC(v40, &v38);
    result = sub_1BE9BF2A0(v17, *((uint64_t *)&v17 + 1));
    v18 = result;
    if ((v19 & 1) != 0)
    {
      v20 = v9;
      v21 = v8;
      v22 = v7;
      v23 = v3;
      v24 = v6;
      v25 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v25 = v17;
      v6 = v24;
      v3 = v23;
      v7 = v22;
      v8 = v21;
      v9 = v20;
      v26 = (_OWORD *)(v2[7] + 32 * v18);
      sub_1BE9E13DC((uint64_t)v26);
      result = (unint64_t)sub_1BE9E13CC(&v38, v26);
      goto LABEL_27;
    }
    if (v2[2] >= v2[3])
      break;
    sub_1BE9E15CC((result >> 3) & 0x1FFFFFFFFFFFFFF8);
    *(_OWORD *)(v27 + 16 * v18) = v17;
    result = (unint64_t)sub_1BE9E13CC(&v38, (_OWORD *)(v2[7] + 32 * v18));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_33;
    v2[2] = v30;
LABEL_27:
    v5 = v33;
    v4 = v34;
    if (v33)
      goto LABEL_5;
LABEL_6:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_34;
    if (v12 >= v31)
      goto LABEL_30;
    if (!*(_QWORD *)(v32 + 8 * v12))
    {
      if (v4 + 2 >= v31)
        goto LABEL_30;
      if (!*(_QWORD *)(v32 + 8 * (v4 + 2)))
      {
        if (v4 + 3 >= v31)
          goto LABEL_30;
        if (!*(_QWORD *)(v32 + 8 * (v4 + 3)))
        {
          if (v4 + 4 >= v31)
            goto LABEL_30;
          if (!*(_QWORD *)(v32 + 8 * (v4 + 4)))
          {
            if (v4 + 5 >= v31)
              goto LABEL_30;
            if (!*(_QWORD *)(v32 + 8 * (v4 + 5)))
            {
              v13 = v4 + 6;
              while (v13 < v31)
              {
                if (*(_QWORD *)(v32 + 8 * v13++))
                  goto LABEL_20;
              }
LABEL_30:
              sub_1BE9E1640();
              sub_1BE9E13C4();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_20:
    sub_1BE9E1590();
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_1BE9DF5A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t i;
  int64_t v11;
  int64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];
  _QWORD v40[2];
  uint64_t v41;
  _QWORD v42[6];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BE9BEF38(&qword_1EF570320);
    v2 = (_QWORD *)sub_1BE9E15F8();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  sub_1BE9C92A0(a1, v42);
  v3 = v42[0];
  v4 = v42[3];
  v5 = v42[4];
  v34 = (unint64_t)(v42[2] + 64) >> 6;
  v35 = v42[1];
  v6 = &v41;
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)&unk_1EF570328;
  v8 = (uint64_t *)&unk_1EF570330;
  v9 = MEMORY[0x1E0DEE9B8] + 8;
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v36 = (v5 - 1) & v5;
  v37 = v4;
  for (i = __clz(__rbit64(v5)) | (v4 << 6); ; i = v14 + (v15 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    sub_1BE9BEE88(*(_QWORD *)(v3 + 56) + 32 * i, (uint64_t)v6);
    v40[0] = v18;
    v40[1] = v17;
    sub_1BE9BEE88((uint64_t)v6, (uint64_t)v39);
    swift_bridgeObjectRetain_n();
    sub_1BE9BEF00((uint64_t)v40, v7);
    sub_1BE9BEF38(v8);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BE9E162C();
      sub_1BE9E13C4();
      sub_1BE9BEA14();
      return;
    }
    v19 = sub_1BE9BF2A0(v18, v17);
    v20 = v19;
    if ((v21 & 1) != 0)
    {
      v22 = v9;
      v23 = v8;
      v24 = v6;
      v25 = v3;
      v26 = v7;
      v27 = (uint64_t *)(v2[6] + 16 * v19);
      swift_bridgeObjectRelease();
      *v27 = v18;
      v27[1] = v17;
      v7 = v26;
      v3 = v25;
      v6 = v24;
      v8 = v23;
      v9 = v22;
      v28 = v2[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v28 + 8 * v20) = v38;
      goto LABEL_27;
    }
    if (v2[2] >= v2[3])
      break;
    sub_1BE9E15CC((v19 >> 3) & 0x1FFFFFFFFFFFFFF8);
    v30 = (uint64_t *)(v29 + 16 * v20);
    *v30 = v18;
    v30[1] = v17;
    *(_QWORD *)(v2[7] + 8 * v20) = v38;
    v31 = v2[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_32;
    v2[2] = v33;
LABEL_27:
    v5 = v36;
    v4 = v37;
    if (v36)
      goto LABEL_5;
LABEL_6:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_33;
    if (v11 >= v34)
      goto LABEL_30;
    if (!*(_QWORD *)(v35 + 8 * v11))
    {
      if (v4 + 2 >= v34)
        goto LABEL_30;
      if (!*(_QWORD *)(v35 + 8 * (v4 + 2)))
      {
        if (v4 + 3 >= v34)
          goto LABEL_30;
        if (!*(_QWORD *)(v35 + 8 * (v4 + 3)))
        {
          if (v4 + 4 >= v34)
            goto LABEL_30;
          if (!*(_QWORD *)(v35 + 8 * (v4 + 4)))
          {
            if (v4 + 5 >= v34)
              goto LABEL_30;
            if (!*(_QWORD *)(v35 + 8 * (v4 + 5)))
            {
              v12 = v4 + 6;
              while (v12 < v34)
              {
                if (*(_QWORD *)(v35 + 8 * v12++))
                  goto LABEL_20;
              }
LABEL_30:
              sub_1BE9E162C();
              sub_1BE9E13C4();
              return;
            }
          }
        }
      }
    }
LABEL_20:
    sub_1BE9E1590();
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t TrafficLogger.logRequestBodyStreamReset(requestUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = sub_1BE9BEF78();
  v3[6] = sub_1BE9BE6C0();
  sub_1BE9C6D98();
  return sub_1BE9BF44C();
}

uint64_t sub_1BE9DF8F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (sub_1BE9C9624())
  {
    v1 = *(_QWORD **)(v0 + 48);
    v2 = *(_QWORD *)(v0 + 24);
    *v1 = *(_QWORD *)(v0 + 16);
    v1[1] = v2;
    swift_storeEnumTagMultiPayload();
    sub_1BE9BF3F4();
    v3 = (_QWORD *)sub_1BE9BDE34();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_1BE9E14C8;
    v4 = sub_1BE9E14EC(*(_QWORD *)(v0 + 48));
    return sub_1BE9E1508(v4);
  }
  else
  {
    swift_task_dealloc();
    return sub_1BE9BE2FC(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1BE9DF988(int a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  v3[4] = v5;
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_1BE9E14D0;
  return TrafficLogger.logRequestBodyStreamReset(requestUUID:)(v4, v6);
}

unint64_t ResponseFormat.init(rawValue:)(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

BOOL sub_1BE9DFA28(uint64_t *a1, uint64_t *a2)
{
  return sub_1BE9DF214(*a1, *a2);
}

Swift::Int sub_1BE9DFA34()
{
  Swift::UInt *v0;

  return sub_1BE9DFA3C(*v0);
}

Swift::Int sub_1BE9DFA3C(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void sub_1BE9DFA80(int a1)
{
  Swift::UInt *v1;

  sub_1BE9DFA88(a1, *v1);
}

void sub_1BE9DFA88(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_1BE9DFAAC(uint64_t a1)
{
  Swift::UInt *v1;

  return sub_1BE9DFAB4(a1, *v1);
}

Swift::Int sub_1BE9DFAB4(uint64_t a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

unint64_t sub_1BE9DFAF4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = ResponseFormat.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_1BE9DFB24(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1BE9DFB30()
{
  sub_1BE9E1388();
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1BE9DFB8C()
{
  sub_1BE9E1388();
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1BE9DFBD8()
{
  sub_1BE9BB8AC(&qword_1EF570210, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB96C4);
  return Error<>._domain.getter();
}

uint64_t sub_1BE9DFC18()
{
  sub_1BE9BB8AC(&qword_1EF570210, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB96C4);
  return Error<>._code.getter();
}

uint64_t sub_1BE9DFC5C()
{
  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

id sub_1BE9DFC9C()
{
  id *v0;

  return *v0;
}

uint64_t sub_1BE9DFCA4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1BE9DFCB0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1BE9DFCC0()
{
  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_1BE9DFD00()
{
  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t sub_1BE9DFD40(void *a1)
{
  id v2;

  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t sub_1BE9DFDA4()
{
  void **v0;

  return sub_1BE9E1210(*v0);
}

uint64_t sub_1BE9DFDAC()
{
  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int sub_1BE9DFDFC()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void sub_1BE9DFE58(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_1BE9DFE88();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

uint64_t sub_1BE9DFE90@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = nullsub_4(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1BE9DFEBC()
{
  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_1BE9DFF14()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v5)(void);

  v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  v3 = sub_1BE9E1654();
  v2(v3);
  if (v0)
  {
    sub_1BE9E15C0();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    sub_1BE9E14D4();
    v5 = (uint64_t (*)(void))sub_1BE9E15EC();
    return v5();
  }
}

uint64_t sub_1BE9DFFB0()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_1BE9E14D4();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9DFFE0(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unsigned __int8 v18;
  uint64_t v19;

  sub_1BE9BEF38(&qword_1ED700768);
  MEMORY[0x1E0C80A78]();
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE9C94B4(a1, (uint64_t)v15);
  v16 = type metadata accessor for TaskPriority();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v15, 1, v16) == 1)
  {
    sub_1BE9BEF00((uint64_t)v15, &qword_1ED700768);
    result = 0;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    result = v18;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0)
LABEL_6:
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0)
    result |= 0x2000uLL;
  if ((a7 & 1) != 0)
    return result | 0x4000;
  return result;
}

uint64_t sub_1BE9E0118(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1BE9E017C;
  return v6(a1);
}

uint64_t sub_1BE9E017C()
{
  uint64_t (*v0)(void);

  sub_1BE9B69AC();
  v0 = (uint64_t (*)(void))sub_1BE9E15EC();
  return sub_1BE9BD858(v0);
}

uint64_t sub_1BE9E01B0(uint64_t a1)
{
  return sub_1BE9E01C8(a1, (void (*)(_QWORD))type metadata accessor for PartialTrafficLog);
}

uint64_t sub_1BE9E01BC(uint64_t a1)
{
  return sub_1BE9E01C8(a1, (void (*)(_QWORD))type metadata accessor for CKLogEvent);
}

uint64_t sub_1BE9E01C8(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t result;

  if (a1 < 0)
  {
    sub_1BE9E1540();
    result = sub_1BE9B69BC();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      a2(0);
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v4 + 16) = a1;
    }
    else
    {
      v4 = MEMORY[0x1E0DEE9D8];
    }
    a2(0);
    return v4;
  }
  return result;
}

uint64_t sub_1BE9E026C(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    sub_1BE9E1540();
    result = sub_1BE9B69BC();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for TrafficLogMessage();
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1BE9E02EC()
{
  return sub_1BE9E035C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1BE9E02F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9E1514(v1);
  return sub_1BE9DE714(v2, v3, v4, v5);
}

uint64_t sub_1BE9E0350()
{
  return sub_1BE9E035C((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1BE9E035C(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t sub_1BE9E0394()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9E1514(v1);
  return sub_1BE9DEC60(v2, v3, v4, v5);
}

uint64_t type metadata accessor for TrafficLogger()
{
  return objc_opt_self();
}

uint64_t sub_1BE9E0410(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  return result;
}

uint64_t sub_1BE9E043C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t ObjectType;

  sub_1BE9E15C0();
  v9 = sub_1BE9E0504(v6, v7, v8, 1, a1, a2);
  v10 = v15[0];
  if (v9)
  {
    v11 = v9;
    ObjectType = swift_getObjectType();
    v15[0] = v11;
    v12 = *a3;
    if (*a3)
    {
      sub_1BE9BEE88((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v15[0] = a1;
    v15[1] = a2;
    v13 = *a3;
    if (*a3)
    {
      sub_1BE9BEE88((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }
    sub_1BE9E166C();
  }
  sub_1BE9E13DC((uint64_t)v15);
  return v10;
}

uint64_t sub_1BE9E0504(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1BE9E0658((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1BE9E071C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *sub_1BE9E0658(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1BE9E071C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1BE9E07B0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_1BE9E0920(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)sub_1BE9E0920((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1BE9E07B0(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_6:
  sub_1BE9F0EB0(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1BE9E0920(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BE9BEF38((uint64_t *)&unk_1EF570348);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1BE9E0AB8(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BE9E09F4(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1BE9E09F4(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1BE9E0AB8(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_1BE9E0B38(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  sub_1BE9BEF38(&qword_1ED7003B0);
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_39;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v37 = v2;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_7;
LABEL_6:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * i);
    v24 = *v23;
    v25 = v23[1];
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) == 0)
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v28);
        if (v33 != -1)
        {
          v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v29);
    *v34 = v22;
    v34[1] = v21;
    v35 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v29);
    *v35 = v24;
    v35[1] = v25;
    ++*(_QWORD *)(v7 + 16);
    if (v10)
      goto LABEL_6;
LABEL_7:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_41;
    if (v16 >= v38)
    {
      swift_release();
      v3 = v37;
      v17 = (_QWORD *)(v5 + 64);
      goto LABEL_34;
    }
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v39 + 8 * v16);
    ++v13;
    if (!v18)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v38)
        goto LABEL_32;
      v18 = *(_QWORD *)(v39 + 8 * v13);
      if (!v18)
        break;
    }
LABEL_18:
    v10 = (v18 - 1) & v18;
  }
  v19 = v16 + 2;
  if (v19 < v38)
  {
    v18 = *(_QWORD *)(v39 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v13 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_42;
        if (v13 >= v38)
          goto LABEL_32;
        v18 = *(_QWORD *)(v39 + 8 * v13);
        ++v19;
        if (v18)
          goto LABEL_18;
      }
    }
    v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  v3 = v37;
LABEL_34:
  if ((v40 & 1) != 0)
  {
    v36 = 1 << *(_BYTE *)(v5 + 32);
    if (v36 >= 64)
      sub_1BE9F0F60(0, (unint64_t)(v36 + 63) >> 6, v17);
    else
      *v17 = -1 << v36;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_39:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1BE9E0E50()
{
  unint64_t result;

  result = qword_1EF570170;
  if (!qword_1EF570170)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for ResponseFormat, &type metadata for ResponseFormat);
    atomic_store(result, (unint64_t *)&qword_1EF570170);
  }
  return result;
}

uint64_t method lookup function for TrafficLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrafficLogger.accumulatedLogs.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TrafficLogger.accumulatedLogs.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of TrafficLogger.accumulatedLogs.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of TrafficLogger.log(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x100);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BE9C96D8;
  return v7(a1);
}

uint64_t dispatch thunk of TrafficLogger.flushToOSLog()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_1BE9BD694();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BE9C96D8;
  return sub_1BE9BD858(v3);
}

uint64_t dispatch thunk of TrafficLogger.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

ValueMetadata *type metadata accessor for ResponseFormat()
{
  return &type metadata for ResponseFormat;
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_1BE9E110C(a1, &qword_1EF5701F0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1BE9E110C(a1, &qword_1EF5701F8);
}

void sub_1BE9E0FF0()
{
  sub_1BE9BB8AC(&qword_1EF570200, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB95DC);
}

void sub_1BE9E101C()
{
  sub_1BE9BB8AC(&qword_1EF570208, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9608);
}

void sub_1BE9E1048()
{
  sub_1BE9BB8AC(&qword_1EF570210, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB96C4);
}

void sub_1BE9E1074()
{
  sub_1BE9BB8AC(&qword_1EF570218, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9690);
}

void sub_1BE9E10A0()
{
  sub_1BE9BB8AC(&qword_1EF570220, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB964C);
}

void sub_1BE9E10CC()
{
  sub_1BE9BB8AC(&qword_1EF570228, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1BECB97B0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1BE9E110C(a1, &qword_1EF570378);
}

void sub_1BE9E110C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
  sub_1BE9B69D4();
}

void sub_1BE9E114C()
{
  sub_1BE9BB8AC(&qword_1EF570230, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1BECB9774);
}

unint64_t sub_1BE9E117C()
{
  unint64_t result;

  result = qword_1EF570238;
  if (!qword_1EF570238)
  {
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF570238);
  }
  return result;
}

void sub_1BE9E11B8()
{
  sub_1BE9BB8AC(&qword_1EF570240, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1BECB97EC);
}

void sub_1BE9E11E4()
{
  sub_1BE9BB8AC((unint64_t *)&qword_1EF570248, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1BECB9708);
}

uint64_t sub_1BE9E1210(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1BE9E1248()
{
  uint64_t v0;

  sub_1BE9E1538();

  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE9E1284()
{
  uint64_t v0;

  sub_1BE9E1538();
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE9E12B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_1BE9E15B8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1BE9C6CC4(v1, (uint64_t)sub_1BE9C96D8);
  return sub_1BE9E14DC(v2, v3, v4, v5);
}

uint64_t sub_1BE9E1300()
{
  uint64_t v0;

  sub_1BE9E1538();

  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE9E1338()
{
  uint64_t v0;

  sub_1BE9E1538();

  _Block_release(*(const void **)(v0 + 64));
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1BE9E1388()
{
  unint64_t result;

  result = qword_1ED700430;
  if (!qword_1ED700430)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for ResponseFormat, &type metadata for ResponseFormat);
    atomic_store(result, (unint64_t *)&qword_1ED700430);
  }
  return result;
}

uint64_t sub_1BE9E13C4()
{
  return swift_release();
}

_OWORD *sub_1BE9E13CC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1BE9E13DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_1BE9E13FC()
{
  unint64_t result;

  result = qword_1ED700770;
  if (!qword_1ED700770)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED700770);
  }
  return result;
}

uint64_t sub_1BE9E1438()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE9E145C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)sub_1BE9E15B8();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BE9C96D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF570358 + dword_1EF570358))(a1, v4);
}

uint64_t sub_1BE9E14D4()
{
  return swift_task_dealloc();
}

uint64_t sub_1BE9E14DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1BE9E14EC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1BE9E14F8(uint64_t a1, uint64_t a2)
{
  return sub_1BE9BE930(a1, a2);
}

uint64_t sub_1BE9E1508(uint64_t a1)
{
  return sub_1BE9BE600(a1);
}

uint64_t sub_1BE9E1514(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1BE9E1530()
{
  uint64_t v0;

  return sub_1BE9BE428(v0);
}

void sub_1BE9E1538()
{
  uint64_t v0;

}

void sub_1BE9E1558()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1BE9E1568()
{
  uint64_t v0;

  return v0;
}

BOOL sub_1BE9E1580(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1BE9E15A8()
{
  return swift_task_alloc();
}

uint64_t sub_1BE9E15B0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9E15B8()
{
  return swift_task_alloc();
}

void sub_1BE9E15CC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + a1) |= v1;
}

uint64_t sub_1BE9E15E0()
{
  return swift_task_dealloc();
}

uint64_t sub_1BE9E15EC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1BE9E15F8()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_1BE9E1604()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0);
}

uint64_t sub_1BE9E1610()
{
  return CKLog.getter();
}

uint64_t sub_1BE9E1618()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9E1620()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1BE9BE3E4(v0, v1);
}

uint64_t sub_1BE9E162C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9E1640()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9E1654()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9E1660()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0);
}

uint64_t sub_1BE9E166C()
{
  return swift_bridgeObjectRetain();
}

id sub_1BE9E1674()
{
  void *v0;

  return v0;
}

id static TrafficLogChunkedMessage.chunkedLogMessages(from:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68[3];

  v68[1] = *(id *)MEMORY[0x1E0C80C00];
  v62 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v62 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  sub_1BE9BDA90();
  v5 = v4 - v3;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  sub_1BE9BDA90();
  v10 = v9 - v8;
  type metadata accessor for String.Encoding();
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  sub_1BE9BDA90();
  type metadata accessor for PropertyListEncoder();
  sub_1BE9BD86C();
  v11 = (id)PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  v68[0] = a1;
  sub_1BE9BEF38(&qword_1ED700378);
  sub_1BE9E2A68((unint64_t *)&unk_1ED700380, &qword_1ED700368, (uint64_t)&protocol conformance descriptor for PartialTrafficLog, MEMORY[0x1E0DEAF10]);
  v12 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v67)
    goto LABEL_2;
  v60 = 0;
  v61 = v11;
  v58 = v6;
  v59 = v2;
  v55 = a1;
  v56 = v10;
  v57 = v7;
  v14 = v12;
  v15 = v13;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v68[0] = 0;
  v17 = -[objc_class compressedDataUsingAlgorithm:error:](isa, sel_compressedDataUsingAlgorithm_error_, 0, v68);

  if (!v17)
  {
    v11 = v68[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1BE9BF3FC(v14);
LABEL_2:
    swift_release();
    return v11;
  }
  v52 = v14;
  v54 = v5;
  v18 = v68[0];
  v51 = v17;
  v19 = objc_msgSend(v17, sel_base64EncodedDataWithOptions_, 0);
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v66 = v22;
  v67 = Data.count.getter();
  v53 = v15;
  if (v67 >= 1)
  {
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = v23 + 1;
      if (__OFADD__(v23, 1))
        break;
      v26 = __OFADD__(v24, 31000);
      v24 += 31000;
      if (v26)
        v24 = 0x7FFFFFFFFFFFFFFFLL;
      ++v23;
      if (v24 >= v67)
        goto LABEL_13;
    }
    __break(1u);
    __break(1u);
    goto LABEL_28;
  }
  v25 = 0;
LABEL_13:
  v68[0] = (id)MEMORY[0x1E0DEE9D8];
  sub_1BE9E273C(0, v25 & ~(v25 >> 63), 0);
  if (v25 < 0)
  {
    __break(1u);
    JUMPOUT(0x1BE9E1DA0);
  }
  v27 = v68[0];
  v64 = BYTE6(v66);
  v65 = v20;
  if (v25)
  {
    sub_1BE9BE660(SHIDWORD(v20));
    v50 = v29;
    v63 = v29;
    if (v28 < v67)
    {
      if (v28 != 0x7FFFFFFFFFFF9F18)
        __asm { BR              X9 }
LABEL_29:
      __break(1u);
      JUMPOUT(0x1BE9E1D80);
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v67 >= 1)
  {
    sub_1BE9BE660(SHIDWORD(v20));
    __asm { BR              X9 }
  }
  v31 = v56;
  CKLog.getter();
  v32 = v55;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v33 = v51;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v36 = v35;
  v67 = (uint64_t)v33;
  if (os_log_type_enabled(v34, v35))
  {
    v37 = swift_slowAlloc();
    *(_DWORD *)v37 = 134218496;
    LODWORD(v64) = v36;
    v38 = (void *)v32[2];
    sub_1BE9BD6A8();
    v68[0] = v38;
    sub_1BE9BF458();
    sub_1BE9BD6A8();
    *(_WORD *)(v37 + 12) = 2048;
    v39 = (void *)v27[2];
    sub_1BE9BF4D0();
    v68[0] = v39;
    sub_1BE9BF458();
    sub_1BE9BF4D0();
    *(_WORD *)(v37 + 22) = 2048;
    v40 = v33;
    v41 = NSData.startIndex.getter();
    v42 = NSData.endIndex.getter();
    v43 = (void *)sub_1BE9E279C(v41, v42);

    v68[0] = v43;
    sub_1BE9BF458();

    _os_log_impl(&dword_1BE990000, v34, (os_log_type_t)v64, "Flushed traffic logs. count=%ld chunks=%ld dataSize=%ld", (uint8_t *)v37, 0x20u);
    MEMORY[0x1C3B84598](v37, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();

    v34 = v33;
  }

  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v31, v58);
  UUID.init()();
  v44 = UUID.uuidString.getter();
  v46 = v45;
  v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v54, v62);
  MEMORY[0x1E0C80A78](v47);
  *(&v50 - 4) = v44;
  *(&v50 - 3) = v46;
  *(&v50 - 2) = v48;
  v11 = (id)sub_1BE9E1F8C((uint64_t)v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BE9E2790);
  sub_1BE9BE5BC(v52, v53);
  sub_1BE9BE5BC(v65, v66);
  sub_1BE9BD6A8();
  sub_1BE9BF4D0();

  swift_release();
  return v11;
}

void sub_1BE9E1DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v9 = a1;
  v18 = MEMORY[0x1E0DEE9D8];
  sub_1BE9E273C(0, v6 & ~(v6 >> 63), 0);
  if (a2 >= v9 && (v6 & 0x8000000000000000) == 0)
  {
    while (a2 != v9)
    {
      if (!*(_QWORD *)(a6 + 16))
        goto LABEL_14;
      v10 = sub_1BE9EA9C4(v9);
      if ((v11 & 1) == 0)
        goto LABEL_15;
      v12 = (uint64_t *)(*(_QWORD *)(a6 + 56) + 16 * v10);
      v13 = *v12;
      v14 = v12[1];
      v16 = *(_QWORD *)(v18 + 16);
      v15 = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRetain();
      if (v16 >= v15 >> 1)
        sub_1BE9E273C(v15 > 1, v16 + 1, 1);
      *(_QWORD *)(v18 + 16) = v16 + 1;
      v17 = v18 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v14;
      if (a2 == ++v9)
        goto LABEL_11;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

BOOL TrafficLogChunkedMessage.hasAllChunks.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) == *(_QWORD *)(v0 + 16);
}

uint64_t static TrafficLogChunkedMessage.maxOSLogMessageSize.getter()
{
  return 31000;
}

uint64_t sub_1BE9E1F48(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B844FC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1BE9E1F8C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;

  v16 = MEMORY[0x1E0DEE9D8];
  sub_1BE9E273C(0, 0, 0);
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      swift_bridgeObjectRetain();
      v8 = a2(v4, v7, v6);
      v10 = v9;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v16 + 16);
      v11 = *(_QWORD *)(v16 + 24);
      if (v12 >= v11 >> 1)
        sub_1BE9E273C(v11 > 1, v12 + 1, 1);
      ++v4;
      v5 += 2;
      *(_QWORD *)(v16 + 16) = v12 + 1;
      v13 = v16 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1BE9E20A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;

  v6 = qword_1ED7002B0;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = qword_1ED700868;
  v8 = *(void **)algn_1ED700870;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11 = qword_1ED700868;
  v12 = *(void **)algn_1ED700870;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = qword_1ED700868;
  v16 = *(void **)algn_1ED700870;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = a2;
  v18._object = a3;
  String.append(_:)(v18);
  return a4;
}

uint64_t static TrafficLogChunkedMessage.partialTrafficLogs(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[4];
  uint64_t v10;

  result = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v6 = *(i - 1);
      v7 = *i;
      v8 = *(i - 2);
      v9[0] = *(i - 3);
      v9[1] = v8;
      v9[2] = v6;
      v9[3] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BE9E22E8((uint64_t)&v10, v9);
      if (v1)
        break;
      sub_1BE9BEA68();
      sub_1BE9BD6A8();
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    swift_bridgeObjectRelease();
    sub_1BE9BEA68();
    sub_1BE9BD6A8();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BE9E22E8(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  void *v19;
  id v20[4];

  v20[3] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a2[2];
  if (v3 < 0)
    __break(1u);
  v4 = a2[3];
  v6 = *a2;
  v5 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BE9E1DCC(0, v3, v6, v5, v3, v4);
  v20[0] = v7;
  sub_1BE9BEF38(&qword_1EF5703E0);
  sub_1BE9E29E8();
  v8 = BidirectionalCollection<>.joined(separator:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  sub_1BE9E2A2C();
  swift_bridgeObjectRetain();
  v11 = sub_1BE9E25D0(v8, (uint64_t)v10, 0);
  if (v11)
  {
    v12 = v11;
    sub_1BE9BEA68();
    v20[0] = 0;
    v13 = objc_msgSend(v12, sel_decompressedDataUsingAlgorithm_error_, 0, v20);
    v14 = v20[0];
    if (v13)
    {
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      type metadata accessor for PropertyListDecoder();
      sub_1BE9BD86C();
      PropertyListDecoder.init()();
      sub_1BE9BEF38(&qword_1ED700378);
      sub_1BE9E2A68(&qword_1EF5703F8, &qword_1EF570400, (uint64_t)&protocol conformance descriptor for PartialTrafficLog, MEMORY[0x1E0DEAF40]);
      sub_1BE9BE6E0();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      if (v2)
      {

        type metadata accessor for JSONDecoder();
        sub_1BE9BD86C();
        JSONDecoder.init()();
        sub_1BE9BE6E0();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        sub_1BE9E2648((uint64_t)v20[0]);
        swift_release();
      }
      else
      {
        sub_1BE9E2648((uint64_t)v20[0]);
      }
      swift_release();
      sub_1BE9BE5BC(v15, v17);
    }
    else
    {
      v19 = v14;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

  }
  else
  {
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v20[0] = (id)0xD000000000000029;
    v20[1] = (id)0x80000001BECBD780;
    v18._countAndFlagsBits = v8;
    v18._object = v10;
    String.append(_:)(v18);
    sub_1BE9BEA68();
    related decl 'e' for CKErrorCode.init(_:description:)();
    swift_willThrow();
  }
}

id sub_1BE9E25D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)MEMORY[0x1C3B822A0](a1, a2);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithBase64EncodedString_options_, v7, a3);

  return v8;
}

uint64_t sub_1BE9E2648(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v7 = v4 + v2;
    else
      v7 = v4;
    result = sub_1BE9BD8C8(result, v7, 1, v3);
    v3 = result;
  }
  if (!*(_QWORD *)(v6 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  result = type metadata accessor for PartialTrafficLog(0);
  if (v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(result - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  result = sub_1BE9EA6C8(v6 + v11, v2, v3 + v11 + *(_QWORD *)(v10 + 72) * v8);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v12 = *(_QWORD *)(v3 + 16);
  v13 = __OFADD__(v12, v2);
  v14 = v12 + v2;
  if (!v13)
  {
    *(_QWORD *)(v3 + 16) = v14;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void sub_1BE9E273C(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1BE9F0F7C(a1, a2, a3, *v3);
  *v3 = v4;
}

void sub_1BE9E2758()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1BE9F102C();
  *v0 = v1;
}

void sub_1BE9E2774()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1BE9F1048();
  *v0 = v1;
}

uint64_t sub_1BE9E2790(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1BE9E20A8(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1BE9E279C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  v4 = NSData.startIndex.getter();
  result = NSData.endIndex.getter();
  if (v4 > a1 || result < a1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = NSData.startIndex.getter();
  result = NSData.endIndex.getter();
  if (v7 > a2 || result < a2)
    goto LABEL_12;
  result = a2 - a1;
  if (__OFSUB__(a2, a1))
LABEL_13:
    __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PartialTrafficLog.RequestObject(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for TrafficLogChunkedMessage()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TrafficLogChunkedMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TrafficLogChunkedMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PartialTrafficLog.RequestObject(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for TrafficLogChunkedMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrafficLogChunkedMessage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrafficLogChunkedMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrafficLogChunkedMessage()
{
  return &type metadata for TrafficLogChunkedMessage;
}

unint64_t sub_1BE9E29E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF5703E8;
  if (!qword_1EF5703E8)
  {
    v1 = sub_1BE9E1F48(&qword_1EF5703E0);
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF5703E8);
  }
  return result;
}

unint64_t sub_1BE9E2A2C()
{
  unint64_t result;

  result = qword_1EF5703F0;
  if (!qword_1EF5703F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF5703F0);
  }
  return result;
}

uint64_t sub_1BE9E2A68(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_1BE9E1F48(&qword_1ED700378);
    v10 = sub_1BE9E2AE4(a2, a3);
    result = MEMORY[0x1C3B84508](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BE9E2AE4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PartialTrafficLog(255);
    result = MEMORY[0x1C3B84508](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void CKLogEvent.id.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.id.modify())(_QWORD)
{
  return nullsub_4;
}

void CKLogEvent.device.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.device.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.device.modify())(_QWORD)
{
  return nullsub_4;
}

void CKLogEvent.process.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.process.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.process.modify())(_QWORD)
{
  return nullsub_4;
}

uint64_t CKLogEvent.pid.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48);
}

uint64_t CKLogEvent.pid.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*CKLogEvent.pid.modify())(_QWORD)
{
  return nullsub_4;
}

uint64_t CKLogEvent.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BE9BF468();
  return sub_1BE9BDB44(v1 + *(int *)(v3 + 32), a1);
}

uint64_t type metadata accessor for CKLogEvent()
{
  uint64_t result;

  result = qword_1EF570488;
  if (!qword_1EF570488)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BE9E2CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CKLogEvent.startDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BE9BF468();
  return sub_1BE9E4B9C(a1, v1 + *(int *)(v3 + 32));
}

uint64_t sub_1BE9E2D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CKLogEvent.startDate.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

uint64_t CKLogEvent.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BE9BF468();
  return sub_1BE9BDB44(v1 + *(int *)(v3 + 36), a1);
}

uint64_t CKLogEvent.endDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BE9BF468();
  return sub_1BE9E4B9C(a1, v1 + *(int *)(v3 + 36));
}

uint64_t (*CKLogEvent.endDate.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

uint64_t CKLogEvent.timeZone.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1BE9BF468();
  sub_1BE9C6DA4();
  v0 = sub_1BE9BE138();
  return sub_1BE9C6D48(v0, v1, v2, v3);
}

uint64_t CKLogEvent.timeZone.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(sub_1BE9BF468() + 40);
  v4 = sub_1BE9C6DA4();
  return sub_1BE9C6D48(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*CKLogEvent.timeZone.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

void CKLogEvent.type.getter()
{
  sub_1BE9BF468();
  sub_1BE9BD878();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.type.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  sub_1BE9BF468();
  sub_1BE9C6C34();
  *v2 = a1;
  v2[1] = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.type.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

void CKLogEvent.container.getter()
{
  sub_1BE9BF468();
  sub_1BE9BD878();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.container.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  sub_1BE9BF468();
  sub_1BE9C6C34();
  *v2 = a1;
  v2[1] = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.container.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

void CKLogEvent.database.getter()
{
  sub_1BE9BF468();
  sub_1BE9BD878();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.database.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  sub_1BE9BF468();
  sub_1BE9C6C34();
  *v2 = a1;
  v2[1] = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.database.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

void CKLogEvent.input.getter()
{
  sub_1BE9BF468();
  sub_1BE9BD878();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.input.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  sub_1BE9BF468();
  sub_1BE9C6C34();
  *v2 = a1;
  v2[1] = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.input.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

void CKLogEvent.output.getter()
{
  sub_1BE9BF468();
  sub_1BE9BD878();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void CKLogEvent.output.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  sub_1BE9BF468();
  sub_1BE9C6C34();
  *v2 = a1;
  v2[1] = a2;
  sub_1BE9B6960();
}

uint64_t (*CKLogEvent.output.modify())(_QWORD)
{
  sub_1BE9BF468();
  return nullsub_4;
}

uint64_t static CKLogEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  BOOL v31;
  char v32;
  char v33;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t);
  int *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  void (*v53)(_BYTE *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v73[12];
  int v74;
  int *v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;

  v4 = type metadata accessor for Date();
  v80 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v79 = &v73[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1BE9BEF38(&qword_1EF570408);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v7);
  sub_1BE9E4BC4();
  v10 = v8 - v9;
  MEMORY[0x1E0C80A78](v11);
  v13 = &v73[-v12];
  sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v14);
  sub_1BE9E4BC4();
  v77 = (_BYTE *)(v15 - v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = &v73[-v19];
  v21 = MEMORY[0x1E0C80A78](v18);
  v78 = &v73[-v22];
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = &v73[-v24];
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = &v73[-v27];
  MEMORY[0x1E0C80A78](v26);
  v30 = &v73[-v29];
  v31 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (!v31)
  {
    sub_1BE9BDAD8();
    v32 = sub_1BE9BE144();
    if ((v33 & 1) == 0)
      return v32 & 1;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
  {
    sub_1BE9BDAD8();
    v32 = sub_1BE9BE144();
    if ((v35 & 1) == 0)
      return v32 & 1;
  }
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32) || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
  {
    sub_1BE9BDAD8();
    v32 = sub_1BE9BE144();
    if ((v37 & 1) == 0)
      return v32 & 1;
  }
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
  {
LABEL_37:
    v32 = 0;
    return v32 & 1;
  }
  v76 = v10;
  v38 = sub_1BE9BF468();
  sub_1BE9E4BD4(a1 + *(int *)(v38 + 32));
  v75 = (int *)v38;
  sub_1BE9BE890(a2 + *(int *)(v38 + 32));
  v39 = (uint64_t)&v13[*(int *)(v6 + 48)];
  sub_1BE9E2CB8((uint64_t)v30, (uint64_t)v13);
  sub_1BE9E2CB8((uint64_t)v28, v39);
  sub_1BE9BDE3C((uint64_t)v13);
  if (v31)
  {
    sub_1BE9E3694((uint64_t)v28, (uint64_t *)&unk_1EF570DB0);
    sub_1BE9E3694((uint64_t)v30, (uint64_t *)&unk_1EF570DB0);
    sub_1BE9BDE3C(v39);
    if (v31)
    {
      sub_1BE9E3694((uint64_t)v13, (uint64_t *)&unk_1EF570DB0);
      goto LABEL_27;
    }
LABEL_25:
    v41 = (uint64_t)v13;
LABEL_36:
    sub_1BE9E3694(v41, &qword_1EF570408);
    goto LABEL_37;
  }
  sub_1BE9E2CB8((uint64_t)v13, (uint64_t)v25);
  sub_1BE9BDE3C(v39);
  if (v40)
  {
    sub_1BE9E4BAC((uint64_t)v28);
    sub_1BE9E4BAC((uint64_t)v30);
    (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v25, v4);
    goto LABEL_25;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v80 + 32))(v79, v39, v4);
  sub_1BE9E3BA4(&qword_1EF570410, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42 = *(void (**)(_BYTE *, uint64_t))(v80 + 8);
  v42(v79, v4);
  sub_1BE9E3694((uint64_t)v28, (uint64_t *)&unk_1EF570DB0);
  sub_1BE9E3694((uint64_t)v30, (uint64_t *)&unk_1EF570DB0);
  v42(v25, v4);
  sub_1BE9E3694((uint64_t)v13, (uint64_t *)&unk_1EF570DB0);
  if ((v74 & 1) == 0)
    goto LABEL_37;
LABEL_27:
  v43 = v75;
  v44 = v78;
  sub_1BE9BE890(a1 + v75[9]);
  sub_1BE9E2CB8(a2 + v43[9], (uint64_t)v20);
  v45 = v76;
  v46 = v76 + *(int *)(v6 + 48);
  sub_1BE9E4BD4((uint64_t)v44);
  sub_1BE9E2CB8((uint64_t)v20, v46);
  sub_1BE9BDE3C(v45);
  if (v31)
  {
    sub_1BE9E4BA4((uint64_t)v20);
    sub_1BE9E4BA4((uint64_t)v44);
    sub_1BE9BDE3C(v46);
    if (v31)
    {
      sub_1BE9E3694(v45, (uint64_t *)&unk_1EF570DB0);
      goto LABEL_40;
    }
    goto LABEL_35;
  }
  v47 = v77;
  sub_1BE9BE890(v45);
  sub_1BE9BDE3C(v46);
  if (v48)
  {
    sub_1BE9E4BAC((uint64_t)v20);
    sub_1BE9E4BAC((uint64_t)v78);
    (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v47, v4);
LABEL_35:
    v41 = v45;
    goto LABEL_36;
  }
  v51 = v79;
  v50 = v80;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v80 + 32))(v79, v46, v4);
  sub_1BE9E3BA4(&qword_1EF570410, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  v52 = v47;
  v53 = *(void (**)(_BYTE *, uint64_t))(v50 + 8);
  v53(v51, v4);
  sub_1BE9E4BA4((uint64_t)v20);
  sub_1BE9E4BA4((uint64_t)v78);
  v53(v52, v4);
  sub_1BE9E4BA4(v45);
  if ((v74 & 1) == 0)
    goto LABEL_37;
LABEL_40:
  if ((MEMORY[0x1C3B82168](a1 + v43[10], a2 + v43[10]) & 1) == 0)
    goto LABEL_37;
  sub_1BE9BE6FC(v43[11]);
  v56 = v31 && v54 == v55;
  if (v56 || (sub_1BE9BDAD8(), v32 = sub_1BE9BE144(), (v57 & 1) != 0))
  {
    sub_1BE9BE6FC(v43[12]);
    v60 = v31 && v58 == v59;
    if (v60 || (sub_1BE9BDAD8(), v32 = sub_1BE9BE144(), (v61 & 1) != 0))
    {
      sub_1BE9BE6FC(v43[13]);
      v64 = v31 && v62 == v63;
      if (v64 || (sub_1BE9BDAD8(), v32 = sub_1BE9BE144(), (v65 & 1) != 0))
      {
        sub_1BE9BE6FC(v43[14]);
        v68 = v31 && v66 == v67;
        if (v68 || (sub_1BE9BDAD8(), v32 = sub_1BE9BE144(), (v69 & 1) != 0))
        {
          sub_1BE9BE6FC(v43[15]);
          if (v31 && v70 == v71)
            v32 = 1;
          else
            v32 = sub_1BE9BDAD8();
        }
      }
    }
  }
  return v32 & 1;
}

uint64_t sub_1BE9E3694(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1BE9BEF38(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t CKLogEvent.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v5);
  sub_1BE9E4BC4();
  v8 = v6 - v7;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - v10;
  sub_1BE9C6C88();
  sub_1BE9BE774();
  sub_1BE9BD6A8();
  sub_1BE9C6C88();
  sub_1BE9BE774();
  sub_1BE9BD6A8();
  sub_1BE9C6C88();
  sub_1BE9BE774();
  sub_1BE9BD6A8();
  Hasher._combine(_:)(*(_DWORD *)(v0 + 48));
  v12 = sub_1BE9BF468();
  sub_1BE9E2CB8(v0 + *(int *)(v12 + 32), (uint64_t)v11);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v11, 1, v1) == 1)
  {
    sub_1BE9C6CE4(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
    sub_1BE9C6CE4(1u);
    sub_1BE9E3BA4(&qword_1EF570418, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1BE9BEF80();
    sub_1BE9E4BB4();
  }
  sub_1BE9E4BD4(v0 + *(int *)(v12 + 36));
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v8, 1, v1) == 1)
  {
    sub_1BE9C6CE4(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v8, v1);
    sub_1BE9C6CE4(1u);
    sub_1BE9E3BA4(&qword_1EF570418, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1BE9BEF80();
    sub_1BE9E4BB4();
  }
  sub_1BE9C6DA4();
  sub_1BE9E3BA4(&qword_1EF570420, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CB1490]);
  dispatch thunk of Hashable.hash(into:)();
  sub_1BE9BEA70();
  sub_1BE9BDAC8();
  sub_1BE9BEA68();
  sub_1BE9BEA70();
  sub_1BE9BDAC8();
  sub_1BE9BEA68();
  sub_1BE9BEA70();
  sub_1BE9BDAC8();
  sub_1BE9BEA68();
  sub_1BE9BEA70();
  sub_1BE9BDAC8();
  sub_1BE9BEA68();
  swift_bridgeObjectRetain();
  sub_1BE9BE138();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int CKLogEvent.hashValue.getter()
{
  Hasher.init(_seed:)();
  CKLogEvent.hash(into:)();
  return Hasher._finalize()();
}

void sub_1BE9E399C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CKLogEvent.id.getter();
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1BE9E39CC()
{
  Hasher.init(_seed:)();
  CKLogEvent.hash(into:)();
  return Hasher._finalize()();
}

uint64_t CKLogSet.events.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKLogSet.events.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CKLogSet.events.modify())(_QWORD)
{
  return nullsub_4;
}

uint64_t static CKLogSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1BE9E3A50(*a1, *a2);
}

uint64_t sub_1BE9E3A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for CKLogEvent();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_1BE9E4B1C(a1 + v12, (uint64_t)v10);
        sub_1BE9E4B1C(a2 + v12, (uint64_t)v7);
        v15 = static CKLogEvent.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        sub_1BE9E4B60((uint64_t)v7);
        sub_1BE9E4B60((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1BE9E3B6C()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t sub_1BE9E3B78()
{
  return sub_1BE9E3BA4(&qword_1EF570428, (uint64_t (*)(uint64_t))type metadata accessor for CKLogEvent, (uint64_t)&protocol conformance descriptor for CKLogEvent);
}

uint64_t sub_1BE9E3BA4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3B84508](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CKLogEvent(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    v11 = a3[8];
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v14 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v17 = a3[9];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)a2 + v17, 1, v14))
    {
      v20 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v18, v19, v14);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v18, 0, 1, v14);
    }
    v21 = a3[10];
    v22 = (char *)v4 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[11];
    v26 = a3[12];
    v27 = (_QWORD *)((char *)v4 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = (_QWORD *)((char *)v4 + v26);
    v31 = (uint64_t *)((char *)a2 + v26);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = a3[13];
    v34 = a3[14];
    v35 = (_QWORD *)((char *)v4 + v33);
    v36 = (uint64_t *)((char *)a2 + v33);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = (_QWORD *)((char *)v4 + v34);
    v39 = (uint64_t *)((char *)a2 + v34);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = a3[15];
    v42 = (_QWORD *)((char *)v4 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CKLogEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for Date();
  if (!_s14CloudKitDaemon17PartialTrafficLogOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[9];
  if (!_s14CloudKitDaemon17PartialTrafficLogOwet_0(v6, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  v7 = a1 + a2[10];
  v8 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v10 = a3[8];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v13 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v12, 1, v13))
  {
    v14 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v11, 0, 1, v13);
  }
  v15 = a3[9];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a2 + v15, 1, v13))
  {
    v18 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v16, v17, v13);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v16, 0, 1, v13);
  }
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[11];
  v24 = a3[12];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(a1 + v24);
  v29 = (_QWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[13];
  v32 = a3[14];
  v33 = (_QWORD *)(a1 + v31);
  v34 = (_QWORD *)(a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = (_QWORD *)(a1 + v32);
  v37 = (_QWORD *)(a2 + v32);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = a3[15];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date();
  v10 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, v9);
  v11 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[9];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v14, 1, v9);
  v18 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v16, 1, v9);
  if (!v17)
  {
    v19 = *(_QWORD *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v15, v16, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    v20 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v15, v16, v9);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v15, 0, 1, v9);
LABEL_13:
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = a3[11];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = a3[12];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[13];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[14];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = a3[15];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[9];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a2 + v12, 1, v10))
  {
    v15 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v13, v14, v10);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v13, 0, 1, v10);
  }
  v16 = a3[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v21 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = a3[8];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Date();
  v13 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v10, 1, v12);
  v14 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    v16 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  v17 = a3[9];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v17, 1, v12);
  v21 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v19, 1, v12);
  if (!v20)
  {
    v22 = *(_QWORD *)(v12 - 8);
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v18, v19, v12);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v18, v12);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v23 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v18, v19, v12);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v18, 0, 1, v12);
LABEL_13:
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[11];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = a3[12];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = a3[13];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v42 = *v40;
  v41 = v40[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  v43 = a3[14];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (uint64_t *)(a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  v48 = a3[15];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CKLogEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE9E48E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 32);
    }
    else
    {
      v9 = sub_1BE9C6DA4();
      v10 = *(int *)(a3 + 40);
    }
    return _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for CKLogEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BE9E4984(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_1BE9B6960();
  }
  else
  {
    v8 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 32);
    }
    else
    {
      v9 = sub_1BE9C6DA4();
      v10 = *(int *)(a4 + 40);
    }
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a1 + v10, a2, a2, v9);
  }
}

void sub_1BE9E4A10()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BE9E4AB8();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TimeZone();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1BE9E4AB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF570DF0)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF570DF0);
  }
}

ValueMetadata *type metadata accessor for CKLogSet()
{
  return &type metadata for CKLogSet;
}

uint64_t sub_1BE9E4B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE9E4B60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BE9E4B9C(uint64_t a1, uint64_t a2)
{
  return sub_1BE9E2D28(a1, a2);
}

uint64_t sub_1BE9E4BA4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BE9E3694(a1, v1);
}

uint64_t sub_1BE9E4BAC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BE9E3694(a1, v1);
}

uint64_t sub_1BE9E4BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1BE9E4BD4(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE9E2CB8(a1, v1);
}

uint64_t sub_1BE9E4BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    result = sub_1BE9E0E48(a1);
    if (result < 0 || (v5 = result, result >= 1 << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return v13;
    }
    else
    {
      v6 = v4;
      v7 = a1 + 64;
      while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_17;
        v12 = v2;
        v8 = v7;
        v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
        v11 = *v9;
        v10 = v9[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BE9E678C(v11, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(_BYTE *)(a1 + 32)))
          goto LABEL_18;
        if ((*(_QWORD *)(v8 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
          goto LABEL_19;
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_20;
        v7 = v8;
        result = _HashTable.occupiedBucket(after:)();
        v2 = v12 - 1;
        if (v12 == 1)
          return v13;
        v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1BE9E4DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v6 = type metadata accessor for CKLogEvent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v17 = v3;
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1BE9E2758();
    v11 = v19;
    v12 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v13 = a1 + v12;
    v14 = *(_QWORD *)(v7 + 72);
    do
    {
      sub_1BE9E4B1C(v13, (uint64_t)v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v9 + 2) = v18;
      *((_QWORD *)v9 + 3) = a3;
      v19 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      if (v15 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_1BE9E2758();
        v11 = v19;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_1BE9ED214((uint64_t)v9, v11 + v12 + v15 * v14);
      v13 += v14;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v11;
}

uint64_t sub_1BE9E4F14()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for CKLogParser();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  qword_1EF5704E8 = v0;
  return result;
}

uint64_t static CKLogParser.shared.getter()
{
  if (qword_1EF570048 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1BE9E4F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v4 = type metadata accessor for URL();
  v3[20] = v4;
  v3[21] = *(_QWORD *)(v4 - 8);
  v3[22] = sub_1BE9BD888();
  v3[23] = sub_1BE9BDE34();
  v5 = type metadata accessor for Logger();
  v3[24] = v5;
  v3[25] = *(_QWORD *)(v5 - 8);
  v3[26] = sub_1BE9BD684();
  return sub_1BE9BE324();
}

uint64_t sub_1BE9E5000()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSURL *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[17];
  v2 = v0[23];
  v3 = v0[20];
  v4 = v0[21];
  CKLog.getter();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v2, v1, v3);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = v0[23];
    v9 = v0[20];
    v25 = v0[21];
    v10 = (uint8_t *)sub_1BE9BE304();
    v26 = sub_1BE9BE304();
    *(_DWORD *)v10 = 136315138;
    sub_1BE9ED080(&qword_1EF570758, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1BE9E043C(v11, v12, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1BE9BDA80();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v8, v9);
    sub_1BE9BDA88(&dword_1BE990000, v6, v7, "About to parse logs from URL: %s", v10);
    swift_arrayDestroy();
    sub_1BE9BE6D4();
  }
  v14 = v0[25];
  v13 = v0[26];
  v15 = v0[24];
  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[23], v0[20]);

  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v17 = v0[22];
  v18 = v0[20];
  v19 = v0[17];
  sub_1BE9EDDBC(v16, &qword_1EF570748);
  v5(v17, v19, v18);
  v21 = sub_1BE9E5504(v17, v20);
  v0[27] = v21;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1BE9E5294;
  v22 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v23 = v0 + 10;
  v23[1] = 0x40000000;
  v23[2] = sub_1BE9E557C;
  v23[3] = &unk_1E782D128;
  v23[4] = v22;
  objc_msgSend(v21, sel_prepareWithCompletionHandler_, v23);
  return swift_continuation_await();
}

uint64_t sub_1BE9E5294()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1BE9BDB34();
  *v1 = *v0;
  *(_QWORD *)(v2 + 224) = *(_QWORD *)(v2 + 48);
  return swift_task_switch();
}

uint64_t sub_1BE9E52EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[18];
  v2 = v0[15];
  v0[29] = v2;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D446A0]), sel_initWithSource_, v2);
  v0[30] = v3;
  v4 = swift_task_alloc();
  v0[31] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[32] = v5;
  *v5 = v0;
  v5[1] = sub_1BE9E538C;
  v6 = sub_1BE9EDE20();
  return sub_1BE9E5678(v6, v7, v4);
}

uint64_t sub_1BE9E538C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 264) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_QWORD *)(v4 + 272) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1BE9E5410()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 216);

  sub_1BE9E14D4();
  sub_1BE9EDDF8();
  sub_1BE9BEABC();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 272));
}

uint64_t sub_1BE9E5474()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 216);
  swift_willThrow();

  sub_1BE9EDE44();
  sub_1BE9EDDF8();
  sub_1BE9BEABC();
  return sub_1BE9BDAA8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9E54B4()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 216);

  sub_1BE9E14D4();
  sub_1BE9EDE44();
  sub_1BE9EDDF8();
  sub_1BE9BEABC();
  return sub_1BE9BDAA8(*(uint64_t (**)(void))(v0 + 8));
}

id sub_1BE9E5504@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  URL._bridgeToObjectiveC()(a2);
  v4 = v3;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_storeWithArchiveURL_, v3);

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return v5;
}

uint64_t sub_1BE9E557C(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
    return sub_1BE9E55C8(v3, (uint64_t)a3);
  if (a2)
    return sub_1BE9E5618(v3, (uint64_t)a2);
  __break(1u);
  return result;
}

uint64_t sub_1BE9E55C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  sub_1BE9BEF38(&qword_1ED700400);
  swift_allocError();
  *v3 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_1BE9E5618(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

void sub_1BE9E5628(void *a1)
{
  Class isa;

  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_activateStreamFromDate_, isa);

}

void sub_1BE9E5670()
{
  uint64_t v0;

  sub_1BE9E5628(*(void **)(v0 + 16));
}

uint64_t sub_1BE9E5678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v5 = type metadata accessor for DispatchQoS.QoSClass();
  v4[27] = v5;
  v4[28] = *(_QWORD *)(v5 - 8);
  v4[29] = sub_1BE9BD684();
  v6 = type metadata accessor for Date();
  v4[30] = v6;
  v4[31] = *(_QWORD *)(v6 - 8);
  v4[32] = sub_1BE9BD888();
  v4[33] = sub_1BE9BDE34();
  v4[34] = sub_1BE9BDE34();
  v4[35] = sub_1BE9BDE34();
  v7 = type metadata accessor for Logger();
  v4[36] = v7;
  v4[37] = *(_QWORD *)(v7 - 8);
  v4[38] = sub_1BE9BD888();
  v4[39] = sub_1BE9BDE34();
  return sub_1BE9BE324();
}

uint64_t sub_1BE9E5720()
{
  Swift::Int v0;
  Swift::Int v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  unint64_t v37;
  char v38;
  Swift::Bool v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  _BOOL8 v51;
  Swift::Int v52;
  unint64_t v53;
  char v54;
  Swift::Bool v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;
  uint64_t inited;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  Swift::String v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  id v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  _QWORD *v103;
  void *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  int64_t v113;
  id v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;

  v1 = v0;
  v3 = v0 + 184;
  v2 = *(void **)(v0 + 184);
  CKLog.getter();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  v110 = (_QWORD *)v1;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v1 + 184);
    v8 = (uint8_t *)sub_1BE9BE304();
    v9 = (_QWORD *)sub_1BE9BE304();
    *(_DWORD *)v8 = 138412290;
    *(_QWORD *)(v1 + 176) = v7;
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v7;

    sub_1BE9BDA88(&dword_1BE990000, v5, v6, "About to parse logs from stream: %@", v8);
    sub_1BE9BEF38(&qword_1EF570A20);
    swift_arrayDestroy();
    sub_1BE9BE6D4();
  }
  v11 = *(id *)v3;

  v12 = *(_QWORD *)(v1 + 312);
  v13 = *(_QWORD *)(v1 + 288);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 296) + 8);
  *(_QWORD *)(v1 + 320) = v14;
  v14(v12, v13);
  Date.init()();
  if (qword_1EF570050 != -1)
    goto LABEL_64;
LABEL_4:
  v15 = *((_QWORD *)off_1EF5704F0 + 2);
  v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (!v15)
    goto LABEL_35;
  v112 = v3;
  v3 = swift_bridgeObjectRetain() + 48;
  while (1)
  {
    v115 = v15;
    v17 = *(_QWORD *)(v3 - 8);
    v18 = *(id *)v3;
    v19 = *(_QWORD *)(v3 + 8);
    v21 = *(_QWORD *)(v3 + 16);
    v20 = *(void **)(v3 + 24);
    v22 = v16[2];
    v114 = *(id *)(v3 - 16);
    sub_1BE9BDB4C();
    sub_1BE9BDB4C();
    v23 = v20;
    swift_retain();
    v118 = v17;
    if (v22 && (v24 = sub_1BE9EDE00(v17), (v25 & 1) != 0))
    {
      v26 = *(_QWORD *)(v16[7] + 8 * v24);
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1BE9BEF38(&qword_1EF570760);
      v26 = Dictionary.init(dictionaryLiteral:)();
    }
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v26 + 16);
    swift_bridgeObjectRetain();
    if (v27)
    {
      sub_1BE9C6DAC(v19);
      v28 = MEMORY[0x1E0DEE9D8];
      if ((v29 & 1) != 0)
        v28 = swift_bridgeObjectRetain();
    }
    else
    {
      v28 = MEMORY[0x1E0DEE9D8];
    }
    v116 = v16;
    v120 = v28;
    sub_1BE9EDE0C();
    v30 = v23;
    MEMORY[0x1C3B823C0]();
    if (*(_QWORD *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v121 = (_QWORD *)v26;
    v32 = v19;
    v33 = sub_1BE9C6DAC(v19);
    v35 = *(_QWORD *)(v26 + 16);
    v36 = (v34 & 1) == 0;
    v1 = v35 + v36;
    if (__OFADD__(v35, v36))
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      swift_once();
      goto LABEL_4;
    }
    v37 = v33;
    v38 = v34;
    sub_1BE9BEF38(&qword_1EF570768);
    v39 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v1);
    v1 = (Swift::Int)v121;
    if (v39)
    {
      v40 = sub_1BE9C6DAC(v32);
      if ((v38 & 1) != (v41 & 1))
        goto LABEL_34;
      v37 = v40;
    }
    if ((v38 & 1) != 0)
    {
      v42 = v121[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v42 + 8 * v37) = v120;
    }
    else
    {
      sub_1BE9BE898((uint64_t)&v121[v37 >> 6]);
      v43 = (uint64_t *)(v121[6] + 16 * v37);
      *v43 = v32;
      v43[1] = v21;
      *(_QWORD *)(v121[7] + 8 * v37) = v120;
      v44 = v121[2];
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
        goto LABEL_61;
      v121[2] = v46;
      swift_bridgeObjectRetain();
    }
    sub_1BE9EDE0C();
    sub_1BE9BE38C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = swift_isUniquelyReferenced_nonNull_native();
    v48 = sub_1BE9BF2A0(v118, (uint64_t)v18);
    v50 = v116[2];
    v51 = (v49 & 1) == 0;
    v52 = v50 + v51;
    if (__OFADD__(v50, v51))
      goto LABEL_60;
    v53 = v48;
    v54 = v49;
    sub_1BE9BEF38(&qword_1EF570770);
    v55 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v47, v52);
    v16 = v116;
    if (v55)
      break;
LABEL_28:
    if ((v54 & 1) != 0)
    {
      v58 = v116[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v58 + 8 * v53) = v121;
    }
    else
    {
      sub_1BE9BE898((uint64_t)&v116[v53 >> 6]);
      v59 = (uint64_t *)(v116[6] + 16 * v53);
      *v59 = v118;
      v59[1] = (uint64_t)v18;
      *(_QWORD *)(v116[7] + 8 * v53) = v121;
      v60 = v116[2];
      v45 = __OFADD__(v60, 1);
      v61 = v60 + 1;
      if (v45)
        goto LABEL_62;
      v116[2] = v61;
      swift_bridgeObjectRetain();
    }
    v3 += 64;
    swift_release();

    sub_1BE9EDE0C();
    swift_bridgeObjectRelease_n();
    sub_1BE9BE38C();
    swift_bridgeObjectRelease();
    v15 = v115 - 1;
    if (v115 == 1)
    {
      swift_bridgeObjectRelease();
      v1 = (Swift::Int)v110;
      v3 = v112;
LABEL_35:
      v63 = (_QWORD *)(v3 - 40);
      v64 = MEMORY[0x1E0DEE9D8];
      sub_1BE9BEF38(&qword_1EF570778);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BECB99E0;
      *(_QWORD *)(inited + 32) = 0x74694B64756F6C43;
      *(_QWORD *)(inited + 40) = 0xE800000000000000;
      sub_1BE9BEF38(&qword_1EF570780);
      v66 = sub_1BE9B69EC();
      *(_OWORD *)(v66 + 16) = xmmword_1BECB99F0;
      sub_1BE9EDDBC(v66, &qword_1EF570788);
      *(_QWORD *)(v66 + 32) = NSPredicate.init(format:_:)();
      specialized Array._endMutation()();
      *(_QWORD *)(inited + 48) = v66;
      sub_1BE9BEF38(&qword_1EF570760);
      Dictionary.init(dictionaryLiteral:)();
      sub_1BE9EDE20();
      v67 = swift_isUniquelyReferenced_nonNull_native();
      sub_1BE9ECB18(inited, 0x6C7070612E6D6F63, 0xED000073766B2E65, v67);
      *(_QWORD *)(v1 + 328) = v16;
      sub_1BE9BE38C();
      *(_QWORD *)(v1 + 144) = v64;
      v111 = v16 + 8;
      v68 = -1;
      v69 = -1 << *((_BYTE *)v16 + 32);
      if (-v69 < 64)
        v68 = ~(-1 << -(char)v69);
      v70 = v68 & v16[8];
      v113 = (unint64_t)(63 - v69) >> 6;
      swift_bridgeObjectRetain();
      v71 = 0;
      if (v70)
      {
LABEL_38:
        v72 = __clz(__rbit64(v70));
        v70 &= v70 - 1;
        v73 = v72 | (v71 << 6);
        goto LABEL_53;
      }
      while (1)
      {
        v74 = v71 + 1;
        if (__OFADD__(v71, 1))
        {
          __break(1u);
          goto LABEL_59;
        }
        if (v74 >= v113)
          goto LABEL_57;
        v75 = v111[v74];
        ++v71;
        if (!v75)
        {
          v71 = v74 + 1;
          if (v74 + 1 >= v113)
            goto LABEL_57;
          v75 = v111[v71];
          if (!v75)
          {
            v71 = v74 + 2;
            if (v74 + 2 >= v113)
              goto LABEL_57;
            v75 = v111[v71];
            if (!v75)
            {
              v76 = v74 + 3;
              if (v76 >= v113)
              {
LABEL_57:
                v88 = swift_release();
                sub_1BE9EDDBC(v88, &qword_1EF570790);
                swift_bridgeObjectRetain();
                sub_1BE9E6908();
                v90 = v89;
                v110[42] = v89;
                type metadata accessor for CKLogParser.StreamState();
                v91 = (_QWORD *)sub_1BE9B69EC();
                v110[43] = v91;
                v92 = MEMORY[0x1E0DEE9E0];
                v91[2] = MEMORY[0x1E0DEE9E0];
                v91[3] = v92;
                v91[4] = 0;
                v91[5] = 0;
                v93 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
                v94 = sub_1BE9EA5F0(0xD000000000000017, 0x80000001BECBD830, 0);
                v110[44] = v94;
                v110[45] = 0;
                v95 = v94;
                v97 = v110[28];
                v96 = v110[29];
                v98 = v110[26];
                v99 = v110[27];
                v119 = v110[25];
                v117 = *(_OWORD *)(v110 + 23);
                v100 = (void *)v110[23];
                objc_msgSend(v100, sel_setFlags_, 391);
                sub_1BE9EDDBC((uint64_t)objc_msgSend(v100, sel_setFilterPredicate_, v90), &qword_1EF570798);
                (*(void (**)(uint64_t, _QWORD, uint64_t))(v97 + 104))(v96, *MEMORY[0x1E0DEF530], v99);
                v101 = (void *)static OS_dispatch_queue.global(qos:)();
                v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 8))(v96, v99);
                sub_1BE9EDE2C(v102, sel_setQueue_);

                v103 = (_QWORD *)sub_1BE9B69EC();
                v103[2] = v91;
                v103[3] = v98;
                v103[4] = v95;
                v110[13] = sub_1BE9ED05C;
                v110[14] = v103;
                v110[9] = MEMORY[0x1E0C809B0];
                v110[10] = 1107296256;
                v110[11] = sub_1BE9E7074;
                v110[12] = &unk_1E782D168;
                v104 = _Block_copy(v110 + 9);
                swift_retain();
                swift_retain();
                v105 = v95;
                v106 = swift_release();
                sub_1BE9EDE2C(v106, sel_setEventHandler_);
                _Block_release(v104);
                sub_1BE9ED080(&qword_1EF5707A0, v107, (uint64_t (*)(uint64_t))type metadata accessor for CKLogParser, (uint64_t)&protocol conformance descriptor for CKLogParser);
                v108 = swift_task_alloc();
                v110[46] = v108;
                *(_OWORD *)(v108 + 16) = v117;
                *(_QWORD *)(v108 + 32) = v119;
                v109 = (_QWORD *)swift_task_alloc();
                v110[47] = v109;
                *v109 = v110;
                v109[1] = sub_1BE9E6328;
                sub_1BE9EDDD4();
                return withCheckedContinuation<A>(isolation:function:_:)();
              }
              v75 = v111[v76];
              if (!v75)
              {
                while (1)
                {
                  v71 = v76 + 1;
                  if (__OFADD__(v76, 1))
                    goto LABEL_63;
                  if (v71 >= v113)
                    goto LABEL_57;
                  v75 = v111[v71];
                  ++v76;
                  if (v75)
                    goto LABEL_52;
                }
              }
              v71 = v76;
            }
          }
        }
LABEL_52:
        v70 = (v75 - 1) & v75;
        v73 = __clz(__rbit64(v75)) + (v71 << 6);
LABEL_53:
        v77 = (uint64_t *)(v16[6] + 16 * v73);
        v78 = *v77;
        v79 = (void *)v77[1];
        swift_bridgeObjectRetain();
        v80 = swift_bridgeObjectRetain();
        sub_1BE9E4BDC(v80);
        sub_1BE9BDA80();
        sub_1BE9ECFF0(0, &qword_1EF570790);
        sub_1BE9E6908();
        v3 = v81;
        v1 = sub_1BE9B69EC();
        *(_OWORD *)(v1 + 16) = xmmword_1BECB9A00;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        v82._countAndFlagsBits = v78;
        v82._object = v79;
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        v83._countAndFlagsBits = 39;
        v83._object = (void *)0xE100000000000000;
        String.append(_:)(v83);
        v84 = NSPredicate.init(format:_:)();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v1 + 32) = v84;
        *(_QWORD *)(v1 + 40) = v3;
        specialized Array._endMutation()();
        v85 = (id)v3;
        sub_1BE9E6908();
        v87 = v86;
        MEMORY[0x1C3B823C0]();
        if (*(_QWORD *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        if (v70)
          goto LABEL_38;
      }
    }
  }
  v56 = sub_1BE9EDE00(v118);
  if ((v54 & 1) == (v57 & 1))
  {
    v53 = v56;
    goto LABEL_28;
  }
LABEL_34:
  sub_1BE9EDDD4();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1BE9E6328()
{
  sub_1BE9BDB34();
  sub_1BE9B69AC();
  sub_1BE9E14D4();
  return sub_1BE9BE324();
}

uint64_t sub_1BE9E6368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36[2];

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 344);
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 16);
  sub_1BE9BDB4C();
  v4 = sub_1BE9EAEDC(v3);
  sub_1BE9BDA80();
  v36[0] = v4;
  sub_1BE9EAE5C((uint64_t *)v36);
  if (v1)
    return swift_release();
  v6 = *(_QWORD *)(v0 + 344);
  sub_1BE9BDA80();
  v7 = v36[0];
  v8 = *(_QWORD *)(v6 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + 32);
    sub_1BE9BDB4C();
    v10 = sub_1BE9E4DA4(v7, v9, v8);
    swift_release();
    sub_1BE9BDA80();
    v7 = v10;
  }
  v12 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRelease();
  Date.init()();
  CKLog.getter();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v17(v13, v12, v16);
  v17(v14, v11, v16);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  v35 = v7;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 264);
    v22 = (uint8_t *)sub_1BE9BE304();
    *(_DWORD *)v22 = 134217984;
    Date.timeIntervalSince(_:)();
    *(_QWORD *)(v0 + 160) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1BE9EDDF0(v20);
    sub_1BE9EDDF0(v21);
    sub_1BE9BDA88(&dword_1BE990000, v18, v19, "Parsing logs took %f seconds", v22);
    sub_1BE9BE6D4();
  }
  v24 = *(void **)(v0 + 336);
  v26 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 240);
  v28 = *(_QWORD *)(v0 + 248);

  v29 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v29(v25, v27);
  v29(v26, v27);
  sub_1BE9BEA14();

  v30 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v31 = *(_QWORD *)(v0 + 304);
  v33 = *(_QWORD *)(v0 + 280);
  v32 = *(_QWORD *)(v0 + 288);
  v34 = *(_QWORD *)(v0 + 272);

  v30(v31, v32);
  sub_1BE9EDDF0(v34);
  sub_1BE9EDDF0(v33);
  sub_1BE9BDA80();
  sub_1BE9EDDF8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v35);
}

void sub_1BE9E6670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, 1, v12) == 1)
  {
    sub_1BE9BEF00(a1, &qword_1EF570920);
    sub_1BE9EAD1C(a2, a3, (uint64_t)v8);
    swift_bridgeObjectRelease();
    sub_1BE9BEF00((uint64_t)v8, &qword_1EF570920);
  }
  else
  {
    sub_1BE9ED214(a1, (uint64_t)v11);
    sub_1BE9FAF1C((uint64_t)v11, a2, a3);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BE9E678C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  sub_1BE9ECFF0(0, &qword_1EF570790);
  swift_bridgeObjectRetain();
  sub_1BE9E6908();
  v5 = v4;
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    sub_1BE9BEF38(&qword_1EF570780);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1BECB9A00;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = a1;
    v8._object = (void *)a2;
    String.append(_:)(v8);
    sub_1BE9ECFF0(0, &qword_1EF570788);
    v9._countAndFlagsBits = 39;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10 = NSPredicate.init(format:_:)();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v7 + 40) = v5;
    specialized Array._endMutation()();
    sub_1BE9E6908();
    return v11;
  }
  return v5;
}

void sub_1BE9E6908()
{
  SEL *v0;
  void *v1;
  uint64_t v2;
  id v3;

  sub_1BE9C6C40();
  sub_1BE9EDDBC(v2, &qword_1EF570788);
  Array._bridgeToObjectiveC()();
  sub_1BE9EDE20();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), *v0, v1);

  sub_1BE9B6960();
}

uint64_t sub_1BE9E6974(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  uint64_t v57;
  void *v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _WORD v97[8];

  v7 = type metadata accessor for TimeZone();
  v90 = *(_QWORD *)(v7 - 8);
  v91 = v7;
  MEMORY[0x1E0C80A78](v7);
  v88 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v94);
  v92 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1BE9BEF38(&qword_1EF570920);
  v11 = MEMORY[0x1E0C80A78](v10);
  v89 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v72 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v72 - v16;
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BE9ED3F8(a1, (SEL *)&selRef_composedMessage);
  if (v23)
  {
    v24 = result;
    v25 = v23;
    v73 = a4;
    v78 = v19;
    v81 = v18;
    v93 = (id)sub_1BE9ED3F8(a1, (SEL *)&selRef_subsystem);
    v87 = v26;
    v27 = sub_1BE9ED3F8(a1, (SEL *)&selRef_category);
    v85 = v28;
    v86 = v27;
    v29 = sub_1BE9ED3F8(a1, (SEL *)&selRef_process);
    v83 = v30;
    v84 = v29;
    v31 = v25;
    v32 = v24;
    v82 = objc_msgSend(a1, sel_processIdentifier);
    v33 = objc_msgSend(a1, sel_activityIdentifier);
    v34 = objc_msgSend(a1, sel_date);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v74 = a2 + 24;
    swift_beginAccess();
    sub_1BE9F56B4((uint64_t)v33, *(_QWORD *)(a2 + 24));
    v36 = v35;
    v38 = v37;
    swift_endAccess();
    v76 = a2 + 16;
    swift_beginAccess();
    v80 = a2;
    v39 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    v79 = v38;
    v71 = v36;
    v40 = (uint64_t)v21;
    v41 = v31;
    v75 = v32;
    v77 = v40;
    v42 = v87;
    sub_1BE9E7298(v93, v87, v86, v85, v84, v83, v82, (uint64_t)v33, (uint64_t)v17, v40, v32, v31, v39, v71, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BE9EDA8C((uint64_t)v17, (uint64_t)v15, &qword_1EF570920);
    v43 = v94;
    v44 = (uint64_t)v17;
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v15, 1, v94) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1BE9BEF00((uint64_t)v15, &qword_1EF570920);
      v45 = v81;
      v46 = v80;
      v47 = v31;
    }
    else
    {
      v48 = (uint64_t)v15;
      v49 = v92;
      sub_1BE9ED214(v48, (uint64_t)v92);
      v50 = objc_msgSend(a1, sel_timeZone);
      v51 = v88;
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v90 + 40))((char *)v49 + *(int *)(v43 + 40), v51, v91);
      v52 = *v49;
      v53 = v49[1];
      v54 = v89;
      sub_1BE9E4B1C((uint64_t)v49, v89);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(v54, 0, 1, v43);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1BE9E6670(v54, v52, v53);
      swift_endAccess();
      if (v79)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_1BE9FAF10(v52, v53, (uint64_t)v33);
        swift_endAccess();
      }
      v45 = v81;
      v46 = v80;
      v47 = v41;
      sub_1BE9E4B60((uint64_t)v49);
    }
    if (*(_QWORD *)(v46 + 40))
    {
      swift_bridgeObjectRelease();
    }
    else if (v42)
    {
      if (v93 == (id)0x6C7070612E6D6F63 && v42 == 0xED000073766B2E65)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v56 & 1) == 0)
          goto LABEL_24;
      }
      v57 = v75;
      v95 = v75;
      v96 = v47;
      strcpy((char *)v97, "modifiedBy='");
      HIBYTE(v97[6]) = 0;
      v97[7] = -5120;
      sub_1BE9B7614();
      if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      {
        v58 = (void *)MEMORY[0x1C3B822A0](v57, v47);
        result = String.count.getter();
        if (result < 0)
        {
          __break(1u);
          return result;
        }
        v59 = objc_msgSend(v73, sel_firstMatchInString_options_range_, v58, 0, 0, result);

        if (v59)
        {
          if ((uint64_t)objc_msgSend(v59, sel_numberOfRanges) >= 2)
          {
            objc_msgSend(v59, sel_rangeAtIndex_, 1);
            Range<>.init(_:in:)();
            if ((v60 & 1) == 0)
            {
              v61 = String.subscript.getter();
              v63 = v62;
              v65 = v64;
              v67 = v66;
              swift_bridgeObjectRelease();
              v68 = MEMORY[0x1C3B82300](v61, v63, v65, v67);
              v70 = v69;

              swift_bridgeObjectRelease();
              sub_1BE9BEF00(v44, &qword_1EF570920);
              (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v45);
              *(_QWORD *)(v46 + 32) = v68;
              *(_QWORD *)(v46 + 40) = v70;
              return swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRelease();

          goto LABEL_25;
        }
      }
    }
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    sub_1BE9BEF00(v44, &qword_1EF570920);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v77, v45);
  }
  return result;
}

void sub_1BE9E7074(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_1BE9E70C4(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v6 = sub_1BE9BEF38(&qword_1EF570950);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1BE9EDA40;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BE9E7238;
  aBlock[3] = &unk_1E782D1B8;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_setInvalidationHandler_, v11);
  _Block_release(v11);
  return a3();
}

uint64_t sub_1BE9E7208()
{
  sub_1BE9BEF38(&qword_1EF570950);
  return CheckedContinuation.resume(returning:)();
}

void sub_1BE9E7238(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, id);
  id v6;

  v5 = *(void (**)(uint64_t, id))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, v6);
  swift_release();

}

void sub_1BE9E7298(id a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, id a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  id v26;
  char v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t);

  v48 = a8;
  v47 = a7;
  v45 = a5;
  v46 = a6;
  v51 = a3;
  v55 = a2;
  v18 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v18);
  v44 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF570050 != -1)
LABEL_27:
    swift_once();
  v20 = *((_QWORD *)off_1EF5704F0 + 2);
  if (v20)
  {
    v42 = a15;
    v43 = a10;
    v41 = a14;
    if (v55)
      v21 = (uint64_t)a1;
    else
      v21 = 0;
    v54 = v21;
    v22 = 0xE000000000000000;
    if (v55)
      v22 = v55;
    v52 = a4;
    v53 = v22;
    v49 = a12;
    v50 = a11;
    v39 = a9;
    v40 = a13;
    v38 = swift_bridgeObjectRetain();
    v23 = (_QWORD *)(v38 + 48);
    while (1)
    {
      v24 = v23[1];
      a1 = (id)v23[2];
      v25 = (void *)v23[3];
      a9 = v23[5];
      v56 = (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t))v23[4];
      a4 = (id)*(v23 - 2);
      sub_1BE9BDB4C();
      sub_1BE9B6980();
      v26 = v25;
      swift_retain();
      swift_bridgeObjectRetain();
      v27 = sub_1BE9E75A0();
      sub_1BE9C6C90();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0 || !v52)
        goto LABEL_20;
      v28 = v24 == v51 && a1 == v52;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_20;
      v29 = (void *)MEMORY[0x1C3B822A0](v50, v49);
      v30 = String.count.getter();
      if (v30 < 0)
      {
        __break(1u);
        goto LABEL_27;
      }
      v31 = objc_msgSend(a4, sel_firstMatchInString_options_range_, v29, 0, 0, v30, v38);

      if (v31)
      {
        v32 = (uint64_t)v44;
        v56(v45, v46, v47, v48, v43, v50, v49, v31, v40, v41, v42);

        sub_1BE9C6C90();
        sub_1BE9E1618();

        sub_1BE9BEA14();
        v33 = sub_1BE9BF468();
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v32, 1, v33) != 1)
        {
          swift_bridgeObjectRelease();
          v37 = v39;
          sub_1BE9ED214(v32, v39);
          v35 = v37;
          v36 = 0;
          v34 = v33;
          goto LABEL_24;
        }
        sub_1BE9BEF00(v32, &qword_1EF570920);
      }
      else
      {
LABEL_20:

        sub_1BE9C6C90();
        sub_1BE9E1618();

        sub_1BE9BEA14();
      }
      v23 += 8;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        a9 = v39;
        break;
      }
    }
  }
  v34 = sub_1BE9BF468();
  v35 = a9;
  v36 = 1;
LABEL_24:
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v35, v36, 1, v34);
  sub_1BE9BF404();
}

uint64_t sub_1BE9E75A0()
{
  Swift::String_optional v0;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v3;
  char v5;
  Swift::String_optional v6;
  void *v7;
  _BOOL8 v8;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    while (1)
    {
      v3 = String.Iterator.next()();
      if (!v3.value._object)
        break;
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v6 = String.Iterator.next()();
      countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v7 = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    v8 = v7 == 0;
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1BE9E76FC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;

  sub_1BE9BEF38(&qword_1EF570968);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BECB9A10;
  if (qword_1EF570058 != -1)
    swift_once();
  v1 = (void *)qword_1EF5704F8;
  v2 = unk_1EF570500;
  v4 = qword_1EF570508;
  v3 = unk_1EF570510;
  v5 = qword_1EF570518;
  v6 = qword_1EF570530;
  *(_QWORD *)(v0 + 32) = qword_1EF5704F8;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 64) = v5;
  v82 = (void *)unk_1EF570520;
  *(_OWORD *)(v0 + 72) = unk_1EF570520;
  *(_QWORD *)(v0 + 88) = v6;
  v7 = qword_1EF570060;
  v8 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v82;
  swift_retain();
  if (v7 != -1)
    swift_once();
  v10 = (void *)qword_1EF570538;
  v11 = unk_1EF570540;
  v13 = qword_1EF570548;
  v12 = unk_1EF570550;
  v14 = qword_1EF570558;
  v15 = qword_1EF570570;
  *(_QWORD *)(v0 + 96) = qword_1EF570538;
  *(_QWORD *)(v0 + 104) = v11;
  *(_QWORD *)(v0 + 112) = v13;
  *(_QWORD *)(v0 + 120) = v12;
  *(_QWORD *)(v0 + 128) = v14;
  v83 = (void *)unk_1EF570560;
  *(_OWORD *)(v0 + 136) = unk_1EF570560;
  *(_QWORD *)(v0 + 152) = v15;
  v16 = qword_1EF570068;
  v17 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v83;
  swift_retain();
  if (v16 != -1)
    swift_once();
  v19 = (void *)qword_1EF570578;
  v20 = unk_1EF570580;
  v22 = qword_1EF570588;
  v21 = unk_1EF570590;
  v23 = qword_1EF570598;
  v24 = qword_1EF5705B0;
  *(_QWORD *)(v0 + 160) = qword_1EF570578;
  *(_QWORD *)(v0 + 168) = v20;
  *(_QWORD *)(v0 + 176) = v22;
  *(_QWORD *)(v0 + 184) = v21;
  *(_QWORD *)(v0 + 192) = v23;
  v84 = (void *)unk_1EF5705A0;
  *(_OWORD *)(v0 + 200) = unk_1EF5705A0;
  *(_QWORD *)(v0 + 216) = v24;
  v25 = qword_1EF570070;
  v26 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = v84;
  swift_retain();
  if (v25 != -1)
    swift_once();
  v28 = (void *)qword_1EF5705B8;
  v29 = unk_1EF5705C0;
  v31 = qword_1EF5705C8;
  v30 = unk_1EF5705D0;
  v32 = qword_1EF5705D8;
  v33 = qword_1EF5705F0;
  *(_QWORD *)(v0 + 224) = qword_1EF5705B8;
  *(_QWORD *)(v0 + 232) = v29;
  *(_QWORD *)(v0 + 240) = v31;
  *(_QWORD *)(v0 + 248) = v30;
  *(_QWORD *)(v0 + 256) = v32;
  v85 = (void *)unk_1EF5705E0;
  *(_OWORD *)(v0 + 264) = unk_1EF5705E0;
  *(_QWORD *)(v0 + 280) = v33;
  v34 = qword_1EF570078;
  v35 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = v85;
  swift_retain();
  if (v34 != -1)
    swift_once();
  v37 = (void *)qword_1EF5705F8;
  v38 = unk_1EF570600;
  v40 = qword_1EF570608;
  v39 = unk_1EF570610;
  v41 = qword_1EF570618;
  v42 = qword_1EF570630;
  *(_QWORD *)(v0 + 288) = qword_1EF5705F8;
  *(_QWORD *)(v0 + 296) = v38;
  *(_QWORD *)(v0 + 304) = v40;
  *(_QWORD *)(v0 + 312) = v39;
  *(_QWORD *)(v0 + 320) = v41;
  v86 = (void *)unk_1EF570620;
  *(_OWORD *)(v0 + 328) = unk_1EF570620;
  *(_QWORD *)(v0 + 344) = v42;
  v43 = qword_1EF570080;
  v44 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = v86;
  swift_retain();
  if (v43 != -1)
    swift_once();
  v46 = (void *)qword_1EF570638;
  v47 = unk_1EF570640;
  v49 = qword_1EF570648;
  v48 = unk_1EF570650;
  v50 = qword_1EF570658;
  v51 = qword_1EF570670;
  *(_QWORD *)(v0 + 352) = qword_1EF570638;
  *(_QWORD *)(v0 + 360) = v47;
  *(_QWORD *)(v0 + 368) = v49;
  *(_QWORD *)(v0 + 376) = v48;
  *(_QWORD *)(v0 + 384) = v50;
  v87 = (void *)unk_1EF570660;
  *(_OWORD *)(v0 + 392) = unk_1EF570660;
  *(_QWORD *)(v0 + 408) = v51;
  v52 = qword_1EF570088;
  v53 = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = v87;
  swift_retain();
  if (v52 != -1)
    swift_once();
  v55 = (void *)qword_1EF570678;
  v56 = unk_1EF570680;
  v58 = qword_1EF570688;
  v57 = unk_1EF570690;
  v59 = qword_1EF570698;
  v60 = qword_1EF5706B0;
  *(_QWORD *)(v0 + 416) = qword_1EF570678;
  *(_QWORD *)(v0 + 424) = v56;
  *(_QWORD *)(v0 + 432) = v58;
  *(_QWORD *)(v0 + 440) = v57;
  *(_QWORD *)(v0 + 448) = v59;
  v88 = (void *)unk_1EF5706A0;
  *(_OWORD *)(v0 + 456) = unk_1EF5706A0;
  *(_QWORD *)(v0 + 472) = v60;
  v61 = qword_1EF5700A0;
  v62 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = v88;
  swift_retain();
  if (v61 != -1)
    swift_once();
  v64 = (void *)qword_1EF570700;
  v65 = *(_QWORD *)algn_1EF570708;
  v67 = qword_1EF570710;
  v66 = unk_1EF570718;
  v68 = qword_1EF570720;
  v69 = qword_1EF570738;
  *(_QWORD *)(v0 + 480) = qword_1EF570700;
  *(_QWORD *)(v0 + 488) = v65;
  *(_QWORD *)(v0 + 496) = v67;
  *(_QWORD *)(v0 + 504) = v66;
  *(_QWORD *)(v0 + 512) = v68;
  v89 = (void *)unk_1EF570728;
  *(_OWORD *)(v0 + 520) = unk_1EF570728;
  *(_QWORD *)(v0 + 536) = v69;
  v70 = qword_1EF570090;
  v71 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = v89;
  swift_retain();
  if (v70 != -1)
    swift_once();
  v73 = (void *)qword_1EF5706B8;
  v74 = unk_1EF5706C0;
  v76 = qword_1EF5706C8;
  v75 = unk_1EF5706D0;
  v77 = qword_1EF5706D8;
  v78 = qword_1EF5706F0;
  *(_QWORD *)(v0 + 544) = qword_1EF5706B8;
  *(_QWORD *)(v0 + 552) = v74;
  *(_QWORD *)(v0 + 560) = v76;
  *(_QWORD *)(v0 + 568) = v75;
  *(_QWORD *)(v0 + 576) = v77;
  v90 = (void *)unk_1EF5706E0;
  *(_OWORD *)(v0 + 584) = unk_1EF5706E0;
  *(_QWORD *)(v0 + 600) = v78;
  off_1EF5704F0 = (_UNKNOWN *)v0;
  v79 = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80 = v90;
  return swift_retain();
}

uint64_t sub_1BE9E7C08()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD000000000000056, 0x80000001BECBDEC0, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF5704F8 = (uint64_t)v1;
  unk_1EF570500 = 0xD000000000000012;
  qword_1EF570508 = 0x80000001BECBDA30;
  unk_1EF570510 = 20559;
  qword_1EF570518 = 0xE200000000000000;
  unk_1EF570520 = result;
  qword_1EF570528 = (uint64_t)sub_1BE9E7D08;
  qword_1EF570530 = 0;
  return result;
}

uint64_t sub_1BE9E7D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v57 = a4;
  v12 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v12);
  v58 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v61 = a1;
    v62 = a2;
    v59 = 0x6464756F6C63;
    v60 = 0xE600000000000000;
    sub_1BE9B7614();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  if ((uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 4)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  v54 = a1;
  v56 = a3;
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  v55 = Range<>.init(_:in:)();
  if ((v17 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  objc_msgSend(a5, sel_rangeAtIndex_, 2);
  v18 = Range<>.init(_:in:)();
  v52 = v19;
  v53 = v18;
  if ((v20 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  objc_msgSend(a5, sel_rangeAtIndex_, 3);
  Range<>.init(_:in:)();
  if ((v22 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  v49 = v21;
  v50 = a7;
  v23 = String.subscript.getter();
  v55 = MEMORY[0x1C3B82300](v23);
  v51 = v24;
  swift_bridgeObjectRelease();
  v25 = String.subscript.getter();
  v26 = MEMORY[0x1C3B82300](v25);
  v28 = v27;
  swift_bridgeObjectRelease();
  v29 = String.subscript.getter();
  v30 = MEMORY[0x1C3B82300](v29);
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v33 = v58;
  sub_1BE9F56F0(v26, v28, v50, v58);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v33, 1, (uint64_t)v14) == 1)
  {
    v34 = (uint64_t)&v16[v14[8]];
    v35 = v26;
    v36 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v34, 1, 1, v36);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v36);
    static TimeZone.current.getter();
    *(_QWORD *)v16 = v35;
    *((_QWORD *)v16 + 1) = v28;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0xE000000000000000;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 5) = 0xE000000000000000;
    *((_DWORD *)v16 + 12) = 0;
    v37 = &v16[v14[11]];
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0xE000000000000000;
    v38 = &v16[v14[12]];
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0xE000000000000000;
    v39 = &v16[v14[13]];
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0xE000000000000000;
    v40 = &v16[v14[14]];
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0xE000000000000000;
    v41 = &v16[v14[15]];
    *(_QWORD *)v41 = 0;
    *((_QWORD *)v41 + 1) = 0xE000000000000000;
    sub_1BE9BEF00(v58, &qword_1EF570920);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BE9ED214(v33, (uint64_t)v16);
  }
  v43 = v56;
  v44 = (uint64_t *)&v16[v14[11]];
  swift_bridgeObjectRelease();
  v45 = v51;
  *v44 = v55;
  v44[1] = v45;
  v46 = (uint64_t *)&v16[v14[13]];
  swift_bridgeObjectRelease();
  *v46 = v30;
  v46[1] = v32;
  v47 = (uint64_t)&v16[v14[8]];
  sub_1BE9BEF00(v47, (uint64_t *)&unk_1EF570DB0);
  v48 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v47, v57, v48);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v47, 0, 1, v48);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v16 + 4) = v54;
    *((_QWORD *)v16 + 5) = a2;
    *((_DWORD *)v16 + 12) = v43;
  }
  sub_1BE9E4B1C((uint64_t)v16, a6);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 0, 1, (uint64_t)v14);
  return sub_1BE9E4B60((uint64_t)v16);
}

uint64_t sub_1BE9E813C()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD000000000000056, 0x80000001BECBDE30, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF570538 = (uint64_t)v1;
  unk_1EF570540 = 0xD000000000000012;
  qword_1EF570548 = 0x80000001BECBDA30;
  unk_1EF570550 = 20559;
  qword_1EF570558 = 0xE200000000000000;
  unk_1EF570560 = result;
  qword_1EF570568 = (uint64_t)sub_1BE9E823C;
  qword_1EF570570 = 0;
  return result;
}

uint64_t sub_1BE9E823C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a4;
  v12 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v12);
  v56 = (uint64_t)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v59 = a1;
    v60 = a2;
    v57 = 0x6464756F6C63;
    v58 = 0xE600000000000000;
    sub_1BE9B7614();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  if ((uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 4)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  v52 = a1;
  v54 = a3;
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  v53 = Range<>.init(_:in:)();
  if ((v17 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  objc_msgSend(a5, sel_rangeAtIndex_, 2);
  Range<>.init(_:in:)();
  v51 = v18;
  if ((v19 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  objc_msgSend(a5, sel_rangeAtIndex_, 3);
  Range<>.init(_:in:)();
  if ((v21 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  v48[1] = v20;
  v49 = a7;
  v22 = String.subscript.getter();
  v53 = MEMORY[0x1C3B82300](v22);
  v50 = v23;
  swift_bridgeObjectRelease();
  v24 = String.subscript.getter();
  v25 = MEMORY[0x1C3B82300](v24);
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = String.subscript.getter();
  v29 = MEMORY[0x1C3B82300](v28);
  v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32 = v56;
  sub_1BE9F56F0(v25, v27, v49, v56);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v32, 1, (uint64_t)v14) == 1)
  {
    v33 = (uint64_t)&v16[v14[8]];
    v34 = v25;
    v35 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v33, 1, 1, v35);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v35);
    static TimeZone.current.getter();
    *(_QWORD *)v16 = v34;
    *((_QWORD *)v16 + 1) = v27;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0xE000000000000000;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 5) = 0xE000000000000000;
    *((_DWORD *)v16 + 12) = 0;
    v36 = &v16[v14[11]];
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0xE000000000000000;
    v37 = &v16[v14[12]];
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0xE000000000000000;
    v38 = &v16[v14[13]];
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0xE000000000000000;
    v39 = &v16[v14[14]];
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0xE000000000000000;
    v40 = &v16[v14[15]];
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0xE000000000000000;
    sub_1BE9BEF00(v56, &qword_1EF570920);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BE9ED214(v32, (uint64_t)v16);
  }
  v42 = v54;
  v43 = (uint64_t *)&v16[v14[11]];
  swift_bridgeObjectRelease();
  v44 = v50;
  *v43 = v53;
  v43[1] = v44;
  v45 = (uint64_t *)&v16[v14[13]];
  swift_bridgeObjectRelease();
  *v45 = v29;
  v45[1] = v31;
  v46 = (uint64_t)&v16[v14[8]];
  sub_1BE9BEF00(v46, (uint64_t *)&unk_1EF570DB0);
  v47 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v46, v55, v47);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v46, 0, 1, v47);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v16 + 4) = v52;
    *((_QWORD *)v16 + 5) = a2;
    *((_DWORD *)v16 + 12) = v42;
  }
  sub_1BE9E4B1C((uint64_t)v16, a6);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 0, 1, (uint64_t)v14);
  return sub_1BE9E4B60((uint64_t)v16);
}

uint64_t sub_1BE9E8678()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD00000000000003DLL, 0x80000001BECBDDC0, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF570578 = (uint64_t)v1;
  unk_1EF570580 = 0xD000000000000012;
  qword_1EF570588 = 0x80000001BECBDA30;
  unk_1EF570590 = 20559;
  qword_1EF570598 = 0xE200000000000000;
  unk_1EF5705A0 = result;
  qword_1EF5705A8 = (uint64_t)sub_1BE9E8774;
  qword_1EF5705B0 = 0;
  return result;
}

uint64_t sub_1BE9E8774@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  v23 = a3;
  objc_msgSend(a1, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v11 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  objc_msgSend(a1, sel_rangeAtIndex_, 2);
  Range<>.init(_:in:)();
  if ((v12 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  v13 = String.subscript.getter();
  v22 = MEMORY[0x1C3B82300](v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = String.subscript.getter();
  v17 = MEMORY[0x1C3B82300](v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  sub_1BE9F56F0(v22, v15, v23, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1BE9BEF00((uint64_t)v7, &qword_1EF570920);
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  }
  else
  {
    sub_1BE9ED214((uint64_t)v7, (uint64_t)v10);
    v21 = (uint64_t *)&v10[*(int *)(v8 + 48)];
    swift_bridgeObjectRelease();
    *v21 = v17;
    v21[1] = v19;
    sub_1BE9E4B1C((uint64_t)v10, a2);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 0, 1, v8);
    return sub_1BE9E4B60((uint64_t)v10);
  }
}

uint64_t sub_1BE9E89D8()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD00000000000003BLL, 0x80000001BECBDD50, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF5705B8 = (uint64_t)v1;
  unk_1EF5705C0 = 0xD000000000000012;
  qword_1EF5705C8 = 0x80000001BECBDA30;
  unk_1EF5705D0 = 20559;
  qword_1EF5705D8 = 0xE200000000000000;
  unk_1EF5705E0 = result;
  qword_1EF5705E8 = (uint64_t)sub_1BE9E8AD8;
  qword_1EF5705F0 = 0;
  return result;
}

uint64_t sub_1BE9E8AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v51 = a4;
  v12 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v12);
  v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2
    && (v55 = a1,
        v56 = a2,
        v53 = 0x6464756F6C63,
        v54 = 0xE600000000000000,
        sub_1BE9B7614(),
        (StringProtocol.contains<A>(_:)() & 1) != 0)
    || (uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 3)
  {
    v17 = a6;
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v17, 1, 1, (uint64_t)v14);
  }
  v48 = a1;
  v49 = a3;
  v50 = a6;
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v18 & 1) != 0 || (objc_msgSend(a5, sel_rangeAtIndex_, 2), Range<>.init(_:in:)(), (v19 & 1) != 0))
  {
    v17 = v50;
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v17, 1, 1, (uint64_t)v14);
  }
  v47 = a7;
  v20 = String.subscript.getter();
  v21 = MEMORY[0x1C3B82300](v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  v24 = String.subscript.getter();
  v25 = MEMORY[0x1C3B82300](v24);
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v28 = v52;
  sub_1BE9F56F0(v25, v27, v47, v52);
  swift_bridgeObjectRelease();
  v29 = v21;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, (uint64_t)v14) == 1)
  {
    v30 = (uint64_t)&v16[v14[8]];
    v31 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v30, 1, 1, v31);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v31);
    static TimeZone.current.getter();
    *(_QWORD *)v16 = v25;
    *((_QWORD *)v16 + 1) = v27;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0xE000000000000000;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 5) = 0xE000000000000000;
    *((_DWORD *)v16 + 12) = 0;
    v32 = &v16[v14[11]];
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0xE000000000000000;
    v33 = &v16[v14[12]];
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0xE000000000000000;
    v34 = &v16[v14[13]];
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0xE000000000000000;
    v35 = &v16[v14[14]];
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0xE000000000000000;
    v36 = &v16[v14[15]];
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0xE000000000000000;
    sub_1BE9BEF00(v28, &qword_1EF570920);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BE9ED214(v28, (uint64_t)v16);
  }
  v39 = v50;
  v38 = v51;
  v40 = (uint64_t)&v16[v14[9]];
  sub_1BE9BEF00(v40, (uint64_t *)&unk_1EF570DB0);
  v41 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v40, v38, v41);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v40, 0, 1, v41);
  v42 = &v16[v14[11]];
  v43 = *((_QWORD *)v42 + 1);
  v44 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFLL;
  if ((v43 & 0x2000000000000000) != 0)
    v44 = HIBYTE(v43) & 0xF;
  if (v44)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)v42 = v29;
    *((_QWORD *)v42 + 1) = v23;
  }
  v45 = *((_QWORD *)v16 + 5);
  v46 = *((_QWORD *)v16 + 4) & 0xFFFFFFFFFFFFLL;
  if ((v45 & 0x2000000000000000) != 0)
    v46 = HIBYTE(v45) & 0xF;
  if (a2)
  {
    if (!v46)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v16 + 4) = v48;
      *((_QWORD *)v16 + 5) = a2;
      *((_DWORD *)v16 + 12) = v49;
    }
  }
  sub_1BE9E4B1C((uint64_t)v16, v39);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v39, 0, 1, (uint64_t)v14);
  return sub_1BE9E4B60((uint64_t)v16);
}

uint64_t sub_1BE9E8EEC()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD000000000000035, 0x80000001BECBDCD0, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF5705F8 = (uint64_t)v1;
  unk_1EF570600 = 0xD000000000000012;
  qword_1EF570608 = 0x80000001BECBDA30;
  unk_1EF570610 = 19267;
  qword_1EF570618 = 0xE200000000000000;
  unk_1EF570620 = result;
  qword_1EF570628 = (uint64_t)sub_1BE9E8FF4;
  qword_1EF570630 = 0;
  return result;
}

uint64_t sub_1BE9E8FF4@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  v32 = a3;
  objc_msgSend(a1, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v11 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  objc_msgSend(a1, sel_rangeAtIndex_, 2);
  Range<>.init(_:in:)();
  if ((v12 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  v13 = String.subscript.getter();
  v14 = MEMORY[0x1C3B82300](v13);
  v16 = v15;
  v17 = v14;
  swift_bridgeObjectRelease();
  v18 = String.subscript.getter();
  v19 = MEMORY[0x1C3B82300](v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BE9F56F0(v17, v16, v32, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, (uint64_t)v8) == 1)
  {
    v22 = (uint64_t)&v10[v8[8]];
    v23 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v22, 1, 1, v23);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v10[v8[9]], 1, 1, v23);
    static TimeZone.current.getter();
    *(_QWORD *)v10 = v17;
    *((_QWORD *)v10 + 1) = v16;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0xE000000000000000;
    *((_QWORD *)v10 + 4) = 0;
    *((_QWORD *)v10 + 5) = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v24 = &v10[v8[11]];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0xE000000000000000;
    v25 = &v10[v8[12]];
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0xE000000000000000;
    v26 = &v10[v8[13]];
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0xE000000000000000;
    v27 = &v10[v8[14]];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0xE000000000000000;
    v28 = &v10[v8[15]];
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0xE000000000000000;
    sub_1BE9BEF00((uint64_t)v7, &qword_1EF570920);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BE9ED214((uint64_t)v7, (uint64_t)v10);
  }
  v30 = (uint64_t *)&v10[v8[14]];
  swift_bridgeObjectRelease();
  *v30 = v19;
  v30[1] = v21;
  sub_1BE9E4B1C((uint64_t)v10, a2);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 0, 1, (uint64_t)v8);
  return sub_1BE9E4B60((uint64_t)v10);
}

uint64_t sub_1BE9E92F0()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD00000000000002ELL, 0x80000001BECBDC60, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF570638 = (uint64_t)v1;
  unk_1EF570640 = 0xD000000000000012;
  qword_1EF570648 = 0x80000001BECBDA30;
  unk_1EF570650 = 19267;
  qword_1EF570658 = 0xE200000000000000;
  unk_1EF570660 = result;
  qword_1EF570668 = (uint64_t)sub_1BE9E93EC;
  qword_1EF570670 = 0;
  return result;
}

uint64_t sub_1BE9E93EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v30;
  _QWORD v31[4];

  v11 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v31[2] = a1;
    v31[3] = a2;
    v31[0] = 0x6464756F6C63;
    v31[1] = 0xE600000000000000;
    sub_1BE9B7614();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
  }
  if ((uint64_t)objc_msgSend(a3, sel_numberOfRanges) < 2)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
  objc_msgSend(a3, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v17 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
  v18 = String.subscript.getter();
  v19 = MEMORY[0x1C3B82300](v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  if (a7)
  {
    swift_bridgeObjectRetain();
    sub_1BE9F56F0(a6, a7, a5, (uint64_t)v13);
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v13, 1, (uint64_t)v14) == 1)
    {
      v22 = (uint64_t)&v16[v14[8]];
      v23 = type metadata accessor for Date();
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(v22, 1, 1, v23);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v23);
      static TimeZone.current.getter();
      *(_QWORD *)v16 = a6;
      *((_QWORD *)v16 + 1) = a7;
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = 0xE000000000000000;
      *((_QWORD *)v16 + 4) = 0;
      *((_QWORD *)v16 + 5) = 0xE000000000000000;
      *((_DWORD *)v16 + 12) = 0;
      v24 = &v16[v14[11]];
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0xE000000000000000;
      v25 = &v16[v14[12]];
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0xE000000000000000;
      v26 = &v16[v14[13]];
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0xE000000000000000;
      v27 = &v16[v14[14]];
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0xE000000000000000;
      v28 = &v16[v14[15]];
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0xE000000000000000;
      sub_1BE9BEF00((uint64_t)v13, &qword_1EF570920);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1BE9ED214((uint64_t)v13, (uint64_t)v16);
    }
    v30 = (uint64_t *)&v16[v14[14]];
    swift_bridgeObjectRelease();
    *v30 = v19;
    v30[1] = v21;
    sub_1BE9E4B1C((uint64_t)v16, a4);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 0, 1, (uint64_t)v14);
    return sub_1BE9E4B60((uint64_t)v16);
  }
  else
  {
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BE9E96D0()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD00000000000006FLL, 0x80000001BECBDBD0, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF570678 = (uint64_t)v1;
  unk_1EF570680 = 0xD000000000000012;
  qword_1EF570688 = 0x80000001BECBDA30;
  unk_1EF570690 = 19267;
  qword_1EF570698 = 0xE200000000000000;
  unk_1EF5706A0 = result;
  qword_1EF5706A8 = (uint64_t)sub_1BE9E97CC;
  qword_1EF5706B0 = 0;
  return result;
}

uint64_t sub_1BE9E97CC@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  v42 = v7;
  v43 = a3;
  objc_msgSend(a1, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v11 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  objc_msgSend(a1, sel_rangeAtIndex_, 2);
  Range<>.init(_:in:)();
  if ((v13 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  v41[0] = a2;
  v41[1] = v12;
  v14 = String.subscript.getter();
  v15 = MEMORY[0x1C3B82300](v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  v44 = v15;
  v45 = v17;
  v18 = String.subscript.getter();
  v19 = MEMORY[0x1C3B82300](v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) >= 4)
  {
    objc_msgSend(a1, sel_rangeAtIndex_, 3);
    Range<>.init(_:in:)();
    if ((v22 & 1) == 0)
    {
      v23 = String.subscript.getter();
      v24 = MEMORY[0x1C3B82300](v23);
      v26 = v25;
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  v28 = (uint64_t)v42;
  sub_1BE9F56F0(v19, v21, v43, (uint64_t)v42);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, (uint64_t)v8) == 1)
  {
    v29 = (uint64_t)&v10[v8[8]];
    v30 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v29, 1, 1, v30);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v10[v8[9]], 1, 1, v30);
    static TimeZone.current.getter();
    *(_QWORD *)v10 = v19;
    *((_QWORD *)v10 + 1) = v21;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0xE000000000000000;
    *((_QWORD *)v10 + 4) = 0;
    *((_QWORD *)v10 + 5) = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v31 = &v10[v8[11]];
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0xE000000000000000;
    v32 = &v10[v8[12]];
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0xE000000000000000;
    v33 = &v10[v8[13]];
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0xE000000000000000;
    v34 = &v10[v8[14]];
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0xE000000000000000;
    v35 = &v10[v8[15]];
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0xE000000000000000;
    sub_1BE9BEF00(v28, &qword_1EF570920);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BE9ED214(v28, (uint64_t)v10);
  }
  v37 = v41[0];
  v38 = v44;
  v39 = v45;
  v40 = &v10[v8[14]];
  swift_bridgeObjectRelease();
  *(_QWORD *)v40 = v38;
  *((_QWORD *)v40 + 1) = v39;
  sub_1BE9E4B1C((uint64_t)v10, v37);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v37, 0, 1, (uint64_t)v8);
  return sub_1BE9E4B60((uint64_t)v10);
}

uint64_t sub_1BE9E9B44()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD000000000000030, 0x80000001BECBD9F0, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF5706B8 = (uint64_t)v1;
  unk_1EF5706C0 = 0xD000000000000012;
  qword_1EF5706C8 = 0x80000001BECBDA30;
  unk_1EF5706D0 = 19267;
  qword_1EF5706D8 = 0xE200000000000000;
  unk_1EF5706E0 = result;
  qword_1EF5706E8 = (uint64_t)sub_1BE9E9C40;
  qword_1EF5706F0 = 0;
  return result;
}

uint64_t sub_1BE9E9C40@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;

  v5 = sub_1BE9BEF38(&qword_1EF570920);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  v25 = a3;
  objc_msgSend(a1, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v11 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  objc_msgSend(a1, sel_rangeAtIndex_, 2);
  Range<>.init(_:in:)();
  if ((v12 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  v13 = String.subscript.getter();
  v24 = MEMORY[0x1C3B82300](v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = String.subscript.getter();
  v17 = MEMORY[0x1C3B82300](v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  sub_1BE9F56F0(v24, v15, v25, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1BE9BEF00((uint64_t)v7, &qword_1EF570920);
    v20 = a2;
    v21 = 1;
  }
  else
  {
    sub_1BE9ED214((uint64_t)v7, (uint64_t)v10);
    v26._countAndFlagsBits = v17;
    v26._object = v19;
    v23._countAndFlagsBits = 10;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    sub_1BE9ED214((uint64_t)v10, a2);
    v20 = a2;
    v21 = 0;
  }
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v20, v21, 1, v8);
}

id sub_1BE9E9EAC()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  result = sub_1BE9EA5F0(0xD000000000000042, 0x80000001BECBDB80, 0);
  qword_1EF5706F8 = (uint64_t)result;
  return result;
}

uint64_t sub_1BE9E9F34()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v1 = sub_1BE9EA5F0(0xD000000000000043, 0x80000001BECBDA80, 0);
  sub_1BE9ECFF0(0, &qword_1EF570788);
  result = NSPredicate.init(format:_:)();
  qword_1EF570700 = (uint64_t)v1;
  strcpy(algn_1EF570708, "com.apple.apsd");
  HIBYTE(qword_1EF570710) = -18;
  unk_1EF570718 = 0x697463656E6E6F63;
  qword_1EF570720 = 0xEA00000000006E6FLL;
  unk_1EF570728 = result;
  qword_1EF570730 = (uint64_t)sub_1BE9EA054;
  qword_1EF570738 = 0;
  return result;
}

uint64_t sub_1BE9EA054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>)
{
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t result;
  void *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v61 = a2;
  v62 = a4;
  v60 = a3;
  v59 = a1;
  v8 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 2)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v8);
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if ((v15 & 1) != 0)
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v8);
  v57 = a6;
  v16 = String.subscript.getter();
  v17 = MEMORY[0x1C3B82300](v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  if (qword_1EF570098 != -1)
    swift_once();
  v20 = (void *)qword_1EF5706F8;
  v21 = (void *)MEMORY[0x1C3B822A0](v17, v19);
  v58 = v19;
  v22 = String.count.getter();
  if (v22 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v23 = objc_msgSend(v20, sel_firstMatchInString_options_range_, v21, 0, 0, v22);

  v56 = v17;
  if (!v23)
  {
    UUID.init()();
    v24 = UUID.uuidString.getter();
    v26 = v28;
    goto LABEL_11;
  }
  if ((uint64_t)objc_msgSend(v23, sel_numberOfRanges) >= 4)
  {
    objc_msgSend(v23, sel_rangeAtIndex_, 1);
    Range<>.init(_:in:)();
    if ((v30 & 1) == 0)
    {
      v31 = String.subscript.getter();
      v54 = MEMORY[0x1C3B82300](v31);
      v33 = v32;
      swift_bridgeObjectRelease();
      objc_msgSend(v23, sel_rangeAtIndex_, 2);
      Range<>.init(_:in:)();
      if ((v34 & 1) == 0)
      {
        v35 = String.subscript.getter();
        v24 = MEMORY[0x1C3B82300](v35);
        v26 = v36;
        swift_bridgeObjectRelease();
        objc_msgSend(v23, sel_rangeAtIndex_, 3);
        Range<>.init(_:in:)();
        if ((v37 & 1) == 0)
        {
          v29 = v33;
          v38 = String.subscript.getter();
          v53 = MEMORY[0x1C3B82300](v38);
          v55 = v39;
          swift_bridgeObjectRelease();

          goto LABEL_16;
        }
LABEL_26:
        result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  UUID.init()();
  v24 = UUID.uuidString.getter();
  v26 = v25;

LABEL_11:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v29 = 0;
LABEL_16:
  v63 = 0;
  v64 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v40._countAndFlagsBits = v24;
  v40._object = v26;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = (uint64_t)&v10[v8[8]];
  v42 = type metadata accessor for Date();
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v41, 1, 1, v42);
  v43 = (uint64_t)&v10[v8[9]];
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v43, 1, 1, v42);
  static TimeZone.current.getter();
  *(_QWORD *)v10 = v24;
  *((_QWORD *)v10 + 1) = v26;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0xE000000000000000;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0xE000000000000000;
  *((_DWORD *)v10 + 12) = 0;
  v44 = (uint64_t *)&v10[v8[12]];
  *v44 = 0;
  v44[1] = 0xE000000000000000;
  v45 = &v10[v8[13]];
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = 0xE000000000000000;
  v46 = (uint64_t *)&v10[v8[14]];
  *v46 = 0;
  v46[1] = 0xE000000000000000;
  v47 = &v10[v8[15]];
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0xE000000000000000;
  v48 = &v10[v8[11]];
  *(_QWORD *)v48 = 1752397136;
  *((_QWORD *)v48 + 1) = 0xE400000000000000;
  v49 = v61;
  if (v61)
  {
    *((_QWORD *)v10 + 4) = v59;
    *((_QWORD *)v10 + 5) = v49;
    *((_DWORD *)v10 + 12) = v60;
  }
  swift_bridgeObjectRetain();
  sub_1BE9BEF00(v41, (uint64_t *)&unk_1EF570DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v41, v62, v42);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v41, 0, 1, v42);
  sub_1BE9EDACC(v41, v43);
  if (v29)
  {
    swift_bridgeObjectRelease();
    *v44 = v54;
    v44[1] = v29;
  }
  v50 = v55;
  if (v55)
  {
    swift_bridgeObjectRelease();
    *v46 = v53;
    v46[1] = v50;
  }
  swift_bridgeObjectRelease();
  v51 = v57;
  v52 = v58;
  *(_QWORD *)v47 = v56;
  *((_QWORD *)v47 + 1) = v52;
  sub_1BE9E4B1C((uint64_t)v10, v51);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v51, 0, 1, (uint64_t)v8);
  return sub_1BE9E4B60((uint64_t)v10);
}

uint64_t CKLogParser.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t CKLogParser.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t CKLogParser.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BE9EA590()
{
  return CKLogParser.unownedExecutor.getter();
}

uint64_t sub_1BE9EA5A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1BE9EA5D4()
{
  sub_1BE9EA5A8();
  return swift_deallocClassInstance();
}

id sub_1BE9EA5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1C3B822A0]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1BE9EA6C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BE9EA778(a1, a2, a3);
}

uint64_t sub_1BE9EA6D4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    sub_1BE9BF470();
    sub_1BE9BE150();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return sub_1BE9C6D50();
    sub_1BE9BF470();
    sub_1BE9BE784();
  }
  result = sub_1BE9BE678();
  __break(1u);
  return result;
}

uint64_t sub_1BE9EA76C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BE9EA778(a1, a2, a3);
}

uint64_t sub_1BE9EA778(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  if (a2 < 0)
  {
    sub_1BE9BF470();
    sub_1BE9BE150();
  }
  else
  {
    sub_1BE9C6C40();
    v7 = *(_QWORD *)(*(_QWORD *)(v6(0) - 8) + 72) * v3;
    v8 = a3 + v7;
    v9 = v4 + v7;
    if (v8 <= v4 || v9 <= a3)
    {
      sub_1BE9B696C();
      return sub_1BE9BDAE0();
    }
    sub_1BE9BF470();
    sub_1BE9BE784();
  }
  result = sub_1BE9BE678();
  __break(1u);
  return result;
}

uint64_t sub_1BE9EA820(unint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (v3 = a1 + 8 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for TrafficLogMessage();
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1BE9EA908(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    sub_1BE9BF470();
    sub_1BE9BE150();
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return sub_1BE9C6D50();
    sub_1BE9BF470();
    sub_1BE9BE784();
  }
  result = sub_1BE9BE678();
  __break(1u);
  return result;
}

unint64_t sub_1BE9EA9A0(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1BE9EA9C4(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return sub_1BE9EAAC4(a1, v2);
}

unint64_t sub_1BE9EA9FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1BE9EAB60(a1, v4);
}

unint64_t sub_1BE9EAA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v8;

  sub_1BE9EDE14();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BE9EDDC4();
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()();
  return sub_1BE9EAC24(a1, a2, a3, a4, v8);
}

unint64_t sub_1BE9EAAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1BE9EAB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1BE9BEEC4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1C3B82594](v9, a1);
      sub_1BE9ED3C4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1BE9EAC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[2];
      v17 = v15[3];
      v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t sub_1BE9EAD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1BE9BF2A0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v4;
    v11 = *v4;
    *v4 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 24);
    sub_1BE9BEF38(&qword_1EF570960);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v17 + 56);
    v14 = type metadata accessor for CKLogEvent();
    sub_1BE9ED214(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v8, a3);
    _NativeDictionary._delete(at:)();
    *v4 = v17;
    swift_bridgeObjectRelease();
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a3, 0, 1, v14);
  }
  else
  {
    v16 = type metadata accessor for CKLogEvent();
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a3, 1, 1, v16);
  }
}

void sub_1BE9EAE5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for CKLogEvent() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1BE9F4BE0();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1BE9EB0CC(v6);
  *a1 = v3;
}

size_t sub_1BE9EAEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1BE9BEF38(&qword_1EF570948);
  v3 = *(_QWORD *)(type metadata accessor for CKLogEvent() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = sub_1BE9ED454(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1BE9E13C4();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1BE9EAFF4(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  unint64_t v5;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_8;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      sub_1BE9BEF38(&qword_1EF570780);
      v3 = (_QWORD *)sub_1BE9B69EC();
      v4 = j__malloc_size(v3);
      v3[2] = v2;
      v3[3] = (2 * ((uint64_t)(v4 - 32) / 8)) | 1;
    }
    sub_1BE9B6980();
    sub_1BE9ED7D0((uint64_t)(v3 + 4), v2, v1);
    v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_8:
    sub_1BE9B6980();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    sub_1BE9E1618();
  }
  sub_1BE9B6960();
}

void sub_1BE9EB0CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  int v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  Swift::Int v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;

  v2 = v1;
  v4 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v196 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v195 = (uint64_t)&v171 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v171 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v171 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v171 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v171 - v18;
  v20 = type metadata accessor for Date();
  v202 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v205 = (char *)&v171 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v171 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v190 = (char *)&v171 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v177 = (char *)&v171 - v32;
  MEMORY[0x1E0C80A78](v31);
  v178 = (char *)&v171 - v33;
  v200 = type metadata accessor for CKLogEvent();
  v192 = *(_QWORD *)(v200 - 8);
  v34 = MEMORY[0x1E0C80A78](v200);
  v186 = (uint64_t)&v171 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v203 = (uint64_t)&v171 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v197 = (uint64_t)&v171 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v204 = (uint64_t)&v171 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v187 = (uint64_t)&v171 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v189 = (uint64_t)&v171 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v181 = (uint64_t)&v171 - v47;
  MEMORY[0x1E0C80A78](v46);
  v179 = (uint64_t)&v171 - v48;
  v208 = a1;
  v49 = a1[1];
  v180 = _minimumMergeRunLength(_:)(v49);
  if (v180 >= v49)
  {
    if (v49 < 0)
      goto LABEL_156;
    if (v49)
      sub_1BE9EC004(0, v49, 1, v208);
    return;
  }
  v174 = sub_1BE9E01BC(v49 / 2);
  v191 = v50;
  v175 = v49;
  if (v49 > 0)
  {
    v172 = v11;
    v51 = 0;
    v193 = (char *)MEMORY[0x1E0DEE9D8];
    v184 = v14;
    v173 = v17;
    v176 = v19;
    v201 = v20;
    v194 = v23;
    v52 = v49;
    v183 = v28;
    while (1)
    {
      v53 = v51;
      v54 = v51 + 1;
      v206 = v52;
      if (v51 + 1 >= v52)
      {
        v61 = v51 + 1;
        v62 = v200;
        v63 = v197;
        v64 = v180;
      }
      else
      {
        v55 = *v208;
        v56 = *(_QWORD *)(v192 + 72);
        v57 = v179;
        sub_1BE9E4B1C(*v208 + v56 * v54, v179);
        v182 = v55;
        v207 = v56;
        sub_1BE9E4B1C(v55 + v56 * v53, v181);
        sub_1BE9EDA8C(v57 + *(int *)(v200 + 32), (uint64_t)v19, (uint64_t *)&unk_1EF570DB0);
        v58 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v19, 1, v20);
        v59 = v177;
        if (v58 == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9BEF00((uint64_t)v19, (uint64_t *)&unk_1EF570DB0);
          v60 = v202;
        }
        else
        {
          v60 = v202;
          (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v178, v19, v20);
        }
        v65 = (uint64_t)v173;
        sub_1BE9EDA8C(v181 + *(int *)(v200 + 32), (uint64_t)v173, (uint64_t *)&unk_1EF570DB0);
        v66 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v65, 1, v20);
        v188 = v53;
        if (v66 == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9BEF00(v65, (uint64_t *)&unk_1EF570DB0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v59, v65, v20);
        }
        v67 = v178;
        LODWORD(v199) = static Date.< infix(_:_:)();
        v68 = *(void (**)(char *, uint64_t))(v60 + 8);
        v68(v59, v20);
        v68(v67, v20);
        sub_1BE9E4B60(v181);
        sub_1BE9E4B60(v179);
        v61 = v188 + 2;
        v52 = v206;
        if (v188 + 2 >= v206)
        {
          v63 = v197;
        }
        else
        {
          v185 = v2;
          v198 = v207 * v54;
          v69 = v182;
          v70 = v207 * v61;
          v71 = (uint64_t)v172;
          v72 = v187;
          while (1)
          {
            v73 = v61;
            v74 = v189;
            sub_1BE9E4B1C(v69 + v70, v189);
            sub_1BE9E4B1C(v69 + v198, v72);
            v75 = (uint64_t)v184;
            sub_1BE9EDA8C(v74 + *(int *)(v200 + 32), (uint64_t)v184, (uint64_t *)&unk_1EF570DB0);
            v76 = v201;
            if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v75, 1, v201) == 1)
            {
              static Date.distantPast.getter();
              sub_1BE9BEF00(v75, (uint64_t *)&unk_1EF570DB0);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v202 + 32))(v190, v75, v76);
            }
            v77 = v76;
            sub_1BE9EDA8C(v72 + *(int *)(v200 + 32), v71, (uint64_t *)&unk_1EF570DB0);
            v78 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v71, 1, v76);
            v79 = v183;
            if (v78 == 1)
            {
              static Date.distantPast.getter();
              sub_1BE9BEF00(v71, (uint64_t *)&unk_1EF570DB0);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v202 + 32))(v183, v71, v77);
            }
            v80 = v190;
            v81 = static Date.< infix(_:_:)();
            v68(v79, v77);
            v68(v80, v77);
            v72 = v187;
            sub_1BE9E4B60(v187);
            sub_1BE9E4B60(v189);
            if (((v199 ^ v81) & 1) != 0)
              break;
            v61 = v73 + 1;
            v69 += v207;
            v52 = v206;
            if (v73 + 1 >= v206)
            {
              v61 = v206;
              v20 = v201;
              v63 = v197;
              v2 = v185;
              goto LABEL_25;
            }
          }
          v20 = v201;
          v63 = v197;
          v61 = v73;
          v2 = v185;
          v52 = v206;
        }
LABEL_25:
        v62 = v200;
        v64 = v180;
        v53 = v188;
        if ((v199 & 1) != 0)
        {
          if (v61 < v188)
            goto LABEL_158;
          if (v188 < v61)
          {
            v82 = 0;
            v83 = v207 * (v61 - 1);
            v84 = v61 * v207;
            v85 = v188;
            v86 = v188 * v207;
            do
            {
              if (v85 != v61 + v82 - 1)
              {
                v185 = v2;
                v87 = v182;
                if (!v182)
                  goto LABEL_163;
                v88 = v182 + v86;
                sub_1BE9ED214(v182 + v86, v186);
                if (v86 < v83 || v88 >= v87 + v84)
                {
                  swift_arrayInitWithTakeFrontToBack();
                }
                else if (v86 != v83)
                {
                  swift_arrayInitWithTakeBackToFront();
                }
                sub_1BE9ED214(v186, v87 + v83);
                v20 = v201;
                v2 = v185;
              }
              ++v85;
              --v82;
              v83 -= v207;
              v84 -= v207;
              v86 += v207;
            }
            while (v85 < v61 + v82);
            v62 = v200;
            v63 = v197;
            v64 = v180;
            v53 = v188;
            v52 = v206;
          }
        }
      }
      if (v61 < v52)
      {
        if (__OFSUB__(v61, v53))
          goto LABEL_155;
        if (v61 - v53 < v64)
        {
          v90 = v53 + v64;
          if (__OFADD__(v53, v64))
            goto LABEL_159;
          v91 = v206;
          if (v90 < v206)
            v91 = v90;
          if (v91 < v53)
          {
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
            return;
          }
          if (v61 != v91)
          {
            v188 = v53;
            v185 = v2;
            v198 = *(_QWORD *)(v192 + 72);
            v206 = v61 * v198;
            v207 = v198 * (v61 - 1);
            v182 = v91;
            do
            {
              v92 = 0;
              v93 = v188;
              v199 = v61;
              while (1)
              {
                v94 = *v208;
                v95 = v204;
                sub_1BE9E4B1C(v206 + v92 + *v208, v204);
                sub_1BE9E4B1C(v207 + v92 + v94, v63);
                v96 = v195;
                sub_1BE9EDA8C(v95 + *(int *)(v62 + 32), v195, (uint64_t *)&unk_1EF570DB0);
                if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v96, 1, v20) == 1)
                {
                  static Date.distantPast.getter();
                  sub_1BE9BEF00(v96, (uint64_t *)&unk_1EF570DB0);
                }
                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t))(v202 + 32))(v205, v96, v20);
                }
                v97 = v196;
                sub_1BE9EDA8C(v63 + *(int *)(v62 + 32), v196, (uint64_t *)&unk_1EF570DB0);
                if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v97, 1, v20) == 1)
                {
                  v98 = v194;
                  static Date.distantPast.getter();
                  sub_1BE9BEF00(v97, (uint64_t *)&unk_1EF570DB0);
                  v99 = v202;
                }
                else
                {
                  v99 = v202;
                  v98 = v194;
                  (*(void (**)(char *, uint64_t, uint64_t))(v202 + 32))(v194, v97, v20);
                }
                v100 = v205;
                v101 = static Date.< infix(_:_:)();
                v102 = *(void (**)(char *, uint64_t))(v99 + 8);
                v102(v98, v20);
                v102(v100, v20);
                v63 = v197;
                sub_1BE9E4B60(v197);
                sub_1BE9E4B60(v204);
                if ((v101 & 1) == 0)
                  break;
                v103 = *v208;
                v62 = v200;
                if (!*v208)
                  goto LABEL_161;
                v104 = v103 + v207 + v92;
                sub_1BE9ED214(v103 + v206 + v92, v203);
                swift_arrayInitWithTakeFrontToBack();
                sub_1BE9ED214(v203, v104);
                v105 = v199;
                v92 -= v198;
                ++v93;
                v20 = v201;
                if (v199 == v93)
                  goto LABEL_63;
              }
              v62 = v200;
              v20 = v201;
              v105 = v199;
LABEL_63:
              v61 = v105 + 1;
              v207 += v198;
              v206 += v198;
            }
            while (v61 != v182);
            v61 = v182;
            v2 = v185;
            v53 = v188;
          }
        }
      }
      if (v61 < v53)
        goto LABEL_154;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v199 = v61;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BE9F3A30(0, *((_QWORD *)v193 + 2) + 1, 1, v193);
        v193 = v160;
      }
      v108 = *((_QWORD *)v193 + 2);
      v107 = *((_QWORD *)v193 + 3);
      v109 = v108 + 1;
      if (v108 >= v107 >> 1)
      {
        sub_1BE9F3A30(v107 > 1, v108 + 1, 1, v193);
        v193 = v161;
      }
      v110 = v193;
      *((_QWORD *)v193 + 2) = v109;
      v111 = v110 + 32;
      v112 = &v110[16 * v108 + 32];
      v113 = v199;
      *(_QWORD *)v112 = v53;
      *((_QWORD *)v112 + 1) = v113;
      if (v108)
      {
        while (1)
        {
          v114 = v109 - 1;
          if (v109 >= 4)
          {
            v119 = &v111[16 * v109];
            v120 = *((_QWORD *)v119 - 8);
            v121 = *((_QWORD *)v119 - 7);
            v125 = __OFSUB__(v121, v120);
            v122 = v121 - v120;
            if (v125)
              goto LABEL_139;
            v124 = *((_QWORD *)v119 - 6);
            v123 = *((_QWORD *)v119 - 5);
            v125 = __OFSUB__(v123, v124);
            v117 = v123 - v124;
            v118 = v125;
            if (v125)
              goto LABEL_140;
            v126 = v109 - 2;
            v127 = &v111[16 * v109 - 32];
            v129 = *(_QWORD *)v127;
            v128 = *((_QWORD *)v127 + 1);
            v125 = __OFSUB__(v128, v129);
            v130 = v128 - v129;
            if (v125)
              goto LABEL_141;
            v125 = __OFADD__(v117, v130);
            v131 = v117 + v130;
            if (v125)
              goto LABEL_143;
            if (v131 >= v122)
            {
              v149 = &v111[16 * v114];
              v151 = *(_QWORD *)v149;
              v150 = *((_QWORD *)v149 + 1);
              v125 = __OFSUB__(v150, v151);
              v152 = v150 - v151;
              if (v125)
                goto LABEL_149;
              v142 = v117 < v152;
              goto LABEL_102;
            }
          }
          else
          {
            if (v109 != 3)
            {
              v143 = *((_QWORD *)v193 + 4);
              v144 = *((_QWORD *)v193 + 5);
              v125 = __OFSUB__(v144, v143);
              v136 = v144 - v143;
              v137 = v125;
              goto LABEL_96;
            }
            v116 = *((_QWORD *)v193 + 4);
            v115 = *((_QWORD *)v193 + 5);
            v125 = __OFSUB__(v115, v116);
            v117 = v115 - v116;
            v118 = v125;
          }
          if ((v118 & 1) != 0)
            goto LABEL_142;
          v126 = v109 - 2;
          v132 = &v111[16 * v109 - 32];
          v134 = *(_QWORD *)v132;
          v133 = *((_QWORD *)v132 + 1);
          v135 = __OFSUB__(v133, v134);
          v136 = v133 - v134;
          v137 = v135;
          if (v135)
            goto LABEL_144;
          v138 = &v111[16 * v114];
          v140 = *(_QWORD *)v138;
          v139 = *((_QWORD *)v138 + 1);
          v125 = __OFSUB__(v139, v140);
          v141 = v139 - v140;
          if (v125)
            goto LABEL_146;
          if (__OFADD__(v136, v141))
            goto LABEL_148;
          if (v136 + v141 >= v117)
          {
            v142 = v117 < v141;
LABEL_102:
            if (v142)
              v114 = v126;
            goto LABEL_104;
          }
LABEL_96:
          if ((v137 & 1) != 0)
            goto LABEL_145;
          v145 = &v111[16 * v114];
          v147 = *(_QWORD *)v145;
          v146 = *((_QWORD *)v145 + 1);
          v125 = __OFSUB__(v146, v147);
          v148 = v146 - v147;
          if (v125)
            goto LABEL_147;
          if (v148 < v136)
            goto LABEL_113;
LABEL_104:
          v153 = v114 - 1;
          if (v114 - 1 >= v109)
          {
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
            goto LABEL_160;
          }
          if (!*v208)
            goto LABEL_162;
          v154 = &v111[16 * v153];
          v155 = *(_QWORD *)v154;
          v156 = &v111[16 * v114];
          v157 = *((_QWORD *)v156 + 1);
          sub_1BE9EC3C0(*v208 + *(_QWORD *)(v192 + 72) * *(_QWORD *)v154, *v208 + *(_QWORD *)(v192 + 72) * *(_QWORD *)v156, (char *)(*v208 + *(_QWORD *)(v192 + 72) * v157), v191);
          v158 = v193;
          if (v2)
            goto LABEL_132;
          if (v157 < v155)
            goto LABEL_136;
          if (v114 > *((_QWORD *)v193 + 2))
            goto LABEL_137;
          *(_QWORD *)v154 = v155;
          *(_QWORD *)&v111[16 * v153 + 8] = v157;
          v159 = *((_QWORD *)v158 + 2);
          if (v114 >= v159)
            goto LABEL_138;
          v109 = v159 - 1;
          memmove(&v111[16 * v114], v156 + 16, 16 * (v159 - 1 - v114));
          *((_QWORD *)v158 + 2) = v159 - 1;
          v20 = v201;
          if (v159 <= 2)
            goto LABEL_113;
        }
      }
      v109 = 1;
LABEL_113:
      v52 = v208[1];
      v51 = v199;
      v19 = v176;
      if (v199 >= v52)
        goto LABEL_119;
    }
  }
  v193 = (char *)MEMORY[0x1E0DEE9D8];
  v109 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_119:
  if (v109 >= 2)
  {
    v162 = *v208;
    do
    {
      v163 = v109 - 2;
      if (v109 < 2)
        goto LABEL_150;
      if (!v162)
        goto LABEL_164;
      v164 = *(_QWORD *)&v193[16 * v163 + 32];
      v165 = *(_QWORD *)&v193[16 * v109 + 24];
      sub_1BE9EC3C0(v162 + *(_QWORD *)(v192 + 72) * v164, v162 + *(_QWORD *)(v192 + 72) * *(_QWORD *)&v193[16 * v109 + 16], (char *)(v162 + *(_QWORD *)(v192 + 72) * v165), v191);
      if (v2)
        goto LABEL_132;
      if (v165 < v164)
        goto LABEL_151;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BE9F3AF8((uint64_t)v193);
        v193 = v170;
      }
      v166 = v193;
      if (v163 >= *((_QWORD *)v193 + 2))
        goto LABEL_152;
      v167 = v193 + 32;
      v168 = &v193[16 * v163 + 32];
      *(_QWORD *)v168 = v164;
      *((_QWORD *)v168 + 1) = v165;
      v169 = *((_QWORD *)v166 + 2);
      if (v109 > v169)
        goto LABEL_153;
      memmove(&v167[16 * v109 - 16], &v167[16 * v109], 16 * (v169 - v109));
      *((_QWORD *)v166 + 2) = v169 - 1;
      v109 = v169 - 1;
    }
    while (v169 > 2);
  }
  swift_bridgeObjectRelease();
  if (v175 < -1)
  {
    __break(1u);
LABEL_132:
    swift_bridgeObjectRelease();
    if (v175 < -1)
      goto LABEL_157;
  }
  *(_QWORD *)(v174 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_1BE9EC004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = a4;
  v39 = a1;
  v6 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v42 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v43 = (uint64_t)&v37 - v9;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v41 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v50 = (char *)&v37 - v14;
  v15 = type metadata accessor for CKLogEvent();
  v16 = MEMORY[0x1E0C80A78](v15);
  v46 = (uint64_t)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v53 = (uint64_t)&v37 - v19;
  result = MEMORY[0x1E0C80A78](v18);
  v49 = (uint64_t)&v37 - v22;
  v45 = a3;
  v38 = a2;
  if (a3 != a2)
  {
    v44 = *(_QWORD *)(v21 + 72);
    v51 = v44 * v45;
    v52 = v44 * (v45 - 1);
    v40 = v15;
    while (2)
    {
      v23 = 0;
      v24 = v39;
      do
      {
        v25 = v49;
        v26 = *v48;
        v47 = v51 + v23;
        sub_1BE9E4B1C(v51 + v23 + v26, v49);
        sub_1BE9E4B1C(v52 + v23 + v26, v53);
        v27 = v43;
        sub_1BE9EDA8C(v25 + *(int *)(v15 + 32), v43, (uint64_t *)&unk_1EF570DB0);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v27, 1, v10) == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9BEF00(v27, (uint64_t *)&unk_1EF570DB0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v50, v27, v10);
        }
        v28 = v41;
        v29 = v42;
        sub_1BE9EDA8C(v53 + *(int *)(v15 + 32), v42, (uint64_t *)&unk_1EF570DB0);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v29, 1, v10) == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9BEF00(v29, (uint64_t *)&unk_1EF570DB0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v28, v29, v10);
        }
        v30 = v50;
        v31 = static Date.< infix(_:_:)();
        v32 = v28;
        v33 = v11;
        v34 = *(void (**)(char *, uint64_t))(v11 + 8);
        v34(v32, v10);
        v34(v30, v10);
        v11 = v33;
        sub_1BE9E4B60(v53);
        result = sub_1BE9E4B60(v49);
        v15 = v40;
        if ((v31 & 1) == 0)
          break;
        v35 = *v48;
        if (!*v48)
        {
          __break(1u);
          return result;
        }
        v36 = v35 + v52 + v23;
        sub_1BE9ED214(v35 + v51 + v23, v46);
        swift_arrayInitWithTakeFrontToBack();
        result = sub_1BE9ED214(v46, v36);
        v23 -= v44;
        ++v24;
        v11 = v33;
      }
      while (v45 != v24);
      v52 += v44;
      v51 += v44;
      if (++v45 != v38)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1BE9EC3C0(unint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  unint64_t v54;
  unint64_t v56;
  BOOL v58;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char *v73;
  char v74;
  void (*v75)(char *, uint64_t);
  unint64_t v76;
  unint64_t v79;
  unint64_t v80;
  int64_t v82;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v93 = a3;
  v7 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v88 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v90 = (uint64_t)&v84 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v87 = (uint64_t)&v84 - v13;
  MEMORY[0x1E0C80A78](v12);
  v89 = (unint64_t)&v84 - v14;
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v91 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v84 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v86 = (char *)&v84 - v22;
  MEMORY[0x1E0C80A78](v21);
  v95 = (uint64_t)&v84 - v23;
  v100 = type metadata accessor for CKLogEvent();
  v24 = MEMORY[0x1E0C80A78](v100);
  v92 = (uint64_t)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v97 = (uint64_t)&v84 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v84 - v29;
  result = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v84 - v32;
  v35 = *(_QWORD *)(v34 + 72);
  if (!v35)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if (a2 - a1 == 0x8000000000000000 && v35 == -1)
    goto LABEL_91;
  v37 = &v93[-a2];
  if (&v93[-a2] == (char *)0x8000000000000000 && v35 == -1)
    goto LABEL_92;
  v39 = (uint64_t)(a2 - a1) / v35;
  v99 = v16;
  v94 = v35;
  if (v39 < (uint64_t)v37 / v35)
  {
    result = sub_1BE9F0E20(a1, (uint64_t)(a2 - a1) / v35, a4);
    v40 = a4 + v39 * v35;
    if (v39 * v35 < 1 || a2 >= (unint64_t)v93)
    {
LABEL_48:
      a2 = a1;
      goto LABEL_85;
    }
    v98 = a4 + v39 * v35;
    while (1)
    {
      sub_1BE9E4B1C(a2, (uint64_t)v33);
      sub_1BE9E4B1C(a4, (uint64_t)v30);
      v42 = v89;
      sub_1BE9EDA8C((uint64_t)&v33[*(int *)(v100 + 32)], v89, (uint64_t *)&unk_1EF570DB0);
      if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v42, 1, v15) == 1)
      {
        static Date.distantPast.getter();
        sub_1BE9BEF00(v42, (uint64_t *)&unk_1EF570DB0);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v95, v42, v15);
      }
      v43 = v87;
      sub_1BE9EDA8C((uint64_t)&v30[*(int *)(v100 + 32)], v87, (uint64_t *)&unk_1EF570DB0);
      v44 = a4;
      if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v43, 1, v15) == 1)
      {
        v45 = v86;
        static Date.distantPast.getter();
        sub_1BE9BEF00(v43, (uint64_t *)&unk_1EF570DB0);
        v46 = v99;
      }
      else
      {
        v47 = v43;
        v46 = v99;
        v45 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v86, v47, v15);
      }
      v48 = (char *)v95;
      v49 = static Date.< infix(_:_:)();
      v50 = v45;
      v51 = v49;
      v52 = *(void (**)(char *, uint64_t))(v46 + 8);
      v52(v50, v15);
      v52(v48, v15);
      sub_1BE9E4B60((uint64_t)v30);
      result = sub_1BE9E4B60((uint64_t)v33);
      if ((v51 & 1) != 0)
        break;
      v56 = v44;
      v53 = v94;
      a4 = v44 + v94;
      if (a1 >= v44 && a1 < a4)
      {
        v16 = v99;
        if (a1 != v56)
        {
          result = swift_arrayInitWithTakeBackToFront();
          v53 = v94;
        }
        v54 = a2;
        goto LABEL_43;
      }
      result = swift_arrayInitWithTakeFrontToBack();
      v53 = v94;
      v54 = a2;
LABEL_39:
      v16 = v99;
LABEL_43:
      v40 = v98;
      a1 += v53;
      v58 = a4 >= v98 || v54 >= (unint64_t)v93;
      a2 = v54;
      if (v58)
        goto LABEL_48;
    }
    v53 = v94;
    v54 = a2 + v94;
    if (a1 < a2 || a1 >= v54)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (a1 == a2)
      {
LABEL_38:
        a4 = v44;
        goto LABEL_39;
      }
      result = swift_arrayInitWithTakeBackToFront();
    }
    v53 = v94;
    goto LABEL_38;
  }
  v59 = (uint64_t)v37 / v35;
  result = sub_1BE9F0E20(a2, (uint64_t)v37 / v35, a4);
  v40 = a4 + v59 * v35;
  if (v59 * v35 >= 1 && a1 < a2)
  {
    v89 = a4;
    v95 = -v35;
    v62 = v92;
    v61 = v93;
    v63 = v91;
    v85 = a1;
    while (1)
    {
      v64 = (unint64_t)v61;
      v98 = v40;
      v65 = (char *)v95;
      v93 = (char *)(v40 + v95);
      v66 = v97;
      sub_1BE9E4B1C(v40 + v95, v97);
      v67 = (uint64_t)&v65[a2];
      sub_1BE9E4B1C(v67, v62);
      v68 = v66 + *(int *)(v100 + 32);
      v69 = v90;
      sub_1BE9EDA8C(v68, v90, (uint64_t *)&unk_1EF570DB0);
      if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v69, 1, v15) == 1)
      {
        static Date.distantPast.getter();
        sub_1BE9BEF00(v69, (uint64_t *)&unk_1EF570DB0);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v96, v69, v15);
      }
      v70 = v88;
      sub_1BE9EDA8C(v62 + *(int *)(v100 + 32), v88, (uint64_t *)&unk_1EF570DB0);
      if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v70, 1, v15) == 1)
      {
        static Date.distantPast.getter();
        sub_1BE9BEF00(v70, (uint64_t *)&unk_1EF570DB0);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v63, v70, v15);
      }
      v71 = v96;
      v61 = (char *)(v64 + v95);
      v72 = static Date.< infix(_:_:)();
      v73 = v63;
      v74 = v72;
      v75 = *(void (**)(char *, uint64_t))(v16 + 8);
      v75(v73, v15);
      v75(v71, v15);
      v62 = v92;
      sub_1BE9E4B60(v92);
      result = sub_1BE9E4B60(v97);
      v76 = v85;
      if ((v74 & 1) != 0)
        break;
      if (v64 < v98 || (unint64_t)v61 >= v98)
      {
        v79 = (unint64_t)v93;
        result = swift_arrayInitWithTakeFrontToBack();
        v40 = v79;
        v16 = v99;
LABEL_73:
        v63 = v91;
        goto LABEL_80;
      }
      v16 = v99;
      v63 = v91;
      if (v64 == v98)
      {
        v40 = (unint64_t)v93;
      }
      else
      {
        v80 = (unint64_t)v93;
        result = swift_arrayInitWithTakeBackToFront();
        v40 = v80;
      }
LABEL_80:
      if (v40 <= v89 || a2 <= v76)
      {
        a4 = v89;
        goto LABEL_85;
      }
    }
    if (v64 >= a2 && (unint64_t)v61 < a2)
    {
      v16 = v99;
      v63 = v91;
      if (v64 != a2)
        result = swift_arrayInitWithTakeBackToFront();
      a2 = v67;
      v40 = v98;
      goto LABEL_80;
    }
    result = swift_arrayInitWithTakeFrontToBack();
    a2 = v67;
    v40 = v98;
    v16 = v99;
    goto LABEL_73;
  }
LABEL_85:
  v82 = v40 - a4;
  if (v94 != -1 || v82 != 0x8000000000000000)
  {
    sub_1BE9F0E20(a4, v82 / v94, a2);
    return 1;
  }
LABEL_93:
  __break(1u);
  return result;
}

uint64_t sub_1BE9ECB18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1BE9BF2A0(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1BE9BEF38(&qword_1EF570770);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1BE9BF2A0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_1BE9ECF88(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1BE9ECC2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1BE9ECD6C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1BE9EDDAC, &qword_1EF570958);
}

uint64_t sub_1BE9ECC48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD **v4;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  sub_1BE9BF2A0(a2, a3);
  sub_1BE9BF4D8();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  sub_1BE9BEF38(&qword_1EF570960);
  if (!sub_1BE9EDE38(a4 & 1))
    goto LABEL_5;
  v14 = sub_1BE9BF2A0(a2, a3);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = v14;
LABEL_5:
  v16 = *v4;
  if ((v13 & 1) != 0)
  {
    v17 = v16[7];
    v18 = v17 + *(_QWORD *)(*(_QWORD *)(sub_1BE9BF468() - 8) + 72) * v12;
    return sub_1BE9ED998(a1, v18);
  }
  else
  {
    sub_1BE9ED258(v12, a2, a3, a1, v16);
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_1BE9ECD50(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1BE9ECD6C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1BE9EA9C4, &qword_1EF570940);
}

unint64_t sub_1BE9ECD6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t), uint64_t *a6)
{
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v13;
  void (*v14)(uint64_t);
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t result;

  sub_1BE9C6C40();
  v14(v13);
  sub_1BE9BF4D8();
  if (v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v15;
  v19 = v16;
  sub_1BE9BEF38(a6);
  if (!sub_1BE9EDE38(a4 & 1))
    goto LABEL_5;
  v20 = a5(a3);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v7;
  if ((v19 & 1) == 0)
    return sub_1BE9ED2E0(v18, a3, v8, v6, v22);
  v23 = (uint64_t *)(v22[7] + 16 * v18);
  result = swift_bridgeObjectRelease();
  *v23 = v8;
  v23[1] = v6;
  return result;
}

void sub_1BE9ECE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  Swift::Int *v6;
  Swift::Int *v7;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;

  v7 = v6;
  v14 = *v6;
  sub_1BE9EAA2C(a2, a3, a4, a5);
  sub_1BE9BF4D8();
  if (v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v15;
  v19 = v16;
  sub_1BE9BEF38(&qword_1EF570928);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a6 & 1, v14))
    goto LABEL_5;
  v20 = sub_1BE9EAA2C(a2, a3, a4, a5);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v18 = v20;
LABEL_5:
  v22 = (_QWORD *)*v7;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];

    *(_QWORD *)(v23 + 8 * v18) = a1;
    sub_1BE9BF404();
  }
  else
  {
    sub_1BE9ED378(v18, a2, a3, a4, a5, a1, v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
}

unint64_t sub_1BE9ECF88(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t type metadata accessor for CKLogParser.StreamState()
{
  return objc_opt_self();
}

uint64_t sub_1BE9ECFF0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1BE9ED028()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BE9ED05C(void *a1)
{
  uint64_t v1;

  return sub_1BE9E6974(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1BE9ED068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1BE9ED078()
{
  return swift_release();
}

void sub_1BE9ED080(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x1C3B84508](a4, v6), a1);
  }
  sub_1BE9B69D4();
}

uint64_t type metadata accessor for CKLogParser()
{
  return objc_opt_self();
}

uint64_t sub_1BE9ED0DC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE9E70C4(a1, *(void **)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t method lookup function for CKLogParser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKLogParser.logEvents(archiveURL:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  sub_1BE9C6C40();
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v1 + 88) + *(_QWORD *)(*(_QWORD *)v1 + 88));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_1BE9ED15C;
  v4 = sub_1BE9EDE20();
  return v6(v4, v0);
}

uint64_t sub_1BE9ED15C(uint64_t a1)
{
  uint64_t v1;

  sub_1BE9BDB34();
  sub_1BE9B69AC();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t dispatch thunk of CKLogParser.logEvents(stream:activation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 96)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 96));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1BE9EDDB8;
  return v10(a1, a2, a3);
}

uint64_t sub_1BE9ED214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE9ED258(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for CKLogEvent();
  result = sub_1BE9ED214(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_1BE9ED2E0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_1BE9ED328(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

unint64_t sub_1BE9ED378(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 32 * result);
  *v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

uint64_t sub_1BE9ED3C4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1BE9ED3F8(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1BE9ED454(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for CKLogEvent();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 32);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_1BE9E4B1C(*(_QWORD *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_1BE9ED214((uint64_t)v12, (uint64_t)v15);
    result = sub_1BE9ED214((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void (*sub_1BE9ED6DC(_QWORD *a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1BE9ED75C(v6, a2, a3);
  return sub_1BE9ED730;
}

void sub_1BE9ED730(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1BE9ED75C(_QWORD *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  sub_1BE9EA9A0(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = (id)MEMORY[0x1C3B825C4](a2, a3);
  else
    v7 = *(id *)(a3 + 8 * a2 + 32);
  *a1 = v7;
  return sub_1BE9ED7C8;
}

void sub_1BE9ED7C8(id *a1)
{

}

uint64_t sub_1BE9ED7D0(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *);
  id *v11;
  id v12;
  _QWORD v13[4];

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1BE9ED954();
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_1BE9BEF38(&qword_1EF570930);
            v10 = sub_1BE9ED6DC(v13, i, a3);
            v12 = *v11;
            ((void (*)(_QWORD *, _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1BE9EA820((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1BE9ED954()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF570938;
  if (!qword_1EF570938)
  {
    v1 = sub_1BE9E1F48(&qword_1EF570930);
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF570938);
  }
  return result;
}

uint64_t sub_1BE9ED998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE9ED9DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BE9BEF38(&qword_1EF570950);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1BE9EDA40()
{
  sub_1BE9C6C40();
  sub_1BE9BEF38(&qword_1EF570950);
  return sub_1BE9E7208();
}

void sub_1BE9EDA8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1BE9BEF38(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_1BE9B69D4();
}

uint64_t sub_1BE9EDACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t destroy for CKLogParser.LogFilter(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  __int128 v10;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (id)v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CKLogParser.LogFilter(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKLogParser.LogFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKLogParser.LogFilter()
{
  return &type metadata for CKLogParser.LogFilter;
}

uint64_t sub_1BE9EDDBC(uint64_t a1, unint64_t *a2)
{
  return sub_1BE9ECFF0(0, a2);
}

uint64_t sub_1BE9EDDC4()
{
  return String.hash(into:)();
}

uint64_t sub_1BE9EDDF0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1BE9EDDF8()
{
  return swift_task_dealloc();
}

unint64_t sub_1BE9EDE00(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE9BF2A0(a1, v1);
}

uint64_t sub_1BE9EDE0C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9EDE14()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1BE9EDE20()
{
  uint64_t v0;

  return v0;
}

id sub_1BE9EDE2C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

BOOL sub_1BE9EDE38(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_1BE9EDE44()
{
  return swift_task_dealloc();
}

void sub_1BE9EDE50()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR___CKDTrafficLogParser_lock) + 32);
  os_unfair_lock_lock(v1);
  sub_1BE9BF3F4();
  os_unfair_lock_unlock(v1);
  sub_1BE9B69D4();
}

void sub_1BE9EDE90(uint64_t a1)
{
  _QWORD *v1;

  sub_1BE9F540C(OBJC_IVAR___CKDTrafficLogParser_lock);
  sub_1BE9EDEDC(v1, a1);
  sub_1BE9BEAC4();
}

_QWORD *sub_1BE9EDEDC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9[2];
  _QWORD *v10;

  v3 = result;
  v4 = (_QWORD *)*result;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (uint64_t *)(a2 + 40);
    while (1)
    {
      v8 = *v7;
      v9[0] = *(v7 - 1);
      v9[1] = v8;
      swift_bridgeObjectRetain();
      sub_1BE9EDFB8(&v10, v9);
      if (v2)
        break;
      v7 += 2;
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v4 = v10;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    *v3 = v4;
  }
  return result;
}

uint64_t sub_1BE9EDFB8(_QWORD **a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  __int16 v18;
  unsigned __int8 *v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  __int16 v33;
  Swift::String v34;
  uint64_t result;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  v3 = *a2;
  v4 = (void *)a2[1];
  if (qword_1ED7002B0 != -1)
    swift_once();
  sub_1BE9F4E38();
  v5 = (_QWORD *)Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)();
  v6 = v5;
  if (v5[2] != 4)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(59);
    v20._countAndFlagsBits = 0xD000000000000035;
    v20._object = (void *)0x80000001BECBE290;
    String.append(_:)(v20);
    v21 = qword_1ED700868;
    v22 = *(void **)algn_1ED700870;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24 = 8250;
    v25 = 0xE200000000000000;
LABEL_10:
    String.append(_:)(*(Swift::String *)&v24);
LABEL_18:
    v34._countAndFlagsBits = v3;
    v34._object = v4;
    String.append(_:)(v34);
    related decl 'e' for CKErrorCode.init(_:description:)();
    return swift_willThrow();
  }
  v7 = v5[4];
  v8 = v5[5];
  v9 = v5[6];
  v10 = v5[7];
  swift_bridgeObjectRetain();
  v58 = MEMORY[0x1C3B82300](v7, v8, v9, v10);
  v12 = v11;
  swift_bridgeObjectRelease();
  if (v6[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_29;
  }
  v60 = v12;
  v13 = v6[8];
  v14 = v6[9];
  if ((v14 ^ (unint64_t)v13) < 0x4000)
    goto LABEL_17;
  v15 = v6[10];
  v16 = v6[11];
  sub_1BE9F4E74(v6[8], v6[9], v15, v16, 10);
  if ((v18 & 0x100) == 0)
  {
    if ((v18 & 1) == 0)
    {
      v19 = v17;
      goto LABEL_12;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v19 = sub_1BE9F3B0C(v13, v14, v15, v16, 10);
  v27 = v26;
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_17;
LABEL_12:
  if (v6[2] < 3uLL)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v29 = v6[12];
  v28 = v6[13];
  if ((v28 ^ (unint64_t)v29) < 0x4000)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(52);
    v24 = 0xD000000000000032;
    v25 = 0x80000001BECBE300;
    goto LABEL_10;
  }
  v30 = v6[14];
  v31 = v6[15];
  sub_1BE9F4E74(v6[12], v6[13], v30, v31, 10);
  if ((v33 & 0x100) != 0)
  {
    swift_bridgeObjectRetain();
    v57 = sub_1BE9F3B0C(v29, v28, v30, v31, 10);
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    v57 = v32;
    if ((v33 & 1) != 0)
      goto LABEL_16;
  }
  if (v6[2] < 4uLL)
    goto LABEL_30;
  v38 = v6[16];
  v39 = v6[17];
  v40 = v6[18];
  v41 = v6[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x1C3B82300](v38, v39, v40, v41);
  v55 = v43;
  v56 = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v45 = *a1;
  v59 = *a1;
  *a1 = (_QWORD *)0x8000000000000000;
  v46 = sub_1BE9BF2A0(v58, v60);
  v48 = v45[2];
  v49 = (v47 & 1) == 0;
  v50 = v48 + v49;
  if (__OFADD__(v48, v49))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v51 = v46;
  v52 = v47;
  sub_1BE9BEF38(&qword_1EF5709B8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50))
  {
    v53 = sub_1BE9BF2A0(v58, v60);
    if ((v52 & 1) == (v54 & 1))
    {
      v51 = v53;
      goto LABEL_25;
    }
LABEL_32:
    swift_bridgeObjectRelease_n();
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_25:
  *a1 = v59;
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
    sub_1BE9ED328(v51, v58, v60, v58, v60, (uint64_t)v57, MEMORY[0x1E0DEE9E0], *a1);
    swift_bridgeObjectRetain_n();
  }
  sub_1BE9FAF74(v56, v55, (uint64_t)v19);
  return swift_bridgeObjectRelease_n();
}

void sub_1BE9EE528()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  swift_getObjectType();
  sub_1BE9F540C(OBJC_IVAR___CKDTrafficLogParser_lock);
  sub_1BE9EE5A8(v0, &v2);
  sub_1BE9BEAC4();
  if (!v1)
  {
    CKCheckedUnsafeObjectTransfer.extractValue()();
    swift_release();
  }
}

uint64_t sub_1BE9EE5A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  Swift::Int v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t result;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110[4];
  _QWORD v111[6];
  unint64_t v112;

  v99 = a2;
  v3 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  MEMORY[0x1E0C80A78](v3);
  v101 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  MEMORY[0x1E0C80A78](v5);
  v100 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for PartialTrafficLog(0);
  v103 = *(_QWORD *)(v105 - 8);
  v7 = MEMORY[0x1E0C80A78](v105);
  v108 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v109 = (uint64_t)&v96 - v10;
  MEMORY[0x1E0C80A78](v9);
  v106 = (char *)&v96 - v11;
  v107 = a1;
  sub_1BE9E0E44(*a1, v111);
  v13 = v111[0];
  v12 = v111[1];
  v14 = v111[3];
  v15 = v111[4];
  v16 = (unint64_t)(v111[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x1E0DEE9D8];
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v19 = v18 | (v14 << 6);
LABEL_22:
    v25 = (unint64_t *)(*(_QWORD *)(v13 + 56) + 32 * v19);
    v27 = v25[2];
    v26 = v25[3];
    if (*(_QWORD *)(v26 + 16) == v27)
    {
      v28 = v25[1];
      v104 = *v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v110[0] = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BE9E2774();
        v17 = v110[0];
      }
      v30 = v17;
      v31 = *(_QWORD *)(v17 + 16);
      v32 = v31 + 1;
      if (v31 >= *(_QWORD *)(v30 + 24) >> 1)
      {
        v97 = v28;
        v98 = v31 + 1;
        sub_1BE9E2774();
        v32 = v98;
        v28 = v97;
        v30 = v110[0];
      }
      *(_QWORD *)(v30 + 16) = v32;
      v33 = (_QWORD *)(v30 + 32 * v31);
      v33[4] = v104;
      v33[5] = v28;
      v33[6] = v27;
      v33[7] = v26;
      v17 = v30;
    }
  }
  v20 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    JUMPOUT(0x1BE9EF1D8);
  }
  v21 = v107;
  if (v20 >= v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v12 + 8 * v20);
  v23 = v14 + 1;
  if (v22)
    goto LABEL_21;
  v23 = v14 + 2;
  if (v14 + 2 >= v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v14 + 3;
  if (v14 + 3 >= v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v14 + 4;
  if (v14 + 4 >= v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v14 + 5;
  if (v14 + 5 >= v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v14 + 6;
  if (v14 + 6 >= v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v12 + 8 * v23);
  if (v22)
  {
LABEL_21:
    v15 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v23 << 6);
    v14 = v23;
    goto LABEL_22;
  }
  v24 = v14 + 7;
  while (v24 < v16)
  {
    v22 = *(_QWORD *)(v12 + 8 * v24++);
    if (v22)
    {
      v23 = v24 - 1;
      goto LABEL_21;
    }
  }
LABEL_28:
  swift_release();
  v34 = *(_QWORD *)(v17 + 16);
  if (!v34)
    goto LABEL_40;
  swift_retain();
  v104 = v17;
  v35 = v17 + 56;
  do
  {
    v36 = *(_QWORD *)(v35 - 24);
    v37 = *(_QWORD *)(v35 - 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BE9BF2A0(v36, v37);
    LOBYTE(v36) = v38;
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
    {
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v110[0] = *v21;
      v40 = v110[0];
      *v21 = 0x8000000000000000;
      v41 = *(_QWORD *)(v40 + 24);
      sub_1BE9BEF38(&qword_1EF5709B8);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v39, v41);
      v42 = v110[0];
      swift_bridgeObjectRelease();
      _NativeDictionary._delete(at:)();
      *v21 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    v35 += 32;
    --v34;
  }
  while (v34);
  v43 = v104;
  swift_release();
  v44 = *(_QWORD *)(v43 + 16);
  v112 = MEMORY[0x1E0DEE9D8];
  if (!v44)
  {
LABEL_40:
    swift_release();
    v52 = MEMORY[0x1E0DEE9D8];
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v45 = 0;
  v46 = (uint64_t *)(v43 + 56);
  while (1)
  {
    v47 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    v48 = *(v46 - 1);
    v49 = *v46;
    v50 = *(v46 - 2);
    v110[0] = *(v46 - 3);
    v110[1] = v50;
    v110[2] = v48;
    v110[3] = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = v102;
    sub_1BE9E22E8((uint64_t)&v112, v110);
    v102 = v51;
    if (v51)
    {
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 += 4;
    ++v45;
    if (v47 == v44)
    {
      swift_release_n();
      v52 = v112;
      v21 = v107;
LABEL_41:
      v53 = v21[1];
      v54 = (uint64_t)v106;
      if (*(_QWORD *)(v52 + 16))
      {
        v104 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        v55 = v52 + v104;
        v103 = *(_QWORD *)(v103 + 72);
        swift_bridgeObjectRetain();
        v98 = v52;
        swift_bridgeObjectRetain();
        sub_1BE9BDE90(v55, v54);
        sub_1BE9BDE90(v54, v109);
        v56 = (char *)&loc_1BE9EEB18 + *((int *)qword_1BE9EF238 + swift_getEnumCaseMultiPayload());
        __asm { BR              X9 }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v21[1] = v53;
      swift_bridgeObjectRelease();
      v57 = swift_bridgeObjectRetain();
      v58 = v102;
      v59 = sub_1BE9F4338(v57);
      v107 = v58;
      swift_bridgeObjectRelease();
      v60 = v59 + 64;
      v61 = 1 << *(_BYTE *)(v59 + 32);
      v62 = -1;
      if (v61 < 64)
        v62 = ~(-1 << v61);
      v63 = v62 & *(_QWORD *)(v59 + 64);
      v108 = (char *)((unint64_t)(v61 + 63) >> 6);
      swift_retain();
      v64 = 0;
      v109 = v59 + 64;
      while (1)
      {
        if (v63)
        {
          v65 = __clz(__rbit64(v63));
          v63 &= v63 - 1;
          v66 = v65 | (v64 << 6);
        }
        else
        {
          v67 = v64 + 1;
          if (__OFADD__(v64, 1))
            goto LABEL_93;
          if (v67 >= (uint64_t)v108)
          {
LABEL_66:
            swift_release();
            v80 = *(_QWORD *)(v59 + 16);
            if (v80)
            {
              v108 = (char *)&v96;
              v110[0] = MEMORY[0x1E0DEE9D8];
              specialized ContiguousArray.reserveCapacity(_:)();
              v81 = sub_1BE9E0E48(v59);
              if ((v81 & 0x8000000000000000) == 0)
              {
                v83 = v81;
                if (v81 < 1 << *(_BYTE *)(v59 + 32))
                {
                  v84 = v82;
                  while ((*(_QWORD *)(v60 + 8 * (v83 >> 6)) & (1 << v83)) != 0)
                  {
                    if (v84 != *(_DWORD *)(v59 + 36))
                      goto LABEL_89;
                    v85 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 16 * v83);
                    v87 = *v85;
                    v86 = v85[1];
                    v88 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v83);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_1BE9EF254(v87, v86, v88);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                    if ((uint64_t)v83 >= -(-1 << *(_BYTE *)(v59 + 32)))
                      goto LABEL_90;
                    v60 = v109;
                    if ((*(_QWORD *)(v109 + 8 * (v83 >> 6)) & (1 << v83)) == 0)
                      goto LABEL_91;
                    if (v84 != *(_DWORD *)(v59 + 36))
                      goto LABEL_92;
                    v89 = _HashTable.occupiedBucket(after:)();
                    if (!--v80)
                      goto LABEL_79;
                    v83 = v89;
                    if ((v89 & 0x8000000000000000) == 0)
                    {
                      v84 = *(_DWORD *)(v59 + 36);
                      if (v89 < 1 << *(_BYTE *)(v59 + 32))
                        continue;
                    }
                    goto LABEL_78;
                  }
                  __break(1u);
LABEL_89:
                  __break(1u);
LABEL_90:
                  __break(1u);
LABEL_91:
                  __break(1u);
LABEL_92:
                  __break(1u);
LABEL_93:
                  __break(1u);
                  JUMPOUT(0x1BE9EF1F4);
                }
              }
LABEL_78:
              __break(1u);
LABEL_79:
              v90 = v110[0];
              swift_release();
            }
            else
            {
              swift_release();
              v90 = MEMORY[0x1E0DEE9D8];
            }
            if ((v90 & 0x8000000000000000) == 0 && (v90 & 0x4000000000000000) == 0)
            {
              v91 = v90 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain();
              goto LABEL_84;
            }
            goto LABEL_96;
          }
          v68 = *(_QWORD *)(v60 + 8 * v67);
          ++v64;
          if (!v68)
          {
            v64 = v67 + 1;
            if (v67 + 1 >= (uint64_t)v108)
              goto LABEL_66;
            v68 = *(_QWORD *)(v60 + 8 * v64);
            if (!v68)
            {
              v64 = v67 + 2;
              if (v67 + 2 >= (uint64_t)v108)
                goto LABEL_66;
              v68 = *(_QWORD *)(v60 + 8 * v64);
              if (!v68)
              {
                v69 = v67 + 3;
                if (v69 >= (uint64_t)v108)
                  goto LABEL_66;
                v68 = *(_QWORD *)(v60 + 8 * v69);
                if (!v68)
                {
                  while (1)
                  {
                    v64 = v69 + 1;
                    if (__OFADD__(v69, 1))
                      goto LABEL_95;
                    if (v64 >= (uint64_t)v108)
                      goto LABEL_66;
                    v68 = *(_QWORD *)(v60 + 8 * v64);
                    ++v69;
                    if (v68)
                      goto LABEL_61;
                  }
                }
                v64 = v69;
              }
            }
          }
LABEL_61:
          v63 = (v68 - 1) & v68;
          v66 = __clz(__rbit64(v68)) + (v64 << 6);
        }
        v70 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 16 * v66);
        v72 = *v70;
        v71 = v70[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BE9BF2A0(v72, v71);
        v74 = v73;
        swift_bridgeObjectRelease();
        if ((v74 & 1) != 0)
        {
          v75 = swift_isUniquelyReferenced_nonNull_native();
          v110[0] = v21[1];
          v76 = v110[0];
          v21[1] = 0x8000000000000000;
          v77 = *(_QWORD *)(v76 + 24);
          sub_1BE9BEF38(&qword_1EF5709A8);
          v78 = v77;
          v60 = v109;
          _NativeDictionary.ensureUnique(isUnique:capacity:)(v75, v78);
          v79 = v110[0];
          swift_bridgeObjectRelease();
          sub_1BE9BEF38(&qword_1ED700378);
          _NativeDictionary._delete(at:)();
          v21[1] = v79;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  v94 = swift_bridgeObjectRetain();
  sub_1BE9EAFF4(v94);
  v91 = v95;
  swift_bridgeObjectRelease();
LABEL_84:
  v110[0] = v91;
  v92 = v107;
  sub_1BE9F1184(v110);
  if (v92)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x1BE9EF238);
  }
  swift_bridgeObjectRelease();
  sub_1BE9BEF38(&qword_1EF5709B0);
  swift_allocObject();
  result = CKCheckedUnsafeObjectTransfer.init(_:)();
  *v99 = result;
  return result;
}

id sub_1BE9EF254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char *v32;
  char *v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  _QWORD *v42;
  NSObject *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char v51;
  unint64_t v52;
  void *v53;
  __n128 *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  __n128 *v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  id v73;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ObjCClassFromMetadata;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _QWORD *v117;

  v87 = a2;
  v84 = type metadata accessor for DispatchTimeInterval();
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  sub_1BE9BDE58();
  sub_1BE9BF4EC(v6);
  v85 = type metadata accessor for DispatchTime();
  v81 = *(_QWORD *)(v85 - 8);
  v7 = MEMORY[0x1E0C80A78](v85);
  v79 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = sub_1BE9BF4EC((uint64_t)&v78 - v9);
  v103 = type metadata accessor for PartialTrafficLog.ResponseMetadata(v10);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v11);
  sub_1BE9BDE58();
  v102 = v12;
  sub_1BE9BEF38(&qword_1EF5709C8);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v13);
  sub_1BE9BDE58();
  v101 = v14;
  sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v15);
  sub_1BE9BDE58();
  v17 = sub_1BE9BF4EC(v16);
  v100 = type metadata accessor for PartialTrafficLog.RequestMetadata(v17);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v18);
  sub_1BE9BDE58();
  v20 = sub_1BE9BF4EC(v19);
  v21 = type metadata accessor for PartialTrafficLog(v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  sub_1BE9C6CEC();
  v23 = sub_1BE9B69EC();
  v24 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v23 + 16) = MEMORY[0x1E0DEE9D8];
  v25 = sub_1BE9B69EC();
  v104 = v25;
  *(_QWORD *)(v25 + 16) = v24;
  v90 = (_QWORD *)(v25 + 16);
  v26 = (objc_class *)type metadata accessor for TrafficMetadata();
  v107 = (char *)objc_msgSend(objc_allocWithZone(v26), sel_init);
  v106 = (char *)objc_msgSend(objc_allocWithZone(v26), sel_init);
  v114 = a3;
  sub_1BE9BF3F4();
  sub_1BE9F11FC(&v114);
  v27 = v114;
  v86 = a1;
  sub_1BE9ECFF0(0, &qword_1EF5709D0);
  v28 = objc_allocWithZone((Class)CKDProtobufResponseBodyParser);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  objc_msgSend(v28, sel_initWithQoS_messageClass_parsingStandaloneMessage_, 25);
  v116 = sub_1BE9F4C94;
  v117 = (_QWORD *)v23;
  v29 = MEMORY[0x1E0C809B0];
  v114 = MEMORY[0x1E0C809B0];
  v115 = 1107296256;
  sub_1BE9BDB54((uint64_t)&unk_1E782D350);
  v30 = sub_1BE9F549C();
  v105 = v23;
  swift_retain();
  swift_release();
  objc_msgSend(v30, sel_setObjectParsedBlock_, v28);
  _Block_release(v28);
  v112 = v30;

  v31 = *(_QWORD *)(v27 + 16);
  v91 = (_QWORD *)(v23 + 16);
  if (v31)
  {
    v96 = &v106[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    v32 = &v106[OBJC_IVAR___CKDTrafficMetadata_status];
    v94 = &v107[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    v93 = &v107[OBJC_IVAR___CKDTrafficMetadata_url];
    v113 = (id)(v27 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
    v92 = &v107[OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage];
    sub_1BE9BD864();
    sub_1BE9BD864();
    v95 = v32;
    sub_1BE9BD864();
    sub_1BE9BEF94();
    sub_1BE9F5474();
    v78 = v31 - 1;
    v110 = v27;
    v111 = v31;
    v98 = v21;
    v97 = v22;
    if (*(_QWORD *)(v27 + 16))
    {
      sub_1BE9BDE90((uint64_t)v113, v3);
      v33 = (char *)&loc_1BE9EF6CC + dword_1BE9F0314[swift_getEnumCaseMultiPayload()];
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x1BE9F0258);
  }
  sub_1BE9BEF94();
  sub_1BE9F5474();
  sub_1BE9BF4D0();
  v34 = dispatch_group_create();
  dispatch_group_enter(v34);
  v35 = (_QWORD *)sub_1BE9B69EC();
  v36 = v86;
  v37 = v87;
  v35[2] = v86;
  v35[3] = v37;
  v35[4] = v34;
  v116 = sub_1BE9F4CC8;
  v117 = v35;
  v114 = v29;
  v115 = 1107296256;
  sub_1BE9F54A8((uint64_t)&unk_1E782D3A0);
  v38 = sub_1BE9C6D58();
  sub_1BE9F5454();
  v39 = v29;
  v40 = v34;
  swift_release();
  sub_1BE9F5480(v38, sel_finishWithCompletion_);
  sub_1BE9BD6B0();
  v113 = v38;

  if (v109)
  {
    v41 = v109;
    dispatch_group_enter(v40);
    v42 = (_QWORD *)sub_1BE9B69EC();
    v42[2] = v36;
    v42[3] = v37;
    v42[4] = v40;
    v116 = sub_1BE9F4D30;
    v117 = v42;
    v114 = v39;
    v115 = 1107296256;
    sub_1BE9F54A8((uint64_t)&unk_1E782D3F0);
    sub_1BE9F5454();
    v43 = v40;
    swift_release();
    sub_1BE9F5480(v41, sel_finishWithCompletion_);
    sub_1BE9BD6B0();

  }
  v44 = v79;
  static DispatchTime.now()();
  v45 = v82;
  *v82 = 5;
  v46 = v83;
  v47 = v84;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v83 + 104))(v45, *MEMORY[0x1E0DEF4A0], v84);
  v48 = v80;
  MEMORY[0x1C3B82234](v44, v45);
  (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v45, v47);
  v49 = *(void (**)(char *, uint64_t))(v81 + 8);
  v50 = v85;
  v49(v44, v85);
  MEMORY[0x1C3B824BC](v48);
  v49(v48, v50);
  v51 = static DispatchTimeoutResult.== infix(_:_:)();
  v52 = MEMORY[0x1E0DEA968];
  v53 = v107;
  if ((v51 & 1) != 0)
  {
    sub_1BE9BEF38(&qword_1EF5709E0);
    v54 = (__n128 *)sub_1BE9B69EC();
    sub_1BE9F53EC(v54, (__n128)xmmword_1BECB99E0);
    _StringGuts.grow(_:)(106);
    sub_1BE9BDE6C(0xD00000000000003DLL, (uint64_t)"cloudkitlog parse error: object parser timed out for request ");
    sub_1BE9F5400();
    v55._object = (void *)0x80000001BECBE110;
    v55._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v55);
    v56 = v114;
    v57 = v115;
    v54[3].n128_u64[1] = v52;
    v54[2].n128_u64[0] = v56;
    v54[2].n128_u64[1] = v57;
    sub_1BE9BF484();
    sub_1BE9B6958();
  }
  v58 = v90;
  if ((v88 & 1) != 0)
  {
    v59 = v91;
    sub_1BE9BD864();
    if (!(*v59 >> 62))
    {
      if (*(_QWORD *)((*v59 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_12;
      goto LABEL_11;
    }
    sub_1BE9BF3F4();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    sub_1BE9BDA80();
    if (!v76)
    {
LABEL_11:
      sub_1BE9BEF38(&qword_1EF5709E0);
      v60 = (__n128 *)sub_1BE9B69EC();
      sub_1BE9F53EC(v60, (__n128)xmmword_1BECB99E0);
      _StringGuts.grow(_:)(117);
      sub_1BE9BDE6C(0xD000000000000042, (uint64_t)"cloudkitlog parse error: received request object data for request ");
      sub_1BE9F5400();
      v58 = v90;
      sub_1BE9BDE6C(0xD000000000000031, (uint64_t)" but wasn't able to parse a single request object");
      v61 = v114;
      v62 = v115;
      v60[3].n128_u64[1] = v52;
      v60[2].n128_u64[0] = v61;
      v60[2].n128_u64[1] = v62;
      sub_1BE9BF484();
      sub_1BE9B6958();
    }
  }
LABEL_12:
  if ((v89 & 1) == 0)
    goto LABEL_16;
  sub_1BE9BD864();
  if (!(*v58 >> 62))
  {
    if (*(_QWORD *)((*v58 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_16;
    goto LABEL_15;
  }
  sub_1BE9BF3F4();
  v77 = _CocoaArrayWrapper.endIndex.getter();
  sub_1BE9BDA80();
  if (!v77)
  {
LABEL_15:
    sub_1BE9BEF38(&qword_1EF5709E0);
    v63 = (__n128 *)sub_1BE9B69EC();
    sub_1BE9F53EC(v63, (__n128)xmmword_1BECB99E0);
    _StringGuts.grow(_:)(119);
    sub_1BE9BDE6C(0xD000000000000043, (uint64_t)"cloudkitlog parse error: received response object data for request ");
    sub_1BE9F5400();
    sub_1BE9BDE6C(0xD000000000000032, (uint64_t)" but wasn't able to parse a single response object");
    v64 = v114;
    v65 = v115;
    v63[3].n128_u64[1] = v52;
    v63[2].n128_u64[0] = v64;
    v63[2].n128_u64[1] = v65;
    sub_1BE9BF484();
    sub_1BE9B6958();
  }
LABEL_16:
  v66 = v91;
  sub_1BE9BD864();
  v67 = *v66;
  if ((unint64_t)*v66 >> 62)
  {
    sub_1BE9F5454();
    v75 = v53;
    sub_1BE9E166C();
    sub_1BE9BEF38(&qword_1EF5709D8);
    v69 = _bridgeCocoaArray<A>(_:)();
    sub_1BE9B6958();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_1BE9F5454();
    v68 = v53;
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1BE9B6958();
    v69 = v67;
  }
  sub_1BE9BD864();
  v70 = *(_QWORD *)(v104 + 16);
  objc_allocWithZone((Class)type metadata accessor for TrafficLogMessage());
  v71 = v106;
  v72 = v106;
  sub_1BE9E166C();
  v73 = TrafficLogMessage.init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(v36, v37, (char *)v53, v69, v108, v71, v70);
  swift_release();
  sub_1BE9BF4D0();

  sub_1BE9C6C4C();
  return v73;
}

uint64_t sub_1BE9F03F0(uint64_t a1, uint64_t a2, void *a3, const void *a4)
{
  void (*v7)(_QWORD *, uint64_t, unint64_t, uint64_t (*)(), uint64_t);
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[4];

  v7 = *(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  v15[3] = swift_getObjectType();
  v15[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v8 = a3;
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = _Block_copy(a4);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  v7(v15, v9, v11, sub_1BE9F4DF0, v13);
  swift_release();
  sub_1BE9BE5BC(v9, v11);
  swift_release();
  return sub_1BE9E13DC((uint64_t)v15);
}

uint64_t sub_1BE9F04D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;
  void *v18;
  unint64_t v19;
  unint64_t v20;

  sub_1BE9BEE88((uint64_t)a1, (uint64_t)&v19);
  sub_1BE9ECFF0(0, &qword_1EF5709E8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_1BE9BD864();
    v9 = v18;
    MEMORY[0x1C3B823C0]();
    sub_1BE9E040C(*(_QWORD *)((*(_QWORD *)(a6 + 16) & 0xFFFFFFFFFFFFF8) + 0x10));
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    sub_1BE9BEF38(&qword_1EF5709E0);
    v11 = sub_1BE9B69EC();
    *(_OWORD *)(v11 + 16) = xmmword_1BECB99E0;
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v19 = 0xD000000000000021;
    v20 = 0x80000001BECBE140;
    v12 = sub_1BE9F4DA8(a1, a1[3]);
    MEMORY[0x1E0C80A78](v12);
    sub_1BE9C6CEC();
    (*(void (**)(_QWORD *))(v13 + 16))(a1);
    v14._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = v19;
    v16 = v20;
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 32) = v15;
    *(_QWORD *)(v11 + 40) = v16;
    sub_1BE9BF484();
    v10 = swift_bridgeObjectRelease();
  }
  return a4(v10);
}

uint64_t sub_1BE9F06A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  sub_1BE9BEE88((uint64_t)a1, (uint64_t)&v21);
  sub_1BE9BEF38(&qword_1EF5709D8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_beginAccess();
    v9 = swift_unknownObjectRetain();
    MEMORY[0x1C3B823C0](v9);
    sub_1BE9E040C(*(_QWORD *)((*(_QWORD *)(a6 + 16) & 0xFFFFFFFFFFFFF8) + 0x10));
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    v10 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1BE9BEF38(&qword_1EF5709E0);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1BECB99E0;
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v12._object = (void *)0x80000001BECBE170;
    v12._countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v12);
    v13 = sub_1BE9F4DA8(a1, a1[3]);
    MEMORY[0x1E0C80A78](v13);
    (*(void (**)(char *))(v15 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = v21;
    v18 = v22;
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 32) = v17;
    *(_QWORD *)(v11 + 40) = v18;
    print(_:separator:terminator:)();
    v10 = swift_bridgeObjectRelease();
  }
  return a4(v10);
}

void sub_1BE9F088C(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void sub_1BE9F08E0(void *a1, uint64_t a2, void *a3, dispatch_group_t group, Swift::Int a5, uint64_t a6, void *a7)
{
  uint64_t v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  if (a1)
  {
    sub_1BE9BEF38(&qword_1EF5709E0);
    v14 = sub_1BE9B69EC();
    *(_OWORD *)(v14 + 16) = xmmword_1BECB99E0;
    v15 = a1;
    _StringGuts.grow(_:)(a5);
    v16._countAndFlagsBits = a6;
    v16._object = a7;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a2;
    v17._object = a3;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 8250;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    swift_getErrorValue();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0xE000000000000000;
    sub_1BE9BF484();
    swift_bridgeObjectRelease();

  }
  dispatch_group_leave(group);
}

id TrafficLogParser.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TrafficLogParser.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  v1 = OBJC_IVAR___CKDTrafficLogParser_lock;
  sub_1BE9BEF38(&qword_1EF570978);
  v2 = sub_1BE9B69EC();
  *(_DWORD *)(v2 + 32) = 0;
  v3 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)&v0[v1] = v2;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for TrafficLogParser();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for TrafficLogParser()
{
  return objc_opt_self();
}

id TrafficLogParser.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrafficLogParser();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for TrafficLogParser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrafficLogParser.accumulatedChunkedMessages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of TrafficLogParser.parse(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of TrafficLogParser.consumeParsedTrafficLogs()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t destroy for TrafficLogParser.State()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s14CloudKitDaemon16TrafficLogParserC5StateVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  sub_1BE9BF3F4();
  sub_1BE9B69D4();
}

_QWORD *assignWithCopy for TrafficLogParser.State(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PartialTrafficLog.RequestBodyStreamReset(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for TrafficLogParser.State(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrafficLogParser.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrafficLogParser.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrafficLogParser.State()
{
  return &type metadata for TrafficLogParser.State;
}

char *sub_1BE9F0D18(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_1BE9F0D9C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

uint64_t sub_1BE9F0E20(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BE9BE7AC(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CKLogEvent);
}

char *sub_1BE9F0E2C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

void sub_1BE9F0EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    sub_1BE9BEF38((uint64_t *)&unk_1EF570348);
    v4 = (_QWORD *)sub_1BE9B69EC();
    v5 = j__malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  sub_1BE9B69D4();
}

void sub_1BE9F0F0C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v4 = String.UTF16View.index(_:offsetBy:)();
    sub_1BE9F543C(v4);
  }
  else
  {
    v3 = MEMORY[0x1C3B82360](15, a1 >> 16);
    sub_1BE9F543C(v3);
  }
  sub_1BE9B69D4();
}

uint64_t sub_1BE9F0F60(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_1BE9F0F7C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    sub_1BE9BE684();
    if (v7 != v8)
    {
      sub_1BE9B69F4();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1BE9BDAF0();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    sub_1BE9BEF38(&qword_1ED7003F8);
    v11 = (char *)sub_1BE9B69EC();
    j__malloc_size(v11);
    sub_1BE9F54F4();
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_1BE9F0D18(v14, v9, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BE9EA6D4((unint64_t)v14, v9, (unint64_t)v13);
  }
  sub_1BE9F5508();
  sub_1BE9B6960();
}

void sub_1BE9F102C()
{
  sub_1BE9F1064();
}

void sub_1BE9F1048()
{
  sub_1BE9C91C0();
}

void sub_1BE9F1064()
{
  uint64_t v0;
  void (*v1)(unint64_t, uint64_t, unint64_t);
  void (*v2)(_QWORD);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  sub_1BE9BE394();
  if ((v6 & 1) != 0)
  {
    sub_1BE9BE684();
    if (v8 != v9)
    {
      sub_1BE9B69F4();
      if (v8)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_1BE9BDAF0();
    }
  }
  else
  {
    v7 = v4;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (!v11)
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  sub_1BE9BEF38(v5);
  v12 = *(_QWORD *)(((uint64_t (*)(_QWORD))v2)(0) - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (_QWORD *)swift_allocObject();
  v16 = j__malloc_size(v15);
  if (!v13)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v16 - v14 == 0x8000000000000000 && v13 == -1)
    goto LABEL_23;
  v15[2] = v10;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v13);
LABEL_18:
  v2(0);
  sub_1BE9F54BC();
  v19 = (unint64_t)v15 + v18;
  v20 = v0 + v18;
  if ((v3 & 1) != 0)
  {
    sub_1BE9BE7AC(v20, v10, v19, v2);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v20, v10, v19);
  }
  sub_1BE9F5508();
}

uint64_t sub_1BE9F1184(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1BE9F4C1C();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1BE9F127C(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_1BE9F11FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for PartialTrafficLog(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1BE9F4DFC();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1BE9F1E74(v6);
  *a1 = v3;
}

void sub_1BE9F127C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  char *v46;
  id v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  char *v89;
  char v90;
  char *v91;
  char v92;
  void (*v93)(char *, uint64_t);
  void *v94;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  char v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  Swift::Int v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;

  v2 = v1;
  v4 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v160 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v170 = (uint64_t)&v160 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v160 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v160 - v17;
  MEMORY[0x1E0C80A78](v16);
  v177 = (char *)&v160 - v19;
  v20 = type metadata accessor for Date();
  v185 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v181 = (char *)&v160 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v186 = (char *)&v160 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v169 = (char *)&v160 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v176 = (char *)&v160 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v164 = (char *)&v160 - v30;
  MEMORY[0x1E0C80A78](v29);
  v165 = (char *)&v160 - v31;
  v32 = a1[1];
  v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
      if (v32)
        sub_1BE9F2A70(0, v32, 1, a1);
      return;
    }
    goto LABEL_152;
  }
  v163 = v33;
  v34 = sub_1BE9E026C(v32 / 2);
  v178 = v35;
  v187 = v34;
  v172 = v32;
  v162 = a1;
  if (v32 <= 0)
  {
LABEL_116:
    v38 = MEMORY[0x1E0DEE9D8];
    v98 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_117:
    if (v98 < 2)
    {
LABEL_128:
      swift_bridgeObjectRelease();
      if (v172 >= -1)
        goto LABEL_129;
      goto LABEL_156;
    }
    v153 = *v162;
    while (1)
    {
      v154 = v98 - 2;
      if (v98 < 2)
        break;
      if (!v153)
        goto LABEL_160;
      v155 = *(_QWORD *)(v38 + 32 + 16 * v154);
      v156 = *(_QWORD *)(v38 + 32 + 16 * (v98 - 1) + 8);
      sub_1BE9F2FA8((char *)(v153 + 8 * v155), (char *)(v153 + 8 * *(_QWORD *)(v38 + 32 + 16 * (v98 - 1))), (char *)(v153 + 8 * v156), v178);
      if (v2)
        goto LABEL_114;
      if (v156 < v155)
        goto LABEL_147;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BE9F3AF8(v38);
        v38 = v159;
      }
      if (v154 >= *(_QWORD *)(v38 + 16))
        goto LABEL_148;
      v157 = (_QWORD *)(v38 + 32 + 16 * v154);
      *v157 = v155;
      v157[1] = v156;
      v158 = *(_QWORD *)(v38 + 16);
      if (v98 > v158)
        goto LABEL_149;
      memmove((void *)(v38 + 32 + 16 * (v98 - 1)), (const void *)(v38 + 32 + 16 * v98), 16 * (v158 - v98));
      *(_QWORD *)(v38 + 16) = v158 - 1;
      v98 = v158 - 1;
      if (v158 <= 2)
        goto LABEL_128;
    }
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    return;
  }
  v168 = v15;
  v180 = v7;
  v36 = 0;
  v37 = *a1;
  v161 = *a1 - 8;
  v38 = MEMORY[0x1E0DEE9D8];
  v39 = v172;
  v174 = v18;
  v40 = (uint64_t)v177;
  v184 = v37;
  v182 = v10;
  v171 = v20;
  while (1)
  {
    v41 = v36;
    v42 = v36 + 1;
    v175 = v41;
    v166 = v38;
    if (v42 >= v39)
    {
      v46 = v181;
      v49 = v42;
    }
    else
    {
      v179 = v2;
      v43 = *(void **)(v37 + 8 * v42);
      v44 = *(void **)(v37 + 8 * v41);
      sub_1BE9E2CB8((uint64_t)v43 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v40);
      v45 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v40, 1, v20);
      v46 = v181;
      if (v45 == 1)
      {
        v47 = v43;
        v48 = v44;
        static Date.distantPast.getter();
        sub_1BE9F4C30(v40);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v185 + 32))(v165, v40, v20);
        v50 = v43;
        v51 = v44;
      }
      v52 = v20;
      v53 = v164;
      sub_1BE9E2CB8((uint64_t)v44 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v18);
      if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v18, 1, v52) == 1)
      {
        static Date.distantPast.getter();
        sub_1BE9F4C30((uint64_t)v18);
        v54 = v185;
      }
      else
      {
        v54 = v185;
        (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v53, v18, v52);
      }
      v55 = v165;
      LODWORD(v183) = static Date.< infix(_:_:)();
      v56 = *(void (**)(char *, uint64_t))(v54 + 8);
      v56(v53, v52);
      v56(v55, v52);

      v57 = v175;
      v20 = v52;
      if (v175 + 2 >= v172)
      {
        v37 = v184;
        v49 = v175 + 2;
      }
      else
      {
        v37 = v184;
        while (1)
        {
          v58 = v37 + 8 * v57;
          v59 = *(void **)(v58 + 8);
          v60 = *(void **)(v58 + 16);
          v61 = (uint64_t)v168;
          sub_1BE9E2CB8((uint64_t)v60 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v168);
          if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v61, 1, v20) == 1)
          {
            v62 = v60;
            v63 = v59;
            static Date.distantPast.getter();
            sub_1BE9F4C30(v61);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v185 + 32))(v176, v61, v20);
            v64 = v60;
            v65 = v59;
          }
          v66 = v170;
          sub_1BE9E2CB8((uint64_t)v59 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v170);
          v67 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v66, 1, v20);
          v68 = v20;
          v69 = v169;
          if (v67 == 1)
          {
            static Date.distantPast.getter();
            sub_1BE9F4C30(v66);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v185 + 32))(v169, v66, v68);
          }
          v70 = v176;
          v71 = static Date.< infix(_:_:)();
          v56(v69, v68);
          v56(v70, v68);

          v20 = v68;
          if (((v183 ^ v71) & 1) != 0)
            break;
          v72 = v57 + 3;
          ++v57;
          v37 = v184;
          if (v72 >= v172)
          {
            v49 = v172;
            v18 = v174;
            v46 = v181;
            goto LABEL_25;
          }
        }
        v49 = v57 + 2;
        v18 = v174;
        v46 = v181;
        v37 = v184;
      }
LABEL_25:
      v2 = v179;
      if ((v183 & 1) != 0)
      {
        v38 = v166;
        if (v49 < v175)
          goto LABEL_153;
        if (v175 < v49)
        {
          v73 = (uint64_t *)(v161 + 8 * v49);
          v74 = v49;
          v75 = v175;
          v76 = (uint64_t *)(v37 + 8 * v175);
          do
          {
            if (v75 != --v74)
            {
              if (!v37)
                goto LABEL_159;
              v77 = *v76;
              *v76 = *v73;
              *v73 = v77;
            }
            ++v75;
            --v73;
            ++v76;
          }
          while (v75 < v74);
        }
      }
      else
      {
        v38 = v166;
      }
    }
    if (v49 < v172)
    {
      if (__OFSUB__(v49, v175))
        goto LABEL_151;
      v78 = (uint64_t)v180;
      if (v49 - v175 >= v163)
        goto LABEL_43;
      v79 = v175 + v163;
      if (__OFADD__(v175, v163))
        goto LABEL_154;
      if (v79 >= v172)
        v79 = v172;
      if (v79 < v175)
        goto LABEL_155;
      if (v49 == v79)
      {
LABEL_43:
        v38 = v166;
      }
      else
      {
        v167 = v79;
        v179 = v2;
        v80 = v161 + 8 * v49;
        do
        {
          v183 = v49;
          v81 = *(void **)(v37 + 8 * v49);
          v82 = v175;
          v173 = v80;
          while (1)
          {
            v83 = *(void **)v80;
            sub_1BE9E2CB8((uint64_t)v81 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v10);
            if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v10, 1, v20) == 1)
            {
              v84 = v81;
              v85 = v83;
              static Date.distantPast.getter();
              sub_1BE9F4C30((uint64_t)v10);
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v186, v10, v20);
              v86 = v81;
              v87 = v83;
            }
            sub_1BE9E2CB8((uint64_t)v83 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v78);
            if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v78, 1, v20) == 1)
            {
              static Date.distantPast.getter();
              sub_1BE9F4C30(v78);
              v88 = v185;
            }
            else
            {
              v88 = v185;
              (*(void (**)(char *, uint64_t, uint64_t))(v185 + 32))(v46, v78, v20);
            }
            v89 = v186;
            v90 = static Date.< infix(_:_:)();
            v91 = v46;
            v92 = v90;
            v93 = *(void (**)(char *, uint64_t))(v88 + 8);
            v93(v91, v20);
            v93(v89, v20);

            if ((v92 & 1) == 0)
              break;
            v10 = v182;
            v37 = v184;
            if (!v184)
              goto LABEL_157;
            v94 = *(void **)v80;
            v81 = *(void **)(v80 + 8);
            *(_QWORD *)v80 = v81;
            *(_QWORD *)(v80 + 8) = v94;
            v80 -= 8;
            ++v82;
            v78 = (uint64_t)v180;
            v46 = v181;
            if (v183 == v82)
              goto LABEL_57;
          }
          v78 = (uint64_t)v180;
          v46 = v181;
          v10 = v182;
          v37 = v184;
LABEL_57:
          v49 = v183 + 1;
          v80 = v173 + 8;
        }
        while (v183 + 1 != v167);
        v38 = v166;
        v49 = v167;
        v2 = v179;
        v18 = v174;
      }
    }
    if (v49 < v175)
      goto LABEL_150;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v183 = v49;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1BE9F3A30(0, *(_QWORD *)(v38 + 16) + 1, 1, (char *)v38);
      v38 = v151;
    }
    v97 = *(_QWORD *)(v38 + 16);
    v96 = *(_QWORD *)(v38 + 24);
    v98 = v97 + 1;
    v37 = v184;
    v179 = v2;
    if (v97 >= v96 >> 1)
    {
      sub_1BE9F3A30(v96 > 1, v97 + 1, 1, (char *)v38);
      v37 = v184;
      v38 = v152;
    }
    *(_QWORD *)(v38 + 16) = v98;
    v99 = v38 + 32;
    v100 = (uint64_t *)(v38 + 32 + 16 * v97);
    v101 = v183;
    *v100 = v175;
    v100[1] = v101;
    if (v97)
      break;
    v98 = 1;
    v40 = (uint64_t)v177;
LABEL_108:
    v39 = v172;
    v36 = v183;
    v2 = v179;
    if (v183 >= v172)
      goto LABEL_117;
  }
  v40 = (uint64_t)v177;
  while (1)
  {
    v102 = v98 - 1;
    if (v98 >= 4)
    {
      v107 = v99 + 16 * v98;
      v108 = *(_QWORD *)(v107 - 64);
      v109 = *(_QWORD *)(v107 - 56);
      v113 = __OFSUB__(v109, v108);
      v110 = v109 - v108;
      if (v113)
        goto LABEL_135;
      v112 = *(_QWORD *)(v107 - 48);
      v111 = *(_QWORD *)(v107 - 40);
      v113 = __OFSUB__(v111, v112);
      v105 = v111 - v112;
      v106 = v113;
      if (v113)
        goto LABEL_136;
      v114 = v98 - 2;
      v115 = (uint64_t *)(v99 + 16 * (v98 - 2));
      v117 = *v115;
      v116 = v115[1];
      v113 = __OFSUB__(v116, v117);
      v118 = v116 - v117;
      if (v113)
        goto LABEL_137;
      v113 = __OFADD__(v105, v118);
      v119 = v105 + v118;
      if (v113)
        goto LABEL_139;
      if (v119 >= v110)
      {
        v137 = (uint64_t *)(v99 + 16 * v102);
        v139 = *v137;
        v138 = v137[1];
        v113 = __OFSUB__(v138, v139);
        v140 = v138 - v139;
        if (v113)
          goto LABEL_145;
        v130 = v105 < v140;
        goto LABEL_97;
      }
    }
    else
    {
      if (v98 != 3)
      {
        v131 = *(_QWORD *)(v38 + 32);
        v132 = *(_QWORD *)(v38 + 40);
        v113 = __OFSUB__(v132, v131);
        v124 = v132 - v131;
        v125 = v113;
        goto LABEL_91;
      }
      v104 = *(_QWORD *)(v38 + 32);
      v103 = *(_QWORD *)(v38 + 40);
      v113 = __OFSUB__(v103, v104);
      v105 = v103 - v104;
      v106 = v113;
    }
    if ((v106 & 1) != 0)
      goto LABEL_138;
    v114 = v98 - 2;
    v120 = (uint64_t *)(v99 + 16 * (v98 - 2));
    v122 = *v120;
    v121 = v120[1];
    v123 = __OFSUB__(v121, v122);
    v124 = v121 - v122;
    v125 = v123;
    if (v123)
      goto LABEL_140;
    v126 = (uint64_t *)(v99 + 16 * v102);
    v128 = *v126;
    v127 = v126[1];
    v113 = __OFSUB__(v127, v128);
    v129 = v127 - v128;
    if (v113)
      goto LABEL_142;
    if (__OFADD__(v124, v129))
      goto LABEL_144;
    if (v124 + v129 >= v105)
    {
      v130 = v105 < v129;
LABEL_97:
      if (v130)
        v102 = v114;
      goto LABEL_99;
    }
LABEL_91:
    if ((v125 & 1) != 0)
      goto LABEL_141;
    v133 = (uint64_t *)(v99 + 16 * v102);
    v135 = *v133;
    v134 = v133[1];
    v113 = __OFSUB__(v134, v135);
    v136 = v134 - v135;
    if (v113)
      goto LABEL_143;
    if (v136 < v124)
      goto LABEL_108;
LABEL_99:
    v141 = v102 - 1;
    if (v102 - 1 >= v98)
    {
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    if (!v37)
      goto LABEL_158;
    v142 = v38;
    v143 = (uint64_t *)(v99 + 16 * v141);
    v144 = *v143;
    v145 = v99;
    v146 = v102;
    v147 = (_QWORD *)(v99 + 16 * v102);
    v148 = v147[1];
    v149 = v179;
    sub_1BE9F2FA8((char *)(v37 + 8 * *v143), (char *)(v37 + 8 * *v147), (char *)(v37 + 8 * v148), v178);
    v179 = v149;
    if (v149)
      break;
    if (v148 < v144)
      goto LABEL_132;
    if (v146 > *(_QWORD *)(v142 + 16))
      goto LABEL_133;
    *v143 = v144;
    *(_QWORD *)(v145 + 16 * v141 + 8) = v148;
    v150 = *(_QWORD *)(v142 + 16);
    if (v146 >= v150)
      goto LABEL_134;
    v38 = v142;
    v98 = v150 - 1;
    memmove(v147, v147 + 2, 16 * (v150 - 1 - v146));
    v99 = v145;
    *(_QWORD *)(v142 + 16) = v150 - 1;
    v130 = v150 > 2;
    v10 = v182;
    v18 = v174;
    v40 = (uint64_t)v177;
    v37 = v184;
    v20 = v171;
    if (!v130)
      goto LABEL_108;
  }
  v2 = v179;
LABEL_114:
  swift_bridgeObjectRelease();
  if (v172 < -1)
  {
    __break(1u);
    goto LABEL_116;
  }
LABEL_129:
  *(_QWORD *)((v187 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()();
  swift_bridgeObjectRelease();
}

void sub_1BE9F1E74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  Swift::Int v33;
  unint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::Int v60;
  Swift::Int v61;
  uint64_t v62;
  uint64_t v64;
  Swift::Int v65;
  Swift::Int v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int EnumCaseMultiPayload;
  Swift::Int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  Swift::Int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;

  v2 = v1;
  v176 = type metadata accessor for PartialTrafficLog(0);
  v166 = *(_QWORD *)(v176 - 8);
  v4 = MEMORY[0x1E0C80A78](v176);
  v157 = (uint64_t)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v177 = (uint64_t)&v145 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v171 = (uint64_t)&v145 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v170 = (uint64_t)&v145 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v169 = (uint64_t)&v145 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v168 = (uint64_t)&v145 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v161 = (uint64_t)&v145 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v160 = (uint64_t)&v145 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v159 = (uint64_t)&v145 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v158 = (uint64_t)&v145 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v151 = (uint64_t)&v145 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v150 = (uint64_t)&v145 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v149 = (uint64_t)&v145 - v29;
  MEMORY[0x1E0C80A78](v28);
  v148 = (uint64_t)&v145 - v30;
  v31 = a1[1];
  v32 = _minimumMergeRunLength(_:)(v31);
  if (v32 >= v31)
  {
    if ((v31 & 0x8000000000000000) == 0)
    {
      if (v31)
        sub_1BE9F2CF8(0, v31, 1, a1);
      return;
    }
    goto LABEL_140;
  }
  v33 = v32;
  v146 = sub_1BE9E01B0(v31 / 2);
  v165 = v34;
  v154 = v31;
  if (v31 <= 0)
  {
LABEL_104:
    v167 = (char *)MEMORY[0x1E0DEE9D8];
    v84 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_105:
    if (v84 < 2)
    {
LABEL_116:
      swift_bridgeObjectRelease();
      if (v31 >= -1)
        goto LABEL_117;
      goto LABEL_144;
    }
    v138 = *a1;
    a1 = (uint64_t *)v167;
    while (1)
    {
      v139 = v84 - 2;
      if (v84 < 2)
        break;
      if (!v138)
        goto LABEL_148;
      v31 = v84 - 1;
      v140 = a1[2 * v139 + 4];
      v141 = a1[2 * v84 + 3];
      sub_1BE9F34D8(v138 + *(_QWORD *)(v166 + 72) * v140, v138 + *(_QWORD *)(v166 + 72) * a1[2 * v84 + 2], v138 + *(_QWORD *)(v166 + 72) * v141, v165);
      if (v2)
        goto LABEL_102;
      if (v141 < v140)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BE9F3AF8((uint64_t)a1);
        a1 = v144;
      }
      if (v139 >= a1[2])
        goto LABEL_136;
      v142 = &a1[2 * v139 + 4];
      *v142 = v140;
      v142[1] = v141;
      v143 = a1[2];
      if (v84 > v143)
        goto LABEL_137;
      memmove(&a1[2 * v31 + 4], &a1[2 * v84 + 4], 16 * (v143 - v84));
      a1[2] = v143 - 1;
      v84 = v143 - 1;
      v31 = v154;
      if (v143 <= 2)
        goto LABEL_116;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    return;
  }
  v35 = 0;
  v167 = (char *)MEMORY[0x1E0DEE9D8];
  v36 = v31;
  v178 = a1;
  v152 = v33;
  while (1)
  {
    v37 = v35;
    v38 = v35 + 1;
    v164 = v35;
    if (v35 + 1 >= v36)
    {
      v47 = v35 + 1;
    }
    else
    {
      v39 = *a1;
      v40 = *(_QWORD *)(v166 + 72);
      v41 = v148;
      sub_1BE9BDE90(*a1 + v40 * v38, v148);
      v172 = v36;
      v42 = v149;
      sub_1BE9BDE90(v39 + v40 * v37, v149);
      v43 = v150;
      sub_1BE9BDE90(v41, v150);
      LODWORD(v163) = swift_getEnumCaseMultiPayload();
      sub_1BE9BE8F8(v43, type metadata accessor for PartialTrafficLog);
      v44 = v151;
      sub_1BE9BDE90(v42, v151);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v45 = v44;
      v37 = v164;
      sub_1BE9BE8F8(v45, type metadata accessor for PartialTrafficLog);
      v46 = v42;
      v36 = v172;
      sub_1BE9BE8F8(v46, type metadata accessor for PartialTrafficLog);
      sub_1BE9BE8F8(v41, type metadata accessor for PartialTrafficLog);
      v47 = v37 + 2;
      v153 = v39;
      v173 = v40;
      if (v37 + 2 < v36)
      {
        v147 = v2;
        v156 = v40 * v38;
        v48 = v39;
        v155 = v40 * v47;
        while (1)
        {
          v49 = v47;
          LODWORD(v175) = v163 < EnumCaseMultiPayload;
          v50 = v158;
          sub_1BE9BDE90(v48 + v155, v158);
          v51 = v159;
          sub_1BE9BDE90(v48 + v156, v159);
          v52 = v160;
          sub_1BE9BDE90(v50, v160);
          LODWORD(v174) = swift_getEnumCaseMultiPayload();
          sub_1BE9BE8F8(v52, type metadata accessor for PartialTrafficLog);
          v53 = v161;
          sub_1BE9BDE90(v51, v161);
          v54 = swift_getEnumCaseMultiPayload();
          sub_1BE9BE8F8(v53, type metadata accessor for PartialTrafficLog);
          v55 = v174 >= v54;
          sub_1BE9BE8F8(v51, type metadata accessor for PartialTrafficLog);
          sub_1BE9BE8F8(v50, type metadata accessor for PartialTrafficLog);
          if ((_DWORD)v175 == v55)
            break;
          v47 = v49 + 1;
          v36 = v172;
          v48 += v173;
          if (v49 + 1 >= v172)
          {
            v47 = v172;
            v2 = v147;
            v37 = v164;
            goto LABEL_12;
          }
        }
        v2 = v147;
        v47 = v49;
        v37 = v164;
        v36 = v172;
LABEL_12:
        v39 = v153;
      }
      v33 = v152;
      if (v163 < EnumCaseMultiPayload)
      {
        if (v47 < v37)
          goto LABEL_141;
        if (v37 < v47)
        {
          v147 = v2;
          v56 = 0;
          v57 = v37;
          v58 = v173;
          v59 = v173 * (v47 - 1);
          v60 = v47 * v173;
          v61 = v57;
          v62 = v57 * v173;
          do
          {
            if (v61 != v47 + v56 - 1)
            {
              if (!v39)
                goto LABEL_147;
              v175 = v39 + v59;
              sub_1BE9F4BA8(v39 + v62, v157, type metadata accessor for PartialTrafficLog);
              if (v62 < v59 || v39 + v62 >= (unint64_t)(v39 + v60))
              {
                v64 = v175;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v64 = v175;
                if (v62 != v59)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_1BE9F4BA8(v157, v64, type metadata accessor for PartialTrafficLog);
              v39 = v153;
              v58 = v173;
            }
            ++v61;
            --v56;
            v59 -= v58;
            v60 -= v58;
            v62 += v58;
          }
          while (v61 < v47 + v56);
          v2 = v147;
          v33 = v152;
          v37 = v164;
          v36 = v172;
        }
      }
    }
    if (v47 < v36)
    {
      if (__OFSUB__(v47, v37))
        goto LABEL_139;
      if (v47 - v37 < v33)
      {
        if (__OFADD__(v37, v33))
          goto LABEL_142;
        if (v37 + v33 >= v36)
          v65 = v36;
        else
          v65 = v37 + v33;
        if (v65 < v37)
          goto LABEL_143;
        if (v47 != v65)
        {
          v147 = v2;
          v66 = *(_QWORD *)(v166 + 72);
          v67 = v66 * (v47 - 1);
          v172 = v66;
          v68 = v47 * v66;
          v163 = v65;
          do
          {
            v69 = 0;
            v70 = v37;
            v174 = v67;
            v175 = v47;
            v173 = v68;
            while (1)
            {
              v71 = *a1;
              v72 = v68 + v69 + *a1;
              v73 = v168;
              sub_1BE9BDE90(v72, v168);
              v74 = v169;
              sub_1BE9BDE90(v67 + v69 + v71, v169);
              v75 = v170;
              sub_1BE9BDE90(v73, v170);
              LODWORD(v71) = swift_getEnumCaseMultiPayload();
              sub_1BE9BE8F8(v75, type metadata accessor for PartialTrafficLog);
              v76 = v171;
              sub_1BE9BDE90(v74, v171);
              v77 = swift_getEnumCaseMultiPayload();
              sub_1BE9BE8F8(v76, type metadata accessor for PartialTrafficLog);
              sub_1BE9BE8F8(v74, type metadata accessor for PartialTrafficLog);
              sub_1BE9BE8F8(v73, type metadata accessor for PartialTrafficLog);
              if (v71 >= v77)
                break;
              v78 = *v178;
              if (!*v178)
                goto LABEL_145;
              v68 = v173;
              v67 = v174;
              v79 = v78 + v174 + v69;
              sub_1BE9F4BA8(v78 + v173 + v69, v177, type metadata accessor for PartialTrafficLog);
              swift_arrayInitWithTakeFrontToBack();
              sub_1BE9F4BA8(v177, v79, type metadata accessor for PartialTrafficLog);
              v69 -= v172;
              ++v70;
              v80 = v175;
              a1 = v178;
              if (v175 == v70)
                goto LABEL_46;
            }
            a1 = v178;
            v67 = v174;
            v80 = v175;
            v68 = v173;
LABEL_46:
            v47 = v80 + 1;
            v67 += v172;
            v68 += v172;
            v37 = v164;
          }
          while (v47 != v163);
          v47 = v163;
          v2 = v147;
        }
      }
    }
    if (v47 < v37)
      goto LABEL_138;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v175 = v47;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1BE9F3A30(0, *((_QWORD *)v167 + 2) + 1, 1, v167);
      v167 = v136;
    }
    v83 = *((_QWORD *)v167 + 2);
    v82 = *((_QWORD *)v167 + 3);
    v84 = v83 + 1;
    if (v83 >= v82 >> 1)
    {
      sub_1BE9F3A30(v82 > 1, v83 + 1, 1, v167);
      v167 = v137;
    }
    v85 = v167;
    *((_QWORD *)v167 + 2) = v84;
    v86 = v85 + 32;
    v87 = &v85[16 * v83 + 32];
    v88 = v175;
    *(_QWORD *)v87 = v37;
    *((_QWORD *)v87 + 1) = v88;
    if (v83)
      break;
    v84 = 1;
LABEL_96:
    v36 = a1[1];
    v35 = v175;
    v31 = v154;
    v33 = v152;
    if (v175 >= v36)
      goto LABEL_105;
  }
  while (1)
  {
    v89 = v84 - 1;
    if (v84 >= 4)
    {
      v94 = &v86[16 * v84];
      v95 = *((_QWORD *)v94 - 8);
      v96 = *((_QWORD *)v94 - 7);
      v100 = __OFSUB__(v96, v95);
      v97 = v96 - v95;
      if (v100)
        goto LABEL_123;
      v99 = *((_QWORD *)v94 - 6);
      v98 = *((_QWORD *)v94 - 5);
      v100 = __OFSUB__(v98, v99);
      v92 = v98 - v99;
      v93 = v100;
      if (v100)
        goto LABEL_124;
      v101 = v84 - 2;
      v102 = &v86[16 * v84 - 32];
      v104 = *(_QWORD *)v102;
      v103 = *((_QWORD *)v102 + 1);
      v100 = __OFSUB__(v103, v104);
      v105 = v103 - v104;
      if (v100)
        goto LABEL_125;
      v100 = __OFADD__(v92, v105);
      v106 = v92 + v105;
      if (v100)
        goto LABEL_127;
      if (v106 >= v97)
      {
        v124 = &v86[16 * v89];
        v126 = *(_QWORD *)v124;
        v125 = *((_QWORD *)v124 + 1);
        v100 = __OFSUB__(v125, v126);
        v127 = v125 - v126;
        if (v100)
          goto LABEL_133;
        v117 = v92 < v127;
        goto LABEL_85;
      }
    }
    else
    {
      if (v84 != 3)
      {
        v118 = *((_QWORD *)v167 + 4);
        v119 = *((_QWORD *)v167 + 5);
        v100 = __OFSUB__(v119, v118);
        v111 = v119 - v118;
        v112 = v100;
        goto LABEL_79;
      }
      v91 = *((_QWORD *)v167 + 4);
      v90 = *((_QWORD *)v167 + 5);
      v100 = __OFSUB__(v90, v91);
      v92 = v90 - v91;
      v93 = v100;
    }
    if ((v93 & 1) != 0)
      goto LABEL_126;
    v101 = v84 - 2;
    v107 = &v86[16 * v84 - 32];
    v109 = *(_QWORD *)v107;
    v108 = *((_QWORD *)v107 + 1);
    v110 = __OFSUB__(v108, v109);
    v111 = v108 - v109;
    v112 = v110;
    if (v110)
      goto LABEL_128;
    v113 = &v86[16 * v89];
    v115 = *(_QWORD *)v113;
    v114 = *((_QWORD *)v113 + 1);
    v100 = __OFSUB__(v114, v115);
    v116 = v114 - v115;
    if (v100)
      goto LABEL_130;
    if (__OFADD__(v111, v116))
      goto LABEL_132;
    if (v111 + v116 >= v92)
    {
      v117 = v92 < v116;
LABEL_85:
      if (v117)
        v89 = v101;
      goto LABEL_87;
    }
LABEL_79:
    if ((v112 & 1) != 0)
      goto LABEL_129;
    v120 = &v86[16 * v89];
    v122 = *(_QWORD *)v120;
    v121 = *((_QWORD *)v120 + 1);
    v100 = __OFSUB__(v121, v122);
    v123 = v121 - v122;
    if (v100)
      goto LABEL_131;
    if (v123 < v111)
      goto LABEL_96;
LABEL_87:
    v128 = v89 - 1;
    if (v89 - 1 >= v84)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    v129 = *a1;
    if (!*a1)
      goto LABEL_146;
    v31 = (Swift::Int)&v86[16 * v128];
    v130 = *(_QWORD *)v31;
    v131 = &v86[16 * v89];
    v132 = *((_QWORD *)v131 + 1);
    sub_1BE9F34D8(v129 + *(_QWORD *)(v166 + 72) * *(_QWORD *)v31, v129 + *(_QWORD *)(v166 + 72) * *(_QWORD *)v131, v129 + *(_QWORD *)(v166 + 72) * v132, v165);
    if (v2)
      break;
    if (v132 < v130)
      goto LABEL_120;
    v133 = v167;
    if (v89 > *((_QWORD *)v167 + 2))
      goto LABEL_121;
    *(_QWORD *)v31 = v130;
    *(_QWORD *)&v86[16 * v128 + 8] = v132;
    v134 = *((_QWORD *)v133 + 2);
    if (v89 >= v134)
      goto LABEL_122;
    v135 = v133;
    v84 = v134 - 1;
    memmove(&v86[16 * v89], v131 + 16, 16 * (v134 - 1 - v89));
    *((_QWORD *)v135 + 2) = v134 - 1;
    a1 = v178;
    if (v134 <= 2)
      goto LABEL_96;
  }
  a1 = (uint64_t *)v167;
LABEL_102:
  swift_bridgeObjectRelease();
  if (v154 < -1)
  {
    __break(1u);
    goto LABEL_104;
  }
LABEL_117:
  *(_QWORD *)(v146 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_1BE9F2A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v34 = a1;
  v7 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v37 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - v10;
  v12 = type metadata accessor for Date();
  v40 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - v16;
  v33 = a2;
  if (a3 != a2)
  {
    v38 = *a4;
    v18 = v38 + 8 * a3 - 8;
    v36 = v11;
    while (2)
    {
      v39 = a3;
      v19 = *(void **)(v38 + 8 * a3);
      v20 = v34;
      v35 = v18;
      do
      {
        v21 = *(void **)v18;
        sub_1BE9E2CB8((uint64_t)v19 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v11);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v11, 1, v12) == 1)
        {
          v22 = v19;
          v23 = v21;
          static Date.distantPast.getter();
          sub_1BE9F4C30((uint64_t)v11);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v17, v11, v12);
          v24 = v19;
          v25 = v21;
        }
        v26 = v37;
        sub_1BE9E2CB8((uint64_t)v21 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v37);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v26, 1, v12) == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9F4C30(v26);
          v27 = v40;
        }
        else
        {
          v27 = v40;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v15, v26, v12);
        }
        v28 = static Date.< infix(_:_:)();
        v29 = *(void (**)(char *, uint64_t))(v27 + 8);
        v29(v15, v12);
        v29(v17, v12);

        v30 = v39;
        v11 = v36;
        if ((v28 & 1) == 0)
          break;
        if (!v38)
        {
          __break(1u);
          return;
        }
        v31 = *(void **)v18;
        v19 = *(void **)(v18 + 8);
        *(_QWORD *)v18 = v19;
        *(_QWORD *)(v18 + 8) = v31;
        v18 -= 8;
        ++v20;
      }
      while (v30 != v20);
      a3 = v30 + 1;
      v18 = v35 + 8;
      if (a3 != v33)
        continue;
      break;
    }
  }
}

void sub_1BE9F2CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int EnumCaseMultiPayload;
  uint64_t *v51;

  v39 = a1;
  v48 = type metadata accessor for PartialTrafficLog(0);
  v7 = MEMORY[0x1E0C80A78](v48);
  v49 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v43 = (uint64_t)&v37 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v42 = (uint64_t)&v37 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v41 = (uint64_t)&v37 - v14;
  MEMORY[0x1E0C80A78](v13);
  v40 = (uint64_t)&v37 - v16;
  v47 = a3;
  v38 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v18 = v17 * (v47 - 1);
    v44 = v17;
    v19 = v17 * v47;
    v20 = type metadata accessor for PartialTrafficLog;
    v51 = a4;
    while (2)
    {
      v21 = 0;
      v22 = v39;
      v45 = v19;
      v46 = v18;
      do
      {
        v23 = *v51;
        v24 = v19 + v21 + *v51;
        v25 = v40;
        sub_1BE9BDE90(v24, v40);
        v26 = v18 + v21 + v23;
        v27 = v41;
        sub_1BE9BDE90(v26, v41);
        v28 = v20;
        v29 = v42;
        sub_1BE9BDE90(v25, v42);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        sub_1BE9BE8F8(v29, v28);
        v30 = v43;
        sub_1BE9BDE90(v27, v43);
        v31 = swift_getEnumCaseMultiPayload();
        v32 = v30;
        v20 = v28;
        sub_1BE9BE8F8(v32, v28);
        v33 = v27;
        v18 = v46;
        sub_1BE9BE8F8(v33, v28);
        v34 = v25;
        v19 = v45;
        sub_1BE9BE8F8(v34, v28);
        if (EnumCaseMultiPayload >= v31)
          break;
        v35 = *v51;
        if (!*v51)
        {
          __break(1u);
          return;
        }
        v36 = v35 + v18 + v21;
        sub_1BE9F4BA8(v35 + v19 + v21, v49, v28);
        swift_arrayInitWithTakeFrontToBack();
        sub_1BE9F4BA8(v49, v36, v28);
        v21 -= v44;
        ++v22;
      }
      while (v47 != v22);
      v18 += v44;
      v19 += v44;
      if (++v47 != v38)
        continue;
      break;
    }
  }
}

uint64_t sub_1BE9F2FA8(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  char *v44;
  BOOL v45;
  unint64_t v46;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  void *v54;
  int v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  char *v61;
  int v62;
  char *v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  BOOL v67;
  char *v68;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;

  v8 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v76 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v75 = (char *)&v71 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v77 = (char *)&v71 - v14;
  MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v71 - v15;
  v16 = type metadata accessor for Date();
  v80 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v73 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v79 = (char *)&v71 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v71 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v71 - v24;
  v26 = a3 - a2;
  v27 = (a3 - a2) / 8;
  v78 = a3;
  if ((a2 - a1) / 8 >= v27)
  {
    sub_1BE9F0E2C(a2, v27, a4);
    v29 = &a4[8 * ((a3 - a2) / 8)];
    if (v26 >= 8 && a1 < a2)
    {
      v49 = v78 - 8;
      v74 = a4;
      v51 = (uint64_t)v75;
      v50 = (uint64_t)v76;
      v72 = a1;
      do
      {
        v52 = (void *)*((_QWORD *)v29 - 1);
        v82 = a2;
        v53 = a2 - 8;
        v54 = (void *)*((_QWORD *)a2 - 1);
        v78 = v53;
        sub_1BE9E2CB8((uint64_t)v52 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v51);
        v55 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v51, 1, v16);
        v77 = v29 - 8;
        if (v55 == 1)
        {
          v56 = v52;
          v57 = v54;
          static Date.distantPast.getter();
          sub_1BE9F4C30(v51);
          v58 = v80;
        }
        else
        {
          v58 = v80;
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v79, v51, v16);
          v59 = v52;
          v60 = v54;
        }
        v61 = v73;
        sub_1BE9E2CB8((uint64_t)v54 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v50);
        v62 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v50, 1, v16);
        v81 = v29;
        if (v62 == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9F4C30(v50);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v61, v50, v16);
        }
        v63 = v49 + 8;
        v64 = v79;
        v65 = static Date.< infix(_:_:)();
        v66 = *(void (**)(char *, uint64_t))(v58 + 8);
        v66(v61, v16);
        v66(v64, v16);

        if ((v65 & 1) != 0)
        {
          v67 = v63 != v82 || v49 >= v82;
          v68 = v78;
          a2 = v78;
          a4 = v74;
          v29 = v81;
        }
        else
        {
          v67 = v63 != v81 || v49 >= v81;
          v29 = v77;
          v68 = v77;
          a4 = v74;
          a2 = v82;
        }
        v51 = (uint64_t)v75;
        v50 = (uint64_t)v76;
        if (v67)
          *(_QWORD *)v49 = *(_QWORD *)v68;
        v49 -= 8;
      }
      while (v29 > a4 && a2 > v72);
    }
  }
  else
  {
    sub_1BE9F0E2C(a1, (a2 - a1) / 8, a4);
    v28 = (unint64_t)a3;
    v29 = &a4[8 * ((a2 - a1) / 8)];
    if (a2 - a1 >= 8 && (unint64_t)a2 < v28)
    {
      v31 = (uint64_t)v77;
      v32 = (uint64_t)v74;
      v81 = &a4[8 * ((a2 - a1) / 8)];
      do
      {
        v33 = a1;
        v82 = a2;
        v34 = *(void **)a2;
        v35 = *(void **)a4;
        sub_1BE9E2CB8((uint64_t)v34 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v32);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v32, 1, v16) == 1)
        {
          v36 = v34;
          v37 = v35;
          static Date.distantPast.getter();
          sub_1BE9F4C30(v32);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v25, v32, v16);
          v38 = v34;
          v39 = v35;
        }
        sub_1BE9E2CB8((uint64_t)v35 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v31);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v31, 1, v16) == 1)
        {
          static Date.distantPast.getter();
          sub_1BE9F4C30(v31);
          v40 = v80;
        }
        else
        {
          v40 = v80;
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v23, v31, v16);
        }
        v41 = static Date.< infix(_:_:)();
        v42 = *(void (**)(char *, uint64_t))(v40 + 8);
        v42(v23, v16);
        v42(v25, v16);

        if ((v41 & 1) != 0)
        {
          v43 = v82;
          a2 = v82 + 8;
          v44 = v33;
          v45 = v33 == v82;
        }
        else
        {
          v43 = a4;
          v44 = v33;
          v45 = v33 == a4;
          a4 += 8;
          a2 = v82;
        }
        v29 = v81;
        v31 = (uint64_t)v77;
        v46 = (unint64_t)v78;
        v32 = (uint64_t)v74;
        if (!v45)
          *(_QWORD *)v44 = *(_QWORD *)v43;
        a1 = v44 + 8;
      }
      while (a4 < v29 && (unint64_t)a2 < v46);
    }
    a2 = a1;
  }
  sub_1BE9F0E2C(a4, (v29 - a4) / 8, a2);
  return 1;
}

void sub_1BE9F34D8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v39;
  BOOL v41;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int EnumCaseMultiPayload;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  int64_t v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v71 = a3;
  v73 = type metadata accessor for PartialTrafficLog(0);
  v7 = MEMORY[0x1E0C80A78](v73);
  v67 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v66 = (uint64_t)&v60 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v60 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v64 = (char *)&v60 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v69 = (char *)&v60 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v68 = (unint64_t)&v60 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v63 = (char *)&v60 - v20;
  MEMORY[0x1E0C80A78](v19);
  v62 = (uint64_t)&v60 - v22;
  v23 = *(_QWORD *)(v21 + 72);
  if (!v23)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v24 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v23 == -1)
    goto LABEL_77;
  v26 = v71 - a2;
  if (v71 - a2 == 0x8000000000000000 && v23 == -1)
    goto LABEL_78;
  v28 = v24 / v23;
  v29 = v26 / v23;
  v72 = *(_QWORD *)(v21 + 72);
  if (v24 / v23 >= v26 / v23)
  {
    sub_1BE9BE7AC(a2, v26 / v23, a4, (void (*)(_QWORD))type metadata accessor for PartialTrafficLog);
    v70 = a4 + v29 * v23;
    if (v29 * v23 < 1 || a1 >= a2)
      goto LABEL_71;
    v62 = -v23;
    v63 = (char *)a4;
    v44 = v70;
    v43 = v71;
    v61 = a1;
    v46 = (uint64_t)v64;
    v45 = (uint64_t)v65;
    while (1)
    {
      v47 = v43;
      v48 = v62;
      v69 = (char *)(v44 + v62);
      v70 = a2;
      sub_1BE9BDE90(v44 + v62, v46);
      v68 = a2 + v48;
      sub_1BE9BDE90(a2 + v48, v45);
      v49 = v66;
      sub_1BE9BDE90(v46, v66);
      LODWORD(v71) = swift_getEnumCaseMultiPayload();
      sub_1BE9BE8F8(v49, type metadata accessor for PartialTrafficLog);
      v50 = v67;
      sub_1BE9BDE90(v45, v67);
      v51 = v44;
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v43 += v48;
      sub_1BE9BE8F8(v50, type metadata accessor for PartialTrafficLog);
      sub_1BE9BE8F8(v45, type metadata accessor for PartialTrafficLog);
      sub_1BE9BE8F8(v46, type metadata accessor for PartialTrafficLog);
      if (v71 >= EnumCaseMultiPayload)
      {
        v54 = v47 < v51 || v43 >= v51;
        v55 = v51;
        a2 = v70;
        if (!v54)
        {
          v56 = v61;
          if (v47 == v55)
          {
            v44 = (unint64_t)v69;
            goto LABEL_66;
          }
          v44 = (unint64_t)v69;
LABEL_63:
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_66;
        }
        v44 = (unint64_t)v69;
      }
      else
      {
        v53 = v47 < v70 || v43 >= v70;
        v44 = v51;
        if (!v53)
        {
          v56 = v61;
          if (v47 == v70)
          {
            a2 = v68;
            goto LABEL_66;
          }
          a2 = v68;
          goto LABEL_63;
        }
        a2 = v68;
      }
      swift_arrayInitWithTakeFrontToBack();
      v56 = v61;
LABEL_66:
      if (v44 <= (unint64_t)v63 || a2 <= v56)
      {
        v70 = v44;
        a4 = (unint64_t)v63;
        goto LABEL_71;
      }
    }
  }
  sub_1BE9BE7AC(a1, v24 / v23, a4, (void (*)(_QWORD))type metadata accessor for PartialTrafficLog);
  v70 = a4 + v28 * v23;
  if (v28 * v23 >= 1 && a2 < v71)
  {
    v31 = v62;
    v32 = (uint64_t)v63;
    do
    {
      sub_1BE9BDE90(a2, v31);
      sub_1BE9BDE90(a4, v32);
      v33 = v68;
      sub_1BE9BDE90(v31, v68);
      v34 = swift_getEnumCaseMultiPayload();
      sub_1BE9BE8F8(v33, type metadata accessor for PartialTrafficLog);
      v35 = (uint64_t)v69;
      sub_1BE9BDE90(v32, (uint64_t)v69);
      v36 = swift_getEnumCaseMultiPayload();
      sub_1BE9BE8F8(v35, type metadata accessor for PartialTrafficLog);
      sub_1BE9BE8F8(v32, type metadata accessor for PartialTrafficLog);
      sub_1BE9BE8F8(v31, type metadata accessor for PartialTrafficLog);
      if (v34 >= v36)
      {
        v39 = a4 + v72;
        if (a1 < a4 || a1 >= v39)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v37 = a2;
        a4 = v39;
      }
      else
      {
        v37 = a2 + v72;
        if (a1 < a2 || a1 >= v37)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      a1 += v72;
      v41 = a4 >= v70 || v37 >= v71;
      a2 = v37;
    }
    while (!v41);
  }
  a2 = a1;
LABEL_71:
  v58 = v70 - a4;
  if (v72 != -1 || v58 != 0x8000000000000000)
  {
    sub_1BE9BE7AC(a4, v58 / v72, a2, (void (*)(_QWORD))type metadata accessor for PartialTrafficLog);
    return;
  }
LABEL_79:
  __break(1u);
}

void sub_1BE9F3A30(char a1, uint64_t a2, char a3, char *a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    sub_1BE9BE684();
    if (v7 != v8)
    {
      sub_1BE9B69F4();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1BE9BDAF0();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v6 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v6;
  if (v10)
  {
    sub_1BE9BEF38(&qword_1EF5709C0);
    v11 = (char *)sub_1BE9B69EC();
    j__malloc_size(v11);
    sub_1BE9F54F4();
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v9] <= v13)
      memmove(v13, v14, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v9);
  }
  swift_bridgeObjectRelease();
  sub_1BE9B6960();
}

void sub_1BE9F3AF8(uint64_t a1)
{
  sub_1BE9F3A30(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *sub_1BE9F3B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_1BE9F4F4C();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1BE9F3E78();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = sub_1BE9F3BFC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1BE9F3BFC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE9F3E78()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1BE9F3ED4();
  v4 = sub_1BE9F3F08(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1BE9F3ED4()
{
  return String.subscript.getter();
}

uint64_t sub_1BE9F3F08(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    sub_1BE9F404C(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      sub_1BE9F0EB0(v9, 0);
      v12 = v11;
      sub_1BE9F4138(v16, v11 + 32, v10, a1, a2, a3, a4);
      v14 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v15 = MEMORY[0x1C3B8230C](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v15;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1C3B8230CLL);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1C3B8230C]((char *)v16 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void sub_1BE9F404C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a1;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    sub_1BE9F0F0C(a1, a3, a4);
    v7 = v10;
  }
  if ((a2 & 0xC) == v9)
  {
    sub_1BE9F0F0C(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000) == 0)
      return;
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return;
  }
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)();
    return;
  }
  __break(1u);
}

void sub_1BE9F4138(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v11 = a4;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }
  v13 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v25 = v16;
  v28 = a3 - 1;
  v11 = a4;
  while (1)
  {
    v17 = v11;
    if ((v11 & 0xC) == v15)
      sub_1BE9F0F0C(v11, a6, a7);
    if (v17 >> 14 < v29 || v17 >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      v21 = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        v21 = *((_BYTE *)v30 + v19);
      }
      else
      {
        v20 = v23;
        if ((a6 & 0x1000000000000000) == 0)
          v20 = _StringObject.sharedUTF8.getter();
        v21 = *(_BYTE *)(v20 + v19);
      }
    }
    if ((v11 & 0xC) == v15)
    {
      sub_1BE9F0F0C(v11, a6, a7);
      v11 = v22;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    v11 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1BE9F4338(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v5 = (_QWORD *)((char *)v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1BE9F0F60(0, v4, v5);
    v6 = sub_1BE9F4494(v5, v4, v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (unint64_t *)swift_slowAlloc();
    sub_1BE9F0F60(0, v4, v7);
    v2 = sub_1BE9F4494(v7, v4, v2);
    MEMORY[0x1C3B84598](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_1BE9F4494(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v33 = a2;
  v34 = a1;
  v4 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  MEMORY[0x1E0C80A78](v6);
  v45 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PartialTrafficLog(0);
  v36 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v33 - v14;
  v16 = 0;
  v17 = *(_QWORD *)(a3 + 64);
  v37 = 0;
  v38 = a3 + 64;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v39 = (unint64_t)(v18 + 63) >> 6;
  v47 = v13;
  v35 = a3;
  while (v20)
  {
    v21 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v22 = v21 | (v16 << 6);
LABEL_17:
    v26 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v22);
    if (*(_QWORD *)(v26 + 16))
    {
      v43 = v20;
      v44 = v16;
      v27 = *(_QWORD *)(a3 + 48);
      v40 = v22;
      v28 = *(_QWORD *)(v27 + 16 * v22 + 8);
      v29 = v36;
      v30 = v26 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v42 = v26;
      swift_bridgeObjectRetain_n();
      v41 = v28;
      swift_bridgeObjectRetain();
      v48 = *(_QWORD *)(v29 + 72);
      sub_1BE9BDE90(v30, (uint64_t)v15);
      sub_1BE9BDE90((uint64_t)v15, (uint64_t)v11);
      v31 = (char *)&loc_1BE9F4720 + dword_1BE9F48FC[swift_getEnumCaseMultiPayload()];
      __asm { BR              X9 }
    }
  }
  if (__OFADD__(v16++, 1))
  {
    __break(1u);
    JUMPOUT(0x1BE9F48F4);
  }
  if (v16 >= v39)
    return sub_1BE9F4918(v34, v33, v37, a3);
  v24 = *(_QWORD *)(v38 + 8 * v16);
  if (v24)
  {
LABEL_16:
    v20 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v16 << 6);
    goto LABEL_17;
  }
  v25 = v16 + 1;
  if (v16 + 1 >= v39)
    return sub_1BE9F4918(v34, v33, v37, a3);
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
    goto LABEL_15;
  v25 = v16 + 2;
  if (v16 + 2 >= v39)
    return sub_1BE9F4918(v34, v33, v37, a3);
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
    goto LABEL_15;
  v25 = v16 + 3;
  if (v16 + 3 >= v39)
    return sub_1BE9F4918(v34, v33, v37, a3);
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
  {
LABEL_15:
    v16 = v25;
    goto LABEL_16;
  }
  while (1)
  {
    v16 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      JUMPOUT(0x1BE9F48FCLL);
    }
    if (v16 >= v39)
      return sub_1BE9F4918(v34, v33, v37, a3);
    v24 = *(_QWORD *)(v38 + 8 * v16);
    ++v25;
    if (v24)
      goto LABEL_16;
  }
}

uint64_t sub_1BE9F4918(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1BE9BEF38(&qword_1EF5709F0);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) == 0)
      break;
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    if (!v5)
      return v9;
  }
  v26 = 0;
  v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    v28 = v24 == v27;
    if (v24 == v27)
      v24 = 0;
    v26 |= v28;
    v29 = *(_QWORD *)(v12 + 8 * v24);
    if (v29 != -1)
    {
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1BE9F4BA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_1BE9BF4FC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_1BE9B69D4();
}

void sub_1BE9F4BE0()
{
  sub_1BE9F1064();
}

void sub_1BE9F4C1C()
{
  JUMPOUT(0x1C3B827B0);
}

uint64_t sub_1BE9F4C30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BE9F4C70()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BE9F4C94(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;

  return sub_1BE9F04D4(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1BE9F4CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1BE9F4CBC()
{
  return swift_release();
}

void sub_1BE9F4CC8(void *a1)
{
  uint64_t v1;

  sub_1BE9F08E0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(dispatch_group_t *)(v1 + 32), 67, 0xD00000000000003DLL, (void *)0x80000001BECBE1F0);
}

uint64_t sub_1BE9F4D04()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_1BE9F4D30(void *a1)
{
  uint64_t v1;

  sub_1BE9F08E0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(dispatch_group_t *)(v1 + 32), 68, 0xD00000000000003ELL, (void *)0x80000001BECBE1B0);
}

uint64_t sub_1BE9F4D68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;

  return sub_1BE9F06A0(a1, a2, a3, a4, a5, v5);
}

void sub_1BE9F4D70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1BE9BEF38(a3);
  sub_1BE9BF4FC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_1BE9B69D4();
}

_QWORD *sub_1BE9F4DA8(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1BE9F4DCC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1BE9F4DF0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1BE9F4DFC()
{
  sub_1BE9F1064();
}

unint64_t sub_1BE9F4E38()
{
  unint64_t result;

  result = qword_1EF570A00;
  if (!qword_1EF570A00)
  {
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF570A00);
  }
  return result;
}

void sub_1BE9F4E74(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
    goto LABEL_8;
  if ((a4 & 0x2000000000000000) != 0)
  {
    v12 = HIBYTE(a4) & 0xF;
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  sub_1BE9F4F88((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
}

unint64_t sub_1BE9F4F4C()
{
  unint64_t result;

  result = qword_1EF570A08;
  if (!qword_1EF570A08)
  {
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EF570A08);
  }
  return result;
}

void sub_1BE9F4F88(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;

  v11 = a3;
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a3 & 0xC;
  v16 = a3;
  if (v15 == 4 << v13)
  {
    sub_1BE9F0F0C(a3, a5, a6);
    v16 = v20;
  }
  v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v21 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0)
      v21 = HIBYTE(a6) & 0xF;
    if (v21 < v16 >> 16)
      goto LABEL_95;
    v18 = String.UTF8View._foreignDistance(from:to:)();
    v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    v22 = v17;
    sub_1BE9F0F0C(v11, a5, a6);
    v17 = v22;
    v11 = v23;
  }
  if ((a4 & 0xC) == v14)
  {
    v24 = a4;
    v25 = v17;
    sub_1BE9F0F0C(v24, a5, a6);
    v17 = v25;
    a4 = v26;
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    v19 = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  v27 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v27 = v17;
  if (v27 < v11 >> 16)
    goto LABEL_91;
  if (v27 < a4 >> 16)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v19 = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  v28 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v28 < v18)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v29 = (unsigned __int8 *)(a1 + v18);
  if (!a1)
    v29 = 0;
  v30 = *v29;
  if (v30 == 43)
  {
    if (v19 < 1)
    {
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      return;
    }
    if (v19 != 1)
    {
      v40 = a7 + 48;
      v41 = a7 + 55;
      v42 = a7 + 87;
      if (a7 > 10)
      {
        v40 = 58;
      }
      else
      {
        v42 = 97;
        v41 = 65;
      }
      if (v29)
      {
        v43 = 0;
        v44 = v29 + 1;
        v45 = v19 - 1;
        while (1)
        {
          v46 = *v44;
          if (v46 < 0x30 || v46 >= v40)
          {
            if (v46 < 0x41 || v46 >= v41)
            {
              if (v46 < 0x61 || v46 >= v42)
                return;
              v47 = -87;
            }
            else
            {
              v47 = -55;
            }
          }
          else
          {
            v47 = -48;
          }
          v48 = v43 * a7;
          if ((unsigned __int128)(v43 * (__int128)a7) >> 64 == (v43 * a7) >> 63)
          {
            v43 = v48 + (v46 + v47);
            if (!__OFADD__(v48, (v46 + v47)))
            {
              ++v44;
              if (--v45)
                continue;
            }
          }
          return;
        }
      }
    }
  }
  else
  {
    if (v30 == 45)
    {
      if (v19 >= 1)
      {
        if (v19 != 1)
        {
          v31 = a7 + 48;
          v32 = a7 + 55;
          v33 = a7 + 87;
          if (a7 > 10)
          {
            v31 = 58;
          }
          else
          {
            v33 = 97;
            v32 = 65;
          }
          if (v29)
          {
            v34 = 0;
            v35 = v29 + 1;
            v36 = v19 - 1;
            while (1)
            {
              v37 = *v35;
              if (v37 < 0x30 || v37 >= v31)
              {
                if (v37 < 0x41 || v37 >= v32)
                {
                  if (v37 < 0x61 || v37 >= v33)
                    return;
                  v38 = -87;
                }
                else
                {
                  v38 = -55;
                }
              }
              else
              {
                v38 = -48;
              }
              v39 = v34 * a7;
              if ((unsigned __int128)(v34 * (__int128)a7) >> 64 == (v34 * a7) >> 63)
              {
                v34 = v39 - (v37 + v38);
                if (!__OFSUB__(v39, (v37 + v38)))
                {
                  ++v35;
                  if (--v36)
                    continue;
                }
              }
              return;
            }
          }
        }
        return;
      }
      goto LABEL_93;
    }
    if (v28 != v18)
    {
      v49 = a7 + 48;
      v50 = a7 + 55;
      v51 = a7 + 87;
      if (a7 > 10)
      {
        v49 = 58;
      }
      else
      {
        v51 = 97;
        v50 = 65;
      }
      if (v29)
      {
        v52 = 0;
        while (1)
        {
          v53 = *v29;
          if (v53 < 0x30 || v53 >= v49)
          {
            if (v53 < 0x41 || v53 >= v50)
            {
              if (v53 < 0x61 || v53 >= v51)
                return;
              v54 = -87;
            }
            else
            {
              v54 = -55;
            }
          }
          else
          {
            v54 = -48;
          }
          v55 = v52 * a7;
          if ((unsigned __int128)(v52 * (__int128)a7) >> 64 == (v52 * a7) >> 63)
          {
            v52 = v55 + (v53 + v54);
            if (!__OFADD__(v55, (v53 + v54)))
            {
              ++v29;
              if (--v19)
                continue;
            }
          }
          return;
        }
      }
    }
  }
}

__n128 *sub_1BE9F53EC(__n128 *result, __n128 a2)
{
  uint64_t v2;

  result[1] = a2;
  *(_QWORD *)(v2 - 160) = 0;
  *(_QWORD *)(v2 - 152) = 0xE000000000000000;
  return result;
}

void sub_1BE9F5400()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1BE9F540C(uint64_t a1@<X8>)
{
  uint64_t v1;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v1 + a1) + 32));
}

uint64_t sub_1BE9F5420()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 360);
}

unint64_t sub_1BE9F543C(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1BE9F5454()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9F5468()
{
  return swift_retain();
}

void sub_1BE9F5474()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 344) = 0;
}

id sub_1BE9F5480(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1BE9F5488()
{
  uint64_t v0;

  return v0;
}

id sub_1BE9F549C()
{
  void *v0;

  return v0;
}

void *sub_1BE9F54A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = a1;
  return _Block_copy((const void *)(v2 - 160));
}

uint64_t sub_1BE9F54B4()
{
  return swift_endAccess();
}

uint64_t sub_1BE9F54D0()
{
  uint64_t v0;
  uint64_t v1;

  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v1, 0, 1, v0);
}

uint64_t sub_1BE9F5508()
{
  return swift_release();
}

uint64_t sub_1BE9F5510()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1BE9BE5BC(v0, v1);
}

uint64_t sub_1BE9F551C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v0 = type metadata accessor for String.Encoding();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  v4 = String.data(using:allowLossyConversion:)();
  v6 = v5;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1EF577A48 = v4;
    unk_1EF577A50 = v6;
  }
  return result;
}

Swift::Void __swiftcall NSObject.CKLogToFileHandle(_:)(NSFileHandle a1)
{
  void *v1;
  Class isa;

  objc_msgSend(v1, sel__CKLogToFileHandle_atDepth_, a1.super.isa, 0);
  if (qword_1EF5700A8 != -1)
    swift_once();
  isa = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class writeData:](a1.super.isa, sel_writeData_, isa);

}

void sub_1BE9F5660(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  NSObject.CKLogToFileHandle(_:)((NSFileHandle)v4);

}

void sub_1BE9F56B4(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_1BE9EDDAC(a1);
    if ((v2 & 1) != 0)
      sub_1BE9FB83C();
  }
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t sub_1BE9F56F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_1BE9BF2A0(a1, a2), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(a3 + 56);
    v10 = type metadata accessor for CKLogEvent();
    sub_1BE9E4B1C(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v8, a4);
    v11 = a4;
    v12 = 0;
    v13 = v10;
  }
  else
  {
    v13 = type metadata accessor for CKLogEvent();
    v11 = a4;
    v12 = 1;
  }
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v11, v12, 1, v13);
}

double sub_1BE9F577C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_1BE9BF2A0(a1, a2), (v7 & 1) != 0))
  {
    sub_1BE9BEE88(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

void sub_1BE9F57CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1BE9BF2A0(a1, a2);
    if ((v3 & 1) != 0)
      sub_1BE9FB83C();
  }
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

id sub_1BE9F5808(id result)
{
  char *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  objc_super v18;

  if (!result)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v2 = result;
  sub_1BE9FB31C(result, (SEL *)&selRef_cloudKitToken);
  if (!v4)
  {
LABEL_11:
    v18.receiver = v1;
    v18.super_class = (Class)type metadata accessor for CKCredentialInterceptingAccount();
    return objc_msgSendSuper2(&v18, sel_aa_updateTokensWithProvisioningResponse_, v2);
  }
  v5 = v3;
  v6 = v4;
  result = objc_msgSend(v1, sel_accountStore);
  if (!result)
    goto LABEL_13;
  v7 = result;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = sub_1BE9FB070(v8, v9, v7);

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8F298]), sel_initWithAccountType_, v10);
  if (result)
  {
    v11 = result;
    sub_1BE9FB31C(v1, (SEL *)&selRef_username);
    if (v12)
    {
      v13 = (void *)MEMORY[0x1C3B822A0]();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = 0;
    }
    objc_msgSend(v11, sel_setUsername_, v13);

    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8F2B0]), sel_init);
    sub_1BE9FB10C(v5, v6, v14, (SEL *)&selRef_setToken_);
    objc_msgSend(v11, sel_setCredential_, v14);
    v15 = MEMORY[0x1C3B84640](&v1[OBJC_IVAR____TtC14CloudKitDaemonP33_510E43923520F9C83D223A8087C06B6B31CKCredentialInterceptingAccount_backingExplicitCredentialsAccount]);
    if (v15)
    {
      v16 = (void *)v15;
      v17 = v11;
      objc_msgSend(v16, sel_setFakeCKAccount_, v17);

    }
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
  return result;
}

id sub_1BE9F5A80(void *a1, SEL *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  swift_unknownObjectWeakInit();
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CKCredentialInterceptingAccount();
  v5 = objc_msgSendSuper2(&v7, *a2, a1);

  return v5;
}

id sub_1BE9F5B20()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKCredentialInterceptingAccount();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CKDBackingExplicitCredentialsAccount.accountType.getter()
{
  return 2;
}

void sub_1BE9F5B74()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27[32];

  v2 = v0;
  v3 = type metadata accessor for Logger();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v2, sel_appleAccount);
  v8 = objc_msgSend(v7, sel_accountProperties);

  if (!v8)
  {
    __break(1u);
    goto LABEL_10;
  }
  strcpy(v27, "localizedError");
  v27[15] = -18;
  v9 = objc_msgSend(v8, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();

  if (!v9)
    return;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1BE9E13CC(&v25, v27);
  CKLog.getter();
  sub_1BE9BEE88((uint64_t)v27, (uint64_t)&v25);
  v1 = v2;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    sub_1BE9E13DC((uint64_t)&v25);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    goto LABEL_7;
  }
  v21 = v4;
  v22 = v3;
  v12 = swift_slowAlloc();
  v13 = swift_slowAlloc();
  v24 = v13;
  *(_DWORD *)v12 = 136315394;
  sub_1BE9FB38C(objc_msgSend(v1, sel_appleAccount), (SEL *)&selRef_username);
  if (!v15)
  {
LABEL_10:

    __break(1u);
    return;
  }
  v23 = sub_1BE9E043C(v14, v15, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2080;
  v16 = sub_1BE9F4DA8(&v25, v26);
  MEMORY[0x1E0C80A78](v16);
  (*(void (**)(char *))(v18 + 16))((char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = String.init<A>(describing:)();
  v23 = sub_1BE9E043C(v19, v20, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1BE9E13DC((uint64_t)&v25);
  _os_log_impl(&dword_1BE990000, v10, v11, "\n=\n==\n===\n====\n=====\n======\n=======\n\nIMPORTANT ERROR FOLLOWS:\nYou need to sign in to the account \"%s\" in Settings, possibly due to outdated Terms and Conditions. Error: %s \n\n=======\n======\n=====\n====\n"
    "===\n"
    "==\n"
    "=",
    (uint8_t *)v12,
    0x16u);
  swift_arrayDestroy();
  MEMORY[0x1C3B84598](v13, -1, -1);
  MEMORY[0x1C3B84598](v12, -1, -1);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
LABEL_7:
  sub_1BE9E13DC((uint64_t)v27);
}

uint64_t CKDBackingExplicitCredentialsAccount.authenticationController(_:shouldContinueWithAuthenticationResults:error:for:)(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  _QWORD v34[4];

  v30 = sub_1BE9FB944();
  v6 = *(_QWORD *)(v30 - 8);
  v7 = MEMORY[0x1E0C80A78](v30);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v29 - v11;
  if (a3)
  {
    sub_1BE9FB8A8();
    sub_1BE9FB8A0();
    sub_1BE9FB8A8();
    sub_1BE9FB8A8();
    v13 = sub_1BE9BE3A8();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)sub_1BE9BE304();
      v16 = (_QWORD *)sub_1BE9BE304();
      *(_DWORD *)v15 = 138412290;
      sub_1BE9FB8A8();
      v17 = _swift_stdlib_bridgeErrorToNSError();
      v34[0] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v16 = v17;
      sub_1BE9BEFB0();
      sub_1BE9BEFB0();
      sub_1BE9BDA88(&dword_1BE990000, v13, v14, "Couldn't do the AKAppleIDAuthenticationContext dance: %@", v15);
      sub_1BE9BEF38(&qword_1EF570A20);
      sub_1BE9BE160();
      sub_1BE9BE6D4();
    }
    sub_1BE9BEFB0();
    sub_1BE9BEFB0();
    sub_1BE9BEFB0();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v30);
    return 0;
  }
  if (a2)
  {
    *(_QWORD *)&v33[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((_QWORD *)&v33[0] + 1) = v18;
    swift_bridgeObjectRetain();
    v19 = objc_msgSend(a2, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v33, 0, sizeof(v33));
    }
    sub_1BE9FB7A4((uint64_t)v33, (uint64_t)v34, &qword_1EF570A18);
    if (v34[3])
    {
      if ((sub_1BE9FB908() & 1) != 0)
      {
        v20 = v31;
        v21 = v32;
        sub_1BE9BD6A8();
        sub_1BE9FB10C(v20, v21, v3, (SEL *)&selRef_setHsa2DevicePassword_);
        return 0;
      }
      sub_1BE9BD6A8();
    }
    else
    {
      sub_1BE9BD6A8();
      sub_1BE9BEA38((uint64_t)v34, &qword_1EF570A18);
    }
    CKLog.getter();
    v22 = a2;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)sub_1BE9BE304();
      v26 = sub_1BE9BE304();
      v29 = v6;
      v27 = (_QWORD *)v26;
      *(_DWORD *)v25 = 138412290;
      v34[0] = v22;
      v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v27 = a2;

      sub_1BE9BDA88(&dword_1BE990000, v23, v24, "Successfully pulled results, but didn't include password: %@", v25);
      sub_1BE9BEF38(&qword_1EF570A20);
      sub_1BE9BE160();
      sub_1BE9BE6D4();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE9F632C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  Class isa;
  id v24;
  uint64_t v25;
  unint64_t v26;
  Class v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  dispatch_semaphore_t v36;
  Class v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  id v66;
  unint64_t v67;
  int64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  _QWORD *v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v98;
  char v99;
  uint64_t v100;
  _BOOL8 v101;
  Swift::Int v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  char v106;
  _OWORD *v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  void *v113;
  uint64_t result;
  uint64_t v115;
  NSObject *v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  int64_t v123;
  uint64_t v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  unint64_t v130;
  __int128 *v131;
  _QWORD *v132;
  _OWORD v133[2];
  _OWORD v134[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t aBlock;
  uint64_t v139;
  __int128 v140;
  Swift::Int (*v141)();
  uint64_t v142;

  v127 = a5;
  v131 = (__int128 *)type metadata accessor for DispatchTime();
  v130 = *((_QWORD *)v131 - 1);
  MEMORY[0x1E0C80A78](v131);
  v12 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(), sel_sharedAccountStore);
  v14 = objc_msgSend(v13, sel_accountStore);

  if (!v14)
    goto LABEL_107;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v125 = v14;
  v17 = sub_1BE9FB070(v15, v16, v14);
  v18 = objc_allocWithZone((Class)type metadata accessor for CKCredentialInterceptingAccount());
  v118 = v17;
  v19 = objc_msgSend(v18, sel_initWithAccountType_, v17);
  if (!v19)
  {
LABEL_108:
    __break(1u);
LABEL_109:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v20 = v19;
  sub_1BE9FB10C(a1, a2, v19, (SEL *)&selRef_setUsername_);
  v21 = objc_allocWithZone(MEMORY[0x1E0C8F2B0]);
  swift_bridgeObjectRetain();
  v22 = sub_1BE9FA968(a3, a4);
  v119 = v20;
  v117 = v22;
  objc_msgSend(v20, sel_setCredential_);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24 = -[objc_class CKDeepCopy](isa, sel_CKDeepCopy);

  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = sub_1BE9DF220(v25);
  swift_bridgeObjectRelease();
  if (!v26)
    v26 = Dictionary.init(dictionaryLiteral:)();
  v27 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v28 = -[objc_class CKDeepCopy](v27, sel_CKDeepCopy);

  v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = sub_1BE9DF220(v29);
  swift_bridgeObjectRelease();
  if (!v30)
    v30 = Dictionary.init(dictionaryLiteral:)();
  v128 = v30;
  if (a6)
  {
    v31 = (void *)MEMORY[0x1C3B822A0](v127, a6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  v32 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v33 = (void *)MEMORY[0x1C3B822A0](a3, a4);
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v32, sel_initWithAppleAccount_hsa2RecoveryKey_hsa2AccountPassword_, v119, v31, v33);

  swift_unknownObjectWeakAssign();
  v35 = v34;
  v36 = dispatch_semaphore_create(0);
  Dictionary.init(dictionaryLiteral:)();
  v37 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v36;
  v141 = sub_1BE9FB36C;
  v142 = v38;
  aBlock = MEMORY[0x1E0C809B0];
  v139 = 1107296256;
  *(_QWORD *)&v140 = sub_1BE9F7100;
  *((_QWORD *)&v140 + 1) = &unk_1E782D740;
  v39 = _Block_copy(&aBlock);
  v40 = v36;
  swift_release();
  v129 = v35;
  objc_msgSend(v35, sel_renewAuthTokenWithOptions_completionHandler_, v37, v39);
  _Block_release(v39);

  static DispatchTime.distantFuture.getter();
  v116 = v40;
  MEMORY[0x1C3B824D4](v12);
  (*(void (**)(char *, __int128 *))(v130 + 8))(v12, v131);
  v41 = 0;
  v42 = *(_QWORD *)(v26 + 64);
  v130 = v26 + 64;
  v43 = 1 << *(_BYTE *)(v26 + 32);
  v44 = -1;
  if (v43 < 64)
    v44 = ~(-1 << v43);
  v45 = v44 & v42;
  v131 = (__int128 *)((unint64_t)(v43 + 63) >> 6);
  v127 = (uint64_t)v131 - 1;
  if ((v44 & v42) == 0)
    goto LABEL_15;
LABEL_13:
  v46 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  v47 = v46 | (v41 << 6);
LABEL_14:
  v48 = *(_QWORD *)(v26 + 56);
  v49 = (_QWORD *)(*(_QWORD *)(v26 + 48) + 16 * v47);
  v50 = v49[1];
  *(_QWORD *)&v135 = *v49;
  *((_QWORD *)&v135 + 1) = v50;
  sub_1BE9BEE88(v48 + 32 * v47, (uint64_t)&v136);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1BE9FB7A4((uint64_t)&v135, (uint64_t)&aBlock, &qword_1EF570C40);
    v54 = v139;
    if (!v139)
      break;
    v55 = aBlock;
    sub_1BE9E13CC(&v140, &v135);
    v56 = objc_msgSend(v129, sel_appleAccount);
    sub_1BE9F4DA8(&v135, *((uint64_t *)&v136 + 1));
    v57 = _bridgeAnythingToObjectiveC<A>(_:)();
    sub_1BE9FB1D0(v57, v55, v54, v56);

    swift_unknownObjectRelease();
    sub_1BE9E13DC((uint64_t)&v135);
    if (v45)
      goto LABEL_13;
LABEL_15:
    v51 = v41 + 1;
    if (__OFADD__(v41, 1))
      goto LABEL_102;
    if (v51 < (uint64_t)v131)
    {
      v52 = *(_QWORD *)(v130 + 8 * v51);
      if (v52)
        goto LABEL_18;
      v53 = v41 + 2;
      ++v41;
      if (v51 + 1 < (uint64_t)v131)
      {
        v52 = *(_QWORD *)(v130 + 8 * v53);
        if (v52)
          goto LABEL_21;
        v41 = v51 + 1;
        if (v51 + 2 < (uint64_t)v131)
        {
          v52 = *(_QWORD *)(v130 + 8 * (v51 + 2));
          if (v52)
          {
            v51 += 2;
            goto LABEL_18;
          }
          v53 = v51 + 3;
          v41 = v51 + 2;
          if (v51 + 3 < (uint64_t)v131)
          {
            v52 = *(_QWORD *)(v130 + 8 * v53);
            if (!v52)
            {
              while (1)
              {
                v51 = v53 + 1;
                if (__OFADD__(v53, 1))
                  goto LABEL_106;
                if (v51 >= (uint64_t)v131)
                {
                  v41 = v127;
                  goto LABEL_32;
                }
                v52 = *(_QWORD *)(v130 + 8 * v51);
                ++v53;
                if (v52)
                  goto LABEL_18;
              }
            }
LABEL_21:
            v51 = v53;
LABEL_18:
            v45 = (v52 - 1) & v52;
            v47 = __clz(__rbit64(v52)) + (v51 << 6);
            v41 = v51;
            goto LABEL_14;
          }
        }
      }
    }
LABEL_32:
    v45 = 0;
    v136 = 0u;
    v137 = 0u;
    v135 = 0u;
  }
  swift_release();
  sub_1BE9DF5A4(v128);
  v59 = v58;
  swift_bridgeObjectRelease();
  if (!v59)
  {

    v66 = v129;
    v65 = v125;
    goto LABEL_98;
  }
  v60 = 0;
  v61 = *(_QWORD *)(v59 + 64);
  v121 = v59 + 64;
  v62 = 1 << *(_BYTE *)(v59 + 32);
  if (v62 < 64)
    v63 = ~(-1 << v62);
  else
    v63 = -1;
  v64 = v63 & v61;
  v122 = (unint64_t)(v62 + 63) >> 6;
  v131 = &v136;
  v120 = MEMORY[0x1E0DEE9B8] + 8;
  v65 = v125;
  v66 = v129;
  v124 = v59;
  if (!v64)
    goto LABEL_42;
  while (2)
  {
    v127 = (v64 - 1) & v64;
    v128 = v60;
    v67 = __clz(__rbit64(v64)) | (v60 << 6);
LABEL_56:
    v72 = *(_QWORD *)(v59 + 56);
    v73 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 16 * v67);
    v74 = *v73;
    v75 = v73[1];
    v76 = *(_QWORD *)(v72 + 8 * v67);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v77 = MEMORY[0x1C3B822A0](v74, v75);
    swift_bridgeObjectRelease();
    v78 = objc_msgSend(v66, sel_appleAccount);
    v126 = (void *)v77;
    v79 = objc_msgSend(v78, sel_propertiesForDataclass_, v77);

    if (v79)
    {
      v80 = (_QWORD *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v80 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
    }
    v81 = 0;
    v82 = *(_QWORD *)(v76 + 64);
    v130 = v76 + 64;
    v83 = 1 << *(_BYTE *)(v76 + 32);
    if (v83 < 64)
      v84 = ~(-1 << v83);
    else
      v84 = -1;
    v85 = v84 & v82;
    v86 = (unint64_t)(v83 + 63) >> 6;
    v123 = v86 - 1;
    if ((v84 & v82) != 0)
    {
LABEL_63:
      v87 = __clz(__rbit64(v85));
      v85 &= v85 - 1;
      v88 = v87 | (v81 << 6);
LABEL_64:
      v89 = *(_QWORD *)(v76 + 56);
      v90 = (_QWORD *)(*(_QWORD *)(v76 + 48) + 16 * v88);
      v91 = v90[1];
      *(_QWORD *)&v135 = *v90;
      *((_QWORD *)&v135 + 1) = v91;
      sub_1BE9BEE88(v89 + 32 * v88, (uint64_t)v131);
      swift_bridgeObjectRetain();
      goto LABEL_83;
    }
    while (1)
    {
      v92 = v81 + 1;
      if (__OFADD__(v81, 1))
        goto LABEL_101;
      if (v92 < v86)
      {
        v93 = *(_QWORD *)(v130 + 8 * v92);
        if (v93)
          goto LABEL_68;
        v94 = v81 + 2;
        ++v81;
        if (v92 + 1 < v86)
        {
          v93 = *(_QWORD *)(v130 + 8 * v94);
          if (v93)
            goto LABEL_71;
          v81 = v92 + 1;
          if (v92 + 2 < v86)
          {
            v93 = *(_QWORD *)(v130 + 8 * (v92 + 2));
            if (v93)
            {
              v92 += 2;
              goto LABEL_68;
            }
            v94 = v92 + 3;
            v81 = v92 + 2;
            if (v92 + 3 < v86)
            {
              v93 = *(_QWORD *)(v130 + 8 * v94);
              if (v93)
              {
LABEL_71:
                v92 = v94;
LABEL_68:
                v85 = (v93 - 1) & v93;
                v88 = __clz(__rbit64(v93)) + (v92 << 6);
                v81 = v92;
                goto LABEL_64;
              }
              while (1)
              {
                v92 = v94 + 1;
                if (__OFADD__(v94, 1))
                  break;
                if (v92 >= v86)
                {
                  v81 = v123;
                  goto LABEL_82;
                }
                v93 = *(_QWORD *)(v130 + 8 * v92);
                ++v94;
                if (v93)
                  goto LABEL_68;
              }
LABEL_104:
              __break(1u);
              goto LABEL_105;
            }
          }
        }
      }
LABEL_82:
      v85 = 0;
      v136 = 0u;
      v137 = 0u;
      v135 = 0u;
LABEL_83:
      sub_1BE9FB7A4((uint64_t)&v135, (uint64_t)&aBlock, &qword_1EF570C40);
      v95 = v139;
      if (!v139)
        break;
      v96 = aBlock;
      sub_1BE9E13CC(&v140, v134);
      *(_QWORD *)&v133[0] = v96;
      *((_QWORD *)&v133[0] + 1) = v95;
      AnyHashable.init<A>(_:)();
      sub_1BE9BEE88((uint64_t)v134, (uint64_t)v133);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v132 = v80;
      v98 = sub_1BE9EA9FC((uint64_t)&v135);
      v100 = v80[2];
      v101 = (v99 & 1) == 0;
      v102 = v100 + v101;
      if (__OFADD__(v100, v101))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      v103 = v98;
      v104 = v99;
      sub_1BE9BEF38(&qword_1EF570C48);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v102))
      {
        v105 = sub_1BE9EA9FC((uint64_t)&v135);
        if ((v104 & 1) != (v106 & 1))
          goto LABEL_109;
        v103 = v105;
      }
      v80 = v132;
      if ((v104 & 1) != 0)
      {
        v107 = (_OWORD *)(v132[7] + 32 * v103);
        sub_1BE9E13DC((uint64_t)v107);
        sub_1BE9E13CC(v133, v107);
      }
      else
      {
        v132[(v103 >> 6) + 8] |= 1 << v103;
        sub_1BE9BEEC4((uint64_t)&v135, v80[6] + 40 * v103);
        sub_1BE9E13CC(v133, (_OWORD *)(v80[7] + 32 * v103));
        v108 = v80[2];
        v109 = __OFADD__(v108, 1);
        v110 = v108 + 1;
        if (v109)
          goto LABEL_100;
        v80[2] = v110;
      }
      swift_bridgeObjectRelease();
      sub_1BE9ED3C4((uint64_t)&v135);
      sub_1BE9E13DC((uint64_t)v134);
      if (v85)
        goto LABEL_63;
    }
    swift_release();
    v66 = v129;
    v111 = objc_msgSend(v129, sel_appleAccount);
    v112 = (uint64_t)v80;
    v113 = v126;
    sub_1BE9FB154(v112, (uint64_t)v126, v111);

    v65 = v125;
    v59 = v124;
    v60 = v128;
    v64 = v127;
    if (v127)
      continue;
    break;
  }
LABEL_42:
  v68 = v60 + 1;
  if (__OFADD__(v60, 1))
    goto LABEL_103;
  if (v68 < v122)
  {
    v69 = *(_QWORD *)(v121 + 8 * v68);
    v70 = v60 + 1;
    if (v69)
      goto LABEL_55;
    v70 = v60 + 2;
    if (v60 + 2 < v122)
    {
      v69 = *(_QWORD *)(v121 + 8 * v70);
      if (v69)
        goto LABEL_55;
      v70 = v60 + 3;
      if (v60 + 3 < v122)
      {
        v69 = *(_QWORD *)(v121 + 8 * v70);
        if (v69)
          goto LABEL_55;
        v71 = v60 + 4;
        if (v60 + 4 < v122)
        {
          v69 = *(_QWORD *)(v121 + 8 * v71);
          if (v69)
          {
            v70 = v60 + 4;
LABEL_55:
            v127 = (v69 - 1) & v69;
            v128 = v70;
            v67 = __clz(__rbit64(v69)) + (v70 << 6);
            goto LABEL_56;
          }
          while (1)
          {
            v70 = v71 + 1;
            if (__OFADD__(v71, 1))
              break;
            if (v70 >= v122)
              goto LABEL_97;
            v69 = *(_QWORD *)(v121 + 8 * v70);
            ++v71;
            if (v69)
              goto LABEL_55;
          }
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
      }
    }
  }
LABEL_97:

  swift_release();
LABEL_98:

  return (uint64_t)v66;
}

uint64_t sub_1BE9F7104()
{
  uint64_t result;

  _s29ExplicitCredentialAccountListCMa();
  swift_allocObject();
  result = sub_1BE9F7608();
  qword_1EF570A10 = result;
  return result;
}

uint64_t sub_1BE9F7140()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_1BE9B6958();
  sub_1BE9B6980();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9F71B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  char v13;
  uint64_t result;

  v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

Swift::Int sub_1BE9F723C()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1BE9F72C8()
{
  return sub_1BE9F723C();
}

uint64_t sub_1BE9F72D4()
{
  return sub_1BE9F7140();
}

Swift::Int sub_1BE9F72E0()
{
  Hasher.init(_seed:)();
  sub_1BE9E166C();
  String.hash(into:)();
  sub_1BE9B6958();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_1BE9BDA80();
  return Hasher._finalize()();
}

uint64_t sub_1BE9F7354(uint64_t *a1, uint64_t *a2)
{
  return sub_1BE9F71B0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1BE9F7370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v14;

  v9 = *(os_unfair_lock_s **)(v4 + 16);
  v10 = (uint64_t)&v9[4];
  v11 = v9 + 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v11);
  sub_1BE9F7414(v10, a1, a2, a3, a4, &v14);
  os_unfair_lock_unlock(v11);
  v12 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1BE9F7414@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  unint64_t v12;
  char v13;
  void *v14;
  id v15;

  v7 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = sub_1BE9EAA2C(a2, a3, a4, a5);
    if ((v13 & 1) != 0)
    {
      v14 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v12);
      v15 = v14;
    }
    else
    {
      v14 = 0;
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  *a6 = v14;
  return result;
}

uint64_t sub_1BE9F74BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  os_unfair_lock_s *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;

  v11 = *(os_unfair_lock_s **)(v5 + 16);
  v12 = (uint64_t)&v11[4];
  v13 = v11 + 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v13);
  sub_1BE9F7560(v12, a2, a3, a4, a5, a1);
  os_unfair_lock_unlock(v13);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9F7560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BE9FAFDC((uint64_t)a6, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9F75E4()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BE9F7608()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BE9BEF38(&qword_1EF570C38);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t static CKDBackingExplicitCredentialsAccount.explicitCredentialsAccount(withEmail:password:recoveryKey:propertyOverrides:overridesByDataclass:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v14 = sub_1BE9FB944();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  sub_1BE9BDA90();
  v18 = v17 - v16;
  v19 = CKCurrentPersonaID();
  if (!v19)
  {
    if (!a7)
    {
      v27 = Dictionary.init(dictionaryLiteral:)();
      goto LABEL_21;
    }
LABEL_20:
    v27 = a7;
LABEL_21:
    swift_bridgeObjectRetain();
    if (a8)
      v34 = a8;
    else
      v34 = Dictionary.init(dictionaryLiteral:)();
    if (*(_QWORD *)(v27 + 16) || *(_QWORD *)(v34 + 16))
    {
      sub_1BE9FB0D0();
      swift_bridgeObjectRetain();
      sub_1BE9B6980();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BE9FB860();
      return sub_1BE9F632C(v35, v36, v37, v38, v39, a6);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1BE9B6958();
      sub_1BE9BDA80();
      if (qword_1EF5700B0 != -1)
        swift_once();
      sub_1BE9FB860();
      v33 = (void *)sub_1BE9F7370(v41, v42, v43, v44);
      if (!v33)
      {
        sub_1BE9FB0D0();
        swift_bridgeObjectRetain();
        sub_1BE9B6980();
        swift_bridgeObjectRetain();
        Dictionary.init(dictionaryLiteral:)();
        Dictionary.init(dictionaryLiteral:)();
        sub_1BE9FB860();
        v33 = (void *)sub_1BE9F632C(v45, v46, v47, v48, a5, a6);
        sub_1BE9F74BC(v33, a1, a2, a3, a4);
      }
    }
    return (uint64_t)v33;
  }
  v20 = v19;
  v51 = v15;
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  if (!a7)
  {
    v56 = 0u;
    v57 = 0u;
    goto LABEL_14;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1BE9F577C(v23, v24, a7, &v56);
  sub_1BE9B6958();
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_14:
    sub_1BE9BEA38((uint64_t)&v56, &qword_1EF570A18);
    goto LABEL_15;
  }
  if ((sub_1BE9FB908() & 1) == 0)
  {
LABEL_15:
    v49 = 0;
    v25 = 0;
    goto LABEL_16;
  }
  v25 = v55;
  if (v50 == v54 && v22 == v55)
  {
    sub_1BE9FB82C();
    goto LABEL_20;
  }
  v49 = v54;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_1BE9C6C90();
    sub_1BE9B6958();
    goto LABEL_20;
  }
LABEL_16:
  CKLog.getter();
  sub_1BE9E166C();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = sub_1BE9BE304();
    v54 = sub_1BE9BE304();
    *(_DWORD *)v30 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v56 = sub_1BE9E043C(v50, v22, &v54);
    sub_1BE9FB880();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    sub_1BE9B6980();
    *(_QWORD *)&v56 = sub_1BE9E043C(a1, a2, &v54);
    sub_1BE9FB880();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 22) = 2080;
    *(_QWORD *)&v56 = v49;
    *((_QWORD *)&v56 + 1) = v25;
    sub_1BE9E166C();
    sub_1BE9BEF38(&qword_1EF570A30);
    v31 = String.init<A>(describing:)();
    *(_QWORD *)&v56 = sub_1BE9E043C(v31, v32, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1BE9FB82C();
    sub_1BE9BD6A8();
    _os_log_impl(&dword_1BE990000, v28, v29, "Current persona identifier %s does not match persona override on requested fake account %s: %s. Not returning an account", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    sub_1BE9BE6D4();
  }

  sub_1BE9FB82C();
  sub_1BE9FB82C();
  sub_1BE9FB82C();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v18, v14);
  return 0;
}

Swift::Bool __swiftcall CKDBackingExplicitCredentialsAccount.isDataclassEnabled(_:)(Swift::String a1)
{
  return 1;
}

void sub_1BE9F7CB0(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  char **v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  id v42;
  _QWORD *v43;
  NSObject *v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  dispatch_semaphore_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  NSObject *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  dispatch_semaphore_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74;
  NSObject *v75;
  char *v76;
  uint64_t v77;
  id v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  id v93;
  id v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  _QWORD *v98;
  id v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  void (**v105)(const void *, _QWORD, void *);
  id v106;
  void *v107;
  id v108;
  id v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  id v135;
  char *v136;
  const void *v137;
  char *v138;
  __int128 v139;
  uint64_t *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  NSObject *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *aBlock;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, void *);
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  char v161;

  v137 = a3;
  v4 = type metadata accessor for DispatchTime();
  v148 = *(_QWORD *)(v4 - 8);
  v149 = v4;
  MEMORY[0x1E0C80A78](v4);
  v147 = (char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = 0;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD **)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v136 = (char *)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v138 = (char *)&v133 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v133 = (char *)&v133 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v134 = (char *)&v133 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v142 = (char *)&v133 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v146 = (char *)&v133 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v141 = (char *)&v133 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v133 - v22;
  CKLog.getter();
  v24 = a2;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.info.getter();
  v27 = os_log_type_enabled(v25, v26);
  v28 = &selRef_allItemGroups;
  v152 = v6;
  if (v27)
  {
    v151 = v7;
    v29 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    aBlock = (_DWORD *)v30;
    LODWORD(v29->isa) = 136315138;
    sub_1BE9FB38C(objc_msgSend(v24, sel_appleAccount), (SEL *)&selRef_username);
    v33 = (uint64_t)v24;
    if (!v32)
    {
LABEL_63:
      _Block_release(v137);

      __break(1u);
LABEL_64:
      _Block_release(v137);

      __break(1u);
LABEL_65:
      _Block_release(v137);

      __break(1u);
      return;
    }
    v153 = sub_1BE9E043C(v31, v32, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BE990000, v25, v26, "Fetching account info for fake account with email %s", (uint8_t *)v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3B84598](v30, -1, -1);
    MEMORY[0x1C3B84598](v29, -1, -1);

    v150 = (void (*)(char *, uint64_t))v151[1];
    v150(v23, v152);
  }
  else
  {

    v150 = (void (*)(char *, uint64_t))v7[1];
    v150(v23, v6);
  }
  v34 = v141;
  v35 = objc_msgSend((id)objc_opt_self(), sel_sharedAccountStore);
  v33 = (uint64_t)objc_msgSend(v35, sel_accountStore);

  sub_1BE9FB31C(v24, (SEL *)&selRef_hsa2RecoveryKey);
  v143 = v37;
  v151 = v24;
  *(_QWORD *)&v144 = v38;
  if (!v38)
    goto LABEL_21;
  v135 = (id)v33;
  v140 = &v155;
  v33 = 2;
  *(_QWORD *)&v36 = 138412290;
  v139 = v36;
  while (1)
  {
    CKLog.getter();
    v29 = v24;
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = v24;
      v43 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v41 = v139;
      aBlock = v29;
      v44 = v29;
      v28 = &selRef_allItemGroups;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v43 = v42;
      v34 = v141;

      _os_log_impl(&dword_1BE990000, v39, v40, "Calculating HSA2DevicePassword for %@", v41, 0xCu);
      sub_1BE9BEF38(&qword_1EF570A20);
      swift_arrayDestroy();
      MEMORY[0x1C3B84598](v43, -1, -1);
      MEMORY[0x1C3B84598](v41, -1, -1);
    }
    else
    {

      v39 = v29;
    }

    v150(v34, v152);
    v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D00128]), sel_init);
    sub_1BE9FB38C(objc_msgSend(v29, v28[67]), (SEL *)&selRef_username);
    if (v46)
    {
      v47 = (void *)MEMORY[0x1C3B822A0]();
      swift_bridgeObjectRelease();
    }
    else
    {
      v47 = 0;
    }
    objc_msgSend(v45, sel_setUsername_, v47);

    objc_msgSend(v45, sel_setIsUsernameEditable_, 0);
    objc_msgSend(v45, sel_setServiceType_, 1);
    sub_1BE9FB31C(v29, (SEL *)&selRef_hsa2AccountPassword);
    if (v48)
    {
      v49 = (void *)MEMORY[0x1C3B822A0]();
      swift_bridgeObjectRelease();
    }
    else
    {
      v49 = 0;
    }
    objc_msgSend(v45, sel__setPassword_, v49);

    sub_1BE9FB2D8(v143, v144, v45);
    objc_msgSend(v45, sel_setAuthenticationType_, 0);
    objc_msgSend(v45, sel_setIsEphemeral_, 1);
    v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D00130]), sel_init);
    if (!v50)
    {
      _Block_release(v137);
      __break(1u);
LABEL_61:
      _Block_release(v137);

      __break(1u);
LABEL_62:
      _Block_release(v137);

      __break(1u);
      goto LABEL_63;
    }
    v51 = v50;
    objc_msgSend(v50, sel_setDelegate_, v29);
    v52 = dispatch_semaphore_create(0);
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = v52;
    v158 = sub_1BE9FB810;
    v159 = v53;
    aBlock = (_DWORD *)MEMORY[0x1E0C809B0];
    v155 = 1107296256;
    v156 = sub_1BE9FA138;
    v157 = &unk_1E782D6F0;
    v54 = _Block_copy(&aBlock);
    v55 = v45;
    v56 = v52;
    swift_release();
    objc_msgSend(v51, sel_authenticateWithContext_completion_, v55, v54);
    _Block_release(v54);

    v57 = v147;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x1C3B824D4](v57);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v57, v149);
    sub_1BE9FB31C(v29, (SEL *)&selRef_hsa2DevicePassword);
    if (v59)
    {
      v60 = v58;
      v61 = v59;
      swift_bridgeObjectRelease();
      v62 = objc_allocWithZone(MEMORY[0x1E0C8F2B0]);
      v63 = sub_1BE9FA968(v60, v61);
      v28 = &selRef_allItemGroups;
      v64 = -[NSObject appleAccount](v29, sel_appleAccount);
      objc_msgSend(v64, sel_setCredential_, v63);

      v24 = v151;
      v33 = (uint64_t)v135;
LABEL_21:
      v65 = 2;
      *(_QWORD *)&v36 = 136315138;
      v144 = v36;
      v143 = MEMORY[0x1E0DEE9B8] + 8;
      v66 = v146;
      if (!v33)
        goto LABEL_24;
      while (1)
      {
        v67 = swift_allocObject();
        *(_QWORD *)(v67 + 16) = 0;
        *(_BYTE *)(v67 + 24) = 0;
        v68 = v33;
        v69 = (id)v33;
        v70 = dispatch_semaphore_create(0);
        v71 = objc_msgSend(v24, v28[67]);
        v72 = swift_allocObject();
        *(_QWORD *)(v72 + 16) = v67;
        *(_QWORD *)(v72 + 24) = v70;
        v158 = sub_1BE9FB80C;
        v159 = v72;
        aBlock = (_DWORD *)MEMORY[0x1E0C809B0];
        v155 = 1107296256;
        v156 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_1BE9F7100;
        v157 = &unk_1E782D6A0;
        v73 = _Block_copy(&aBlock);
        swift_retain();
        v74 = v69;
        v75 = v70;
        swift_release();
        objc_msgSend(v74, sel_aa_updatePropertiesForAppleAccount_completion_, v71, v73);
        _Block_release(v73);

        v76 = v147;
        static DispatchTime.distantFuture.getter();
        MEMORY[0x1C3B824D4](v76);
        (*(void (**)(char *, uint64_t))(v148 + 8))(v76, v149);
        swift_beginAccess();
        v77 = *(_QWORD *)(v67 + 16);
        if ((*(_BYTE *)(v67 + 24) & 1) != 0)
        {
          aBlock = *(_DWORD **)(v67 + 16);
          v78 = (id)v77;
          sub_1BE9BEF38(&qword_1ED700400);
          swift_willThrowTypedImpl();
          swift_release();

          v24 = v151;
        }
        else
        {
          if ((v77 & 1) != 0)
          {
            v108 = v151;
            v109 = objc_msgSend(v151, sel_ckAccount);

            if (v109)
            {
              v110 = v134;
              CKLog.getter();
              v29 = v108;
              v111 = Logger.logObject.getter();
              v112 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v111, v112))
              {
                v151 = v74;
                v113 = swift_slowAlloc();
                v114 = swift_slowAlloc();
                v160 = v114;
                *(_DWORD *)v113 = 136315394;
                sub_1BE9FB38C(objc_msgSend(v29, v28[67]), (SEL *)&selRef_username);
                if (!v116)
                  goto LABEL_64;
                aBlock = (_DWORD *)sub_1BE9E043C(v115, v116, &v160);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v113 + 12) = 2080;
                sub_1BE9FB31C(v29, (SEL *)&selRef_dsid);
                aBlock = (_DWORD *)v117;
                v155 = v118;
                sub_1BE9BEF38(&qword_1EF570A30);
                v119 = String.init<A>(describing:)();
                aBlock = (_DWORD *)sub_1BE9E043C(v119, v120, &v160);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1BE990000, v111, v112, "Initialized fake account with email %s and dsid %s", (uint8_t *)v113, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x1C3B84598](v114, -1, -1);
                MEMORY[0x1C3B84598](v113, -1, -1);

                v74 = v151;
                v121 = (uint64_t *)&v161;
                goto LABEL_55;
              }

LABEL_58:
              v132 = v110;
            }
            else
            {
              v110 = v133;
              CKLog.getter();
              v29 = v108;
              v122 = Logger.logObject.getter();
              v123 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v122, v123))
              {

                goto LABEL_58;
              }
              v151 = v74;
              v124 = swift_slowAlloc();
              v125 = swift_slowAlloc();
              v160 = v125;
              *(_DWORD *)v124 = 136315394;
              sub_1BE9FB38C(objc_msgSend(v29, v28[67]), (SEL *)&selRef_username);
              if (!v127)
                goto LABEL_65;
              aBlock = (_DWORD *)sub_1BE9E043C(v126, v127, &v160);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v124 + 12) = 2080;
              sub_1BE9FB31C(v29, (SEL *)&selRef_dsid);
              aBlock = (_DWORD *)v128;
              v155 = v129;
              sub_1BE9BEF38(&qword_1EF570A30);
              v130 = String.init<A>(describing:)();
              aBlock = (_DWORD *)sub_1BE9E043C(v130, v131, &v160);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1BE990000, v122, v123, "Initialized fake AppleAccount for email %s / dsid %s lacked a cloudKit auth token", (uint8_t *)v124, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x1C3B84598](v125, -1, -1);
              MEMORY[0x1C3B84598](v124, -1, -1);

              v74 = v151;
              v121 = &v160;
LABEL_55:
              v132 = (char *)*(v121 - 32);
            }
            v150(v132, v152);
            swift_release();
            v105 = (void (**)(const void *, _QWORD, void *))v137;
            (*((void (**)(const void *, uint64_t, _QWORD))v137 + 2))(v137, 1, 0);

            goto LABEL_47;
          }
          v145 = v75;
          v33 = (uint64_t)v74;
          v86 = v142;
          CKLog.getter();
          v24 = v151;
          v29 = v151;
          v87 = Logger.logObject.getter();
          v88 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v87, v88))
          {
            v89 = swift_slowAlloc();
            v90 = swift_slowAlloc();
            aBlock = (_DWORD *)v90;
            *(_DWORD *)v89 = v144;
            sub_1BE9FB38C(objc_msgSend(v29, v28[67]), (SEL *)&selRef_username);
            if (!v92)
              goto LABEL_62;
            *(_QWORD *)(v89 + 4) = sub_1BE9E043C(v91, v92, (uint64_t *)&aBlock);

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1BE990000, v87, v88, "Error initializing fake account with email %s,  no error available", (uint8_t *)v89, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3B84598](v90, -1, -1);
            MEMORY[0x1C3B84598](v89, -1, -1);

            v150(v142, v152);
            v28 = &selRef_allItemGroups;
            v24 = v151;
          }
          else
          {

            v150(v86, v152);
          }
          type metadata accessor for CKError(0);
          v160 = 9;
          sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
          sub_1BE9FB238();
          _BridgedStoredNSError.init(_:userInfo:)();
          v77 = (uint64_t)aBlock;
          swift_willThrow();
          swift_release();

          v145 = 0;
        }
        v66 = v146;
        v33 = v68;
        if (!v65)
        {
LABEL_39:
          CKLog.getter();
          v93 = (id)v77;
          v94 = (id)v77;
          v95 = Logger.logObject.getter();
          v96 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v95, v96))
          {
            v97 = (uint8_t *)swift_slowAlloc();
            v98 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v97 = 138412290;
            v99 = (id)v77;
            v100 = _swift_stdlib_bridgeErrorToNSError();
            aBlock = (_DWORD *)v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v98 = v100;

            _os_log_impl(&dword_1BE990000, v95, v96, "Giving up on auth token renewal due to too many errors: %@", v97, 0xCu);
            sub_1BE9BEF38(&qword_1EF570A20);
            swift_arrayDestroy();
            MEMORY[0x1C3B84598](v98, -1, -1);
            MEMORY[0x1C3B84598](v97, -1, -1);
          }
          else
          {

          }
          v105 = (void (**)(const void *, _QWORD, void *))v137;

          v150(v138, v152);
          swift_willThrow();

          goto LABEL_46;
        }
        while (1)
        {

          --v65;
          if (v33)
            break;
LABEL_24:
          CKLog.getter();
          v29 = v24;
          v79 = v66;
          v80 = Logger.logObject.getter();
          v81 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v80, v81))
          {
            v82 = swift_slowAlloc();
            v83 = swift_slowAlloc();
            aBlock = (_DWORD *)v83;
            *(_DWORD *)v82 = v144;
            sub_1BE9FB38C(objc_msgSend(v29, v28[67]), (SEL *)&selRef_username);
            if (!v85)
              goto LABEL_61;
            *(_QWORD *)(v82 + 4) = sub_1BE9E043C(v84, v85, (uint64_t *)&aBlock);

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1BE990000, v80, v81, "Error initializing fake account with email %s, no account store available", (uint8_t *)v82, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3B84598](v83, -1, -1);
            MEMORY[0x1C3B84598](v82, -1, -1);

            v66 = v146;
            v150(v146, v152);
          }
          else
          {

            v150(v79, v152);
            v66 = v79;
          }
          type metadata accessor for CKError(0);
          v160 = 9;
          sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
          sub_1BE9FB238();
          _BridgedStoredNSError.init(_:userInfo:)();
          v77 = (uint64_t)aBlock;
          swift_willThrow();
          v145 = 0;
          if (!v65)
            goto LABEL_39;
        }
      }
    }
    if (!v33)
      break;

    --v33;
    v28 = &selRef_allItemGroups;
    v24 = v151;
  }
  swift_bridgeObjectRelease();
  v101 = v136;
  CKLog.getter();
  v102 = Logger.logObject.getter();
  v103 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v104 = 0;
    _os_log_impl(&dword_1BE990000, v102, v103, "Giving up on auth token renewal due to too many HSA2 errors", v104, 2u);
    MEMORY[0x1C3B84598](v104, -1, -1);
  }

  v150(v101, v152);
  type metadata accessor for CKError(0);
  v153 = 9;
  sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
  sub_1BE9FB238();
  _BridgedStoredNSError.init(_:userInfo:)();
  v77 = (uint64_t)aBlock;
  swift_willThrow();

  v105 = (void (**)(const void *, _QWORD, void *))v137;
LABEL_46:
  v106 = (id)v77;
  v107 = (void *)_convertErrorToNSError(_:)();
  v105[2](v105, 0, v107);

LABEL_47:
  _Block_release(v105);
}

void CKDBackingExplicitCredentialsAccount.renewAuthToken(options:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (*__ptr32 *v32)(int, int, id);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  _QWORD *v39;
  uint8_t *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  dispatch_semaphore_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  dispatch_semaphore_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  os_log_type_t v92;
  uint8_t *v93;
  id v94;
  uint8_t *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint8_t *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[6];
  __int128 v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;

  v123[4] = a3;
  v5 = type metadata accessor for DispatchTime();
  v135 = *(_QWORD *)(v5 - 8);
  v136 = v5;
  MEMORY[0x1E0C80A78](v5);
  sub_1BE9BDA90();
  v134 = (v7 - v6);
  v130 = 0;
  v8 = sub_1BE9FB944();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v10);
  sub_1BE9BE8C8();
  v131 = v11;
  MEMORY[0x1E0C80A78](v12);
  sub_1BE9BE8C8();
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v13);
  sub_1BE9BE8C8();
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v14);
  sub_1BE9BE8C8();
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v15);
  sub_1BE9BE8C8();
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v16);
  sub_1BE9BE8C8();
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v123 - v18;
  CKLog.getter();
  v20 = v3;
  Logger.logObject.getter();
  LOBYTE(v21) = sub_1BE9FB8E8();
  v22 = sub_1BE9BEA80((os_log_type_t)v21);
  v133 = v8;
  if (v22)
  {
    v23 = (uint8_t *)sub_1BE9BE304();
    v140 = sub_1BE9BE304();
    *(_DWORD *)v23 = 136315138;
    sub_1BE9FB38C(objc_msgSend((id)v20, sel_appleAccount), (SEL *)&selRef_username);
    if (v25)
    {
      v139 = sub_1BE9FB900(v24, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      sub_1BE9BDA88(&dword_1BE990000, 0, (os_log_type_t)v21, "Fetching account info for fake account with email %s", v23);
      sub_1BE9BE160();
      sub_1BE9BE6D4();
    }
LABEL_55:

    __break(1u);
    goto LABEL_56;
  }

  v137 = *(void (**)(char *, uint64_t))(v9 + 8);
  v137(v19, v8);
  v26 = v8;
  v27 = (id)v20;
  v28 = objc_msgSend((id)objc_opt_self(), sel_sharedAccountStore);
  v29 = -[NSObject accountStore](v28, sel_accountStore);

  sub_1BE9FB31C((void *)v20, (SEL *)&selRef_hsa2RecoveryKey);
  v128 = v31;
  v132 = v29;
  v138 = (id)v20;
  v32 = &off_1BECB9000;
  *(_QWORD *)&v129 = v33;
  v123[3] = a2;
  if (!v33)
    goto LABEL_19;
  v125 = &v141;
  v20 = 2;
  *(_QWORD *)&v30 = 138412290;
  v124 = v30;
  v34 = v126;
  while (1)
  {
    sub_1BE9FB8A0();
    v23 = (uint8_t *)v27;
    v35 = sub_1BE9BE3A8();
    v36 = static os_log_type_t.info.getter();
    if (sub_1BE9FB8B0(v36))
    {
      v37 = (uint8_t *)sub_1BE9BE304();
      v38 = v27;
      v39 = (_QWORD *)sub_1BE9BE304();
      *(_DWORD *)v37 = v124;
      v140 = (uint64_t)v23;
      v40 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v39 = v38;

      sub_1BE9BDA88(&dword_1BE990000, v35, (os_log_type_t)v21, "Calculating HSA2DevicePassword for %@", v37);
      sub_1BE9BEF38(&qword_1EF570A20);
      sub_1BE9BE160();
      sub_1BE9BE6D4();
    }

    sub_1BE9BDE78(v34);
    v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D00128]), sel_init);
    v42 = sub_1BE9BF41C((uint64_t)v41, sel_appleAccount);
    sub_1BE9FB38C(v42, (SEL *)&selRef_username);
    if (v44)
    {
      v45 = (void *)MEMORY[0x1C3B822A0]();
      v43 = sub_1BE9FB8D4();
    }
    else
    {
      v45 = 0;
    }
    sub_1BE9FB914(v43, sel_setUsername_);

    objc_msgSend(v41, sel_setIsUsernameEditable_, 0);
    objc_msgSend(v41, sel_setServiceType_, 1);
    sub_1BE9FB31C(v23, (SEL *)&selRef_hsa2AccountPassword);
    if (v47)
    {
      v48 = (void *)MEMORY[0x1C3B822A0]();
      v46 = sub_1BE9FB8D4();
    }
    else
    {
      v48 = 0;
    }
    sub_1BE9FB914(v46, sel__setPassword_);

    sub_1BE9FB2D8(v128, v129, v41);
    objc_msgSend(v41, sel_setAuthenticationType_, 0);
    objc_msgSend(v41, sel_setIsEphemeral_, 1);
    v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D00130]), sel_init);
    if (!v49)
    {
      __break(1u);
LABEL_53:

      __break(1u);
LABEL_54:

      __break(1u);
      goto LABEL_55;
    }
    v50 = v49;
    objc_msgSend(v49, sel_setDelegate_, v23);
    v51 = dispatch_semaphore_create(0);
    v52 = sub_1BE9B69EC();
    *(_QWORD *)(v52 + 16) = v51;
    v142 = sub_1BE9FB36C;
    v143 = v52;
    v140 = MEMORY[0x1E0C809B0];
    v141 = 1107296256;
    v53 = sub_1BE9FB92C((uint64_t)&unk_1E782D530);
    v54 = v41;
    v21 = v51;
    swift_release();
    objc_msgSend(v50, sel_authenticateWithContext_completion_, v54, v53);
    _Block_release(v53);

    v55 = v134;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x1C3B824D4](v55);
    sub_1BE9FB94C(v135);
    sub_1BE9FB31C(v23, (SEL *)&selRef_hsa2DevicePassword);
    if (v57)
      break;
    if (!v20)
    {
      sub_1BE9FB938();
      v91 = (char *)v123[2];
      sub_1BE9FB8A0();
      sub_1BE9BE3A8();
      v92 = sub_1BE9FB8E8();
      if (os_log_type_enabled(v55, v92))
      {
        v93 = (uint8_t *)sub_1BE9BE304();
        *(_WORD *)v93 = 0;
        _os_log_impl(&dword_1BE990000, v55, v92, "Giving up on auth token renewal due to too many HSA2 errors", v93, 2u);
        sub_1BE9BE6D4();
      }

      v137(v91, v133);
      sub_1BE9FB898();
      v139 = 9;
      sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
      sub_1BE9FB8F8();
      _BridgedStoredNSError.init(_:userInfo:)();
      sub_1BE9FB814();

LABEL_41:
      sub_1BE9FB834();
      sub_1BE9FB920();
      sub_1BE9C6C58();
      sub_1BE9C6C58();
      return;
    }

    --v20;
    v27 = v138;
  }
  v58 = v56;
  v59 = v57;
  sub_1BE9FB938();
  v60 = objc_allocWithZone(MEMORY[0x1E0C8F2B0]);
  v28 = sub_1BE9FA968(v58, v59);
  v61 = sub_1BE9BF41C((uint64_t)v28, sel_appleAccount);
  objc_msgSend(v61, sel_setCredential_, v28);

  v29 = v132;
  v26 = v133;
  v27 = v138;
  v32 = &off_1BECB9000;
LABEL_19:
  v62 = 2;
  *(_QWORD *)&v30 = *((_QWORD *)v32 + 126);
  v129 = v30;
  v128 = MEMORY[0x1E0DEE9B8] + 8;
  v63 = v131;
  if (!v29)
    goto LABEL_23;
  while (1)
  {
    v64 = sub_1BE9B69EC();
    *(_QWORD *)(v64 + 16) = 0;
    *(_BYTE *)(v64 + 24) = 0;
    v20 = (uint64_t)v29;
    v65 = dispatch_semaphore_create(0);
    v66 = objc_msgSend(v27, sel_appleAccount);
    v67 = sub_1BE9B69EC();
    *(_QWORD *)(v67 + 16) = v64;
    *(_QWORD *)(v67 + 24) = v65;
    v142 = sub_1BE9FB2B8;
    v143 = v67;
    v140 = MEMORY[0x1E0C809B0];
    v141 = 1107296256;
    v68 = sub_1BE9FB92C((uint64_t)&unk_1E782D4E0);
    swift_retain();
    v69 = v65;
    swift_release();
    objc_msgSend((id)v20, sel_aa_updatePropertiesForAppleAccount_completion_, v66, v68);
    _Block_release(v68);

    v23 = (uint8_t *)v134;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x1C3B824D4](v23);
    (*(void (**)(uint8_t *, uint64_t))(v135 + 8))(v23, v136);
    v70 = swift_beginAccess();
    v28 = *(NSObject **)(v64 + 16);
    if ((*(_BYTE *)(v64 + 24) & 1) != 0)
    {
      v140 = *(_QWORD *)(v64 + 16);
      sub_1BE9FB834();
      sub_1BE9BEF38(&qword_1ED700400);
      swift_willThrowTypedImpl();
      sub_1BE9BEA1C();

      v63 = v131;
      v29 = v132;
      v27 = v138;
      if (v62)
        goto LABEL_33;
LABEL_35:
      sub_1BE9FB820();
      sub_1BE9FB834();
      sub_1BE9FB834();
      v86 = Logger.logObject.getter();
      v87 = static os_log_type_t.info.getter();
      if (sub_1BE9FB8B0(v87))
      {
        v88 = (uint8_t *)sub_1BE9BE304();
        v89 = (_QWORD *)sub_1BE9BE304();
        *(_DWORD *)v88 = 138412290;
        sub_1BE9FB834();
        v90 = _swift_stdlib_bridgeErrorToNSError();
        v140 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v89 = v90;
        sub_1BE9C6C58();
        sub_1BE9C6C58();
        sub_1BE9BDA88(&dword_1BE990000, v86, (os_log_type_t)v69, "Giving up on auth token renewal due to too many errors: %@", v88);
        sub_1BE9BEF38(&qword_1EF570A20);
        sub_1BE9BE160();
        sub_1BE9BE6D4();
      }
      sub_1BE9C6C58();
      sub_1BE9C6C58();

      sub_1BE9BDE78(v123[5]);
      swift_willThrow();

      goto LABEL_41;
    }
    v77 = v127;
    if ((v28 & 1) != 0)
      break;
    CKLog.getter();
    v27 = v138;
    v78 = v138;
    sub_1BE9BE368();
    v79 = sub_1BE9FB8F0();
    if (sub_1BE9BEA80(v79))
    {
      v80 = sub_1BE9BE304();
      v81 = sub_1BE9BE304();
      sub_1BE9FB8C0(v81);
      v83 = sub_1BE9BF41C(v82, sel_appleAccount);
      sub_1BE9FB38C(v83, (SEL *)&selRef_username);
      if (v85)
      {
        *(_QWORD *)(v80 + 4) = sub_1BE9FB900(v84, v85);

        swift_bridgeObjectRelease();
        sub_1BE9BDA88(&dword_1BE990000, v28, v79, "Error initializing fake account with email %s,  no error available", (uint8_t *)v80);
        sub_1BE9BE160();
        sub_1BE9BE6D4();
      }
      goto LABEL_54;
    }

    sub_1BE9BDE78(v77);
    sub_1BE9FB898();
    v144 = 9;
    sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
    sub_1BE9FB8F8();
    sub_1BE9C6D64();
    sub_1BE9FB814();
    sub_1BE9BEA1C();

    v130 = 0;
    v63 = v131;
    v29 = v132;
    if (!v62)
      goto LABEL_35;
LABEL_33:
    while (1)
    {
      sub_1BE9C6C58();
      --v62;
      if (v29)
        break;
LABEL_23:
      sub_1BE9FB8A0();
      v23 = (uint8_t *)v27;
      sub_1BE9BE3A8();
      LOBYTE(v69) = sub_1BE9FB8F0();
      if (sub_1BE9BEA80((os_log_type_t)v69))
      {
        v71 = sub_1BE9BE304();
        v72 = sub_1BE9BE304();
        sub_1BE9FB8C0(v72);
        v74 = sub_1BE9BF41C(v73, sel_appleAccount);
        sub_1BE9FB38C(v74, (SEL *)&selRef_username);
        if (v76)
        {
          *(_QWORD *)(v71 + 4) = sub_1BE9FB900(v75, v76);

          sub_1BE9FB8D4();
          sub_1BE9BDA88(&dword_1BE990000, v28, (os_log_type_t)v69, "Error initializing fake account with email %s, no account store available", (uint8_t *)v71);
          swift_arrayDestroy();
          sub_1BE9BE6D4();
        }
        goto LABEL_53;
      }

      sub_1BE9BDE78(v63);
      sub_1BE9FB898();
      v144 = 9;
      sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
      sub_1BE9FB8F8();
      sub_1BE9C6D64();
      sub_1BE9FB814();
      v130 = 0;
      v29 = v132;
      if (!v62)
        goto LABEL_35;
    }
  }
  v23 = (uint8_t *)v138;
  v94 = sub_1BE9BF41C(v70, sel_ckAccount);

  if (!v94)
  {
    sub_1BE9FB820();
    v109 = v23;
    sub_1BE9BE368();
    v110 = sub_1BE9FB8F0();
    if (sub_1BE9BEA80(v110))
    {
      v138 = (id)v20;
      v111 = sub_1BE9BE304();
      v112 = sub_1BE9BE304();
      v144 = v112;
      *(_DWORD *)v111 = 136315394;
      v113 = sub_1BE9BF41C(v112, sel_appleAccount);
      sub_1BE9FB38C(v113, (SEL *)&selRef_username);
      if (v115)
      {
        v116 = sub_1BE9FB890(v114, v115);
        sub_1BE9BF508(v116);

        swift_bridgeObjectRelease();
        *(_WORD *)(v111 + 12) = 2080;
        sub_1BE9FB31C(v23, (SEL *)&selRef_dsid);
        v140 = v117;
        v141 = v118;
        sub_1BE9BEF38(&qword_1EF570A30);
        v119 = sub_1BE9FB850();
        v121 = sub_1BE9FB890(v119, v120);
        sub_1BE9C6DB8(v121);

        sub_1BE9C6C90();
        sub_1BE9FB870(&dword_1BE990000, v122, v110, "Initialized fake AppleAccount for email %s / dsid %s lacked a cloudKit auth token");
        sub_1BE9C6CA4();
        sub_1BE9BE6D4();
      }
      goto LABEL_57;
    }

LABEL_51:
    v137((char *)v77, v26);
    sub_1BE9BEA1C();
    sub_1BE9FB920();

    return;
  }
  sub_1BE9FB820();
  v95 = v23;
  sub_1BE9BE368();
  v96 = sub_1BE9FB8E8();
  if (!sub_1BE9BEA80(v96))
  {

    goto LABEL_51;
  }
  v138 = (id)v20;
  v97 = sub_1BE9BE304();
  v98 = sub_1BE9BE304();
  v144 = v98;
  *(_DWORD *)v97 = 136315394;
  v99 = sub_1BE9BF41C(v98, sel_appleAccount);
  sub_1BE9FB38C(v99, (SEL *)&selRef_username);
  if (v101)
  {
    v102 = sub_1BE9FB890(v100, v101);
    sub_1BE9BF508(v102);

    swift_bridgeObjectRelease();
    *(_WORD *)(v97 + 12) = 2080;
    sub_1BE9FB31C(v23, (SEL *)&selRef_dsid);
    v140 = v103;
    v141 = v104;
    sub_1BE9BEF38(&qword_1EF570A30);
    v105 = sub_1BE9FB850();
    v107 = sub_1BE9FB890(v105, v106);
    sub_1BE9C6DB8(v107);

    sub_1BE9C6C90();
    sub_1BE9FB870(&dword_1BE990000, v108, v96, "Initialized fake account with email %s and dsid %s");
    sub_1BE9C6CA4();
    sub_1BE9BE6D4();
  }
LABEL_56:

  __break(1u);
LABEL_57:

  __break(1u);
}

uint64_t sub_1BE9FA138(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BE9BEF38((uint64_t *)&unk_1EF570C20);
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1BE9FA1C8(char a1, void *a2, uint64_t a3)
{
  void *v5;
  char v6;
  id v7;
  void *v8;
  char v9;
  uint64_t v10;

  if (a2)
  {
    swift_beginAccess();
    v5 = *(void **)(a3 + 16);
    v6 = *(_BYTE *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = a2;
    *(_BYTE *)(a3 + 24) = 1;
    v7 = a2;
    v8 = v5;
    v9 = v6;
  }
  else
  {
    v10 = a1 & 1;
    swift_beginAccess();
    v8 = *(void **)(a3 + 16);
    v9 = *(_BYTE *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)(a3 + 24) = 0;
  }
  sub_1BE9FB2A0(v8, v9);
  return OS_dispatch_semaphore.signal()();
}

void sub_1BE9FA274(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();
  sub_1BE9BE694(v6);
}

uint64_t CKDBackingExplicitCredentialsAccount.updateAccountPropertiesAndSave()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

uint64_t sub_1BE9FA36C()
{
  uint64_t v0;

  sub_1BE9F5B74();
  sub_1BE9FB898();
  *(_QWORD *)(v0 + 24) = 9;
  sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
  sub_1BE9FB238();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1BE9FA45C(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1BE9FA4BC;
  return CKDBackingExplicitCredentialsAccount.updateAccountPropertiesAndSave()();
}

uint64_t sub_1BE9FA4BC(char a1)
{
  void *v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();

  v6 = *(_QWORD *)(v5 + 24);
  if (v1)
  {
    v7 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, _QWORD, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void CKDBackingExplicitCredentialsAccount.setOverrides(on:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;

  sub_1BE9FB38C(objc_msgSend(v1, sel_appleAccount), (SEL *)&selRef_aa_password);
  if (v3)
  {
    v4 = (id)MEMORY[0x1C3B822A0]();
    sub_1BE9BDA80();
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(a1, sel__setPassword_, v4);

}

id CKDBackingExplicitCredentialsAccount.ckAccount.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_fakeCKAccount);
}

void CKDBackingExplicitCredentialsAccount.password.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_appleAccount);
  v2 = objc_msgSend(v1, sel_credential);

  if (v2)
  {
    sub_1BE9FB38C(v2, (SEL *)&selRef_password);
    if (v3)
    {
      sub_1BE9B69D4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CKDBackingExplicitCredentialsAccount.cloudKitAuthToken()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  Swift::String result;

  v1 = objc_msgSend(v0, sel_ckAccount);
  if (!v1)
    goto LABEL_4;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_credential);

  if (!v3)
  {
    __break(1u);
    goto _$sSo36CKDBackingExplicitCredentialsAccountC14CloudKitDaemonE05cloudF9AuthTokenSSyKF;
  }
  sub_1BE9FB38C(v3, (SEL *)&selRef_token);
  if (!v6)
  {
LABEL_4:
    type metadata accessor for CKError(0);
    sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
    sub_1BE9FB238();
    sub_1BE9BDB60();
    sub_1BE9FB8DC();
  }
  sub_1BE9BD6B8();
_$sSo36CKDBackingExplicitCredentialsAccountC14CloudKitDaemonE05cloudF9AuthTokenSSyKF:
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CKDBackingExplicitCredentialsAccount.iCloudAuthToken()()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  Swift::String result;

  v1 = objc_msgSend(v0, sel_appleAccount);
  v2 = objc_msgSend(v1, sel_credential);

  if (v2)
  {
    sub_1BE9FB38C(v2, (SEL *)&selRef_token);
    if (!v5)
    {
      type metadata accessor for CKError(0);
      sub_1BE9FAC40(MEMORY[0x1E0DEE9D8]);
      sub_1BE9FB238();
      sub_1BE9BDB60();
      sub_1BE9FB8DC();
    }
    sub_1BE9BD6B8();
  }
  else
  {
    __break(1u);
  }
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

id sub_1BE9FA8B8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v5 = a1;
  v6 = a4();
  v8 = v7;

  v9 = (void *)MEMORY[0x1C3B822A0](v6, v8);
  sub_1BE9BDA80();
  return v9;
}

id sub_1BE9FA968(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)MEMORY[0x1C3B822A0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v2, sel_initWithPassword_, v3);

  return v4;
}

uint64_t sub_1BE9FA9C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1BE9FB7E0;
  return v6();
}

uint64_t sub_1BE9FAA1C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1BE9FB7E0;
  return v7();
}

uint64_t sub_1BE9FAA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, 1, v6) == 1)
  {
    sub_1BE9BEA38(a1, &qword_1ED700768);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1BE9FABB4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1BE9FAC18;
  return v6(a1);
}

uint64_t sub_1BE9FAC18()
{
  uint64_t v0;

  sub_1BE9BE714();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_1BE9FAC40(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BE9BEF38((uint64_t *)&unk_1EF570338);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BE9FB75C(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_1BE9FAD68(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1BE9E13CC(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BE9FAD68(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return sub_1BE9FADCC(a1, a2, v4);
}

unint64_t sub_1BE9FADCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1BE9FAF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE9FAF80(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BE9ECC2C);
}

uint64_t sub_1BE9FAF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char v7;
  uint64_t v9;

  swift_isUniquelyReferenced_nonNull_native();
  sub_1BE9C6D04();
  sub_1BE9ECC48(a1, a2, a3, v7);
  *v3 = v9;
  return sub_1BE9BDB00();
}

uint64_t sub_1BE9FAF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE9FAF80(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BE9ECD50);
}

uint64_t sub_1BE9FAF80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v10;

  swift_isUniquelyReferenced_nonNull_native();
  sub_1BE9C6D04();
  a4(a1, a2, a3);
  *v4 = v10;
  return sub_1BE9BDB00();
}

uint64_t sub_1BE9FAFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v5;
  *v5 = 0x8000000000000000;
  sub_1BE9ECE60(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
  *v5 = v13;
  return swift_bridgeObjectRelease();
}

id sub_1BE9FB070(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v4 = (void *)MEMORY[0x1C3B822A0]();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(a3, sel_accountTypeWithAccountTypeIdentifier_, v4);

  return v5;
}

unint64_t sub_1BE9FB0D0()
{
  unint64_t result;

  result = qword_1EF570A28;
  if (!qword_1EF570A28)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF570A28);
  }
  return result;
}

void sub_1BE9FB10C(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  void *v6;

  v6 = (void *)MEMORY[0x1C3B822A0]();
  sub_1BE9B6958();
  objc_msgSend(a3, *a4, v6);
  sub_1BE9BE694(v6);
}

void sub_1BE9FB154(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setProperties_forDataclass_, isa, a2);

}

void sub_1BE9FB1D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;

  v6 = (id)MEMORY[0x1C3B822A0](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_setAccountProperty_forKey_, a1, v6);

}

unint64_t sub_1BE9FB238()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF570248;
  if (!qword_1EF570248)
  {
    type metadata accessor for CKError(255);
    result = MEMORY[0x1C3B84508](&unk_1BECB9708, v1);
    atomic_store(result, (unint64_t *)&qword_1EF570248);
  }
  return result;
}

uint64_t sub_1BE9FB278()
{
  uint64_t v0;

  sub_1BE9FB2A0(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

void sub_1BE9FB2A0(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_1BE9FB2AC()
{
  return sub_1BE9FB708((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

Swift::Int sub_1BE9FB2B8(char a1, void *a2)
{
  uint64_t v2;

  return sub_1BE9FA1C8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1BE9FB2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1BE9FB2D0()
{
  return swift_release();
}

void sub_1BE9FB2D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x1C3B822A0]();
  objc_msgSend(a3, sel__setMasterKey_, v4);

}

void sub_1BE9FB31C(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_1BE9BE138();
  sub_1BE9B6960();
}

Swift::Int sub_1BE9FB36C()
{
  return OS_dispatch_semaphore.signal()();
}

void sub_1BE9FB38C(void *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(a1, *a2);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_1BE9B6960();
}

uint64_t type metadata accessor for CKCredentialInterceptingAccount()
{
  return objc_opt_self();
}

uint64_t _s29ExplicitCredentialAccountListCMa()
{
  return objc_opt_self();
}

ValueMetadata *_s29ExplicitCredentialAccountListC33TuplesOfHashablesShouldBeHashableVMa()
{
  return &_s29ExplicitCredentialAccountListC33TuplesOfHashablesShouldBeHashableVN;
}

unint64_t sub_1BE9FB440()
{
  unint64_t result;

  result = qword_1EF570B70;
  if (!qword_1EF570B70)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECB9B94, &_s29ExplicitCredentialAccountListC33TuplesOfHashablesShouldBeHashableVN);
    atomic_store(result, (unint64_t *)&qword_1EF570B70);
  }
  return result;
}

uint64_t sub_1BE9FB47C()
{
  return sub_1BE9FB708((void (*)(_QWORD))MEMORY[0x1E0C80958]);
}

uint64_t sub_1BE9FB488()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BE9FB7E0;
  v2 = sub_1BE9BE138();
  return v3(v2);
}

uint64_t sub_1BE9FB4EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1BE9FB7E0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EF570B90 + dword_1EF570B90))(v2, v3, v4);
}

uint64_t sub_1BE9FB568()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE9FB594(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1BE9FB618;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EF570BA0 + dword_1EF570BA0))(a1, v4, v5, v6);
}

uint64_t sub_1BE9FB618()
{
  uint64_t v0;

  sub_1BE9BE714();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BE9FB644()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE9FB668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BE9FB6D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF570BB0 + dword_1EF570BB0))(a1, v4);
}

uint64_t sub_1BE9FB6D8()
{
  uint64_t v0;

  sub_1BE9BE714();
  return sub_1BE9BD858(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1BE9FB6FC()
{
  return sub_1BE9FB708((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1BE9FB708(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));

  return swift_deallocObject();
}

uint64_t sub_1BE9FB738()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BE9FB75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BE9BEF38(&qword_1EF570C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BE9FB7A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_1BE9BEF38(a3);
  v3 = sub_1BE9BE138();
  v4(v3);
  sub_1BE9B69D4();
}

uint64_t sub_1BE9FB814()
{
  return swift_willThrow();
}

uint64_t sub_1BE9FB820()
{
  return CKLog.getter();
}

uint64_t sub_1BE9FB82C()
{
  return swift_bridgeObjectRelease_n();
}

id sub_1BE9FB834()
{
  void *v0;

  return v0;
}

uint64_t sub_1BE9FB83C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE9FB850()
{
  return String.init<A>(describing:)();
}

void sub_1BE9FB870(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 0x16u);
}

uint64_t sub_1BE9FB880()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1BE9FB890(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1BE9E043C(a1, a2, (uint64_t *)(v2 - 112));
}

void sub_1BE9FB898()
{
  type metadata accessor for CKError(0);
}

uint64_t sub_1BE9FB8A0()
{
  return CKLog.getter();
}

id sub_1BE9FB8A8()
{
  void *v0;

  return v0;
}

BOOL sub_1BE9FB8B0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

__n128 sub_1BE9FB8C0(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  __n128 result;

  *(_QWORD *)(v2 - 168) = a1;
  result = *(__n128 *)(v2 - 288);
  *v1 = result.n128_u32[0];
  return result;
}

uint64_t sub_1BE9FB8D4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9FB8DC()
{
  return swift_willThrow();
}

uint64_t sub_1BE9FB8E8()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_1BE9FB8F0()
{
  return static os_log_type_t.error.getter();
}

unint64_t sub_1BE9FB8F8()
{
  return sub_1BE9FB238();
}

uint64_t sub_1BE9FB900(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1BE9E043C(a1, a2, (uint64_t *)(v2 - 168));
}

uint64_t sub_1BE9FB908()
{
  return swift_dynamicCast();
}

id sub_1BE9FB914(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1BE9FB920()
{
  uint64_t (*v0)(void);

  return v0();
}

void *sub_1BE9FB92C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = v1;
  *(_QWORD *)(v2 - 144) = a1;
  return _Block_copy((const void *)(v2 - 168));
}

uint64_t sub_1BE9FB938()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE9FB944()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1BE9FB94C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t PartialTrafficLog.RequestMetadata.init(requestUUID:date:url:method:headers:requestClass:parsingStandaloneMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11)
{
  int *v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;

  *a9 = a1;
  a9[1] = a2;
  v17 = (int *)sub_1BEA034F0();
  v18 = (char *)a9 + v17[5];
  sub_1BEA03554();
  sub_1BEA0365C();
  v19(v18, a3);
  v20 = (char *)a9 + v17[6];
  sub_1BEA0372C();
  sub_1BEA0365C();
  result = v21(v20, a4);
  v23 = (_QWORD *)((char *)a9 + v17[7]);
  *v23 = a5;
  v23[1] = a6;
  *(_QWORD *)((char *)a9 + v17[8]) = a7;
  v24 = (_QWORD *)((char *)a9 + v17[9]);
  *v24 = a8;
  v24[1] = a10;
  *((_BYTE *)a9 + v17[10]) = a11;
  return result;
}

void static PartialTrafficLog.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22[5];
  uint64_t v23;

  v23 = a2;
  v22[2] = sub_1BEA03724();
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v3);
  sub_1BE9C6D7C(v4, v22[0]);
  sub_1BEA034F0();
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v5);
  sub_1BEA035DC(v6, v22[0]);
  type metadata accessor for PartialTrafficLog(0);
  sub_1BE9BE330();
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v22[4] = (uint64_t)v22 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v13);
  sub_1BEA0380C();
  MEMORY[0x1E0C80A78](v14);
  sub_1BE9BEF38(&qword_1EF570C50);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v15);
  sub_1BE9BDA90();
  v18 = v17 - v16;
  v20 = v18 + *(int *)(v19 + 48);
  sub_1BE9BE3B8(a1, v18, type metadata accessor for PartialTrafficLog);
  sub_1BE9BE3B8(v23, v20, type metadata accessor for PartialTrafficLog);
  v21 = (char *)sub_1BE9FBC08 + 4 * byte_1BECB9C20[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BE9FBC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  sub_1BE9BE3B8(v2, v1, type metadata accessor for PartialTrafficLog);
  if (sub_1BE9BE794())
  {
    sub_1BE9BE8F8(v1, type metadata accessor for PartialTrafficLog.RequestMetadata);
    sub_1BE9FE43C(v2);
    v7 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 200);
    sub_1BE9FE47C(v0, v4, type metadata accessor for PartialTrafficLog.RequestMetadata);
    static PartialTrafficLog.RequestMetadata.== infix(_:_:)(v1);
    v7 = v5;
    sub_1BE9BE8F8(v4, type metadata accessor for PartialTrafficLog.RequestMetadata);
    sub_1BE9BE8F8(v1, type metadata accessor for PartialTrafficLog.RequestMetadata);
    sub_1BEA03788(v6, type metadata accessor for PartialTrafficLog);
  }
  return v7 & 1;
}

void PartialTrafficLog.RequestMetadata.requestUUID.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t PartialTrafficLog.RequestMetadata.date.getter()
{
  return sub_1BE9FD1B0((void (*)(_QWORD))type metadata accessor for PartialTrafficLog.RequestMetadata);
}

uint64_t PartialTrafficLog.RequestMetadata.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1BEA034F0();
  sub_1BEA0372C();
  v0 = sub_1BE9BE138();
  return sub_1BE9C6D48(v0, v1, v2, v3);
}

void PartialTrafficLog.RequestMetadata.method.getter()
{
  sub_1BEA034F0();
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t PartialTrafficLog.RequestMetadata.headers.getter()
{
  sub_1BEA034F0();
  return swift_bridgeObjectRetain();
}

void PartialTrafficLog.RequestMetadata.requestClass.getter()
{
  sub_1BEA034F0();
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t PartialTrafficLog.RequestMetadata.parsingStandaloneMessage.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_1BEA034F0() + 40));
}

void static PartialTrafficLog.RequestMetadata.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  sub_1BE9BE370(a1);
  v6 = v6 && v4 == v5;
  if (v6 || (sub_1BE9BDAD8() & 1) != 0)
  {
    sub_1BEA034F0();
    if ((sub_1BEA03614() & 1) != 0 && (MEMORY[0x1C3B82084](v2 + v3[6], v1 + v3[6]) & 1) != 0)
    {
      sub_1BE9B6940(v3[7]);
      v9 = v6 && v7 == v8;
      if ((v9 || (sub_1BE9BDAD8() & 1) != 0)
        && (sub_1BE9FC1E4(*(_QWORD *)(v2 + v3[8]), *(_QWORD *)(v1 + v3[8])) & 1) != 0)
      {
        sub_1BE9B6940(v3[9]);
        if (!v6 || v10 != v11)
          sub_1BE9BDAD8();
      }
    }
  }
  sub_1BE9B6960();
}

uint64_t sub_1BE9FC1E4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  char v25;
  int64_t v26;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_22;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v26)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v26)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v26)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_21:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v10);
    v19 = *v17;
    v18 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = sub_1BE9BF2A0(v15, v16);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v23 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v20);
    if (*v23 == v19 && v23[1] == v18)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v26)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1BE9FC3E4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v11;

  v3 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1702125924 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 7107189 && a2 == 0xE300000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x646F6874656DLL && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x73726564616568 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x4374736575716572 && a2 == 0xEC0000007373616CLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000018 && a2 == 0x80000001BECBE610)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v11 & 1) != 0)
                return 6;
              else
                return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1BE9FC678(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BE9FC6B0 + 4 * byte_1BECB9C27[a1]))(0xD000000000000018, 0x80000001BECBE610);
}

uint64_t sub_1BE9FC6B0()
{
  return 0x5574736575716572;
}

uint64_t sub_1BE9FC6D0()
{
  return 1702125924;
}

uint64_t sub_1BE9FC6E0()
{
  return 7107189;
}

uint64_t sub_1BE9FC6F0()
{
  return 0x646F6874656DLL;
}

uint64_t sub_1BE9FC704()
{
  return 0x73726564616568;
}

uint64_t sub_1BE9FC71C()
{
  return 0x4374736575716572;
}

uint64_t sub_1BE9FC740()
{
  unsigned __int8 *v0;

  return sub_1BE9FC678(*v0);
}

uint64_t sub_1BE9FC748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BE9FC3E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BE9FC76C()
{
  sub_1BE9FE4A0();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FC794()
{
  sub_1BE9FE4A0();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.RequestMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_1BE9BEF38(&qword_1ED7003C0);
  sub_1BEA0366C();
  MEMORY[0x1E0C80A78](v4);
  sub_1BE9F4DA8(a1, a1[3]);
  sub_1BE9FE4A0();
  sub_1BEA0358C();
  sub_1BEA034A8();
  if (!v1)
  {
    type metadata accessor for PartialTrafficLog.RequestMetadata(0);
    sub_1BE9BD6C8();
    sub_1BE9BB8AC((unint64_t *)&unk_1ED7002D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1BE9BE6A4();
    sub_1BEA0374C();
    type metadata accessor for URL();
    sub_1BE9BB8AC(&qword_1ED7002C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1BE9BE6A4();
    sub_1BEA034A8();
    sub_1BE9BEF38(&qword_1ED700370);
    sub_1BE9FE4DC(&qword_1ED700760, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1BE9BE6A4();
    sub_1BEA034A8();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  sub_1BEA035AC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1BE9BEA24();
}

void PartialTrafficLog.RequestMetadata.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;

  sub_1BE9BEA8C();
  v21 = v4;
  v5 = type metadata accessor for URL();
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v6);
  sub_1BEA0370C();
  v7 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v8);
  sub_1BE9C6CEC();
  v22 = sub_1BE9BEF38(&qword_1EF570C58);
  v9 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v27 = (int *)sub_1BEA03500();
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v10);
  sub_1BE9BDE58();
  v12 = v11;
  sub_1BEA036D8();
  sub_1BE9FE4A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1BEA037A8();
  }
  else
  {
    *v12 = sub_1BE9C6CB4();
    v12[1] = v13;
    sub_1BEA03764();
    sub_1BE9BB8AC(&qword_1EF570C60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
    sub_1BE9BF540();
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))((char *)v12 + v27[5], v1, v26);
    sub_1BEA0374C();
    sub_1BE9BB8AC(&qword_1EF570C68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    sub_1BE9BF540();
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))((char *)v12 + v27[6], v3, v24);
    v14 = sub_1BE9C6CB4();
    v15 = (uint64_t *)((char *)v12 + v27[7]);
    *v15 = v14;
    v15[1] = v16;
    sub_1BE9BEF38(&qword_1ED700370);
    sub_1BE9FE4DC(&qword_1EF570C70, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(uint64_t *)((char *)v12 + v27[8]) = v28;
    v17 = sub_1BE9C6CB4();
    v18 = (uint64_t *)((char *)v12 + v27[9]);
    *v18 = v17;
    v18[1] = v19;
    v20 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1BE9BD8AC(v2, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    *((_BYTE *)v12 + v27[10]) = v20 & 1;
    sub_1BE9BE3B8((uint64_t)v12, v21, type metadata accessor for PartialTrafficLog.RequestMetadata);
    sub_1BEA037A8();
    sub_1BE9BE8F8((uint64_t)v12, type metadata accessor for PartialTrafficLog.RequestMetadata);
  }
  sub_1BE9BF498();
}

void sub_1BE9FCE48()
{
  PartialTrafficLog.RequestMetadata.init(from:)();
}

void sub_1BE9FCE5C(_QWORD *a1)
{
  PartialTrafficLog.RequestMetadata.encode(to:)(a1);
}

void PartialTrafficLog.RequestObject.requestUUID.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

void PartialTrafficLog.RequestObject.objectData.getter()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_1BE9BE138();
  sub_1BE9BE3E4(v0, v1);
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

BOOL sub_1BE9FCEBC(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1BE9FCECC(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_1BE9FCEF0()
{
  return 2;
}

uint64_t sub_1BE9FCEF8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x61447463656A626FLL;
  else
    return 0x5574736575716572;
}

BOOL sub_1BE9FCF3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BE9FCEBC(*a1, *a2);
}

void sub_1BE9FCF48()
{
  char *v0;

  sub_1BE9FE050(*v0);
}

void sub_1BE9FCF60(uint64_t a1)
{
  char *v1;

  sub_1BE9FCECC(a1, *v1);
}

uint64_t sub_1BE9FCF68()
{
  char *v0;

  return sub_1BE9FCEF8(*v0);
}

void sub_1BE9FCF70(_BYTE *a1@<X8>)
{
  char v2;

  sub_1BE9FDFA4();
  *a1 = v2;
}

uint64_t sub_1BE9FCF94()
{
  return sub_1BE9FE7D0();
}

uint64_t sub_1BE9FCFB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE9FCEF0();
  *a1 = result;
  return result;
}

uint64_t sub_1BE9FCFD4()
{
  sub_1BE9FE53C();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FCFFC()
{
  sub_1BE9FE53C();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.RequestObject.encode(to:)()
{
  sub_1BE9FE120();
}

void PartialTrafficLog.RequestObject.init(from:)()
{
  sub_1BE9FE24C();
}

void sub_1BE9FD07C()
{
  PartialTrafficLog.RequestObject.init(from:)();
}

void sub_1BE9FD090()
{
  PartialTrafficLog.RequestObject.encode(to:)();
}

void sub_1BE9FD0B0()
{
  sub_1BE9FEF94();
}

uint64_t sub_1BE9FD0D0()
{
  sub_1BE9FE5F0();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FD0F8()
{
  sub_1BE9FE5F0();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.RequestBodyStreamReset.encode(to:)()
{
  sub_1BE9FE8E0();
}

void PartialTrafficLog.RequestBodyStreamReset.init(from:)()
{
  sub_1BE9FEA00();
}

void sub_1BE9FD178()
{
  PartialTrafficLog.RequestBodyStreamReset.init(from:)();
}

void sub_1BE9FD18C()
{
  PartialTrafficLog.RequestBodyStreamReset.encode(to:)();
}

uint64_t PartialTrafficLog.ResponseMetadata.date.getter()
{
  return sub_1BE9FD1B0((void (*)(_QWORD))type metadata accessor for PartialTrafficLog.ResponseMetadata);
}

uint64_t sub_1BE9FD1B0(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  a1(0);
  sub_1BEA03554();
  v1 = sub_1BE9BE138();
  return sub_1BE9C6D48(v1, v2, v3, v4);
}

uint64_t PartialTrafficLog.ResponseMetadata.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_1BEA03724() + 24));
}

uint64_t PartialTrafficLog.ResponseMetadata.headers.getter()
{
  sub_1BEA03724();
  return swift_bridgeObjectRetain();
}

void static PartialTrafficLog.ResponseMetadata.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  sub_1BE9BE370(a1);
  v6 = v6 && v4 == v5;
  if ((v6 || (sub_1BE9BDAD8() & 1) != 0)
    && (sub_1BEA03724(), (sub_1BEA03614() & 1) != 0)
    && *(_QWORD *)(v2 + *(int *)(v3 + 24)) == *(_QWORD *)(v1 + *(int *)(v3 + 24)))
  {
    sub_1BE9FC1E4(*(_QWORD *)(v2 + *(int *)(v3 + 28)), *(_QWORD *)(v1 + *(int *)(v3 + 28)));
  }
  else
  {
    sub_1BE9B6960();
  }
}

uint64_t sub_1BE9FD294(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v6;
  BOOL v7;
  char v9;

  v3 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1702125924 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x73726564616568 && a2 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_1BE9FD420()
{
  return 4;
}

uint64_t sub_1BE9FD428(char a1)
{
  return *(_QWORD *)&aRequestudate[8 * a1];
}

uint64_t sub_1BE9FD448()
{
  char *v0;

  return sub_1BE9FD428(*v0);
}

uint64_t sub_1BE9FD450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BE9FD294(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BE9FD474@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE9FD420();
  *a1 = result;
  return result;
}

uint64_t sub_1BE9FD498()
{
  sub_1BE9FE62C();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FD4C0()
{
  sub_1BE9FE62C();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.ResponseMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_1BE9BEF38(&qword_1ED7003C8);
  sub_1BEA0366C();
  MEMORY[0x1E0C80A78](v4);
  sub_1BE9F4DA8(a1, a1[3]);
  sub_1BE9FE62C();
  sub_1BEA0358C();
  sub_1BEA034A8();
  if (!v1)
  {
    type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
    sub_1BE9BD6C8();
    sub_1BE9BB8AC((unint64_t *)&unk_1ED7002D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1BE9BE6A4();
    sub_1BEA0374C();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_1BE9BEF38(&qword_1ED700370);
    sub_1BE9FE4DC(&qword_1ED700760, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1BE9BE6A4();
  }
  sub_1BEA035AC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1BE9BEA24();
}

void PartialTrafficLog.ResponseMetadata.init(from:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1BE9BEA8C();
  v4 = v3;
  v11 = v5;
  v6 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v6 - 8);
  v13 = v6;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v7);
  sub_1BE9C6D20();
  v14 = sub_1BE9BEF38(&qword_1EF570C90);
  MEMORY[0x1E0C80A78](v14);
  sub_1BE9BDA90();
  v8 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v9);
  sub_1BE9BE8D4();
  sub_1BEA036D8();
  sub_1BE9FE62C();
  sub_1BEA03734();
  if (v0)
  {
    sub_1BE9E13DC(v4);
  }
  else
  {
    *v1 = KeyedDecodingContainer.decode(_:forKey:)();
    v1[1] = v10;
    sub_1BEA03764();
    sub_1BE9BB8AC(&qword_1EF570C60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))((char *)v1 + v8[5], v2, v13);
    *(uint64_t *)((char *)v1 + v8[6]) = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1BE9BEF38(&qword_1ED700370);
    sub_1BE9FE4DC(&qword_1EF570C70, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1BE9BF524();
    *(uint64_t *)((char *)v1 + v8[7]) = v15;
    sub_1BE9BE3B8((uint64_t)v1, v11, type metadata accessor for PartialTrafficLog.ResponseMetadata);
    sub_1BE9E13DC(v4);
    sub_1BE9BE8F8((uint64_t)v1, type metadata accessor for PartialTrafficLog.ResponseMetadata);
  }
  sub_1BE9BF498();
}

void sub_1BE9FD908()
{
  PartialTrafficLog.ResponseMetadata.init(from:)();
}

void sub_1BE9FD91C(_QWORD *a1)
{
  PartialTrafficLog.ResponseMetadata.encode(to:)(a1);
}

void PartialTrafficLog.ResponseConfiguration.requestUUID.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t PartialTrafficLog.ResponseConfiguration.format.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void PartialTrafficLog.ResponseConfiguration.messageClass.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t static PartialTrafficLog.ResponseConfiguration.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v6)
      return 0;
    goto LABEL_9;
  }
  v9 = sub_1BE9BDAD8();
  result = 0;
  if ((v9 & 1) != 0 && v2 == v6)
  {
LABEL_9:
    if (v4)
    {
      if (v7)
      {
        if (v3 == v5 && v4 == v7)
          return 1;
        sub_1BE9BE138();
        if ((sub_1BE9BDAD8() & 1) != 0)
          return 1;
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1BE9FDA2C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v6;
  char v8;

  v3 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x436567617373656DLL && a2 == 0xEC0000007373616CLL)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1BE9FDB80()
{
  return 3;
}

uint64_t sub_1BE9FDB88(char a1)
{
  return *(_QWORD *)&aRequestuformat[8 * a1];
}

uint64_t sub_1BE9FDBA8()
{
  char *v0;

  return sub_1BE9FDB88(*v0);
}

uint64_t sub_1BE9FDBB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BE9FDA2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BE9FDBD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE9FDB80();
  *a1 = result;
  return result;
}

uint64_t sub_1BE9FDBF8()
{
  sub_1BE9FE668();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FDC20()
{
  sub_1BE9FE668();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.ResponseConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1BE9BEA8C();
  v3 = v2;
  v4 = sub_1BE9BEF38(&qword_1ED700790);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1BE9B6988();
  sub_1BE9F4DA8(v3, v3[3]);
  sub_1BE9FE668();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    sub_1BEA03764();
    sub_1BE9FE6A4();
    sub_1BE9BE6A4();
    sub_1BEA0374C();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  sub_1BEA034B8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1BE9BF498();
}

void PartialTrafficLog.ResponseConfiguration.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  sub_1BE9BEA8C();
  v3 = v2;
  v5 = v4;
  v6 = sub_1BE9BEF38(&qword_1EF570C98);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  sub_1BEA036F4();
  sub_1BE9F4DA8(v3, v3[3]);
  sub_1BE9FE668();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1BEA035B8();
  }
  else
  {
    v8 = sub_1BEA03838();
    v10 = v9;
    sub_1BEA03764();
    v11 = sub_1BE9FE6E0();
    sub_1BE9F5454();
    sub_1BEA0351C();
    if (v11)
    {
      sub_1BE9BD8AC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      sub_1BE9EDE0C();
      sub_1BEA035B8();
    }
    else
    {
      v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v14 = v13;
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      v16 = v12;
      sub_1BE9BD8AC(v1, v15);
      *v5 = v8;
      v5[1] = v10;
      v5[2] = v17;
      v5[3] = v16;
      v5[4] = v14;
      sub_1BE9BF3F4();
      sub_1BEA035B8();
      swift_bridgeObjectRelease();
    }
    sub_1BE9EDE0C();
  }
  sub_1BE9BF498();
}

void sub_1BE9FDF0C()
{
  PartialTrafficLog.ResponseConfiguration.init(from:)();
}

void sub_1BE9FDF20()
{
  PartialTrafficLog.ResponseConfiguration.encode(to:)();
}

void _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_1BE9BDAD8() & 1) != 0)
  {
    sub_1BE9BE138();
    JUMPOUT(0x1C3B820C0);
  }
  sub_1BE9B6960();
}

void sub_1BE9FDFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  sub_1BEA034C8();
  v4 = v4 && v2 == v3;
  if (v4
    || (v5 = v1, sub_1BE9FE7DC(), (sub_1BE9BDAD8() & 1) != 0)
    || (v5 == 0x61447463656A626FLL ? (v6 = v0 == 0xEA00000000006174) : (v6 = 0), v6))
  {
    sub_1BE9E1618();
  }
  else
  {
    sub_1BE9BDAD8();
    sub_1BE9E1618();
  }
  sub_1BE9B69D4();
}

void sub_1BE9FE050(char a1)
{
  sub_1BEA035A0();
  Hasher._combine(_:)(a1 & 1);
  sub_1BE9BE3B0();
  sub_1BE9C6DD0();
}

void sub_1BE9FE080()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = sub_1BEA0379C();
  sub_1BEA037B0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1BE9BE3B0();
  sub_1BE9C6DD0();
}

uint64_t sub_1BE9FE0A4()
{
  sub_1BE9FE71C();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FE0CC()
{
  sub_1BE9FE71C();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.ResponseObject.encode(to:)()
{
  sub_1BE9FE120();
}

void sub_1BE9FE120()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;

  sub_1BE9BEA8C();
  v6 = v1;
  v3 = (_QWORD *)v2;
  v7 = *(_QWORD *)(sub_1BEA0368C(v2, v4) - 8);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v5);
  sub_1BE9B6988();
  sub_1BE9F4DA8(v3, v3[3]);
  v6();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    sub_1BE9FE578();
    sub_1BE9BE6A4();
  }
  sub_1BEA035AC(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  sub_1BE9BF498();
}

void PartialTrafficLog.ResponseObject.init(from:)()
{
  sub_1BE9FE24C();
}

void sub_1BE9FE24C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void (*v3)(void);
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  sub_1BE9BEA8C();
  v3 = v2;
  v5 = (_QWORD *)v4;
  v13 = v6;
  v14 = sub_1BEA0368C(v4, v7);
  v8 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  sub_1BEA036F4();
  sub_1BE9F4DA8(v5, v5[3]);
  v3();
  sub_1BEA0367C();
  if (v0)
  {
    sub_1BEA035B8();
  }
  else
  {
    LOBYTE(v15) = 0;
    v9 = sub_1BEA03838();
    v11 = v10;
    v12 = sub_1BE9FE5B4();
    sub_1BE9F5454();
    sub_1BEA0351C();
    sub_1BEA034B8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    if (v12)
    {
      sub_1BE9EDE0C();
      sub_1BE9E13DC((uint64_t)v5);
      sub_1BE9EDE0C();
    }
    else
    {
      sub_1BE9F5454();
      sub_1BE9BE3E4(v15, v16);
      sub_1BE9EDE0C();
      *v13 = v9;
      v13[1] = v11;
      v13[2] = v15;
      v13[3] = v16;
      sub_1BE9E13DC((uint64_t)v5);
      sub_1BE9EDE0C();
      sub_1BE9BE5BC(v15, v16);
    }
  }
  sub_1BE9BF498();
}

void sub_1BE9FE3C0()
{
  PartialTrafficLog.ResponseObject.init(from:)();
}

void sub_1BE9FE3D4()
{
  PartialTrafficLog.ResponseObject.encode(to:)();
}

void PartialTrafficLog.RequestComplete.requestUUID.getter()
{
  sub_1BE9BF3F4();
  sub_1BE9BE138();
  sub_1BE9B69D4();
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO22RequestBodyStreamResetV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1BE9FE43C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE9BEF38(&qword_1EF570C50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BE9FE47C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t (*v3)(uint64_t, uint64_t);

  sub_1BEA036B0(a1, a2, a3);
  sub_1BEA0365C();
  sub_1BE9BF4FC(v3);
  sub_1BE9B69D4();
}

unint64_t sub_1BE9FE4A0()
{
  unint64_t result;

  result = qword_1ED700488;
  if (!qword_1ED700488)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB21C, &type metadata for PartialTrafficLog.RequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700488);
  }
  return result;
}

uint64_t sub_1BE9FE4DC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = sub_1BE9E1F48(&qword_1ED700370);
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x1C3B84508](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BE9FE53C()
{
  unint64_t result;

  result = qword_1ED700448;
  if (!qword_1ED700448)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB1CC, &type metadata for PartialTrafficLog.RequestObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700448);
  }
  return result;
}

unint64_t sub_1BE9FE578()
{
  unint64_t result;

  result = qword_1ED7002C8;
  if (!qword_1ED7002C8)
  {
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ED7002C8);
  }
  return result;
}

unint64_t sub_1BE9FE5B4()
{
  unint64_t result;

  result = qword_1EF570C80;
  if (!qword_1EF570C80)
  {
    result = MEMORY[0x1C3B84508](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF570C80);
  }
  return result;
}

unint64_t sub_1BE9FE5F0()
{
  unint64_t result;

  result = qword_1ED700628;
  if (!qword_1ED700628)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB17C, &type metadata for PartialTrafficLog.RequestBodyStreamReset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700628);
  }
  return result;
}

unint64_t sub_1BE9FE62C()
{
  unint64_t result;

  result = qword_1ED700330;
  if (!qword_1ED700330)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB12C, &type metadata for PartialTrafficLog.ResponseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700330);
  }
  return result;
}

unint64_t sub_1BE9FE668()
{
  unint64_t result;

  result = qword_1ED700608;
  if (!qword_1ED700608)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB0DC, &type metadata for PartialTrafficLog.ResponseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700608);
  }
  return result;
}

unint64_t sub_1BE9FE6A4()
{
  unint64_t result;

  result = qword_1ED7002F8;
  if (!qword_1ED7002F8)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for ResponseFormat, &type metadata for ResponseFormat);
    atomic_store(result, (unint64_t *)&qword_1ED7002F8);
  }
  return result;
}

unint64_t sub_1BE9FE6E0()
{
  unint64_t result;

  result = qword_1EF570CA0;
  if (!qword_1EF570CA0)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for ResponseFormat, &type metadata for ResponseFormat);
    atomic_store(result, (unint64_t *)&qword_1EF570CA0);
  }
  return result;
}

unint64_t sub_1BE9FE71C()
{
  unint64_t result;

  result = qword_1ED700458;
  if (!qword_1ED700458)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB08C, &type metadata for PartialTrafficLog.ResponseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700458);
  }
  return result;
}

uint64_t sub_1BE9FE758()
{
  return 1;
}

void sub_1BE9FE760()
{
  Hasher._combine(_:)(0);
}

void sub_1BE9FE784()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  sub_1BEA034C8();
  v2 = v2 && v0 == v1;
  if (!v2)
  {
    sub_1BE9FE7DC();
    sub_1BE9BDAD8();
  }
  sub_1BE9E1618();
  sub_1BE9B69D4();
}

uint64_t sub_1BE9FE7D0()
{
  return 0;
}

uint64_t sub_1BE9FE7DC()
{
  return 0x5574736575716572;
}

void sub_1BE9FE7FC(_BYTE *a1@<X8>)
{
  char v2;

  sub_1BE9FE784();
  *a1 = v2 & 1;
}

uint64_t sub_1BE9FE824()
{
  return sub_1BE9FE7D0();
}

uint64_t sub_1BE9FE83C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE9FE758();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BE9FE864()
{
  sub_1BE9FE998();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FE88C()
{
  sub_1BE9FE998();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.RequestComplete.encode(to:)()
{
  sub_1BE9FE8E0();
}

void sub_1BE9FE8E0()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(void);

  sub_1BE9BEA8C();
  v6 = v1;
  v3 = (_QWORD *)v2;
  sub_1BEA0368C(v2, v4);
  sub_1BEA0366C();
  MEMORY[0x1E0C80A78](v5);
  sub_1BE9C6D20();
  sub_1BE9F4DA8(v3, v3[3]);
  v6();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  sub_1BEA03564(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_1BE9BF498();
}

unint64_t sub_1BE9FE998()
{
  unint64_t result;

  result = qword_1ED700470;
  if (!qword_1ED700470)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBB03C, &type metadata for PartialTrafficLog.RequestComplete.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700470);
  }
  return result;
}

void PartialTrafficLog.RequestComplete.init(from:)()
{
  sub_1BE9FEA00();
}

void sub_1BE9FEA00()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void (*v3)(void);
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  sub_1BE9BEA8C();
  v3 = v2;
  v5 = (_QWORD *)v4;
  v12 = v6;
  v13 = sub_1BEA0368C(v4, v7);
  v8 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  sub_1BE9BE8D4();
  sub_1BE9F4DA8(v5, v5[3]);
  v3();
  sub_1BEA0367C();
  if (!v0)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    sub_1BEA03570(v1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    *v12 = v9;
    v12[1] = v11;
  }
  sub_1BEA035B8();
  sub_1BE9BF498();
}

BOOL sub_1BE9FEAE0(char a1, char a2)
{
  return a1 == a2;
}

void sub_1BE9FEAF0(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_1BE9FEB14(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v6;
  BOOL v7;
  char v9;

  v3 = a1 == 0x4D74736575716572 && a2 == 0xEF61746164617465;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x4F74736575716572 && a2 == 0xED00007463656A62;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000016 && a2 == 0x80000001BECBE630
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x80000001BECBE650
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x80000001BECBE670
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else
    {
      v7 = a1 == 0x65736E6F70736572 && a2 == 0xEE007463656A624FLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else if (a1 == 0x6574656C706D6F63 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 6;
        else
          return 7;
      }
    }
  }
}

uint64_t sub_1BE9FEE00()
{
  return 7;
}

void sub_1BE9FEE08(unsigned __int8 a1)
{
  sub_1BEA035A0();
  Hasher._combine(_:)(a1);
  sub_1BE9BE3B0();
  sub_1BE9C6DD0();
}

uint64_t sub_1BE9FEE38(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BE9FEE74 + 4 * byte_1BECB9C2E[a1]))(0xD000000000000016, 0x80000001BECBE630);
}

uint64_t sub_1BE9FEE74()
{
  return 0x4D74736575716572;
}

uint64_t sub_1BE9FEE98()
{
  return 0x4F74736575716572;
}

unint64_t sub_1BE9FEEBC()
{
  return 0xD000000000000010;
}

uint64_t sub_1BE9FEED8()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1BE9FEEF0()
{
  return 0x65736E6F70736572;
}

uint64_t sub_1BE9FEF14()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_1BE9FEF2C()
{
  return 12383;
}

void sub_1BE9FEF38(uint64_t a1, uint64_t a2)
{
  if (a1 != 12383 || a2 != 0xE200000000000000)
    sub_1BE9BDAD8();
  sub_1BE9E1618();
  sub_1BE9B69D4();
}

void sub_1BE9FEF94()
{
  sub_1BEA035A0();
  sub_1BEA037BC();
  sub_1BE9BE3B0();
  sub_1BE9C6DD0();
}

void sub_1BE9FEFB8()
{
  PartialTrafficLog.RequestComplete.init(from:)();
}

void sub_1BE9FEFCC()
{
  PartialTrafficLog.RequestComplete.encode(to:)();
}

BOOL sub_1BE9FEFE0(char *a1, char *a2)
{
  return sub_1BE9FEAE0(*a1, *a2);
}

void sub_1BE9FEFEC()
{
  unsigned __int8 *v0;

  sub_1BE9FEE08(*v0);
}

void sub_1BE9FF004(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1BE9FEAF0(a1, *v1);
}

uint64_t sub_1BE9FF00C()
{
  unsigned __int8 *v0;

  return sub_1BE9FEE38(*v0);
}

uint64_t sub_1BE9FF014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BE9FEB14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BE9FF038@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE9FEE00();
  *a1 = result;
  return result;
}

uint64_t sub_1BE9FF05C()
{
  sub_1BE9FF9E0();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF084()
{
  sub_1BE9FF9E0();
  return CodingKey.debugDescription.getter();
}

void sub_1BE9FF0B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_1BE9FEF38(a1, a2);
  *a3 = v4 & 1;
}

uint64_t sub_1BE9FF0D8()
{
  sub_1BE9FFA1C();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF100()
{
  sub_1BE9FFA1C();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_1BE9FF128()
{
  sub_1BE9FFBC0();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF150()
{
  sub_1BE9FFBC0();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_1BE9FF178()
{
  sub_1BE9FFCB0();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF1A0()
{
  sub_1BE9FFCB0();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_1BE9FF1C8()
{
  sub_1BE9FFC38();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF1F0()
{
  sub_1BE9FFC38();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_1BE9FF218()
{
  sub_1BE9FFB0C();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF240()
{
  sub_1BE9FFB0C();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_1BE9FF268()
{
  sub_1BE9FFB84();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF290()
{
  sub_1BE9FFB84();
  return CodingKey.debugDescription.getter();
}

void sub_1BE9FF2B8()
{
  Hasher.init(_seed:)();
  sub_1BEA037BC();
  sub_1BE9BE3B0();
  sub_1BE9C6DD0();
}

uint64_t sub_1BE9FF2E0()
{
  sub_1BE9FFA94();
  return CodingKey.description.getter();
}

uint64_t sub_1BE9FF308()
{
  sub_1BE9FFA94();
  return CodingKey.debugDescription.getter();
}

void PartialTrafficLog.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_1BE9BEA8C();
  a19 = v22;
  a20 = v23;
  v46 = v20;
  v25 = v24;
  sub_1BE9BEF38(&qword_1ED7003D0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v26);
  sub_1BE9C6D7C(v27, v43);
  sub_1BE9BEF38(&qword_1ED7003E0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v28);
  sub_1BEA035F8(v29, v44);
  sub_1BE9BEF38(&qword_1ED7007A8);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v30);
  sub_1BEA035C0(v31, v45);
  sub_1BE9BEF38(&qword_1ED7007A0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v32);
  sub_1BE9BDE58();
  v33 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  sub_1BEA03694(v33, (uint64_t)&a17);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v34);
  sub_1BE9BDE58();
  sub_1BE9BEF38(&qword_1ED7003F0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v35);
  sub_1BE9BDE58();
  v36 = sub_1BE9BEF38(&qword_1ED7003D8);
  sub_1BEA03694(v36, (uint64_t)&a13);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v37);
  sub_1BE9BDE58();
  sub_1BE9BEF38(&qword_1ED7003E8);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v38);
  sub_1BEA03500();
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v39);
  sub_1BE9C6CEC();
  type metadata accessor for PartialTrafficLog(0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v40);
  sub_1BEA0370C();
  sub_1BE9BEF38(&qword_1ED700778);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v41);
  sub_1BE9BE8D4();
  sub_1BE9F4DA8(v25, v25[3]);
  sub_1BE9FF9E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1BE9BE3B8(v46, v21, type metadata accessor for PartialTrafficLog);
  v42 = (char *)sub_1BE9FF5C0 + 4 * byte_1BECB9C35[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1BE9FF5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1BE9FE47C(v2, v0, type metadata accessor for PartialTrafficLog.RequestMetadata);
  *(_BYTE *)(v3 - 128) = 0;
  sub_1BE9FFCB0();
  v5 = *(_QWORD *)(v3 - 152);
  v4 = *(_QWORD *)(v3 - 144);
  sub_1BEA03820();
  sub_1BE9BB8AC(&qword_1ED700328, type metadata accessor for PartialTrafficLog.RequestMetadata, (uint64_t)&protocol conformance descriptor for PartialTrafficLog.RequestMetadata);
  sub_1BEA034F8();
  sub_1BEA03570(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 336) + 8));
  sub_1BE9BE8F8(v0, type metadata accessor for PartialTrafficLog.RequestMetadata);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v5, v4);
  sub_1BE9BF498();
}

unint64_t sub_1BE9FF9E0()
{
  unint64_t result;

  result = qword_1ED700438;
  if (!qword_1ED700438)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAFEC, &type metadata for PartialTrafficLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700438);
  }
  return result;
}

unint64_t sub_1BE9FFA1C()
{
  unint64_t result;

  result = qword_1ED700338;
  if (!qword_1ED700338)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAF9C, &type metadata for PartialTrafficLog.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700338);
  }
  return result;
}

unint64_t sub_1BE9FFA58()
{
  unint64_t result;

  result = qword_1ED700320;
  if (!qword_1ED700320)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.RequestComplete, &type metadata for PartialTrafficLog.RequestComplete);
    atomic_store(result, (unint64_t *)&qword_1ED700320);
  }
  return result;
}

unint64_t sub_1BE9FFA94()
{
  unint64_t result;

  result = qword_1ED700658;
  if (!qword_1ED700658)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAF4C, &type metadata for PartialTrafficLog.ResponseObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700658);
  }
  return result;
}

unint64_t sub_1BE9FFAD0()
{
  unint64_t result;

  result = qword_1ED700468;
  if (!qword_1ED700468)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.ResponseObject, &type metadata for PartialTrafficLog.ResponseObject);
    atomic_store(result, (unint64_t *)&qword_1ED700468);
  }
  return result;
}

unint64_t sub_1BE9FFB0C()
{
  unint64_t result;

  result = qword_1ED700358;
  if (!qword_1ED700358)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAEFC, &type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700358);
  }
  return result;
}

unint64_t sub_1BE9FFB48()
{
  unint64_t result;

  result = qword_1ED700620;
  if (!qword_1ED700620)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.ResponseConfiguration, &type metadata for PartialTrafficLog.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED700620);
  }
  return result;
}

unint64_t sub_1BE9FFB84()
{
  unint64_t result;

  result = qword_1ED700350;
  if (!qword_1ED700350)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAEAC, &type metadata for PartialTrafficLog.ResponseMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700350);
  }
  return result;
}

unint64_t sub_1BE9FFBC0()
{
  unint64_t result;

  result = qword_1ED700360;
  if (!qword_1ED700360)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAE5C, &type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700360);
  }
  return result;
}

unint64_t sub_1BE9FFBFC()
{
  unint64_t result;

  result = qword_1ED700640;
  if (!qword_1ED700640)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.RequestBodyStreamReset, &type metadata for PartialTrafficLog.RequestBodyStreamReset);
    atomic_store(result, (unint64_t *)&qword_1ED700640);
  }
  return result;
}

unint64_t sub_1BE9FFC38()
{
  unint64_t result;

  result = qword_1ED700340;
  if (!qword_1ED700340)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAE0C, &type metadata for PartialTrafficLog.RequestObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700340);
  }
  return result;
}

unint64_t sub_1BE9FFC74()
{
  unint64_t result;

  result = qword_1ED700310;
  if (!qword_1ED700310)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.RequestObject, &type metadata for PartialTrafficLog.RequestObject);
    atomic_store(result, (unint64_t *)&qword_1ED700310);
  }
  return result;
}

unint64_t sub_1BE9FFCB0()
{
  unint64_t result;

  result = qword_1ED700348;
  if (!qword_1ED700348)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBADBC, &type metadata for PartialTrafficLog.RequestMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700348);
  }
  return result;
}

void PartialTrafficLog.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80[6];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  sub_1BE9BEA8C();
  a19 = v23;
  a20 = v24;
  v26 = v25;
  v94 = v27;
  v99 = sub_1BE9BEF38(&qword_1EF570CB8);
  v91 = *(_QWORD *)(v99 - 8);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v28);
  sub_1BE9BDE58();
  v95 = v29;
  v30 = sub_1BE9BEF38(&qword_1EF570CC0);
  v89 = *(_QWORD *)(v30 - 8);
  v90 = v30;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v31);
  sub_1BEA035DC(v32, v80[0]);
  v33 = sub_1BE9BEF38(&qword_1EF570CC8);
  sub_1BEA03694(v33, (uint64_t)&a18);
  v88 = v34;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v35);
  sub_1BEA035F8(v36, v80[0]);
  v87 = sub_1BE9BEF38(&qword_1EF570CD0);
  v86 = *(_QWORD *)(v87 - 8);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v37);
  sub_1BE9C6D7C(v38, v80[0]);
  v39 = sub_1BE9BEF38(&qword_1EF570CD8);
  sub_1BEA03694(v39, (uint64_t)&a14);
  v85 = v40;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v41);
  sub_1BE9BDE58();
  v93 = v42;
  v43 = sub_1BE9BEF38(&qword_1EF570CE0);
  sub_1BEA03694(v43, (uint64_t)&a12);
  v84 = v44;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v45);
  sub_1BE9BDE58();
  v92 = v46;
  v83 = sub_1BE9BEF38(&qword_1EF570CE8);
  v82 = *(_QWORD *)(v83 - 8);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v47);
  sub_1BEA035C0(v48, v80[0]);
  v49 = sub_1BE9BEF38(&qword_1EF570CF0);
  v97 = *(_QWORD *)(v49 - 8);
  v98 = v49;
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v50);
  sub_1BE9C6D20();
  v96 = type metadata accessor for PartialTrafficLog(0);
  sub_1BE9BE330();
  MEMORY[0x1E0C80A78](v51);
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v52);
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v53);
  sub_1BE9BD89C();
  MEMORY[0x1E0C80A78](v54);
  sub_1BEA0380C();
  v56 = MEMORY[0x1E0C80A78](v55);
  v58 = (char *)v80 - v57;
  v59 = MEMORY[0x1E0C80A78](v56);
  v61 = (char *)v80 - v60;
  v62 = MEMORY[0x1E0C80A78](v59);
  v64 = (char *)v80 - v63;
  MEMORY[0x1E0C80A78](v62);
  v100 = v26;
  sub_1BEA036D8();
  sub_1BE9FF9E0();
  sub_1BEA03734();
  if (!v20)
  {
    v80[4] = (uint64_t)v64;
    v80[2] = (uint64_t)v61;
    v80[3] = (uint64_t)v58;
    v80[5] = v21;
    v65 = v98;
    v66 = KeyedDecodingContainer.allKeys.getter();
    v67 = *(_QWORD *)(v66 + 16);
    v81 = v22;
    v68 = v65;
    if (v67)
    {
      v80[1] = 0;
      v69 = *(unsigned __int8 *)(v66 + 32);
      sub_1BEA006C8(1, v67, v66, v66 + 32, 0, (2 * v67) | 1);
      v71 = v70;
      v73 = v72;
      swift_bridgeObjectRelease();
      if (v71 == v73 >> 1)
        __asm { BR              X9 }
    }
    v74 = v96;
    v75 = v97;
    v76 = type metadata accessor for DecodingError();
    swift_allocError();
    v78 = v77;
    sub_1BE9BEF38(&qword_1EF570CF8);
    *v78 = v74;
    v79 = v81;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v76 - 8) + 104))(v78, *MEMORY[0x1E0DEC450], v76);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v79, v68);
  }
  sub_1BE9E13DC(v100);
  sub_1BE9BF498();
}

void sub_1BEA00204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1BEA03758();
  v3 = *(_QWORD *)(v2 - 224);
  sub_1BE9BE734();
  if (v1)
  {
    sub_1BE9BDAA0();
    JUMPOUT(0x1BEA001E4);
  }
  sub_1BEA00830();
  sub_1BEA0351C();
  v4 = *(_QWORD *)(v2 - 160);
  sub_1BEA034B8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 320) + 8));
  sub_1BE9BDAA0();
  sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1BEA03628(*(_QWORD *)(v2 - 128));
  swift_storeEnumTagMultiPayload();
  sub_1BEA037E8(v0, v5, type metadata accessor for PartialTrafficLog);
  JUMPOUT(0x1BEA00678);
}

void sub_1BEA00244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1BEA03740();
  sub_1BE9BE734();
  sub_1BEA03850();
  if (!v2)
  {
    sub_1BEA007F4();
    sub_1BE9BF424();
    v4 = sub_1BEA03524();
    sub_1BE9BDB78(v4, *(_QWORD *)(v3 - 304));
    sub_1BE9BDAA0();
    sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_1BEA0385C(*(_QWORD *)(v3 - 128));
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x1BEA00674);
  }
  sub_1BE9BDAA0();
  sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8));
  JUMPOUT(0x1BEA001ECLL);
}

void sub_1BEA002C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  sub_1BEA03870();
  v2 = *(_QWORD *)(v1 - 368);
  sub_1BE9C6C60();
  if (!v0)
  {
    type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
    sub_1BE9BB8AC(&qword_1EF570D18, type metadata accessor for PartialTrafficLog.ResponseMetadata, (uint64_t)&protocol conformance descriptor for PartialTrafficLog.ResponseMetadata);
    v3 = *(_QWORD *)(v1 - 184);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1BEA034C0(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 288) + 8));
    sub_1BE9BDAA0();
    sub_1BEA0377C();
    sub_1BE9BD8AC(v2, v4);
    JUMPOUT(0x1BEA00568);
  }
  sub_1BE9BDAA0();
  sub_1BEA0377C();
  JUMPOUT(0x1BEA0050CLL);
}

void sub_1BEA00384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1BEA03844();
  sub_1BE9BE734();
  sub_1BEA03850();
  if (!v2)
  {
    sub_1BEA007B8();
    sub_1BE9BF424();
    v4 = sub_1BEA03524();
    sub_1BE9BDB78(v4, *(_QWORD *)(v3 - 272));
    sub_1BE9BDAA0();
    sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    v5 = *(_QWORD *)(v3 - 120);
    v6 = *(_QWORD *)(v3 - 96);
    v7 = *(_QWORD *)(v3 - 360);
    *(_QWORD *)v7 = *(_QWORD *)(v3 - 128);
    *(_QWORD *)(v7 + 8) = v5;
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v3 - 112);
    *(_QWORD *)(v7 + 32) = v6;
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x1BEA00674);
  }
  sub_1BE9BDAA0();
  sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8));
  JUMPOUT(0x1BEA001ECLL);
}

void sub_1BEA003E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1BEA0382C();
  sub_1BE9BE734();
  sub_1BEA03850();
  if (!v2)
  {
    sub_1BEA0077C();
    sub_1BE9BF424();
    v4 = sub_1BEA03524();
    sub_1BE9BDB78(v4, *(_QWORD *)(v3 - 256));
    sub_1BE9BDAA0();
    sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_1BEA03628(*(_QWORD *)(v3 - 128));
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x1BEA00674);
  }
  sub_1BE9BDAA0();
  sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8));
  JUMPOUT(0x1BEA001ECLL);
}

void sub_1BEA00434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1BEA03800();
  sub_1BE9BE734();
  sub_1BEA03850();
  if (v2)
    JUMPOUT(0x1BEA0045CLL);
  sub_1BEA00740();
  sub_1BE9BF424();
  v4 = sub_1BEA03524();
  sub_1BE9BDB78(v4, *(_QWORD *)(v3 - 240));
  sub_1BE9BDAA0();
  sub_1BE9BD8AC(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1BEA0385C(*(_QWORD *)(v3 - 128));
  JUMPOUT(0x1BEA00664);
}

#error "1BEA006A8: call analysis failed (funcsize=5)"

#error "1BEA006BC: call analysis failed (funcsize=5)"

uint64_t sub_1BEA006C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1BEA00740()
{
  unint64_t result;

  result = qword_1EF570D00;
  if (!qword_1EF570D00)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.RequestComplete, &type metadata for PartialTrafficLog.RequestComplete);
    atomic_store(result, (unint64_t *)&qword_1EF570D00);
  }
  return result;
}

unint64_t sub_1BEA0077C()
{
  unint64_t result;

  result = qword_1EF570D08;
  if (!qword_1EF570D08)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.ResponseObject, &type metadata for PartialTrafficLog.ResponseObject);
    atomic_store(result, (unint64_t *)&qword_1EF570D08);
  }
  return result;
}

unint64_t sub_1BEA007B8()
{
  unint64_t result;

  result = qword_1EF570D10;
  if (!qword_1EF570D10)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.ResponseConfiguration, &type metadata for PartialTrafficLog.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF570D10);
  }
  return result;
}

unint64_t sub_1BEA007F4()
{
  unint64_t result;

  result = qword_1EF570D20;
  if (!qword_1EF570D20)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.RequestBodyStreamReset, &type metadata for PartialTrafficLog.RequestBodyStreamReset);
    atomic_store(result, (unint64_t *)&qword_1EF570D20);
  }
  return result;
}

unint64_t sub_1BEA00830()
{
  unint64_t result;

  result = qword_1EF570D28;
  if (!qword_1EF570D28)
  {
    result = MEMORY[0x1C3B84508](&protocol conformance descriptor for PartialTrafficLog.RequestObject, &type metadata for PartialTrafficLog.RequestObject);
    atomic_store(result, (unint64_t *)&qword_1EF570D28);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PartialTrafficLog(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1BEA008C8 + 4 * byte_1BECB9C43[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t assignWithCopy for PartialTrafficLog(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1BE9BE8F8(result, type metadata accessor for PartialTrafficLog);
    v2 = (char *)&loc_1BEA00B94 + 4 * byte_1BECB9C58[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

_OWORD *initializeWithTake for PartialTrafficLog(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    *a1 = *a2;
    v16 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
    v17 = v16[5];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    *(_QWORD *)((char *)a1 + v16[6]) = *(_QWORD *)((char *)a2 + v16[6]);
    *(_QWORD *)((char *)a1 + v16[7]) = *(_QWORD *)((char *)a2 + v16[7]);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    *a1 = *a2;
    v7 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
    v8 = v7[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    v12 = v7[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
    *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
    *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
    *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for PartialTrafficLog(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_1BE9BE8F8((uint64_t)a1, type metadata accessor for PartialTrafficLog);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *a1 = *a2;
      v16 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
      v17 = v16[5];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_QWORD *)((char *)a1 + v16[6]) = *(_QWORD *)((char *)a2 + v16[6]);
      *(_QWORD *)((char *)a1 + v16[7]) = *(_QWORD *)((char *)a2 + v16[7]);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      v7 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      v12 = v7[6];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
      *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
      *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BEA010A8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1BEA010B8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for PartialTrafficLog.RequestMetadata(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PartialTrafficLog.ResponseMetadata(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PartialTrafficLog.RequestMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[7];
    v18 = a3[8];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(_QWORD *)((char *)v4 + v18) = *(_QWORD *)((char *)a2 + v18);
    v22 = a3[9];
    v23 = a3[10];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PartialTrafficLog.RequestMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PartialTrafficLog.RequestMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v21 = a3[9];
  v22 = a3[10];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PartialTrafficLog.RequestMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for PartialTrafficLog.RequestMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

_QWORD *assignWithTake for PartialTrafficLog.RequestMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  v20 = a3[9];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.RequestMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1BEA01710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1BEA03644();
    sub_1BE9B6960();
  }
  else
  {
    v6 = sub_1BEA03554();
    if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v6;
      v8 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_1BEA0372C();
      v8 = *(int *)(a3 + 24);
    }
    sub_1BEA03534(a1 + v8, a2, v7);
  }
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.RequestMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BEA0178C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1BEA037D4();
  if (v4)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_1BE9B6960();
  }
  else
  {
    v5 = v3;
    v6 = v2;
    v7 = sub_1BEA03554();
    if (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 84) == v6)
    {
      v8 = v7;
      v9 = *(int *)(v5 + 20);
    }
    else
    {
      v8 = sub_1BEA0372C();
      v9 = *(int *)(v5 + 24);
    }
    sub_1BEA03540(v1 + v9, v0, v0, v8);
  }
}

uint64_t sub_1BEA017FC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.RequestObject()
{
  sub_1BEA0355C();
}

void type metadata accessor for PartialTrafficLog.RequestBodyStreamReset()
{
  sub_1BEA0355C();
}

uint64_t *initializeBufferWithCopyOfBuffer for PartialTrafficLog.ResponseMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PartialTrafficLog.ResponseMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PartialTrafficLog.ResponseMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PartialTrafficLog.ResponseMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PartialTrafficLog.ResponseMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for PartialTrafficLog.ResponseMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1BEA01C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1BEA03644();
    sub_1BE9B6960();
  }
  else
  {
    v6 = sub_1BEA03554();
    sub_1BEA03534(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BEA01CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_1BEA037D4();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_1BE9B6960();
  }
  else
  {
    v4 = v2;
    v5 = sub_1BEA03554();
    sub_1BEA03540(v1 + *(int *)(v4 + 20), v0, v0, v5);
  }
}

uint64_t sub_1BEA01D0C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for PartialTrafficLog.ResponseConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PartialTrafficLog.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PartialTrafficLog.ResponseConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PartialTrafficLog.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PartialTrafficLog.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.ResponseConfiguration()
{
  sub_1BEA0355C();
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_1BE9BE5BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRetain();
  sub_1BE9BE3E4(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  sub_1BE9B6960();
}

void _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwca_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_1BE9B6958();
  v5 = a2[2];
  v4 = a2[3];
  sub_1BE9BE3E4(v5, v4);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v5;
  a1[3] = v4;
  sub_1BE9BE5BC(v6, v7);
  sub_1BE9B6960();
}

void _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1BE9BE5BC(v5, v6);
  sub_1BE9B69D4();
}

uint64_t sub_1BEA02074(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_1BEA03770(result, a2);
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      return sub_1BEA03770(result, a2);
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.ResponseObject()
{
  sub_1BEA0355C();
}

_QWORD *initializeBufferWithCopyOfBuffer for PartialTrafficLog.RequestComplete(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PartialTrafficLog.RequestComplete()
{
  return swift_bridgeObjectRelease();
}

void _s14CloudKitDaemon17PartialTrafficLogO22RequestBodyStreamResetVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_1BE9BDA80();
  sub_1BE9B69D4();
}

_QWORD *assignWithTake for PartialTrafficLog.RequestComplete(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO22RequestBodyStreamResetVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1BEA02194(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_1BEA03770(result, a2);
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      return sub_1BEA03770(result, a2);
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.RequestComplete()
{
  sub_1BEA0355C();
}

_BYTE *initializeBufferWithCopyOfBuffer for PartialTrafficLog.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1BEA021EC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1BEA021F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.CodingKeys()
{
  return &type metadata for PartialTrafficLog.CodingKeys;
}

uint64_t sub_1BEA02218()
{
  return 0;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestMetadataCodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestMetadataCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestObjectCodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestObjectCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestBodyStreamResetCodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseMetadataCodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseMetadataCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseConfigurationCodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseObjectCodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseObjectCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.CompleteCodingKeys()
{
  return &type metadata for PartialTrafficLog.CompleteCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestComplete.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestComplete.CodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseObject.CodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseObject.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BEA0238C + 4 * byte_1BECB9C64[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BEA023C0 + 4 * byte_1BECB9C5F[v4]))();
}

uint64_t sub_1BEA023C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA023C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BEA023D0);
  return result;
}

uint64_t sub_1BEA023DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BEA023E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BEA023E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA023F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseConfiguration.CodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BEA024E0 + 4 * byte_1BECB9C6E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BEA02514 + 4 * byte_1BECB9C69[v4]))();
}

uint64_t sub_1BEA02514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA0251C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BEA02524);
  return result;
}

uint64_t sub_1BEA02530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BEA02538);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BEA0253C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA02544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseMetadata.CodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseMetadata.CodingKeys;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO25RequestMetadataCodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO25RequestMetadataCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BEA025F0 + 4 * byte_1BECB9C73[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BEA02610 + 4 * byte_1BECB9C78[v4]))();
}

_BYTE *sub_1BEA025F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BEA02610(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BEA02618(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BEA02620(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BEA02628(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BEA02630(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestBodyStreamReset.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestBodyStreamReset.CodingKeys;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO14ResponseObjectV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO14ResponseObjectV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BEA02720 + 4 * byte_1BECB9C82[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BEA02754 + 4 * byte_1BECB9C7D[v4]))();
}

uint64_t sub_1BEA02754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA0275C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BEA02764);
  return result;
}

uint64_t sub_1BEA02770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BEA02778);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BEA0277C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA02784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1BEA02790(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestObject.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestObject.CodingKeys;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BEA02880 + 4 * byte_1BECB9C8C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BEA028B4 + 4 * byte_1BECB9C87[v4]))();
}

uint64_t sub_1BEA028B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA028BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BEA028C4);
  return result;
}

uint64_t sub_1BEA028D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BEA028D8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BEA028DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BEA028E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestMetadata.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestMetadata.CodingKeys;
}

unint64_t sub_1BEA02904()
{
  unint64_t result;

  result = qword_1EF570D38;
  if (!qword_1EF570D38)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA384, &type metadata for PartialTrafficLog.RequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D38);
  }
  return result;
}

unint64_t sub_1BEA02944()
{
  unint64_t result;

  result = qword_1EF570D40;
  if (!qword_1EF570D40)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA43C, &type metadata for PartialTrafficLog.RequestObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D40);
  }
  return result;
}

unint64_t sub_1BEA02984()
{
  unint64_t result;

  result = qword_1EF570D48;
  if (!qword_1EF570D48)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA4F4, &type metadata for PartialTrafficLog.RequestBodyStreamReset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D48);
  }
  return result;
}

unint64_t sub_1BEA029C4()
{
  unint64_t result;

  result = qword_1EF570D50;
  if (!qword_1EF570D50)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA5AC, &type metadata for PartialTrafficLog.ResponseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D50);
  }
  return result;
}

unint64_t sub_1BEA02A04()
{
  unint64_t result;

  result = qword_1EF570D58;
  if (!qword_1EF570D58)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA664, &type metadata for PartialTrafficLog.ResponseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D58);
  }
  return result;
}

unint64_t sub_1BEA02A44()
{
  unint64_t result;

  result = qword_1EF570D60;
  if (!qword_1EF570D60)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA71C, &type metadata for PartialTrafficLog.ResponseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D60);
  }
  return result;
}

unint64_t sub_1BEA02A84()
{
  unint64_t result;

  result = qword_1EF570D68;
  if (!qword_1EF570D68)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA7D4, &type metadata for PartialTrafficLog.RequestComplete.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D68);
  }
  return result;
}

unint64_t sub_1BEA02AC4()
{
  unint64_t result;

  result = qword_1EF570D70;
  if (!qword_1EF570D70)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA88C, &type metadata for PartialTrafficLog.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D70);
  }
  return result;
}

unint64_t sub_1BEA02B04()
{
  unint64_t result;

  result = qword_1EF570D78;
  if (!qword_1EF570D78)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA944, &type metadata for PartialTrafficLog.ResponseObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D78);
  }
  return result;
}

unint64_t sub_1BEA02B44()
{
  unint64_t result;

  result = qword_1EF570D80;
  if (!qword_1EF570D80)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA9FC, &type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D80);
  }
  return result;
}

unint64_t sub_1BEA02B84()
{
  unint64_t result;

  result = qword_1EF570D88;
  if (!qword_1EF570D88)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAAB4, &type metadata for PartialTrafficLog.ResponseMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D88);
  }
  return result;
}

unint64_t sub_1BEA02BC4()
{
  unint64_t result;

  result = qword_1EF570D90;
  if (!qword_1EF570D90)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAB6C, &type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D90);
  }
  return result;
}

unint64_t sub_1BEA02C04()
{
  unint64_t result;

  result = qword_1EF570D98;
  if (!qword_1EF570D98)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAC24, &type metadata for PartialTrafficLog.RequestObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570D98);
  }
  return result;
}

unint64_t sub_1BEA02C44()
{
  unint64_t result;

  result = qword_1EF570DA0;
  if (!qword_1EF570DA0)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBACDC, &type metadata for PartialTrafficLog.RequestMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570DA0);
  }
  return result;
}

unint64_t sub_1BEA02C84()
{
  unint64_t result;

  result = qword_1EF570DA8;
  if (!qword_1EF570DA8)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAD94, &type metadata for PartialTrafficLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF570DA8);
  }
  return result;
}

unint64_t sub_1BEA02CC4()
{
  unint64_t result;

  result = qword_1ED700678;
  if (!qword_1ED700678)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAC4C, &type metadata for PartialTrafficLog.RequestMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700678);
  }
  return result;
}

unint64_t sub_1BEA02D04()
{
  unint64_t result;

  result = qword_1ED700670;
  if (!qword_1ED700670)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAC74, &type metadata for PartialTrafficLog.RequestMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700670);
  }
  return result;
}

unint64_t sub_1BEA02D44()
{
  unint64_t result;

  result = qword_1ED700650;
  if (!qword_1ED700650)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAB94, &type metadata for PartialTrafficLog.RequestObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700650);
  }
  return result;
}

unint64_t sub_1BEA02D84()
{
  unint64_t result;

  result = qword_1ED700648;
  if (!qword_1ED700648)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBABBC, &type metadata for PartialTrafficLog.RequestObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700648);
  }
  return result;
}

unint64_t sub_1BEA02DC4()
{
  unint64_t result;

  result = qword_1ED7006A8;
  if (!qword_1ED7006A8)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAADC, &type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7006A8);
  }
  return result;
}

unint64_t sub_1BEA02E04()
{
  unint64_t result;

  result = qword_1ED7006A0;
  if (!qword_1ED7006A0)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAB04, &type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7006A0);
  }
  return result;
}

unint64_t sub_1BEA02E44()
{
  unint64_t result;

  result = qword_1ED700688;
  if (!qword_1ED700688)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAA24, &type metadata for PartialTrafficLog.ResponseMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700688);
  }
  return result;
}

unint64_t sub_1BEA02E84()
{
  unint64_t result;

  result = qword_1ED700680;
  if (!qword_1ED700680)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAA4C, &type metadata for PartialTrafficLog.ResponseMetadataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700680);
  }
  return result;
}

unint64_t sub_1BEA02EC4()
{
  unint64_t result;

  result = qword_1ED700698;
  if (!qword_1ED700698)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA96C, &type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700698);
  }
  return result;
}

unint64_t sub_1BEA02F04()
{
  unint64_t result;

  result = qword_1ED700690;
  if (!qword_1ED700690)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA994, &type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700690);
  }
  return result;
}

unint64_t sub_1BEA02F44()
{
  unint64_t result;

  result = qword_1ED700668;
  if (!qword_1ED700668)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA8B4, &type metadata for PartialTrafficLog.ResponseObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700668);
  }
  return result;
}

unint64_t sub_1BEA02F84()
{
  unint64_t result;

  result = qword_1ED700660;
  if (!qword_1ED700660)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA8DC, &type metadata for PartialTrafficLog.ResponseObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700660);
  }
  return result;
}

unint64_t sub_1BEA02FC4()
{
  unint64_t result;

  result = qword_1ED700600;
  if (!qword_1ED700600)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA7FC, &type metadata for PartialTrafficLog.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700600);
  }
  return result;
}

unint64_t sub_1BEA03004()
{
  unint64_t result;

  result = qword_1ED7005F8;
  if (!qword_1ED7005F8)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA824, &type metadata for PartialTrafficLog.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED7005F8);
  }
  return result;
}

unint64_t sub_1BEA03044()
{
  unint64_t result;

  result = qword_1ED700300;
  if (!qword_1ED700300)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAD04, &type metadata for PartialTrafficLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700300);
  }
  return result;
}

unint64_t sub_1BEA03084()
{
  unint64_t result;

  result = qword_1ED700440;
  if (!qword_1ED700440)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBAD2C, &type metadata for PartialTrafficLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700440);
  }
  return result;
}

unint64_t sub_1BEA030C4()
{
  unint64_t result;

  result = qword_1ED700480;
  if (!qword_1ED700480)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA744, &type metadata for PartialTrafficLog.RequestComplete.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700480);
  }
  return result;
}

unint64_t sub_1BEA03104()
{
  unint64_t result;

  result = qword_1ED700478;
  if (!qword_1ED700478)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA76C, &type metadata for PartialTrafficLog.RequestComplete.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700478);
  }
  return result;
}

unint64_t sub_1BEA03144()
{
  unint64_t result;

  result = qword_1ED700318;
  if (!qword_1ED700318)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA68C, &type metadata for PartialTrafficLog.ResponseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700318);
  }
  return result;
}

unint64_t sub_1BEA03184()
{
  unint64_t result;

  result = qword_1ED700460;
  if (!qword_1ED700460)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA6B4, &type metadata for PartialTrafficLog.ResponseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700460);
  }
  return result;
}

unint64_t sub_1BEA031C4()
{
  unint64_t result;

  result = qword_1ED700618;
  if (!qword_1ED700618)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA5D4, &type metadata for PartialTrafficLog.ResponseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700618);
  }
  return result;
}

unint64_t sub_1BEA03204()
{
  unint64_t result;

  result = qword_1ED700610;
  if (!qword_1ED700610)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA5FC, &type metadata for PartialTrafficLog.ResponseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700610);
  }
  return result;
}

unint64_t sub_1BEA03244()
{
  unint64_t result;

  result = qword_1ED700550;
  if (!qword_1ED700550)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA51C, &type metadata for PartialTrafficLog.ResponseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700550);
  }
  return result;
}

unint64_t sub_1BEA03284()
{
  unint64_t result;

  result = qword_1ED700548;
  if (!qword_1ED700548)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA544, &type metadata for PartialTrafficLog.ResponseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700548);
  }
  return result;
}

unint64_t sub_1BEA032C4()
{
  unint64_t result;

  result = qword_1ED700638;
  if (!qword_1ED700638)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA464, &type metadata for PartialTrafficLog.RequestBodyStreamReset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700638);
  }
  return result;
}

unint64_t sub_1BEA03304()
{
  unint64_t result;

  result = qword_1ED700630;
  if (!qword_1ED700630)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA48C, &type metadata for PartialTrafficLog.RequestBodyStreamReset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700630);
  }
  return result;
}

unint64_t sub_1BEA03344()
{
  unint64_t result;

  result = qword_1ED700308;
  if (!qword_1ED700308)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA3AC, &type metadata for PartialTrafficLog.RequestObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700308);
  }
  return result;
}

unint64_t sub_1BEA03384()
{
  unint64_t result;

  result = qword_1ED700450;
  if (!qword_1ED700450)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA3D4, &type metadata for PartialTrafficLog.RequestObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700450);
  }
  return result;
}

unint64_t sub_1BEA033C4()
{
  unint64_t result;

  result = qword_1ED700498;
  if (!qword_1ED700498)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA2F4, &type metadata for PartialTrafficLog.RequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700498);
  }
  return result;
}

unint64_t sub_1BEA03404()
{
  unint64_t result;

  result = qword_1ED700490;
  if (!qword_1ED700490)
  {
    result = MEMORY[0x1C3B84508](&unk_1BECBA31C, &type metadata for PartialTrafficLog.RequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED700490);
  }
  return result;
}

uint64_t sub_1BEA034A8()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_1BEA034B8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1BEA034C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1BEA034F0()
{
  return type metadata accessor for PartialTrafficLog.RequestMetadata(0);
}

uint64_t sub_1BEA034F8()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1BEA03500()
{
  return type metadata accessor for PartialTrafficLog.RequestMetadata(0);
}

uint64_t sub_1BEA0351C()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1BEA03524()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BEA03534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, a2, a3);
}

uint64_t sub_1BEA03540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a1, a2, a3, a4);
}

uint64_t sub_1BEA0354C(uint64_t a1)
{
  unint64_t v1;

  return sub_1BE9BE5BC(a1, v1);
}

uint64_t sub_1BEA03554()
{
  return type metadata accessor for Date();
}

uint64_t sub_1BEA03564@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1BEA03570@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1BEA03578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1BEA0358C()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_1BEA035A0()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1BEA035AC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1BEA035B8()
{
  uint64_t v0;

  return sub_1BE9E13DC(v0);
}

void sub_1BEA035C0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1BEA035DC(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1BEA035F8(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1BEA03614()
{
  return static Date.== infix(_:_:)();
}

uint64_t sub_1BEA03628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 256);
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = v1;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 - 112);
  return v4;
}

uint64_t sub_1BEA03644()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1BEA0367C()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_1BEA0368C(uint64_t a1, uint64_t *a2)
{
  return sub_1BE9BEF38(a2);
}

uint64_t sub_1BEA03694@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t sub_1BEA036A0()
{
  return Data.count.getter();
}

uint64_t sub_1BEA036B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_1BEA036C0()
{
  return String.count.getter();
}

void sub_1BEA036D0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1BE9BE8F8(a1, v1);
}

_QWORD *sub_1BEA036D8()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1BE9F4DA8(v0, v1);
}

uint64_t sub_1BEA03724()
{
  return type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
}

uint64_t sub_1BEA0372C()
{
  return type metadata accessor for URL();
}

uint64_t sub_1BEA03734()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

unint64_t sub_1BEA03740()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 2;
  return sub_1BE9FFBC0();
}

void sub_1BEA0374C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 2;
}

unint64_t sub_1BEA03758()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 1;
  return sub_1BE9FFC38();
}

void sub_1BEA03764()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
}

uint64_t sub_1BEA03770(uint64_t result, int a2)
{
  *(_QWORD *)(result + 8) = (a2 - 1);
  return result;
}

void sub_1BEA03788(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1BE9BE8F8(v2, a2);
}

uint64_t sub_1BEA03790()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BEA0379C()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1BEA037A8()
{
  uint64_t v0;

  return sub_1BE9E13DC(*(_QWORD *)(v0 - 96));
}

void sub_1BEA037B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void sub_1BEA037BC()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_1BEA037C8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1BE9BE5BC(v0, v1);
}

void sub_1BEA037E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1BE9FE47C(a1, *(_QWORD *)(v3 - 72), a3);
}

uint64_t sub_1BEA037F4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1BE9BE5BC(v0, v1);
}

unint64_t sub_1BEA03800()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 6;
  return sub_1BE9FFA1C();
}

uint64_t sub_1BEA03820()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

unint64_t sub_1BEA0382C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 5;
  return sub_1BE9FFA94();
}

uint64_t sub_1BEA03838()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

unint64_t sub_1BEA03844()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 4;
  return sub_1BE9FFB0C();
}

_QWORD *sub_1BEA0385C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3 = *(_QWORD **)(v2 - 256);
  *v3 = a1;
  v3[1] = v1;
  return v3;
}

unint64_t sub_1BEA03870()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 128) = 3;
  return sub_1BE9FFB84();
}

id TrafficMetadata.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void sub_1BEA038C0(uint64_t a1@<X8>)
{
  sub_1BEA03A20(&OBJC_IVAR___CKDTrafficMetadata_timestamp, (uint64_t *)&unk_1EF570DB0, a1);
}

void sub_1BEA038F8(uint64_t a1)
{
  sub_1BEA03B70(a1, &OBJC_IVAR___CKDTrafficMetadata_timestamp, (uint64_t *)&unk_1EF570DB0);
}

void sub_1BEA0390C()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

id sub_1BEA0396C(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  sub_1BE9BE754(a1, a2, a3);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v9);
  sub_1BE9BDB14();
  a4();
  v10 = sub_1BEA0588C();
  v11 = 0;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v6, 1, v10) != 1)
  {
    v11 = (void *)a6();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
  }
  return v11;
}

void sub_1BEA03A0C(uint64_t a1@<X8>)
{
  sub_1BEA03A20(&OBJC_IVAR___CKDTrafficMetadata_url, &qword_1EF5709C8, a1);
}

void sub_1BEA03A20(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  sub_1BE9BD864();
  sub_1BEA03A6C(v6, a3, a2);
  sub_1BE9BE6B0();
}

void sub_1BEA03A6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1BE9BE754(a1, a2, a3);
  sub_1BE9BF4FC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_1BE9B69D4();
}

void sub_1BEA03AC0(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t), uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  sub_1BE9BEF38(a4);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v12);
  sub_1BE9BDB14();
  if (a3)
  {
    a5(a3);
    v13 = sub_1BEA0588C();
    v14 = 0;
  }
  else
  {
    v13 = sub_1BEA0588C();
    v14 = 1;
  }
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v7, v14, 1, v13);
  v15 = a1;
  a7(v7);

  sub_1BE9C6C6C();
}

void sub_1BEA03B5C(uint64_t a1)
{
  sub_1BEA03B70(a1, &OBJC_IVAR___CKDTrafficMetadata_url, &qword_1EF5709C8);
}

void sub_1BEA03B70(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  sub_1BE9BD864();
  sub_1BEA03BC4(a1, v6, a3);
  swift_endAccess();
  sub_1BE9BE6B0();
}

void sub_1BEA03BC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1BE9BE754(a1, a2, a3);
  sub_1BE9BF4FC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_1BE9B69D4();
}

void sub_1BEA03BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1BE9BEF38(a5);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v9);
  sub_1BE9BDA90();
  v12 = v11 - v10;
  sub_1BEA03A6C(a1, v11 - v10, a5);
  a6(v12);
  sub_1BE9C6C6C();
}

void sub_1BEA03C64()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

uint64_t sub_1BEA03CAC()
{
  return sub_1BEA04004(&OBJC_IVAR___CKDTrafficMetadata_method);
}

void sub_1BEA03CC4(uint64_t a1, uint64_t a2)
{
  sub_1BEA040D8(a1, a2, &OBJC_IVAR___CKDTrafficMetadata_method);
}

void sub_1BEA03CD0()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

void sub_1BEA03D2C()
{
  sub_1BE9BD864();
  sub_1BE9BE168();
}

void sub_1BEA03D88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CKDTrafficMetadata_status);
  sub_1BE9BD864();
  *v3 = a1;
  sub_1BE9BE168();
}

void sub_1BEA03DC4()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

void sub_1BEA03E58()
{
  sub_1BE9BD864();
  swift_bridgeObjectRetain();
  sub_1BE9BE168();
}

void sub_1BEA03F00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CKDTrafficMetadata_headers);
  sub_1BE9BD864();
  *v3 = a1;
  swift_bridgeObjectRelease();
  sub_1BE9BE168();
}

void sub_1BEA03F44()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  sub_1BEA03F00(v0);
}

void sub_1BEA03F6C()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

id sub_1BEA03FB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3();
  if (v4)
  {
    v5 = (void *)MEMORY[0x1C3B822A0](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

uint64_t sub_1BEA03FF8()
{
  return sub_1BEA04004(&OBJC_IVAR___CKDTrafficMetadata_requestClassName);
}

uint64_t sub_1BEA04004(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  sub_1BE9BD864();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

void sub_1BEA0405C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = a1;
  a4(v6, v8);

}

void sub_1BEA040CC(uint64_t a1, uint64_t a2)
{
  sub_1BEA040D8(a1, a2, &OBJC_IVAR___CKDTrafficMetadata_requestClassName);
}

void sub_1BEA040D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  sub_1BE9BD864();
  *v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRelease();
  sub_1BE9BE6B0();
}

uint64_t sub_1BEA04120(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

void sub_1BEA04160()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

uint64_t sub_1BEA041C0()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage);
  sub_1BE9BD864();
  return *v1;
}

void sub_1BEA04224(char a1)
{
  uint64_t v1;
  _BYTE *v3;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage);
  sub_1BE9BD864();
  *v3 = a1;
  sub_1BE9BE168();
}

void sub_1BEA04260()
{
  sub_1BE9BD864();
  sub_1BE9B69D4();
}

id TrafficMetadata.init()()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  objc_super v6;

  v1 = sub_1BEA03554();
  sub_1BE9BF438(v1);
  v2 = sub_1BEA0372C();
  sub_1BE9BF438(v2);
  v3 = &v0[OBJC_IVAR___CKDTrafficMetadata_method];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CKDTrafficMetadata_status] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CKDTrafficMetadata_headers] = 0;
  v4 = &v0[OBJC_IVAR___CKDTrafficMetadata_requestClassName];
  *v4 = 0;
  v4[1] = 0;
  v0[OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage] = 0;
  v6.receiver = v0;
  v6.super_class = (Class)sub_1BEA054DC();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for TrafficMetadata()
{
  uint64_t result;

  result = qword_1EF570DE0;
  if (!qword_1EF570DE0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BEA04398()
{
  qword_1EF577A58 = 116;
  unk_1EF577A60 = 0xE100000000000000;
}

void sub_1BEA043B0()
{
  qword_1EF577A68 = 117;
  unk_1EF577A70 = 0xE100000000000000;
}

void sub_1BEA043C8()
{
  qword_1EF577A78 = 109;
  unk_1EF577A80 = 0xE100000000000000;
}

void sub_1BEA043E0()
{
  qword_1EF577A88 = 115;
  unk_1EF577A90 = 0xE100000000000000;
}

void sub_1BEA043F8()
{
  qword_1EF577A98 = 104;
  unk_1EF577AA0 = 0xE100000000000000;
}

void sub_1BEA04410()
{
  qword_1EF577AA8 = 114;
  unk_1EF577AB0 = 0xE100000000000000;
}

void sub_1BEA04428()
{
  qword_1EF577AB8 = 112;
  unk_1EF577AC0 = 0xE100000000000000;
}

uint64_t static TrafficMetadata.supportsSecureCoding.getter()
{
  return 1;
}

void sub_1BEA04450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  sub_1BE9BEF38(&qword_1EF5709C8);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v2);
  sub_1BE9BDA90();
  sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v3);
  sub_1BE9BDA90();
  v6 = v5 - v4;
  v7 = v1 + OBJC_IVAR___CKDTrafficMetadata_timestamp;
  sub_1BE9BD864();
  sub_1BEA03A6C(v7, v6, (uint64_t *)&unk_1EF570DB0);
  v8 = sub_1BEA03554();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v6, 1, v8) != 1)
  {
    Date._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  if (qword_1EF5700B8 != -1)
    swift_once();
  sub_1BE9BD8B4();
}

void sub_1BEA048EC()
{
  void *v0;
  void *v1;

}

void TrafficMetadata.__allocating_init(coder:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  TrafficMetadata.init(coder:)(a1);
}

void sub_1BEA0492C()
{
  sub_1BE9B69D4();
}

void TrafficMetadata.init(coder:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1BE9BEF38(&qword_1EF5709C8);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v4);
  sub_1BE9BDA90();
  v7 = v6 - v5;
  sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v8);
  sub_1BE9BDB14();
  v9 = (uint64_t)&v1[OBJC_IVAR___CKDTrafficMetadata_timestamp];
  sub_1BEA03554();
  sub_1BEA05894(v9, 1);
  v10 = (uint64_t)&v1[OBJC_IVAR___CKDTrafficMetadata_url];
  v24 = sub_1BEA0372C();
  v11 = _s14CloudKitDaemon17PartialTrafficLogOwst_0(v10, 1, 1, v24);
  v12 = &v1[OBJC_IVAR___CKDTrafficMetadata_method];
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___CKDTrafficMetadata_status] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___CKDTrafficMetadata_headers] = 0;
  v13 = &v1[OBJC_IVAR___CKDTrafficMetadata_requestClassName];
  *v13 = 0;
  v13[1] = 0;
  v1[OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage] = 0;
  sub_1BE9BEFB8(v11, &qword_1EF570DC0);
  v14 = qword_1EF5700B8;
  v1;
  if (v14 != -1)
    swift_once();
  v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v15)
  {
    v16 = (void *)v15;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  sub_1BEA05894(v2, v17);
  sub_1BE9BD864();
  sub_1BEA03BC4(v2, v9, (uint64_t *)&unk_1EF570DB0);
  v18 = swift_endAccess();
  sub_1BE9BEFB8(v18, &qword_1EF570DC8);
  v20 = v19;
  if (qword_1EF5700C0 != -1)
    swift_once();
  v21 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v21)
  {
    v20 = (void *)v21;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v7, v22, 1, v24);
  sub_1BE9BD864();
  sub_1BEA03BC4(v7, v10, &qword_1EF5709C8);
  v23 = swift_endAccess();
  sub_1BE9BEFB8(v23, (unint64_t *)&unk_1EF570DD0);
  if (qword_1EF5700C8 != -1)
    swift_once();
  if (sub_1BEA0587C())
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1BE9BE8EC();
  }
  else
  {
    v20 = 0;
    a1 = 0;
  }
  sub_1BE9BD864();
  *v12 = v20;
  v12[1] = a1;
  swift_bridgeObjectRelease();
  if (qword_1EF5700D0 != -1)
    swift_once();
  sub_1BE9BD8B4();
}

void sub_1BEA04E64(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  sub_1BE9B69D4();
}

uint64_t sub_1BEA04E98(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t result;
  int64_t v20;
  _QWORD *v21;
  void *v22;

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
LABEL_8:
    v3 = MEMORY[0x1E0DEE9E0];
    if (v2)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!MEMORY[0x1C3B8269C](a1))
    goto LABEL_8;
LABEL_5:
  sub_1BE9BEF38(&qword_1ED7003B0);
  v3 = static _DictionaryStorage.allocate(capacity:)();
  if (v2)
  {
LABEL_6:
    v4 = __CocoaDictionary.makeIterator()();
    v21 = 0;
    v5 = 0;
    v6 = 0;
    v7 = v4 | 0x8000000000000000;
    goto LABEL_13;
  }
LABEL_9:
  v8 = -1 << *(_BYTE *)(v1 + 32);
  v5 = ~v8;
  v21 = (_QWORD *)(v1 + 64);
  v9 = -v8;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v6 = v10 & *(_QWORD *)(v1 + 64);
  v7 = v1;
LABEL_13:
  v20 = (unint64_t)(v5 + 64) >> 6;
  swift_bridgeObjectRetain();
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (__CocoaDictionary.Iterator.next()())
    {
      sub_1BEA04E64(0, (unint64_t *)&unk_1EF570DD0);
      swift_dynamicCast();
      swift_dynamicCast();
      v12 = v22;
LABEL_34:
      v12;
      result = static String._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
      return result;
    }
  }
  else
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
LABEL_33:
      v12 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v11);
      v16 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v11);
      v17 = v12;
      v18 = v16;
      goto LABEL_34;
    }
    if (v20 > 1)
    {
      v13 = v21[1];
      v14 = 1;
      if (v13)
        goto LABEL_32;
      v14 = 2;
      if (v20 > 2)
      {
        v13 = v21[2];
        if (v13)
          goto LABEL_32;
        v14 = 3;
        if (v20 > 3)
        {
          v13 = v21[3];
          if (v13)
            goto LABEL_32;
          v14 = 4;
          if (v20 > 4)
          {
            v13 = v21[4];
            if (v13)
              goto LABEL_32;
            v14 = 5;
            if (v20 > 5)
            {
              v13 = v21[5];
              if (!v13)
              {
                v15 = 6;
                while (v15 < v20)
                {
                  v13 = v21[v15++];
                  if (v13)
                  {
                    v14 = v15 - 1;
                    goto LABEL_32;
                  }
                }
                goto LABEL_35;
              }
LABEL_32:
              v11 = __clz(__rbit64(v13)) + (v14 << 6);
              goto LABEL_33;
            }
          }
        }
      }
    }
  }
LABEL_35:
  sub_1BE9E13C4();
  return v3;
}

id TrafficMetadata.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1BEA054DC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BEA052BC(uint64_t a1@<X8>)
{
  sub_1BEA038C0(a1);
  sub_1BE9B69D4();
}

void sub_1BEA052D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BEA03BF4(a1, a2, a3, a4, (uint64_t *)&unk_1EF570DB0, sub_1BEA038F8);
}

void sub_1BEA052FC(uint64_t a1@<X8>)
{
  sub_1BEA03A0C(a1);
  sub_1BE9B69D4();
}

void sub_1BEA05318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BEA03BF4(a1, a2, a3, a4, &qword_1EF5709C8, sub_1BEA03B5C);
}

void sub_1BEA0533C()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1BE9C6DDC();
  *v0 = sub_1BEA03CAC();
  v0[1] = v1;
  sub_1BE9B69D4();
}

uint64_t sub_1BEA0535C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BEA04120(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BEA03CC4);
}

void sub_1BEA05378()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1BE9C6DDC();
  sub_1BEA03D2C();
  *v0 = v1;
  sub_1BE9B69D4();
}

void sub_1BEA05398(uint64_t *a1)
{
  sub_1BEA03D88(*a1);
  sub_1BE9B69D4();
}

void sub_1BEA053B8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1BE9C6DDC();
  sub_1BEA03E58();
  *v0 = v1;
  sub_1BE9B69D4();
}

void sub_1BEA053DC()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1BE9C6DDC();
  *v0 = sub_1BEA03FF8();
  v0[1] = v1;
  sub_1BE9B69D4();
}

uint64_t sub_1BEA053FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BEA04120(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BEA040CC);
}

void sub_1BEA05418()
{
  _BYTE *v0;

  sub_1BE9C6DDC();
  *v0 = sub_1BEA041C0() & 1;
  sub_1BE9B69D4();
}

void sub_1BEA0543C(char *a1)
{
  sub_1BEA04224(*a1);
  sub_1BE9B69D4();
}

uint64_t sub_1BEA054DC()
{
  return type metadata accessor for TrafficMetadata();
}

void sub_1BEA054E4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BEA05830(319, (unint64_t *)&qword_1EF570DF0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v0 <= 0x3F)
  {
    sub_1BEA05830(319, &qword_1EF570DF8, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TrafficMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrafficMetadata.timestamp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of TrafficMetadata.timestamp.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of TrafficMetadata.timestamp.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of TrafficMetadata.url.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of TrafficMetadata.url.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of TrafficMetadata.url.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of TrafficMetadata.method.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of TrafficMetadata.method.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of TrafficMetadata.method.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of TrafficMetadata.status.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of TrafficMetadata.status.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of TrafficMetadata.status.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of TrafficMetadata.headers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of TrafficMetadata.headers.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of TrafficMetadata.headers.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of TrafficMetadata.requestClassName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of TrafficMetadata.requestClassName.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of TrafficMetadata.requestClassName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of TrafficMetadata.parsingStandaloneMessage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of TrafficMetadata.parsingStandaloneMessage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of TrafficMetadata.parsingStandaloneMessage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of TrafficMetadata.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of TrafficMetadata.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

void sub_1BEA05830(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
  sub_1BE9B69D4();
}

uint64_t sub_1BEA0587C()
{
  return NSCoder.decodeObject<A>(of:forKey:)();
}

uint64_t sub_1BEA0588C()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_1BEA05894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a1, a2, 1, v2);
}

id TrafficLogMessage.__allocating_init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return TrafficLogMessage.init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(a1, a2, a3, a4, a5, a6, a7);
}

void TrafficLogMessage.uuid.getter()
{
  sub_1BE9BD878();
  sub_1BE9B69D4();
}

void TrafficLogMessage.requestTime.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1BEA03A6C(v1 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, a1, (uint64_t *)&unk_1EF570DB0);
}

void TrafficLogMessage.requestMethod.getter()
{
  sub_1BE9BD878();
  sub_1BE9B69D4();
}

void TrafficLogMessage.requestURL.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1BEA03A6C(v1 + OBJC_IVAR___CKLTrafficLogMessage_requestURL, a1, &qword_1EF5709C8);
}

uint64_t TrafficLogMessage.requestHeaders.getter()
{
  return sub_1BE9BE354();
}

uint64_t TrafficLogMessage.bodyStreamResetCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_bodyStreamResetCount);
}

uint64_t TrafficLogMessage.requestObjects.getter()
{
  return sub_1BE9BE354();
}

uint64_t TrafficLogMessage.responseStatus.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_responseStatus);
}

id sub_1BEA05B38(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(_QWORD), uint64_t (*a6)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  sub_1BE9BE754(a1, a2, a3);
  sub_1BE9B69DC();
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(v10);
  v13 = a5(0);
  v14 = 0;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v12, 1, v13) != 1)
  {
    v14 = (void *)a6();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  return v14;
}

void TrafficLogMessage.responseTime.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1BEA03A6C(v1 + OBJC_IVAR___CKLTrafficLogMessage_responseTime, a1, (uint64_t *)&unk_1EF570DB0);
}

id sub_1BEA05C24(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3())
  {
    Dictionary._bridgeToObjectiveC()();
    sub_1BE9BD8BC();
  }
  else
  {
    a1 = 0;
  }
  return sub_1BE9BDB2C(a1);
}

uint64_t TrafficLogMessage.responseHeaders.getter()
{
  return sub_1BE9BE354();
}

id sub_1BEA05C88(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3())
  {
    sub_1BE9BEF38(&qword_1EF5709D8);
    Array._bridgeToObjectiveC()();
    sub_1BE9BD8BC();
  }
  else
  {
    a1 = 0;
  }
  return sub_1BE9BDB2C(a1);
}

uint64_t TrafficLogMessage.responseObjects.getter()
{
  return sub_1BE9BE354();
}

id TrafficLogMessage.init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  char *v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  objc_class *v43;
  id v44;
  uint64_t v46;
  uint64_t v47;
  objc_super v48;

  v47 = a7;
  sub_1BE9BEF38(&qword_1EF5709C8);
  sub_1BE9B69DC();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE9BEF38((uint64_t *)&unk_1EF570DB0);
  sub_1BE9B69DC();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v46 - v21;
  v23 = &v7[OBJC_IVAR___CKLTrafficLogMessage_uuid];
  *(_QWORD *)v23 = a1;
  *((_QWORD *)v23 + 1) = a2;
  if (a3)
  {
    v24 = (uint64_t)&a3[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    sub_1BE9BF4B0();
    sub_1BEA03A6C(v24, (uint64_t)v22, (uint64_t *)&unk_1EF570DB0);
  }
  else
  {
    v25 = type metadata accessor for Date();
    sub_1BE9BDE84((uint64_t)v22, v26, v27, v25);
  }
  sub_1BEA06024((uint64_t)v22, (uint64_t)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestTime], (uint64_t *)&unk_1EF570DB0);
  if (a3)
  {
    v28 = &a3[OBJC_IVAR___CKDTrafficMetadata_method];
    sub_1BE9BF4B0();
    v29 = *((_QWORD *)v28 + 1);
    v30 = &v7[OBJC_IVAR___CKLTrafficLogMessage_requestMethod];
    *(_QWORD *)v30 = *(_QWORD *)v28;
    *((_QWORD *)v30 + 1) = v29;
    v31 = (uint64_t)&a3[OBJC_IVAR___CKDTrafficMetadata_url];
    swift_bridgeObjectRetain();
    sub_1BE9BF4B0();
    sub_1BEA03A6C(v31, (uint64_t)v16, &qword_1EF5709C8);
  }
  else
  {
    v32 = &v7[OBJC_IVAR___CKLTrafficLogMessage_requestMethod];
    v33 = type metadata accessor for URL();
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    sub_1BE9BDE84((uint64_t)v16, v34, v35, v33);
  }
  sub_1BEA06024((uint64_t)v16, (uint64_t)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestURL], &qword_1EF5709C8);
  if (a3)
  {
    sub_1BE9BF4B0();
    v36 = swift_bridgeObjectRetain();
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestHeaders] = v36;
  *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestObjects] = a4;
  *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_bodyStreamResetCount] = a5;
  if (a6)
  {
    v37 = (uint64_t)&a6[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    sub_1BE9BF4B0();
    sub_1BEA03A6C(v37, (uint64_t)v20, (uint64_t *)&unk_1EF570DB0);
  }
  else
  {
    v38 = type metadata accessor for Date();
    sub_1BE9BDE84((uint64_t)v20, v39, v40, v38);
  }
  sub_1BEA06024((uint64_t)v20, (uint64_t)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseTime], (uint64_t *)&unk_1EF570DB0);
  if (a6)
  {
    v41 = &a6[OBJC_IVAR___CKDTrafficMetadata_status];
    sub_1BE9BF4B0();
    *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseStatus] = *(_QWORD *)v41;
    sub_1BE9BF4B0();
    v42 = swift_bridgeObjectRetain();
  }
  else
  {
    v42 = 0;
    *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseStatus] = 0;
  }
  *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseHeaders] = v42;
  *(_QWORD *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseObjects] = v47;
  v43 = (objc_class *)type metadata accessor for TrafficLogMessage();
  v48.receiver = v7;
  v48.super_class = v43;
  v44 = objc_msgSendSuper2(&v48, sel_init);

  return v44;
}

void sub_1BEA06024(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1BE9BE754(a1, a2, a3);
  sub_1BE9BF4FC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_1BE9B69D4();
}

uint64_t type metadata accessor for TrafficLogMessage()
{
  uint64_t result;

  result = qword_1EF570E30;
  if (!qword_1EF570E30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BEA0615C()
{
  return sub_1BEA061E0();
}

id sub_1BEA06174(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  v5 = (void *)a3();
  v7 = v6;

  if (v7)
  {
    MEMORY[0x1C3B822A0](v5, v7);
    sub_1BE9BD8BC();
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

uint64_t sub_1BEA061D4()
{
  return sub_1BEA061E0();
}

uint64_t sub_1BEA061E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_requestHeaders);
  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1BE9F57CC(v2, v3, v1);
    v1 = v4;
    sub_1BE9B6958();
  }
  return v1;
}

uint64_t sub_1BEA06294()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;

  _StringGuts.grow(_:)(55);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_getObjectType();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  sub_1BE9B6958();
  v3._object = (void *)0x80000001BECBE7C0;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  v4 = sub_1BEA0615C();
  if (!v5)
    v4 = 0x6E776F6E6B6E75;
  sub_1BE9BE7A0(v4);
  sub_1BE9B6958();
  v6._countAndFlagsBits = 0xD000000000000015;
  v6._object = (void *)0x80000001BECBE7E0;
  String.append(_:)(v6);
  v7 = sub_1BEA061D4();
  if (!v8)
    v7 = 0x6E776F6E6B6E75;
  sub_1BE9BE7A0(v7);
  sub_1BE9B6958();
  v9._countAndFlagsBits = 0x3D6469757520;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_uuid);
  v11 = *(void **)(v0 + OBJC_IVAR___CKLTrafficLogMessage_uuid + 8);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  sub_1BE9B6958();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

id TrafficLogMessage.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TrafficLogMessage.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TrafficLogMessage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrafficLogMessage();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BEA06544()
{
  return type metadata accessor for TrafficLogMessage();
}

void sub_1BEA0654C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BEA05830(319, (unint64_t *)&qword_1EF570DF0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v0 <= 0x3F)
  {
    sub_1BEA05830(319, &qword_1EF570DF8, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TrafficLogMessage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrafficLogMessage.__allocating_init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void sub_1BEA06984(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_shareAccessRequestCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_shareAccessRequestCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA07598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id location)
{
  id *v49;
  id *v50;
  id *v51;

  objc_destroyWeak(v51);
  objc_destroyWeak(v50);
  objc_destroyWeak(v49);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a43);
  _Unwind_Resume(a1);
}

void sub_1BEA075F0(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleShareAccessRequestedForURL_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);

}

void sub_1BEA07654(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = v9;
      objc_msgSend_error(v3, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138412290;
      v20 = v15;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Error requesting access to share: %@", (uint8_t *)&v19, 0xCu);

    }
    objc_msgSend_error(v3, v10, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v17, (uint64_t)v16);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v18);

}

void sub_1BEA07C20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA07C34(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_bundleIDsFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

}

void sub_1BEA07EE8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD v16[5];
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1BEA08010;
  v16[3] = &unk_1E782E4B8;
  v16[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_setShareMetadataFetchedBlock_(v3, v5, (uint64_t)v16);
  v10 = v4;
  v11 = 3221225472;
  v12 = sub_1BEA08188;
  v13 = &unk_1E782E4E0;
  objc_copyWeak(&v15, &location);
  v14 = *(_QWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)&v10);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8, v10, v11, v12, v13);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v9);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);

}

void sub_1BEA07FE8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA08010(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (!v8 || v9)
  {
    if (!v9)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v10, *MEMORY[0x1E0C94B20], 2003, CFSTR("Couldn't get metadata for the share with url %@"), v7);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend__performCallbackForURL_withAppBundleIDs_daemonBundleIDs_error_(*(void **)(a1 + 32), v10, (uint64_t)v7, 0, 0, v11);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v7;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Fetched share metadata for URL: %@", buf, 0xCu);
    }
    objc_msgSend_shareMetadatasByURL(*(void **)(a1 + 32), v13, v14);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v11, v15, (uint64_t)v8, v7);
  }

}

void sub_1BEA08188(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  __CFString *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  void *v11;
  NSObject *v12;
  int v13;
  const __CFString *v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v9 = CFSTR(" with error ");
    v10 = &stru_1E7838F48;
    if (v5)
      v10 = v5;
    else
      v9 = &stru_1E7838F48;
    v13 = 138543618;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Done fetching all share metadata%{public}@%@", (uint8_t *)&v13, 0x16u);
  }
  if (v5)
  {
    objc_msgSend_error(*(void **)(a1 + 32), v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v11)
      objc_msgSend_setError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v12);

}

void sub_1BEA08640(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  _QWORD v5[4];
  __int128 v6;
  id v7;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEA0870C;
  v5[3] = &unk_1E782E530;
  objc_copyWeak(&v7, &location);
  v6 = *(_OWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);

}

void sub_1BEA086F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEA0870C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const __CFString *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const __CFString *v36;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  const __CFString *v45;
  __int16 v46;
  const __CFString *v47;
  __int16 v48;
  uint64_t v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_opt_new();
  v4 = (void *)objc_opt_new();
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  objc_msgSend_bundleIDs(WeakRetained, v5, v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v40, v50, 16);
  if (v9)
  {
    v11 = v9;
    v12 = *(_QWORD *)v41;
    v13 = (void *)*MEMORY[0x1E0C95408];
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v41 != v12)
          objc_enumerationMutation(v7);
        v15 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        if (objc_msgSend_hasPrefix_(v15, v10, (uint64_t)v13))
        {
          v18 = objc_msgSend_length(v13, v16, v17);
          objc_msgSend_substringFromIndex_(v15, v19, v18);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_length(v20, v21, v22))
            objc_msgSend_addObject_(v4, v23, (uint64_t)v20);

        }
        else
        {
          objc_msgSend_addObject_(v3, v16, (uint64_t)v15);
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v40, v50, 16);
    }
    while (v11);
  }

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v24 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v26 = v24;
    objc_msgSend_error(WeakRetained, v27, v28);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
      v32 = CFSTR(" with error ");
    else
      v32 = &stru_1E7838F48;
    objc_msgSend_error(WeakRetained, v29, v30);
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = (void *)v33;
    v35 = *(_QWORD *)(a1 + 32);
    if (v33)
      v36 = (const __CFString *)v33;
    else
      v36 = &stru_1E7838F48;
    *(_DWORD *)buf = 138543874;
    v45 = v32;
    v46 = 2112;
    v47 = v36;
    v48 = 2112;
    v49 = v35;
    _os_log_impl(&dword_1BE990000, v26, OS_LOG_TYPE_INFO, "Fetched registered bundleIDs%{public}@%@ for URL %@", buf, 0x20u);

  }
  objc_msgSend__performCallbackForURL_withAppBundleIDs_daemonBundleIDs_error_(*(void **)(a1 + 40), v25, *(_QWORD *)(a1 + 32), v3, v4, 0);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v37, v38);
  v39 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v39);

}

void sub_1BEA090AC()
{
  void *v0;

  v0 = (void *)qword_1ED7026D8;
  qword_1ED7026D8 = (uint64_t)&unk_1E78AF528;

}

void sub_1BEA09404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  id *v23;
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1BEA09454(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  id v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = objc_loadWeakRetained((id *)(a1 + 48));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v39 = v9;
    *(_DWORD *)buf = 138412546;
    v44 = v5;
    v45 = 2048;
    v46 = (int)objc_msgSend_code(v6, v40, v41);
    _os_log_debug_impl(&dword_1BE990000, v39, OS_LOG_TYPE_DEBUG, "Fetched registered bundleIDs %@ with response code %ld", buf, 0x16u);

  }
  if (objc_msgSend_code(v6, v10, v11) != 1)
  {
    v13 = (void *)MEMORY[0x1E0C94FF8];
    v14 = *MEMORY[0x1E0C94B20];
    v15 = sub_1BEB10D5C(v6);
    sub_1BEB10290(v8, v6);
    v42 = v5;
    v16 = v8;
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v6, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorDescription(v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_format_(v13, v24, v14, v15, v17, CFSTR("Error fetching registered bundle IDs from server: %@"), v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v26, (uint64_t)v25);

    v8 = v16;
    v5 = v42;
  }
  objc_msgSend_setBundleIDs_(WeakRetained, v12, (uint64_t)v5);
  if (*MEMORY[0x1E0C95280])
  {
    v29 = *(void **)(a1 + 32);
    objc_msgSend_containerID(v29, v27, v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerIdentifier(v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__unitTestBundleIDsByContainerID_(v29, v34, (uint64_t)v33);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_count(v35, v36, v37))
      objc_msgSend_setBundleIDs_(WeakRetained, v38, (uint64_t)v35);

  }
}

void sub_1BEA096D0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v9 = v4;
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138544130;
    v19 = v11;
    v20 = 2048;
    v21 = WeakRetained;
    v22 = 2114;
    v23 = v14;
    v24 = 2112;
    v25 = v17;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Fetch registered bundleIDs operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v18,
      0x2Au);

  }
  objc_msgSend_error(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(WeakRetained, v8, (uint64_t)v7);

}

uint64_t sub_1BEA09E10(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  CKDPRecord *v25;
  const char *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

        goto LABEL_44;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_44;
      case 3u:
        v25 = objc_alloc_init(CKDPRecord);
        objc_msgSend_addRecord_((void *)a1, v26, (uint64_t)v25);
        goto LABEL_29;
      case 4u:
        v25 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 48), v25);
LABEL_29:
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_46;
        goto LABEL_39;
      case 5u:
        v25 = objc_alloc_init(CKDPShareMetadata);
        objc_storeStrong((id *)(a1 + 40), v25);
        if (!PBReaderPlaceMark() || (CKDPShareMetadataReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_46;
        goto LABEL_39;
      case 8u:
        v25 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 24), v25);
        if (PBReaderPlaceMark() && sub_1BEAB1B80((id *)&v25->super.super.isa, a2))
        {
LABEL_39:
          PBReaderRecallMark();

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

void sub_1BEA0B2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA0B2DC(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  const char *v7;
  id v8;
  void *v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = a2;
  v8 = a3;
  v9 = (void *)a1[4];
  if (!v9 || objc_msgSend_containsObject_(v9, v7, (uint64_t)v15))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v11 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
      if (!v11)
      {
        v12 = objc_opt_new();
        v13 = *(_QWORD *)(a1[5] + 8);
        v14 = *(void **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = v12;

        v11 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
      }
      objc_msgSend_addObject_(v11, v10, (uint64_t)v8);
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
      *a4 = 1;
    }
  }

}

void sub_1BEA0B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BEA0B728(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  CKDPRecord *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  CKDProtocolTranslator *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t hasProtectionDataEntitlement;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  char hasOutOfProcessUIEntitlement;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  uint64_t hasParticipantPIIEntitlement;
  const char *v57;
  id v58;
  id v59;
  uint8_t buf[4];
  id v61;
  __int16 v62;
  void *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), off_1E782E620, 0, &unk_1E782E658);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_nextObject(v3, v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v14 = 0;
LABEL_11:
    v32 = 0;
    goto LABEL_12;
  }
  while (1)
  {
    v9 = *(void **)(a1 + 32);
    objc_msgSend_knownUserKeys(v8, v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v9) = objc_msgSend__cachedRecordKnownUserKeyData_satisfiesRequiredKeys_(v9, v11, (uint64_t)v10, *(_QWORD *)(a1 + 48));

    if ((v9 & 1) != 0)
      break;
    objc_msgSend_nextObject(v3, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = v14;
    if (!v14)
      goto LABEL_11;
  }
  v15 = (id)objc_msgSend_fetchCacheEntryRecordData_(*(void **)(a1 + 32), v12, (uint64_t)v8);
  v16 = [CKDPRecord alloc];
  objc_msgSend_recordData(v8, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend_initWithData_(v16, v20, (uint64_t)v19);

  if (!v14)
    goto LABEL_11;
  v21 = [CKDProtocolTranslator alloc];
  v23 = (void *)objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v21, v22, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), 0);
  objc_msgSend_zoneID(*(void **)(a1 + 64), v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_anonymousCKUserID(v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0;
  objc_msgSend_recordFromPRecord_asAnonymousCKUserID_error_(v23, v30, (uint64_t)v14, v29, &v59);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v59;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = v31;

  v36 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  if (v36)
  {
    objc_msgSend_setWasCached_(v36, v35, 1);
    objc_msgSend_entitlements(*(void **)(a1 + 56), v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v39, v40, v41);
    objc_msgSend_setSerializeProtectionData_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), v43, hasProtectionDataEntitlement);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_entitlements(*(void **)(a1 + 56), v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v46, v47, v48);
      if ((hasOutOfProcessUIEntitlement & 1) != 0)
      {
        objc_msgSend_setSerializePersonalInfo_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), v49, 1);
      }
      else
      {
        objc_msgSend_entitlements(*(void **)(a1 + 56), v49, v50);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        hasParticipantPIIEntitlement = objc_msgSend_hasParticipantPIIEntitlement(v31, v54, v55);
        objc_msgSend_setSerializePersonalInfo_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), v57, hasParticipantPIIEntitlement);
      }
      if ((hasOutOfProcessUIEntitlement & 1) == 0)

    }
    v58 = (id)objc_msgSend_extendExpiration_(*(void **)(a1 + 32), v44, (uint64_t)v8);

    v23 = v32;
    v32 = 0;
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v53 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v61 = v32;
      v62 = 2112;
      v63 = v14;
      _os_log_error_impl(&dword_1BE990000, v53, OS_LOG_TYPE_ERROR, "Failed to convert pRecord %@ : %@", buf, 0x16u);
    }
  }

LABEL_12:
  return v32;
}

void sub_1BEA0BA88(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  id v7;

  v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1E78AF198);
  objc_msgSend_orderDescendingByProperty_(v2, v4, (uint64_t)CFSTR("modificationTime"));
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v5, (uint64_t)CFSTR("recordID = $RECORDID AND environment = $ENVIRONMENT AND databaseScope = $SCOPE AND dsid = $DSID"));
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v6, (uint64_t)v7);

}

uint64_t sub_1BEA0C200(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  CKDPRecord *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  CKDProtocolTranslator *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  id v45;
  id v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  void *i;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  void *v61;
  void *v62;
  const char *v63;
  NSObject *v64;
  id v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t hasProtectionDataEntitlement;
  const char *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t hasParticipantPIIEntitlement;
  const char *v84;
  const char *v85;
  id v86;
  __int128 v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  id v97;
  _QWORD v98[4];
  id v99;
  uint8_t buf[4];
  id v101;
  __int16 v102;
  void *v103;
  _BYTE v104[128];
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v98[0] = MEMORY[0x1E0C809B0];
  v98[1] = 3221225472;
  v98[2] = sub_1BEA0C704;
  v98[3] = &unk_1E782E6A8;
  v99 = *(id *)(a1 + 48);
  objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, v4, v3, 0, 0, v98);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_nextObject(v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v12 = (void *)v8;
    *(_QWORD *)&v11 = 138412546;
    v88 = v11;
    v90 = v5;
    while (1)
    {
      v13 = *(void **)(a1 + 32);
      objc_msgSend_knownUserKeys(v12, v9, v10, v88);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v13) = objc_msgSend__cachedRecordKnownUserKeyData_satisfiesRequiredKeys_(v13, v15, (uint64_t)v14, *(_QWORD *)(a1 + 56));

      if ((_DWORD)v13)
      {
        v18 = (id)objc_msgSend_fetchCacheEntryRecordData_(*(void **)(a1 + 32), v16, (uint64_t)v12);
        v19 = [CKDPRecord alloc];
        objc_msgSend_recordData(v12, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)objc_msgSend_initWithData_(v19, v23, (uint64_t)v22);

        if (v24)
          break;
      }
      v52 = 0;
      v53 = 0;
LABEL_18:
      objc_msgSend_nextObject(v5, v16, v17);
      v54 = objc_claimAutoreleasedReturnValue();

      v12 = (void *)v54;
      if (!v54)
        goto LABEL_39;
    }
    v25 = [CKDProtocolTranslator alloc];
    v27 = (void *)objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v25, v26, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88), 0);
    objc_msgSend_recordIdentifier(v24, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    v91 = v24;
    if (v30)
    {
      objc_msgSend_recordIdentifier(v24, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v97 = 0;
      objc_msgSend_recordIDFromPRecordIdentifier_error_(v27, v34, (uint64_t)v33, &v97);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v97;

      objc_msgSend_options(*(void **)(a1 + 64), v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend_useAnonymousToServerShareParticipants(v39, v40, v41);

      v45 = 0;
      if (v42 && v35)
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v46 = *(id *)(a1 + 72);
        v45 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v93, v104, 16);
        if (v45)
        {
          v89 = v36;
          v49 = *(_QWORD *)v94;
          while (2)
          {
            for (i = 0; i != v45; i = (char *)i + 1)
            {
              if (*(_QWORD *)v94 != v49)
                objc_enumerationMutation(v46);
              v51 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)i);
              if (objc_msgSend_isEqualIgnoringAnonymousUserIDsToRecordID_(v51, v48, (uint64_t)v35))
              {
                v45 = v51;
                goto LABEL_22;
              }
            }
            v45 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v48, (uint64_t)&v93, v104, 16);
            if (v45)
              continue;
            break;
          }
LABEL_22:
          v36 = v89;
        }

      }
      objc_msgSend_zoneID(v45, v43, v44);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_anonymousCKUserID(v56, v57, v58);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v92 = v36;
      objc_msgSend_recordFromPRecord_asAnonymousCKUserID_error_(v27, v60, (uint64_t)v24, v59, &v92);
      v61 = v27;
      v62 = v36;
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = v92;

      v27 = v61;
      v5 = v90;
      if (v52)
        goto LABEL_30;
    }
    else
    {
      v55 = 0;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v64 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v88;
      v101 = v55;
      v102 = 2112;
      v103 = v91;
      _os_log_error_impl(&dword_1BE990000, v64, OS_LOG_TYPE_ERROR, "Failed to convert pRecord %@ : %@", buf, 0x16u);
    }
    v52 = 0;
LABEL_30:
    objc_msgSend_setWasCached_(v52, v63, 1);

    if (v52)
    {
      v53 = v91;
      if (objc_msgSend__cachedRecordHasValidAssets_forRequiredKeys_(*(void **)(a1 + 32), v16, (uint64_t)v52, *(_QWORD *)(a1 + 56)))
      {
        v65 = (id)objc_msgSend__trimRecord_toRequiredKeys_(*(void **)(a1 + 32), v16, (uint64_t)v52, *(_QWORD *)(a1 + 56));
        objc_msgSend_entitlements(*(void **)(a1 + 64), v66, v67);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v68, v69, v70);
        objc_msgSend_setSerializeProtectionData_(v52, v72, hasProtectionDataEntitlement);

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend_entitlements(*(void **)(a1 + 64), v73, v74);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_hasOutOfProcessUIEntitlement(v75, v76, v77))
          {
            objc_msgSend_setSerializePersonalInfo_(v52, v78, 1);
          }
          else
          {
            objc_msgSend_entitlements(*(void **)(a1 + 64), v78, v79);
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            hasParticipantPIIEntitlement = objc_msgSend_hasParticipantPIIEntitlement(v80, v81, v82);
            objc_msgSend_setSerializePersonalInfo_(v52, v84, hasParticipantPIIEntitlement);

          }
        }
        objc_msgSend_addObject_(*(void **)(a1 + 80), v73, (uint64_t)v52);
        v86 = (id)objc_msgSend_extendExpiration_(*(void **)(a1 + 32), v85, (uint64_t)v12);
      }
    }
    else
    {
      v53 = v91;
    }
    goto LABEL_18;
  }
LABEL_39:

  return 0;
}

void sub_1BEA0C704(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  id v8;

  v3 = a2;
  objc_msgSend_setFetchedProperties_(v3, v4, (uint64_t)&unk_1E78AF1B0);
  objc_msgSend_orderDescendingByProperty_(v3, v5, (uint64_t)CFSTR("modificationTime"));
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v6, (uint64_t)CFSTR("environment = $ENVIRONMENT AND databaseScope = $SCOPE AND dsid = $DSID AND recordID IN %@"), *(_QWORD *)(a1 + 32));
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v8);

}

uint64_t sub_1BEA0C954(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("recordID = $RECORDID AND environment = $ENVIRONMENT AND dsid = $DSID"));
}

void sub_1BEA0D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA0D130()
{
  return 1;
}

uint64_t sub_1BEA0D138(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = CKIsIndexedArrayKey();
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

id sub_1BEA0D178(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  double v11;
  double v12;
  const char *v13;
  const char *v14;

  objc_msgSend_fetchProperties_inObject_matchingDBProperties_label_(*(void **)(a1 + 32), a2, (uint64_t)&unk_1E78AF1C8, *(_QWORD *)(a1 + 40), &unk_1E78AF1E0, off_1E782E7B0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_CKIsNoMatchingRowError_(MEMORY[0x1E0CB35C8], v4, (uint64_t)v3))
  {
    objc_msgSend_setModificationTime_(*(void **)(a1 + 40), v5, *(_QWORD *)(a1 + 48));
    objc_msgSend_insertObject_(*(void **)(a1 + 32), v7, *(_QWORD *)(a1 + 40));
    v8 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v8;
  }
  else if (!v3)
  {
    objc_msgSend_modificationTime(*(void **)(a1 + 40), v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceDate_(v9, v10, *(_QWORD *)(a1 + 48));
    v12 = v11;

    if (v12 >= 0.0)
    {
      v3 = 0;
    }
    else
    {
      objc_msgSend_setModificationTime_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 48));
      objc_msgSend_updateUsingObject_(*(void **)(a1 + 32), v14, *(_QWORD *)(a1 + 40));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v3;
}

void sub_1BEA0D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA0D5E0(uint64_t a1, const char *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), off_1E782E7F0, 0, &unk_1E782E808);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v19, v23, 16);
  if (v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v3);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v12 = *(void **)(a1 + 32);
        objc_msgSend_knownUserKeys(v11, v6, v7, (_QWORD)v19);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v12) = objc_msgSend__cachedRecordKnownUserKeyData_satisfiesRequiredKeys_(v12, v14, (uint64_t)v13, *(_QWORD *)(a1 + 48));

        if ((_DWORD)v12)
        {
          objc_msgSend_etag(v11, v6, v7);
          v15 = objc_claimAutoreleasedReturnValue();
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          v17 = *(void **)(v16 + 40);
          *(_QWORD *)(v16 + 40) = v15;

          goto LABEL_11;
        }
      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v19, v23, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  return 0;
}

void sub_1BEA0D754(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  id v7;

  v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1E78AF1F8);
  objc_msgSend_orderDescendingByProperty_(v2, v4, (uint64_t)CFSTR("modificationTime"));
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v5, (uint64_t)CFSTR("recordID = $RECORDID AND environment = $ENVIRONMENT AND databaseScope = $SCOPE AND dsid = $DSID"));
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v6, (uint64_t)v7);

}

uint64_t sub_1BEA0D9D8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("recordID = $RECORDID AND databaseScope = $SCOPE"));
}

uint64_t sub_1BEA0DBA0(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("databaseScope = $SCOPE"));
}

uint64_t sub_1BEA0DCA8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("zoneIdentifier = $ZONEID"));
}

void sub_1BEA0E99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA0E9B4(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend_count(a3, a2, (uint64_t)a3);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 69930 * result;
  return result;
}

uint64_t sub_1BEA0E9F4(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend_count(a3, a2, (uint64_t)a3);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 69930 * result;
  return result;
}

void sub_1BEA0EAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA0EB04(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend_count(a3, a2, (uint64_t)a3);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 69930 * result;
  return result;
}

uint64_t sub_1BEA0EBE4(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

uint64_t sub_1BEA0EBEC(uint64_t a1, const char *a2)
{
  return objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 24), a2, (uint64_t)a2);
}

uint64_t sub_1BEA0EC9C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

uint64_t sub_1BEA0ECA4(uint64_t a1, const char *a2)
{
  return objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, (uint64_t)a2);
}

uint64_t sub_1BEA0ED54(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

uint64_t sub_1BEA0ED5C(uint64_t a1, const char *a2)
{
  return objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 32), a2, (uint64_t)a2);
}

uint64_t sub_1BEA0EE48(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

id sub_1BEA0EEC8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  BOOL v10;
  void *v11;
  id v12;
  void *v13;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v4 = a2;
  objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v7, (uint64_t)v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if (v6)
      v11 = v6;
    else
      v11 = v8;
    v12 = v11;
  }
  else
  {
    objc_msgSend_arrayByAddingObjectsFromArray_(v6, v9, (uint64_t)v8);
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v13 = v12;

  return v13;
}

id sub_1BEA0F0A4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  const char *v16;
  void *v17;
  void *v18;
  id v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v4 = a2;
  objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)v4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  v8 = (void *)MEMORY[0x1E0C9AA60];
  if (v6)
    v9 = (void *)v6;
  else
    v9 = (void *)MEMORY[0x1E0C9AA60];
  v10 = v9;

  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v11, (uint64_t)v4);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v12)
    v14 = (void *)v12;
  else
    v14 = v8;
  v15 = v14;

  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v16, (uint64_t)v4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
    v18 = v17;
  else
    v18 = v8;
  v19 = v18;

  objc_msgSend_arrayByAddingObjectsFromArray_(v10, v20, (uint64_t)v15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_arrayByAddingObjectsFromArray_(v21, v22, (uint64_t)v19);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

void sub_1BEA0F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA0F26C(uint64_t a1, const char *a2, void *a3, BOOL *a4)
{
  uint64_t result;
  _QWORD v7[5];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEA0F2F0;
  v7[3] = &unk_1E782E9F0;
  v7[4] = *(_QWORD *)(a1 + 32);
  result = objc_msgSend_enumerateObjectsUsingBlock_(a3, a2, (uint64_t)v7);
  *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
  return result;
}

void sub_1BEA0F2F0(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

void sub_1BEA0F3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA0F410(uint64_t a1, const char *a2, void *a3, BOOL *a4)
{
  uint64_t result;
  _QWORD v7[5];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BEA0F494;
  v7[3] = &unk_1E782E9F0;
  v7[4] = *(_QWORD *)(a1 + 32);
  result = objc_msgSend_enumerateObjectsUsingBlock_(a3, a2, (uint64_t)v7);
  *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
  return result;
}

void sub_1BEA0F494(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_error(a2, (const char *)a2, a3);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

uint64_t sub_1BEA0F7D0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA0FCD4(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend_itemGroupSetCompletionGroup(WeakRetained, v2, v3);
    v4 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v4);

    WeakRetained = v5;
  }

}

void sub_1BEA0FFDC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD);
  const char *v8;
  uint64_t v9;
  void *v10;

  objc_msgSend_itemGroupSetCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_itemGroupSetCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend_itemGroupSet(*(void **)(a1 + 32), v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v7)[2](v7, v10);

    MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setItemGroupSetCompletionBlock_, 0);
  }
}

uint64_t sub_1BEA1038C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_valueID(a2, (const char *)a2, a3);
}

id sub_1BEA10434(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;

  objc_msgSend_valueID(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_zoneID(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1BEA10928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1BEA10954(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  const char *v51;
  void *v52;
  CKDPMergeableDeltaSaveRequest *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  id v57;
  NSObject *v58;
  void *v60;
  const char *v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  id obj;
  uint8_t buf[4];
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = objc_msgSend_operationType(v4, v5, v6);
  objc_msgSend_operationRequestWithType_(v4, v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deltasByRequestID(*(void **)(a1 + 32), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_request(v9, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationUUID(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v12, v19, (uint64_t)v3, v18);

  if (!objc_msgSend_requiresCKAnonymousUserIDs(*(void **)(a1 + 32), v20, v21))
    goto LABEL_4;
  objc_msgSend_valueID(v3, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_zoneID(v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_anonymousCKUserID(v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    objc_msgSend_anonymousCKUserID(v27, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKDPIdentifier_User(v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_request(v9, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAnonymousCKUserID_(v39, v40, (uint64_t)v36);

LABEL_4:
    objc_msgSend_translator(*(void **)(a1 + 32), v22, v23);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueID(v3, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pMergeableValueIdentifierFromMergeableValueID_(v41, v45, (uint64_t)v44);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_translator(*(void **)(a1 + 32), v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v50 + 40);
    objc_msgSend_pMergeableDeltaFromDelta_error_(v49, v51, (uint64_t)v3, &obj);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(v50 + 40), obj);

    if (v52)
    {
      v53 = objc_alloc_init(CKDPMergeableDeltaSaveRequest);
      objc_msgSend_setIdentifier_(v53, v54, (uint64_t)v46);
      objc_msgSend_setDelta_(v53, v55, (uint64_t)v52);
      objc_msgSend_setMergeableDeltaSaveRequest_(v9, v56, (uint64_t)v53);
      v57 = v9;

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v58 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v80 = v77;
        _os_log_error_impl(&dword_1BE990000, v58, OS_LOG_TYPE_ERROR, "Failed to generate delta proto with error: %@", buf, 0xCu);
      }
      v57 = 0;
    }

    goto LABEL_12;
  }
  v60 = (void *)objc_opt_new();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v61, (uint64_t)CFSTR("An anonymousCKUserID is required to upload mergeable deltas when using anonymous to server share participants"));
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v60, v63, (uint64_t)v62, *MEMORY[0x1E0CB2D50]);
  objc_msgSend_operation(*(void **)(a1 + 32), v64, v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_topmostParentOperation(v66, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_operationID(v69, v70, v71);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  if (v73)
    objc_msgSend_setObject_forKeyedSubscript_(v60, v72, (uint64_t)v73, *MEMORY[0x1E0C947F8]);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v72, *MEMORY[0x1E0C94B20], 5015, v60);
  v74 = objc_claimAutoreleasedReturnValue();
  v75 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v76 = *(void **)(v75 + 40);
  *(_QWORD *)(v75 + 40) = v74;

  v57 = 0;
LABEL_12:

  return v57;
}

BOOL CKDPDateStatisticsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C60]);
        v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(MEMORY[0x1E0C94C60]);
        v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEA11944(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend_participants(a1, a2, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v11, v15, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v3);
        if ((objc_msgSend_hasEncryptedPersonalInfo(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i), v5, v6) & 1) != 0)
        {
          v7 = 1;
          goto LABEL_11;
        }
      }
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }
LABEL_11:

  return v7;
}

void sub_1BEA11A3C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend_participants(a1, v7, v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v20, v24, 16);
  if (v11)
  {
    v14 = v11;
    v15 = *(_QWORD *)v21;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v21 != v15)
          objc_enumerationMutation(v9);
        v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v16);
        objc_msgSend_recordID(a1, v12, v13);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__encryptPersonalInfoWithPCSBlob_inShareWithID_pcsManager_(v17, v19, a3, v18, v6);

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v20, v24, 16);
    }
    while (v14);
  }

}

void sub_1BEA11B70(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend_participants(a1, v7, v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v20, v24, 16);
  if (v11)
  {
    v14 = v11;
    v15 = *(_QWORD *)v21;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v21 != v15)
          objc_enumerationMutation(v9);
        v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v16);
        objc_msgSend_recordID(a1, v12, v13);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__decryptPersonalInfoWithPCSBlob_inShareWithID_pcsManager_(v17, v19, a3, v18, v6);

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v20, v24, 16);
    }
    while (v14);
  }

}

void sub_1BEA11CA4(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  const char *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v17 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v18 = v17;
    objc_msgSend_recordID(a1, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v34 = v21;
    _os_log_impl(&dword_1BE990000, v18, OS_LOG_TYPE_INFO, "Ingesting manatee sharing invitation data for share %@", buf, 0xCu);

  }
  objc_initWeak((id *)buf, a1);
  objc_msgSend_pcsManager(v14, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sharingInvitationData(v12, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = sub_1BEA11ED4;
  v30[3] = &unk_1E782EB10;
  objc_copyWeak(&v32, (id *)buf);
  v28 = v16;
  v31 = v28;
  objc_msgSend_createIngestedPPPCSDataFromInvitationData_shareModificationDate_requestorOperationID_completionHandler_(v24, v29, (uint64_t)v27, v13, v15, v30);

  objc_destroyWeak(&v32);
  objc_destroyWeak((id *)buf);

}

void sub_1BEA11EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA11ED4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_currentUserParticipant(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && !v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v14 = 138412290;
      v15 = v10;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Setting per-participant PCS on self participant: %@", (uint8_t *)&v14, 0xCu);
    }
    objc_msgSend_setProtectionInfo_(v10, v12, (uint64_t)v5);
  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    (*(void (**)(uint64_t, id, id))(v13 + 16))(v13, v5, v6);

}

uint64_t sub_1BEA1201C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend__prepPCSDataWithContainer_databaseScope_publicSharingKey_oonPrivateKey_removeServerSpecifiedKeys_sharedRecordZone_requestorOperationID_completionHandler_(a1, a2, a3, a4, 0, 0, a5, 0, a6, a7);
}

uint64_t sub_1BEA12050(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return objc_msgSend__prepPCSDataWithContainer_databaseScope_publicSharingKey_oonPrivateKey_removeServerSpecifiedKeys_sharedRecordZone_requestorOperationID_completionHandler_(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9);
}

void sub_1BEA12078(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[5];
  NSObject *v40;
  uint8_t buf[4];
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend_pcsManager(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_serviceTypeForSharing(v9, v10, v11);

  objc_msgSend_dataWithShare_serviceType_(CKDSharePCSData, v13, (uint64_t)a1, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_invitedPCS(v14, v15, v16))
  {
    objc_msgSend_setSharePCSData_(a1, v17, (uint64_t)v14);
    v20 = objc_msgSend_invitedPCS(v14, v18, v19);
    objc_msgSend_pcsManager(v6, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__encryptPersonalInfoWithPCSBlob_pcsManager_(a1, v24, v20, v23);

    v25 = dispatch_group_create();
    dispatch_group_enter(v25);
    objc_msgSend_pcsCache(v6, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = sub_1BEA122B0;
    v39[3] = &unk_1E782EB38;
    v39[4] = a1;
    v40 = v25;
    v32 = v25;
    objc_msgSend__setPCSData_forFetchedShareID_withScope_withCompletionHandler_(v28, v33, (uint64_t)v14, v31, a4, v39);

    dispatch_group_wait(v32, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v34 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v35 = v34;
      objc_msgSend_recordID(a1, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v42 = v38;
      _os_log_error_impl(&dword_1BE990000, v35, OS_LOG_TYPE_ERROR, "Didn't get any pre-decrypted share PCS for share %@", buf, 0xCu);

    }
  }

}

void sub_1BEA122B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    objc_msgSend_recordID(v5, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138412546;
    v11 = v9;
    v12 = 2112;
    v13 = v3;
    _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "Error setting PCS data for share %@ in the cache: %@", (uint8_t *)&v10, 0x16u);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEA123D0(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, char a7, void *a8, void *a9, void *a10)
{
  id v15;
  id v16;
  id v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  int IsManatee;
  const char *v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v48;
  id v49;
  _QWORD v50[4];
  id v51;
  id v52;
  id v53;
  _QWORD *v54;
  id v55[2];
  char v56;
  _QWORD v57[5];
  id v58;
  _BYTE location[12];
  __int16 v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v48 = a5;
  v49 = a6;
  v16 = a8;
  v17 = a9;
  v46 = a10;
  v57[0] = 0;
  v57[1] = v57;
  v57[2] = 0x3032000000;
  v57[3] = sub_1BE9BAF18;
  v57[4] = sub_1BE9BAD40;
  v58 = 0;
  if (v16)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v20 = (id)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_zoneID(v16, v21, v22);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(a1, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138412546;
      *(_QWORD *)&location[4] = v42;
      v60 = 2112;
      v61 = v45;
      _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Got a shared zone %@ to prep PCS for share %@", location, 0x16u);

    }
    objc_msgSend_dataWithZone_(CKDZonePCSData, v23, (uint64_t)v16);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v24 = 0;
  }
  objc_msgSend_containerID(v15, v18, v19);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_specialContainerType(v25, v26, v27) == 4)
  {
    v30 = 1;
  }
  else
  {
    objc_msgSend_pcsManager(v15, v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    IsManatee = objc_msgSend_currentServiceIsManatee(v31, v32, v33);

    if (IsManatee)
      v30 = 0;
    else
      v30 = 2;
  }
  objc_initWeak((id *)location, a1);
  objc_msgSend_pcsManager(v15, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = sub_1BEA12750;
  v50[3] = &unk_1E782EB88;
  objc_copyWeak(v55, (id *)location);
  v54 = v57;
  v56 = a7;
  v38 = v15;
  v51 = v38;
  v55[1] = a4;
  v39 = v24;
  v52 = v39;
  v40 = v46;
  v53 = v40;
  objc_msgSend_pcsDataFromFetchedShare_withPublicSharingKey_oonPrivateKey_withServiceType_requestorOperationID_completionHandler_(v37, v41, (uint64_t)a1, v48, v49, v30, v17, v50);

  objc_destroyWeak(v55);
  objc_destroyWeak((id *)location);

  _Block_object_dispose(v57, 8);
}

void sub_1BEA12704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA12750(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  _QWORD v71[4];
  NSObject *v72;
  uint64_t v73;
  id obj;
  _QWORD v75[4];
  NSObject *v76;
  uint64_t v77;
  uint8_t buf[4];
  uint64_t v79;
  __int16 v80;
  void *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v9 = WeakRetained;
  if (v5 && (objc_msgSend_setSharePCSData_(WeakRetained, v8, (uint64_t)v5), !v6))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      objc_msgSend_invitedKeysToRemove(v9, v10, v11);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v22, v23, v24))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v25 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
        {
          v28 = v25;
          *(_DWORD *)buf = 134218242;
          v79 = objc_msgSend_count(v22, v29, v30);
          v80 = 2112;
          v81 = v22;
          _os_log_impl(&dword_1BE990000, v28, OS_LOG_TYPE_INFO, "Need to remove %lu public key(s) from the private share PCS: %@", buf, 0x16u);

        }
        objc_msgSend_pcsManager(*(void **)(a1 + 32), v26, v27);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend_invitedPCS(v5, v32, v33);
        objc_msgSend_removePublicKeys_fromPCS_(v31, v35, (uint64_t)v22, v34);

      }
    }
    if (objc_msgSend_invitedPCS(v5, v10, v11))
    {
      objc_msgSend_recordID(v9, v36, v37);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend_invitedPCS(v5, v38, v39);
      objc_msgSend_pcsManager(*(void **)(a1 + 32), v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend__encryptPersonalInfoWithPCSBlob_pcsManager_(v9, v44, v40, v43);

      v45 = dispatch_group_create();
      dispatch_group_enter(v45);
      objc_msgSend_pcsCache(*(void **)(a1 + 32), v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = *(_QWORD *)(a1 + 72);
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 3221225472;
      v75[2] = sub_1BEA12C50;
      v75[3] = &unk_1E782EB60;
      v77 = *(_QWORD *)(a1 + 56);
      v21 = v45;
      v76 = v21;
      objc_msgSend__setPCSData_forFetchedShareID_withScope_withCompletionHandler_(v48, v50, (uint64_t)v5, v17, v49, v75);

      if (*(_QWORD *)(a1 + 40))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v51 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v79 = (uint64_t)v17;
          _os_log_impl(&dword_1BE990000, v51, OS_LOG_TYPE_INFO, "Decrypting shared zone PCS data for share %@", buf, 0xCu);
        }
        objc_msgSend_pcsManager(*(void **)(a1 + 32), v52, v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = *(_QWORD *)(a1 + 40);
        v58 = objc_msgSend_invitedPCS(v5, v56, v57);
        v59 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        obj = *(id *)(v59 + 40);
        objc_msgSend_decryptSharedZonePCSData_withInvitedPCS_error_(v54, v60, v55, v58, &obj);
        objc_storeStrong((id *)(v59 + 40), obj);

        dispatch_group_enter(v21);
        objc_msgSend_pcsCache(*(void **)(a1 + 32), v61, v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        v64 = *(_QWORD *)(a1 + 40);
        objc_msgSend_zoneID(v17, v65, v66);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = *(_QWORD *)(a1 + 72);
        v71[0] = MEMORY[0x1E0C809B0];
        v71[1] = 3221225472;
        v71[2] = sub_1BEA12CA8;
        v71[3] = &unk_1E782EB60;
        v73 = *(_QWORD *)(a1 + 56);
        v72 = v21;
        objc_msgSend__setPCSData_forFetchedZoneID_withScope_withCompletionHandler_(v63, v69, v64, v67, v68, v71);

      }
      dispatch_group_wait(v21, 0xFFFFFFFFFFFFFFFFLL);

      goto LABEL_25;
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v79 = (uint64_t)v6;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Warn: Couldn't create share PCS data: %@", buf, 0xCu);
    }
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      v15 = (void *)MEMORY[0x1E0C94FF8];
      v16 = *MEMORY[0x1E0C94B20];
      objc_msgSend_recordID(v9, v13, v14);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_error_format_(v15, v18, v16, 5004, v6, CFSTR("Couldn't create share PCS data for share %@"), v17);
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v21 = *(NSObject **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v19;
LABEL_25:

    }
  }
  v70 = *(_QWORD *)(a1 + 48);
  if (v70)
    (*(void (**)(uint64_t, BOOL))(v70 + 16))(v70, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) == 0);

}

void sub_1BEA12C50(uint64_t a1, void *a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  if (v7)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(_QWORD *)(v4 + 40);
    v5 = (id *)(v4 + 40);
    if (!v6)
      objc_storeStrong(v5, a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEA12CA8(uint64_t a1, void *a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  if (v7)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(_QWORD *)(v4 + 40);
    v5 = (id *)(v4 + 40);
    if (!v6)
      objc_storeStrong(v5, a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1BEA12D00(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t hasEncryptedPersonalInfo;
  void *v8;
  const char *v9;
  uint64_t v10;

  objc_msgSend_encryptedPersonalInfo(a1, a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    hasEncryptedPersonalInfo = 1;
  }
  else
  {
    objc_msgSend_userIdentity(a1, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    hasEncryptedPersonalInfo = objc_msgSend_hasEncryptedPersonalInfo(v8, v9, v10);

  }
  return hasEncryptedPersonalInfo;
}

void sub_1BEA12D60(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void *v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  _QWORD v33[2];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v33[0] = CFSTR("CreatedInProcess");
  v8 = (void *)MEMORY[0x1E0CB37E8];
  v9 = a5;
  v10 = a4;
  v13 = objc_msgSend_createdInProcess(a1, v11, v12);
  objc_msgSend_numberWithBool_(v8, v14, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v33[1] = CFSTR("ParticipantAcceptedInProcess");
  v34[0] = v15;
  v16 = (void *)MEMORY[0x1E0CB37E8];
  v19 = objc_msgSend_acceptedInProcess(a1, v17, v18);
  objc_msgSend_numberWithBool_(v16, v20, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v21;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v22, (uint64_t)v34, v33, 2);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_participantID(a1, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEA12EE0((uint64_t)v23, a3, v9, v10, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEncryptedPersonalInfo_(a1, v28, (uint64_t)v27);

  objc_msgSend_userIdentity(a1, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__encryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v31, v32, a3, v26, v10, v9);

}

id sub_1BEA12EE0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  void *v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  void *v14;
  id v15;
  const char *v16;
  void *v17;
  CKDWrappingContext *v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  int v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v9 = (void *)MEMORY[0x1E0CB36F8];
  v10 = a5;
  v11 = a4;
  v12 = a3;
  objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v9, v13, a1, 1, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_alloc(MEMORY[0x1E0C94D18]);
  v17 = (void *)objc_msgSend_initWithData_(v15, v16, (uint64_t)v14);
  v18 = [CKDWrappingContext alloc];
  v20 = (void *)objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v18, v19, (uint64_t)v11, v10, 0, 0, 0);

  objc_msgSend_wrapEncryptedData_withPCS_inContext_(v12, v21, (uint64_t)v17, a2, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v25 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v28 = 138412290;
      v29 = v22;
      _os_log_error_impl(&dword_1BE990000, v25, OS_LOG_TYPE_ERROR, "Couldn't encrypt participant properties %@", (uint8_t *)&v28, 0xCu);
    }
  }
  objc_msgSend_encryptedData(v17, v23, v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

void sub_1BEA130A4(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  const char *v31;
  id v32;

  v32 = a4;
  v8 = a5;
  objc_msgSend_participantID(a1, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encryptedPersonalInfo(a1, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEA131DC(v14, a3, v8, v32, v11);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend_objectForKeyedSubscript_(v15, v16, (uint64_t)CFSTR("CreatedInProcess"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v18;
    if (v18)
    {
      v22 = objc_msgSend_BOOLValue(v18, v19, v20);
      objc_msgSend_setCreatedInProcess_(a1, v23, v22);
    }
    objc_msgSend_objectForKeyedSubscript_(v15, v19, (uint64_t)CFSTR("ParticipantAcceptedInProcess"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v24;
    if (v24)
    {
      v28 = objc_msgSend_BOOLValue(v24, v25, v26);
      objc_msgSend_setAcceptedInProcess_(a1, v29, v28);
    }

  }
  objc_msgSend_userIdentity(a1, v16, v17);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__decryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v30, v31, a3, v11, v32, v8);

}

id sub_1BEA131DC(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  const char *v14;
  void *v15;
  CKDWrappingContext *v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  __CFString *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  const char *v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  const __CFString *v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t v39;
  __CFString *v40;
  id v41;
  void *v42;
  uint8_t buf[4];
  const __CFString *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (!v9)
    goto LABEL_21;
  v13 = objc_alloc(MEMORY[0x1E0C94D18]);
  v15 = (void *)objc_msgSend_initWithEncryptedData_(v13, v14, (uint64_t)v9);
  v16 = [CKDWrappingContext alloc];
  v18 = (void *)objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v16, v17, (uint64_t)v11, v12, 0, 0, 0);
  objc_msgSend_unwrapEncryptedData_withPCS_inContext_(v10, v19, (uint64_t)v15, a2, v18);
  v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v22)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v23 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v44 = v22;
      _os_log_error_impl(&dword_1BE990000, v23, OS_LOG_TYPE_ERROR, "Couldn't decrypt participant properties %@", buf, 0xCu);
    }
    goto LABEL_20;
  }
  objc_msgSend_data(v15, v20, v21);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v24)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v34 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BE990000, v34, OS_LOG_TYPE_ERROR, "Decrypted PII was empty", buf, 2u);
    }
    goto LABEL_19;
  }
  v41 = objc_alloc(MEMORY[0x1E0C99E60]);
  v39 = objc_opt_class();
  v25 = v24;
  v26 = objc_opt_class();
  v27 = objc_opt_class();
  v28 = objc_opt_class();
  v38 = v26;
  v24 = v25;
  v30 = (void *)objc_msgSend_initWithObjects_(v41, v29, v39, v38, v27, v28, 0);
  objc_msgSend_unarchivedObjectOfClasses_fromData_error_(MEMORY[0x1E0CB3710], v31, (uint64_t)v30, v24, 0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v32 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v42 = v30;
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v33 = (id)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      if (v32)
      {
        v37 = (objc_class *)objc_opt_class();
        NSStringFromClass(v37);
        v36 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v36 = CFSTR("nil");
      }
      *(_DWORD *)buf = 138543362;
      v40 = (__CFString *)v36;
      v44 = v36;
      _os_log_error_impl(&dword_1BE990000, v33, OS_LOG_TYPE_ERROR, "Decrypted PII was of unexpected class %{public}@", buf, 0xCu);
      if (v32)

    }
LABEL_19:

LABEL_20:
LABEL_21:
    v32 = 0;
    goto LABEL_22;
  }

LABEL_22:
  return v32;
}

uint64_t sub_1BEA135A0(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t hasEncryptedPersonalInfo;
  void *v8;
  const char *v9;
  uint64_t v10;

  objc_msgSend_encryptedPersonalInfo(a1, a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    hasEncryptedPersonalInfo = 1;
  }
  else
  {
    objc_msgSend_lookupInfo(a1, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    hasEncryptedPersonalInfo = objc_msgSend_hasEncryptedPersonalInfo(v8, v9, v10);

  }
  return hasEncryptedPersonalInfo;
}

void sub_1BEA13600(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  id v23;

  v10 = a6;
  v11 = a5;
  v12 = a4;
  v23 = (id)objc_opt_new();
  objc_msgSend_nameComponents(a1, v13, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
    objc_msgSend_setObject_forKeyedSubscript_(v23, v15, (uint64_t)v16, CFSTR("NameComponents"));
  sub_1BEA12EE0((uint64_t)v23, a3, v10, v11, v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEncryptedPersonalInfo_(a1, v18, (uint64_t)v17);

  objc_msgSend_lookupInfo(a1, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__encryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v21, v22, a3, v12, v11, v10);

}

void sub_1BEA13708(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  id v22;

  v22 = a4;
  v10 = a5;
  v11 = a6;
  objc_msgSend_encryptedPersonalInfo(a1, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEA131DC(v14, a3, v11, v10, v22);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend_objectForKeyedSubscript_(v15, v16, (uint64_t)CFSTR("NameComponents"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setNameComponents_(a1, v19, (uint64_t)v18);

  }
  objc_msgSend_lookupInfo(a1, v16, v17);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__decryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v20, v21, a3, v22, v10, v11);

}

BOOL sub_1BEA137F4(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend_encryptedPersonalInfo(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

void sub_1BEA13824(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  id v22;

  v22 = a4;
  v10 = a5;
  v11 = a6;
  v12 = (void *)objc_opt_new();
  objc_msgSend_emailAddress(a1, v13, v14);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    objc_msgSend_setObject_forKeyedSubscript_(v12, v15, (uint64_t)v17, CFSTR("Email"));
  objc_msgSend_phoneNumber(a1, v15, v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
    objc_msgSend_setObject_forKeyedSubscript_(v12, v18, (uint64_t)v19, CFSTR("Phone"));
  sub_1BEA12EE0((uint64_t)v12, a3, v11, v10, v22);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEncryptedPersonalInfo_(a1, v21, (uint64_t)v20);

}

void sub_1BEA1392C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  id v25;

  v10 = a6;
  v11 = a5;
  v12 = a4;
  objc_msgSend_encryptedPersonalInfo(a1, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEA131DC(v15, a3, v10, v11, v12);
  v25 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_objectForKeyedSubscript_(v25, v16, (uint64_t)CFSTR("Email"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend_objectForKeyedSubscript_(v25, v18, (uint64_t)CFSTR("Email"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setEmailAddress_(a1, v20, (uint64_t)v19);

  }
  objc_msgSend_objectForKeyedSubscript_(v25, v18, (uint64_t)CFSTR("Phone"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend_objectForKeyedSubscript_(v25, v22, (uint64_t)CFSTR("Phone"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPhoneNumber_(a1, v24, (uint64_t)v23);

  }
}

BOOL sub_1BEA13A54(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend_encryptedData(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

void sub_1BEA13A84(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  const __CFString *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v6 = a4;
  objc_msgSend_share(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = CFSTR("AcceptedInProcess");
  v13 = (void *)MEMORY[0x1E0CB37E8];
  v16 = objc_msgSend_acceptedInProcess(a1, v14, v15);
  objc_msgSend_numberWithBool_(v13, v17, v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v18;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v19, (uint64_t)v27, &v26, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_recordName(v12, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEA12EE0((uint64_t)v20, a3, v6, v12, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setEncryptedData_(a1, v25, (uint64_t)v24);
}

void sub_1BEA13BB8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  id v26;

  v6 = a4;
  objc_msgSend_share(a1, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v9, v10, v11);
  v26 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_encryptedData(a1, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordName(v26, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEA131DC(v14, a3, v6, v26, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)CFSTR("AcceptedInProcess"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v20;
  if (v20)
  {
    v24 = objc_msgSend_BOOLValue(v20, v21, v22);
    objc_msgSend_setAcceptedInProcess_(a1, v25, v24);
  }

}

uint64_t CKDPNotificationSyncResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  CKDPNotificationSyncResponsePushMessage *v26;
  const char *v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_35;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            v22 = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_37:
        *(_BYTE *)(a1 + 24) = v22 != 0;
      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = objc_alloc_init(CKDPNotificationSyncResponsePushMessage);
        objc_msgSend_addPushMessage_((void *)a1, v27, (uint64_t)v26);
        if (!PBReaderPlaceMark() || (CKDPNotificationSyncResponsePushMessageReadFrom(v26, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEA14D3C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;

  v4 = a3;
  objc_msgSend_objectAtIndex_(a2, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndex_(v4, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  if (v6 && v8)
    v10 = objc_msgSend_compare_(v6, v9, (uint64_t)v8);

  return v10;
}

id sub_1BEA15324(char a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  void *v11;

  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], a2, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  if ((a1 & 2) != 0)
  {
    objc_msgSend_addObject_(v3, v4, (uint64_t)CFSTR("local-fetch-only"));
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend_addObject_(v6, v4, (uint64_t)CFSTR("wants-parent"));
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  objc_msgSend_addObject_(v6, v4, (uint64_t)CFSTR("wants-zoneish"));
  if ((a1 & 0x10) != 0)
LABEL_5:
    objc_msgSend_addObject_(v6, v4, (uint64_t)CFSTR("wants-per-participant"));
LABEL_6:
  v7 = (void *)MEMORY[0x1E0CB3940];
  if (objc_msgSend_count(v6, v4, v5))
  {
    objc_msgSend_componentsJoinedByString_(v6, v8, (uint64_t)CFSTR("|"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v7, v10, (uint64_t)CFSTR("(%@)"), v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend_stringWithFormat_(v7, v8, (uint64_t)CFSTR("(%@)"), CFSTR("none"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

uint64_t sub_1BEA15444(uint64_t a1, const char *a2)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%lu-%@"), a2, a1);
}

void sub_1BEA159C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEA159D4(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  _QWORD v4[5];
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEA15A58;
  v4[3] = &unk_1E782EC18;
  v4[4] = WeakRetained;
  v5 = *(id *)(a1 + 32);
  objc_msgSend__lockedGetSQLCacheWithCompletionHandler_(WeakRetained, v3, (uint64_t)v4);

}

void sub_1BEA15A58(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA15B24;
  block[3] = &unk_1E782EBF0;
  v10 = *(id *)(a1 + 40);
  v15 = v6;
  v16 = v10;
  v14 = v5;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, block);

}

uint64_t sub_1BEA15B24(_QWORD *a1)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

void sub_1BEA15B40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA15C0C;
  block[3] = &unk_1E782EBF0;
  v10 = *(id *)(a1 + 40);
  v15 = v6;
  v16 = v10;
  v14 = v5;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, block);

}

uint64_t sub_1BEA15C0C(_QWORD *a1)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

void sub_1BEA15D68(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  id v42;
  id v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_45;
  if ((*(_BYTE *)(a1 + 80) & 4) == 0)
    goto LABEL_14;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v36 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v45 = v36;
      _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Client requested fetch of parent PCS data for item %{public}@, but the returned item type doesn't support chain PCS data.", buf, 0xCu);
    }
    goto LABEL_14;
  }
  objc_msgSend_chainPCSData(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_pcs(v5, v6, v7);

  if (v8)
  {
LABEL_14:
    v10 = 1;
    goto LABEL_15;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v38 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543362;
    v45 = v38;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "PCS data for %{public}@ was found in the cache, but it doesn't have chain PCS data and the client requested that. Fetching from the server.", buf, 0xCu);
  }
  v10 = 0;
LABEL_15:
  if ((*(_BYTE *)(a1 + 80) & 8) != 0)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (!objc_msgSend_zoneishPCS(*(void **)(a1 + 32), v12, v13))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v14 = *MEMORY[0x1E0C952D8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
        {
          v39 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138543362;
          v45 = v39;
          _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "PCS data for %{public}@ was found in the cache, but it doesn't have zoneish PCS data and the client requested that. Fetching from the server.", buf, 0xCu);
        }
        v10 = 0;
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v15 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v37 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        v45 = v37;
        _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Client requested fetch of zoneish PCS data for item %{public}@, but the returned item type doesn't support zoneish PCS data. Returning item data anyway since it isn't a zone PCS.", buf, 0xCu);
      }
    }
  }
  if ((*(_BYTE *)(a1 + 80) & 0x10) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (!objc_msgSend_signingPCS(*(void **)(a1 + 32), v16, v17))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v18 = *MEMORY[0x1E0C952D8];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
          goto LABEL_45;
        v19 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        v45 = v19;
        v20 = "Record PCS data for %{public}@ was found in the cache, but it doesn't have per-participant PCS data and th"
              "e client requested that. Fetching from the server.";
        goto LABEL_47;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend_sharePCSData(*(void **)(a1 + 32), a2, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v22)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v18 = *MEMORY[0x1E0C952D8];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
            goto LABEL_45;
          v40 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138543362;
          v45 = v40;
          v20 = "Zone PCS data for %{public}@ was found in the cache, but it doesn't have share PCS data and the client r"
                "equested that. Fetching from the server.";
LABEL_47:
          _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, v20, buf, 0xCu);
          goto LABEL_45;
        }
      }
    }
  }
  if (!v10)
  {
LABEL_45:
    objc_msgSend__lockedCreatePCSCacheFetchOfItem_forOperation_options_fetchCreator_withCompletionHandler_(*(void **)(a1 + 48), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64));
    return;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v23 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v27 = *(void **)(a1 + 32);
    v28 = *(_QWORD *)(a1 + 40);
    v29 = v23;
    objc_msgSend_etag(v27, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsKeyID(*(void **)(a1 + 32), v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v45 = v28;
    v46 = 2114;
    v47 = v32;
    v48 = 2112;
    v49 = v35;
    _os_log_debug_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEBUG, "Returning in-memory cached PCS data. item=%{public}@, protectionInfoTag=%{public}@, pcsKeyID=%@", buf, 0x20u);

  }
  objc_msgSend_callbackQueue(*(void **)(a1 + 48), v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = sub_1BEA1632C;
  v41[3] = &unk_1E782EC68;
  v43 = *(id *)(a1 + 64);
  v42 = *(id *)(a1 + 32);
  dispatch_async(v26, v41);

}

uint64_t sub_1BEA1632C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_1BEA16DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA16DDC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend_pcsData(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2, a3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend_copy(v11, v5, v6);
  objc_msgSend_error(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v7, v10);

}

void sub_1BEA16E60(uint64_t a1, void *a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16[2];
  id from;
  id location;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  objc_msgSend_fetchGroup(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchQueue(*(void **)(a1 + 32), v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA17000;
  block[3] = &unk_1E782ECE0;
  objc_copyWeak(&v15, &from);
  v13 = *(id *)(a1 + 40);
  objc_copyWeak(v16, &location);
  v16[1] = *(id *)(a1 + 64);
  v14 = *(id *)(a1 + 48);
  dispatch_group_notify(v7, v10, block);

  objc_msgSend__lockedAddOutstandingFetch_forItemIDString_databaseScope_(*(void **)(a1 + 32), v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  objc_destroyWeak(v16);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA16FCC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA17000(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_fetchError(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)*MEMORY[0x1E0C952F8];
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v7 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v8 = v7;
      objc_msgSend_operationID(WeakRetained, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 32);
      objc_msgSend_fetchError(WeakRetained, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v35 = v11;
      v36 = 2114;
      v37 = v12;
      v38 = 2112;
      v39 = v15;
      _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Fetch operation %{public}@ for item %{public}@ finished with error: %@", buf, 0x20u);
LABEL_13:

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v6);
    v16 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v8 = v16;
      objc_msgSend_operationID(WeakRetained, v23, v24);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = *(_QWORD *)(a1 + 32);
      objc_msgSend_pcsData(WeakRetained, v26, v27);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsKeyID(v15, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v35 = v11;
      v36 = 2114;
      v37 = v25;
      v38 = 2112;
      v39 = v30;
      _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Fetch operation %{public}@ for item %{public}@ finished with PCS data %@", buf, 0x20u);

      goto LABEL_13;
    }
  }
  v17 = objc_loadWeakRetained((id *)(a1 + 56));
  v19 = v17;
  if (v17)
  {
    objc_msgSend__lockedRemoveOutstandingFetch_forItemIDString_databaseScope_(v17, v18, (uint64_t)WeakRetained, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
    objc_msgSend_callbackQueue(v19, v20, v21);
    v22 = objc_claimAutoreleasedReturnValue();
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = sub_1BEA172B4;
    v31[3] = &unk_1E782EC68;
    v33 = *(id *)(a1 + 40);
    v32 = WeakRetained;
    dispatch_async(v22, v31);

  }
}

void sub_1BEA172B4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 40);
  objc_msgSend_pcsData(*(void **)(a1 + 32), a2, a3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v8, v7);

}

void sub_1BEA17490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA174AC(uint64_t *a1, void *a2)
{
  id *v3;
  id v4;
  const char *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 8);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend__lockedHandleMemoryFetchOfItem_pcsData_forOperation_options_fetchCreator_withCompletionHandler_(WeakRetained, v5, a1[4], v4, a1[5], a1[9], a1[6], a1[7]);

}

void sub_1BEA17664(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  int8x16_t v23;
  _QWORD aBlock[4];
  id v25;
  int8x16_t v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v17 = v2;
    objc_msgSend_operationID(v15, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEA15324(*(_QWORD *)(a1 + 64), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v29 = v16;
    v30 = 2114;
    v31 = v20;
    v32 = 2114;
    v33 = v22;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Fetching PCS for record %@ for operation %{public}@ with options %{public}@", buf, 0x20u);

  }
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEA17858;
  aBlock[3] = &unk_1E782ED58;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v25 = v6;
  v27 = v7;
  v23 = *(int8x16_t *)(a1 + 40);
  v8 = (id)v23.i64[0];
  v26 = vextq_s8(v23, v23, 8uLL);
  v9 = _Block_copy(aBlock);
  v10 = *(void **)(a1 + 48);
  objc_msgSend_recordMemoryCache(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__lockedFetchPCSForItem_memoryCache_forOperation_options_fetchCreator_withCompletionHandler_(v10, v14, (uint64_t)v5, v13, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), v9, *(_QWORD *)(a1 + 56));

}

void sub_1BEA17858(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v3 = a2;
  v10 = (id)objc_opt_new();
  objc_msgSend_setItemID_(v10, v4, a1[4]);
  objc_msgSend_setCache_(v10, v5, a1[5]);
  objc_msgSend_setOptions_(v10, v6, a1[7]);
  v7 = (void *)a1[6];
  v8 = objc_opt_class();
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v7, v9, v8, v10, v3);

}

void sub_1BEA17A44(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  int8x16_t v23;
  _QWORD aBlock[4];
  id v25;
  int8x16_t v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v17 = v2;
    objc_msgSend_operationID(v15, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEA15324(*(_QWORD *)(a1 + 64), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v29 = v16;
    v30 = 2114;
    v31 = v20;
    v32 = 2114;
    v33 = v22;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Fetching PCS for zone %@ for operation %{public}@ with options %{public}@", buf, 0x20u);

  }
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEA17C38;
  aBlock[3] = &unk_1E782ED58;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v25 = v6;
  v27 = v7;
  v23 = *(int8x16_t *)(a1 + 40);
  v8 = (id)v23.i64[0];
  v26 = vextq_s8(v23, v23, 8uLL);
  v9 = _Block_copy(aBlock);
  v10 = *(void **)(a1 + 48);
  objc_msgSend_zoneMemoryCache(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__lockedFetchPCSForItem_memoryCache_forOperation_options_fetchCreator_withCompletionHandler_(v10, v14, (uint64_t)v5, v13, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), v9, *(_QWORD *)(a1 + 56));

}

void sub_1BEA17C38(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v3 = a2;
  v10 = (id)objc_opt_new();
  objc_msgSend_setItemID_(v10, v4, a1[4]);
  objc_msgSend_setCache_(v10, v5, a1[5]);
  objc_msgSend_setOptions_(v10, v6, a1[7]);
  v7 = (void *)a1[6];
  v8 = objc_opt_class();
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v7, v9, v8, v10, v3);

}

void sub_1BEA17E24(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  int8x16_t v23;
  _QWORD aBlock[4];
  id v25;
  int8x16_t v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v17 = v2;
    objc_msgSend_operationID(v15, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BEA15324(*(_QWORD *)(a1 + 64), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v29 = v16;
    v30 = 2114;
    v31 = v20;
    v32 = 2114;
    v33 = v22;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Fetching PCS for share %@ for operation %{public}@ with options %{public}@", buf, 0x20u);

  }
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEA18018;
  aBlock[3] = &unk_1E782ED58;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v25 = v6;
  v27 = v7;
  v23 = *(int8x16_t *)(a1 + 40);
  v8 = (id)v23.i64[0];
  v26 = vextq_s8(v23, v23, 8uLL);
  v9 = _Block_copy(aBlock);
  v10 = *(void **)(a1 + 48);
  objc_msgSend_shareMemoryCache(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__lockedFetchPCSForItem_memoryCache_forOperation_options_fetchCreator_withCompletionHandler_(v10, v14, (uint64_t)v5, v13, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), v9, *(_QWORD *)(a1 + 56));

}

void sub_1BEA18018(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v3 = a2;
  v10 = (id)objc_opt_new();
  objc_msgSend_setItemID_(v10, v4, a1[4]);
  objc_msgSend_setCache_(v10, v5, a1[5]);
  objc_msgSend_setOptions_(v10, v6, a1[7]);
  v7 = (void *)a1[6];
  v8 = objc_opt_class();
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v7, v9, v8, v10, v3);

}

void sub_1BEA18220(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  _BYTE *v27;
  _QWORD v28[4];
  NSObject *v29;
  id v30;
  id v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD v34[4];
  NSObject *v35;
  _BYTE buf[24];
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = dispatch_group_create();
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_QWORD *)(a1 + 40))
    objc_msgSend__lockedInvalidateAllOutstandingPCSFetchesForItemIDString_databaseScope_(*(void **)(a1 + 48), v5, (uint64_t)v6, *(_QWORD *)(a1 + 64));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v6;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Setting record PCS data %@ for %@ on our in-memory cache", buf, 0x16u);
  }
  dispatch_group_enter(v2);
  objc_msgSend_recordMemoryCache(*(void **)(a1 + 48), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = sub_1BEA18534;
  v34[3] = &unk_1E782EDA8;
  v14 = v2;
  v35 = v14;
  objc_msgSend_setPCSData_forItemID_databaseScope_withCompletionHandler_(v10, v15, v11, v6, v12, v34);

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v37 = sub_1BE9BAF28;
  v38 = sub_1BE9BAD48;
  v39 = 0;
  dispatch_group_enter(v14);
  v16 = *(void **)(a1 + 48);
  v28[0] = v13;
  v28[1] = 3221225472;
  v28[2] = sub_1BEA1853C;
  v28[3] = &unk_1E782EDD0;
  v32 = buf;
  v17 = v14;
  v29 = v17;
  v30 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 64);
  v31 = v18;
  v33 = v19;
  objc_msgSend_getSQLCache_(v16, v20, (uint64_t)v28);
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 48), v21, v22);
    v23 = objc_claimAutoreleasedReturnValue();
    v25[0] = v13;
    v25[1] = 3221225472;
    v25[2] = sub_1BEA18658;
    v25[3] = &unk_1E782ECB8;
    v26 = *(id *)(a1 + 56);
    v27 = buf;
    dispatch_group_notify(v17, v23, v25);

  }
  _Block_object_dispose(buf, 8);

}

void sub_1BEA18514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA18534(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA1853C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;

  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1BEA1860C;
    v11[3] = &unk_1E782EB60;
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 56);
    v12 = *(id *)(a1 + 32);
    objc_msgSend_setRecordPCSData_forRecordWithID_databaseScope_withCompletionHandler_(a2, v10, v8, v7, v9, v11);

  }
}

void sub_1BEA1860C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1BEA18658(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1BEA187E4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  _QWORD v27[4];
  id v28;
  _BYTE *v29;
  _QWORD v30[4];
  NSObject *v31;
  id v32;
  id v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD v36[4];
  NSObject *v37;
  _BYTE buf[24];
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = dispatch_group_create();
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_QWORD *)(a1 + 40))
    objc_msgSend__lockedInvalidateAllOutstandingPCSFetchesForItemIDString_databaseScope_(*(void **)(a1 + 48), v5, (uint64_t)v6, *(_QWORD *)(a1 + 64));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a1 + 40);
    v25 = v7;
    CKDatabaseScopeString();
    v26 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2112;
    v39 = v26;
    _os_log_debug_impl(&dword_1BE990000, v25, OS_LOG_TYPE_DEBUG, "Setting zone PCS data %@ for %{public}@ on our in-memory cache in scope %@", buf, 0x20u);

  }
  dispatch_group_enter(v2);
  objc_msgSend_zoneMemoryCache(*(void **)(a1 + 48), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = sub_1BEA18B28;
  v36[3] = &unk_1E782EDA8;
  v14 = v2;
  v37 = v14;
  objc_msgSend_setPCSData_forItemID_databaseScope_withCompletionHandler_(v10, v15, v11, v6, v12, v36);

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v39 = sub_1BE9BAF28;
  v40 = sub_1BE9BAD48;
  v41 = 0;
  dispatch_group_enter(v14);
  v16 = *(void **)(a1 + 48);
  v30[0] = v13;
  v30[1] = 3221225472;
  v30[2] = sub_1BEA18B30;
  v30[3] = &unk_1E782EDD0;
  v34 = buf;
  v17 = v14;
  v31 = v17;
  v32 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 64);
  v33 = v18;
  v35 = v19;
  objc_msgSend_getSQLCache_(v16, v20, (uint64_t)v30);
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 48), v21, v22);
    v23 = objc_claimAutoreleasedReturnValue();
    v27[0] = v13;
    v27[1] = 3221225472;
    v27[2] = sub_1BEA18C4C;
    v27[3] = &unk_1E782ECB8;
    v28 = *(id *)(a1 + 56);
    v29 = buf;
    dispatch_group_notify(v17, v23, v27);

  }
  _Block_object_dispose(buf, 8);

}

void sub_1BEA18B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA18B28(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA18B30(uint64_t a1, void *a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;

  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1BEA18C00;
    v11[3] = &unk_1E782EB60;
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 56);
    v12 = *(id *)(a1 + 32);
    objc_msgSend_setZonePCSData_forZoneWithID_databaseScope_withCompletionHandler_(a2, v10, v8, v7, v9, v11);

  }
}

void sub_1BEA18C00(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1BEA18C4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1BEA18DD8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD block[4];
  id v26;
  _BYTE *v27;
  _QWORD v28[4];
  NSObject *v29;
  id v30;
  id v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD v34[4];
  NSObject *v35;
  _BYTE *v36;
  _BYTE buf[24];
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = dispatch_group_create();
  objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_QWORD *)(a1 + 40))
    objc_msgSend__lockedInvalidateAllOutstandingPCSFetchesForItemIDString_databaseScope_(*(void **)(a1 + 48), v5, (uint64_t)v6, *(_QWORD *)(a1 + 64));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v6;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Setting share PCS data %@ for %{public}@ on our in-memory cache", buf, 0x16u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v38 = sub_1BE9BAF28;
  v39 = sub_1BE9BAD48;
  v40 = 0;
  dispatch_group_enter(v2);
  objc_msgSend_shareMemoryCache(*(void **)(a1 + 48), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 40);
  v12 = MEMORY[0x1E0C809B0];
  v13 = *(_QWORD *)(a1 + 64);
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = sub_1BEA190E8;
  v34[3] = &unk_1E782EB60;
  v36 = buf;
  v14 = v2;
  v35 = v14;
  objc_msgSend_setPCSData_forItemID_databaseScope_withCompletionHandler_(v10, v15, v11, v6, v13, v34);

  dispatch_group_enter(v14);
  v16 = *(void **)(a1 + 48);
  v28[0] = v12;
  v28[1] = 3221225472;
  v28[2] = sub_1BEA19134;
  v28[3] = &unk_1E782EDD0;
  v32 = buf;
  v17 = v14;
  v29 = v17;
  v30 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 64);
  v31 = v18;
  v33 = v19;
  objc_msgSend_getSQLCache_(v16, v20, (uint64_t)v28);
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 48), v21, v22);
    v23 = objc_claimAutoreleasedReturnValue();
    block[0] = v12;
    block[1] = 3221225472;
    block[2] = sub_1BEA19250;
    block[3] = &unk_1E782ECB8;
    v26 = *(id *)(a1 + 56);
    v27 = buf;
    dispatch_group_notify(v17, v23, block);

  }
  _Block_object_dispose(buf, 8);

}

void sub_1BEA190C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA190E8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEA19134(uint64_t a1, void *a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;

  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1BEA19204;
    v11[3] = &unk_1E782EB60;
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 56);
    v12 = *(id *)(a1 + 32);
    objc_msgSend_setSharePCSData_forShareWithID_databaseScope_withCompletionHandler_(a2, v10, v8, v7, v9, v11);

  }
}

void sub_1BEA19204(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1BEA19250(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1BEA196F0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  dispatch_semaphore_t v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  _QWORD v21[4];
  id v22;
  dispatch_semaphore_t v23;

  objc_msgSend_zoneMemoryCache(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v4, v5, v6);

  objc_msgSend_recordMemoryCache(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v9, v10, v11);

  objc_msgSend_shareMemoryCache(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v14, v15, v16);

  v17 = dispatch_semaphore_create(0);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BEA197DC;
  v21[3] = &unk_1E782EDF8;
  v18 = *(void **)(a1 + 32);
  v22 = *(id *)(a1 + 40);
  v23 = v17;
  v19 = v17;
  objc_msgSend_getSQLCache_(v18, v20, (uint64_t)v21);
  dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);

}

intptr_t sub_1BEA197DC(uint64_t a1, void *a2)
{
  objc_msgSend_removePCSDataForItemsInZoneWithID_withCompletionHandler_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1BEA198A4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  dispatch_semaphore_t v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  _QWORD v21[4];
  id v22;
  dispatch_semaphore_t v23;

  objc_msgSend_zoneMemoryCache(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v4, v5, v6);

  objc_msgSend_recordMemoryCache(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v9, v10, v11);

  objc_msgSend_shareMemoryCache(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v14, v15, v16);

  v17 = dispatch_semaphore_create(0);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BEA19990;
  v21[3] = &unk_1E782EDF8;
  v18 = *(void **)(a1 + 32);
  v22 = *(id *)(a1 + 40);
  v23 = v17;
  v19 = v17;
  objc_msgSend_getSQLCache_(v18, v20, (uint64_t)v21);
  dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);

}

intptr_t sub_1BEA19990(uint64_t a1, void *a2)
{
  objc_msgSend_removePCSDataForItemsInShareWithID_withCompletionHandler_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1BEA19B30(void **a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  int hasStatusToReport;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  const char *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  void *v74;
  const char *v75;
  void *v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  void *v81;
  const char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  objc_msgSend_zoneMemoryCache(a1[4], a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  hasStatusToReport = objc_msgSend_hasStatusToReport(v4, v5, v6);

  if (hasStatusToReport)
  {
    objc_msgSend_addObject_(a1[5], v8, (uint64_t)CFSTR("\tIn-memory zone cache:"));
    v10 = a1[5];
    objc_msgSend_zoneMemoryCache(a1[4], v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKStatusReportArray(v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v10, v17, (uint64_t)v16);

  }
  objc_msgSend_recordMemoryCache(a1[4], v8, v9);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_hasStatusToReport(v18, v19, v20);

  if (v21)
  {
    objc_msgSend_addObject_(a1[5], v22, (uint64_t)CFSTR("\tIn-memory record cache:"));
    v24 = a1[5];
    objc_msgSend_recordMemoryCache(a1[4], v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKStatusReportArray(v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v24, v31, (uint64_t)v30);

  }
  objc_msgSend_shareMemoryCache(a1[4], v22, v23);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_hasStatusToReport(v32, v33, v34);

  if (v35)
  {
    objc_msgSend_addObject_(a1[5], v36, (uint64_t)CFSTR("\tIn-memory share cache:"));
    v38 = a1[5];
    objc_msgSend_shareMemoryCache(a1[4], v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKStatusReportArray(v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v38, v45, (uint64_t)v44);

  }
  if (objc_msgSend_hasStatusToReport(a1[6], v36, v37))
  {
    objc_msgSend_addObject_(a1[5], v46, (uint64_t)CFSTR("\tSQL cache:"));
    v48 = a1[5];
    objc_msgSend_CKStatusReportArray(a1[6], v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v48, v52, (uint64_t)v51);

  }
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  objc_msgSend_outstandingFetches(a1[4], v46, v47);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v53, v54, v55);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v57, (uint64_t)&v83, v87, 16);
  if (!v58)
    goto LABEL_18;
  v61 = v58;
  v62 = 0;
  v63 = *(_QWORD *)v84;
  do
  {
    for (i = 0; i != v61; ++i)
    {
      if (*(_QWORD *)v84 != v63)
        objc_enumerationMutation(v56);
      v62 += objc_msgSend_count(*(void **)(*((_QWORD *)&v83 + 1) + 8 * i), v59, v60);
    }
    v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v59, (uint64_t)&v83, v87, 16);
  }
  while (v61);

  if (v62)
  {
    v67 = (void *)MEMORY[0x1E0CB3940];
    v68 = a1[5];
    objc_msgSend_outstandingFetches(a1[4], v65, v66);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = objc_msgSend_count(v69, v70, v71);
    objc_msgSend_stringWithFormat_(v67, v73, (uint64_t)CFSTR("\t%lu outstanding fetch requests for %lu records"), v62, v72);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v68, v75, (uint64_t)v74);

    v76 = (void *)MEMORY[0x1E0CB3940];
    v77 = a1[5];
    objc_msgSend_outstandingFetches(a1[4], v78, v79);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v76, v80, (uint64_t)CFSTR("\t\t%@"), v56);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v77, v82, (uint64_t)v81);

LABEL_18:
  }
}

void sub_1BEA19FB8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  dispatch_semaphore_t v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  _QWORD v22[4];
  dispatch_semaphore_t v23;
  uint8_t buf[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Clearing all PCS caches", buf, 2u);
  }
  objc_msgSend_zoneMemoryCache(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v5, v6, v7);

  objc_msgSend_recordMemoryCache(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v10, v11, v12);

  objc_msgSend_shareMemoryCache(*(void **)(a1 + 32), v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearCache(v15, v16, v17);

  v18 = dispatch_semaphore_create(0);
  v19 = *(void **)(a1 + 32);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1BEA1A104;
  v22[3] = &unk_1E782EE48;
  v23 = v18;
  v20 = v18;
  objc_msgSend_getSQLCache_(v19, v21, (uint64_t)v22);
  dispatch_semaphore_wait(v20, 0xFFFFFFFFFFFFFFFFLL);

}

intptr_t sub_1BEA1A104(uint64_t a1, void *a2, uint64_t a3)
{
  objc_msgSend_clearCache(a2, (const char *)a2, a3);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1BEA1A364(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_clearInvalidatedCacheEntriesWithSkipZonePCS_completionHandler_, *(unsigned __int8 *)(a1 + 40));
}

void sub_1BEA1A39C()
{
  CKDXPCConnectionManager *v0;
  const char *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;

  v0 = [CKDXPCConnectionManager alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2);
  v4 = (void *)qword_1ED7026E0;
  qword_1ED7026E0 = inited;

}

void sub_1BEA1A6F0(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  id v4;

  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__dumpStatusReportToFileHandle_(v4, v3, 0);

}

void sub_1BEA1A728(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v3;
  id v4;

  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_statusReportWithCompletionHandler_(v4, v3, 0);

}

_DWORD *sub_1BEA1A760(uint64_t a1, uint64_t a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  _DWORD *v11;

  if (*(_DWORD *)(a2 + 16) == 1)
    return 0;
  v3 = (void *)MEMORY[0x1C3B83E24]();
  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKStatusReportArray(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = sub_1BEC0E6C4((uint64_t)v9, v10);

  objc_autoreleasePoolPop(v3);
  return v11;
}

void sub_1BEA1A970(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v3 = 138412290;
    v4 = WeakRetained;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Connection to client %@ was interrupted", (uint8_t *)&v3, 0xCu);
  }

}

void sub_1BEA1AA4C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  id WeakRetained;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  id v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, uint64_t);
  void *v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  uint8_t buf[4];
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v43 = WeakRetained;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Connection to client %@ was invalidated", buf, 0xCu);
  }
  v7 = (void *)MEMORY[0x1E0CB34C8];
  v8 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = sub_1BEA1ACFC;
  v39[3] = &unk_1E782EE20;
  v9 = WeakRetained;
  v40 = v9;
  v10 = v4;
  v41 = v10;
  objc_msgSend_blockOperationWithBlock_(v7, v11, (uint64_t)v39);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processScopedClientProxy(v9, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processBinaryName(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v12, v19, (uint64_t)v18);

  objc_msgSend_tearDownOperations(v10, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v22);
  objc_msgSend_tearDownOperations(v10, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v25, v26, (uint64_t)v12);

  objc_sync_exit(v22);
  objc_initWeak((id *)buf, v12);
  v33 = v8;
  v34 = 3221225472;
  v35 = sub_1BEA1AE4C;
  v36 = &unk_1E782EF60;
  v27 = v10;
  v37 = v27;
  objc_copyWeak(&v38, (id *)buf);
  objc_msgSend_setCompletionBlock_(v12, v28, (uint64_t)&v33);
  objc_msgSend_clientConnectionQueue(v27, v29, v30, v33, v34, v35, v36);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addOperation_(v31, v32, (uint64_t)v12);

  objc_destroyWeak(&v38);
  objc_destroyWeak((id *)buf);

}

void sub_1BEA1ACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA1ACFC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1C3B83E24]();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v14 = 138412290;
    v15 = v6;
    _os_log_impl(&dword_1BE990000, v3, OS_LOG_TYPE_INFO, "Client %@ has gone away", (uint8_t *)&v14, 0xCu);
  }
  objc_msgSend_invalidate(*(void **)(a1 + 32), v4, v5);
  objc_autoreleasePoolPop(v2);
  objc_msgSend_clientConnections(*(void **)(a1 + 40), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v9);
  objc_msgSend_clientConnections(*(void **)(a1 + 40), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v12, v13, *(_QWORD *)(a1 + 32));

  objc_sync_exit(v9);
}

void sub_1BEA1AE30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA1AE4C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;
  const char *v8;
  id obj;

  objc_msgSend_tearDownOperations(*(void **)(a1 + 32), a2, a3);
  obj = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  objc_msgSend_tearDownOperations(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_removeObject_(v6, v8, (uint64_t)WeakRetained);

  objc_sync_exit(obj);
}

void sub_1BEA1AEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEA1AF98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA1AFAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEA1B4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA1B52C(uint64_t a1, void *a2, BOOL *a3)
{
  uint64_t result;

  result = objc_msgSend_cachedEnvironment(a2, (const char *)a2, (uint64_t)a3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  *a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != -1;
  return result;
}

void sub_1BEA1B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA1BA78(uint64_t a1, const char *a2)
{
  return objc_msgSend__dumpStatusReportToFileHandle_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

void sub_1BEA1BB2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1BEA1BDA4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA1C2C0()
{
  void *v0;

  v0 = (void *)qword_1ED700888;
  qword_1ED700888 = (uint64_t)&unk_1E78AF578;

}

uint64_t sub_1BEA1C684(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  CKDPRequestedFields *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = (CKDPRequestedFields *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom() & 1) != 0)
          goto LABEL_35;
        goto LABEL_61;
      case 2u:
        v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v17, a2))
          goto LABEL_61;
        goto LABEL_35;
      case 3u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 48;
        goto LABEL_29;
      case 4u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
LABEL_29:
        v21 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_59;
      case 5u:
        v17 = objc_alloc_init(CKDPRecordRetrieveRequestRetrieveAssetURL);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (sub_1BEAEE720((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_61;
        goto LABEL_35;
      case 6u:
        v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (sub_1BEC1BD10((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_59:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_61:

        return 0;
      case 7u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_53:
        v34 = v24 != 0;
        v35 = 57;
        goto LABEL_58;
      case 8u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_57:
        v34 = v30 != 0;
        v35 = 56;
LABEL_58:
        *(_BYTE *)(a1 + v35) = v34;
        goto LABEL_59;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_59;
    }
  }
}

BOOL CKDPRequestOperationHeaderZoneAndShareUsageInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPSignedZoneUsage *v17;
  const char *v18;
  const char *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPSignedZoneUsage);
        objc_msgSend_addZoneUsage_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1BEC07930((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(CKDPSignedShareUsage);
    objc_msgSend_addShareUsage_(a1, v19, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (sub_1BEC67284((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA1E5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA1E5F8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEA1E644(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  const char *v6;
  __int128 v7;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEA1E6DC;
  v8[3] = &unk_1E782F088;
  v10 = *(_QWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 48);
  v5 = (id)v7;
  v9 = v7;
  objc_msgSend_getFileMetadataWithFileHandle_openInfo_reply_(a2, v6, v3, v4, v8);

}

void sub_1BEA1E6DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1BEA1E7F0(uint64_t a1, void *a2)
{
  return objc_msgSend_handleSignificantIssueBehavior_reason_(a2, (const char *)a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

BOOL sub_1BEA1EF64(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPMergeableValueIdentifier *v17;
  const char *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && sub_1BEAE7D18((uint64_t)v17, a2))
          goto LABEL_35;
        goto LABEL_39;
      case 2u:
        v17 = (CKDPMergeableValueIdentifier *)objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
          goto LABEL_39;
        goto LABEL_35;
      case 3u:
        v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_35;
      case 5u:
        v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addDeltas_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_35;
      case 6u:
        v17 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_36;
    }
  }
}

void sub_1BEA1FB00(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_weakObjectsHashTable(MEMORY[0x1E0CB3690], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED7026F0;
  qword_1ED7026F0 = v3;

}

void sub_1BEA1FB6C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_weakObjectsHashTable(MEMORY[0x1E0CB3690], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED702700;
  qword_1ED702700 = v3;

}

void sub_1BEA1FD74()
{
  dispatch_workloop_t v0;
  void *v1;

  v0 = dispatch_workloop_create("com.apple.cloudkit.accountStatus");
  v1 = (void *)qword_1ED702710;
  qword_1ED702710 = (uint64_t)v0;

}

void sub_1BEA1FD9C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED702728;
  qword_1ED702728 = v3;

}

void sub_1BEA1FDC8(uint64_t a1, void *a2, int a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  int isEqualToString;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    if (a3)
    {
      objc_msgSend_accountOrNil(WeakRetained, v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v10;
      if (v10)
      {
        objc_msgSend_accountID(v10, v11, v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v5, v15, (uint64_t)v14);

        if (isEqualToString)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v17 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
          {
            v20 = 134218242;
            v21 = v9;
            v22 = 2112;
            v23 = v5;
            _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "Container %p clearing caches for deletion of account %@", (uint8_t *)&v20, 0x16u);
          }
          objc_msgSend__clearCaches(v9, v18, v19);
        }
      }

    }
    objc_msgSend__reloadAccount_(v9, v7, 1);
  }

}

uint64_t sub_1BEA20854(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_clearPCSCaches(*(void **)(a1 + 32), a2, a3);
}

void sub_1BEA20DDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)*MEMORY[0x1E0C952F8];
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v4);
    v5 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v9 = 138412546;
      v10 = v6;
      v11 = 2112;
      v12 = v3;
      _os_log_error_impl(&dword_1BE990000, v5, OS_LOG_TYPE_ERROR, "Failed to set file attribution for %@: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v4);
    v7 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v8;
      _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Set file attribution for %@", (uint8_t *)&v9, 0xCu);
    }
  }

}

uint64_t sub_1BEA20F98(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_v1(a3, a2, (uint64_t)a3);
}

void sub_1BEA21308(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v8 = a3;
    v7 = objc_msgSend_environment(a2, v5, v6);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v7, v8);

  }
}

void sub_1BEA2136C(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend_baseURLForServerType_partitionType_(WeakRetained, v5, *(_QWORD *)(a1 + 48), 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = v7;
      v9 = 0;
    }
    else
    {
      v8 = 0;
      v9 = v10;
    }
    (*(void (**)(_QWORD, void *, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v8, v9);

  }
}

uint64_t sub_1BEA21730(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = *MEMORY[0x1E0C946B0];
  objc_msgSend_applicationBundleID(*(void **)(a1 + 32), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(v4, v9, v5, CFSTR("%@"), 0, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_isEqualToString_(v10, v11, (uint64_t)v3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = *MEMORY[0x1E0C952B0];
    v15 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v16 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v28 = v16;
      v29 = 2114;
      v30 = v3;
      v17 = "Allowing data repair container %{public}@ to set bundle identifier override on operation to '%{public}@'";
LABEL_12:
      _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, v17, buf, 0x16u);
    }
  }
  else if (objc_msgSend_length(*(void **)(a1 + 40), v12, v13)
         && objc_msgSend_hasPrefix_(v3, v18, *(_QWORD *)(a1 + 40)))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = *MEMORY[0x1E0C952B0];
    v15 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v28 = v19;
      v29 = 2114;
      v30 = v3;
      v17 = "Allowing %{public}@ to set bundle identifier override on operation to prefixed value '%{public}@'";
      goto LABEL_12;
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v20 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_FAULT))
    {
      v26 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v28 = v26;
      v29 = 2114;
      v30 = v3;
      _os_log_fault_impl(&dword_1BE990000, v20, OS_LOG_TYPE_FAULT, "Container %@ is not allowed to set bundle identifier override '%{public}@'", buf, 0x16u);
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v21, *MEMORY[0x1E0C947D8], 8, CFSTR("Container %@ is not allowed to set application bundle identifier override %@ without an entitlement"), *(_QWORD *)(a1 + 32), v3);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v24 = *(void **)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;

    v15 = 0;
  }

  return v15;
}

void sub_1BEA21C58()
{
  uint64_t v0;
  void *v1;
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  id v9;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ED702738;
  qword_1ED702738 = v0;

  objc_msgSend_setName_((void *)qword_1ED702738, v2, (uint64_t)CFSTR("com.apple.cloudkit.sharedThrottlingQueue"));
  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v3, v4);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_clientThrottleQueueWidth(v9, v5, v6);
  objc_msgSend_setMaxConcurrentOperationCount_((void *)qword_1ED702738, v8, v7);

}

void sub_1BEA21CCC(uint64_t a1, uint64_t a2, void *a3)
{
  id *v4;
  id v5;
  const char *v6;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__lockedHandleTCCEvent_authorizationRecord_(WeakRetained, v6, a2, v5);

}

void sub_1BEA22550(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char isLongLived;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend_completionBlock(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = sub_1BEA22720;
  v24[3] = &unk_1E782F3E8;
  v8 = v6;
  v25 = v8;
  objc_copyWeak(&v28, &location);
  v26 = *(id *)(a1 + 64);
  v27 = *(id *)(a1 + 72);
  objc_msgSend_setCompletionBlock_(*(void **)(a1 + 32), v9, (uint64_t)v24);
  isLongLived = objc_msgSend_isLongLived(*(void **)(a1 + 32), v10, v11);
  v15 = *(void **)(a1 + 40);
  if ((isLongLived & 1) != 0)
  {
    objc_msgSend_uncancellableOperationQueue(v15, v12, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v7;
    v19[1] = 3221225472;
    v19[2] = sub_1BEA227A8;
    v19[3] = &unk_1E782F430;
    v17 = *(void **)(a1 + 48);
    v19[4] = *(_QWORD *)(a1 + 40);
    v20 = v17;
    v21 = *(id *)(a1 + 32);
    v22 = *(id *)(a1 + 56);
    v23 = *(id *)(a1 + 72);
    objc_msgSend_addOperationWithBlock_(v16, v18, (uint64_t)v19);

  }
  else
  {
    objc_msgSend_addOperation_(v15, v12, *(_QWORD *)(a1 + 32));
  }

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

}

void sub_1BEA226F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA22720(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 40);
  v11 = WeakRetained;
  objc_msgSend_container(WeakRetained, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v7;
  v10 = *(_QWORD *)(a1 + 48);
  if (v4)
    objc_msgSend__handleCompletionForOperation_initialMessageReplyBlock_customCompletionBlock_(v7, v8, (uint64_t)v11, v10, *(_QWORD *)(a1 + 40));
  else
    objc_msgSend__handleCompletionForOperation_initialMessageReplyBlock_(v7, v8, (uint64_t)v11, v10);

}

void sub_1BEA227A8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  int v26;
  void *v27;
  const char *v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  const char *v42;
  void *v43;
  const char *v44;
  void *v45;
  CKDLongLivedOperationPersistedCallback *v46;
  const char *v47;
  void *isCompletionCallback;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  CKDLongLivedCallbackRelayOperation *v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  _QWORD v66[4];
  id v67;
  id v68;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfoCache(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationID(*(void **)(a1 + 40), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfoMetadataForOperationWithID_(v7, v11, (uint64_t)v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_retryNumber(v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_integerValue(v15, v16, v17);

  if (objc_msgSend_isOutstandingOperation(*(void **)(a1 + 40), v19, v20)
    && (!objc_msgSend_isOutstandingOperation(*(void **)(a1 + 40), v21, v22)
     || (objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v21, v22),
         v23 = (void *)objc_claimAutoreleasedReturnValue(),
         v26 = objc_msgSend_longlivedOperationMaxRetryCount(v23, v24, v25),
         v23,
         v18 <= v26)))
  {
    if (!v12)
    {
      objc_msgSend_operationID(*(void **)(a1 + 48), v21, v22);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v30 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        LODWORD(location[0]) = 138543362;
        *(id *)((char *)location + 4) = v29;
        _os_log_error_impl(&dword_1BE990000, v30, OS_LOG_TYPE_ERROR, "No cached metadata found for outstanding operation %{public}@. Finishing it with an error", (uint8_t *)location, 0xCu);
      }
      objc_msgSend_deviceContext(*(void **)(a1 + 32), v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationInfoCache(v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = *(_QWORD *)(a1 + 40);
      objc_msgSend_appContainerAccountTuple(*(void **)(a1 + 32), v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setOperationInfo_forOperationID_appContainerAccountTuple_(v36, v41, v37, v29, v40);

      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v42, *MEMORY[0x1E0C94B20], 1000, CFSTR("No cached metadata found for outstanding operation %@"), v29);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_invocationToFinishOperationWithInfo_withError_(MEMORY[0x1E0C99DB8], v44, *(_QWORD *)(a1 + 40), v43);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = [CKDLongLivedOperationPersistedCallback alloc];
      isCompletionCallback = (void *)objc_msgSend_initWithProtocol_invocation_isCompletionCallback_(v46, v47, *(_QWORD *)(a1 + 56), v45, 1);
      objc_msgSend_deviceContext(*(void **)(a1 + 32), v49, v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationInfoCache(v51, v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_archiveCallback_forOperationID_(v54, v55, (uint64_t)isCompletionCallback, v29);

    }
  }
  else
  {
    objc_msgSend_container(*(void **)(a1 + 48), v21, v22);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addOperation_(v27, v28, *(_QWORD *)(a1 + 48));

  }
  v56 = [CKDLongLivedCallbackRelayOperation alloc];
  v58 = (void *)objc_msgSend_initWithOperationInfo_container_(v56, v57, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  objc_msgSend_clientOperationCallbackProxy(v58, v59, v60);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_activate(v61, v62, v63);

  objc_initWeak(location, v58);
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3221225472;
  v66[2] = sub_1BEA22B68;
  v66[3] = &unk_1E782EC40;
  objc_copyWeak(&v68, location);
  v67 = *(id *)(a1 + 64);
  objc_msgSend_setCompletionBlock_(v58, v64, (uint64_t)v66);
  objc_msgSend_addOperation_(*(void **)(a1 + 32), v65, (uint64_t)v58);

  objc_destroyWeak(&v68);
  objc_destroyWeak(location);

}

void sub_1BEA22B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA22B68(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_container(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__handleCompletionForOperation_initialMessageReplyBlock_customCompletionBlock_(v4, v5, (uint64_t)WeakRetained, *(_QWORD *)(a1 + 32), &unk_1E782F408);

}

void sub_1BEA22CE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA22CFC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  char v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  char isOutstandingOperation;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  int isOperationAllowedIndependentlyInSyncBubble;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  int isCloudKitSupportOperation;
  const char *v68;
  uint64_t v69;
  CKDPlaceholderOperation *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  _QWORD v79[4];
  id v80;
  id location;
  uint8_t buf[4];
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  objc_initWeak(&location, *(id *)(a1 + 32));
  if (objc_msgSend_wantsRequestStatistics(*(void **)(a1 + 40), v2, v3))
  {
    v79[0] = MEMORY[0x1E0C809B0];
    v79[1] = 3221225472;
    v79[2] = sub_1BEA2314C;
    v79[3] = &unk_1E782F480;
    objc_copyWeak(&v80, &location);
    objc_msgSend_setRequestCompletedBlock_(*(void **)(a1 + 32), v6, (uint64_t)v79);
    objc_destroyWeak(&v80);
  }
  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 48), v4, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v7);
  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 48), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_containsObject_(v10, v11, *(_QWORD *)(a1 + 56));

  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 48), v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v15, v16, *(_QWORD *)(a1 + 56));

  objc_sync_exit(v7);
  if ((v12 & 1) != 0
    || (objc_msgSend_cancel(*(void **)(a1 + 32), v17, v18),
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v19, *MEMORY[0x1E0C94B20], 1, CFSTR("Operation %@ was cancelled"), *(_QWORD *)(a1 + 56)), (v21 = (id)objc_claimAutoreleasedReturnValue()) == 0))
  {
    v22 = *(void **)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 32);
    v78 = 0;
    objc_msgSend__isContainerAuthorizedForOperation_error_(v22, v17, v23, &v78);
    v21 = v78;
    if (!v21)
    {
      if (objc_msgSend_isLongLivedCallbackRelayOperation(*(void **)(a1 + 32), v17, v20))
      {
        objc_msgSend_processScopedClientProxy(*(void **)(a1 + 48), v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend_processIsAttached(v29, v30, v31))
        {
LABEL_15:

          goto LABEL_16;
        }
        isOutstandingOperation = objc_msgSend_isOutstandingOperation(*(void **)(a1 + 40), v32, v33);

        if ((isOutstandingOperation & 1) == 0)
        {
          objc_msgSend_deviceContext(*(void **)(a1 + 48), v27, v28);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_operationInfoCache(v35, v36, v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = *(_QWORD *)(a1 + 56);
          v40 = *(_QWORD *)(a1 + 40);
          objc_msgSend_appContainerAccountTuple(*(void **)(a1 + 48), v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setOperationInfo_forOperationID_appContainerAccountTuple_(v38, v44, v40, v39, v43);

          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v45 = *MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            v77 = *(_QWORD *)(a1 + 48);
            v76 = *(_QWORD *)(a1 + 56);
            *(_DWORD *)buf = 138543618;
            v83 = v76;
            v84 = 2112;
            v85 = v77;
            _os_log_debug_impl(&dword_1BE990000, v45, OS_LOG_TYPE_DEBUG, "Writing down long-lived operation %{public}@ for container: %@", buf, 0x16u);
          }
          objc_msgSend_clientOperationCallbackProxy(*(void **)(a1 + 32), v46, v47);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_handleLongLivedOperationDidPersist(v29, v48, v49);
          goto LABEL_15;
        }
      }
LABEL_16:
      if (objc_msgSend_isLongLived(*(void **)(a1 + 32), v27, v28))
      {
        if ((objc_msgSend_isLongLivedCallbackRelayOperation(*(void **)(a1 + 32), v50, v51) & 1) == 0)
        {
          objc_msgSend_ckOperationClassName(*(void **)(a1 + 40), v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerID(*(void **)(a1 + 48), v53, v54);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          isOperationAllowedIndependentlyInSyncBubble = _isOperationAllowedIndependentlyInSyncBubble(v52, v55);

          if (isOperationAllowedIndependentlyInSyncBubble)
            objc_msgSend_beginUserSyncTask(*(void **)(a1 + 32), v50, v51);
        }
      }
      objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, v50, v51);
      v21 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_usesBackgroundSession(*(void **)(a1 + 32), v57, v58))
      {
        objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 48), v59, v60);
        v61 = objc_claimAutoreleasedReturnValue();

        v21 = (id)v61;
      }
      objc_msgSend_entitlements(*(void **)(a1 + 48), v59, v60);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_hasCloudKitSupportServiceEntitlement(v62, v63, v64))
      {
        isCloudKitSupportOperation = objc_msgSend_isCloudKitSupportOperation(*(void **)(a1 + 32), v65, v66);

        if (!isCloudKitSupportOperation)
        {
LABEL_26:
          v70 = [CKDPlaceholderOperation alloc];
          v25 = (void *)objc_msgSend_initWithOperation_targetOperationQueue_(v70, v71, *(_QWORD *)(a1 + 32), v21);
          objc_msgSend_operationQueue(*(void **)(a1 + 48), v72, v73);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addOperation_(v74, v75, (uint64_t)v25);

          goto LABEL_27;
        }
        objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 48), v68, v69);
        v62 = v21;
        v21 = (id)objc_claimAutoreleasedReturnValue();
      }

      goto LABEL_26;
    }
  }
  v24 = *(void **)(a1 + 32);
  objc_msgSend_CKClientSuitableError(v21, v17, v20);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishWithError_(v24, v26, (uint64_t)v25);
LABEL_27:

  objc_destroyWeak(&location);
}

void sub_1BEA23104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2314C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id WeakRetained;

  if (a2)
  {
    v2 = (id *)(a1 + 32);
    v3 = a2;
    WeakRetained = objc_loadWeakRetained(v2);
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleRequestDidComplete_(v6, v7, (uint64_t)v3);

  }
}

void sub_1BEA23310(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  objc_msgSend_accountStatusWorkloop(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEA23398;
  v6[3] = &unk_1E782F4D0;
  v5 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  dispatch_async(v4, v6);

}

uint64_t sub_1BEA23398(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v11 = 138412290;
    v12 = v5;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Reloading account for %@", (uint8_t *)&v11, 0xCu);
  }
  objc_msgSend_sharedAccountStore(CKDAccountStore, v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invalidateCache(v6, v7, v8);

  objc_msgSend__reloadAccount_(*(void **)(a1 + 32), v9, 1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1BEA235F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA23618(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 40);
    objc_msgSend_error(WeakRetained, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, void *))(v7 + 16))(v7, 1, v8);

  }
  else
  {
    if (*(_QWORD *)(a1 + 56) == 1)
    {
      v9 = objc_msgSend_discoverable(WeakRetained, v5, v6);
      objc_msgSend__applicationPermissionStatusFromUserPrivacySetting_(*(void **)(a1 + 32), v10, v9);
    }
    else
    {
      objc_msgSend__applicationPermissionStatusFromUserPrivacySetting_(*(void **)(a1 + 32), v5, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1BEA2384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v21 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA2387C(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t i;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  int isEqual;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v1 = a1;
  v41 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v8 = *(_QWORD *)(v1 + 40);
    objc_msgSend_error(WeakRetained, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, _QWORD, void *))(v8 + 16))(v8, 1, 0, v9);
LABEL_16:

  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = WeakRetained;
    objc_msgSend_containerPrivacySettings(WeakRetained, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v36, v40, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v37;
      v14 = (id *)(v1 + 56);
      v34 = v1;
      while (2)
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v37 != v13)
            objc_enumerationMutation(v9);
          v16 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
          v17 = objc_loadWeakRetained(v14);
          objc_msgSend_containerID(v17, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerID(v16, v21, v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          isEqual = objc_msgSend_isEqual_(v20, v24, (uint64_t)v23);

          if (isEqual)
          {
            v28 = v34;
            if ((*(_BYTE *)(v34 + 64) & 1) != 0)
            {
              v30 = objc_msgSend_discoverable(v16, v26, v27) != 0;
              v29 = objc_msgSend_discoverable(v16, v31, v32);
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
            WeakRetained = v35;
            v33 = objc_msgSend__applicationPermissionStatusFromUserPrivacySetting_(*(void **)(v34 + 32), v26, v29, v34);
            (*(void (**)(_QWORD, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)(v28 + 40) + 16))(*(_QWORD *)(v28 + 40), v33, v30, 0);
            goto LABEL_16;
          }
        }
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v26, (uint64_t)&v36, v40, 16);
        v1 = v34;
        if (v12)
          continue;
        break;
      }
    }

    (*(void (**)(void))(*(_QWORD *)(v1 + 40) + 16))();
    WeakRetained = v35;
  }

}

void sub_1BEA23C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA23C28(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_error(WeakRetained, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    if (*(_BYTE *)(a1 + 48))
      v8 = 3;
    else
      v8 = 2;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v8, 0);
  }

}

void sub_1BEA23D48(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD block[4];
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[4];
  _QWORD v31[3];
  char v32;
  _QWORD v33[3];
  char v34;

  v5 = a3;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  v34 = 1;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2020000000;
  v32 = 1;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v30[3] = a2;
  v6 = dispatch_group_create();
  v7 = v6;
  v8 = MEMORY[0x1E0C809B0];
  if (!a2)
  {
    dispatch_group_enter(v6);
    v9 = *(void **)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v26[0] = v8;
    v26[1] = 3221225472;
    v26[2] = sub_1BEA23F34;
    v26[3] = &unk_1E782F5B0;
    v26[4] = v9;
    v28 = v31;
    v29 = v30;
    v27 = v7;
    objc_msgSend__globalStatusForApplicationPermission_completionHandler_(v9, v11, v10, v26);

  }
  CKGetGlobalQueue();
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = v8;
  block[1] = 3221225472;
  block[2] = sub_1BEA24140;
  block[3] = &unk_1E782F600;
  v24 = a2;
  v21 = v30;
  v13 = *(id *)(a1 + 40);
  v22 = v33;
  v14 = *(_QWORD *)(a1 + 32);
  v18 = v5;
  v19 = v14;
  v20 = v13;
  v15 = *(_QWORD *)(a1 + 48);
  v23 = v31;
  v25 = v15;
  v16 = v5;
  dispatch_group_notify(v7, v12, block);

  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(v33, 8);
}

void sub_1BEA23F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA23F34(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  const char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  CFUserNotificationRef v26;
  const char *v27;
  void *v28;
  _QWORD v29[3];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  if (a2 == 3)
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend_applicationDisplayName(*(void **)(a1 + 32), v7, v8);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      CKLocalizedString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      CKLocalizedString();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *MEMORY[0x1E0C9B810];
      v29[0] = *MEMORY[0x1E0C9B800];
      v29[1] = v12;
      v30[0] = v10;
      v30[1] = v11;
      v29[2] = *MEMORY[0x1E0C9B838];
      CKLocalizedString();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v30[2] = v13;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)v30, v29, 3, v28);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)objc_msgSend_mutableCopy(v15, v16, v17);

      objc_msgSend_applicationIcon(*(void **)(a1 + 32), v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        objc_msgSend_applicationIcon(*(void **)(a1 + 32), v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v18, v25, (uint64_t)v24, *MEMORY[0x1E0C9B848]);

      }
      v26 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, (CFDictionaryRef)v18);
      objc_msgSend_showUserNotification_withCompletionBlock_(MEMORY[0x1E0C95220], v27, (uint64_t)v26, &unk_1E782F588);
      if (v26)
        CFRelease(v26);

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEA24140(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL8 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  CFUserNotificationRef v34;
  void *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD v42[5];
  id v43;
  uint64_t v44;
  CFUserNotificationRef v45;
  _QWORD v46[4];
  _QWORD v47[4];
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    *(_DWORD *)buf = 67109376;
    v49 = v4;
    v50 = 1024;
    v51 = v5;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Permission status: %d (global: %d)", buf, 0xEu);
  }
  v6 = *(const char **)(a1 + 80);
  if ((unint64_t)(v6 - 2) >= 2)
  {
    if (v6 != (const char *)1)
    {
      v7 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      goto LABEL_11;
    }
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    return;
  }
  v7 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if (v6 == v7)
    goto LABEL_9;
LABEL_11:
  if (v7 == (const char *)2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  objc_msgSend_deviceContext(*(void **)(a1 + 40), v6, v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReference(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) != 0;
LABEL_21:
    objc_msgSend__setApplicationPermission_enabled_completionHandler_(*(void **)(a1 + 40), v12, *(_QWORD *)(a1 + 88), v16, *(_QWORD *)(a1 + 48));
    return;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v16 = 0;
    goto LABEL_21;
  }
  *(_DWORD *)buf = 0;
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
  {
    v14 = 0;
    v15 = 0;
LABEL_27:
    v39 = *(_QWORD *)(a1 + 48);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v12, *MEMORY[0x1E0C947D8], 1, CFSTR("Could not create a user notification %d"), v14);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, void *))(v39 + 16))(v39, 1, v40);

    goto LABEL_28;
  }
  objc_msgSend_applicationDisplayName(*(void **)(a1 + 40), v12, v13);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  CKLocalizedString();
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = *MEMORY[0x1E0C9B800];
  v47[0] = v17;
  v19 = *MEMORY[0x1E0C9B810];
  v46[0] = v18;
  v46[1] = v19;
  CKLocalizedString();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v47[1] = v20;
  v46[2] = *MEMORY[0x1E0C9B838];
  CKLocalizedString();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v47[2] = v21;
  v46[3] = *MEMORY[0x1E0C9B830];
  CKLocalizedString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v47[3] = v22;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v23, (uint64_t)v47, v46, 4, v41);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend_mutableCopy(v24, v25, v26);

  objc_msgSend_applicationIcon(*(void **)(a1 + 40), v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    objc_msgSend_applicationIcon(*(void **)(a1 + 40), v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v15, v33, (uint64_t)v32, *MEMORY[0x1E0C9B848]);

  }
  v34 = CFUserNotificationCreate(0, 0.0, 3uLL, (SInt32 *)buf, (CFDictionaryRef)v15);

  if (!v34)
  {
    v14 = *(unsigned int *)buf;
    goto LABEL_27;
  }
  v35 = (void *)MEMORY[0x1E0C95220];
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BEA24560;
  v42[3] = &unk_1E782F5D8;
  v36 = *(_QWORD *)(a1 + 88);
  v37 = *(void **)(a1 + 48);
  v42[4] = *(_QWORD *)(a1 + 40);
  v44 = v36;
  v43 = v37;
  v45 = v34;
  objc_msgSend_showUserNotification_withCompletionBlock_(v35, v38, (uint64_t)v34, v42);

LABEL_28:
}

void sub_1BEA24560(uint64_t a1, const char *a2, char a3)
{
  uint64_t v4;
  void *v5;

  if ((a3 & 3) == 1)
  {
    objc_msgSend__setApplicationPermission_enabled_completionHandler_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 40));
  }
  else if ((a3 & 3) != 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C947D8], 1, CFSTR("Could not create a user notification"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, 1, v5);

  }
  else
  {
    objc_msgSend__setApplicationPermission_enabled_completionHandler_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), 1, *(_QWORD *)(a1 + 40));
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

void sub_1BEA24604(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  objc_class *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  CKDOperationStatistics *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  id obj;

  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  objc_msgSend_invalidate(*(void **)(a1 + 32), a2, a3);
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_operationStatisticsByClassName(*(void **)(a1 + 40), v5, v6);
    obj = (id)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(obj);
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operationStatisticsByClassName(*(void **)(a1 + 40), v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v11, v12, (uint64_t)v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v13)
    {
      v15 = [CKDOperationStatistics alloc];
      v13 = (void *)objc_msgSend_initWithOperationClassName_(v15, v16, (uint64_t)v8);
      objc_msgSend_operationStatisticsByClassName(*(void **)(a1 + 40), v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v19, v20, (uint64_t)v13, v8);

    }
    objc_msgSend_pushStatisticsTo_(*(void **)(a1 + 48), v14, (uint64_t)v13);

    objc_sync_exit(obj);
  }
}

void sub_1BEA2471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEA24A40(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id v10;

  objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfoCache(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_outstandingOperationInfosForIDs_(v7, v8, *(_QWORD *)(a1 + 40));
  v10 = (id)objc_claimAutoreleasedReturnValue();

  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, id, _QWORD))(v9 + 16))(v9, v10, 0);

}

void sub_1BEA24B54(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationInfoCache(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appContainerAccountTuple(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allOutstandingOperationIDsForAppContainerAccountTuple_(v7, v11, (uint64_t)v10);
  v13 = (id)objc_claimAutoreleasedReturnValue();

  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(uint64_t, id, _QWORD))(v12 + 16))(v12, v13, 0);

}

void sub_1BEA24D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA24D24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending user identity to client for operation %{public}@ lookupInfo: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleUserIdentityDiscoveryForLookupInfo_userIdentity_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA24F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA24FBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v6;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending user identity to client for operation %{public}@ userIdentity: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleUserIdentityDiscovery_(v11, v12, (uint64_t)v6);

}

void sub_1BEA25230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA25250(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 32);
    v17 = v10;
    objc_msgSend_operationID(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v7;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Sending user identity to client for operation %{public}@ lookupInfo: %@", (uint8_t *)&v21, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleShareParticipantFetchForLookupInfo_shareParticipant_error_(v14, v15, (uint64_t)v7, v8, v9);

}

void sub_1BEA2553C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA2556C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543618;
    v31 = v29;
    v32 = 2112;
    v33 = v7;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending save completion to client for operation %{public}@ zoneID: %@", (uint8_t *)&v30, 0x16u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSaveForRecordZoneID_recordZone_error_(v23, v24, (uint64_t)v7, v8, v9);

}

void sub_1BEA25738(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending delete completion to client for operation %{public}@ zoneID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleDeleteForRecordZoneID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA259B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA259D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543618;
    v31 = v29;
    v32 = 2112;
    v33 = v8;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending fetch record zones progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v30, 0x16u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v7, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordZoneID_recordZone_error_(v23, v24, (uint64_t)v8, v7, v9);

}

void sub_1BEA25E18(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEA25E70()
{
  JUMPOUT(0x1BEA25E58);
}

void sub_1BEA25E78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-updated progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleChangeForRecordZoneID_(v8, v9, (uint64_t)v3);

}

void sub_1BEA25FB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-deleted progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleDeleteForRecordZoneID_(v8, v9, (uint64_t)v3);

}

void sub_1BEA260F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-purged progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handlePurgeForRecordZoneID_(v8, v9, (uint64_t)v3);

}

void sub_1BEA26238(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-delete-due-to-encrypted-data-reset progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleEncryptedDataResetForRecordZoneID_(v8, v9, (uint64_t)v3);

}

void sub_1BEA26378(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id WeakRetained;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a4;
  v11 = a5;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v12 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v18 = *(void **)(a1 + 32);
    v19 = v12;
    objc_msgSend_operationID(v18, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543618;
    v24 = v22;
    v25 = 2112;
    v26 = v10;
    _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ error: %@", (uint8_t *)&v23, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleChangeSetCompletionWithServerChangeToken_databaseChangesStatus_error_reply_(v16, v17, (uint64_t)v9, a3, v10, v11);

}

void sub_1BEA26614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA26634(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id WeakRetained;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v14 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v22 = *(void **)(a1 + 32);
    v23 = v14;
    objc_msgSend_operationID(v22, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543874;
    v28 = v26;
    v29 = 2112;
    v30 = v9;
    v31 = 2112;
    v32 = v10;
    _os_log_debug_impl(&dword_1BE990000, v23, OS_LOG_TYPE_DEBUG, "Sending supported device capability check record zones progress to client for operation %{public}@ zoneID: %@ capabilitySet: %@", (uint8_t *)&v27, 0x20u);

  }
  objc_msgSend_makeClientResult(v12, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSupportedDeviceCapabilityCheckResultForRecordZoneID_capabilitySet_result_error_(v20, v21, (uint64_t)v9, v10, v17, v11);

}

void sub_1BEA26924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA26C68(uint64_t a1, void *a2)
{
  void *v3;
  const char *v4;
  _QWORD v5[5];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1BEA26CDC;
  v5[3] = &unk_1E782F7E0;
  v3 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  objc_msgSend_enumerateContainersUsingBlock_(a2, v4, (uint64_t)v5);

}

void sub_1BEA26CDC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  NSObject *v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend_isEligibleForBroadcastingToContainer_(*(void **)(a1 + 32), v4, (uint64_t)v3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Found eligible container %@", (uint8_t *)&v6, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1BEA27000(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1BEA270BC;
  v6[3] = &unk_1E782F830;
  v7 = v3;
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 56);
  v10 = *(id *)(a1 + 48);
  v4 = v3;
  objc_msgSend_enumerateClientContainers_(v4, v5, (uint64_t)v6);

}

void sub_1BEA270BC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v15 = v3;
    v16 = 2112;
    v17 = v11;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Broadcasting share update to client container %@ for container: %@", buf, 0x16u);
  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 56);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BEA27220;
  v12[3] = &unk_1E782EDA8;
  v13 = v3;
  v9 = v3;
  objc_msgSend_handleSharingUIUpdatedShare_recordID_isDeleted_error_reply_(v9, v10, v5, v6, v7, v8, v12);

}

void sub_1BEA27220(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_error_impl(&dword_1BE990000, v4, OS_LOG_TYPE_ERROR, "Error broadcasting share update to client container %@: %@", (uint8_t *)&v6, 0x16u);
    }
  }

}

void sub_1BEA275B4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEA2760C()
{
  JUMPOUT(0x1BEA275F4);
}

void sub_1BEA27614(uint64_t a1, void *a2, double a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  int v17;
  double v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v12 = *(void **)(a1 + 32);
    v13 = v6;
    objc_msgSend_operationID(v12, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 134218242;
    v18 = a3;
    v19 = 2114;
    v20 = v16;
    _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Sending record save progress %lf to client for operation %{public}@", (uint8_t *)&v17, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordModificationForRecordID_didProgress_(v10, v11, (uint64_t)v5, a3);

}

void sub_1BEA27764(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending records in flight progress to client for operation %{public}@ with recordIDs: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordIDsInFlight_reply_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA278C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id WeakRetained;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  int shouldOnlySaveAssetContent;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  void *ExportedRawCompact;
  const char *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  char v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  const char *v79;
  void *v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  int v85;
  void *v86;
  __int16 v87;
  id v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v14 = (void *)objc_opt_new();
  objc_msgSend_etag(v10, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEtag_(v14, v18, (uint64_t)v17);

  objc_msgSend_creationDate(v10, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCreationDate_(v14, v22, (uint64_t)v21);

  objc_msgSend_modificationDate(v10, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setModificationDate_(v14, v26, (uint64_t)v25);

  objc_msgSend_expirationDate(v10, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setExpirationDate_(v14, v30, (uint64_t)v29);

  objc_msgSend_setServerRecord_(v14, v31, (uint64_t)v12);
  objc_msgSend_container(WeakRetained, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entitlements(v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasProtectionDataEntitlement(v37, v38, v39))
  {

  }
  else
  {
    objc_msgSend_operationInfo(WeakRetained, v40, v41);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    shouldOnlySaveAssetContent = objc_msgSend_shouldOnlySaveAssetContent(v44, v45, v46);

    if (!shouldOnlySaveAssetContent)
      goto LABEL_6;
  }
  objc_msgSend_protectionData(v10, v42, v43);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setProtectionData_(v14, v49, (uint64_t)v48);

  if (objc_msgSend_signingPCSIdentity(v10, v50, v51))
  {
    objc_msgSend_signingPCSIdentity(v10, v42, v43);
    ExportedRawCompact = (void *)PCSIdentityCreateExportedRawCompact();
    objc_msgSend_setSigningPCSIdentityData_(v14, v53, (uint64_t)ExportedRawCompact);

  }
LABEL_6:
  objc_msgSend_container(WeakRetained, v42, v43);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v54, v55, v56);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v57, v58, v59))
  {
    v60 = CKIsPCSError();

    if ((v60 & 1) != 0)
      goto LABEL_11;
    objc_msgSend_fillOutPCSMetadataInfo(v10, v61, v62);
    objc_msgSend_pcsKeyID(v10, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPcsKeyID_(v14, v66, (uint64_t)v65);

    objc_msgSend_allPCSKeyIDs(v10, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAllPCSKeyIDs_(v14, v70, (uint64_t)v69);

    objc_msgSend_zoneishKeyID(v10, v71, v72);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setZoneishKeyID_(v14, v73, (uint64_t)v54);
  }
  else
  {

  }
LABEL_11:
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v74 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v80 = *(void **)(a1 + 32);
    v81 = v74;
    objc_msgSend_operationID(v80, v82, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = 138543618;
    v86 = v84;
    v87 = 2112;
    v88 = v9;
    _os_log_debug_impl(&dword_1BE990000, v81, OS_LOG_TYPE_DEBUG, "Sending record save completion to client for operation %{public}@ for recordID: %@", (uint8_t *)&v85, 0x16u);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v75, v76);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSaveForRecordID_recordMetadata_error_(v77, v78, (uint64_t)v9, v14, v11);

  objc_msgSend__broadcastUpdateIfNeededForRecord_recordXPCMetadata_recordID_isDeleted_error_(*(void **)(a1 + 40), v79, (uint64_t)v10, v14, v9, 0, v11);
}

void sub_1BEA27C68(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v14 = *(void **)(a1 + 32);
    v15 = v7;
    objc_msgSend_operationID(v14, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543618;
    v20 = v18;
    v21 = 2112;
    v22 = v5;
    _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Sending delete completion to client for operation %{public}@ for recordID: %@", (uint8_t *)&v19, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleDeleteForRecordID_error_(v11, v12, (uint64_t)v5, v6);

  objc_msgSend__broadcastUpdateIfNeededForRecord_recordXPCMetadata_recordID_isDeleted_error_(*(void **)(a1 + 40), v13, 0, 0, v5, 1, v6);
}

void sub_1BEA27DE0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, double a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id WeakRetained;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v19 = a3;
  v20 = a5;
  v21 = a10;
  v22 = a11;
  v23 = a12;
  v24 = a13;
  v25 = a14;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v26 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v35 = *(void **)(a1 + 32);
    v32 = v26;
    objc_msgSend_operationID(v35, v33, v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v42 = v36;
    v43 = 2112;
    v44 = v18;
    _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Sending upload completion to client for operation %{public}@ for recordID: %@", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordUploadForRecordID_recordKey_arrayIndex_signature_size_paddedFileSize_uploaded_uploadReceipt_uploadReceiptExpiration_wrappedAssetKey_clearAssetKey_referenceSignature_(v30, v31, (uint64_t)v18, v19, a4, v20, a6, a7, a9, a8, v21, v22, v23, v24);

}

void sub_1BEA28100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA28120(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  char v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  int v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_userRecord(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordID(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v12 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v26 = *(void **)(a1 + 32);
    v27 = v12;
    objc_msgSend_operationID(v26, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543874;
    v32 = v30;
    v33 = 2112;
    v34 = v8;
    v35 = 2112;
    v36 = v11;
    _os_log_debug_impl(&dword_1BE990000, v27, OS_LOG_TYPE_DEBUG, "Sending fetch completion to client for operation %{public}@ for recordID: %@ error: %@", (uint8_t *)&v31, 0x20u);

  }
  objc_msgSend_container(WeakRetained, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v18, v19, v20))
  {
    v21 = CKIsPCSError();

    if ((v21 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v5, v22, v23);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_record_error_(v24, v25, (uint64_t)v8, v5, v11);

}

void sub_1BEA284C4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEA28504(uint64_t a1, void *a2, double a3)
{
  id *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_didProgress_(v8, v9, (uint64_t)v5, a3);

}

void sub_1BEA2856C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v27 = *(void **)(a1 + 32);
    v28 = v7;
    objc_msgSend_operationID(v27, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138543618;
    v33 = v31;
    v34 = 2112;
    v35 = v5;
    _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "Sending record fetch command to client for operation %{public}@ for recordID: %@", (uint8_t *)&v32, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v12, (uint64_t)CFSTR("RecordKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v14, (uint64_t)CFSTR("ArrayIndex"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_integerValue(v15, v16, v17);
  objc_msgSend_objectForKeyedSubscript_(v6, v19, (uint64_t)CFSTR("Data"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v21, (uint64_t)CFSTR("Offset"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_unsignedLongLongValue(v22, v23, v24);
  objc_msgSend_handleAssetDataForRecordID_recordKey_arrayIndex_data_offset_(v11, v26, (uint64_t)v5, v13, v18, v20, v25);

}

void sub_1BEA28774(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543874;
    v31 = v29;
    v32 = 2112;
    v33 = v8;
    v34 = 2112;
    v35 = v9;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending record fetch completion to client for operation %{public}@ for recordID: %@ error: %@", (uint8_t *)&v30, 0x20u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v7, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_record_error_(v23, v24, (uint64_t)v8, v7, v9);

}

void sub_1BEA28C3C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEA28C94()
{
  JUMPOUT(0x1BEA28C7CLL);
}

void sub_1BEA28C9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  int v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v7, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = 138543618;
    v34 = v29;
    v35 = 2112;
    v36 = v32;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending record changed progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v33, 0x16u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleChangeForRecordID_record_error_(v23, v24, (uint64_t)v7, v8, v9);

}

void sub_1BEA28E7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending record deleted progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleDeleteForRecordID_recordType_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA28FD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v3, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v14;
    v20 = 2112;
    v21 = v17;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending zone attributes changed progress to client for operation %{public}@ for zoneID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleAttributesChangedForZone_(v8, v9, (uint64_t)v3);

}

void sub_1BEA29134(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id WeakRetained;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v22 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v31 = *(void **)(a1 + 32);
    v28 = v22;
    objc_msgSend_operationID(v31, v29, v30);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v32;
    v35 = 2112;
    v36 = v16;
    _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ for zoneID: %@", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleChangeSetCompletionForRecordZoneID_serverChangeToken_clientChangeTokenData_recordChangesStatus_hasPendingArchivedRecords_syncObligationZoneIDs_error_reply_(v26, v27, (uint64_t)v16, v17, v18, a5, a6, v19, v20, v21);

}

void sub_1BEA29304(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_hash(WeakRetained, v1, v2);
  kdebug_trace();

}

void sub_1BEA295A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 112));
  _Unwind_Resume(a1);
}

void sub_1BEA29604(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  int v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(v7, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = 138543618;
    v34 = v29;
    v35 = 2112;
    v36 = v32;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending record changed progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v33, 0x16u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleChangeForRecordID_record_error_(v23, v24, (uint64_t)v7, v8, v9);

}

void sub_1BEA297E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending record deleted progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleDeleteForRecordID_(v11, v12, (uint64_t)v5);

}

void sub_1BEA2993C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id WeakRetained;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  int v33;
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = v20;
  if (v19)
  {
    (*((void (**)(id, _QWORD))v20 + 2))(v20, 0);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v22 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v28 = *(void **)(a1 + 32);
      v29 = v22;
      objc_msgSend_operationID(v28, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = 138543618;
      v34 = v32;
      v35 = 2112;
      v36 = v15;
      _os_log_debug_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ for zoneID: %@", (uint8_t *)&v33, 0x16u);

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleChangeSetCompletionWithServerChangeToken_clientChangeTokenData_recordChangesStatus_reply_(v26, v27, (uint64_t)v16, v17, a5, v21);

  }
}

void sub_1BEA29B0C(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_hash(WeakRetained, v1, v2);
  kdebug_trace();

}

void sub_1BEA29B54(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  int v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v22 = v2;
    objc_msgSend_operationID(WeakRetained, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resultServerChangeToken(WeakRetained, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resultClientChangeTokenData(WeakRetained, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 138544130;
    v35 = v25;
    v36 = 2112;
    v37 = v28;
    v38 = 2112;
    v39 = v31;
    v40 = 2048;
    v41 = objc_msgSend_resultStatus(WeakRetained, v32, v33);
    _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with server change token %@, client change token date %@, record changes status %ld", (uint8_t *)&v34, 0x2Au);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resultServerChangeToken(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resultClientChangeTokenData(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_resultStatus(WeakRetained, v12, v13);
  objc_msgSend_operationMetrics(WeakRetained, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleOperationDidCompleteWithServerChangeToken_clientChangeTokenData_recordChangesStatus_metrics_error_(v5, v21, (uint64_t)v8, v11, v14, v17, v20);

}

void sub_1BEA29F24(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEA29F64(uint64_t a1, void *a2, double a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v6 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v12 = *(void **)(a1 + 32);
    v13 = v6;
    objc_msgSend_operationID(v12, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543362;
    v18 = v16;
    _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Sending record move progress to client for operation %{public}@", (uint8_t *)&v17, 0xCu);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordModificationForRecordID_didProgress_(v10, v11, (uint64_t)v5, a3);

}

void sub_1BEA2A0A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id WeakRetained;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  int hasProtectionDataEntitlement;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  char v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  void *v101;
  NSObject *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint8_t buf[4];
  void *v108;
  __int16 v109;
  id v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a5;
  v14 = a6;
  v106 = a1;
  v15 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v17 = (void *)objc_opt_new();
  v18 = (void *)objc_opt_new();
  objc_msgSend_etag(v12, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEtag_(v17, v22, (uint64_t)v21);

  objc_msgSend_creationDate(v12, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCreationDate_(v17, v26, (uint64_t)v25);

  objc_msgSend_modificationDate(v12, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setModificationDate_(v17, v30, (uint64_t)v29);

  objc_msgSend_setServerRecord_(v17, v31, (uint64_t)v15);
  objc_msgSend_etag(v13, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setEtag_(v18, v35, (uint64_t)v34);

  objc_msgSend_creationDate(v13, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCreationDate_(v18, v39, (uint64_t)v38);

  objc_msgSend_modificationDate(v13, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setModificationDate_(v18, v43, (uint64_t)v42);

  objc_msgSend_setServerRecord_(v18, v44, (uint64_t)v13);
  objc_msgSend_container(WeakRetained, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entitlements(v47, v48, v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v50, v51, v52);

  if (hasProtectionDataEntitlement)
  {
    objc_msgSend_protectionData(v12, v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setProtectionData_(v17, v57, (uint64_t)v56);

    objc_msgSend_protectionData(v13, v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setProtectionData_(v18, v61, (uint64_t)v60);

  }
  objc_msgSend_container(WeakRetained, v54, v55);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v62, v63, v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v65, v66, v67))
  {
    v68 = CKIsPCSError();

    if ((v68 & 1) != 0)
      goto LABEL_8;
    objc_msgSend_fillOutPCSMetadataInfo(v12, v69, v70);
    objc_msgSend_pcsKeyID(v12, v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPcsKeyID_(v17, v74, (uint64_t)v73);

    objc_msgSend_allPCSKeyIDs(v12, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAllPCSKeyIDs_(v17, v78, (uint64_t)v77);

    objc_msgSend_zoneishKeyID(v12, v79, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setZoneishKeyID_(v17, v82, (uint64_t)v81);

    objc_msgSend_fillOutPCSMetadataInfo(v13, v83, v84);
    objc_msgSend_pcsKeyID(v13, v85, v86);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPcsKeyID_(v18, v88, (uint64_t)v87);

    objc_msgSend_allPCSKeyIDs(v13, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAllPCSKeyIDs_(v18, v92, (uint64_t)v91);

    objc_msgSend_zoneishKeyID(v13, v93, v94);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setZoneishKeyID_(v18, v95, (uint64_t)v62);
  }
  else
  {

  }
LABEL_8:
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v96 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v101 = *(void **)(v106 + 32);
    v102 = v96;
    objc_msgSend_operationID(v101, v103, v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v108 = v105;
    v109 = 2112;
    v110 = v11;
    _os_log_debug_impl(&dword_1BE990000, v102, OS_LOG_TYPE_DEBUG, "Sending record move completion to client for operation %{public}@ for recordID: %@", buf, 0x16u);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v97, v98);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleMoveForSourceRecordID_destinationMetadata_moveMarkerMetadata_error_(v99, v100, (uint64_t)v11, v17, v18, v14);

}

void sub_1BEA2A4DC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, double a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id WeakRetained;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v19 = a3;
  v20 = a5;
  v21 = a10;
  v22 = a11;
  v23 = a12;
  v24 = a13;
  v25 = a14;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v26 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v35 = *(void **)(a1 + 32);
    v32 = v26;
    objc_msgSend_operationID(v35, v33, v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v42 = v36;
    v43 = 2112;
    v44 = v18;
    _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Sending upload completion to client for operation %{public}@ for recordID: %@", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordUploadForRecordID_recordKey_arrayIndex_signature_size_paddedFileSize_uploaded_uploadReceipt_uploadReceiptExpiration_wrappedAssetKey_clearAssetKey_referenceSignature_(v30, v31, (uint64_t)v18, v19, a4, v20, a6, a7, a9, a8, v21, v22, v23, v24);

}

void sub_1BEA2A8A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEA2A8DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 32);
    v17 = v10;
    objc_msgSend_operationID(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v8, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543618;
    v25 = v20;
    v26 = 2112;
    v27 = v23;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Sending record fetch completion for operation %{public}@ with record: %@", (uint8_t *)&v24, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleQueryDidFetchForRecordID_record_error_(v14, v15, (uint64_t)v7, v8, v9);

}

void sub_1BEA2AA68(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending query cursor update progress to client for operation %{public}@ with cursor: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleQueryDidFetchCursor_reply_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA2ABC4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = v2;
    objc_msgSend_operationID(WeakRetained, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resultsCursor(WeakRetained, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543618;
    v24 = v19;
    v25 = 2112;
    v26 = v22;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with cursor %@", (uint8_t *)&v23, 0x16u);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resultsCursor(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleOperationDidCompleteWithCursor_metrics_error_(v5, v15, (uint64_t)v8, v11, v14);

}

void sub_1BEA2AED4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEA2AF04(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending save completion to client for operation %{public}@ for subscription ID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSubscriptionSaveForSubscriptionID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA2B060(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending delete completion to client for operation %{public}@ for subscription ID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSubscriptionDeleteForSubscriptionID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA2B2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2B2F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 32);
    v17 = v10;
    objc_msgSend_operationID(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v8;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Sending fetch subscription progress to client for operation %{public}@ for subscription ID: %@", (uint8_t *)&v21, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSubscriptionFetchForSubscriptionID_subscription_error_(v14, v15, (uint64_t)v8, v7, v9);

}

void sub_1BEA2B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2B5A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 32);
    v17 = v10;
    objc_msgSend_operationID(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v7;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Sending accept share progress to client for operation %{public}@ for url: %@", (uint8_t *)&v21, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleShareAcceptanceForURL_share_error_(v14, v15, (uint64_t)v7, v8, v9);

}

void sub_1BEA2B830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2B850(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending decline share progress to client for operation %{public}@ for url: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleShareDeclineForURL_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA2BAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2BAE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending share access request progress to client for operation %{public}@ for url: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleShareAccessRequestForURL_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA2BD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2BD8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 32);
    v17 = v10;
    objc_msgSend_operationID(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v7;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Sending share metadata progress to client for operation %{public}@ for url: %@", (uint8_t *)&v21, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleShareMetadataFetchForURL_shareMetadata_error_(v14, v15, (uint64_t)v7, v8, v9);

}

void sub_1BEA2C018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2C038(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id WeakRetained;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v19 = *(void **)(a1 + 32);
    v20 = v13;
    objc_msgSend_operationID(v19, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543618;
    v25 = v23;
    v26 = 2112;
    v27 = v9;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Sending bundleIDs mapping progress to client for operation %{public}@ for url: %@", (uint8_t *)&v24, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleBundleIDsFetchedForURL_appBundleIDs_daemonBundleIDs_error_(v17, v18, (uint64_t)v9, v10, v11, v12);

}

void sub_1BEA2C2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA2C2E0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = v2;
    objc_msgSend_operationID(WeakRetained, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_webAuthToken(WeakRetained, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543618;
    v24 = v19;
    v25 = 2112;
    v26 = v22;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with web auth token %@", (uint8_t *)&v23, 0x16u);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_webAuthToken(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleOperationDidCompleteWithWebAuthToken_metrics_error_(v5, v15, (uint64_t)v8, v11, v14);

}

void sub_1BEA2C50C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  int v55;
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  if (!v4 || objc_msgSend_accountType(v4, v5, v6) == 1)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v5, *MEMORY[0x1E0C94B20], 1002, CFSTR("This requires an authenticated account"));
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, id))(v10 + 16))(v10, 0, 0, 0, v9);
    goto LABEL_16;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_primaryEmail(v7, v5, v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_formattedUsername(v7, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isAppleInternalInstall(v16, v17, v18) & 1) != 0)
    {
      objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerIdentifierToEmailOverrides(v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend_count(v24, v25, v26);

      if (!v27)
      {
LABEL_15:
        v45 = *(_QWORD *)(a1 + 40);
        objc_msgSend_fullName(v7, v28, v29);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *, id, void *, _QWORD))(v45 + 16))(v45, v46, v9, v13, 0);

LABEL_16:
        goto LABEL_17;
      }
      objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerIdentifierToEmailOverrides(v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(*(void **)(a1 + 32), v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerIdentifier(v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKey_(v33, v40, (uint64_t)v39);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_length(v16, v41, v42))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v43 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v47 = *(void **)(a1 + 32);
          v48 = v43;
          objc_msgSend_containerID(v47, v49, v50);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerIdentifier(v51, v52, v53);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = 138412546;
          v56 = v16;
          v57 = 2112;
          v58 = v54;
          _os_log_debug_impl(&dword_1BE990000, v48, OS_LOG_TYPE_DEBUG, "Returning override user email %@ for container %@", (uint8_t *)&v55, 0x16u);

        }
        v44 = v16;

        v9 = v44;
        v13 = v9;
      }
    }

    goto LABEL_15;
  }
LABEL_17:

}

void sub_1BEA2C914(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD block[5];

  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v4);
  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v7, v8, v9);

  objc_sync_exit(v4);
  objc_msgSend_cancellationQueue(*(void **)(a1 + 32), v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA2C9DC;
  block[3] = &unk_1E782EA40;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v12, block);

}

void sub_1BEA2C9C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA2C9DC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v37 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v44 = v37;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Cancelling all operations for %@", buf, 0xCu);
  }
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, v3, v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v38, v42, 16);
  if (v10)
  {
    v13 = v10;
    v14 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v39 != v14)
          objc_enumerationMutation(v8);
        v16 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend_container(v16, v11, v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 32);

        if (v17 == v18)
          objc_msgSend_cancel(v16, v11, v12);
      }
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v38, v42, 16);
    }
    while (v13);
  }

  objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 32), v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cancelAllOperations(v21, v22, v23);

  objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 32), v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cancelAllOperations(v26, v27, v28);

  objc_msgSend_operationQueue(*(void **)(a1 + 32), v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cancelAllOperations(v31, v32, v33);

  return objc_msgSend_cancelAllOperations(*(void **)(*(_QWORD *)(a1 + 32) + 392), v34, v35);
}

void sub_1BEA2CCB0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  _QWORD block[4];
  id v15;
  uint64_t v16;
  id v17;

  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v4);
  objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v7, v8, *(_QWORD *)(a1 + 40));

  objc_sync_exit(v4);
  objc_msgSend_cancellationQueue(*(void **)(a1 + 32), v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA2CDA4;
  block[3] = &unk_1E782F678;
  v12 = *(id *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v15 = v12;
  v16 = v13;
  v17 = *(id *)(a1 + 48);
  dispatch_async(v11, block);

}

void sub_1BEA2CD90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA2CDA4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  char isEqualToString;
  const char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  char v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  const char *v50;
  char v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  char v66;
  NSObject *v67;
  NSObject *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  NSObject *v77;
  const char *v78;
  _QWORD v79[5];
  NSObject *v80;
  id v81;
  _QWORD block[4];
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[128];
  _BYTE v101[128];
  _BYTE v102[128];
  _BYTE v103[128];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v96, v103, 16);
  if (v9)
  {
    v12 = v9;
    v13 = *(_QWORD *)v97;
LABEL_3:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v97 != v13)
        objc_enumerationMutation(v7);
      v15 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * v14);
      objc_msgSend_operationID(v15, v10, v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v16, v17, *(_QWORD *)(a1 + 32));

      if ((isEqualToString & 1) != 0)
        break;
      if (v12 == ++v14)
      {
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v96, v103, 16);
        if (v12)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v21 = v15;

    if (v21)
      goto LABEL_42;
  }
  else
  {
LABEL_9:

  }
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 40), v19, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v92, v102, 16);
  if (v27)
  {
    v30 = v27;
    v31 = *(_QWORD *)v93;
LABEL_13:
    v32 = 0;
    while (1)
    {
      if (*(_QWORD *)v93 != v31)
        objc_enumerationMutation(v25);
      v33 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * v32);
      objc_msgSend_operationID(v33, v28, v29);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend_isEqualToString_(v34, v35, *(_QWORD *)(a1 + 32));

      if ((v36 & 1) != 0)
        break;
      if (v30 == ++v32)
      {
        v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v92, v102, 16);
        if (v30)
          goto LABEL_13;
        goto LABEL_19;
      }
    }
    v21 = v33;

    if (v21)
      goto LABEL_42;
  }
  else
  {
LABEL_19:

  }
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 40), v19, v20);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v41, (uint64_t)&v88, v101, 16);
  if (v42)
  {
    v45 = v42;
    v46 = *(_QWORD *)v89;
LABEL_23:
    v47 = 0;
    while (1)
    {
      if (*(_QWORD *)v89 != v46)
        objc_enumerationMutation(v40);
      v48 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * v47);
      objc_msgSend_operationID(v48, v43, v44);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend_isEqualToString_(v49, v50, *(_QWORD *)(a1 + 32));

      if ((v51 & 1) != 0)
        break;
      if (v45 == ++v47)
      {
        v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v43, (uint64_t)&v88, v101, 16);
        if (v45)
          goto LABEL_23;
        goto LABEL_29;
      }
    }
    v21 = v48;

    if (v21)
      goto LABEL_42;
  }
  else
  {
LABEL_29:

  }
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  objc_msgSend_operationQueue(*(void **)(a1 + 40), v19, v20);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();

  v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v56, (uint64_t)&v84, v100, 16);
  if (v57)
  {
    v58 = v57;
    v59 = *(_QWORD *)v85;
LABEL_33:
    v60 = 0;
    while (1)
    {
      if (*(_QWORD *)v85 != v59)
        objc_enumerationMutation(v55);
      v61 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * v60);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend_operationID(v61, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = objc_msgSend_isEqualToString_(v64, v65, *(_QWORD *)(a1 + 32));

        if ((v66 & 1) != 0)
          break;
      }
      if (v58 == ++v60)
      {
        v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v62, (uint64_t)&v84, v100, 16);
        if (v58)
          goto LABEL_33;
        goto LABEL_40;
      }
    }
    v21 = v61;

    if (!v21)
      goto LABEL_43;
LABEL_42:
    objc_msgSend_cancel(v21, v19, v20);
  }
  else
  {
LABEL_40:

    v21 = 0;
  }
LABEL_43:
  v67 = dispatch_group_create();
  dispatch_group_enter(v67);
  CKGetGlobalQueue();
  v68 = objc_claimAutoreleasedReturnValue();
  v69 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA2D29C;
  block[3] = &unk_1E782EFD8;
  v83 = *(id *)(a1 + 48);
  dispatch_group_notify(v67, v68, block);

  objc_msgSend_processScopedClientProxy(*(void **)(a1 + 40), v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clientConnection(v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();

  v79[0] = v69;
  v79[1] = 3221225472;
  v79[2] = sub_1BEA2D2B0;
  v79[3] = &unk_1E782FBA0;
  v76 = *(void **)(a1 + 32);
  v79[4] = *(_QWORD *)(a1 + 40);
  v80 = v67;
  v81 = v76;
  v77 = v67;
  objc_msgSend_enumerateContainersWithOptions_usingBlock_(v75, v78, 4, v79);
  dispatch_group_leave(v77);

}

uint64_t sub_1BEA2D29C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1BEA2D2B0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  v6 = v3;
  if (*(id *)(a1 + 32) != v3)
  {
    objc_msgSend_processScopedClientProxy(v3, v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = sub_1BEA2D364;
      v10[3] = &unk_1E782EA40;
      v8 = *(_QWORD *)(a1 + 48);
      v11 = *(id *)(a1 + 40);
      objc_msgSend_cancelOperationWithIdentifier_completionHandler_(v6, v9, v8, v10);

    }
  }

}

void sub_1BEA2D364(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA2D36C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v3 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Error sending sandbox extensions to client: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_1BEA2DFF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA2E010(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1BEA2E020(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1BEA2E030(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1BEA2E040(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1BEA2E050(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

void sub_1BEA2E3A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  uint64_t v7;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_1BEA2E400()
{
  JUMPOUT(0x1BEA2E3E0);
}

void sub_1BEA2E408()
{
  JUMPOUT(0x1BEA2E3E8);
}

void sub_1BEA2E410(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id *v10;
  id v11;
  id v12;
  id v13;
  id WeakRetained;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  const char *v22;
  _QWORD v23[4];
  id v24;

  v9 = a5;
  v10 = (id *)(a1 + 32);
  v11 = a4;
  v12 = a3;
  v13 = a2;
  WeakRetained = objc_loadWeakRetained(v10);
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    v18 = (uint64_t)v13;
  else
    v18 = MEMORY[0x1E0C9AA60];
  if (v12)
    v19 = v12;
  else
    v19 = (id)MEMORY[0x1E0C9AA60];
  if (v11)
    v20 = v11;
  else
    v20 = (id)MEMORY[0x1E0C9AA60];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_1BEA2E52C;
  v23[3] = &unk_1E782FCA8;
  v24 = v9;
  v21 = v9;
  objc_msgSend_handleReplaceLocalWithWireSerializations_encryptedMasterKeys_wireEnvelopes_reply_(v17, v22, v18, v19, v20, v23);

}

void sub_1BEA2E52C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = 138412290;
    v9 = v5;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "After replacing record archives, client returned serialized request: %@", (uint8_t *)&v8, 0xCu);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1BEA2E638(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  const char *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v17 = v5;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Asking client to deserialize initial response: %@", buf, 0xCu);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BEA2E7A0;
  v14[3] = &unk_1E782FCF8;
  v15 = v6;
  v12 = v6;
  objc_msgSend_handleInitialResponseReceived_reply_(v11, v13, (uint64_t)v5, v14);

}

void sub_1BEA2E7A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = 138412290;
    v9 = v5;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "After deserializing initial response, client returned wire serializations: %@", (uint8_t *)&v8, 0xCu);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1BEA2E8AC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v11 = 138412290;
    v12 = v3;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Asking client to replace wire transport blobs: %@", (uint8_t *)&v11, 0xCu);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v8;
  if (v3)
    objc_msgSend_handleReplaceWireSerializationsWithRecords_(v8, v9, (uint64_t)v3);
  else
    objc_msgSend_handleReplaceWireSerializationsWithRecords_(v8, v9, MEMORY[0x1E0C9AA60]);

}

void sub_1BEA2E9C8(uint64_t a1, void *a2, double a3)
{
  id *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_didProgress_(v8, v9, (uint64_t)v5, a3);

}

void sub_1BEA2EA30(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v10, (uint64_t)CFSTR("RecordKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v12, (uint64_t)CFSTR("ArrayIndex"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_integerValue(v13, v14, v15);
  objc_msgSend_objectForKeyedSubscript_(v5, v17, (uint64_t)CFSTR("Data"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v19, (uint64_t)CFSTR("Offset"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = objc_msgSend_unsignedLongLongValue(v20, v21, v22);
  objc_msgSend_handleAssetDataForRecordID_recordKey_arrayIndex_data_offset_(v9, v24, (uint64_t)v6, v11, v16, v18, v23);

}

void sub_1BEA2EB54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543874;
    v31 = v29;
    v32 = 2112;
    v33 = v8;
    v34 = 2112;
    v35 = v9;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending record fetch completion to client for operation %{public}@ for recordID: %@ error: %@", (uint8_t *)&v30, 0x20u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v7, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_record_error_(v23, v24, (uint64_t)v8, v7, v9);

}

void sub_1BEA2EF94(uint64_t a1, const char *a2)
{
  const char *v3;
  void *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  id v15;

  objc_msgSend_CKStatusReportArrayIncludingSharedOperations_(*(void **)(a1 + 40), a2, *(_QWORD *)(a1 + 32) == 0);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = (void *)MEMORY[0x1C3B83E24]();
      v5 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend_CKComponentsAndSubcomponentsJoinedByString_(v15, v6, (uint64_t)CFSTR("\n"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v5, v8, (uint64_t)CFSTR("%@"), v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = *(void **)(a1 + 32);
      objc_msgSend_dataUsingEncoding_(v9, v11, 4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writeData_(v10, v13, (uint64_t)v12);

      objc_autoreleasePoolPop(v4);
    }
    else
    {
      objc_msgSend__dumpStatusReportArrayToOsTrace_(*(void **)(a1 + 40), v3, (uint64_t)v15);
    }
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    (*(void (**)(uint64_t, _QWORD))(v14 + 16))(v14, 0);

}

void sub_1BEA2FA84(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  NSObject *v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  id v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v2 = *(id *)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v37, v43, 16);
  if (v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v38 != v8)
          objc_enumerationMutation(v2);
        v10 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend_appContainerTuple(v10, v5, v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_personaID(v11, v12, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = CKAdoptPersonaID(v14);

        if (v15)
        {
          v16 = (void *)MEMORY[0x1C3B83E24]();
          objc_msgSend_defaultContext(CKDLogicalDeviceContext, v17, v18);
          v19 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v20, (uint64_t)v10, v19, 0);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          v36 = 0;
          LOBYTE(v19) = objc_msgSend_setupAssetTransfers_(v21, v22, (uint64_t)&v36);
          v25 = v36;
          if ((v19 & 1) == 0)
          {
            if (*MEMORY[0x1E0C95300] != -1)
              dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v35 = *MEMORY[0x1E0C952B0];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v42 = v25;
              _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, "MMCS setup failed:%@", buf, 0xCu);
            }
            __assert_rtn("-[CKDContainer showAssetCache]_block_invoke", "CKDContainer.m", 3706, "0 && \"no container.MMCS\"");
          }
          objc_msgSend_MMCS(v21, v23, v24);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v26)
          {
            objc_msgSend_MMCS(v21, v27, v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v29)
              __assert_rtn("-[CKDContainer showAssetCache]_block_invoke", "CKDContainer.m", 3708, "container.MMCS && \"no container.MMCS\"");

          }
          objc_msgSend_MMCS(v21, v27, v28);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_assetCache(v30, v31, v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_showAssetCacheInContainer_(v33, v34, *(_QWORD *)(a1 + 40));
          objc_autoreleasePoolPop(v16);
        }
      }
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v37, v43, 16);
    }
    while (v7);
  }

}

void sub_1BEA30190(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_directoryContext(*(void **)(a1 + 32), a2, a3);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_frameworkCachesDirectory(v10, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_path(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD))(v3 + 16))(v3, v9, 0);

}

void sub_1BEA3031C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA3033C(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id WeakRetained;
  void *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  char v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t v43[128];
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a4;
  v11 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v34 = *(void **)(a1 + 32);
    v35 = v13;
    objc_msgSend_operationID(v34, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v45 = v38;
    v46 = 2112;
    v47 = v9;
    _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, "Sending archived record progress to client for operation %{public}@ for recordID: %@", buf, 0x16u);

  }
  objc_msgSend_container(WeakRetained, v14, v15);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_returnPCSMetadata(v19, v20, v21))
  {

LABEL_16:
    goto LABEL_17;
  }
  v22 = CKIsPCSError();

  if ((v22 & 1) == 0)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v16 = v10;
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v25, (uint64_t)&v39, v43, 16);
    if (v26)
    {
      v29 = v26;
      v30 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v29; ++i)
        {
          if (*(_QWORD *)v40 != v30)
            objc_enumerationMutation(v16);
          objc_msgSend_fillOutPCSMetadataInfo(*(void **)(*((_QWORD *)&v39 + 1) + 8 * i), v27, v28, (_QWORD)v39);
        }
        v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v27, (uint64_t)&v39, v43, 16);
      }
      while (v29);
    }
    goto LABEL_16;
  }
LABEL_17:
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v23, v24, (_QWORD)v39);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_isDeleted_versions_error_(v32, v33, (uint64_t)v9, a3, v10, v11);

}

void sub_1BEA30760(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEA307A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v11 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v25 = *(void **)(a1 + 32);
    v26 = v11;
    objc_msgSend_operationID(v25, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543618;
    v31 = v29;
    v32 = 2112;
    v33 = v7;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Sending archived record progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v30, 0x16u);

  }
  objc_msgSend_container(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    v20 = CKIsPCSError();

    if ((v20 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
  }
  else
  {

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchForRecordID_record_error_(v23, v24, (uint64_t)v7, v8, v9);

}

void sub_1BEA3096C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id WeakRetained;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a5;
  v14 = a6;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v15 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v21 = *(void **)(a1 + 32);
    v22 = v15;
    objc_msgSend_operationID(v21, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 138543618;
    v27 = v25;
    v28 = 2112;
    v29 = v11;
    _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ for zoneID: %@", (uint8_t *)&v26, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleChangeSetCompletionForRecordZoneID_serverChangeToken_archivedRecordStatus_error_reply_(v19, v20, (uint64_t)v11, v12, a4, v13, v14);

}

void sub_1BEA30B00(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_hash(WeakRetained, v1, v2);
  kdebug_trace();

}

void sub_1BEA30C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA30C84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending archive record progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordArchivalForRecordID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA30EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA30F1C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id WeakRetained;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v19 = *(void **)(a1 + 32);
    v20 = v13;
    objc_msgSend_operationID(v19, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543618;
    v25 = v23;
    v26 = 2112;
    v27 = v9;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Sending asset published progress to client for operation %{public}@ with recordID: %@", (uint8_t *)&v24, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleAssetPublishCompletionForRecordID_publishedAsset_recordKey_error_(v17, v18, (uint64_t)v9, v11, v10, v12);

}

void sub_1BEA311C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA311E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id WeakRetained;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend_repairZoneRecordID(a2, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v15 = *(void **)(a1 + 32);
    v16 = v9;
    objc_msgSend_operationID(v15, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543618;
    v21 = v19;
    v22 = 2112;
    v23 = v8;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending asset repair progress to client for operation %{public}@ with recordID: %@", (uint8_t *)&v20, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleAssetRepairCompletionForRecordID_error_(v13, v14, (uint64_t)v8, v5);

}

void sub_1BEA31464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA31484(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending mark asset broken progress to client for operation %{public}@ with recordID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleMarkAssetBrokenCompletionWithRepairRecordID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA3175C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA3178C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id WeakRetained;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v19 = *(void **)(a1 + 32);
    v20 = v13;
    objc_msgSend_operationID(v19, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543618;
    v25 = v23;
    v26 = 2112;
    v27 = v9;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Sending record web sharing progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v24, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleWebSharingInitiationForRecordID_sharingKey_baseSharingToken_error_(v17, v18, (uint64_t)v9, v10, v11, v12);

}

void sub_1BEA31918(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending record web unsharing progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleWebSharingRevocationForRecordID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA31B0C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const void *RandomSharingIdentityWithError;
  id v7;
  const char *v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  const void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  objc_msgSend_pcsManager(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  RandomSharingIdentityWithError = (const void *)objc_msgSend_createRandomSharingIdentityWithError_(v4, v5, (uint64_t)&v27);
  v7 = v27;

  if (v7)
    v10 = 1;
  else
    v10 = RandomSharingIdentityWithError == 0;
  if (v10)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v29 = v12;
      v30 = 2112;
      v31 = v7;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Warn: Couldn't create a web sharing identity for client %@: %@", buf, 0x16u);
    }
    if (RandomSharingIdentityWithError)
      CFRelease(RandomSharingIdentityWithError);
    v13 = 0;
  }
  else
  {
    objc_msgSend_pcsManager(*(void **)(a1 + 32), v8, v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0;
    objc_msgSend_dataFromSharingIdentity_error_(v14, v15, (uint64_t)RandomSharingIdentityWithError, &v26);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v26;

    v17 = (void *)*MEMORY[0x1E0C952F8];
    v18 = *MEMORY[0x1E0C95300];
    if (v7 || !v16)
    {
      if (v18 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v17);
      v23 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v24 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        v29 = v24;
        v30 = 2112;
        v31 = v7;
        v32 = 2112;
        v33 = RandomSharingIdentityWithError;
        _os_log_impl(&dword_1BE990000, v23, OS_LOG_TYPE_INFO, "Warn: Couldn't convert web sharing identity to data for client %@: %@ (identity was %@)", buf, 0x20u);
      }
      v13 = 0;
    }
    else
    {
      if (v18 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v17);
      v19 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        v20 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v29 = v20;
        v30 = 2112;
        v31 = (id)RandomSharingIdentityWithError;
        _os_log_impl(&dword_1BE990000, v19, OS_LOG_TYPE_INFO, "Successfully created a web sharing identity for %@: %@", buf, 0x16u);
      }
      v21 = objc_alloc(MEMORY[0x1E0C94D18]);
      v13 = (void *)objc_msgSend_initWithData_(v21, v22, (uint64_t)v16);
    }
    CFRelease(RandomSharingIdentityWithError);

  }
  v25 = *(_QWORD *)(a1 + 40);
  if (v25)
    (*(void (**)(uint64_t, void *, id))(v25 + 16))(v25, v13, v7);

}

void sub_1BEA31E60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a3;
    objc_msgSend_data(a2, v6, v7);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v8, v5);

  }
}

void sub_1BEA31FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA32004(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSerialization_error_(v9, v10, (uint64_t)v6, v5);

}

void sub_1BEA32180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA321A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleDeserializationOfSaves_deletes_error_(v12, v13, (uint64_t)v9, v8, v7);

}

void sub_1BEA323A4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA323D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id WeakRetained;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v13 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v19 = *(void **)(a1 + 32);
    v20 = v13;
    objc_msgSend_operationID(v19, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543618;
    v25 = v23;
    v26 = 2112;
    v27 = v9;
    _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Sending record access grant progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v24, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordAccessInitiationForRecordID_accessToken_referenceIdentifier_error_(v17, v18, (uint64_t)v9, v10, v11, v12);

}

void sub_1BEA32560(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(void **)(a1 + 32);
    v14 = v7;
    objc_msgSend_operationID(v13, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v17;
    v20 = 2112;
    v21 = v5;
    _os_log_debug_impl(&dword_1BE990000, v14, OS_LOG_TYPE_DEBUG, "Sending record access revoke progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleRecordAccessRevocationForRecordID_error_(v11, v12, (uint64_t)v5, v6);

}

void sub_1BEA32838(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA32868(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending vetting completion progress to client for operation %{public}@ for url: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleReconstructedShareURL_(v8, v9, (uint64_t)v3);

}

void sub_1BEA329A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending vetting completion progress to client for operation %{public}@ for share metadata: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleFetchedShareMetadata_(v8, v9, (uint64_t)v3);

}

void sub_1BEA32C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA32C24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 32);
    v17 = v10;
    objc_msgSend_operationID(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v7;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Sending share participant key fetch progress to client for operation %{public}@ recordID: %@", (uint8_t *)&v21, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleParticipantKeyFetchForRecordID_participantKey_error_(v14, v15, (uint64_t)v7, v8, v9);

}

void sub_1BEA32E50(void **a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  char hasOutOfProcessUIEntitlement;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  int isEqualToString;
  const char *v31;
  CKDDatabaseOperation *v32;
  const char *v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  const char *v45;
  void (**v46)(void *, _QWORD, id);
  id v47;
  _QWORD v48[4];
  id v49;
  void *v50;
  id v51;

  objc_msgSend_entitlements(a1[4], a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasParticipantPIIEntitlement(v4, v5, v6))
  {

  }
  else
  {
    objc_msgSend_entitlements(a1[4], v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v11, v12, v13);

    if ((hasOutOfProcessUIEntitlement & 1) == 0)
    {
      v46 = (void (**)(void *, _QWORD, id))a1[6];
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v9, *MEMORY[0x1E0C947D8], 8, CFSTR("Container %@ is not allowed to decrypt share personal info"), a1[4]);
      v47 = (id)objc_claimAutoreleasedReturnValue();
      v46[2](v46, 0, v47);

      return;
    }
  }
  if ((objc_msgSend_hasEncryptedPersonalInfo(a1[5], v9, v10) & 1) != 0)
  {
    objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E0C94F80], v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_opt_new();
    objc_msgSend_setResolvedConfiguration_(v18, v19, (uint64_t)v17);
    objc_msgSend_recordID(a1[5], v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneID(v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ownerName(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v28, v29, *MEMORY[0x1E0C94730]);

    if (isEqualToString)
      objc_msgSend_setDatabaseScope_(v18, v31, 2);
    else
      objc_msgSend_setDatabaseScope_(v18, v31, 3);
    v32 = [CKDDatabaseOperation alloc];
    objc_msgSend_containerForOperationInfo_(a1[4], v33, (uint64_t)v18);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = (void *)objc_msgSend_initWithOperationInfo_container_(v32, v35, (uint64_t)v18, v34);

    objc_msgSend_pcsCache(a1[4], v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(a1[5], v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = sub_1BEA330D8;
    v48[3] = &unk_1E782FFA0;
    v51 = a1[6];
    v43 = a1[5];
    v44 = a1[4];
    v49 = v43;
    v50 = v44;
    objc_msgSend_fetchPCSForShareWithID_forOperation_options_withCompletionHandler_(v39, v45, (uint64_t)v42, v36, 0, v48);

  }
  else
  {
    (*((void (**)(void))a1[6] + 2))();
  }
}

uint64_t sub_1BEA330D8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  const char *v12;
  NSObject *v14;
  uint8_t v15[16];

  if (a3)
  {
    v4 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    return v4();
  }
  v5 = objc_msgSend_invitedPCS(a2, (const char *)a2, 0);
  if (v5)
  {
    v8 = v5;
    v9 = *(void **)(a1 + 32);
    objc_msgSend_pcsManager(*(void **)(a1 + 40), v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__decryptPersonalInfoWithPCSBlob_pcsManager_(v9, v11, v8, v10);

    objc_msgSend_setSerializePersonalInfo_(*(void **)(a1 + 32), v12, 1);
    v4 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    return v4();
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v14 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Fetched PCS for share, but result had no invitedPCS?", v15, 2u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1BEA33320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA33340(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v4;
    objc_msgSend_operationID(v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v14;
    v17 = 2112;
    v18 = v3;
    _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, "Sending initiate participant vetting operation progress to client for operation %{public}@ error: %@", (uint8_t *)&v15, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleParticipantVettingProgressWithError_(v8, v9, (uint64_t)v3);

}

void sub_1BEA33580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA3359C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = v2;
    objc_msgSend_operationID(WeakRetained, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543618;
    v23 = v19;
    v24 = 2048;
    v25 = objc_msgSend_quotaAvailable(WeakRetained, v20, v21);
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with quota available %lld", (uint8_t *)&v22, 0x16u);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_quotaAvailable(WeakRetained, v6, v7);
  objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleOperationDidCompleteWithQuotaAvailable_metrics_error_(v5, v15, v8, v11, v14);

}

void sub_1BEA33824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA33844(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v16 = v11;
      objc_msgSend_operationID(WeakRetained, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v19;
      v22 = 2112;
      v23 = v7;
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending mergeable delta fetched progress to client for operation %{public}@ for %@", (uint8_t *)&v20, 0x16u);

    }
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFetchForMergeableValueID_fetchedDeltas_error_(v14, v15, (uint64_t)v7, v8, v9);

  }
}

void sub_1BEA33AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA33AE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v16 = v11;
      objc_msgSend_operationID(WeakRetained, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v19;
      v22 = 2112;
      v23 = v7;
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending fetched metadata to client for operation %{public}@ for value %@", (uint8_t *)&v20, 0x16u);

    }
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFetchForMergeableValueID_metadatas_error_(v14, v15, (uint64_t)v7, v8, v9);

  }
}

void sub_1BEA33D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA33D7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v13 = v8;
      objc_msgSend_operationID(WeakRetained, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v5;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Sending per-value replacement request completion to client for operation %{public}@ for request %@", (uint8_t *)&v17, 0x16u);

    }
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleCompletedReplaceDeltasRequest_error_(v11, v12, (uint64_t)v5, v6);

  }
}

void sub_1BEA34030(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA34060(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v19 = v8;
      objc_msgSend_operationID(WeakRetained, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_metadata(v5, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_identifier(v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v22;
      v31 = 2112;
      v32 = v28;
      _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Sending delta upload progress to client for operation %{public}@ for %@", (uint8_t *)&v29, 0x16u);

    }
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metadata(v5, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleUploadForDeltaIdentifier_error_(v11, v18, (uint64_t)v17, v6);

  }
}

void sub_1BEA34214(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v13 = v8;
      objc_msgSend_operationID(WeakRetained, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v5;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Sending replacement progress to client for operation %{public}@ for %@", (uint8_t *)&v17, 0x16u);

    }
    objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleReplacementRequest_error_(v11, v12, (uint64_t)v5, v6);

  }
}

void sub_1BEA34478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA34494(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v16 = v2;
    objc_msgSend_operationID(WeakRetained, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bundleIDs(WeakRetained, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543618;
    v24 = v19;
    v25 = 2112;
    v26 = v22;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with bundle IDs %@", (uint8_t *)&v23, 0x16u);

  }
  objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleIDs(WeakRetained, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_error(WeakRetained, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleOperationDidCompleteWithBundleIDs_metrics_error_(v5, v15, (uint64_t)v8, v11, v14);

}

void sub_1BEA346C0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[16];

  objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_15;
  v7 = (void *)v4;
  objc_msgSend_account(*(void **)(a1 + 32), v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_accountType(v8, v9, v10);

  if (v11 == 1)
    goto LABEL_15;
  if ((objc_msgSend_canAuthWithCloudKit(*(void **)(a1 + 32), v12, v13) & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v22 = "When determining serverPreferredPushEnvironment, the account could not auth with CloudKit.  Falling back to de"
          "fault iCloud Environment value";
LABEL_17:
    _os_log_error_impl(&dword_1BE990000, v21, OS_LOG_TYPE_ERROR, v22, buf, 2u);
LABEL_15:
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_1BEA348B4;
    v26[3] = &unk_1E7830090;
    v23 = *(void **)(a1 + 32);
    v27 = *(id *)(a1 + 40);
    objc_msgSend_serverEnvironmentWithCompletionHandler_(v23, v24, (uint64_t)v26);

    return;
  }
  objc_msgSend_account(*(void **)(a1 + 32), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_serverPreferredPushEnvironment(v16, v17, v18);
  v25 = objc_claimAutoreleasedReturnValue();

  v19 = (void *)v25;
  if (!v25)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = *MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v22 = "When determining serverPreferredPushEnvironment, the account had no apsEnv in its dataclass bag.  Falling back"
          " to default iCloud Environment value";
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v20 + 16))(v20, v25, 0);
    v19 = (void *)v25;
  }

}

void sub_1BEA348B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    v7 = v5;
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v7;
      _os_log_error_impl(&dword_1BE990000, v8, OS_LOG_TYPE_ERROR, "When determining serverPreferredPushEnvironment, failed our fallback to default iCloud Environment value: %@", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_6;
  }
  if ((unint64_t)(a2 - 1) < 3)
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      v11 = (_QWORD *)MEMORY[0x1E0CFE128];
LABEL_14:
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v10 + 16))(v10, *v11, 0);
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  if (!a2)
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      v11 = (_QWORD *)MEMORY[0x1E0CFE130];
      goto LABEL_14;
    }
LABEL_15:
    v7 = 0;
    goto LABEL_16;
  }
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v6, *MEMORY[0x1E0C94B20], 1000, CFSTR("Could not determine serverPreferredPushEnvironment from account or iCloud Environment"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_6:
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v7);
LABEL_16:

}

void sub_1BEA34B98(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD block[4];
  id v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v33[4];
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[5];
  id v38;
  _QWORD v39[5];
  id v40;

  objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v5, *MEMORY[0x1E0C94B20], 1002, CFSTR("This requires an authenticated account, we have no account"));
    goto LABEL_5;
  }
  objc_msgSend_account(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_accountType(v7, v8, v9);

  if (v10 == 1)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v11, *MEMORY[0x1E0C94B20], 1002, CFSTR("This requires an authenticated account, we have only have an anonymous account"));
LABEL_5:
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
    {
      v27 = v13;
      (*(void (**)(uint64_t, _QWORD))(v14 + 16))(v14, 0);
      v13 = v27;
    }

    return;
  }
  if ((objc_msgSend_canAuthWithCloudKit(*(void **)(a1 + 32), v11, v12) & 1) != 0)
  {
    v39[0] = 0;
    v39[1] = v39;
    v39[2] = 0x3032000000;
    v39[3] = sub_1BE9BAF48;
    v39[4] = sub_1BE9BAD58;
    v40 = 0;
    v37[0] = 0;
    v37[1] = v37;
    v37[2] = 0x3032000000;
    v37[3] = sub_1BE9BAF48;
    v37[4] = sub_1BE9BAD58;
    v38 = 0;
    v16 = dispatch_group_create();
    dispatch_group_enter(v16);
    objc_msgSend_pcsManager(*(void **)(a1 + 32), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = MEMORY[0x1E0C809B0];
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = sub_1BEA34E8C;
    v33[3] = &unk_1E78300B8;
    v35 = v39;
    v36 = v37;
    v21 = v16;
    v34 = v21;
    objc_msgSend_globalPerUserBoundaryKeyDataWithCompletionHandler_(v19, v22, (uint64_t)v33);

    CKGetGlobalQueue();
    v23 = objc_claimAutoreleasedReturnValue();
    block[0] = v20;
    block[1] = 3221225472;
    block[2] = sub_1BEA34F14;
    block[3] = &unk_1E78300E0;
    v31 = v39;
    v32 = v37;
    v30 = *(id *)(a1 + 40);
    dispatch_group_notify(v21, v23, block);

    _Block_object_dispose(v37, 8);
    _Block_object_dispose(v39, 8);

  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, *MEMORY[0x1E0C94B20], 1002, CFSTR("This requires an authenticated account, the current account cannot auth with CloudKit"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(*(void **)(a1 + 32), v25, (uint64_t)v24);
    v28 = (id)objc_claimAutoreleasedReturnValue();

    v26 = *(_QWORD *)(a1 + 40);
    if (v26)
      (*(void (**)(uint64_t, _QWORD, id))(v26 + 16))(v26, 0, v28);

  }
}

void sub_1BEA34E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA34E8C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1BEA34F14(_QWORD *a1)
{
  void *v2;
  uint64_t result;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  const __CFString *v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  const __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v6 = v2;
    v9 = objc_msgSend_length(v5, v7, v8);
    objc_msgSend_stringWithFormat_(v4, v10, (uint64_t)CFSTR("<%lu bytes>"), v9);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    v13 = *(const __CFString **)(*(_QWORD *)(a1[6] + 8) + 40);
    v14 = CFSTR(". Error was ");
    if (!v13)
    {
      v14 = &stru_1E7838F48;
      v13 = &stru_1E7838F48;
    }
    *(_DWORD *)buf = 138412802;
    v16 = v11;
    v17 = 2112;
    v18 = v14;
    v19 = 2112;
    v20 = v13;
    _os_log_debug_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEBUG, "Returning boundary key to client: %@%@%@", buf, 0x20u);

  }
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

uint64_t sub_1BEA351DC(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = objc_msgSend_countAssetCacheItemsWithDatabaseScope_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, v3, 0);
  return result;
}

uint64_t sub_1BEA352BC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  objc_msgSend_clearAssetCache(*(void **)(a1 + 32), a2, a3);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t sub_1BEA35368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_showAssetCache, a3);
}

void sub_1BEA353E8(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v2;
    objc_msgSend_applicationBundleID(v5, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    CKDatabaseScopeString();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138412546;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Clearing record cache for %@ with scope %@", (uint8_t *)&v18, 0x16u);

  }
  objc_msgSend_recordCache(*(void **)(a1 + 32), v3, v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearAllRecordsInScope_(v11, v12, *(_QWORD *)(a1 + 40));

  objc_msgSend_pcsCache(*(void **)(a1 + 32), v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearPCSCaches(v15, v16, v17);

}

void sub_1BEA355D8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v8 = 138412290;
    v9 = v5;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Clearing auth tokens for record %@", (uint8_t *)&v8, 0xCu);
  }
  objc_msgSend_recordCache(*(void **)(a1 + 40), v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearAssetAuthTokensForRecordWithID_container_scope_(v6, v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t sub_1BEA35778(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  os_log_t *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = (_QWORD *)MEMORY[0x1E0C95300];
  v4 = (os_log_t *)MEMORY[0x1E0C952B0];
  if ((v2 & 1) != 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_QWORD *)(a1 + 32);
      v37 = 134217984;
      v38 = v33;
      _os_log_debug_impl(&dword_1BE990000, v5, OS_LOG_TYPE_DEBUG, "Clearing the asset cache for container %p", (uint8_t *)&v37, 0xCu);
    }
    objc_msgSend_clearAssetCache(*(void **)(a1 + 32), v6, v7);
    v2 = *(_QWORD *)(a1 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*v3 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(_QWORD *)(a1 + 32);
    v37 = 134217984;
    v38 = v34;
    _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Clearing the record cache for container %p", (uint8_t *)&v37, 0xCu);
  }
  objc_msgSend_clearRecordCacheWithDatabaseScope_(*(void **)(a1 + 32), v9, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_17:
  if (*v3 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(_QWORD *)(a1 + 32);
    v37 = 134217984;
    v38 = v35;
    _os_log_debug_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEBUG, "Clearing the persisted PCS cache for container %p", (uint8_t *)&v37, 0xCu);
  }
  objc_msgSend_pcsCache(*(void **)(a1 + 32), v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearPCSCaches(v13, v14, v15);

  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_32;
    goto LABEL_27;
  }
LABEL_22:
  if (*v3 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v16 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    v36 = *(_QWORD *)(a1 + 32);
    v37 = 134217984;
    v38 = v36;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Clearing the in-memory PCS cache for container %p", (uint8_t *)&v37, 0xCu);
  }
  objc_msgSend_pcsCache(*(void **)(a1 + 32), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearPCSMemoryCaches(v19, v20, v21);

  if ((*(_QWORD *)(a1 + 48) & 0x10) != 0)
  {
LABEL_27:
    if (*v3 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v22 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v37) = 0;
      _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Clearing the container info cache", (uint8_t *)&v37, 2u);
    }
    objc_msgSend_sharedManager(CKDServerConfigurationManager, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_expireGlobalConfiguration(v25, v26, v27);

    objc_msgSend_sharedManager(CKDServerConfigurationManager, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_expireConfigurationForContainer_(v30, v31, *(_QWORD *)(a1 + 32));

  }
LABEL_32:
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_1BEA35BBC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  id v9;

  objc_msgSend_recordCache(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deleteRecordWithID_scope_(v4, v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));

  objc_msgSend_pcsCache(*(void **)(a1 + 32), v6, v7);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setPCSData_forFetchedRecordID_withScope_withCompletionHandler_(v9, v8, 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_1BEA35CEC(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  id v5;

  objc_msgSend_pcsCache(*(void **)(a1 + 32), a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setPCSData_forFetchedZoneID_withScope_withCompletionHandler_(v5, v4, 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_1BEA35E04(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  CKDDatabaseOperation *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  id v16;

  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E0C94F80], a2, a3);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v4, v5, (uint64_t)v16);
  v6 = [CKDDatabaseOperation alloc];
  objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v7, (uint64_t)v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend_initWithOperationInfo_container_(v6, v9, (uint64_t)v4, v8);

  objc_msgSend_setDatabaseScope_(v10, v11, *(_QWORD *)(a1 + 56));
  objc_msgSend_pcsCache(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchPCSForZoneWithID_forOperation_options_withCompletionHandler_(v14, v15, *(_QWORD *)(a1 + 40), v10, 2 * *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));

}

void sub_1BEA35FA0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  CKDDatabaseOperation *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  id v16;

  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E0C94F80], a2, a3);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v4, v5, (uint64_t)v16);
  v6 = [CKDDatabaseOperation alloc];
  objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v7, (uint64_t)v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend_initWithOperationInfo_container_(v6, v9, (uint64_t)v4, v8);

  objc_msgSend_setDatabaseScope_(v10, v11, *(_QWORD *)(a1 + 56));
  objc_msgSend_pcsCache(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchPCSForShareWithID_forOperation_options_withCompletionHandler_(v14, v15, *(_QWORD *)(a1 + 40), v10, 2, *(_QWORD *)(a1 + 48));

}

void sub_1BEA36138(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  CKDDatabaseOperation *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  id v16;

  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E0C94F80], a2, a3);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v4, v5, (uint64_t)v16);
  v6 = [CKDDatabaseOperation alloc];
  objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v7, (uint64_t)v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend_initWithOperationInfo_container_(v6, v9, (uint64_t)v4, v8);

  objc_msgSend_setDatabaseScope_(v10, v11, *(_QWORD *)(a1 + 56));
  objc_msgSend_pcsCache(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fetchPCSForRecordWithID_forOperation_options_withCompletionHandler_(v14, v15, *(_QWORD *)(a1 + 40), v10, 2, *(_QWORD *)(a1 + 48));

}

void sub_1BEA36350(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  _BOOL8 v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  id v11;

  objc_msgSend_containerID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_specialContainerType(v4, v5, v6) == 5;

  objc_msgSend_pcsCache(*(void **)(a1 + 32), v8, v9);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearInvalidatedPCSSQLCacheEntriesWithSkipZonePCS_completionHandler_(v11, v10, v7, 0);

}

void sub_1BEA36454(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  uint8_t buf[4];
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  objc_msgSend_operationQueue(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v2, v9, (uint64_t)v8);

  objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 32), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v2, v16, (uint64_t)v15);

  objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 32), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v2, v23, (uint64_t)v22);

  objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operations(v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = sub_1BEA366EC;
  v46[3] = &unk_1E78301F8;
  v46[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKFilter_(v29, v30, (uint64_t)v46);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_addObjectsFromArray_(v2, v32, (uint64_t)v31);
  if (objc_msgSend_count(v2, v33, v34))
  {
    v37 = objc_msgSend_count(v2, v35, v36);
    if (v37 - 1 >= 0)
    {
      v38 = v37;
      do
      {
        objc_msgSend_objectAtIndex_(v2, v35, --v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend_removeObjectAtIndex_(v2, v40, v38);

      }
      while (v38 > 0);
    }
  }
  if (objc_msgSend_count(v2, v35, v36))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v43 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v48 = v2;
      _os_log_impl(&dword_1BE990000, v43, OS_LOG_TYPE_INFO, "Unexpectedly found some outstanding operations: %@", buf, 0xCu);
    }
  }
  v44 = *(_QWORD *)(a1 + 40);
  v45 = objc_msgSend_count(v2, v41, v42);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v44 + 16))(v44, v45, 0);

}

BOOL sub_1BEA366EC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  _BOOL8 v5;

  objc_msgSend_container(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 == *(void **)(a1 + 32);

  return v5;
}

uint64_t sub_1BEA369C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BEA36B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA36B30(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    objc_msgSend_sharedAccountStore(CKDAccountStore, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_accountStore(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_accountTypeWithAccountTypeIdentifier_(v10, v11, *MEMORY[0x1E0C8F070]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clearAllPermissionsGrantedForAccountType_(v10, v13, (uint64_t)v12);

  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = WeakRetained;
  if (v14)
  {
    objc_msgSend_error(WeakRetained, v5, v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v16);

    v15 = WeakRetained;
  }

}

void sub_1BEA36D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA36D64(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    objc_msgSend_error(WeakRetained, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);
  }
  else
  {
    objc_msgSend_containerPrivacySettings(WeakRetained, v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appPermissionGroupsFromContainerPrivacySettings_(CKDBatchFetchUserPrivacySettingsOperation, v10, (uint64_t)v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    (*(void (**)(_QWORD, void *, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v8, 0);
  }

}

void sub_1BEA36F90(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(void);
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  id v19;

  objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  if (!v19 || (v6 = objc_msgSend_accountType(v19, v4, v5) == 1, v8 = v19, v6))
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v4, *MEMORY[0x1E0C94B20], 1002, CFSTR("This requires an authenticated account"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 40);
    if (!v10)
    {
LABEL_11:

      v8 = v19;
      goto LABEL_12;
    }
    v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
    v11();
    goto LABEL_11;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_containerID(*(void **)(a1 + 32), v4, v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_representativeDataclass(v12, v13, v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend_account(*(void **)(a1 + 32), v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_isDataclassEnabled_(v17, v18, (uint64_t)v9);

    }
    v11 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    goto LABEL_10;
  }
LABEL_12:

}

void sub_1BEA37234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA37254(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_corruptRecords(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);

}

uint64_t sub_1BEA373B4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t result;

  objc_msgSend_sharedManager(CKDServerConfigurationManager, a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expireGlobalConfiguration(v4, v5, v6);

  objc_msgSend_sharedManager(CKDServerConfigurationManager, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expireConfigurationForContainer_(v9, v10, *(_QWORD *)(a1 + 32));

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

BOOL sub_1BEA37944(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA3839C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  CKDProtocolTranslator *v14;
  const char *v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v29 = 138412290;
      v30 = v9;
      _os_log_error_impl(&dword_1BE990000, v10, OS_LOG_TYPE_ERROR, "Error while trying to determine userID: %@", (uint8_t *)&v29, 0xCu);
    }
    objc_msgSend_setError_(*(void **)(a1 + 32), v11, (uint64_t)v9);
  }
  else
  {
    v14 = [CKDProtocolTranslator alloc];
    v17 = (void *)objc_msgSend_initWithContainer_databaseScope_(v14, v15, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    if (v17)
    {
      objc_msgSend_setTranslator_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v18 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v29) = 0;
        _os_log_error_impl(&dword_1BE990000, v18, OS_LOG_TYPE_ERROR, "CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator", (uint8_t *)&v29, 2u);
      }
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v19, *MEMORY[0x1E0C947D8], 1000, CFSTR("CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 32), v21, (uint64_t)v20);

    }
  }
  objc_msgSend_error(*(void **)(a1 + 32), v12, v13);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v24)
  {
    objc_msgSend_translator(*(void **)(a1 + 32), v22, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v25)
      __assert_rtn("-[CKDDeserializeRecordModificationsOperation _setupTranslator]_block_invoke", "CKDDeserializeRecordModificationsOperation.m", 157, "self.error != nil || self.translator != nil");

  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v26, v27);
  v28 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v28);

}

void sub_1BEA394C8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_recordsToSave(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFullRecordsToFetch_(v3, v7, (uint64_t)v6);

  objc_msgSend_setUseRecordCache_(v3, v8, 0);
  objc_msgSend_setShouldUpdateTimestampsForFetchedMergeableValues_(v3, v9, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v10 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1BEA3965C;
  v16[3] = &unk_1E7830270;
  objc_copyWeak(&v17, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v11, (uint64_t)v16);
  v13[0] = v10;
  v13[1] = 3221225472;
  v13[2] = sub_1BEA3971C;
  v13[3] = &unk_1E782E468;
  objc_copyWeak(&v14, &location);
  objc_copyWeak(&v15, &from);
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v13);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA39620(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA3965C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  char v17;
  const char *v18;
  uint64_t v19;
  id v20;

  v20 = a2;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = WeakRetained;
  if (v6)
    objc_msgSend_setError_(WeakRetained, v8, (uint64_t)v6);
  objc_msgSend_container(v10, v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_returnPCSMetadata(v14, v15, v16))
  {
    v17 = CKIsPCSError();

    if ((v17 & 1) == 0)
      objc_msgSend_fillOutPCSMetadataInfo(v20, v18, v19);
  }
  else
  {

  }
}

void sub_1BEA3971C(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_error(v2, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v8);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v10);

}

uintptr_t sub_1BEA39AF0()
{
  uintptr_t result;

  result = dispatch_source_get_data((dispatch_source_t)qword_1ED702750);
  qword_1ED702748 = result;
  return result;
}

uint64_t sub_1BEA39BD8(uint64_t a1, void *a2)
{
  return objc_msgSend_enumerateContainersWithOptions_usingBlock_(a2, (const char *)a2, 4, &unk_1E7830328);
}

void sub_1BEA39BEC(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v3;
  uint64_t v4;
  id v5;

  objc_msgSend_pcsCache(a2, (const char *)a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_runMemoryCacheEviction(v5, v3, v4);

}

void sub_1BEA39E48(uint64_t a1)
{
  NSObject *v2;
  dispatch_source_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  dispatch_time_t v9;
  _QWORD v10[5];
  _QWORD handler[4];
  id v12;

  CKGetGlobalQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v2);
  v4 = (void *)qword_1ED702758;
  qword_1ED702758 = (uint64_t)v3;

  v5 = qword_1ED702758;
  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1BEA39F68;
  v10[3] = &unk_1E7830348;
  v10[4] = *(_QWORD *)(a1 + 32);
  v7 = v10;
  handler[0] = v6;
  handler[1] = 3221225472;
  handler[2] = sub_1BE99844C;
  handler[3] = &unk_1E782EFD8;
  v12 = v7;
  dispatch_source_set_event_handler(v5, handler);

  v8 = qword_1ED702758;
  v9 = dispatch_time(0, 1800000000000);
  dispatch_source_set_timer(v8, v9, 0x1A3185C5000uLL, 0x1A3185C5000uLL);
}

void sub_1BEA39F68(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  os_activity_scope_state_s v7;

  v2 = _os_activity_create(&dword_1BE990000, "pcsMemoryCacheEvict", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v7.opaque[0] = 0;
  v7.opaque[1] = 0;
  os_activity_scope_enter(v2, &v7);
  objc_msgSend_stopEvictionTimer(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_runMemoryCacheEvictionInAllCaches(*(void **)(a1 + 32), v5, v6);
  os_activity_scope_leave(&v7);

}

void sub_1BEA39FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA3A528(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  double v7;
  double v8;
  const char *v9;
  uint64_t v10;
  double v11;
  double v12;

  v4 = a3;
  objc_msgSend_lastAccess(a2, v5, v6);
  v8 = v7;
  objc_msgSend_lastAccess(v4, v9, v10);
  v12 = v11;

  if (v8 > v12)
    return 1;
  else
    return -1;
}

void sub_1BEA3A688(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  objc_msgSend_cacheEntries(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend_pcsData(v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend_pcs(v9, v10, v11);

    v13 = (void *)*MEMORY[0x1E0C952F8];
    if (v12)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v14 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v35 = *(_QWORD *)(a1 + 32);
        v36 = *(_QWORD *)(a1 + 40);
        v37 = v14;
        objc_msgSend_pcsData(v6, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_etag(v40, v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 138543874;
        v47 = v35;
        v48 = 2114;
        v49 = v36;
        v50 = 2114;
        v51 = v43;
        _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Returning PCS data from in-memory cache (%{public}@). scopedItemID=%{public}@, protectionInfoTag=%{public}@", (uint8_t *)&v46, 0x20u);

      }
      v17 = *(void **)(a1 + 32);
      v18 = objc_msgSend_memoryCacheHitCount(v17, v15, v16);
      objc_msgSend_setMemoryCacheHitCount_(v17, v19, v18 + 1);
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v20, v21);
      objc_msgSend_setLastAccess_(v6, v22, v23);
      objc_msgSend_pcsData(v6, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = (void *)objc_msgSend_copy(v26, v27, v28);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v30 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v44 = *(_QWORD *)(a1 + 32);
        v45 = *(_QWORD *)(a1 + 40);
        v46 = 138543618;
        v47 = v44;
        v48 = 2114;
        v49 = v45;
        _os_log_debug_impl(&dword_1BE990000, v30, OS_LOG_TYPE_DEBUG, "Found a memory cache entry in (%{public}@) but it has no decrypted data, removing it. scopedItemID=%{public}@", (uint8_t *)&v46, 0x16u);
      }
      objc_msgSend_cacheEntries(*(void **)(a1 + 32), v31, v32);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removeObjectForKey_(v26, v33, *(_QWORD *)(a1 + 40));
      v29 = 0;
    }

  }
  else
  {
    v29 = 0;
  }
  v34 = *(_QWORD *)(a1 + 48);
  if (v34)
    (*(void (**)(uint64_t, void *))(v34 + 16))(v34, v29);

}

uint64_t sub_1BEA3AA20(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t updated;
  const char *v9;
  void *v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend_pcs(*(void **)(a1 + 32), a2, a3);
  v7 = *(void **)(a1 + 40);
  if (v4)
  {
    updated = objc_msgSend_memoryCacheUpdateCount(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_setMemoryCacheUpdateCount_(v7, v9, updated + 1);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v37 = *(_QWORD *)(a1 + 40);
      v36 = *(_QWORD *)(a1 + 48);
      v38 = *(void **)(a1 + 32);
      v39 = v10;
      objc_msgSend_etag(v38, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = 138543874;
      v46 = v37;
      v47 = 2114;
      v48 = v36;
      v49 = 2114;
      v50 = v42;
      _os_log_debug_impl(&dword_1BE990000, v39, OS_LOG_TYPE_DEBUG, "Setting PCS data in the in-memory cache (%{public}@). scopedItemID=%{public}@, protectionInfoTag=%{public}@", (uint8_t *)&v45, 0x20u);

    }
    v11 = (void *)objc_opt_new();
    objc_msgSend_setPcsData_(v11, v12, *(_QWORD *)(a1 + 32));
    objc_msgSend_cacheEntries(*(void **)(a1 + 40), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v15, v16, (uint64_t)v11, *(_QWORD *)(a1 + 48));

    objc_msgSend_cacheEntries(*(void **)(a1 + 40), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_count(v19, v20, v21);

    v25 = objc_msgSend_memoryCacheHighwaterCount(*(void **)(a1 + 40), v23, v24);
    if (v22 <= v25)
      objc_msgSend_setMemoryCacheHighwaterCount_(*(void **)(a1 + 40), v26, v25);
    else
      objc_msgSend_setMemoryCacheHighwaterCount_(*(void **)(a1 + 40), v26, v22);
  }
  else
  {
    v27 = objc_msgSend_memoryCacheDeleteCount(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_setMemoryCacheDeleteCount_(v7, v28, v27 + 1);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v29 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v43 = *(_QWORD *)(a1 + 40);
      v44 = *(_QWORD *)(a1 + 48);
      v45 = 138543618;
      v46 = v43;
      v47 = 2114;
      v48 = v44;
      _os_log_debug_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEBUG, "Removing PCS data in the in-memory cache (%{public}@). scopedItemID=%{public}@", (uint8_t *)&v45, 0x16u);
    }
    objc_msgSend_cacheEntries(*(void **)(a1 + 40), v30, v31);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v11, v32, *(_QWORD *)(a1 + 48));
  }

  objc_msgSend__lockedEvictEntriesFromCache(*(void **)(a1 + 40), v33, v34);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t sub_1BEA3AD38(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__lockedEvictEntriesFromCache(*(void **)(a1 + 32), a2, a3);
}

void sub_1BEA3ADC4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 134217984;
    v10 = v8;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Clearing all entries in PCS cache %p", (uint8_t *)&v9, 0xCu);
  }
  objc_msgSend_cacheEntries(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v5, v6, v7);

}

void sub_1BEA3AF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA3AF84(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  id v6;

  objc_msgSend_cacheEntries(*(void **)(a1 + 32), a2, a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_count(v6, v4, v5);

}

void sub_1BEA3B2BC()
{
  void *v0;

  v0 = (void *)qword_1ED702760;
  qword_1ED702760 = (uint64_t)&unk_1E78AF5A0;

}

uint64_t sub_1BEA3B584(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  const char *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_msgSend_addIdsToArchive_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEA3C814(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t sub_1BEA3CCE4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPRecordFieldIdentifier *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = (CKDPRecordFieldIdentifier *)objc_alloc_init(MEMORY[0x1E0C94C78]);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (CKDPLocationCoordinateReadFrom() & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_37;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_39:
          *(_DWORD *)(a1 + 24) = v21;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v18 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA3D870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA3D888(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a4 = 1;
  return result;
}

void sub_1BEA3DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA3DD14(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;

  objc_msgSend_firstMMCSItemError(a2, (const char *)a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= v6 == 0;

  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

BOOL sub_1BEA3DD80(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend_firstMMCSItemError(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == 0;

  return v4;
}

uint64_t sub_1BEA3E344(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  const char *v26;
  CKDPUserPrivacySettings *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

        goto LABEL_39;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 24) = v22;
        goto LABEL_39;
      case 3u:
        PBReaderReadString();
        v27 = (CKDPUserPrivacySettings *)objc_claimAutoreleasedReturnValue();
        if (v27)
          objc_msgSend_addApplicationBundle_((void *)a1, v26, (uint64_t)v27);
        goto LABEL_34;
      case 4u:
        v27 = objc_alloc_init(CKDPUserPrivacySettings);
        objc_storeStrong((id *)(a1 + 32), v27);
        if (PBReaderPlaceMark() && (sub_1BEC58768((uint64_t)v27, a2) & 1) != 0)
        {
          PBReaderRecallMark();
LABEL_34:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

uint64_t sub_1BEA3F0D0(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_predicateForMatchingLookupInfoInContainer(*(void **)(a1 + 32), a2, a3);
}

void sub_1BEA3F2C8(uint64_t a1, void *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  const char *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v8 = a2;
  objc_msgSend_predicateForMatchingLookupInfoInContainer(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v8, v6, (uint64_t)v5);

  objc_msgSend_setFetchedProperties_(v8, v7, (uint64_t)&unk_1E78AF210);
}

id sub_1BEA3FE08(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  objc_class *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v4 = (objc_class *)objc_opt_class();
  NSStringFromClass(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_operationID(v3, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_stringWithFormat_(v2, v9, (uint64_t)CFSTR("<%@ %@>"), v5, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1BEA3FF30()
{
  NSObject *v0;
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_queue_t v6;
  void *v7;
  NSObject *v8;
  dispatch_queue_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  dispatch_queue_t v13;
  void *v14;
  NSObject *v15;
  dispatch_queue_t v16;
  void *v17;
  NSObject *v18;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INTERACTIVE, 0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = dispatch_queue_create("com.apple.cloudkit.operationcallback.userinteractive", v1);
  v3 = (void *)qword_1ED700AE0;
  qword_1ED700AE0 = (uint64_t)v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_USER_INITIATED, 0);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = dispatch_queue_create("com.apple.cloudkit.operationcallback.userinitiated", v5);
  v7 = (void *)qword_1ED700AE8;
  qword_1ED700AE8 = (uint64_t)v6;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = dispatch_queue_create("com.apple.cloudkit.operationcallback.default", v8);
  v10 = (void *)qword_1ED700AF0;
  qword_1ED700AF0 = (uint64_t)v9;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v11, QOS_CLASS_UTILITY, 0);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = dispatch_queue_create("com.apple.cloudkit.operationcallback.utility", v12);
  v14 = (void *)qword_1ED700AF8;
  qword_1ED700AF8 = (uint64_t)v13;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v18, QOS_CLASS_BACKGROUND, 0);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = dispatch_queue_create("com.apple.cloudkit.operationcallback.background", v15);
  v17 = (void *)qword_1ED700B00;
  qword_1ED700B00 = (uint64_t)v16;

}

void sub_1BEA400C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint8_t buf[4];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (objc_msgSend_qualityOfService(*(void **)(a1 + 32), v6, v7) <= 32)
  {
    objc_msgSend_allowsCellularAccess(v5, v8, v9, a3, 0);
    objc_msgSend_isUplink(v5, v10, v11);
    v12 = net_qos_guideline();
    v13 = v12;
    if (!v12)
    {
      v14 = 0;
      goto LABEL_11;
    }
    if (v12 == 1)
    {
      v14 = 5;
      goto LABEL_11;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v15 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v24 = v13;
      _os_log_error_impl(&dword_1BE990000, v15, OS_LOG_TYPE_ERROR, "Got unexpected result %d back from net_qos_guideline, going with default NST", buf, 8u);
    }
  }
  v14 = 0;
LABEL_11:
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v8, (uint64_t)v5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_unsignedIntegerValue(v16, v17, v18);

  if (v14 != v19)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v20, v14);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 48), v22, (uint64_t)v21, v5);

}

void sub_1BEA40288(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  os_signpost_id_t v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  int v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_shouldCheckAppVersion(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v26 = *(void **)(a1 + 32);
      v27 = v6;
      objc_msgSend_operationID(v26, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = 138543362;
      v32 = v30;
      _os_log_debug_impl(&dword_1BE990000, v27, OS_LOG_TYPE_DEBUG, "Operation %{public}@ requires checking app version.  Doing so", (uint8_t *)&v31, 0xCu);

    }
    objc_msgSend__checkAppVersion(*(void **)(a1 + 32), v7, v8);
  }
  else
  {
    objc_msgSend__determineNetworkServiceType(*(void **)(a1 + 32), v4, v5);
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v9, v10);
  kdebug_trace();
  objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v16, v17, v18);
    v19 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_identifier(v22, v23, v24);

    if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      LOWORD(v31) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v19, OS_SIGNPOST_EVENT, v25, "CKDOperation", "Start ended", (uint8_t *)&v31, 2u);
    }

  }
}

void sub_1BEA40470(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA40478(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (!v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v12 = *(void **)(a1 + 32);
      v13 = v9;
      objc_msgSend_operationID(v12, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v5;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Operation %{public}@ was told to take action \"%@\"", buf, 0x16u);

      if (v5)
        goto LABEL_11;
      goto LABEL_13;
    }
LABEL_10:
    if (v5)
      goto LABEL_11;
LABEL_13:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    goto LABEL_14;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v7);
  v8 = *MEMORY[0x1E0C952B0];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    goto LABEL_10;
  *(_DWORD *)buf = 138412290;
  v20 = v6;
  _os_log_error_impl(&dword_1BE990000, v8, OS_LOG_TYPE_ERROR, "Asked client what to do for a daemon operation, it responded with an error %@", buf, 0xCu);
  if (!v5)
    goto LABEL_13;
LABEL_11:
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1BEA40678;
  v17[3] = &unk_1E782EA40;
  v10 = *(_QWORD *)(a1 + 32);
  v18 = *(id *)(a1 + 40);
  objc_msgSend_takeActionOnOperation_proceedBlock_(v5, v11, v10, v17);

LABEL_14:
}

void sub_1BEA40678(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA40760(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 48))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v2 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v3 = *(void **)(a1 + 32);
      v4 = v2;
      objc_msgSend_operationID(v3, v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v7;
      _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "All state transition locks have been released. Finishing operation %{public}@", (uint8_t *)&v8, 0xCu);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1BEA40870(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "All client callbacks finished for operation %{public}@", (uint8_t *)&v4, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1BEA40950(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__finishInternalOnCallbackQueueWithError_, *(_QWORD *)(a1 + 40));
}

void sub_1BEA40BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA40F88(uint64_t a1, const char *a2)
{
  return objc_msgSend_makeStateTransition_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40));
}

void sub_1BEA412E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA41310(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)*MEMORY[0x1E0C952F8];
  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v9);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v11 = v10;
      objc_msgSend_operationID(WeakRetained, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v14;
      v22 = 2112;
      v23 = v7;
      v15 = "Error fetching container scoped user identifier for operation %{public}@: %@";
LABEL_13:
      _os_log_debug_impl(&dword_1BE990000, v11, OS_LOG_TYPE_DEBUG, v15, (uint8_t *)&v20, 0x16u);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v9);
    v16 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v11 = v16;
      objc_msgSend_operationID(WeakRetained, v18, v19);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v14;
      v22 = 2112;
      v23 = v6;
      v15 = "Fetched container scoped user identifier for operation %{public}@: %@";
      goto LABEL_13;
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v7);

}

void sub_1BEA41780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA417AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA41B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA41B78(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v7;
  v18 = v7;

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v8;
  v14 = v8;

  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v9;
  v17 = v9;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1BEA41D68()
{
  id v0;
  void *v1;
  const char *v2;
  const char *v3;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ED700B08;
  qword_1ED700B08 = (uint64_t)v0;

  objc_msgSend_setTimeStyle_((void *)qword_1ED700B08, v2, 3);
  return objc_msgSend_setDateStyle_((void *)qword_1ED700B08, v3, 1);
}

void sub_1BEA42720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA43308(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA43788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BEA4379C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  _BOOL4 v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD);
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void (**v17)(id, _QWORD);
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend_personaID(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = CKAdoptPersonaID(v4);

  if (v5)
  {
    objc_msgSend_waitCompletedHandler(*(void **)(a1 + 32), v6, v7);
    v17 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
    v17[2](v17, *(unsigned __int8 *)(a1 + 40));

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v12 = *(void **)(a1 + 32);
      v13 = v8;
      objc_msgSend_personaID(v12, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v19 = v16;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Failed to adopt personaID: %@ when acquiring gate. Calling back with NO", buf, 0xCu);

    }
    objc_msgSend_waitCompletedHandler(*(void **)(a1 + 32), v9, v10);
    v11 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11[2](v11, 0);

  }
}

uint64_t sub_1BEA43B84(uint64_t a1, const char *a2)
{
  return objc_msgSend_relinquishLocksForWaiter_deferRelinquish_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), 0);
}

uint64_t sub_1BEA43B94(uint64_t a1, const char *a2)
{
  return objc_msgSend_invokeWaitCompletedHandler_(*(void **)(a1 + 32), a2, 1);
}

void sub_1BEA43C20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA4405C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEA440E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ED702778;
  qword_1ED702778 = v3;

}

void sub_1BEA445AC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEA445D0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)*MEMORY[0x1E0C952F8];
    if (v3)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v5);
      v6 = (void *)*MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_ERROR))
      {
        v13 = v6;
        objc_msgSend_operationID(WeakRetained, v14, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138412546;
        v22 = v16;
        v23 = 2112;
        v24 = v3;
        _os_log_error_impl(&dword_1BE990000, v13, OS_LOG_TYPE_ERROR, "Error fetching delta metadata in operation %@: %@", (uint8_t *)&v21, 0x16u);

      }
      objc_msgSend_setError_(WeakRetained, v7, (uint64_t)v3);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v5);
      v11 = (void *)*MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
        v17 = v11;
        objc_msgSend_operationID(WeakRetained, v18, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138412290;
        v22 = v20;
        _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Fetched delta metadata for operation %@", (uint8_t *)&v21, 0xCu);

      }
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Deallocated while fetching delta metadata", (uint8_t *)&v21, 2u);
    }
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v8, v9);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v12);

}

void sub_1BEA44AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1BEA44B20(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  id WeakRetained;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  int v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v11)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v15 = *MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
        v18 = 138412290;
        v19 = v9;
        _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Got a continuation token for value %@", (uint8_t *)&v18, 0xCu);
      }
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v16, (uint64_t)v11, v9);
    }
    objc_msgSend_handleFetchedMetadatasForMergeableValueID_metadatas_result_(WeakRetained, v13, (uint64_t)v9, v10, v12);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *MEMORY[0x1E0C952C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v18) = 0;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "Fetch metadata operation deallocated before request per value ID block", (uint8_t *)&v18, 2u);
    }
  }

}

void sub_1BEA44CFC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  objc_class *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = objc_msgSend_count(*(void **)(a1 + 32), v2, v3);
    v6 = (void *)*MEMORY[0x1E0C952F8];
    if (v5)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v6);
      v7 = *MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
        v19 = *(void **)(a1 + 32);
        v26 = 138412290;
        v27 = v19;
        _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Continuing fetch delta metadata with new continuation tokens: %@", (uint8_t *)&v26, 0xCu);
      }
      objc_msgSend_allKeys(*(void **)(a1 + 32), v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fetchMetadataRecursivelyForMergeableValueIDs_continuationTokens_completionHandler_(WeakRetained, v11, (uint64_t)v10, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v6);
      v13 = (void *)*MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
      {
        v20 = v13;
        v21 = (objc_class *)objc_opt_class();
        NSStringFromClass(v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ckShortDescription(WeakRetained, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138543874;
        v27 = v22;
        v28 = 2048;
        v29 = WeakRetained;
        v30 = 2114;
        v31 = v25;
        _os_log_debug_impl(&dword_1BE990000, v20, OS_LOG_TYPE_DEBUG, "Fetch delta metadatas URL request completed for operation <%{public}@: %p; %{public}@>",
          (uint8_t *)&v26,
          0x20u);

      }
      v14 = *(_QWORD *)(a1 + 40);
      v15 = objc_loadWeakRetained((id *)(a1 + 56));
      objc_msgSend_error(v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v18);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *MEMORY[0x1E0C952C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_INFO))
    {
      LOWORD(v26) = 0;
      _os_log_impl(&dword_1BE990000, v12, OS_LOG_TYPE_INFO, "Fetch metadata operation deallocated before request completion block", (uint8_t *)&v26, 2u);
    }
  }

}

void sub_1BEA45740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  uint64_t v44;

  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v44 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA45784(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  CKDKeyEnvelopeContext *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  char v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v25 = *MEMORY[0x1E0C952C0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v44 = v6;
        _os_log_error_impl(&dword_1BE990000, v25, OS_LOG_TYPE_ERROR, "Error fetching PCS to decrypt fetched delta metadata: %@", buf, 0xCu);
      }
      objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v26, *MEMORY[0x1E0C94B20], 5001, v6, CFSTR("Failed to fetch PCS to decrypt mergeable delta timestamps"));
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v17 = *(id *)(v28 + 40);
      *(_QWORD *)(v28 + 40) = v27;
    }
    else
    {
      v8 = objc_alloc_init(CKDKeyEnvelopeContext);
      v11 = objc_msgSend_pcs(v5, v9, v10);
      objc_msgSend_setShareProtection_(v8, v12, v11);
      objc_msgSend_setMergeableValueID_(v8, v13, *(_QWORD *)(a1 + 32));
      v14 = *(void **)(a1 + 40);
      v42 = 0;
      v16 = objc_msgSend_decryptWithContext_error_(v14, v15, (uint64_t)v8, &v42);
      v17 = v42;
      v18 = (void *)*MEMORY[0x1E0C952F8];
      if ((v16 & 1) != 0)
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], v18);
        v19 = (void *)*MEMORY[0x1E0C952C0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
        {
          v20 = *(void **)(a1 + 40);
          v21 = v19;
          objc_msgSend_identifier(v20, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v44 = v24;
          _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Successfully decrypted delta metadata %@", buf, 0xCu);

        }
      }
      else
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], v18);
        v29 = (void *)*MEMORY[0x1E0C952C0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_ERROR))
        {
          v37 = *(void **)(a1 + 40);
          v38 = v29;
          objc_msgSend_identifier(v37, v39, v40);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v44 = v41;
          v45 = 2112;
          v46 = v17;
          _os_log_error_impl(&dword_1BE990000, v38, OS_LOG_TYPE_ERROR, "Failed to decrypt delta metadata %@: %@", buf, 0x16u);

        }
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v30, *MEMORY[0x1E0C94B20], 5004, v17, CFSTR("Failed to decrypt mergeable delta timestamps"));
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v33 = *(void **)(v32 + 40);
        *(_QWORD *)(v32 + 40) = v31;

      }
    }

    objc_msgSend_stateTransitionGroup(WeakRetained, v34, v35);
    v36 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v36);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

}

void sub_1BEA45AE8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4;

  objc_msgSend_metadataFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

}

BOOL CKDPUserInformationRequestAccessReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPContactInformation *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPContactInformation **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPContactInformation);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !CKDPContactInformationReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA4905C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BEA49198;
  v12[3] = &unk_1E78308A8;
  objc_copyWeak(&v13, &location);
  objc_msgSend_setRecordChangedBlock_(v3, v5, (uint64_t)v12);
  v10[0] = v4;
  v10[1] = 3221225472;
  v10[2] = sub_1BEA49228;
  v10[3] = &unk_1E782EF38;
  objc_copyWeak(&v11, &location);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v10);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v9);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

void sub_1BEA49168(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA49198(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  id v14;

  v14 = a2;
  v7 = a3;
  v8 = a4;
  if (v8 && CKIsPCSError())
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend_mutableCorruptRecords(WeakRetained, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v12, v13, (uint64_t)v7);

  }
}

void sub_1BEA49228(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Done checking PCS for records in all zones", v7, 2u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEA493C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD v11[5];

  v3 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEA4948C;
  v11[3] = &unk_1E78308D0;
  v11[4] = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend_setRecordZoneFetchedProgressBlock_(v4, v5, (uint64_t)v11);
  v10[0] = v3;
  v10[1] = 3221225472;
  v10[2] = sub_1BEA49640;
  v10[3] = &unk_1E782EA40;
  v10[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v4, v6, (uint64_t)v10);

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v9);

}

void sub_1BEA4948C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  id v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  v11 = (void *)*MEMORY[0x1E0C952F8];
  v12 = *MEMORY[0x1E0C95300];
  if (!v7 || v9)
  {
    if (v12 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v11);
    v18 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v19 = 138412546;
      v20 = v8;
      v21 = 2112;
      v22 = v10;
      _os_log_impl(&dword_1BE990000, v18, OS_LOG_TYPE_INFO, "Error fetching zone %@: %@", (uint8_t *)&v19, 0x16u);
    }
  }
  else
  {
    if (v12 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v11);
    v13 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v19 = 138412546;
      v20 = v8;
      v21 = 2112;
      v22 = v7;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Zone with ID %@ was fetched: %@", (uint8_t *)&v19, 0x16u);
    }
    objc_msgSend_fetchedZones(*(void **)(a1 + 32), v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v16, v17, (uint64_t)v7);

  }
}

void sub_1BEA49640(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BE990000, v2, OS_LOG_TYPE_INFO, "Done fetching zones", v6, 2u);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v5);

}

uint64_t sub_1BEA499A4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

void sub_1BEA49A6C(uint64_t a1, void *a2)
{
  const char *v3;
  id v4;
  void *v5;
  const char *v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (v4)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v7 = *(void **)(a1 + 32);
      v8 = v5;
      objc_msgSend_operationID(v7, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v11;
      v17 = 2112;
      v18 = v4;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v15, 0x16u);

    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v6, (uint64_t)v4);
  }
  objc_msgSend_setHasCalledQueryCursorUpdatedBlock_(*(void **)(a1 + 32), v3, 1);
  objc_msgSend_perRequestGroup(*(void **)(a1 + 40), v12, v13);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v14);

}

void sub_1BEA49CC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  dispatch_block_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  _QWORD block[4];
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id location[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_initWeak(location, *(id *)(a1 + 32));
  v11 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA49EB0;
  block[3] = &unk_1E78308F8;
  objc_copyWeak(&v36, location);
  v12 = v9;
  v31 = v12;
  v32 = WeakRetained;
  v13 = v7;
  v14 = *(_QWORD *)(a1 + 40);
  v33 = v13;
  v34 = v14;
  v15 = v8;
  v35 = v15;
  v16 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v17, (uint64_t)v16);
  objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  dispatch_group_async(v20, v23, v16);

  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  v27[0] = v11;
  v27[1] = 3221225472;
  v27[2] = sub_1BEA4A320;
  v27[3] = &unk_1E782EE20;
  v28 = *(id *)(a1 + 32);
  v29 = WeakRetained;
  dispatch_async(v26, v27);

  objc_destroyWeak(&v36);
  objc_destroyWeak(location);

}

void sub_1BEA49E94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1BEA49EB0(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  char isCancelled;
  const char *v6;
  uint64_t v7;
  id v8;
  _BYTE *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  objc_class *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  char v35;
  NSObject *v36;
  void (**v37)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v38;
  void *v39;
  const char *v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  const char *v47;
  _QWORD v48[4];
  id v49;
  uint8_t buf[4];
  void (**v51)(_QWORD, _QWORD, _QWORD, _QWORD);
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) != 0)
    return;
  v8 = *(id *)(a1 + 32);
  v9 = (_BYTE *)MEMORY[0x1E0C95280];
  if (*MEMORY[0x1E0C95280]
    && objc_msgSend_hasCalledQueryCursorUpdatedBlock(*(void **)(a1 + 40), v6, v7)
    && objc_msgSend_checkAndClearUnitTestOverrides_(*(void **)(a1 + 40), v6, (uint64_t)CFSTR("FakePCSDecryptionFailure")))
  {
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v6, *MEMORY[0x1E0C94B20], 5004, 0, CFSTR("TEST PCS decrypt failure"));
    v10 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v10;
  }
  if (objc_msgSend_CKIsNotFoundError(v8, v6, v7))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952B0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      goto LABEL_28;
    v16 = v13;
    v17 = (objc_class *)objc_opt_class();
    NSStringFromClass(v17);
    v18 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v19 = *(void **)(a1 + 40);
    objc_msgSend_ckShortDescription(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    v51 = v18;
    v52 = 2048;
    v53 = v19;
    v54 = 2114;
    v55 = v22;
    v56 = 2112;
    v57 = v23;
    v58 = 2112;
    v59 = v8;
    _os_log_impl(&dword_1BE990000, v16, OS_LOG_TYPE_INFO, "Warn: Query <%{public}@: %p; %{public}@> could not find record %@: %@",
      buf,
      0x34u);

    goto LABEL_27;
  }
  if (v8)
  {
    objc_msgSend_container(*(void **)(a1 + 56), v11, v12);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clientSDKVersion(v24, v25, v26);
    v27 = CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24();

    if (*v9)
    {
      objc_msgSend_unitTestOverrides(*(void **)(a1 + 56), v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v30, v31, (uint64_t)CFSTR("LegacyErrorHandling"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend_BOOLValue(v32, v33, v34);

      if ((v35 & 1) == 0 && v27 == 1)
        goto LABEL_23;
    }
    else if ((v27 & 1) != 0)
    {
      goto LABEL_23;
    }
    objc_msgSend_error(*(void **)(a1 + 40), v28, v29);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v38)
    {
      objc_msgSend__wrapError_format_(*(void **)(a1 + 40), v28, (uint64_t)v8, CFSTR("Encountered an error fetching records"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setError_(*(void **)(a1 + 40), v40, (uint64_t)v39);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v36 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v37 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v51 = v37;
      _os_log_debug_impl(&dword_1BE990000, v36, OS_LOG_TYPE_DEBUG, "The full record for %@ was fetched", buf, 0xCu);
    }
  }
LABEL_23:
  objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 40), v28, v29);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  if (v41)
  {
    v42 = *(id *)(a1 + 64);
    v16 = v42;
    if (v8)
    {

      v16 = 0;
    }
    objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 40), v43, v44);
    v18 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, NSObject *, id))v18)[2](v18, *(_QWORD *)(a1 + 48), v16, v8);
LABEL_27:

  }
LABEL_28:
  if (!v8)
  {
    objc_msgSend_error(*(void **)(a1 + 40), v14, v15);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v45)
    {
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 3221225472;
      v48[2] = sub_1BEA4A2A0;
      v48[3] = &unk_1E78305B0;
      v46 = *(void **)(a1 + 56);
      v49 = *(id *)(a1 + 64);
      objc_msgSend_updateCloudKitMetrics_(v46, v47, (uint64_t)v48);

    }
  }

}

void sub_1BEA4A2A0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  id v21;

  v21 = a2;
  v5 = objc_msgSend_recordsDownloaded(v21, v3, v4);
  objc_msgSend_setRecordsDownloaded_(v21, v6, v5 + 1);
  v9 = objc_msgSend_assetCount(*(void **)(a1 + 32), v7, v8);
  v12 = objc_msgSend_assetsDownloaded(v21, v10, v11);
  objc_msgSend_setAssetsDownloaded_(v21, v13, v12 + v9);
  v16 = objc_msgSend_assetDiskSize(*(void **)(a1 + 32), v14, v15);
  v19 = objc_msgSend_assetsDownloadedFileSize(v21, v17, v18);
  objc_msgSend_setAssetsDownloadedFileSize_(v21, v20, v19 + v16);

}

void sub_1BEA4A320(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;

  objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v4);

  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    objc_msgSend_fetchRecordsGroup(v7, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v8);

  }
}

void sub_1BEA4A388(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  objc_msgSend_shouldFetchAssetContent(v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v11 = (void *)v8;
    objc_msgSend_shouldFetchAssetContent(v5, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_BOOLValue(v12, v13, v14);

    if (v15)
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v17);
  }

}

void sub_1BEA4A418(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;

  objc_msgSend__handleQueryRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 40), v6, v7);
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 40), v6, v7);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 40), v3, v4);
  v10 = *(void **)(a1 + 32);
  if (v10)
  {
    objc_msgSend_fetchRecordsGroup(v10, v8, v9);
    v11 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v11);

  }
}

void sub_1BEA4A4AC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  dispatch_block_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  _QWORD v18[5];
  _QWORD block[4];
  id v20;
  id v21;
  uint64_t v22;

  v2 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE9C19C4;
  block[3] = &unk_1E782E418;
  v20 = *(id *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v21 = v3;
  v22 = v4;
  v5 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v6, (uint64_t)v5);
  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v9, v5);

  objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v18[0] = v2;
  v18[1] = 3221225472;
  v18[2] = sub_1BEA4A5EC;
  v18[3] = &unk_1E782EA40;
  v18[4] = *(_QWORD *)(a1 + 48);
  dispatch_async(v12, v18);

  if (*(_BYTE *)(a1 + 56))
  {
    objc_msgSend_error(*(void **)(a1 + 48), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 32), v16, v17);
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 32), v16, v17);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 32), v13, v14);

}

void sub_1BEA4A5EC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  NSObject *v4;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend_fetchRecordsGroup(v3, a2, a3);
    v4 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v4);

  }
}

void sub_1BEA4A62C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id v5;
  const char *v6;
  id WeakRetained;

  v3 = (id *)(a1 + 32);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleRecordResponses_perRequestSchedulerInfo_(WeakRetained, v6, (uint64_t)v4, v5);

}

void sub_1BEA4A698(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint8_t v13[16];

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v13 = 0;
    _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "Waiting for all record fetches to finish...", v13, 2u);
  }
  objc_msgSend_requestInfos(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v5, v6, v7);

  objc_msgSend_recordFetcher(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishIfAppropriate(v10, v11, v12);

}

void sub_1BEA4B148(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id location;

  v3 = a2;
  objc_msgSend_setUseCachedEtags_(v3, v4, 0);
  objc_msgSend_setSkipDecryption_(v3, v5, 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEA4B234;
  v9[3] = &unk_1E7830270;
  objc_copyWeak(&v10, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v6, (uint64_t)v9);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v3, v7, v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);

}

void sub_1BEA4B214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA4B234(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend_performCallbacksForItemWithID_withItem_error_(WeakRetained, v10, (uint64_t)v8, v9, v7);

}

uint64_t sub_1BEA4B878(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;

  v4 = a2;
  v5 = a3;
  v8 = objc_msgSend_size(v4, v6, v7);
  if (v8 <= objc_msgSend_size(v5, v9, v10))
  {
    v14 = objc_msgSend_size(v4, v11, v12);
    v13 = v14 < objc_msgSend_size(v5, v15, v16);
  }
  else
  {
    v13 = -1;
  }

  return v13;
}

uint64_t sub_1BEA4B8F8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;

  v4 = a2;
  v5 = a3;
  v8 = objc_msgSend_count(v4, v6, v7);
  if (v8 <= objc_msgSend_count(v5, v9, v10))
  {
    v14 = objc_msgSend_count(v4, v11, v12);
    v13 = v14 < objc_msgSend_count(v5, v15, v16);
  }
  else
  {
    v13 = -1;
  }

  return v13;
}

void sub_1BEA4BA30()
{
  void *v0;

  v0 = (void *)qword_1ED700898;
  qword_1ED700898 = (uint64_t)&unk_1E78AF5F0;

}

uint64_t sub_1BEA4BC34(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

      }
      else if ((_DWORD)v17 == 2)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0)
            goto LABEL_35;
          v21 += 7;
          v14 = v22++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_37:
        *(_BYTE *)(a1 + 24) = v23 != 0;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA4C778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA4C920(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v18 = *(void **)(a1 + 32);
      v19 = v9;
      objc_msgSend_zoneID(v18, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v25 = v22;
      v26 = 2112;
      v27 = v8;
      _os_log_debug_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the database for %@: %@", buf, 0x16u);

    }
    objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v12);

  }
  else
  {
    objc_msgSend_zoneID(*(void **)(a1 + 32), v6, v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v14, v15);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_1BEA4CAD4;
    v23[3] = &unk_1E7830AC0;
    v23[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_fetchPCSDataForZoneWithID_databaseScope_withCompletionHandler_(v5, v17, (uint64_t)v13, v16, v23);

  }
}

void sub_1BEA4CAD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  _BYTE v46[24];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v5)
  {
    if ((objc_msgSend_fetchOptions(*(void **)(a1 + 32), v7, v8) & 8) == 0
      || (objc_msgSend_zoneishPCSData(v5, v10, v11),
          v12 = (void *)objc_claimAutoreleasedReturnValue(),
          v12,
          v12))
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v13 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v41 = *(void **)(a1 + 32);
        v42 = v13;
        objc_msgSend_zoneID(v41, v43, v44);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v46 = 138412290;
        *(_QWORD *)&v46[4] = v45;
        _os_log_debug_impl(&dword_1BE990000, v42, OS_LOG_TYPE_DEBUG, "PCS data was fetched from the database for zone %@", v46, 0xCu);

      }
      objc_msgSend_setWasFetchedFromCache_(*(void **)(a1 + 32), v14, 1);
      objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v15, (uint64_t)v5, 0);
      goto LABEL_24;
    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v36 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v37 = *(void **)(a1 + 32);
      v21 = v36;
      objc_msgSend_zoneID(v37, v38, v39);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v46 = 138412290;
      *(_QWORD *)&v46[4] = v24;
      v25 = "Zone PCS data was fetched from the database but it didn't have the requested zoneish PCS. Fetching PCS data "
            "from the server for zone %@";
      v26 = v21;
      v27 = 12;
      goto LABEL_22;
    }
  }
  else
  {
    v18 = (void *)*MEMORY[0x1E0C952F8];
    if (v6)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v18);
      v19 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v20 = *(void **)(a1 + 32);
        v21 = v19;
        objc_msgSend_zoneID(v20, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v46 = 138412546;
        *(_QWORD *)&v46[4] = v24;
        *(_WORD *)&v46[12] = 2112;
        *(_QWORD *)&v46[14] = v9;
        v25 = "Error fetching PCS data from the database for %@: %@";
        v26 = v21;
        v27 = 22;
LABEL_22:
        _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, v25, v46, v27);

        goto LABEL_23;
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v18);
      v28 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v29 = *(void **)(a1 + 32);
        v21 = v28;
        objc_msgSend_zoneID(v29, v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_databaseScope(*(void **)(a1 + 32), v33, v34);
        CKDatabaseScopeString();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v46 = 138412546;
        *(_QWORD *)&v46[4] = v32;
        *(_WORD *)&v46[12] = 2112;
        *(_QWORD *)&v46[14] = v35;
        _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "No PCS data was found in the database for zone %@ with scope %@", v46, 0x16u);

LABEL_23:
      }
    }
  }
LABEL_24:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v16, v17, *(_OWORD *)v46, *(_QWORD *)&v46[16], v47);
  v40 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v40);

}

void sub_1BEA4D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA4D1CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  id WeakRetained;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  const __CFString *v23;
  _BYTE v24[24];
  const __CFString *v25;
  __int16 v26;
  const __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = v8;
    objc_msgSend_zoneID(WeakRetained, v18, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    v22 = CFSTR(" with error: ");
    *(_DWORD *)v24 = 138413058;
    v23 = &stru_1E7838F48;
    *(_QWORD *)&v24[4] = v16;
    *(_WORD *)&v24[12] = 2112;
    if (!v6)
      v22 = &stru_1E7838F48;
    *(_QWORD *)&v24[14] = v20;
    if (v6)
      v23 = v6;
    *(_WORD *)&v24[22] = 2114;
    v25 = v22;
    v26 = 2112;
    v27 = v23;
    _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Fetched PCS for share %@ in order to decrypt zone %@%{public}@%@", v24, 0x2Au);

  }
  if (objc_msgSend_pcs(v5, v9, v10, *(_OWORD *)v24, *(_QWORD *)&v24[16]))
  {
    objc_msgSend_zonePCSData(WeakRetained, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSharePCSData_(v13, v14, (uint64_t)v5);

  }
  else if (v6)
  {
    objc_msgSend_setDependentPCSFetchError_(WeakRetained, v11, (uint64_t)v6);
  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v11, v12);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v15);

}

void sub_1BEA4D534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEA4D554(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[3];
  char v22;
  id location;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_initWeak(&location, v3);
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v22 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1BEA4D7C0;
  v17[3] = &unk_1E7830B10;
  v19 = *(_QWORD *)(a1 + 48);
  v18 = *(id *)(a1 + 32);
  v20 = v21;
  objc_msgSend_setSaveCompletionBlock_(v3, v5, (uint64_t)v17);
  v11[0] = v4;
  v11[1] = 3221225472;
  v11[2] = sub_1BEA4D9D4;
  v11[3] = &unk_1E7830B38;
  v14 = *(_QWORD *)(a1 + 48);
  objc_copyWeak(&v16, &location);
  v15 = v21;
  v12 = *(id *)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v11);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = (id)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    objc_msgSend_zoneID(*(void **)(a1 + 32), v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v25 = v10;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Updating zone %@ with new PCS object", buf, 0xCu);

  }
  objc_destroyWeak(&v16);

  _Block_object_dispose(v21, 8);
  objc_destroyWeak(&location);

}

void sub_1BEA4D778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  _Block_object_dispose(&a26, 8);
  objc_destroyWeak((id *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_1BEA4D7C0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  const char *v11;
  int isEqual;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  int v26;
  id v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a4);
  }
  else
  {
    objc_msgSend_zoneID(*(void **)(a1 + 32), v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v6, v11, (uint64_t)v10);

    v13 = (void *)*MEMORY[0x1E0C952F8];
    if (isEqual)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v14 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v16 = *(void **)(a1 + 32);
        v17 = v14;
        objc_msgSend_zoneID(v16, v18, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138412290;
        v27 = v20;
        _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Successfully saved PCS on zone: %@", (uint8_t *)&v26, 0xCu);

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v15 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
      {
        v21 = *(void **)(a1 + 32);
        v22 = v15;
        objc_msgSend_zoneID(v21, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138412546;
        v27 = v6;
        v28 = 2112;
        v29 = v25;
        _os_log_error_impl(&dword_1BE990000, v22, OS_LOG_TYPE_ERROR, "Saved zone ID isn't what we expected: %@ (expected %@)", (uint8_t *)&v26, 0x16u);

      }
    }
  }

}

uint64_t sub_1BEA4D9D4(uint64_t a1, const char *a2, uint64_t a3)
{
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend_error(WeakRetained, v5, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
    && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v10 = (void *)MEMORY[0x1E0C94FF8];
    v11 = *MEMORY[0x1E0C94B20];
    objc_msgSend_zoneID(*(void **)(a1 + 32), a2, a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v10, v13, v11, 5004, CFSTR("Couldn't save zone with updated PCS data to the server for zone %@"), v12);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  return result;
}

void sub_1BEA4E2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA4E324(void **a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id WeakRetained;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v5 = a1[4];
      v6 = v4;
      objc_msgSend_zoneID(v5, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v9;
      v27 = 2114;
      v28 = v3;
      _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Failed to save new PCS object to zone %{public}@. Error: %{public}@", buf, 0x16u);

    }
    (*((void (**)(void))a1[5] + 2))();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(a1 + 6);
    objc_msgSend_container(WeakRetained, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_protectionData(a1[4], v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = sub_1BEA4E554;
    v21[3] = &unk_1E7830B88;
    v22 = a1[4];
    objc_copyWeak(&v24, a1 + 6);
    v23 = a1[5];
    objc_msgSend_createSharePCSFromData_ofType_withService_completionHandler_(v16, v20, (uint64_t)v19, 3, 0, v21);

    objc_destroyWeak(&v24);
  }

}

void sub_1BEA4E538(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA4E554(uint64_t a1, uint64_t a2, void *a3)
{
  __CFString *v5;
  const char *v6;
  __CFString *v7;
  _QWORD *v8;
  os_log_t *v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  __CFString *v14;
  id WeakRetained;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  os_log_t *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  __CFString *v30;
  const char *v31;
  NSObject *v32;
  os_log_t v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  __CFString *v40;
  os_log_t v41;
  os_log_t v42;
  void *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  void *v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  __CFString *v56;
  id v57;
  uint8_t buf[4];
  __CFString *v59;
  __int16 v60;
  const __CFString *v61;
  __int16 v62;
  const __CFString *v63;
  __int16 v64;
  const __CFString *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v7 = v5;
  v8 = (_QWORD *)MEMORY[0x1E0C95300];
  v9 = (os_log_t *)MEMORY[0x1E0C952D8];
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v41 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      v52 = *(void **)(a1 + 32);
      v53 = v41;
      objc_msgSend_zoneID(v52, v54, v55);
      v56 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v59 = v56;
      v60 = 2112;
      v61 = v7;
      _os_log_error_impl(&dword_1BE990000, v53, OS_LOG_TYPE_ERROR, "Couldn't decode PCS data for zone %{public}@. Error: %@", buf, 0x16u);

    }
    v14 = v7;
    v10 = 0;
  }
  else
  {
    objc_msgSend_dataWithZone_(CKDZonePCSData, v6, *(_QWORD *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPcs_(v10, v11, a2);
    objc_msgSend_zoneishProtectionData(*(void **)(a1 + 32), v12, v13);
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend_container(WeakRetained, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_zoneishProtectionData(*(void **)(a1 + 32), v22, v23);
      v24 = v9;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend_pcs(v10, v26, v27);
      v57 = 0;
      v30 = (__CFString *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v21, v29, (uint64_t)v25, 1, v28, &v57);
      v14 = (__CFString *)v57;

      v9 = v24;
      v8 = (_QWORD *)MEMORY[0x1E0C95300];

      if (v14)
      {
        if (*v8 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v32 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v59 = v14;
          _os_log_error_impl(&dword_1BE990000, v32, OS_LOG_TYPE_ERROR, "Couldn't decode zoneishPCS data: %@", buf, 0xCu);
        }
      }
      objc_msgSend_setZoneishPCS_(v10, v31, (uint64_t)v30);
      if (*v8 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v33 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
      {
        v34 = v33;
        objc_msgSend_zoneishPublicKeyID(v10, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_CKLowercaseHexStringWithoutSpaces(v37, v38, v39);
        v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v59 = v30;
        v60 = 2114;
        v61 = v40;
        _os_log_impl(&dword_1BE990000, v34, OS_LOG_TYPE_INFO, "Saved zoneishPCS is %@. Key ID is %{public}@", buf, 0x16u);

      }
      if (v30)
        CFRelease(v30);
    }
  }
  if (*v8 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v42 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
  {
    v43 = *(void **)(a1 + 32);
    v44 = v42;
    objc_msgSend_zoneID(v43, v45, v46);
    v47 = objc_claimAutoreleasedReturnValue();
    v48 = (void *)v47;
    v49 = CFSTR("NOT");
    if (!v14)
      v49 = CFSTR(" ");
    v50 = CFSTR(": ");
    *(_DWORD *)buf = 138413058;
    v59 = (__CFString *)v47;
    v60 = 2114;
    v61 = v49;
    v51 = &stru_1E7838F48;
    if (v14)
      v51 = v14;
    else
      v50 = &stru_1E7838F48;
    v62 = 2114;
    v63 = v50;
    v64 = 2112;
    v65 = v51;
    _os_log_impl(&dword_1BE990000, v44, OS_LOG_TYPE_INFO, "Save of new PCS object to zone %@ was %{public}@successful%{public}@%@", buf, 0x2Au);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1BEA4EA78(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  int isEqualToString;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  id v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  int isDefaultRecordZoneID;
  const char *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  id v50;
  _QWORD *v51;
  os_log_t *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  _QWORD v73[5];
  _QWORD v74[5];
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  id v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend_container(*(void **)(a1 + 32), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deviceContext(v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReference(v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v21 = (void *)v18;
    objc_msgSend_zoneID(*(void **)(a1 + 32), v19, v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_zoneName(v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v25, v26, (uint64_t)CFSTR("NoZonePCSOnServer"));

    if (isEqualToString)
      objc_msgSend_setProtectionData_(v7, v28, 0);
  }
  else
  {

  }
  objc_msgSend_protectionData(v7, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    if (CKIsPCSError())
      v34 = v9;
    else
      v34 = 0;
    objc_msgSend_dataWithZone_(CKDZonePCSData, v33, (uint64_t)v7);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v49, (uint64_t)v48, v34);
  }
  else
  {
    objc_msgSend_zoneID(v7, v31, v32);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    isDefaultRecordZoneID = objc_msgSend_isDefaultRecordZoneID(v35, v36, v37);

    if (isDefaultRecordZoneID)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v40 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Found a default zone with NULL PCS data. Creating new PCS data and saving it", buf, 2u);
      }
      objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v41, v42);
      v43 = objc_claimAutoreleasedReturnValue();
      dispatch_group_enter(v43);

      v44 = *(void **)(a1 + 32);
      v74[0] = MEMORY[0x1E0C809B0];
      v74[1] = 3221225472;
      v74[2] = sub_1BEA4EF14;
      v74[3] = &unk_1E7830AC0;
      v74[4] = v44;
      objc_msgSend__saveNewPCSOnZone_completion_(v44, v45, (uint64_t)v7, v74);
      v34 = 0;
    }
    else
    {
      if (v9)
      {
        v50 = v9;
      }
      else
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v39, *MEMORY[0x1E0C94B20], 5001, CFSTR("Couldn't fetch zone PCS for %@ from the server"), v8);
        v50 = (id)objc_claimAutoreleasedReturnValue();
      }
      v34 = v50;
      v51 = (_QWORD *)MEMORY[0x1E0C95300];
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v52 = (os_log_t *)MEMORY[0x1E0C952D8];
      v53 = (void *)*MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
      {
        v68 = *(void **)(a1 + 32);
        v69 = v53;
        objc_msgSend_zoneID(v68, v70, v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v76 = v72;
        v77 = 2112;
        v78 = v34;
        _os_log_debug_impl(&dword_1BE990000, v69, OS_LOG_TYPE_DEBUG, "Error fetching PCS data for zone %@ from the server: %@", buf, 0x16u);

      }
      if (objc_msgSend_isSystemRecordZoneID(v8, v54, v55)
        && objc_msgSend_CKIsNotFoundError(v34, v56, v57))
      {
        if (*v51 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v58 = *v52;
        if (os_log_type_enabled(*v52, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1BE990000, v58, OS_LOG_TYPE_DEBUG, "systemZone was not found. Creating systemZone and saving it", buf, 2u);
        }
        objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v59, v60);
        v61 = objc_claimAutoreleasedReturnValue();
        dispatch_group_enter(v61);

        v62 = *(void **)(a1 + 32);
        objc_msgSend_systemRecordZone(MEMORY[0x1E0C95088], v63, v64);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v73[0] = MEMORY[0x1E0C809B0];
        v73[1] = 3221225472;
        v73[2] = sub_1BEA4EF60;
        v73[3] = &unk_1E7830AC0;
        v73[4] = *(_QWORD *)(a1 + 32);
        objc_msgSend__saveNewPCSOnZone_completion_(v62, v66, (uint64_t)v65, v73);

      }
      else
      {
        objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v56, 0, v34);
      }
    }
    v48 = 0;
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v46, v47);
  v67 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v67);

}

void sub_1BEA4EF14(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  NSObject *v6;

  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEA4EF60(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  NSObject *v6;

  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1BEA4F54C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(v5, v8, v9);
  objc_msgSend__handleDecryptedZonePCSData_withError_(*(void **)(a1 + 32), v10, (uint64_t)v7, v6);

  if (!v6 && objc_msgSend_wasFetchedFromCache(*(void **)(a1 + 32), v11, v12))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v16 = *(void **)(a1 + 32);
      v17 = v13;
      objc_msgSend_zoneID(v16, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543362;
      v23 = v20;
      _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, "Zone PCS was fetched from cache for %{public}@, checking key rolling requirements", (uint8_t *)&v22, 0xCu);

    }
    objc_msgSend__checkAndUpdateZonePCSIfNeeded(*(void **)(a1 + 32), v14, v15);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v11, v12);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

void sub_1BEA50CD8(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);

}

void sub_1BEA50FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA50FD0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    objc_msgSend_domain(v3, v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v7, v8, *MEMORY[0x1E0C947D8]))
    {
      v11 = objc_msgSend_code(v3, v9, v10);

      if (v11 == 14)
        goto LABEL_11;
    }
    else
    {

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
    {
      v22 = v12;
      objc_msgSend_zoneID(WeakRetained, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v27 = v25;
      v28 = 2112;
      v29 = v3;
      _os_log_error_impl(&dword_1BE990000, v22, OS_LOG_TYPE_ERROR, "Error saving zoneish PCS to server for zone %@: %@", buf, 0x16u);

    }
    v15 = (void *)MEMORY[0x1E0C94FF8];
    v16 = *MEMORY[0x1E0C94B20];
    objc_msgSend_zoneID(WeakRetained, v13, v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(v15, v18, v16, 5001, CFSTR("Couldn't fetch PCS for zone %@: %@"), v17, v3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFetchError_(WeakRetained, v20, (uint64_t)v19);

  }
LABEL_11:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

void sub_1BEA51380(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA513A8(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEA513EC(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v3);

}

void sub_1BEA515C4()
{
  void *v0;

  v0 = (void *)qword_1ED7008A8;
  qword_1ED7008A8 = (uint64_t)&unk_1E78AF618;

}

BOOL sub_1BEA51710(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA51C40()
{
  CKDPrivacyManager *v0;
  const char *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;

  v0 = [CKDPrivacyManager alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2);
  v4 = (void *)qword_1ED702780;
  qword_1ED702780 = inited;

}

void sub_1BEA51DEC(uint64_t a1)
{
  dispatch_group_t v2;
  NSObject *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  _QWORD block[4];
  id v34;
  _QWORD *v35;
  _QWORD v36[4];
  id v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[5];
  id v43;

  v2 = dispatch_group_create();
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create("com.apple.cloudkit.privacyManager.resetQueue", v4);

  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x3032000000;
  v42[3] = sub_1BE9BAF88;
  v42[4] = sub_1BE9BAD78;
  v43 = 0;
  objc_msgSend_currentProcess(CKDDaemonProcess, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isSystemInstalledBinary(v8, v9, v10) & 1) == 0)
  {

    goto LABEL_3;
  }
  objc_msgSend_currentProcess(CKDDaemonProcess, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_processType(v13, v14, v15);

  if (v16 == 2)
  {
LABEL_3:
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 32);
    objc_msgSend_currentProcess(CKDDaemonProcess, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v25, v20, v21, CFSTR("CKDPrivacyManager.m"), 65, CFSTR("Can't reset privacy settings with daemon type %@"), v24);

  }
  objc_msgSend_defaultContext(CKDLogicalDeviceContext, v17, v18);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = sub_1BEA52078;
  v36[3] = &unk_1E7830C60;
  v28 = v26;
  v37 = v28;
  v29 = v2;
  v38 = v29;
  v30 = v5;
  v41 = v42;
  v31 = *(_QWORD *)(a1 + 32);
  v39 = v30;
  v40 = v31;
  CKMuckingWithPersonas(v36);
  CKGetGlobalQueue();
  v32 = objc_claimAutoreleasedReturnValue();
  block[0] = v27;
  block[1] = 3221225472;
  block[2] = sub_1BEA52428;
  block[3] = &unk_1E782ECB8;
  v34 = *(id *)(a1 + 40);
  v35 = v42;
  dispatch_group_notify(v29, v32, block);

  _Block_object_dispose(v42, 8);
}

void sub_1BEA5205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA52078(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  _QWORD block[4];
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend_metadataCache(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_knownAppContainerAccountTuples(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = v7;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v24, v28, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v25;
    v13 = MEMORY[0x1E0C809B0];
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(v8);
        v15 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v14);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
        block[0] = v13;
        block[1] = 3221225472;
        block[2] = sub_1BEA52210;
        block[3] = &unk_1E7830C60;
        v23 = *(_QWORD *)(a1 + 64);
        v16 = *(NSObject **)(a1 + 48);
        v19 = *(id *)(a1 + 40);
        v20 = *(id *)(a1 + 48);
        v21 = v15;
        v22 = *(_QWORD *)(a1 + 56);
        dispatch_async(v16, block);

        ++v14;
      }
      while (v11 != v14);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v17, (uint64_t)&v24, v28, 16);
    }
    while (v11);
  }

}

void sub_1BEA52210(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
    objc_msgSend_appContainerTuple(*(void **)(a1 + 48), v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_personaID(v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = CKAdoptPersonaID(v7);

    if (v8)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v9 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v19 = v13;
        _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Resetting user privacy settings for %@", buf, 0xCu);
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1BEA523D4;
      v14[3] = &unk_1E7830C38;
      v10 = *(void **)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      v11 = *(_QWORD *)(a1 + 48);
      v15 = *(id *)(a1 + 40);
      v16 = *(id *)(a1 + 32);
      objc_msgSend__resetPrivacySettingsForAppContainerAccountTuple_completionHandler_(v10, v12, v11, v14);

    }
  }
}

void sub_1BEA523D4(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v4 = a2;
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_1BEA52428(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

void sub_1BEA52508(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  CKDOperationInfoHolderOperation *v17;
  const char *v18;
  void *v19;
  CKDResetUserPrivacySettingsURLRequest *v20;
  const char *v21;
  void *v22;
  const char *v23;
  id v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  int8x16_t v34;
  _QWORD v35[4];
  int8x16_t v36;
  id v37;
  id v38;
  id location;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend_defaultContext(CKDLogicalDeviceContext, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sharedInternalUseContainers(CKDContainer, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v9, v4, v5, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E0C94F80], v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setQualityOfService_(v13, v14, 17);
  v15 = (void *)objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v15, v16, (uint64_t)v13);
  v17 = [CKDOperationInfoHolderOperation alloc];
  v19 = (void *)objc_msgSend_initWithOperationInfo_container_(v17, v18, (uint64_t)v15, v10);
  v20 = [CKDResetUserPrivacySettingsURLRequest alloc];
  v22 = (void *)objc_msgSend_initWithOperation_(v20, v21, (uint64_t)v19);
  objc_msgSend_setRequest_(v19, v23, (uint64_t)v22);
  objc_initWeak(&location, v22);
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = sub_1BEA52738;
  v35[3] = &unk_1E7830C88;
  objc_copyWeak(&v38, &location);
  v34 = *(int8x16_t *)(a1 + 32);
  v24 = (id)v34.i64[0];
  v36 = vextq_s8(v34, v34, 8uLL);
  v37 = *(id *)(a1 + 48);
  objc_msgSend_setCompletionBlock_(v22, v25, (uint64_t)v35);
  objc_msgSend_operations(*(void **)(a1 + 40), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v28);
  objc_msgSend_operations(*(void **)(a1 + 40), v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v31, v32, (uint64_t)v19);

  objc_sync_exit(v28);
  objc_msgSend_performRequest_(v10, v33, (uint64_t)v22);

  objc_destroyWeak(&v38);
  objc_destroyWeak(&location);

}

void sub_1BEA52708(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA52738(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend_operations(*(void **)(a1 + 32), v2, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v5);
    objc_msgSend_operations(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_operation(WeakRetained, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObject_(v8, v12, (uint64_t)v11);

    objc_sync_exit(v5);
  }
  objc_msgSend_error(WeakRetained, v2, v3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v16 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v25 = v20;
      v26 = 2112;
      v27 = v15;
      _os_log_error_impl(&dword_1BE990000, v16, OS_LOG_TYPE_ERROR, "Failed to reset user privacy settings for %@: %@", buf, 0x16u);
    }
  }
  objc_msgSend_privacyManagerQueue(*(void **)(a1 + 32), v13, v14);
  v17 = objc_claimAutoreleasedReturnValue();
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BEA52948;
  v21[3] = &unk_1E782EC68;
  v18 = *(id *)(a1 + 48);
  v22 = v15;
  v23 = v18;
  v19 = v15;
  dispatch_async(v17, v21);

}

void sub_1BEA5292C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA52948(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1BEA52CA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA52D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA52D74(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

uint64_t sub_1BEA52E08(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1BEA52EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA52ED8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 9);
  return result;
}

uint64_t sub_1BEA52F6C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 9) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1BEA530B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BEA53334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA53518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA535DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA53660(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA5388C(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v4;
  void *v5;
  const char *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (void **)(a1 + 32);
  objc_msgSend_completionHandlersByItemID(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v5);
  objc_msgSend_callbacksForItemWithID_(*v4, v6, *(_QWORD *)(a1 + 40));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v14, v18, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11) + 16))(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11));
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v12, (uint64_t)&v14, v18, 16);
    }
    while (v9);
  }

  objc_msgSend_removeCallbacksForItemWithID_(*(void **)(a1 + 32), v13, *(_QWORD *)(a1 + 40), (_QWORD)v14);
  objc_sync_exit(v5);

}

void sub_1BEA539C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA53A88(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  const char *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _BOOL8 v37;
  id obj;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (void **)(a1 + 32);
  objc_msgSend_completionHandlersByItemID(*(void **)(a1 + 32), a2, a3);
  obj = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  objc_msgSend_allItemIDs(*v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v43, v48, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v44 != v11)
          objc_enumerationMutation(v7);
        v13 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend_callbacksForItemWithID_(*(void **)(a1 + 32), v9, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v15 = v14;
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v39, v47, 16);
        if (v17)
        {
          v18 = *(_QWORD *)v40;
          do
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v40 != v18)
                objc_enumerationMutation(v15);
              (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * j) + 16))();
            }
            v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v20, (uint64_t)&v39, v47, 16);
          }
          while (v17);
        }

        objc_msgSend_removeCallbacksForItemWithID_(*(void **)(a1 + 32), v21, v13);
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v9, (uint64_t)&v43, v48, 16);
    }
    while (v10);
  }

  objc_sync_exit(obj);
  objc_msgSend_completionHandler(*(void **)(a1 + 32), v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    objc_msgSend_highestQOS(*(void **)(a1 + 32), v25, v26);
    CKGetGlobalQueue();
    v27 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_completionHandler(*(void **)(a1 + 32), v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    dispatch_async(v27, v30);

  }
  objc_msgSend_setIsFinished_(*(void **)(a1 + 32), v25, 1);
  objc_msgSend_domain(*(void **)(a1 + 40), v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v33, v34, *MEMORY[0x1E0C947D8]))
    v37 = objc_msgSend_code(*(void **)(a1 + 40), v35, v36) == 20;
  else
    v37 = 0;
  objc_msgSend_setIsCancelled_(*(void **)(a1 + 32), v35, v37);

}

void sub_1BEA53D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BEA540D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA5415C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA54270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1BEA54284(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  NSObject *v48;
  id v49;
  void *v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  __int128 v60;
  void *v61;
  NSObject *group;
  _QWORD block[4];
  id v64;
  id v65;
  _QWORD v66[5];
  id v67;
  NSObject *v68;
  id v69;
  id location;
  uint8_t buf[4];
  uint64_t v72;
  __int16 v73;
  _BYTE v74[14];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v6 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_INFO, "Not starting fetch because this operation has already been cancelled", buf, 2u);
    }
  }
  else
  {
    if (objc_msgSend_isFinished(*(void **)(a1 + 32), v4, v5)
      && objc_msgSend_isFinished(*(void **)(a1 + 32), v7, v8))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v58, v59, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKDQueuedFetch.m"), 292, CFSTR("You can't restart a fetch that has already finished"));

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v11 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v50 = *(void **)(a1 + 32);
      v51 = v11;
      v54 = objc_msgSend_numberOfCallbacks(v50, v52, v53);
      objc_msgSend_highestQOS(*(void **)(a1 + 32), v55, v56);
      CKStringForQOS();
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v72 = (uint64_t)v50;
      v73 = 1024;
      *(_DWORD *)v74 = v54;
      *(_WORD *)&v74[4] = 2114;
      *(_QWORD *)&v74[6] = v57;
      _os_log_debug_impl(&dword_1BE990000, v51, OS_LOG_TYPE_DEBUG, "Starting aggregate fetch %@ with %d callbacks at QoS %{public}@", buf, 0x1Cu);

    }
    v12 = (void *)objc_opt_new();
    group = dispatch_group_create();
    objc_msgSend_container(*(void **)(a1 + 32), v13, v14);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_serverConfig(v61, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerID(v61, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_maxBatchSize_(v17, v21, (uint64_t)v20);

    if (v22 <= 0)
    {
      objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend_maxBatchSize(v25, v26, v27);

    }
    objc_msgSend_allItemIDs(*(void **)(a1 + 32), v23, v24);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_count(v28, v29, v30);

    objc_initWeak(&location, *(id *)(a1 + 32));
    if (v31 >= 1)
    {
      v35 = 0;
      *(_QWORD *)&v34 = 134218240;
      v60 = v34;
      do
      {
        if (v22 >= v31 - v35)
          v36 = v31 - v35;
        else
          v36 = v22;
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v37 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v60;
          v72 = v36;
          v73 = 2048;
          *(_QWORD *)v74 = v35;
          _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Generating a batch of %ld records from index %ld", buf, 0x16u);
        }
        objc_msgSend_allItemIDs(*(void **)(a1 + 32), v38, v39, v60);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_subarrayWithRange_(v40, v41, v35, v36);
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        v43 = *(void **)(a1 + 32);
        objc_msgSend_operationQueue(v43, v44, v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v66[0] = MEMORY[0x1E0C809B0];
        v66[1] = 3221225472;
        v66[2] = sub_1BEA547BC;
        v66[3] = &unk_1E7830CD8;
        v66[4] = *(_QWORD *)(a1 + 32);
        objc_copyWeak(&v69, &location);
        v67 = v12;
        v68 = group;
        objc_msgSend_createFetchOperationForItemIDs_operationQueue_operationConfigurationBlock_(v43, v47, (uint64_t)v42, v46, v66);

        objc_destroyWeak(&v69);
        v35 += v36;
      }
      while (v35 < v31);
    }
    objc_msgSend_highestQOS(*(void **)(a1 + 32), v32, v33);
    CKGetGlobalQueue();
    v48 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA54B3C;
    block[3] = &unk_1E782E4E0;
    objc_copyWeak(&v65, &location);
    v64 = v12;
    v49 = v12;
    dispatch_group_notify(group, v48, block);

    objc_destroyWeak(&v65);
    objc_destroyWeak(&location);

  }
}

void sub_1BEA5478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA547BC(void **a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id location;

  v3 = a2;
  v6 = objc_msgSend_highestQOS(a1[4], v4, v5);
  objc_msgSend_setQualityOfService_(v3, v7, v6);
  objc_msgSend_operationID(v3, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setRunningOperationID_(a1[4], v11, (uint64_t)v10);

  objc_initWeak(&location, v3);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BEA54904;
  v13[3] = &unk_1E7830CB0;
  objc_copyWeak(&v16, a1 + 7);
  objc_copyWeak(&v17, &location);
  v14 = a1[5];
  v15 = a1[6];
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v13);
  dispatch_group_enter((dispatch_group_t)a1[6]);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);

}

void sub_1BEA548E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1BEA54904(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  uint64_t v27;
  void *v28;
  const __CFString *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  const __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = objc_loadWeakRetained((id *)(a1 + 56));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v18 = v4;
    v19 = (objc_class *)objc_opt_class();
    NSStringFromClass(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_error(v3, v21, v22);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v25)
      v26 = CFSTR(" with error ");
    else
      v26 = &stru_1E7838F48;
    objc_msgSend_error(v3, v23, v24);
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = (void *)v27;
    if (v27)
      v29 = (const __CFString *)v27;
    else
      v29 = &stru_1E7838F48;
    v30 = 138544130;
    v31 = v20;
    v32 = 2112;
    v33 = WeakRetained;
    v34 = 2114;
    v35 = v26;
    v36 = 2112;
    v37 = v29;
    _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "%{public}@ operation %@ finished%{public}@%@.", (uint8_t *)&v30, 0x2Au);

  }
  objc_msgSend_error(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v10 = *(id *)(a1 + 32);
    objc_sync_enter(v10);
    v11 = *(void **)(a1 + 32);
    objc_msgSend_error(v3, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v11, v15, (uint64_t)v14);

    objc_sync_exit(v10);
  }
  objc_msgSend_initialOperation(WeakRetained, v8, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_combineMetricsWithOperation_(v16, v17, (uint64_t)v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1BEA54B20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA54B3C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  _BYTE v15[22];
  __int16 v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v8 = *(void **)(a1 + 32);
    v9 = v3;
    v12 = objc_msgSend_count(v8, v10, v11);
    v13 = CFSTR(" with errors ");
    v14 = *(const __CFString **)(a1 + 32);
    if (!v12)
      v13 = &stru_1E7838F48;
    *(_DWORD *)v15 = 138412802;
    *(_QWORD *)&v15[4] = WeakRetained;
    if (!v14)
      v14 = &stru_1E7838F48;
    *(_WORD *)&v15[12] = 2112;
    *(_QWORD *)&v15[14] = v13;
    v16 = 2112;
    v17 = v14;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Bulk record fetch operation %@ finished%@%@.", v15, 0x20u);

  }
  objc_msgSend_firstObject(*(void **)(a1 + 32), v4, v5, *(_OWORD *)v15);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_finishFetchOperationWithError_(WeakRetained, v7, (uint64_t)v6);

}

void *sub_1BEA550B8(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t hasPrefix;

  if (result)
  {
    objc_msgSend_url(result, a2, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    hasPrefix = objc_msgSend_hasPrefix_(v6, v7, (uint64_t)CFSTR("/setup"));

    return (void *)hasPrefix;
  }
  return result;
}

void sub_1BEA55110(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1 && *MEMORY[0x1E0C95280] && (sub_1BEA550B8(a1, a2, a3) & 1) == 0)
  {
    objc_msgSend_unitTestOverrides(a1, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)CFSTR("TestInjectedThrottles"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v8, v9, v10))
    {
      objc_msgSend_operation(a1, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_deviceContext(v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_throttleManager(v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v20 = v8;
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v27, v31, 16);
      if (v22)
      {
        v24 = v22;
        v25 = *(_QWORD *)v28;
        do
        {
          v26 = 0;
          do
          {
            if (*(_QWORD *)v28 != v25)
              objc_enumerationMutation(v20);
            objc_msgSend_addThrottle_(v19, v23, *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v26++), (_QWORD)v27);
          }
          while (v24 != v26);
          v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v23, (uint64_t)&v27, v31, 16);
        }
        while (v24);
      }

    }
  }
}

void sub_1BEA55680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA556A4(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_setIsWaitingOnAuthRenew_(WeakRetained, v6, 0);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v8);

}

void sub_1BEA55A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA55AA0(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  id v38;
  const char *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  _QWORD v44[5];
  id v45;
  char v46;
  uint8_t buf[4];
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (*MEMORY[0x1E0C95280]
    && (objc_msgSend_unitTestOverrides(WeakRetained, v7, v8),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("TestAuthTokenRenewalFailsBecauseRenewedTokenIsStale")), v12 = (void *)objc_claimAutoreleasedReturnValue(), v12, v10, v12))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v40 = v13;
      objc_msgSend_requestUUID(v9, v41, v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v48 = v43;
      _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Failing credential renewal with a stale token error for tests for request %{public}@", buf, 0xCu);

    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v14, *MEMORY[0x1E0C94B20], 2011, CFSTR("Got a CloudKit auth token that has already failed a previous auth attempt"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_container(v9, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_account(v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_accountType(v21, v22, v23);

    if (v24 == 3)
    {
      objc_msgSend_container(v9, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_account(v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_backingAccount(v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_testDevice(v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_daemonSetHasValidCredentials_(v36, v37, 0);

    }
    a2 = 0;
  }
  else
  {
    v15 = v5;
  }
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = sub_1BEA55D10;
  v44[3] = &unk_1E7830628;
  v46 = a2;
  v44[4] = v9;
  v45 = v15;
  v38 = v15;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v9, v39, (uint64_t)v44);

}

void sub_1BEA55D10(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  int v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_invalidateCachedAccountInfo(MEMORY[0x1E0C94B88], a2, a3);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(void **)(a1 + 32);
      v8 = v4;
      objc_msgSend_requestUUID(v7, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543362;
      v27 = v11;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Auth token acquired. Retrying.\"", (uint8_t *)&v26, 0xCu);

    }
    objc_msgSend_retryRequest(*(void **)(a1 + 32), v5, v6);
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(void **)(a1 + 32);
      v15 = v12;
      objc_msgSend_requestUUID(v14, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543362;
      v27 = v18;
      _os_log_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Warn: Couldn't renew an auth token- cancelling this request\"", (uint8_t *)&v26, 0xCu);

    }
    objc_msgSend_setLastRetryAuthError_(*(void **)(a1 + 32), v13, *(_QWORD *)(a1 + 40));
    v19 = *(void **)(a1 + 32);
    objc_msgSend_container(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v22, v23, *(_QWORD *)(a1 + 40));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(v19, v25, (uint64_t)v24);

  }
}

void sub_1BEA55F78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v4 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
    {
      v5 = *(void **)(a1 + 32);
      v6 = v4;
      objc_msgSend_requestUUID(v5, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v3;
      _os_log_error_impl(&dword_1BE990000, v6, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Error parsing protobuf object: %@\"", (uint8_t *)&v10, 0x16u);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1BEA57538(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  void (**v9)(_QWORD);
  const char *v10;
  _QWORD v11[5];
  id v12;

  v6 = a2;
  v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEA575D8;
  v11[3] = &unk_1E782EE20;
  v11[4] = v7;
  v12 = v6;
  v8 = v6;
  v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);

}

uint64_t sub_1BEA575D8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleServerJSONResult_, *(_QWORD *)(a1 + 40));
}

void sub_1BEA575E8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  void (**v9)(_QWORD);
  const char *v10;
  _QWORD v11[5];
  id v12;

  v6 = a2;
  v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEA57688;
  v11[3] = &unk_1E782EE20;
  v11[4] = v7;
  v12 = v6;
  v8 = v6;
  v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);

}

uint64_t sub_1BEA57688(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handlePlistResult_, *(_QWORD *)(a1 + 40));
}

void sub_1BEA57698(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  void (**v9)(_QWORD);
  const char *v10;
  _QWORD v11[5];
  id v12;

  v6 = a2;
  v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEA57738;
  v11[3] = &unk_1E782EE20;
  v11[4] = v7;
  v12 = v6;
  v8 = v6;
  v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);

}

uint64_t sub_1BEA57738(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_requestDidParsePlaintextObject_, *(_QWORD *)(a1 + 40));
}

void sub_1BEA57748(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  void (**v9)(_QWORD);
  const char *v10;
  _QWORD v11[5];
  id v12;

  v6 = a2;
  v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BEA577E8;
  v11[3] = &unk_1E782EE20;
  v11[4] = v7;
  v12 = v6;
  v8 = v6;
  v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);

}

uint64_t sub_1BEA577E8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_requestDidParse509CertObject_, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1BEA5809C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a3)
    return objc_msgSend_finishWithError_(v3, a2, a3);
  else
    return MEMORY[0x1E0DE7D20](v3, sel__setupPrivateDatabaseURL, 0);
}

void sub_1BEA580AC(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  objc_class *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  id v14;

  v14 = a3;
  if (a2)
  {
    objc_msgSend__setupConfiguration(*(void **)(a1 + 32), v5, v6);
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C94FF8];
    v8 = *MEMORY[0x1E0C94B20];
    v9 = (objc_class *)objc_opt_class();
    NSStringFromClass(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_error_format_(v7, v11, v8, 2005, v14, CFSTR("Request (%@) does not have a URL"), v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v13, (uint64_t)v12);
  }

}

uint64_t sub_1BEA5815C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a3)
    return objc_msgSend_finishWithError_(v3, a2, a3);
  else
    return objc_msgSend__fetchContainerScopedUserID(v3, a2, 0);
}

void sub_1BEA5816C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  id v10;
  const char *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BE9C36F0;
  v12[3] = &unk_1E782F4A8;
  v13 = v7;
  v14 = v6;
  v15 = WeakRetained;
  v16 = *(id *)(a1 + 32);
  v9 = v6;
  v10 = v7;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(WeakRetained, v11, (uint64_t)v12);

}

uint64_t sub_1BEA58288(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int shouldRefetchTrusts;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  char v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v39;
  uint8_t buf[2];

  objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_acceptServerSignedRecords(v7, v8, v9))
  {
    shouldRefetchTrusts = objc_msgSend_shouldRefetchTrusts(CKDServerTrustCache, v10, v11);

    if (shouldRefetchTrusts)
    {
      objc_msgSend_setFetchAttempt(CKDServerTrustCache, v13, v14);
      v15 = (void *)objc_opt_new();
      objc_msgSend_operation(*(void **)(a1 + 32), v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_opt_class();
      objc_msgSend_container(*(void **)(a1 + 32), v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_spawnAndRunOperationOfClass_operationInfo_spawnQueue_container_operationConfigurationBlock_(v18, v23, v19, v15, 0, v22, &unk_1E7830F68);

      return objc_msgSend__fetchDeviceID(*(void **)(a1 + 32), v24, v25, v39);
    }
  }
  else
  {

  }
  if ((objc_msgSend_shouldRefetchTrusts(CKDServerTrustCache, v13, v14) & 1) != 0)
  {
    objc_msgSend_container(*(void **)(a1 + 32), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_options(v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend_acceptServerSignedRecords(v31, v32, v33);

    if ((v34 & 1) == 0)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v35 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v39) = 0;
        v36 = "Skipping server certificate fetch because the container options do not specify accepting server signed records";
        v37 = (uint8_t *)&v39;
LABEL_16:
        _os_log_debug_impl(&dword_1BE990000, v35, OS_LOG_TYPE_DEBUG, v36, v37, 2u);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v35 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v36 = "Skipping server certificate fetch because conditions are not appropriate for refetching";
      v37 = buf;
      goto LABEL_16;
    }
  }
  return objc_msgSend__fetchDeviceID(*(void **)(a1 + 32), v24, v25, v39);
}

void sub_1BEA584A0(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  _QWORD v4[4];
  id v5;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BEA58558;
  v4[3] = &unk_1E782EF38;
  objc_copyWeak(&v5, &location);
  objc_msgSend_setCompletionBlock_(v2, v3, (uint64_t)v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);

}

void sub_1BEA5853C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEA58558(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_validatedTrusts(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_count(v4, v5, v6);

  if (v7)
  {
    objc_msgSend_validatedTrusts(WeakRetained, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValidatedTrusts_(CKDServerTrustCache, v11, (uint64_t)v10);

    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v13 = v12;
      objc_msgSend_validatedTrusts(WeakRetained, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v16;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Successfully fetched validated server signing trusts: %@", (uint8_t *)&v18, 0xCu);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18) = 0;
      _os_log_error_impl(&dword_1BE990000, v17, OS_LOG_TYPE_ERROR, "Certificate fetch did not result in any valid trusts.", (uint8_t *)&v18, 2u);
    }
  }

}

void sub_1BEA5871C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_ERROR))
    {
      v7 = v5;
      objc_msgSend_requestUUID(WeakRetained, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(WeakRetained, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2114;
      v17 = v13;
      v18 = 2112;
      v19 = v3;
      _os_log_error_impl(&dword_1BE990000, v7, OS_LOG_TYPE_ERROR, "req: %{public}@, \"%{public}@ Failed to register push tokens: %@\"", (uint8_t *)&v14, 0x20u);

    }
  }
  if (*MEMORY[0x1E0C95280])
  {
    v6 = *(NSObject **)(a1 + 32);
    if (v6)
      dispatch_semaphore_signal(v6);
  }

}

void sub_1BEA588D8(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(_QWORD);
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  objc_class *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[5];
  void (**v26)(_QWORD);
  _QWORD aBlock[5];
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEA58B00;
  aBlock[3] = &unk_1E782EA40;
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v3 = (void (**)(_QWORD))_Block_copy(aBlock);
  objc_msgSend_operation(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clientOperationCallbackProxy(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEBUG))
    {
      v17 = *(void **)(a1 + 32);
      v18 = v10;
      objc_msgSend_requestUUID(v17, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v21;
      v30 = 2114;
      v31 = v24;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"Request %{public}@ calling out to client about lifecycle transition\"", buf, 0x16u);

    }
    v11 = (objc_class *)objc_opt_class();
    NSStringFromClass(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_testRequestProperties(*(void **)(a1 + 32), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = v2;
    v25[1] = 3221225472;
    v25[2] = sub_1BEA58B4C;
    v25[3] = &unk_1E7830F90;
    v25[4] = *(_QWORD *)(a1 + 32);
    v26 = v3;
    objc_msgSend_handleDaemonRequestWillSendWithClassName_testRequestProperties_replyBlock_(v9, v16, (uint64_t)v12, v15, v25);

  }
  else
  {
    v3[2](v3);
  }

}

uint64_t sub_1BEA58B00(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) != 0
    || objc_msgSend_isFinished(*(void **)(a1 + 32), v4, v5))
  {
    return objc_msgSend_finishWithError_(*(void **)(a1 + 32), v4, 0);
  }
  else
  {
    return objc_msgSend__performRequest(*(void **)(a1 + 32), v4, v6);
  }
}

void sub_1BEA58B4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)*MEMORY[0x1E0C952F8];
  if (v6)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v16 = 138412290;
      v17 = v6;
      _os_log_error_impl(&dword_1BE990000, v8, OS_LOG_TYPE_ERROR, "Asked client what to do for a daemon request, it responded with an error %@", (uint8_t *)&v16, 0xCu);
      if (!v5)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v7);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v11 = *(void **)(a1 + 32);
      v12 = v10;
      objc_msgSend_ckShortDescription(v11, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v15;
      v18 = 2112;
      v19 = v5;
      _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "Request %{public}@ was told to take action \"%@\"", (uint8_t *)&v16, 0x16u);

      if (!v5)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v5)
LABEL_11:
    objc_msgSend_takeActionOnURLRequest_(v5, v9, *(_QWORD *)(a1 + 32));
LABEL_12:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1BEA58D0C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  if ((_DWORD)a2)
  {
    objc_msgSend__prepareAuthTokens(*(void **)(a1 + 32), a2, a3);
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C94B20], 1000, CFSTR("Can't acquire zone lock, failing the request"));
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(v3, v4, (uint64_t)v5);

  }
}

void sub_1BEA58D84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id WeakRetained;
  const char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  void *v21;
  const char *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  uint8_t buf[4];
  void *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_setICloudAuthToken_(WeakRetained, v8, v5);
  if (*MEMORY[0x1E0C95280])
  {
    if ((objc_msgSend_didRetryAuth(WeakRetained, v9, v10) & 1) != 0
      || (objc_msgSend_unitTestOverrides(WeakRetained, v11, v12),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v13, v14, (uint64_t)CFSTR("TestContainerSpecificOpWithBadiCloudToken")),
          v15 = (void *)objc_claimAutoreleasedReturnValue(),
          v15,
          v13,
          !v15))
    {
      if ((objc_msgSend_didFetchNilAuthToken(WeakRetained, v11, v12) & 1) == 0)
      {
        objc_msgSend_unitTestOverrides(WeakRetained, v9, v10);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)CFSTR("TestContainerSpecificOpWithNoiCloudToken"));
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v21 = (void *)*MEMORY[0x1E0C952B0];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
          {
            v50 = v21;
            objc_msgSend_requestUUID(WeakRetained, v51, v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v55 = v53;
            _os_log_debug_impl(&dword_1BE990000, v50, OS_LOG_TYPE_DEBUG, "Using nil iCloud token for request %{public}@", buf, 0xCu);

          }
          objc_msgSend_setDidFetchNilAuthToken_(WeakRetained, v22, 1);
          objc_msgSend_setICloudAuthToken_(WeakRetained, v23, 0);

          v24 = (void *)MEMORY[0x1E0C94FF8];
          v25 = *MEMORY[0x1E0C94B20];
          objc_msgSend_container(WeakRetained, v26, v27);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_account(v28, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_accountID(v31, v32, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_errorWithDomain_code_format_(v24, v35, v25, 1002, CFSTR("Didn't get mmeAuthToken credentials for account %@ with no error"), v34);
          v36 = objc_claimAutoreleasedReturnValue();

          v5 = 0;
          v6 = (id)v36;
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v16 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v46 = v16;
        objc_msgSend_requestUUID(WeakRetained, v47, v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v55 = v49;
        _os_log_debug_impl(&dword_1BE990000, v46, OS_LOG_TYPE_DEBUG, "Using a fake iCloud token for request %{public}@", buf, 0xCu);

      }
      objc_msgSend_setICloudAuthToken_(WeakRetained, v17, (uint64_t)CFSTR("tacos"));
    }
  }
  if (v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6);
  if (!(v5 | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)))
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v9, *MEMORY[0x1E0C94B20], 2011, CFSTR("Didn't get an iCloud auth token"));
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v39 = *(void **)(v38 + 40);
    *(_QWORD *)(v38 + 40) = v37;

  }
  objc_msgSend_container(WeakRetained, v9, v10);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v40, v41, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v42 = objc_claimAutoreleasedReturnValue();
  v43 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v44 = *(void **)(v43 + 40);
  *(_QWORD *)(v43 + 40) = v42;

  objc_msgSend_setLastRetryAuthError_(WeakRetained, v45, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1BEA59158(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  void *v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[22];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_msgSend_isFinished(WeakRetained, v3, v4))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v8 = v7;
      objc_msgSend_requestUUID(WeakRetained, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v33 = 138543362;
      *(_QWORD *)&v33[4] = v11;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "req: %{public}@, \"Request was finished while waiting for auth tokens\"", v33, 0xCu);

    }
    goto LABEL_19;
  }
  if (objc_msgSend_sendRequestAnonymously(WeakRetained, v5, v6))
  {
LABEL_18:
    objc_msgSend__registerPushTokens(WeakRetained, v12, v13, *(_OWORD *)v33);
    goto LABEL_19;
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v22 = (void *)*MEMORY[0x1E0C952E0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
      goto LABEL_18;
    v17 = v22;
    objc_msgSend_requestUUID(WeakRetained, v23, v24);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v33 = 138543362;
    *(_QWORD *)&v33[4] = v20;
    v21 = "req: %{public}@, \"Fetched auth tokens\"";
LABEL_17:
    _os_log_impl(&dword_1BE990000, v17, OS_LOG_TYPE_INFO, v21, v33, 0xCu);

    goto LABEL_18;
  }
  v14 = objc_msgSend_allowsAnonymousAccount(WeakRetained, v12, v13);
  v15 = (void *)*MEMORY[0x1E0C952F8];
  if (v14)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v15);
    v16 = (void *)*MEMORY[0x1E0C952E0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
      goto LABEL_18;
    v17 = v16;
    objc_msgSend_requestUUID(WeakRetained, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v33 = 138543362;
    *(_QWORD *)&v33[4] = v20;
    v21 = "req: %{public}@, \"Failed to fetch auth tokens, continuing with anonymous access\"";
    goto LABEL_17;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v15);
  v25 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
  {
    v28 = v25;
    objc_msgSend_requestUUID(WeakRetained, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    *(_DWORD *)v33 = 138543618;
    *(_QWORD *)&v33[4] = v31;
    *(_WORD *)&v33[12] = 2112;
    *(_QWORD *)&v33[14] = v32;
    _os_log_impl(&dword_1BE990000, v28, OS_LOG_TYPE_INFO, "req: %{public}@, \"Encountered an error while fetching auth tokens: %@\"", v33, 0x16u);

  }
  objc_msgSend__handleAuthFailure(WeakRetained, v26, v27);
LABEL_19:

}

uint64_t sub_1BEA5946C(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setValue_forHTTPHeaderField_(*(void **)(a1 + 32), a2, a3, a2);
}

uint64_t sub_1BEA5947C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_URLSession_task_didCompleteWithError_, *(_QWORD *)(a1 + 40));
}

void sub_1BEA594F8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  const char *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v3;
    objc_msgSend_requestUUID(v5, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v9;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"cancel\"", (uint8_t *)&v22, 0xCu);

  }
  objc_msgSend_setCancelled_(*(void **)(a1 + 32), v4, 1);
  objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    if (*v2 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v17 = *(void **)(a1 + 32);
      v18 = v14;
      objc_msgSend_ckShortDescription(v17, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412546;
      v23 = v13;
      v24 = 2114;
      v25 = v21;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Cancelling the URL session data task %@ for request %{public}@", (uint8_t *)&v22, 0x16u);

    }
    objc_msgSend_cancel(v13, v15, v16);
  }
  objc_msgSend_finishWithError_(*(void **)(a1 + 32), v12, 0);

}

uint64_t sub_1BEA596D8(uint64_t a1, const char *a2)
{
  return objc_msgSend__finishOnLifecycleQueueWithError_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

void sub_1BEA59C9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA59CBC(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v3 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v4 = 138543362;
    v5 = v2;
    _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Received response from Diagnostic Reporter - %{public}@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_1BEA59F54(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  char isEqualToString;
  dispatch_block_t *v13;
  void *v14;
  _QWORD *v15;
  os_log_t *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  char hasPrefix;
  const char *v41;
  uint64_t v42;
  os_log_t v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  os_log_t v85;
  const char *v86;
  void *v87;
  NSObject *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  os_log_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  int v108;
  void *v109;
  __int16 v110;
  void *v111;
  __int16 v112;
  void *v113;
  __int16 v114;
  void *v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  objc_msgSend_taskDescription(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_taskDescription(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v4, v11, (uint64_t)v10);

  v13 = (dispatch_block_t *)MEMORY[0x1E0C952F8];
  v14 = (void *)*MEMORY[0x1E0C952F8];
  v15 = (_QWORD *)MEMORY[0x1E0C95300];
  if ((isEqualToString & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v14);
    v49 = (void *)*MEMORY[0x1E0C952E0];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
      goto LABEL_32;
    v50 = *(void **)(a1 + 40);
    v45 = v49;
    objc_msgSend_requestUUID(v50, v51, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v54, v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = *(void **)(a1 + 32);
    objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = 138544130;
    v109 = v53;
    v110 = 2114;
    v111 = v56;
    v112 = 2112;
    v113 = v57;
    v114 = 2112;
    v115 = v60;
    _os_log_impl(&dword_1BE990000, v45, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", (uint8_t *)&v108, 0x2Au);

    goto LABEL_31;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], v14);
  v16 = (os_log_t *)MEMORY[0x1E0C952E0];
  v17 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(void **)(a1 + 40);
    v21 = v17;
    objc_msgSend_requestUUID(v20, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = 138543362;
    v109 = v24;
    _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:\"", (uint8_t *)&v108, 0xCu);

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) = 1;
  if (*(_QWORD *)(a1 + 48) && (objc_msgSend_allowAutomaticRedirects(*(void **)(a1 + 40), v18, v19) & 1) == 0)
  {
    if (*v15 != -1)
      dispatch_once(MEMORY[0x1E0C95300], *v13);
    v98 = *v16;
    if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    v99 = *(void **)(a1 + 40);
    v45 = v98;
    objc_msgSend_requestUUID(v99, v100, v101);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = *(void **)(a1 + 32);
    objc_msgSend_request(*(void **)(a1 + 40), v103, v104);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = *(void **)(a1 + 48);
    v106 = *(void **)(a1 + 56);
    v108 = 138544386;
    v109 = v48;
    v110 = 2112;
    v111 = v102;
    v112 = 2112;
    v113 = v105;
    v114 = 2112;
    v115 = v106;
    v116 = 2112;
    v117 = v107;
    _os_log_impl(&dword_1BE990000, v45, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Task is getting redirected but automatic redirections are disabled.  Task: [%@]\\nInitial request: [%@]\\nProposed request: [%@]\\nRedirect response: [%@]\"", (uint8_t *)&v108, 0x34u);

LABEL_30:
LABEL_31:

LABEL_32:
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    return;
  }
  objc_msgSend_request(*(void **)(a1 + 40), v18, v19);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URL(v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_scheme(v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_hasPrefix_(v31, v32, (uint64_t)CFSTR("https")) & 1) != 0)
  {
    objc_msgSend_URL(*(void **)(a1 + 56), v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_scheme(v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    hasPrefix = objc_msgSend_hasPrefix_(v38, v39, (uint64_t)CFSTR("https"));

    if ((hasPrefix & 1) == 0)
    {
      if (*v15 != -1)
        dispatch_once(MEMORY[0x1E0C95300], *v13);
      v43 = *v16;
      if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      v44 = *(void **)(a1 + 40);
      v45 = v43;
      objc_msgSend_requestUUID(v44, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v108 = 138543362;
      v109 = v48;
      _os_log_impl(&dword_1BE990000, v45, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Request is being redirected between https and http. We're not falling for that one\"", (uint8_t *)&v108, 0xCu);
      goto LABEL_30;
    }
  }
  else
  {

  }
  v61 = (void *)objc_msgSend_mutableCopy(*(void **)(a1 + 56), v41, v42);
  objc_msgSend_URL(*(void **)(a1 + 56), v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setURL_(v61, v65, (uint64_t)v64);

  objc_msgSend_setHTTPShouldHandleCookies_(v61, v66, 1);
  if (objc_msgSend_hasRequestBody(*(void **)(a1 + 40), v67, v68))
  {
    objc_msgSend_requestBodyStream(*(void **)(a1 + 40), v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setHTTPBodyStream_(v61, v72, (uint64_t)v71);

  }
  objc_msgSend_request(*(void **)(a1 + 40), v69, v70);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_HTTPMethod(v73, v74, v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setHTTPMethod_(v61, v77, (uint64_t)v76);

  objc_msgSend_request(*(void **)(a1 + 40), v78, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allHTTPHeaderFields(v80, v81, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAllHTTPHeaderFields_(v61, v84, (uint64_t)v83);

  if (*v15 != -1)
    dispatch_once(MEMORY[0x1E0C95300], *v13);
  v85 = *v16;
  if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
  {
    v87 = *(void **)(a1 + 40);
    v88 = v85;
    objc_msgSend_requestUUID(v87, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = *(void **)(a1 + 32);
    objc_msgSend_request(*(void **)(a1 + 40), v93, v94);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = *(_QWORD *)(a1 + 48);
    v96 = *(void **)(a1 + 56);
    v108 = 138544642;
    v109 = v91;
    v110 = 2112;
    v111 = v92;
    v112 = 2112;
    v113 = v95;
    v114 = 2112;
    v115 = v96;
    v116 = 2112;
    v117 = v61;
    v118 = 2112;
    v119 = v97;
    _os_log_impl(&dword_1BE990000, v88, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Task is getting redirected: [%@]\\nInitial request: [%@]\\nProposed request: [%@]\\nReconstructed request: [%@]\\nRedirect response: [%@]\"", (uint8_t *)&v108, 0x3Eu);

  }
  objc_msgSend_setRequest_(*(void **)(a1 + 40), v86, (uint64_t)v61);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1BEA5A548(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = (void *)*MEMORY[0x1E0C952F8];
  if (v7)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v9 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v16 = 138412290;
      v17 = v7;
      _os_log_error_impl(&dword_1BE990000, v9, OS_LOG_TYPE_ERROR, "Asked client what to do for a daemon request, it responded with an error %@", (uint8_t *)&v16, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v10 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v11 = *(void **)(a1 + 32);
      v12 = v10;
      objc_msgSend_ckShortDescription(v11, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v15;
      v18 = 2112;
      v19 = v6;
      _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "Request %{public}@ was told to take action \"%@\"", (uint8_t *)&v16, 0x16u);

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_1BEA5A704(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend_valueForHTTPHeaderField_(*(void **)(a1 + 32), a2, *MEMORY[0x1E0C94850]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 40);
    v6 = v4;
    objc_msgSend_requestUUID(v5, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v9;
    v12 = 2114;
    v13 = v3;
    _os_log_impl(&dword_1BE990000, v6, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received response UUID:%{public}@, but was already cancelled.  Cancelling NSURLSessionDataTask\"", (uint8_t *)&v10, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1BEA5AA20(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA5AA28(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1BEA5ABBC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  char isEqualToString;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  int v57;
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      LOWORD(v57) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "New body stream", (uint8_t *)&v57, 2u);
    }

  }
  objc_msgSend_taskDescription(*(void **)(a1 + 40), v5, v6);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_taskDescription(v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v17, v24, (uint64_t)v23);

  v26 = (void *)*MEMORY[0x1E0C952F8];
  if ((isEqualToString & 1) != 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v26);
    v27 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
    {
      v30 = *(void **)(a1 + 32);
      v31 = v27;
      objc_msgSend_requestUUID(v30, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = 138543362;
      v58 = v34;
      _os_log_impl(&dword_1BE990000, v31, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:task:needNewBodyStream:\"", (uint8_t *)&v57, 0xCu);

    }
    objc_msgSend_shared(CKDTrafficLogger, v28, v29);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_requestUUID(*(void **)(a1 + 32), v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_logRequestBodyStreamResetWithRequestUUID_completionHandler_(v35, v39, (uint64_t)v38, &unk_1E78311D8);

    v40 = *(_QWORD *)(a1 + 48);
    objc_msgSend_requestBodyStream(*(void **)(a1 + 32), v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v40 + 16))(v40, v43);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], v26);
    v44 = (void *)*MEMORY[0x1E0C952E0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_INFO))
    {
      v45 = *(void **)(a1 + 32);
      v46 = v44;
      objc_msgSend_requestUUID(v45, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = *(_QWORD *)(a1 + 40);
      objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v54, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = 138544130;
      v58 = v49;
      v59 = 2114;
      v60 = v52;
      v61 = 2112;
      v62 = v53;
      v63 = 2112;
      v64 = v56;
      _os_log_impl(&dword_1BE990000, v46, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", (uint8_t *)&v57, 0x2Au);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1BEA5AF00(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  _QWORD v7[4];
  void *v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1BE998FDC;
  v7[3] = &unk_1E782F4A8;
  v4 = *(void **)(a1 + 40);
  v8 = *(void **)(a1 + 32);
  v9 = v4;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v5 = v3;
  objc_msgSend_performASyncOnLifecycleQueueIfNotFinished_(v8, v6, (uint64_t)v7);

}

void sub_1BEA5AFFC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  void *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      LOWORD(v23) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Waiting for connection", (uint8_t *)&v23, 2u);
    }

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v17 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(void **)(a1 + 32);
    v19 = v17;
    objc_msgSend_requestUUID(v18, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543362;
    v24 = v22;
    _os_log_impl(&dword_1BE990000, v19, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSessionTaskIsWaitingForConnection\"", (uint8_t *)&v23, 0xCu);

  }
}

void sub_1BEA5B1F0(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  os_signpost_id_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 40);
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    if (!v5)
      goto LABEL_12;
    objc_msgSend_signpost(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v8, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_identifier(v14, v15, v16);

    if (v17 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v11))
      goto LABEL_11;
    LOWORD(v35) = 0;
    v18 = "Conditional requirements satisfied";
    goto LABEL_10;
  }
  if (!v5)
    goto LABEL_12;
  objc_msgSend_signpost(*(void **)(a1 + 32), v6, v7);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_log(v19, v20, v21);
  v11 = objc_claimAutoreleasedReturnValue();

  objc_msgSend_signpost(*(void **)(a1 + 32), v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_identifier(v24, v25, v26);

  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v35) = 0;
    v18 = "Conditional requirements not satisfied";
LABEL_10:
    _os_signpost_emit_with_name_impl(&dword_1BE990000, v11, OS_SIGNPOST_EVENT, v17, "CKDURLRequest", v18, (uint8_t *)&v35, 2u);
  }
LABEL_11:

LABEL_12:
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v27 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(void **)(a1 + 32);
    v29 = v27;
    objc_msgSend_requestUUID(v28, v30, v31);
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = (void *)v32;
    v34 = "satisfied";
    if (!*(_BYTE *)(a1 + 40))
      v34 = "NOT satisfied";
    v35 = 138543618;
    v36 = v32;
    v37 = 2080;
    v38 = v34;
    _os_log_impl(&dword_1BE990000, v29, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"conditionalRequirementsChanged to: %s\"", (uint8_t *)&v35, 0x16u);

  }
}

uint64_t sub_1BEA5B4B0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  os_signpost_id_t v16;
  void *v17;
  void *v18;
  const char *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_log(v7, v8, v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      v17 = *(void **)(a1 + 40);
      v27 = 138412290;
      v28 = v17;
      _os_signpost_emit_with_name_impl(&dword_1BE990000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Retrying background data task with error: %@", (uint8_t *)&v27, 0xCu);
    }

  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v18 = (void *)*MEMORY[0x1E0C952E0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952E0], OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(void **)(a1 + 32);
    v21 = v18;
    objc_msgSend_requestUUID(v20, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(_QWORD *)(a1 + 40);
    v27 = 138543618;
    v28 = v24;
    v29 = 2112;
    v30 = v25;
    _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSessionWillRetryBackgroundDataTask after event %@\"", (uint8_t *)&v27, 0x16u);

  }
  return objc_msgSend_setResponseBodyParser_(*(void **)(a1 + 32), v19, 0);
}

void sub_1BEA5B9E4()
{
  void *v0;

  v0 = (void *)qword_1ED7008B8;
  qword_1ED7008B8 = (uint64_t)&unk_1E78AF640;

}

uint64_t sub_1BEA5BC08(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v25 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_43:
        *(_BYTE *)(a1 + 12) = v25 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEA5CE38(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 24;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *sub_1BEA5D408(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("Current Service");
  else
    return off_1E7831C48[a1 - 1];
}

__CFString *CKStringFromSharePermission(char a1)
{
  void *v2;
  const char *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  __CFString *v8;

  v2 = (void *)objc_opt_new();
  v4 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend_addObject_(v2, v3, (uint64_t)CFSTR("ReadOnly"));
  else
    objc_msgSend_addObject_(v2, v3, (uint64_t)CFSTR("ReadWrite"));
  if ((a1 & 2) != 0)
    objc_msgSend_addObject_(v4, v5, (uint64_t)CFSTR("OON"));
  if ((a1 & 4) != 0)
    objc_msgSend_addObject_(v4, v5, (uint64_t)CFSTR("Anonymous"));
  if (objc_msgSend_count(v4, v5, v6))
  {
    objc_msgSend_componentsJoinedByString_(v4, v7, (uint64_t)CFSTR("|"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = CFSTR("none");
  }

  return v8;
}

void sub_1BEA5DC90(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  char isEqualToString;
  NSObject *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint8_t v34[16];

  objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setAccount_(*(void **)(a1 + 32), v5, *(_QWORD *)(a1 + 40));
  objc_msgSend_identityManager(*(void **)(a1 + 32), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_updateAccount_(v8, v9, *(_QWORD *)(a1 + 40));

  objc_msgSend_accountID(*(void **)(a1 + 40), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_accountID(v4, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v12, v16, (uint64_t)v15);

  if ((isEqualToString & 1) == 0)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v18 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v34 = 0;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Account information changed. Clearing PCS caches", v34, 2u);
    }
    objc_msgSend_setBoundaryKeyData_(*(void **)(a1 + 32), v19, 0);
    if (!objc_msgSend_accountType(*(void **)(a1 + 40), v20, v21))
    {
      objc_msgSend_undecryptablePCSDataHashes(*(void **)(a1 + 32), v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removeAllObjects(v24, v25, v26);

      objc_msgSend_sharedNotifier(CKDPCSNotifier, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_uuid(*(void **)(a1 + 32), v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_clearServicesAndPublicKeysForManagerUUID_(v29, v33, (uint64_t)v32);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1BEA5E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA5E4C8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 64), a2, a3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1BEA5F540(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v7 = v5;
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v16 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Error decrypting the per-participant PCS: %@", buf, 0xCu);
    }
  }
  else
  {
    v8 = (void *)a1[4];
    v9 = a1[5];
    v18 = 0;
    v10 = (void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v8, v6, v9, 5, a2, &v18);
    v11 = v18;
    v7 = v11;
    if (v10)
      v12 = v11 == 0;
    else
      v12 = 0;
    v13 = (void *)*MEMORY[0x1E0C952F8];
    v14 = *MEMORY[0x1E0C95300];
    if (v12)
    {
      if (v14 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v15 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v10;
        _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Successfully invited PCS: %@", buf, 0xCu);
      }
    }
    else
    {
      if (v14 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v13);
      v17 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v7;
        _os_log_debug_impl(&dword_1BE990000, v17, OS_LOG_TYPE_DEBUG, "Error decrypting the invited PCS: %@", buf, 0xCu);
        if (!v10)
          goto LABEL_22;
      }
      else if (!v10)
      {
        goto LABEL_22;
      }
    }
    CFRelease(v10);
  }
LABEL_22:
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_1BEA5FC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BEA5FC74(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA616C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA616F8(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA6172C(void **a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  char v21;

  v7 = a3;
  v8 = a4;
  objc_msgSend_synchronizeQueue(a1[4], v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA61838;
  block[3] = &unk_1E78312E8;
  v21 = a2;
  v15 = v7;
  v16 = a1[5];
  v17 = a1[6];
  v18 = v8;
  v19 = a1[4];
  v20 = a1[7];
  v12 = v8;
  v13 = v7;
  dispatch_async(v11, block);

}

void sub_1BEA61838(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 80) && !*(_QWORD *)(a1 + 32))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v19 = v13;
      v20 = 2114;
      v21 = v14;
      _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "User key sync succeeded for service %{public}@ and operation %{public}@. Retrying zone PCS creation.", buf, 0x16u);
    }
    objc_msgSend__locked_createZonePCSWithSyncKeyRegistryRetry_requestorOperationID_keySyncAnalytics_completionHandler_(*(void **)(a1 + 64), v9, 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v2 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v11;
      v20 = 2114;
      v21 = v10;
      v22 = 2112;
      v23 = v12;
      _os_log_debug_impl(&dword_1BE990000, v2, OS_LOG_TYPE_DEBUG, "User key sync failed for service %{public}@ and operation %{public}@. Won't retry zone PCS creation due to error: %@.", buf, 0x20u);
    }
    objc_msgSend_setOverallResult_(*(void **)(a1 + 56), v3, (uint64_t)CFSTR("failure"));
    objc_msgSend_sendCoreAnalyticsEventForKeySync_(*(void **)(a1 + 64), v4, *(_QWORD *)(a1 + 56));
    objc_msgSend_callbackQueue(*(void **)(a1 + 64), v5, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1BEA61A70;
    v15[3] = &unk_1E782EC68;
    v17 = *(id *)(a1 + 72);
    v16 = *(id *)(a1 + 32);
    dispatch_async(v7, v15);

  }
}

uint64_t sub_1BEA61A70(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_1BEA61A90(_QWORD *a1)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

uint64_t sub_1BEA61B78(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_createZonePCSWithSyncKeyRegistryRetry_requestorOperationID_keySyncAnalytics_completionHandler_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
}

void sub_1BEA621FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA62220(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA6251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA62548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = PCSFPCopyExported();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1BEA62764(uint64_t a1)
{
  void *v1;
  const char *v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v3 = (id)PCSPublicIdentityCopyPublicKey();
  objc_msgSend_addObject_(v1, v2, (uint64_t)v3);

}

void sub_1BEA6316C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

void sub_1BEA63194(uint64_t a1, const char *a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  os_log_t *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  os_log_t v18;
  const char *v19;
  os_log_t v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  int v34;
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    objc_msgSend_setIsCurrentUser_(*(void **)(a1 + 32), a2, 1);
    objc_msgSend_setCallingParticipant_(*(void **)(a1 + 40), v3, *(_QWORD *)(a1 + 32));
    v6 = objc_msgSend_acceptanceStatus(*(void **)(a1 + 32), v4, v5);
    v9 = (_QWORD *)MEMORY[0x1E0C95300];
    v10 = (os_log_t *)MEMORY[0x1E0C952D8];
    if (v6 == 2)
    {
      objc_msgSend_userIdentity(*(void **)(a1 + 32), v7, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_userRecordID(v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordName(v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (*v9 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v18 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        v29 = *(void **)(a1 + 32);
        v30 = v18;
        objc_msgSend_participantID(v29, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = 138412546;
        v35 = v33;
        v36 = 2112;
        v37 = v17;
        _os_log_debug_impl(&dword_1BE990000, v30, OS_LOG_TYPE_DEBUG, "Stingray share is already accepted by participant %@, filling anonymousID %@ for share metadata.", (uint8_t *)&v34, 0x16u);

      }
      objc_msgSend_fillAnonymousCKUserID_(*(void **)(a1 + 40), v19, (uint64_t)v17);

    }
    if (*v9 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v20 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(void **)(a1 + 40);
      v22 = v20;
      objc_msgSend_callingParticipant(v21, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(*(void **)(a1 + 48), v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = 138412546;
      v35 = v25;
      v36 = 2112;
      v37 = v28;
      _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Found current participant %@ on anonymous to server share %@", (uint8_t *)&v34, 0x16u);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1BEA633E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_1BEA65B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA65BA0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

uint64_t sub_1BEA65BBC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

uint64_t sub_1BEA65BE4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

void sub_1BEA65C0C(uint64_t a1, uint64_t a2, __CFString *cf)
{
  _QWORD *v6;
  NSObject *v7;
  const void *v8;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  BOOL v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t FullKeychainIdentitySetWithError;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD block[4];
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  _BYTE *v47;
  uint64_t v48;
  uint8_t v49[4];
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  _BYTE buf[24];
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  const __CFString *v60;
  __int16 v61;
  const __CFString *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  v6 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v9 = &stru_1E7838F48;
    v10 = CFSTR("un");
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
    if (a2)
      v10 = &stru_1E7838F48;
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = CFSTR(". Error: ");
    if (cf)
      v9 = cf;
    else
      v15 = &stru_1E7838F48;
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2112;
    v54 = v11;
    v55 = 2114;
    v56 = v13;
    v57 = 2114;
    v58 = v14;
    v59 = 2114;
    v60 = v15;
    v61 = 2112;
    v62 = v9;
    _os_log_debug_impl(&dword_1BE990000, v7, OS_LOG_TYPE_DEBUG, "Finished unwrapping PCS with data %{public}@ %{public}@successfully with identities %@ for service %{public}@ operation %{public}@.%{public}@%@", buf, 0x48u);
    if (!a2)
      goto LABEL_16;
  }
  else if (!a2)
  {
    goto LABEL_16;
  }
  if (!cf)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = a2;
    v8 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
    if (v8)
      CFRetain(v8);
    goto LABEL_26;
  }
LABEL_16:
  v16 = (void *)objc_opt_class();
  objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v16, v17, (uint64_t)cf, 5004, CFSTR("Failed to decrypt PCS data with user identities"));
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isAppleInternalInstall(v23, v24, v25))
  {
    v26 = *(_BYTE *)(a1 + 104) == 0;

    if (!v26)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v54 = 0;
      objc_msgSend_identityManager(*(void **)(a1 + 56), v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      FullKeychainIdentitySetWithError = objc_msgSend_createFullKeychainIdentitySetWithError_(v29, v30, 0);

      v54 = FullKeychainIdentitySetWithError;
      if (*(_QWORD *)(*(_QWORD *)&buf[8] + 24))
      {
        if (*v6 != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v32 = *MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
          v40 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
          *(_DWORD *)v49 = 138412546;
          v50 = v39;
          v51 = 2112;
          v52 = v40;
          _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Decryption with identity set %@ failed. Attempting to decrypt using all identities in the keychain %@", v49, 0x16u);
        }
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
        objc_msgSend_synchronizeQueue(*(void **)(a1 + 56), v33, v34);
        v35 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_1BEA6600C;
        block[3] = &unk_1E78313D8;
        v47 = buf;
        v42 = *(id *)(a1 + 72);
        v43 = *(id *)(a1 + 32);
        v36 = *(id *)(a1 + 40);
        v37 = *(_QWORD *)(a1 + 56);
        v38 = *(void **)(a1 + 64);
        v44 = v36;
        v45 = v37;
        v48 = *(_QWORD *)(a1 + 96);
        v46 = v38;
        dispatch_async(v35, block);

      }
      _Block_object_dispose(buf, 8);
    }
  }
  else
  {

  }
LABEL_26:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

}

void sub_1BEA65FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6600C(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *MEMORY[0x1E0D829B8];
  v8[0] = *MEMORY[0x1E0D829C8];
  v8[1] = v4;
  v9[0] = v3;
  v9[1] = MEMORY[0x1E0C9AAA0];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v9, v8, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 64);
  PCSObjectCreateFromExportedWithIdentitiesAndOptionsAsync();

}

void sub_1BEA66134(uint64_t a1, uint64_t a2, void *cf)
{
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  const void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    CFRetain(cf);
  }
  else if (a2)
  {
    PCSFPGetUnwrapPublicIdentity();
    PCSPublicIdentityGetServiceName();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(*(void **)(a1 + 32), v6, (uint64_t)v5) & 1) == 0)
    {
      v9 = *(void **)(a1 + 32);
      objc_msgSend_containerID(*(void **)(a1 + 40), v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_responsibleBundleID(*(void **)(a1 + 40), v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      CKWarnForIncorrectServiceIdentity(v9, v10, v13);

      v14 = (void *)objc_opt_class();
      objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v14, v15, 0, 5004, CFSTR("Could not decrypt PCS data with the selected identity. A key to decrypt this data does exist, but it will not be used."));
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v18 = *(void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v16;

      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v19 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v21 = *(_QWORD *)(a1 + 32);
        v22 = 138543618;
        v23 = v5;
        v24 = 2114;
        v25 = v21;
        _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "Was able to decrypt pcs with %{public}@ key in the keychain, but not the %{public}@ key. Possibly a misconfigured client set up.", (uint8_t *)&v22, 0x16u);
      }
    }

  }
  v20 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1BEA66300(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  NSObject *v8;
  CKDPCSData *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  const void *v14;
  const void *v15;
  void *v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(_QWORD);
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint64_t IsManatee;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  NSObject *v56;
  NSObject *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  _QWORD v72[5];
  id v73;
  void (**v74)(_QWORD);
  _QWORD v75[5];
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD aBlock[4];
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  id v98;
  uint8_t buf[4];
  const __CFString *v100;
  __int16 v101;
  const __CFString *v102;
  __int16 v103;
  const __CFString *v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40))
    goto LABEL_2;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) && !*(_QWORD *)(a1 + 32))
  {
    v58 = (void *)objc_opt_class();
    objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v58, v59, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24), 5004, CFSTR("Failed to decrypt PCS data with user identities"));
    v60 = objc_claimAutoreleasedReturnValue();
    v61 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
    v62 = *(void **)(v61 + 40);
    *(_QWORD *)(v61 + 40) = v60;

LABEL_2:
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v2 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
    {
      v4 = *(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
      v5 = *(const __CFString **)(a1 + 64);
      v6 = *(const __CFString **)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138413058;
      v100 = v4;
      v101 = 2112;
      v102 = v6;
      v103 = 2112;
      v104 = v5;
      v105 = 2112;
      v106 = v7;
      _os_log_error_impl(&dword_1BE990000, v2, OS_LOG_TYPE_ERROR, "Error creating PCS: %@.\nIdentity %@\nPEM data was %@\nPCS data %@.", buf, 0x2Au);
    }
    goto LABEL_12;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v8 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24))
      v67 = CFSTR("PCS");
    else
      v67 = CFSTR("PPPCS data");
    v68 = *(const __CFString **)(a1 + 40);
    v69 = *(const __CFString **)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v100 = v67;
    v101 = 2112;
    v102 = v68;
    v103 = 2114;
    v104 = v69;
    _os_log_debug_impl(&dword_1BE990000, v8, OS_LOG_TYPE_DEBUG, "Created %{public}@ using identity %@ \nFrom data %{public}@", buf, 0x20u);
  }
  v9 = objc_alloc_init(CKDPCSData);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  objc_msgSend_setPcs_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24));
  objc_msgSend_setPcsData_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), v13, *(_QWORD *)(a1 + 32));
LABEL_12:
  v14 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 24);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 24) = 0;
  }
  v15 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) = 0;
  }
  if (*MEMORY[0x1E0C95280])
  {
    v16 = *(void **)(a1 + 56);
    v17 = *(_BYTE *)(a1 + 184) == 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
    v98 = *(id *)(v18 + 40);
    objc_msgSend__checkUnitTestOverridesForDecryptionFailuresWithState_error_(v16, v3, v17, &v98);
    objc_storeStrong((id *)(v18 + 40), v98);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
      v20 = *(void **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = 0;

    }
  }
  v21 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1BEA66B00;
  aBlock[3] = &unk_1E7831478;
  v86 = *(id *)(a1 + 72);
  v87 = *(id *)(a1 + 80);
  v22 = *(id *)(a1 + 88);
  v23 = *(_QWORD *)(a1 + 56);
  v88 = v22;
  v89 = v23;
  v24 = *(_QWORD *)(a1 + 168);
  v94 = *(_QWORD *)(a1 + 160);
  v95 = v24;
  v93 = *(_QWORD *)(a1 + 144);
  v92 = *(id *)(a1 + 112);
  v25 = *(id *)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 176);
  v90 = v25;
  v96 = v26;
  v97 = *(_BYTE *)(a1 + 185);
  v91 = *(id *)(a1 + 96);
  v27 = _Block_copy(aBlock);
  v75[0] = v21;
  v75[1] = 3221225472;
  v75[2] = sub_1BEA67184;
  v75[3] = &unk_1E78314C8;
  v28 = *(_QWORD *)(a1 + 120);
  v84 = *(_QWORD *)(a1 + 168);
  v29 = *(_QWORD *)(a1 + 56);
  v82 = v28;
  v75[4] = v29;
  v83 = *(_OWORD *)(a1 + 136);
  v76 = *(id *)(a1 + 80);
  v77 = *(id *)(a1 + 72);
  v78 = *(id *)(a1 + 88);
  v79 = *(id *)(a1 + 48);
  v80 = *(id *)(a1 + 104);
  v81 = *(id *)(a1 + 112);
  v30 = (void (**)(_QWORD))_Block_copy(v75);
  objc_msgSend_domain(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v33, v34, *MEMORY[0x1E0C94B20]))
    v39 = objc_msgSend_code(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v35, v36) != 5000
       && objc_msgSend_code(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v37, v38) != 5004;
  else
    v39 = 1;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40) && !v39 && *(_BYTE *)(a1 + 184))
  {
    if (*(_QWORD *)(a1 + 96) && (unint64_t)(*(_QWORD *)(a1 + 176) - 3) <= 1)
    {
      objc_msgSend_identityManager(*(void **)(a1 + 56), v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_PCSServiceStringFromCKServiceType_(v42, v43, *(_QWORD *)(a1 + 168));
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      IsManatee = objc_msgSend_serviceTypeIsManatee_(*(void **)(a1 + 56), v45, *(_QWORD *)(a1 + 168));
      objc_msgSend_sharedManager(CKDPCSKeySyncManager, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_account(*(void **)(a1 + 56), v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = *(_QWORD *)(a1 + 96);
      v54 = *(_QWORD *)(a1 + 56);
      v72[0] = v21;
      v72[1] = 3221225472;
      v72[2] = sub_1BEA6765C;
      v72[3] = &unk_1E7831518;
      v72[4] = v54;
      v73 = v27;
      v74 = v30;
      objc_msgSend_getKeySyncEligibilityForService_isManatee_account_lastModifiedDate_testOverrideProvider_completionHandler_(v49, v55, (uint64_t)v44, IsManatee, v52, v53, v54, v72);

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v57 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v70 = *(const __CFString **)(a1 + 72);
        v71 = *(const __CFString **)(a1 + 96);
        *(_DWORD *)buf = 138543618;
        v100 = v70;
        v101 = 2114;
        v102 = v71;
        _os_log_debug_impl(&dword_1BE990000, v57, OS_LOG_TYPE_DEBUG, "Either the pcs object is not zonePCS or PPPCS, or the pcs blob lacks the lastModifiedDate. PCS object type %{public}@. lastModifiedDate:%{public}@", buf, 0x16u);
      }
      (*((void (**)(void *, uint64_t))v27 + 2))(v27, 1);
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v56 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a1 + 184))
        v63 = CFSTR("YES");
      else
        v63 = CFSTR("NO");
      v64 = CFSTR(" Error:");
      v65 = *(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
      *(_DWORD *)buf = 138543874;
      if (!v65)
        v64 = &stru_1E7838F48;
      v100 = v63;
      if (v65)
        v66 = v65;
      else
        v66 = &stru_1E7838F48;
      v101 = 2114;
      v102 = v64;
      v103 = 2112;
      v104 = v66;
      _os_log_debug_impl(&dword_1BE990000, v56, OS_LOG_TYPE_DEBUG, "Either successfully decrypted the PCS or we are not allowed to sync key registry. canSyncKeyRegistry:%{public}@.%{public}@%@", buf, 0x20u);
    }
    v30[2](v30);
  }

}

void sub_1BEA66B00(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  int8x16_t v27;
  char v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  const __CFString *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v15 = CFSTR("dis");
    v16 = *(_QWORD *)(a1 + 48);
    if ((_DWORD)a2)
      v15 = CFSTR("en");
    *(_DWORD *)buf = 138544130;
    v30 = v13;
    v31 = 2114;
    v32 = v14;
    v33 = 2114;
    v34 = v16;
    v35 = 2114;
    v36 = v15;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Attempting user key sync before retrying %{public}@ PCS decryption for service %{public}@ and operation %{public}@, with throttling %{public}@abled.", buf, 0x2Au);
  }
  if (*MEMORY[0x1E0C95280]
    && objc_msgSend__checkPCSTestOverrideForKey_(*(void **)(a1 + 56), v5, (uint64_t)CFSTR("DisallowKRSToBePerformed")))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v17, v18, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 56), CFSTR("CKDPCSManager.m"), 1679, CFSTR("KRS is not allowed from unit test override"));

  }
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(void **)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 104);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_1BEA66D80;
  v19[3] = &unk_1E7831450;
  v11 = *(_QWORD *)(a1 + 88);
  v19[4] = v8;
  v26 = v11;
  v20 = *(id *)(a1 + 40);
  v21 = *(id *)(a1 + 48);
  v22 = *(id *)(a1 + 32);
  v25 = *(id *)(a1 + 80);
  v23 = *(id *)(a1 + 64);
  v27 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  v28 = *(_BYTE *)(a1 + 120);
  v24 = *(id *)(a1 + 72);
  objc_msgSend_synchronizeUserKeyRegistryForServiceType_shouldThrottle_context_requestorOperationID_completionHandler_(v8, v12, v10, a2, 0x1E784B7E8, v9, v19);

}

void sub_1BEA66D80(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  char v29;

  v7 = a3;
  v8 = a4;
  objc_msgSend_synchronizeQueue(*(void **)(a1 + 32), v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA66ED8;
  block[3] = &unk_1E7831428;
  v28 = a2;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(a1 + 40);
  v17 = v7;
  v18 = v12;
  v26 = *(_QWORD *)(a1 + 88);
  v19 = v13;
  v20 = *(id *)(a1 + 48);
  v21 = *(id *)(a1 + 56);
  v22 = v8;
  v25 = *(id *)(a1 + 80);
  v23 = *(id *)(a1 + 64);
  v27 = *(_OWORD *)(a1 + 96);
  v29 = *(_BYTE *)(a1 + 112);
  v24 = *(id *)(a1 + 72);
  v14 = v8;
  v15 = v7;
  dispatch_async(v11, block);

}

void sub_1BEA66ED8(uint64_t a1, const char *a2)
{
  NSObject *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD block[4];
  id v20;
  id v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 128) && !*(_QWORD *)(a1 + 32))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138543874;
      v23 = v16;
      v24 = 2114;
      v25 = v17;
      v26 = 2114;
      v27 = v18;
      _os_log_debug_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEBUG, "User key sync succeeded for service %{public}@ and operation %{public}@. Retrying %{public}@ PCS decryption.", buf, 0x20u);
    }
    objc_msgSend__locked_createPCSFromData_ofType_usingPCSServiceType_tryDecryptingWithOtherServices_withSyncKeyRegistryRetry_lastModifiedDate_keySyncAnalytics_requestorOperationID_completionHandler_(*(void **)(a1 + 40), v11, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned __int8 *)(a1 + 129), 0, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 96));
  }
  else
  {
    objc_msgSend__locked_markMissingIdentitiesFromFailedDecryptError_serviceName_(*(void **)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), *(_QWORD *)(a1 + 48));
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v3 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138544130;
      v23 = v12;
      v24 = 2114;
      v25 = v13;
      v26 = 2114;
      v27 = v14;
      v28 = 2112;
      v29 = v15;
      _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "User key sync failed for service %{public}@ and operation %{public}@. Won't retry %{public}@ PCS decryption due to error: %@.", buf, 0x2Au);
    }
    objc_msgSend_setOverallResult_(*(void **)(a1 + 72), v4, (uint64_t)CFSTR("failure"));
    objc_msgSend_setError_(*(void **)(a1 + 72), v5, *(_QWORD *)(a1 + 32));
    objc_msgSend_sendCoreAnalyticsEventForKeySync_(*(void **)(a1 + 40), v6, *(_QWORD *)(a1 + 72));
    objc_msgSend_callbackQueue(*(void **)(a1 + 40), v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA67164;
    block[3] = &unk_1E782EC68;
    v21 = *(id *)(a1 + 96);
    v20 = *(id *)(a1 + 32);
    dispatch_async(v9, block);

  }
}

uint64_t sub_1BEA67164(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1BEA67184(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  __CFString **v28;
  const char *v29;
  const char *v30;
  const void *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  int8x16_t v38;
  _QWORD v39[5];
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40)
    && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40)
    && !*(_QWORD *)(a1 + 112)
    && objc_msgSend_currentServiceIsManatee(*(void **)(a1 + 32), a2, a3))
  {
    objc_msgSend__locked_markMissingIdentitiesFromFailedDecryptError_serviceName_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), *(_QWORD *)(a1 + 40));
    if (objc_msgSend_code(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v4, v5) == 5000)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v8 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BE990000, v8, OS_LOG_TYPE_ERROR, "Failed to decrypt PCS data even after user key sync because we have no identities. Returning retryable failure.", buf, 2u);
      }
      v9 = (void *)objc_opt_class();
      objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v9, v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), 5008, CFSTR("Failed to decrypt. Keys unavailable even after synchronization"));
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C94B20], 5008, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), CFSTR("Failed to decrypt. Keys unavailable even after synchronization"));
LABEL_19:
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v23 = *(void **)(v22 + 40);
        *(_QWORD *)(v22 + 40) = v21;

      }
    }
    else if (objc_msgSend_code(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v6, v7) == 5004)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v14 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v34 = *(_QWORD *)(a1 + 40);
        v33 = *(_QWORD *)(a1 + 48);
        v35 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 138543874;
        v41 = v33;
        v42 = 2114;
        v43 = v34;
        v44 = 2114;
        v45 = v35;
        _os_log_error_impl(&dword_1BE990000, v14, OS_LOG_TYPE_ERROR, "Failed to decrypt %{public}@ PCS data even after user key sync for service %{public}@ operation %{public}@. Returning permanent failure.", buf, 0x20u);
      }
      objc_msgSend_markUndecryptablePCS_(*(void **)(a1 + 32), v15, *(_QWORD *)(a1 + 64));
      v16 = (void *)objc_opt_class();
      objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v16, v17, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), 5011, CFSTR("Failed to decrypt. Keys unavailable even after synchronization"));
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v20 = *(void **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = v18;

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C94B20], 5011, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), CFSTR("Failed to decrypt. Keys unavailable even after synchronization"));
        goto LABEL_19;
      }
    }
  }
  v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  v25 = MEMORY[0x1E0C809B0];
  if (v24
    && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40)
    && objc_msgSend_code(v24, a2, a3) == 5011
    && !*(_QWORD *)(a1 + 112))
  {
    v26 = *(void **)(a1 + 32);
    v39[0] = v25;
    v39[1] = 3221225472;
    v39[2] = sub_1BEA675E8;
    v39[3] = &unk_1E782EA40;
    v39[4] = v26;
    objc_msgSend__onSynchronizeQueue_(v26, a2, (uint64_t)v39);
  }
  v27 = *(void **)(a1 + 72);
  if (v27)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40)
      && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
    {
      v28 = off_1E7834D20;
    }
    else
    {
      v28 = off_1E7834D28;
    }
    objc_msgSend_setOverallResult_(v27, a2, (uint64_t)*v28);
    objc_msgSend_setError_(*(void **)(a1 + 72), v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
    objc_msgSend_sendCoreAnalyticsEventForKeySync_(*(void **)(a1 + 32), v30, *(_QWORD *)(a1 + 72));
  }
  v31 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 0;
  }
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), a2, a3);
  v32 = objc_claimAutoreleasedReturnValue();
  v36[0] = v25;
  v36[1] = 3221225472;
  v36[2] = sub_1BEA67630;
  v36[3] = &unk_1E78314A0;
  v37 = *(id *)(a1 + 80);
  v38 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  dispatch_async(v32, v36);

}

void sub_1BEA675E8(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  id v5;

  objc_msgSend_date(MEMORY[0x1E0C99D68], a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLastMissingManateeIdentityErrorDateForCurrentService_(*(void **)(a1 + 32), v4, (uint64_t)v5);

}

uint64_t sub_1BEA67630(_QWORD *a1)
{
  uint64_t result;

  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

void sub_1BEA6765C(void **a1, const char *a2, uint64_t a3)
{
  char v3;
  NSObject *v5;
  _QWORD block[4];
  id v7;
  id v8;
  char v9;

  v3 = (char)a2;
  objc_msgSend_synchronizeQueue(a1[4], a2, a3);
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA67704;
  block[3] = &unk_1E78314F0;
  v9 = v3;
  v7 = a1[5];
  v8 = a1[6];
  dispatch_async(v5, block);

}

uint64_t sub_1BEA67704(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1BEA67AF0(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_createPCSFromData_ofType_usingPCSServiceType_tryDecryptingWithOtherServices_withSyncKeyRegistryRetry_lastModifiedDate_keySyncAnalytics_requestorOperationID_completionHandler_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_1BEA67C34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  CKDZonePCSData *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  id v12;

  v12 = a3;
  v5 = a2;
  v6 = objc_alloc_init(CKDZonePCSData);
  v9 = objc_msgSend_pcs(v5, v7, v8);

  objc_msgSend_setPcs_(v6, v10, v9);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    (*(void (**)(uint64_t, CKDZonePCSData *, id))(v11 + 16))(v11, v6, v12);

}

void sub_1BEA67D74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a3;
    objc_msgSend_pcsData(a2, v6, v7);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v8, v5);

  }
}

void sub_1BEA67EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA67EF8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id obj;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend_identityManager(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_PCSServiceStringFromCKServiceType_(v4, v5, *(_QWORD *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_identityManager(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v11 + 40);
  v13 = objc_msgSend_copyIdentitySetWithType_options_error_(v9, v12, v10, 0, &obj);
  objc_storeStrong((id *)(v11 + 40), obj);

  if (!v13 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      v24 = v6;
      v25 = 2112;
      v26 = v16;
      _os_log_impl(&dword_1BE990000, v14, OS_LOG_TYPE_INFO, "Warn: No identity set for service %{public}@: %@", buf, 0x16u);
    }
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      v17 = *MEMORY[0x1E0C94B20];
      v18 = *(_QWORD *)(a1 + 48) - 1;
      if (v18 > 5)
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, v17, 5000, CFSTR("Failed to preflight a %@ identity"), CFSTR("Current Service"));
      else
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, v17, 5000, CFSTR("Failed to preflight a %@ identity"), off_1E7831C48[v18]);
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v21 = *(void **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v19;

    }
  }

}

void sub_1BEA6832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA68364(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *MEMORY[0x1E0D829B8];
  v9[0] = *MEMORY[0x1E0D829C8];
  v9[1] = v4;
  v10[0] = v3;
  v10[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v10, v9, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 64);
  PCSObjectCreateFromExportedWithIdentitiesAndOptionsAsync();

}

void sub_1BEA684AC(_QWORD *a1, const void *a2, void *cf)
{
  const void *v6;
  unint64_t v7;
  const __CFString *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint8_t buf[4];
  const __CFString *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  const void *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  v6 = *(const void **)(*(_QWORD *)(a1[8] + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = 0;
  }
  v7 = a1[10] - 1;
  if (v7 > 5)
  {
    v8 = CFSTR("Unknown");
    if (!a2)
    {
LABEL_15:
      v10 = (void *)objc_opt_class();
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v11, (uint64_t)CFSTR("Failed to unwrap %@ data"), v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v10, v13, (uint64_t)cf, 5004, v12);
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1[9] + 8);
      v16 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;

      if (!*(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40))
      {
        v18 = (void *)MEMORY[0x1E0C94FF8];
        v19 = *MEMORY[0x1E0C94B20];
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)CFSTR("Couldn't unwrap %@ object from data"), v8);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_userInfo_error_path_URL_description_(v18, v21, v19, 5004, 0, cf, 0, 0, v20);
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = *(_QWORD *)(a1[9] + 8);
        v24 = *(void **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v22;

      }
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v25 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_ERROR))
      {
        v28 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40);
        v29 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24);
        v30 = (const void *)a1[5];
        v31 = a1[6];
        *(_DWORD *)buf = 138413314;
        v33 = v8;
        v34 = 2112;
        v35 = v28;
        v36 = 2112;
        v37 = v29;
        v38 = 2112;
        v39 = v30;
        v40 = 2112;
        v41 = v31;
        _os_log_error_impl(&dword_1BE990000, v25, OS_LOG_TYPE_ERROR, "Error unwrapping %@: %@.\nIdentity %@\nPEM data was %@\nZone PCS data %@.", buf, 0x34u);
      }
      (*(void (**)(void))(a1[7] + 16))();
      goto LABEL_22;
    }
  }
  else
  {
    v8 = off_1E7831C18[v7];
    if (!a2)
      goto LABEL_15;
  }
  if (cf)
    goto LABEL_15;
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24);
    v27 = a1[6];
    *(_DWORD *)buf = 138413058;
    v33 = v8;
    v34 = 2112;
    v35 = v26;
    v36 = 2114;
    v37 = v27;
    v38 = 2112;
    v39 = a2;
    _os_log_debug_impl(&dword_1BE990000, v9, OS_LOG_TYPE_DEBUG, "Unwrapped %@ using identity %@ from data %{public}@: %@.", buf, 0x2Au);
  }
  CFRetain(a2);
  (*(void (**)(void))(a1[7] + 16))();
  CFRelease(a2);
LABEL_22:

}

void sub_1BEA69B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA69BA4(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);

}

uint64_t sub_1BEA69BD8(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRollMasterKey();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA69C18(uint64_t a1, void *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  id v9;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v9 = a2;
  if (v2)
  {
    v5 = objc_msgSend_zoneishKeysRolled(v9, v3, v4);
    objc_msgSend_setZoneishKeysRolled_(v9, v6, v5 + 1);
  }
  else
  {
    v7 = objc_msgSend_perRecordKeysRolled(v9, v3, v4);
    objc_msgSend_setPerRecordKeysRolled_(v9, v8, v7 + 1);
  }

}

void sub_1BEA69FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA69FCC(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;

  v4 = a1[5];
  v5 = a1[6];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v6 = off_1EF577A08;
  v18 = off_1EF577A08;
  if (!off_1EF577A08)
  {
    v7 = sub_1BEA7D6D8((uint64_t)a1, a2, a3);
    v6 = dlsym(v7, "MarkForCounterSigning");
    v16[3] = (uint64_t)v6;
    off_1EF577A08 = v6;
  }
  _Block_object_dispose(&v15, 8);
  if (v6)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = ((uint64_t (*)(uint64_t, uint64_t))v6)(v4, v5);
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v11, (uint64_t)"_Bool CKMarkForCounterSigning(PCSShareProtectionRef, PCSShareProtectionRef)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = dlerror();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v10, v14, (uint64_t)v12, CFSTR("CKDPCSManager.m"), 65, CFSTR("%s"), v13);

    __break(1u);
  }
}

void sub_1BEA6A0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA6A718(uint64_t a1)
{
  uint64_t result;

  result = PCSFPUpdateZoneKey();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA6AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA6AC4C(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRemovePrivateKey();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BEA6B014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA6B040(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRemovePrivateKey();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BEA6B270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6B29C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = PCSFPCopyExported();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1BEA6BB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6BB58(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);

}

uint64_t sub_1BEA6BB8C(uint64_t a1)
{
  uint64_t result;

  result = PCSFPUpdateIdentityAndRollZoneKey();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA6BBC8(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_zoneKeysRolled(v6, v2, v3);
  objc_msgSend_setZoneKeysRolled_(v6, v5, v4 + 1);

}

void sub_1BEA6CEB8(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);

}

void sub_1BEA6CEEC(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v10 = a2;
  v4 = objc_msgSend_shareKeysRolled(v10, v2, v3);
  objc_msgSend_setShareKeysRolled_(v10, v5, v4 + 1);
  v8 = objc_msgSend_zoneKeysRolled(v10, v6, v7);
  objc_msgSend_setZoneKeysRolled_(v10, v9, v8 + 1);

}

void sub_1BEA6D060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6D084(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)PCSFPCopyAvailableMasterKeyIDs();
  if (objc_msgSend_count(v2, v3, v4) == 1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = PCSFPRollMasterKey();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v5 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v6 = 138412290;
      v7 = v2;
      _os_log_impl(&dword_1BE990000, v5, OS_LOG_TYPE_INFO, "Warn: PCS does not have a single primary key, skipping primary key replacement. keys: %@", (uint8_t *)&v6, 0xCu);
    }
  }

}

void sub_1BEA6E61C(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = a2;
  v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);

}

void sub_1BEA6EC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA6EC6C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  _QWORD v16[3];
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 72))
  {
    v16[0] = *MEMORY[0x1E0D829E8];
    objc_msgSend_identityManager(*(void **)(a1 + 56), a2, a3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_serviceName(v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *MEMORY[0x1E0D82A08];
    v9 = *(_QWORD *)(a1 + 64);
    v17[0] = v7;
    v17[1] = v9;
    v10 = *MEMORY[0x1E0D829C8];
    v16[1] = v8;
    v16[2] = v10;
    v17[2] = *MEMORY[0x1E0D829D0];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v17, v16, 3);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
  result = PCSFPCreate();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BEA6EDB4(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddSharePCS();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BEA6EDEC(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddSharePCS();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA6F3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6F410(uint64_t a1)
{
  const char *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = (id)*MEMORY[0x1E0D829F0];
  if (*(_BYTE *)(a1 + 48))
  {
    v4 = (id)*MEMORY[0x1E0D829F8];

    v3 = v4;
  }
  v6 = *MEMORY[0x1E0D829C8];
  v7[0] = *MEMORY[0x1E0D829D0];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v7, &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = PCSFPCreate();

}

uint64_t sub_1BEA6F50C(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddEncryptedSharePCS();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BEA6F554(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddSharePCS();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA6F854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6F880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = PCSFPCopyExported();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1BEA6FD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA6FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA70480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA704A0(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentityWithShareFlags();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BEA70568()
{
  return PCSFPSetAuthorshipIdentity();
}

void sub_1BEA709BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA709E8(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRemoveSharePCS();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA711A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA71234(_QWORD *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  dispatch_once_t *v11;
  os_log_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  BOOL v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  const void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  dispatch_once_t *v43;
  os_log_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  void *v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  _QWORD *v62;
  os_log_t *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  NSObject *v68;
  _QWORD *v69;
  os_log_t *v70;
  NSObject *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id obj;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  uint8_t v90[128];
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  void *v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), a2, a3))
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v6 = *(id *)(*(_QWORD *)(a1[4] + 8) + 40);
    v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v85, v97, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v86;
      v74 = *MEMORY[0x1E0C94B20];
      v11 = (dispatch_once_t *)MEMORY[0x1E0C95300];
      v12 = (os_log_t *)MEMORY[0x1E0C952D8];
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v86 != v10)
            objc_enumerationMutation(v6);
          v14 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 8 * v13);
          v84 = 0;
          if (PCSFPRemoveMasterKey())
            v16 = v84 == 0;
          else
            v16 = 0;
          if (v16)
          {
            if (*v11 != -1)
              dispatch_once(v11, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v21 = *v12;
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
            {
              v22 = a1[10];
              *(_DWORD *)buf = 138543618;
              v92 = v14;
              v93 = 2112;
              v94 = v22;
              _os_log_debug_impl(&dword_1BE990000, v21, OS_LOG_TYPE_DEBUG, "Removed primary key with ID %{public}@ from PCS %@", buf, 0x16u);
            }
            ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          }
          else
          {
            objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, v74, 5005, CFSTR("Unspecified failure."));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            if (*v11 != -1)
              dispatch_once(v11, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v18 = *v12;
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
            {
              v19 = a1[10];
              *(_DWORD *)buf = 138543874;
              v92 = v14;
              v93 = 2112;
              v94 = v19;
              v95 = 2112;
              v96 = v17;
              _os_log_impl(&dword_1BE990000, v18, OS_LOG_TYPE_INFO, "Warn: Failed to remove primary key with ID %{public}@ from PCS %@: %@", buf, 0x20u);
            }

          }
          ++v13;
        }
        while (v9 != v13);
        v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v20, (uint64_t)&v85, v97, 16);
      }
      while (v9);
    }

  }
  if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1[6] + 8) + 40), v4, v5))
  {
    v25 = (void *)PCSFPCopyKeyIDs();
    v26 = (void *)objc_opt_new();
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v27 = v25;
    v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v80, v90, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v81;
      do
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v81 != v31)
            objc_enumerationMutation(v27);
          v33 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * i);
          v34 = (const void *)PCSFPCopyPrivateKey();
          v36 = (void *)PCSIdentityCopyCurrentKeyFingerprint();
          if (v34)
            CFRelease(v34);
          objc_msgSend_setObject_forKey_(v26, v35, v33, v36);

        }
        v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v37, (uint64_t)&v80, v90, 16);
      }
      while (v30);
    }
    v73 = v27;

    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    obj = *(id *)(*(_QWORD *)(a1[6] + 8) + 40);
    v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v76, v89, 16);
    if (v39)
    {
      v41 = v39;
      v42 = *(_QWORD *)v77;
      v43 = (dispatch_once_t *)MEMORY[0x1E0C95300];
      v44 = (os_log_t *)MEMORY[0x1E0C952D8];
      do
      {
        v45 = 0;
        do
        {
          if (*(_QWORD *)v77 != v42)
            objc_enumerationMutation(obj);
          v46 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * v45);
          objc_msgSend_objectForKey_(v26, v40, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v47)
          {
            if (*v43 != -1)
              dispatch_once(v43, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v51 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_INFO))
            {
              v52 = a1[10];
              *(_DWORD *)buf = 138543618;
              v92 = v46;
              v93 = 2114;
              v94 = v52;
              _os_log_impl(&dword_1BE990000, v51, OS_LOG_TYPE_INFO, "Warn: Failed to remove private key with public key ID %{public}@. No matching public key found in the PCS %{public}@", buf, 0x16u);
            }
            v53 = (void *)PCSFPCopyDiagnostic();
            if (*v43 != -1)
              dispatch_once(v43, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v54 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG))
            {
LABEL_64:
              *(_DWORD *)buf = 138543362;
              v92 = (uint64_t)v53;
              _os_log_debug_impl(&dword_1BE990000, v54, OS_LOG_TYPE_DEBUG, "PCS diagnostics: %{public}@", buf, 0xCu);
            }
LABEL_61:

            goto LABEL_62;
          }
          v48 = PCSFPRemovePrivateKey();
          v49 = (void *)*MEMORY[0x1E0C952F8];
          if (!v48)
          {
            if (*v43 != -1)
              dispatch_once(v43, v49);
            v55 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_INFO))
            {
              v56 = (void *)a1[10];
              *(_DWORD *)buf = 138543874;
              v92 = (uint64_t)v47;
              v93 = 2114;
              v94 = v46;
              v95 = 2114;
              v96 = v56;
              _os_log_impl(&dword_1BE990000, v55, OS_LOG_TYPE_INFO, "Warn: Failed to remove private key with public key %{public}@ (keyID: %{public}@) from PCS %{public}@", buf, 0x20u);
            }
            v53 = (void *)PCSFPCopyDiagnostic();
            if (*v43 != -1)
              dispatch_once(v43, (dispatch_block_t)*MEMORY[0x1E0C952F8]);
            v54 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG))
              goto LABEL_64;
            goto LABEL_61;
          }
          if (*v43 != -1)
            dispatch_once(v43, v49);
          v50 = *v44;
          if (os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG))
          {
            v57 = (void *)a1[10];
            *(_DWORD *)buf = 138543874;
            v92 = (uint64_t)v47;
            v93 = 2114;
            v94 = v46;
            v95 = 2112;
            v96 = v57;
            _os_log_debug_impl(&dword_1BE990000, v50, OS_LOG_TYPE_DEBUG, "Removed private key with public key %{public}@ (keyID: %{public}@) from PCS %@", buf, 0x20u);
          }
          ++*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
LABEL_62:

          ++v45;
        }
        while (v41 != v45);
        v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v76, v89, 16);
        v41 = v58;
      }
      while (v58);
    }

  }
  if (objc_msgSend_count(*(void **)(*(_QWORD *)(a1[8] + 8) + 40), v23, v24))
  {
    v59 = (void *)PCSFPCopyPublicIdentities();
    if (v59)
    {
      CKCFArrayForEach();
      if (!objc_msgSend_count(*(void **)(*(_QWORD *)(a1[8] + 8) + 40), v60, v61))
      {
LABEL_86:

        return;
      }
      v62 = (_QWORD *)MEMORY[0x1E0C95300];
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v63 = (os_log_t *)MEMORY[0x1E0C952D8];
      v64 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v65 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40);
        v66 = a1[10];
        *(_DWORD *)buf = 138543618;
        v92 = v65;
        v93 = 2114;
        v94 = v66;
        _os_log_impl(&dword_1BE990000, v64, OS_LOG_TYPE_INFO, "Failed to remove sharees with keyIDs: %{public}@ from PCS because no matching public identities were found in the PCS %{public}@", buf, 0x16u);
      }
      v67 = (void *)PCSFPCopyDiagnostic();
      if (*v62 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v68 = *v63;
      if (!os_log_type_enabled(*v63, OS_LOG_TYPE_DEBUG))
      {
LABEL_85:

        goto LABEL_86;
      }
      *(_DWORD *)buf = 138543362;
      v92 = (uint64_t)v67;
    }
    else
    {
      v69 = (_QWORD *)MEMORY[0x1E0C95300];
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v70 = (os_log_t *)MEMORY[0x1E0C952D8];
      v71 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v72 = a1[10];
        *(_DWORD *)buf = 138543362;
        v92 = v72;
        _os_log_impl(&dword_1BE990000, v71, OS_LOG_TYPE_INFO, "Warn: Failed to remove sharees from PCS, the PCS has no public identities: %{public}@", buf, 0xCu);
      }
      v67 = (void *)PCSFPCopyDiagnostic();
      if (*v69 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v68 = *v70;
      if (!os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
        goto LABEL_85;
      *(_DWORD *)buf = 138543362;
      v92 = (uint64_t)v67;
    }
    _os_log_debug_impl(&dword_1BE990000, v68, OS_LOG_TYPE_DEBUG, "PCS diagnostics: %{public}@", buf, 0xCu);
    goto LABEL_85;
  }
}

void sub_1BEA71C18(_QWORD *a1)
{
  void *v2;
  const char *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  os_log_t *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)PCSPublicIdentityCopyCurrentKeyFingerprint();
  if (objc_msgSend_containsObject_(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), v3, (uint64_t)v2))
  {
    if (PCSFPRemovePublicIdentity())
    {
      ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v4 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v6 = a1[6];
        v13 = 138543618;
        v14 = v2;
        v15 = 2112;
        v16 = v6;
        _os_log_impl(&dword_1BE990000, v4, OS_LOG_TYPE_INFO, "Removed sharee public identity for keyID %{public}@ from PCS %@", (uint8_t *)&v13, 0x16u);
      }
    }
    else
    {
      v7 = (_QWORD *)MEMORY[0x1E0C95300];
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v8 = (os_log_t *)MEMORY[0x1E0C952D8];
      v9 = *MEMORY[0x1E0C952D8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
      {
        v10 = a1[6];
        v13 = 138543618;
        v14 = v2;
        v15 = 2112;
        v16 = v10;
        _os_log_impl(&dword_1BE990000, v9, OS_LOG_TYPE_INFO, "Warn: Failed to remove the sharee public identity matching keyID %{public}@ from PCS %@", (uint8_t *)&v13, 0x16u);
      }
      v11 = (void *)PCSFPCopyDiagnostic();
      if (*v7 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v12 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
      {
        v13 = 138543362;
        v14 = v11;
        _os_log_debug_impl(&dword_1BE990000, v12, OS_LOG_TYPE_DEBUG, "PCS diagnostics: %{public}@", (uint8_t *)&v13, 0xCu);
      }

    }
    objc_msgSend_removeObject_(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), v5, (uint64_t)v2);
  }

}

void sub_1BEA71E84(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend_keysNotRemoved(v7, v3, v4);
  objc_msgSend_setKeysNotRemoved_(v7, v6, *(_QWORD *)(a1 + 32) + v5);

}

uint64_t sub_1BEA727A8()
{
  return PCSFPSetOwnerIdentity();
}

void sub_1BEA72ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BEA72AFC(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA731E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BEA7320C(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPrivateKey();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BEA73248(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA738EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA73918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = PCSFPCopyExported();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1BEA73DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA73DD8(uint64_t a1)
{
  uint64_t result;

  result = PCSFPCreateWithExported();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA741E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA74210(uint64_t a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *MEMORY[0x1E0D829C8];
  v6[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v6, &v5, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = PCSObjectCreateFromExportedWithIdentitiesAndOptions();

}

uint64_t sub_1BEA74950(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_decryptPCSDataOnSharePCS_shareModificationDate_withPublicSharingKey_oonPrivateKey_requestorOperationID_completionHandler_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_1BEA751D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  uint64_t v41;

  _Block_object_dispose((const void *)(v41 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA75234(_QWORD *a1)
{
  uint64_t result;

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

void sub_1BEA7525C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  NSObject *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD block[4];
  id v19;
  id v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  v8 = a2;
  dispatch_assert_queue_V2(v7);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a3);
  v11 = objc_msgSend_pcs(v8, v9, v10);

  if (v11)
  {
    objc_msgSend_setMyParticipantPCS_(*(void **)(a1 + 40), v12, v11);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = *MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v23 = v17;
      v24 = 2112;
      v25 = v11;
      _os_log_debug_impl(&dword_1BE990000, v13, OS_LOG_TYPE_DEBUG, "Successfully decrypted a per-participant PCS using our %{public}@ identity: %@", buf, 0x16u);
    }
  }
  v14 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA75418;
  block[3] = &unk_1E78318E0;
  v20 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 64);
  v19 = v15;
  v21 = v16;
  dispatch_async(v14, block);

}

uint64_t sub_1BEA75418(_QWORD *a1)
{
  uint64_t result;

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

void sub_1BEA75440(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id WeakRetained;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  id *v15;
  id *v16;
  id v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  _QWORD block[4];
  id v47;
  _QWORD v48[2];
  _QWORD v49[4];
  id v50;
  _QWORD v51[2];
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), a3);
  v11 = objc_msgSend_pcs(v7, v9, v10);

  if (v11)
  {
    objc_msgSend_setMyParticipantPCS_(*(void **)(a1 + 40), v12, v11);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v31 = *(void **)(a1 + 48);
      v32 = v13;
      objc_msgSend_identityManager(v31, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_PCSServiceStringFromCKServiceType_(v35, v36, *(_QWORD *)(a1 + 104));
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v37;
      v58 = 2112;
      v59 = v11;
      _os_log_debug_impl(&dword_1BE990000, v32, OS_LOG_TYPE_DEBUG, "Successfully decrypted a per-participant PCS using our %{public}@ identity: %@", buf, 0x16u);

    }
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 120))
  {
LABEL_6:
    v14 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA75A08;
    block[3] = &unk_1E78318E0;
    v15 = (id *)v48;
    v48[0] = *(id *)(a1 + 80);
    v16 = &v47;
    v17 = *(id *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 88);
    v47 = v17;
    v48[1] = v18;
    dispatch_async(v14, block);
    goto LABEL_13;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v19 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
  {
    v38 = *(void **)(a1 + 48);
    v39 = *(void **)(a1 + 56);
    v40 = v19;
    objc_msgSend_identityManager(v38, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_PCSServiceStringFromCKServiceType_(v43, v44, *(_QWORD *)(a1 + 112));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v57 = v39;
    v58 = 2114;
    v59 = (uint64_t)v45;
    _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Attempting decryption of per-participant PCS for share %@ using our %{public}@ identity", buf, 0x16u);

  }
  objc_msgSend_myParticipantPCSData(*(void **)(a1 + 40), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 72);
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = sub_1BEA757EC;
  v49[3] = &unk_1E7831930;
  v15 = &v50;
  v26 = *(id *)(a1 + 32);
  v27 = *(_QWORD *)(a1 + 88);
  v50 = v26;
  v53 = v27;
  v16 = (id *)v51;
  v28 = *(id *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 48);
  v51[0] = v28;
  v51[1] = v29;
  v54 = *(_QWORD *)(a1 + 112);
  v55 = 0;
  v52 = *(id *)(a1 + 80);
  objc_msgSend__createPCSFromData_ofType_usingPCSServiceType_tryDecryptingWithOtherServices_withSyncKeyRegistryRetry_lastModifiedDate_requestorOperationID_completionHandler_(WeakRetained, v30, (uint64_t)v22, 4, v23, 0, 1, v24, v25, v49);

LABEL_13:
}

void sub_1BEA757EC(uint64_t a1, void *a2, void *a3)
{
  id v6;
  NSObject *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  _QWORD block[4];
  id v26;
  id v27;
  uint64_t v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  v8 = a2;
  dispatch_assert_queue_V2(v7);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a3);
  v11 = objc_msgSend_pcs(v8, v9, v10);

  if (v11)
  {
    objc_msgSend_setMyParticipantPCS_(*(void **)(a1 + 40), v12, v11);
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v13 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_DEBUG))
    {
      v17 = *(void **)(a1 + 48);
      v18 = v13;
      objc_msgSend_identityManager(v17, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_PCSServiceStringFromCKServiceType_(v21, v22, *(_QWORD *)(a1 + 72));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 138543618;
      v30 = v23;
      v31 = 2112;
      v32 = v24;
      _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Successfully decrypted a per-participant PCS using our %{public}@ identity: %@", buf, 0x16u);

    }
  }
  v14 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA759E0;
  block[3] = &unk_1E78318E0;
  v27 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 64);
  v26 = v15;
  v28 = v16;
  dispatch_async(v14, block);

}

uint64_t sub_1BEA759E0(_QWORD *a1)
{
  uint64_t result;

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

uint64_t sub_1BEA75A08(_QWORD *a1)
{
  uint64_t result;

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

uint64_t sub_1BEA75A30(_QWORD *a1)
{
  uint64_t result;

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

void sub_1BEA75BAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t *v13;
  id *v14;
  id v15;
  NSObject *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const void *v25;
  id v26;
  id v27;
  NSObject *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const void *v37;
  id v38;
  id v39;
  NSObject *v40;
  id v41;
  NSObject *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  const char *v48;
  id v49;
  id v50;
  NSObject *v51;
  id v52;
  NSObject *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  id v60;
  _BOOL4 v61;
  id v62;
  NSObject *v63;
  const __CFString *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  const char *v73;
  id v74;
  id v75;
  NSObject *v76;
  const __CFString *v77;
  id v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  const __CFString *v82;
  uint64_t v83;
  int v84;
  _BOOL4 v85;
  id v86;
  NSObject *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  const char *v93;
  id v94;
  id v95;
  NSObject *v96;
  const __CFString *v97;
  const char *v98;
  void *v99;
  void *v100;
  id v101;
  NSObject *v102;
  const __CFString *v103;
  const char *v104;
  uint64_t v105;
  id v106;
  NSObject *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  id v113;
  id v114;
  uint64_t v115;
  NSObject *v116;
  const __CFString *v117;
  const char *v118;
  unint64_t v119;
  const __CFString *v120;
  const __CFString *v121;
  NSObject *v122;
  unint64_t v123;
  const __CFString *v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint8_t buf[4];
  const __CFString *v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v125 = a3;
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v8);

  v11 = objc_msgSend_myParticipantPCS(v5, v9, v10);
  v12 = (id *)MEMORY[0x1E0C952F8];
  v13 = (uint64_t *)MEMORY[0x1E0C95300];
  v14 = (id *)MEMORY[0x1E0C952D8];
  if (!v11)
  {
    v37 = 0;
    goto LABEL_22;
  }
  v15 = (id)*MEMORY[0x1E0C952F8];
  if (*v13 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v15);

  v16 = *v14;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BE990000, v16, OS_LOG_TYPE_DEBUG, "Trying to unlock PCS blobs for the share using our PPPCS", buf, 2u);
  }

  v17 = *(void **)(a1 + 32);
  objc_msgSend_pcsData(v5, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_myParticipantPCS(v5, v21, v22);
  v132 = 0;
  v25 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_logFailure_error_(v17, v24, (uint64_t)v20, 5, v23, 1, &v132);
  v26 = v132;

  if (v25)
  {
    v27 = *v12;
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v27);

    v28 = *v14;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "Successfully decrypted the invited share PCS using our per-participant PCS", buf, 2u);
    }

  }
  v29 = *(void **)(a1 + 32);
  objc_msgSend_publicPCSData(v5, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_myParticipantPCS(v5, v33, v34);
  v131 = 0;
  v37 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_logFailure_error_(v29, v36, (uint64_t)v32, 0, v35, 0, &v131);
  v38 = v131;

  if (v37)
  {
    v39 = *v12;
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v39);

    v40 = *v14;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v40, OS_LOG_TYPE_DEBUG, "Successfully decrypted the public share PCS using our per-participant PCS", buf, 2u);
    }

  }
  if (!v25)
  {
LABEL_22:
    v41 = *v12;
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v41);

    v42 = *v14;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      v119 = *(_QWORD *)(a1 + 64) - 1;
      if (v119 > 5)
        v120 = CFSTR("Current Service");
      else
        v120 = off_1E7831C48[v119];
      *(_DWORD *)buf = 138543362;
      v134 = v120;
      _os_log_debug_impl(&dword_1BE990000, v42, OS_LOG_TYPE_DEBUG, "Trying to unlock the invited PCS using our %{public}@ service identity", buf, 0xCu);
    }

    v43 = *(void **)(a1 + 32);
    objc_msgSend_pcsData(v5, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = *(_QWORD *)(a1 + 64);
    v130 = 0;
    v25 = (const void *)objc_msgSend_createSharePCSFromData_ofType_withService_logFailure_error_(v43, v48, (uint64_t)v46, 5, v47, 0, &v130);
    v49 = v130;

    if (v25)
    {
      v50 = *v12;
      if (*v13 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v50);

      v51 = *v14;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BE990000, v51, OS_LOG_TYPE_DEBUG, "Successfully decrypted the invited share PCS using our identity", buf, 2u);
      }

    }
    if (v37)
      goto LABEL_36;
    goto LABEL_32;
  }
  if (v37)
  {
LABEL_36:
    v61 = v25 == 0;
    goto LABEL_37;
  }
LABEL_32:
  v52 = *v12;
  if (*v13 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v52);

  v53 = *v14;
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
  {
    v123 = *(_QWORD *)(a1 + 64) - 1;
    if (v123 > 5)
      v124 = CFSTR("Current Service");
    else
      v124 = off_1E7831C48[v123];
    *(_DWORD *)buf = 138543362;
    v134 = v124;
    _os_log_debug_impl(&dword_1BE990000, v53, OS_LOG_TYPE_DEBUG, "Trying to unlock the public PCS using our %{public}@ service identity", buf, 0xCu);
  }

  v54 = *(void **)(a1 + 32);
  objc_msgSend_publicPCSData(v5, v55, v56);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = *(_QWORD *)(a1 + 64);
  v129 = 0;
  v37 = (const void *)objc_msgSend_createSharePCSFromData_ofType_withService_logFailure_error_(v54, v59, (uint64_t)v57, 0, v58, 0, &v129);
  v60 = v129;

  if (v37)
    goto LABEL_36;
  if (*(_QWORD *)(a1 + 40))
  {
    v86 = *v12;
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v86);

    v87 = *v14;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v87, OS_LOG_TYPE_DEBUG, "Trying to unlock the public PCS using the public sharing key", buf, 2u);
    }

    v88 = *(void **)(a1 + 32);
    objc_msgSend_publicPCSData(v5, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = *(_QWORD *)(a1 + 40);
    v128 = 0;
    v37 = (const void *)objc_msgSend_createSharePCSFromData_sharePrivateKey_error_(v88, v93, (uint64_t)v91, v92, &v128);
    v94 = v128;

  }
  else
  {
    v37 = 0;
  }
  v61 = v25 == 0;
  if (v25 && !v37)
  {
    v106 = *v12;
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v106);

    v107 = *v14;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v107, OS_LOG_TYPE_DEBUG, "Trying to unlock the public PCS using the decrypted invited PCS", buf, 2u);
    }

    v108 = *(void **)(a1 + 32);
    objc_msgSend_publicPCSData(v5, v109, v110);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v127 = 0;
    v37 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v108, v112, (uint64_t)v111, 0, v25, &v127);
    v113 = v127;

    v114 = *v12;
    v115 = *v13;
    if (!v37 || v113)
    {
      if (v115 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v114);

      v116 = *v14;
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
        goto LABEL_102;
      v121 = *(const __CFString **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v134 = v121;
      v118 = "Couldn't decrypt public PCS for share %@ using the private PCS. Oh well, moving on.";
    }
    else
    {
      if (v115 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v114);

      v116 = *v14;
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
        goto LABEL_102;
      v117 = *(const __CFString **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v134 = v117;
      v118 = "Successfully decrypted the public PCS for share %@ using the private PCS";
    }
    _os_log_impl(&dword_1BE990000, v116, OS_LOG_TYPE_INFO, v118, buf, 0xCu);
LABEL_102:

  }
  if (!v37)
  {
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], *v12);
    v122 = *v14;
    if (os_log_type_enabled((os_log_t)*v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE990000, v122, OS_LOG_TYPE_INFO, "Failed to decrypt the public share PCS using our identity", buf, 2u);
    }
    v84 = 0;
    v37 = 0;
    goto LABEL_55;
  }
LABEL_37:
  v62 = *v12;
  if (*v13 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v62);

  v63 = *v14;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
  {
    v64 = *(const __CFString **)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v134 = v64;
    _os_log_impl(&dword_1BE990000, v63, OS_LOG_TYPE_INFO, "We were able to decrypt the share public PCS using our identity for share %@", buf, 0xCu);
  }

  if (v61)
  {
    if (objc_msgSend_publicPermission(v5, v65, v66) != 1 && objc_msgSend_publicPermission(v5, v67, v68))
    {
      v71 = *(void **)(a1 + 32);
      objc_msgSend_pcsData(v5, v69, v70);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v126 = 0;
      v25 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_logFailure_error_(v71, v73, (uint64_t)v72, 5, v37, 0, &v126);
      v74 = v126;

      v75 = *v12;
      if (v25 && !v74)
      {
        if (*v13 != -1)
          dispatch_once(MEMORY[0x1E0C95300], v75);
        v76 = *v14;
        if (os_log_type_enabled((os_log_t)*v14, OS_LOG_TYPE_INFO))
        {
          v77 = *(const __CFString **)(a1 + 48);
          *(_DWORD *)buf = 138412290;
          v134 = v77;
          _os_log_impl(&dword_1BE990000, v76, OS_LOG_TYPE_INFO, "Unlocked private share PCS for share %@ using the public PCS", buf, 0xCu);
        }
        goto LABEL_68;
      }
      v95 = v75;
      if (*v13 != -1)
        dispatch_once(MEMORY[0x1E0C95300], v95);

      v96 = *v14;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        v97 = *(const __CFString **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        v134 = v97;
        v135 = 2112;
        v136 = (uint64_t)v74;
        _os_log_impl(&dword_1BE990000, v96, OS_LOG_TYPE_INFO, "Couldn't decrypt share private PCS with public PCS for share %@: %@", buf, 0x16u);
      }

      goto LABEL_67;
    }
    v78 = *v12;
    if (*v13 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v78);

    v79 = *v14;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      v82 = *(const __CFString **)(a1 + 48);
      v83 = objc_msgSend_publicPermission(v5, v80, v81);
      *(_DWORD *)buf = 138412546;
      v134 = v82;
      v135 = 2048;
      v136 = v83;
      _os_log_impl(&dword_1BE990000, v79, OS_LOG_TYPE_INFO, "We were able to decrypt the public share PCS for %@ with our identity, but since the share permission is %ld we can't decrypt the private PCS. This might not go well...", buf, 0x16u);
    }

    v25 = 0;
    v84 = 1;
LABEL_55:
    v85 = v25 != 0;
    goto LABEL_70;
  }
LABEL_67:
  if (v25)
  {
LABEL_68:
    objc_msgSend_setPublicPCS_(v5, v65, (uint64_t)v37);
    objc_msgSend_setInvitedPCS_(v5, v98, (uint64_t)v25);
    CFRelease(v25);
    v99 = 0;
    v100 = v125;
    goto LABEL_78;
  }
  v85 = 0;
  v84 = 1;
LABEL_70:
  v101 = *v12;
  if (*v13 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v101);
  v100 = v125;

  v102 = *v14;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
  {
    v103 = *(const __CFString **)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v134 = v103;
    _os_log_impl(&dword_1BE990000, v102, OS_LOG_TYPE_INFO, "Warn: Couldn't unlock the private share PCS for share %@", buf, 0xCu);
  }

  objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v104, *MEMORY[0x1E0C94B20], 5004, v125, CFSTR("Couldn't unlock the private share PCS for share %@"), *(_QWORD *)(a1 + 48));
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v85)
  {
    if (!v84)
      goto LABEL_79;
    goto LABEL_78;
  }
  CFRelease(v25);
  if ((v84 & 1) != 0)
LABEL_78:
    CFRelease(v37);
LABEL_79:
  v105 = *(_QWORD *)(a1 + 56);
  if (v105)
    (*(void (**)(uint64_t, id, void *))(v105 + 16))(v105, v5, v99);

}

uint64_t sub_1BEA769A8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__locked_pcsDataFromFetchedShare_withPublicSharingKey_oonPrivateKey_withServiceType_requestorOperationID_completionHandler_, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1BEA76DF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

uint64_t sub_1BEA76E0C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32), 0);
  return result;
}

void sub_1BEA76E2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v9);

  if (objc_msgSend_pcs(v5, v10, v11) && objc_msgSend_publicPCS(v5, v12, v13))
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v14 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v15 = *(void **)(a1 + 40);
      v16 = v14;
      objc_msgSend_recordID(v15, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138412290;
      v29 = v19;
      v20 = "Decrypted share PCS for share %@";
      v21 = v16;
      v22 = 12;
LABEL_11:
      _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v28, v22);

    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v23 = (void *)*MEMORY[0x1E0C952D8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
    {
      v24 = *(void **)(a1 + 40);
      v16 = v23;
      objc_msgSend_recordID(v24, v25, v26);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138412546;
      v29 = v19;
      v30 = 2112;
      v31 = v6;
      v20 = "Couldn't unlock the private share PCS for share %@: %@";
      v21 = v16;
      v22 = 22;
      goto LABEL_11;
    }
  }
  v27 = *(_QWORD *)(a1 + 48);
  if (v27)
    (*(void (**)(uint64_t, id, id))(v27 + 16))(v27, v5, v6);

}

void sub_1BEA781E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA7820C(uint64_t a1)
{
  uint64_t result;

  result = PCSFPAddPublicIdentityWithShareFlags();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA786C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA786E0(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRemovePublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_1BEA78AD8(uint64_t a1, const char *a2)
{
  return (id)objc_msgSend_removePublicIdentity_fromSharePCS_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(_QWORD *)(a1 + 40));
}

void sub_1BEA78D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA78DC0(uint64_t a1, uint64_t a2)
{
  void *v4;
  const char *v5;
  _QWORD *v6;
  os_log_t *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[7];
  uint8_t v17[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 buf;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (void *)PCSPublicIdentityCopyPublicKey();
  if (objc_msgSend_isEqualToData_(*(void **)(a1 + 32), v5, (uint64_t)v4))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    v6 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = (os_log_t *)MEMORY[0x1E0C952B0];
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "Removing public identity for key %{public}@", (uint8_t *)&buf, 0xCu);
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v22 = 0x2020000000;
    v23 = 0;
    v11 = *(void **)(a1 + 40);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1BEA78FFC;
    v16[3] = &unk_1E78312C0;
    v12 = *(_QWORD *)(a1 + 64);
    v16[4] = &buf;
    v16[5] = v12;
    v16[6] = a2;
    objc_msgSend__onSynchronizeQueue_(v11, v9, (uint64_t)v16);
    if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
    {
      if (*v6 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v13 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v15 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)v17 = 138543618;
        v18 = v14;
        v19 = 2112;
        v20 = v15;
        _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Failed to remove public identity matching key %{public}@ from record PCS %@", v17, 0x16u);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
    _Block_object_dispose(&buf, 8);
  }

}

void sub_1BEA78FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA78FFC(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRemovePublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BEA79238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA79264(uint64_t a1, uint64_t a2)
{
  void *v4;
  const char *v5;
  _QWORD *v6;
  os_log_t *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[7];
  uint8_t v21[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 buf;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (void *)PCSPublicIdentityCopyCurrentKeyFingerprint();
  if (objc_msgSend_isEqualToData_(*(void **)(a1 + 32), v5, (uint64_t)v4))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    v6 = (_QWORD *)MEMORY[0x1E0C95300];
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v7 = (os_log_t *)MEMORY[0x1E0C952B0];
    v8 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1BE990000, v8, OS_LOG_TYPE_INFO, "Removing public identity for keyID %{public}@", (uint8_t *)&buf, 0xCu);
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v26 = 0x2020000000;
    v27 = 0;
    v11 = *(void **)(a1 + 40);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1BEA794EC;
    v20[3] = &unk_1E78312C0;
    v12 = *(_QWORD *)(a1 + 64);
    v20[4] = &buf;
    v20[5] = v12;
    v20[6] = a2;
    objc_msgSend__onSynchronizeQueue_(v11, v9, (uint64_t)v20);
    if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
    {
      if (*v6 != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v13 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)v21 = 138543618;
        v22 = v15;
        v23 = 2112;
        v24 = v16;
        _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Failed to remove public identity matching keyID %{public}@ from PCS %@", v21, 0x16u);
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v14, *MEMORY[0x1E0C94B20], 5005, CFSTR("Couldn't remove public identity with keyID %@ from PCS %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v19 = *(void **)(v18 + 40);
        *(_QWORD *)(v18 + 40) = v17;

      }
    }
    _Block_object_dispose(&buf, 8);
  }

}

void sub_1BEA794CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA794EC(uint64_t a1)
{
  uint64_t result;

  result = PCSFPRemovePublicIdentity();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BEA7B604(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1BEA7B618(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_1BEA7B62C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1BEA7B640(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t v16;
  id v17;

  v5 = a2;
  v6 = a3;
  objc_msgSend_synchronizeQueue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BEA7B710;
  v13[3] = &unk_1E78303B0;
  v14 = v5;
  v15 = v6;
  v10 = *(void **)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = v10;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, v13);

}

void sub_1BEA7B710(uint64_t a1, const char *a2)
{
  uint64_t v3;
  BOOL v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(_QWORD *)(a1 + 40) == 0;
  else
    v4 = 0;
  if (v4)
  {
    objc_msgSend_setBoundaryKeyData_(*(void **)(a1 + 48), a2, v3);
    v7 = 0;
  }
  else
  {
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], a2, *MEMORY[0x1E0C94B20], 5005);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_callbackQueue(*(void **)(a1 + 48), v5, v6);
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BEA7B810;
  block[3] = &unk_1E782EBF0;
  v13 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 32);
  v12 = v7;
  v9 = v7;
  dispatch_async(v8, block);

}

uint64_t sub_1BEA7B810(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1BEA7B8BC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__lockedGlobalPerUserBoundaryKeyDataWithCompletionHandler_, *(_QWORD *)(a1 + 40));
}

void sub_1BEA7BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BEA7BDAC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

void sub_1BEA7BDC8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138543618;
      v13 = v11;
      v14 = 2112;
      v15 = v8;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Warn: Keychain sync for signing identity %{public}@ failed: %@", (uint8_t *)&v12, 0x16u);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1BEA7BF08(uint64_t a1, char a2, void *a3, void *a4)
{
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  if (v8)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v10 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138543618;
      v13 = v11;
      v14 = 2112;
      v15 = v8;
      _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Warn: Keychain sync for signing identity %{public}@ failed: %@", (uint8_t *)&v12, 0x16u);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_1BEA7C048(_QWORD *a1)
{
  uint64_t result;
  _BOOL8 v3;
  uint64_t v4;

  result = a1[4];
  if (result)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
      v3 = *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) != 0;
    else
      v3 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
    if (!v4)
      v4 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40);
    return (*(uint64_t (**)(uint64_t, _BOOL8, uint64_t))(result + 16))(result, v3, v4);
  }
  return result;
}

uint64_t sub_1BEA7C260(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(result + 16))(result, 1, 0, 0);
  return result;
}

void sub_1BEA7C280(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  char v19;

  v7 = a3;
  v8 = a4;
  objc_msgSend_callbackQueue(*(void **)(a1 + 32), v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1BEA7C35C;
  v15[3] = &unk_1E7831AE8;
  v12 = *(id *)(a1 + 40);
  v17 = v8;
  v18 = v12;
  v19 = a2;
  v16 = v7;
  v13 = v8;
  v14 = v7;
  dispatch_async(v11, v15);

}

uint64_t sub_1BEA7C35C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t sub_1BEA7C910(uint64_t a1, void *a2)
{
  return objc_msgSend_subdataWithRange_(a2, (const char *)a2, 0, 4);
}

void sub_1BEA7CAC4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("com.apple.cloudkit.unittest.nopcs.CKManateeContainerTests."), CFSTR("com.apple.cloudkit.zoneshare.test_non_manatee"), CFSTR("com.apple.cloudkit.unittest.zonesharing."), CFSTR("com.apple.cloudkit.unittest.fdb.zonesharing."), CFSTR("com.apple.test.p"), CFSTR("com.apple.test.fdb.p"), CFSTR("com.apple.cloudkit.unittest.CKAnonymousToServerShareParticipantTests."), 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED702790;
  qword_1ED702790 = v2;

}

void sub_1BEA7CBE4()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v2 = objc_msgSend_initWithObjects_(v0, v1, (uint64_t)CFSTR("ForceUserKeyRegistrySyncRetryOnZonePCSCreation"), CFSTR("ForceUserKeyRegistrySyncRetryOnDecryption"), CFSTR("ForceMissingIdentitiesErrorOnDecryptionRetry"), CFSTR("ForceDecryptFailedErrorOnDecryptionRetry"), CFSTR("ResetKeySyncState"), CFSTR("AllowThrottlingWithUnitTestAccount"), CFSTR("ForceKeySyncFailure"), CFSTR("ForceKeySyncFailureForReminders"), CFSTR("FakeOutCurrentIdentityIsMissing"), CFSTR("ForceImmediateUserKeyRegistrySyncFailure"), CFSTR("FakeSignatureGenerationError"), CFSTR("FakeInvalidSignature"), CFSTR("ForceKRSReturnExistingIdentityValue"), CFSTR("DisallowKRSToBePerformed"), CFSTR("ExpectedPersonaIdentifier"), CFSTR("ForceKeyRegistrySyncOnRemindersZoneCreation"), CFSTR("ForceSingleIdentityForRemindersZone"),
         CFSTR("GenerateOneInvalidSignature"),
         CFSTR("OverrideShareModificationDate"),
         CFSTR("FakeSignatureValidationError"),
         CFSTR("ExpectValidationSuccessWithManateeIdentity"),
         CFSTR("ExpectValidationSuccessWithStingrayIdentity"),
         CFSTR("ClearContainersOnPCSNotifier"),
         CFSTR("SimulateMissingSigningIdentity"),
         0);
  v3 = (void *)qword_1ED7027A0;
  qword_1ED7027A0 = v2;

}

void sub_1BEA7CDDC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  int v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  int v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  if (!v4 || (v7 = (void *)v4, v8 = objc_msgSend_count(*(void **)(a1 + 40), v5, v6), v7, !v8))
  {
    v11 = (void *)objc_opt_new();
    objc_msgSend_setPcsTestOverrides_(*(void **)(a1 + 32), v12, (uint64_t)v11);

  }
  if (!objc_msgSend_count(*(void **)(a1 + 40), v9, v10))
  {
    objc_msgSend_identityManager(*(void **)(a1 + 32), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_clearOverrides(v15, v16, v17);

  }
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v18 = *(id *)(a1 + 40);
  v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v45, v49, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v46;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v46 != v22)
          objc_enumerationMutation(v18);
        v24 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * v23);
        v25 = (void *)objc_opt_class();
        objc_msgSend_pcsOverrideKeys(v25, v26, v27, (_QWORD)v45);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend_containsObject_(v28, v29, v24);

        if (v30)
        {
          objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v31, v24);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), v34, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v33, v24);
        }
        else
        {
          objc_msgSend_overrideKeys(CKDPCSIdentityManager, v31, v32);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = objc_msgSend_containsObject_(v38, v39, v24);

          if (!v40)
            goto LABEL_16;
          objc_msgSend_identityManager(*(void **)(a1 + 32), v41, v42);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v43, v24);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setOverride_value_(v33, v44, v24, v36);
        }

LABEL_16:
        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v41, (uint64_t)&v45, v49, 16);
    }
    while (v21);
  }

}

void sub_1BEA7D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA7D124(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  id v12;

  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_BOOLValue(v6, v7, v8);

  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), v9, v10);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v12, v11, 0, *(_QWORD *)(a1 + 40));

}

void sub_1BEA7D2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA7D2CC(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;

  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v4, *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_BOOLValue(v5, v6, v7);

}

void sub_1BEA7D458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA7D470(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v4, *(_QWORD *)(a1 + 40));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void *sub_1BEA7D6D8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;

  if (!qword_1EF577A10)
    qword_1EF577A10 = _sl_dlopen();
  v3 = (void *)qword_1EF577A10;
  if (!qword_1EF577A10)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, (uint64_t)"void *ProtectedCloudStorageLibrary(void)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v3, v7, (uint64_t)v6, CFSTR("CKDPCSManager.m"), 64, CFSTR("%s"), 0);

    __break(1u);
    free(v8);
  }
  return v3;
}

void sub_1BEA7DEB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA7DED8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_shareMetadataFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_shareMetadataFetchedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_1BEA7EA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,id a28)
{
  id *v28;
  id *v29;
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1BEA7EAB4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  id WeakRetained;

  v7 = (id *)(a1 + 48);
  v8 = a4;
  v9 = a3;
  v10 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend__handleTokenResolveWithLookupInfo_shareMetadata_responseCode_urlByShortTokenLookupInfos_tokensToFetchByURL_(WeakRetained, v11, (uint64_t)v10, v9, v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1BEA7EB3C(void **a1)
{
  id WeakRetained;
  id v3;
  const char *v4;
  uint64_t v5;
  __CFString *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  NSObject *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t v37[128];
  uint8_t buf[4];
  const __CFString *v39;
  __int16 v40;
  const __CFString *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v3 = objc_loadWeakRetained(a1 + 7);
  objc_msgSend_error(v3, v4, v5);
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v7 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR(" with error ");
    v11 = &stru_1E7838F48;
    if (v6)
      v11 = v6;
    else
      v10 = &stru_1E7838F48;
    *(_DWORD *)buf = 138543618;
    v39 = v10;
    v40 = 2112;
    v41 = v11;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Short token metadata request finished%{public}@%@", buf, 0x16u);
  }
  objc_msgSend_container(a1[4], v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clientSDKVersion(v12, v13, v14);
  v15 = CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24();

  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(a1[4], v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)CFSTR("LegacyErrorHandling"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_BOOLValue(v20, v21, v22);

    if ((v23 & 1) != 0)
    {
      if (!v6)
        goto LABEL_24;
LABEL_16:
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      objc_msgSend_allKeys(a1[5], v16, v17, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v33, v37, 16);
      if (v27)
      {
        v29 = v27;
        v30 = *(_QWORD *)v34;
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v34 != v30)
              objc_enumerationMutation(v25);
            objc_msgSend__performCallbackForURL_withMetadata_error_(WeakRetained, v28, *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i), 0, v6);
          }
          v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v33, v37, 16);
        }
        while (v29);
      }

      goto LABEL_24;
    }
  }
  if (!v6)
    goto LABEL_24;
  if (!v15)
    goto LABEL_16;
  objc_msgSend_error(WeakRetained, v16, v17);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
    objc_msgSend_setError_(WeakRetained, v16, (uint64_t)v6);
LABEL_24:
  objc_msgSend_stateTransitionGroup(WeakRetained, v16, v17);
  v32 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v32);

}

void sub_1BEA7F514(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 144));
  _Unwind_Resume(a1);
}

void sub_1BEA7F548(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  const char *v6;
  int v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  int hasDisplaysSystemAcceptPromptEntitlement;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  NSObject *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  char isEqual;
  void *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  void *v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[4];
  id v76;
  id v77;
  id v78;
  uint8_t buf[4];
  void *v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (*MEMORY[0x1E0C95280])
  {
    if (objc_msgSend_participantStatus(*(void **)(a1 + 32), v2, v3) == 2)
    {
      objc_msgSend_parentOperation(WeakRetained, v2, v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend_checkAndClearUnitTestOverrides_(v5, v6, (uint64_t)CFSTR("ForceShareAcceptTwice"));

      if (v7)
        objc_msgSend_setParticipantStatus_(*(void **)(a1 + 32), v2, 1);
    }
  }
  objc_msgSend_privateTokenData(*(void **)(a1 + 40), v2, v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setPrivateToken_(*(void **)(a1 + 32), v9, (uint64_t)v8);

  objc_msgSend_publicTokenData(*(void **)(a1 + 40), v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setPublicToken_(*(void **)(a1 + 32), v13, (uint64_t)v12);

  objc_msgSend_container(WeakRetained, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entitlements(v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  hasDisplaysSystemAcceptPromptEntitlement = objc_msgSend_hasDisplaysSystemAcceptPromptEntitlement(v19, v20, v21);
  objc_msgSend_setAcceptedInProcess_(*(void **)(a1 + 32), v23, hasDisplaysSystemAcceptPromptEntitlement ^ 1u);

  if (objc_msgSend_overwriteContainerPCSServiceIfManatee(WeakRetained, v24, v25))
  {
    objc_msgSend_callingParticipant(*(void **)(a1 + 32), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_userIdentity(v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend_publicKeyVersion(v31, v32, v33);

    PCSServiceItemGetNameByIndex();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v35, v36, v37) && PCSServiceItemTypeIsManatee())
    {
      objc_msgSend_container(WeakRetained, v26, v27);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_pcsManager(v38, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setPCSServiceNameOverwrite_(v41, v42, (uint64_t)v35);

      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v43 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v80 = v35;
        v81 = 2048;
        v82 = v34;
        _os_log_impl(&dword_1BE990000, v43, OS_LOG_TYPE_INFO, "Using the service name %@ from public key version %lu of share metadata because it is manatee and this operation is initiated by another process", buf, 0x16u);
      }
    }
  }
  else
  {
    v35 = 0;
  }
  objc_msgSend_container(WeakRetained, v26, v27);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pcsManager(v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_currentServiceIsManatee(v47, v48, v49) & 1) == 0)
  {

    goto LABEL_23;
  }
  objc_msgSend_callingParticipant(*(void **)(a1 + 32), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend_acceptanceStatus(v52, v53, v54);

  if (v55 != 1)
  {
LABEL_23:
    objc_msgSend__continueSharePCSPrepForShareMetadata_shareURL_(WeakRetained, v56, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
    goto LABEL_29;
  }
  if (*(_QWORD *)(a1 + 48) && (objc_msgSend_overwriteContainerPCSServiceIfManatee(WeakRetained, v56, v57) & 1) == 0)
  {
    objc_msgSend_shareURL(*(void **)(a1 + 48), v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v58, v59, *(_QWORD *)(a1 + 56));

    v61 = (void *)*MEMORY[0x1E0C952F8];
    if ((isEqual & 1) != 0)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v61);
      v62 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v63 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 138412290;
        v80 = v63;
        _os_log_debug_impl(&dword_1BE990000, v62, OS_LOG_TYPE_DEBUG, "Share invitation token and client-provided share URL are a match: %@", buf, 0xCu);
      }
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v61);
      v64 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v69 = *(void **)(a1 + 48);
        v70 = v64;
        objc_msgSend_shareURL(v69, v71, v72);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 138412546;
        v80 = v73;
        v81 = 2112;
        v82 = v74;
        _os_log_error_impl(&dword_1BE990000, v70, OS_LOG_TYPE_ERROR, "Share invitation token URL %@ doesn't match client-provided share URL %@. This will go badly.", buf, 0x16u);

      }
    }
  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v56, v57);
  v65 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v65);

  v66 = *(_QWORD *)(a1 + 32);
  v75[0] = MEMORY[0x1E0C809B0];
  v75[1] = 3221225472;
  v75[2] = sub_1BEA7F9F4;
  v75[3] = &unk_1E7831CA8;
  v67 = *(_QWORD *)(a1 + 48);
  v76 = *(id *)(a1 + 56);
  v77 = WeakRetained;
  v78 = *(id *)(a1 + 32);
  objc_msgSend__prepPPPCSDataForDugongShareMetadata_withInvitationToken_completionHandler_(WeakRetained, v68, v66, v67, v75);

LABEL_29:
}

void sub_1BEA7F9F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = (void *)*MEMORY[0x1E0C952F8];
  v9 = *MEMORY[0x1E0C95300];
  if (!v5 || v6)
  {
    if (v9 != -1)
      dispatch_once(MEMORY[0x1E0C95300], v8);
    v19 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v24 = v22;
      v25 = 2112;
      v26 = v7;
      _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "Warn: Couldn't ingest manatee sharing invitation data for share %@: %@", buf, 0x16u);
      if (v7)
        goto LABEL_13;
    }
    else if (v7)
    {
LABEL_13:
      objc_msgSend__performCallbackForURL_withMetadata_error_(*(void **)(a1 + 40), v20, *(_QWORD *)(a1 + 32), 0, v7);
      goto LABEL_14;
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v20, *MEMORY[0x1E0C94B20], 1000, CFSTR("No participant protection data for share %@"), *(_QWORD *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  if (v9 != -1)
    dispatch_once(MEMORY[0x1E0C95300], v8);
  v10 = *MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
  {
    v13 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v24 = v13;
    _os_log_impl(&dword_1BE990000, v10, OS_LOG_TYPE_INFO, "Successfully ingested manatee sharing invitation data for share %@", buf, 0xCu);
  }
  objc_msgSend_callingParticipant(*(void **)(a1 + 48), v11, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setProtectionInfo_(v14, v15, (uint64_t)v5);

  objc_msgSend__continueSharePCSPrepForShareMetadata_shareURL_(*(void **)(a1 + 40), v16, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  v7 = 0;
LABEL_14:
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v17, v18);
  v21 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v21);

}

void sub_1BEA7FC04(uint64_t a1, char a2)
{
  const char *v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ((a2 & 1) != 0)
  {
    objc_msgSend_callingParticipant(*(void **)(a1 + 40), v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend_permission(v7, v8, v9);
    objc_msgSend_setParticipantPermission_(*(void **)(a1 + 40), v11, v10);

    objc_msgSend_callingParticipant(*(void **)(a1 + 40), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_acceptanceStatus(v14, v15, v16);
    objc_msgSend_setParticipantStatus_(*(void **)(a1 + 40), v18, v17);

    objc_msgSend_callingParticipant(*(void **)(a1 + 40), v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_role(v21, v22, v23);
    objc_msgSend_setParticipantRole_(*(void **)(a1 + 40), v25, v24);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v28 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BE990000, v28, OS_LOG_TYPE_DEBUG, "Couldn't find current user on share with anonymous to server participants. Swizzling into share not found.", buf, 2u);
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v29, *MEMORY[0x1E0C94B20], 2003, CFSTR("Couldn't find this participant on the share for %@"), *(_QWORD *)(a1 + 32));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__performCallbackForURL_withMetadata_error_(WeakRetained, v31, *(_QWORD *)(a1 + 32), 0, v30);

  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v26, v27);
  v32 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v32);

}

void sub_1BEA8007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA800B0(uint64_t a1, uint64_t a2, void *a3)
{
  __CFString *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const __CFString *v31;
  const __CFString *v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  _BYTE v36[24];
  const __CFString *v37;
  __int16 v38;
  const __CFString *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(WeakRetained, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)CFSTR("ForceSharePCSPrepFailure"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_BOOLValue(v11, v12, v13);

    if (v14)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, *MEMORY[0x1E0C94B20], 5004, CFSTR("Failing share PCS prep for unit tests"));
      v16 = objc_claimAutoreleasedReturnValue();

      v4 = (__CFString *)v16;
    }
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v17 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
  {
    v19 = *(void **)(a1 + 32);
    v20 = v17;
    objc_msgSend_share(v19, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_container(v8, v27, v28);
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = (void *)v29;
    v31 = CFSTR(" and error: ");
    *(_DWORD *)v36 = 138413058;
    v32 = &stru_1E7838F48;
    *(_QWORD *)&v36[4] = v26;
    *(_WORD *)&v36[12] = 2112;
    if (!v4)
      v31 = &stru_1E7838F48;
    *(_QWORD *)&v36[14] = v29;
    if (v4)
      v32 = v4;
    *(_WORD *)&v36[22] = 2114;
    v37 = v31;
    v38 = 2112;
    v39 = v32;
    _os_log_impl(&dword_1BE990000, v20, OS_LOG_TYPE_INFO, "Prepped PCS data for share %@ with container %@%{public}@%@", v36, 0x2Au);

  }
  objc_msgSend__continueHandlingFetchedShareMetadata_shareURL_(v8, v18, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_OWORD *)v36, *(_QWORD *)&v36[16]);
  objc_msgSend_stateTransitionGroup(v8, v33, v34);
  v35 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v35);

}

void sub_1BEA80950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA80974(uint64_t a1, void *a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  if (v7)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(_QWORD *)(v4 + 40);
    v5 = (id *)(v4 + 40);
    if (!v6)
      objc_storeStrong(v5, a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1BEA809CC(uint64_t a1, const char *a2)
{
  return objc_msgSend__performCallbackForURL_withMetadata_error_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
}

void sub_1BEA80F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  uint64_t v13;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 136));
  _Unwind_Resume(a1);
}

void sub_1BEA80F3C(uint64_t a1, uint64_t a2, void *a3)
{
  __CFString *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  os_log_t *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  __CFString *v27;
  uint64_t v28;
  const __CFString *v29;
  const __CFString *v30;
  const char *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD v41[4];
  __CFString *v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint8_t buf[4];
  __CFString *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  const __CFString *v52;
  __int16 v53;
  const __CFString *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v8 = WeakRetained;
  if (*MEMORY[0x1E0C95280])
  {
    objc_msgSend_unitTestOverrides(WeakRetained, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)CFSTR("ForceSharePCSPrepFailure"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_BOOLValue(v11, v12, v13);

    if (v14)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v15, *MEMORY[0x1E0C94B20], 5004, CFSTR("Failing share PCS prep for unit tests"));
      v16 = objc_claimAutoreleasedReturnValue();

      v4 = (__CFString *)v16;
    }
  }
  v17 = (_QWORD *)MEMORY[0x1E0C95300];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v18 = (os_log_t *)MEMORY[0x1E0C952D8];
  v19 = (void *)*MEMORY[0x1E0C952D8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952D8], OS_LOG_TYPE_INFO))
  {
    v20 = *(void **)(a1 + 32);
    v21 = v19;
    objc_msgSend_share(v20, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v24, v25, v26);
    v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v28 = *(_QWORD *)(a1 + 40);
    v29 = CFSTR(" and error: ");
    v30 = &stru_1E7838F48;
    *(_DWORD *)buf = 138413058;
    v48 = v27;
    if (!v4)
      v29 = &stru_1E7838F48;
    v49 = 2112;
    if (v4)
      v30 = v4;
    v50 = v28;
    v51 = 2112;
    v52 = v29;
    v53 = 2112;
    v54 = v30;
    _os_log_impl(&dword_1BE990000, v21, OS_LOG_TYPE_INFO, "Prepped PCS data for share %@ with container %@%@%@", buf, 0x2Au);

  }
  if (!v4)
    goto LABEL_20;
  if (CKIsPCSError()
    && (objc_msgSend__currentUserIsOONForShareMetadata_(v8, v31, *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    if (*v17 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v33 = *v18;
    if (os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v48 = v4;
      _os_log_impl(&dword_1BE990000, v33, OS_LOG_TYPE_INFO, "Suppressing error for OON user share metadata fetch. Error was: %@", buf, 0xCu);
    }

LABEL_20:
    v34 = objc_opt_class();
    v36 = *(_QWORD *)(a1 + 40);
    v35 = *(_QWORD *)(a1 + 48);
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = sub_1BEA81288;
    v41[3] = &unk_1E7831D98;
    v42 = (__CFString *)*(id *)(a1 + 56);
    v43 = v8;
    v44 = *(id *)(a1 + 32);
    v37 = *(id *)(a1 + 72);
    v45 = *(_QWORD *)(a1 + 64);
    v46 = v37;
    objc_msgSend_spawnAndRunOperationOfClass_operationInfo_spawnQueue_container_operationConfigurationBlock_(v8, v38, v34, v35, 0, v36, v41);

    v4 = v42;
    goto LABEL_24;
  }
  v39 = *(_QWORD *)(a1 + 72);
  if (v39)
    (*(void (**)(uint64_t, __CFString *))(v39 + 16))(v39, v4);
  objc_msgSend_stateTransitionGroup(v8, v31, v32);
  v40 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v40);

LABEL_24:
}

void sub_1BEA81288(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  objc_class *v14;
  id v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  _QWORD *v23;
  id v24;
  _QWORD v25[5];
  id location;
  _QWORD v27[5];
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_setFullRecordsToFetch_(v3, v4, *(_QWORD *)(a1 + 32));
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = sub_1BE9BAFB8;
  v27[4] = sub_1BE9BAD90;
  v28 = 0;
  objc_initWeak(&location, v3);
  v5 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_1BEA81560;
  v25[3] = &unk_1E7831D48;
  v25[4] = v27;
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v6, (uint64_t)v25);
  v20[0] = v5;
  v20[1] = 3221225472;
  v20[2] = sub_1BEA815D4;
  v20[3] = &unk_1E7831D70;
  objc_copyWeak(&v24, &location);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v23 = v27;
  v20[4] = v7;
  v21 = v8;
  v22 = *(id *)(a1 + 64);
  objc_msgSend_setCompletionBlock_(v3, v9, (uint64_t)v20);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v10 = (id)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_operationID(v3, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (objc_class *)objc_opt_class();
    NSStringFromClass(v14);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    v16 = *(void **)(a1 + 56);
    objc_msgSend_ckShortDescription(v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v30 = v13;
    v31 = 2114;
    v32 = v15;
    v33 = 2048;
    v34 = v16;
    v35 = 2114;
    v36 = v19;
    _os_log_debug_impl(&dword_1BE990000, v10, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %{public}@ for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);

  }
  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);
  _Block_object_dispose(v27, 8);

}

void sub_1BEA81518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA81560(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  v7 = a3;
  v8 = a4;
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = *(_QWORD *)(v9 + 40);
    v10 = (id *)(v9 + 40);
    if (!v11)
      objc_storeStrong(v10, a4);
  }

}

void sub_1BEA815D4(uint64_t a1)
{
  id WeakRetained;
  const char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  os_log_t *v7;
  os_log_t v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  os_log_t v18;
  const char *v19;
  uint64_t v20;
  os_log_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  objc_class *v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  int v42;
  void *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend_error(WeakRetained, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (_QWORD *)MEMORY[0x1E0C95300];
  v7 = (os_log_t *)MEMORY[0x1E0C952B0];
  if (v5)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v8 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
    {
      v11 = v8;
      objc_msgSend_error(WeakRetained, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138412290;
      v43 = v14;
      _os_log_impl(&dword_1BE990000, v11, OS_LOG_TYPE_INFO, "Error fetching records: %@", (uint8_t *)&v42, 0xCu);

    }
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      objc_msgSend_error(WeakRetained, v9, v10);
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

    }
  }
  if (*v6 != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v18 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
  {
    v26 = v18;
    objc_msgSend_operationID(WeakRetained, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v31 = (objc_class *)objc_opt_class();
    NSStringFromClass(v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = *(void **)(a1 + 32);
    objc_msgSend_ckShortDescription(v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 138544386;
    v43 = v29;
    v44 = 2112;
    v45 = v30;
    v46 = 2114;
    v47 = v32;
    v48 = 2048;
    v49 = v33;
    v50 = 2114;
    v51 = v36;
    _os_log_debug_impl(&dword_1BE990000, v26, OS_LOG_TYPE_DEBUG, "Fetch records operation %{public}@ completed with error: %@ for <%{public}@: %p; %{public}@>",
      (uint8_t *)&v42,
      0x34u);

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
    && CKIsPCSError()
    && objc_msgSend__currentUserIsOONForShareMetadata_(*(void **)(a1 + 32), v19, *(_QWORD *)(a1 + 40)))
  {
    if (*v6 != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
    {
      v37 = v21;
      objc_msgSend_operationID(WeakRetained, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v42 = 138543618;
      v43 = v40;
      v44 = 2112;
      v45 = v41;
      _os_log_debug_impl(&dword_1BE990000, v37, OS_LOG_TYPE_DEBUG, "Suppressing error for OON user fetch with operationID %{public}@. Error was: %@", (uint8_t *)&v42, 0x16u);

    }
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v23 = *(void **)(v22 + 40);
    *(_QWORD *)(v22 + 40) = 0;

  }
  v24 = *(_QWORD *)(a1 + 48);
  if (v24)
    (*(void (**)(uint64_t, _QWORD))(v24 + 16))(v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v19, v20);
  v25 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v25);

}

uint64_t sub_1BEA82A8C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA837E8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

  }
}

void sub_1BEA83858(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA83B30(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  id v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_setRetryPCSFailures_(v3, v4, 0);
  objc_msgSend_setCanSetPreviousProtectionEtag_(v3, v5, 1);
  objc_msgSend_setTrustProtectionData_(v3, v6, 1);
  v7 = (void *)objc_opt_new();
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v8 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BEA83D0C;
  v20[3] = &unk_1E7831DE8;
  objc_copyWeak(&v22, &location);
  v9 = v7;
  v21 = v9;
  objc_msgSend_setSaveCompletionBlock_(v3, v10, (uint64_t)v20);
  v16[0] = v8;
  v16[1] = 3221225472;
  v16[2] = sub_1BEA83D80;
  v16[3] = &unk_1E7831E10;
  objc_copyWeak(&v18, &location);
  objc_copyWeak(&v19, &from);
  v11 = v9;
  v17 = v11;
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v16);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v15);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v18);

  objc_destroyWeak(&v22);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA83CCC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA83D0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id *v7;
  id v8;
  id WeakRetained;
  const char *v10;
  const char *v11;
  id v12;

  v7 = (id *)(a1 + 40);
  v8 = a5;
  v12 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend__handleRecordSaved_error_(WeakRetained, v10, (uint64_t)v12, v8);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v11, (uint64_t)v12);
}

void sub_1BEA83D80(void **a1)
{
  id WeakRetained;
  id v3;
  os_log_t *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const __CFString *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  __int128 v41;
  __CFString *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  const __CFString *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (os_log_t *)MEMORY[0x1E0C952B0];
  v5 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v31 = v5;
    objc_msgSend_error(v3, v32, v33);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (v36)
      v37 = CFSTR(" Error was ");
    else
      v37 = &stru_1E7838F48;
    objc_msgSend_error(v3, v34, v35);
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = (void *)v38;
    if (v38)
      v40 = (const __CFString *)v38;
    else
      v40 = &stru_1E7838F48;
    *(_DWORD *)buf = 138543618;
    v49 = (uint64_t)v37;
    v50 = 2112;
    v51 = v40;
    _os_log_debug_impl(&dword_1BE990000, v31, OS_LOG_TYPE_DEBUG, "Done saving all records for (un)share operation.%{public}@%@", buf, 0x16u);

  }
  objc_msgSend_error(v3, v6, v7);
  v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v42)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v8, *MEMORY[0x1E0C94B20], 1000, CFSTR("Unknown error when saving record for web sharing"));
    v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  objc_msgSend_recordsToSaveByID(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v43, v47, 16);
  if (v15)
  {
    v18 = v15;
    v19 = *(_QWORD *)v44;
    *(_QWORD *)&v17 = 138412546;
    v41 = v17;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v44 != v19)
          objc_enumerationMutation(v13);
        v21 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v20);
        if ((objc_msgSend_containsObject_(a1[4], v16, v21, v41) & 1) == 0)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v22 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v41;
            v49 = v21;
            v50 = 2112;
            v51 = v42;
            _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Record %@ never received a callback when modifying records. Sending that callback now with error %@", buf, 0x16u);
          }
          objc_msgSend_error(v3, v23, v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend__handleRecordSaved_error_(WeakRetained, v26, v21, v25);

          objc_msgSend_addObject_(a1[4], v27, v21);
        }
        ++v20;
      }
      while (v18 != v20);
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v43, v47, 16);
    }
    while (v18);
  }

  objc_msgSend_stateTransitionGroup(WeakRetained, v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

void sub_1BEA84F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA84F44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD block[5];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA85018;
    block[3] = &unk_1E782E418;
    block[4] = *(_QWORD *)(a1 + 32);
    v14 = v5;
    v15 = v6;
    dispatch_async(v12, block);

  }
}

void sub_1BEA85018(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA8508C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD block[5];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA85160;
    block[3] = &unk_1E782E418;
    block[4] = *(_QWORD *)(a1 + 32);
    v14 = v5;
    v15 = v6;
    dispatch_async(v12, block);

  }
}

void sub_1BEA85160(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA851CC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(_QWORD *)(a1 + 32) + v5);

}

void sub_1BEA85388(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  id v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(id *);
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_setUseCachedEtags_(v3, v4, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v5 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BEA85500;
  v20[3] = &unk_1E7830270;
  objc_copyWeak(&v21, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v6, (uint64_t)v20);
  v13 = v5;
  v14 = 3221225472;
  v15 = sub_1BEA85594;
  v16 = &unk_1E782E530;
  objc_copyWeak(&v19, &from);
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v17 = v7;
  v18 = v8;
  objc_msgSend_setCompletionBlock_(v3, v9, (uint64_t)&v13);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11, v13, v14, v15, v16);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v12);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA854C8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA85500(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleRecordFetched_recordID_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);

  objc_msgSend_fetchedRecordIDs(WeakRetained, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v13, v14, (uint64_t)v8);

}

void sub_1BEA85594(id *a1)
{
  os_log_t *v2;
  NSObject *v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  char v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (os_log_t *)MEMORY[0x1E0C952B0];
  v3 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Done fetching all records for web sharing", buf, 2u);
  }
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(WeakRetained, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v8, *MEMORY[0x1E0C94B20], 1000, CFSTR("Couldn't fetch record for web share/unshare."));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v9 = a1[4];
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v32, v40, 16);
  if (v11)
  {
    v15 = v11;
    v16 = *(_QWORD *)v33;
    *(_QWORD *)&v14 = 138412546;
    v31 = v14;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v33 != v16)
          objc_enumerationMutation(v9);
        v18 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v17);
        objc_msgSend_fetchedRecordIDs(a1[5], v12, v13, v31, (_QWORD)v32);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend_containsObject_(v19, v20, v18);

        if ((v21 & 1) == 0)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v22 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v31;
            v37 = v18;
            v38 = 2112;
            v39 = v7;
            _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Record %@ was never fetched from the server. Returning error %@", buf, 0x16u);
          }
          objc_msgSend__handleRecordFetched_recordID_error_(a1[5], v23, 0, v18, v7);
          objc_msgSend_fetchedRecordIDs(a1[5], v24, v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v26, v27, v18);

        }
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v32, v40, 16);
    }
    while (v15);
  }

  objc_msgSend_stateTransitionGroup(a1[5], v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

uint64_t sub_1BEA85D5C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1BEA86320(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C88]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA86D68(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

  }
}

void sub_1BEA86DD8(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA870B0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  id v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_setRetryPCSFailures_(v3, v4, 0);
  objc_msgSend_setCanSetPreviousProtectionEtag_(v3, v5, 1);
  objc_msgSend_setTrustProtectionData_(v3, v6, 1);
  v7 = (void *)objc_opt_new();
  objc_initWeak(&location, v3);
  objc_initWeak(&from, *(id *)(a1 + 32));
  v8 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BEA8728C;
  v20[3] = &unk_1E7831DE8;
  objc_copyWeak(&v22, &from);
  v9 = v7;
  v21 = v9;
  objc_msgSend_setSaveCompletionBlock_(v3, v10, (uint64_t)v20);
  v16[0] = v8;
  v16[1] = 3221225472;
  v16[2] = sub_1BEA87300;
  v16[3] = &unk_1E7831E10;
  objc_copyWeak(&v18, &from);
  objc_copyWeak(&v19, &location);
  v11 = v9;
  v17 = v11;
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v16);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v15);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v18);

  objc_destroyWeak(&v22);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA8724C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA8728C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id *v7;
  id v8;
  id WeakRetained;
  const char *v10;
  const char *v11;
  id v12;

  v7 = (id *)(a1 + 40);
  v8 = a5;
  v12 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend__handleRecordSaved_error_(WeakRetained, v10, (uint64_t)v12, v8);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v11, (uint64_t)v12);
}

void sub_1BEA87300(void **a1)
{
  id WeakRetained;
  id v3;
  os_log_t *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const __CFString *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  __int128 v41;
  __CFString *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  const __CFString *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (os_log_t *)MEMORY[0x1E0C952B0];
  v5 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v31 = v5;
    objc_msgSend_error(v3, v32, v33);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (v36)
      v37 = CFSTR(" Error was ");
    else
      v37 = &stru_1E7838F48;
    objc_msgSend_error(v3, v34, v35);
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = (void *)v38;
    if (v38)
      v40 = (const __CFString *)v38;
    else
      v40 = &stru_1E7838F48;
    *(_DWORD *)buf = 138543618;
    v49 = (uint64_t)v37;
    v50 = 2112;
    v51 = v40;
    _os_log_debug_impl(&dword_1BE990000, v31, OS_LOG_TYPE_DEBUG, "Done saving all records for record access operation.%{public}@%@", buf, 0x16u);

  }
  objc_msgSend_error(v3, v6, v7);
  v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v42)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v8, *MEMORY[0x1E0C94B20], 1000, CFSTR("Unknown error when saving record for record access"));
    v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  objc_msgSend_recordsToSaveByID(WeakRetained, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v43, v47, 16);
  if (v15)
  {
    v18 = v15;
    v19 = *(_QWORD *)v44;
    *(_QWORD *)&v17 = 138412546;
    v41 = v17;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v44 != v19)
          objc_enumerationMutation(v13);
        v21 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v20);
        if ((objc_msgSend_containsObject_(a1[4], v16, v21, v41) & 1) == 0)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v22 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v41;
            v49 = v21;
            v50 = 2112;
            v51 = v42;
            _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Record %@ never received a callback when modifying records. Sending that callback now with error %@", buf, 0x16u);
          }
          objc_msgSend_error(v3, v23, v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend__handleRecordSaved_error_(WeakRetained, v26, v21, v25);

          objc_msgSend_addObject_(a1[4], v27, v21);
        }
        ++v20;
      }
      while (v18 != v20);
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v43, v47, 16);
    }
    while (v18);
  }

  objc_msgSend_stateTransitionGroup(WeakRetained, v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

void sub_1BEA88644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BEA88660(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD block[5];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA88734;
    block[3] = &unk_1E782E418;
    block[4] = *(_QWORD *)(a1 + 32);
    v14 = v5;
    v15 = v6;
    dispatch_async(v12, block);

  }
}

void sub_1BEA88734(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA887A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD block[5];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA8887C;
    block[3] = &unk_1E782E418;
    block[4] = *(_QWORD *)(a1 + 32);
    v14 = v5;
    v15 = v6;
    dispatch_async(v12, block);

  }
}

void sub_1BEA8887C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA888E8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(_QWORD *)(a1 + 32) + v5);

}

void sub_1BEA88AA4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  id v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(id *);
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id from;
  id location;

  v3 = a2;
  objc_msgSend_setForcePCSDecrypt_(v3, v4, 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v5 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BEA88C1C;
  v20[3] = &unk_1E7830270;
  objc_copyWeak(&v21, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v6, (uint64_t)v20);
  v13 = v5;
  v14 = 3221225472;
  v15 = sub_1BEA88CB0;
  v16 = &unk_1E782E530;
  objc_copyWeak(&v19, &from);
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v17 = v7;
  v18 = v8;
  objc_msgSend_setCompletionBlock_(v3, v9, (uint64_t)&v13);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11, v13, v14, v15, v16);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v12);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA88BE4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1BEA88C1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleRecordFetched_recordID_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);

  objc_msgSend_fetchedRecordIDs(WeakRetained, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v13, v14, (uint64_t)v8);

}

void sub_1BEA88CB0(id *a1)
{
  os_log_t *v2;
  NSObject *v3;
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  char v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (os_log_t *)MEMORY[0x1E0C952B0];
  v3 = *MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BE990000, v3, OS_LOG_TYPE_DEBUG, "Done fetching all records for web access", buf, 2u);
  }
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend_error(WeakRetained, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v8, *MEMORY[0x1E0C94B20], 1000, CFSTR("Couldn't fetch record for web access grant/revoke."));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v9 = a1[4];
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v32, v40, 16);
  if (v11)
  {
    v15 = v11;
    v16 = *(_QWORD *)v33;
    *(_QWORD *)&v14 = 138412546;
    v31 = v14;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v33 != v16)
          objc_enumerationMutation(v9);
        v18 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v17);
        objc_msgSend_fetchedRecordIDs(a1[5], v12, v13, v31, (_QWORD)v32);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend_containsObject_(v19, v20, v18);

        if ((v21 & 1) == 0)
        {
          if (*MEMORY[0x1E0C95300] != -1)
            dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
          v22 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v31;
            v37 = v18;
            v38 = 2112;
            v39 = v7;
            _os_log_debug_impl(&dword_1BE990000, v22, OS_LOG_TYPE_DEBUG, "Record %@ was never fetched from the server. Returning error %@", buf, 0x16u);
          }
          objc_msgSend__handleRecordFetched_recordID_error_(a1[5], v23, 0, v18, v7);
          objc_msgSend_fetchedRecordIDs(a1[5], v24, v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v26, v27, v18);

        }
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v32, v40, 16);
    }
    while (v15);
  }

  objc_msgSend_stateTransitionGroup(a1[5], v28, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v30);

}

uint64_t sub_1BEA893D0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setZoneIDs_, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1BEA89788(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v24;

      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_43;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_45:
          v32 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_39;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_41:
          v32 = 8;
        }
        *(_QWORD *)(a1 + v32) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA89ED8()
{
  void *v0;

  v0 = (void *)qword_1ED7008C8;
  qword_1ED7008C8 = (uint64_t)&unk_1E78AF708;

}

BOOL sub_1BEA8A040(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  CKDPZone *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 3)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !sub_1BEAB1B80((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(CKDPZone **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEA8A6AC(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  id v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL sub_1BEA8AB98(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  CKDPConfigurationFieldValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(CKDPConfigurationFieldValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(CKDPConfigurationFieldValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (sub_1BEBC98F8((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA8B348(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id location;

  v3 = a2;
  objc_msgSend_setOnlyFetchPCSInfo_(v3, v4, 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BEA8B428;
  v8[3] = &unk_1E7831E80;
  objc_copyWeak(&v9, &location);
  objc_msgSend_setRecordZoneFetchedProgressBlock_(v3, v5, (uint64_t)v8);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v3, v6, v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);

}

void sub_1BEA8B408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA8B428(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a4;
  v8 = a3;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend_performCallbacksForItemWithID_withItem_error_(WeakRetained, v10, (uint64_t)v8, v9, v7);

}

void sub_1BEA8B7B4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA8B9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;
  id *v23;
  uint64_t v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v24 - 88));
  _Unwind_Resume(a1);
}

void sub_1BEA8BA28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  id v14;

  v14 = a2;
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_error(WeakRetained, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
    objc_msgSend__handleDiscoveredIdentity_lookupInfo_responseCode_(WeakRetained, v13, (uint64_t)v7, v14, v8);

}

void sub_1BEA8BAB8(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_error(WeakRetained, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    v8 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_error(v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v11);

  }
}

uint64_t sub_1BEA8BBD4(uint64_t a1, const char *a2)
{
  return objc_msgSend_finishWithError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

uint64_t sub_1BEA8BDE4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v7;

  if (a2)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (uint64_t)a2;
    return objc_msgSend_finishWithError_(v4, a2, v5);
  }
  v7 = objc_msgSend_count(*(void **)(a1 + 40), 0, a3);
  v4 = *(void **)(a1 + 32);
  if (!v7)
  {
    v5 = 0;
    return objc_msgSend_finishWithError_(v4, a2, v5);
  }
  return objc_msgSend__discoverIdentitiesBatched_(v4, a2, *(_QWORD *)(a1 + 40));
}

void sub_1BEA8C210(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  void *v34;
  const char *v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_emailAddresses(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKMap_(v6, v7, (uint64_t)&unk_1E7831F10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_phoneNumbers(v3, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKMap_(v11, v12, (uint64_t)&unk_1E7831F30);
  v13 = objc_claimAutoreleasedReturnValue();

  v36 = (void *)v13;
  objc_msgSend_arrayByAddingObjectsFromArray_(v8, v14, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v37, v41, 16);
  if (v17)
  {
    v19 = v17;
    v20 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v38 != v20)
          objc_enumerationMutation(v15);
        v22 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend_addObject_(*(void **)(a1 + 32), v18, v22);
        objc_msgSend_contactIdentifiersByLookupInfo(*(void **)(a1 + 40), v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v25, v26, v22);
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v27)
        {
          v27 = (void *)objc_opt_new();
          objc_msgSend_contactIdentifiersByLookupInfo(*(void **)(a1 + 40), v30, v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v32, v33, (uint64_t)v27, v22);

        }
        objc_msgSend_identifier(v3, v28, v29);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v27, v35, (uint64_t)v34);

      }
      v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v37, v41, 16);
    }
    while (v19);
  }

}

id sub_1BEA8C404(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;

  v2 = (objc_class *)MEMORY[0x1E0C95218];
  v3 = a2;
  v4 = [v2 alloc];
  objc_msgSend_value(v3, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend_initWithEmailAddress_(v4, v8, (uint64_t)v7);
  objc_msgSend_setShouldReportMissingIdentity_(v9, v10, 0);
  return v9;
}

id sub_1BEA8C478(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  const char *v9;
  void *v10;
  const char *v11;

  objc_msgSend_value(a2, (const char *)a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringValue(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BEC0FF08(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_alloc(MEMORY[0x1E0C95218]);
  v10 = (void *)objc_msgSend_initWithPhoneNumber_(v8, v9, (uint64_t)v7);
  objc_msgSend_setShouldReportMissingIdentity_(v10, v11, 0);

  return v10;
}

void sub_1BEA8C844(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, 0, *(_QWORD *)(a1 + 40));

  }
}

void sub_1BEA8CFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA8CFD4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id WeakRetained;
  NSObject *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v7)
      objc_msgSend_setError_(WeakRetained, v3, (uint64_t)v7);
    objc_msgSend_stateTransitionGroup(WeakRetained, v3, v4);
    v6 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v6);

  }
}

void sub_1BEA8D0E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BEA8D100(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v15 = WeakRetained;
    objc_msgSend_pendingDeltaUploads(WeakRetained, v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllObjects(v4, v5, v6);

    objc_msgSend_pendingReplacementRequests(v15, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllObjects(v9, v10, v11);

    objc_msgSend_stateTransitionGroup(v15, v12, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v14);

    WeakRetained = v15;
  }

}

void sub_1BEA8D9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id location,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a65;
  id *v65;
  id *v66;
  id *v67;
  id *v68;

  objc_destroyWeak(v68);
  objc_destroyWeak(v67);
  objc_destroyWeak(&location);
  objc_destroyWeak(v66);
  objc_destroyWeak(v65);
  objc_destroyWeak(&a65);
  _Unwind_Resume(a1);
}

void sub_1BEA8DA14(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_handleDeltaUploaded_result_(WeakRetained, v7, (uint64_t)v6, v5);

}

void sub_1BEA8DA78(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_handleReplaceDeltasRequest_result_(WeakRetained, v7, (uint64_t)v6, v5);

}

void sub_1BEA8DADC(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  objc_class *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v4 = (void *)*MEMORY[0x1E0C952C0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_INFO))
  {
    v7 = v4;
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckShortDescription(WeakRetained, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v19 = v9;
    v20 = 2048;
    v21 = WeakRetained;
    v22 = 2114;
    v23 = v12;
    v24 = 2112;
    v25 = v3;
    _os_log_impl(&dword_1BE990000, v7, OS_LOG_TYPE_INFO, "Delta upload request completed for operation <%{public}@: %p; %{public}@> request: %@",
      buf,
      0x2Au);

  }
  if (WeakRetained)
  {
    objc_msgSend_callbackQueue(WeakRetained, v5, v6);
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BEA8DCAC;
    block[3] = &unk_1E782F678;
    v15 = v3;
    v16 = WeakRetained;
    v17 = a1[4];
    dispatch_async(v13, block);

  }
}

uint64_t sub_1BEA8DCAC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;

  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    return objc_msgSend__uploadAndReplaceDeltas_(*(void **)(a1 + 40), v5, *(_QWORD *)(a1 + 48));
  objc_msgSend_error(*(void **)(a1 + 32), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setError_(*(void **)(a1 + 40), v8, (uint64_t)v7);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1BEA8E39C()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  __CFString *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  id v17;

  v0 = (void *)MEMORY[0x1E0CB34D0];
  v1 = objc_opt_class();
  objc_msgSend_bundleForClass_(v0, v2, v1);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_infoDictionary(v17, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("CFBundleVersion"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend_length(v7, v8, v9))
  {

    v7 = CFSTR("1.0");
  }
  v11 = (void *)_CFCopyServerVersionDictionary();
  if (!v11)
    v11 = (void *)_CFCopySystemVersionDictionary();
  objc_msgSend_objectForKeyedSubscript_(v11, v10, *MEMORY[0x1E0C9AB90]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc(MEMORY[0x1E0CB3940]);
  v15 = objc_msgSend_initWithFormat_(v13, v14, (uint64_t)CFSTR("CloudKit/%@ (%@)"), v7, v12);
  v16 = (void *)qword_1ED7027B0;
  qword_1ED7027B0 = v15;

  if (v11)
    CFRelease(v11);

}

void sub_1BEA8E49C()
{
  id v0;
  const __CFString *v1;
  const char *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  __CFString *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  __CFString *v33;
  uint64_t v34;
  const char *v35;
  __CFString *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  __CFString *v43;
  const char *v44;
  __CFString *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const __CFString *v50;
  const __CFString *v51;
  const char *v52;
  uint64_t v53;
  const __CFString *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  const __CFString *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  __CFString *v65;

  v0 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  CKProductType();
  v1 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  if (!v1)
    v1 = CFSTR("UNKNOWN");
  v65 = (__CFString *)v1;
  v61 = v0;
  objc_msgSend_appendFormat_(v0, v2, (uint64_t)CFSTR("<%@>"), v1);
  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_productName(v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();

  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_productVersion(v11, v12, v13);
  v14 = (__CFString *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_sharedOptions(MEMORY[0x1E0C94C00], v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_buildVersion(v17, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();

  v64 = (void *)v8;
  if (v8)
    v22 = (const __CFString *)v8;
  else
    v22 = CFSTR("UNKNOWN");
  if (v14)
    v23 = v14;
  else
    v23 = CFSTR("UNKNOWN");
  v63 = (void *)v20;
  if (v20)
    v24 = (const __CFString *)v20;
  else
    v24 = CFSTR("UNKNOWN");
  objc_msgSend_appendFormat_(v0, v21, (uint64_t)CFSTR(" <%@;%@;%@>"), v22, v23, v24);
  v25 = (void *)MEMORY[0x1E0CB34D0];
  v26 = objc_opt_class();
  objc_msgSend_bundleForClass_(v25, v27, v26);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_infoDictionary(v62, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = *MEMORY[0x1E0C9AE78];
  objc_msgSend_objectForKeyedSubscript_(v30, v32, *MEMORY[0x1E0C9AE78]);
  v33 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v34 = *MEMORY[0x1E0C9AAF0];
  objc_msgSend_objectForKeyedSubscript_(v30, v35, *MEMORY[0x1E0C9AAF0]);
  v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v37, v38);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_infoDictionary(v60, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v41, v42, v31);
  v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v41, v44, v34);
  v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v50 = CFSTR("UNKNOWN");
  if (objc_msgSend_length(v33, v46, v47))
    v51 = v33;
  else
    v51 = CFSTR("UNKNOWN");
  if (objc_msgSend_length(v36, v48, v49))
    v54 = v36;
  else
    v54 = CFSTR("1.0");
  if (objc_msgSend_length(v43, v52, v53))
    v50 = v43;
  if (objc_msgSend_length(v45, v55, v56))
    v58 = v45;
  else
    v58 = CFSTR("1.0");
  objc_msgSend_appendFormat_(v61, v57, (uint64_t)CFSTR(" <%@/%@ (%@/%@)>"), v51, v54, v50, v58);
  v59 = (void *)qword_1ED7027C0;
  qword_1ED7027C0 = (uint64_t)v61;

}

void sub_1BEA8F8AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  const char *v8;
  const char *v9;
  id v10;

  v5 = a3;
  v6 = a2;
  v10 = (id)objc_opt_new();
  objc_msgSend_setHeaderKey_(v10, v7, (uint64_t)v6);

  objc_msgSend_setHeaderValue_(v10, v8, (uint64_t)v5);
  objc_msgSend_addContentRequestHeaders_(*(void **)(a1 + 32), v9, (uint64_t)v10);

}

void sub_1BEA91A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA91AA0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  id obj;
  uint8_t buf[4];
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a2)
  {
    v5 = (const void *)PCSFPCopyCurrentPrivateKey();
    objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pcsManager(v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v12 + 40);
    objc_msgSend_dataFromSharingIdentity_error_(v11, v13, (uint64_t)v5, &obj);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(v12 + 40), obj);

    if (v5)
      CFRelease(v5);
    if (v14 && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      objc_msgSend_CKBase64URLSafeString(v14, v15, v16);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_baseToken(WeakRetained, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend_length(v25, v26, v27))
      {

        v25 = 0;
      }
      objc_msgSend_fullTokenFromBaseToken_privateToken_(MEMORY[0x1E0C95048], v28, (uint64_t)v25, v22);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_shortSharingTokenFromFullToken_(WeakRetained, v30, (uint64_t)v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setShortToken_(WeakRetained, v32, (uint64_t)v31);
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v33 = (void *)*MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v39 = v33;
        objc_msgSend_shortToken(WeakRetained, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v45 = v42;
        _os_log_debug_impl(&dword_1BE990000, v39, OS_LOG_TYPE_DEBUG, "OON short token reconstructed: %{public}@", buf, 0xCu);

      }
      objc_msgSend_stateTransitionGroup(WeakRetained, v34, v35);
      v36 = objc_claimAutoreleasedReturnValue();
      dispatch_group_leave(v36);

    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v17 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        v37 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v45 = v37;
        _os_log_error_impl(&dword_1BE990000, v17, OS_LOG_TYPE_ERROR, "OON share reconstruct: pcs to data conversion failed: %@", buf, 0xCu);
      }
      objc_msgSend_setError_(WeakRetained, v18, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    }
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v19 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v38 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v45 = v38;
      _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "OON share reconstruct: selfAdded failed to decrypt: %@", buf, 0xCu);
    }
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v20, *MEMORY[0x1E0C94B20], 8003, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), CFSTR("encryptedKey failed to decrypt"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v21, (uint64_t)v14);
  }

}

void sub_1BEA920C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA920E8(uint64_t a1, int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  void *v25;
  const char *v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v8 = v5;
  if (a2)
  {
    if (v5)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v26, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("CKDCompleteParticipantVettingOperation.m"), 190, CFSTR("Vetting token got validated fine, but we got an error: %@"), v8);

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v9 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
    {
      v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v13 = v9;
      objc_msgSend_vettingToken(v12, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v16;
      _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Vetting token: %{public}@ validated.", buf, 0xCu);

    }
  }
  else
  {
    v17 = (void *)MEMORY[0x1E0C94FF8];
    v18 = *MEMORY[0x1E0C94B20];
    objc_msgSend_vettingToken(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6, v7);
    v19 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v19;
    if (v8)
    {
      objc_msgSend_errorWithDomain_code_error_format_(v17, v20, v18, 8011, v8, CFSTR("Vetting token %@ validation failed due to auth error"), v19);
      v22 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v22;
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(v17, v20, v18, 8002, CFSTR("Vetting token %@ invalid. Likely expired."), v19);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }

    objc_msgSend_setError_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v23, (uint64_t)v8);
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  v24 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v24);

}

void sub_1BEA92490(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  _QWORD v18[6];
  id v19;
  _QWORD v20[5];
  id v21;
  id from;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3032000000;
  v20[3] = sub_1BE9BAFC8;
  v20[4] = sub_1BE9BAD98;
  v21 = 0;
  objc_msgSend_setForceDSRefetch_(v3, v4, 1);
  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1BEA92680;
  v18[3] = &unk_1E78321C0;
  objc_copyWeak(&v19, &location);
  v18[4] = *(_QWORD *)(a1 + 32);
  v18[5] = v20;
  objc_msgSend_setShareMetadataFetchedBlock_(v3, v6, (uint64_t)v18);
  v11 = v5;
  v12 = 3221225472;
  v13 = sub_1BEA927B4;
  v14 = &unk_1E78321E8;
  objc_copyWeak(&v16, &location);
  objc_copyWeak(&v17, &from);
  v15 = v20;
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)&v11);
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v8, v9, v11, v12, v13, v14);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v10);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v19);
  _Block_object_dispose(v20, 8);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void sub_1BEA9262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;
  id *v24;
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak((id *)(v26 - 80));
  objc_destroyWeak((id *)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_1BEA92680(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[5];
  id v15;

  v6 = a3;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v10 = WeakRetained;
  if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a4);
  }
  else
  {
    objc_msgSend_setShareMetadata_(WeakRetained, v9, (uint64_t)v6);
    objc_msgSend_callbackQueue(v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1BEA9276C;
    v14[3] = &unk_1E782EE20;
    v14[4] = *(_QWORD *)(a1 + 32);
    v15 = v6;
    dispatch_async(v13, v14);

  }
}

void sub_1BEA9276C(uint64_t a1, const char *a2, uint64_t a3)
{
  void (**v4)(_QWORD, _QWORD);
  id v5;

  objc_msgSend_verifyProgressShareMetadataFetchedBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    v4[2](v4, *(_QWORD *)(a1 + 40));
    v4 = (void (**)(_QWORD, _QWORD))v5;
  }

}

void sub_1BEA927B4(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  NSObject *v20;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_error(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v11 = *(_QWORD *)(v8 + 40);
  v9 = (id *)(v8 + 40);
  v10 = v11;
  if (v11 || (objc_storeStrong(v9, v5), (v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)) != 0))
  {
    v12 = (void *)MEMORY[0x1E0C94FF8];
    v13 = *MEMORY[0x1E0C94B20];
    objc_msgSend_shortToken(WeakRetained, v6, v7);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_error_format_(v12, v15, v13, 8012, v10, CFSTR("Couldn't force fetch share metadata for share: %@"), v14);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v5);
  }
  objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  v20 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v20);

}

void sub_1BEA92F54(uint64_t a1, char a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  const char *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  int v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v8 = v5;
  if ((a2 & 1) == 0)
  {
    if (!v5)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v38, v39, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKDCompleteParticipantVettingOperation.m"), 300, CFSTR("OON key-swap validation failed, but without error"));

    }
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v23 = (void *)*MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v27 = *(void **)(a1 + 40);
      v28 = v23;
      objc_msgSend_participantID(v27, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_share(*(void **)(a1 + 48), v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = 138412802;
      v41 = v31;
      v42 = 2112;
      v43 = v37;
      v44 = 2112;
      v45 = v8;
      _os_log_error_impl(&dword_1BE990000, v28, OS_LOG_TYPE_ERROR, "Failed to create protection info in OON key-swap for participantID: %@, recordID: %@, error: %@", (uint8_t *)&v40, 0x20u);

    }
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E0C94FF8], v24, *MEMORY[0x1E0C94B20], 8009, v8, CFSTR("Dryrun OON keyswap failed"));
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(*(void **)(a1 + 32), v25, (uint64_t)v13);
    goto LABEL_13;
  }
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v9 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_INFO))
  {
    v12 = *(void **)(a1 + 40);
    v13 = v9;
    objc_msgSend_participantID(v12, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_share(*(void **)(a1 + 48), v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordID(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = 138412546;
    v41 = v16;
    v42 = 2112;
    v43 = v22;
    _os_log_impl(&dword_1BE990000, v13, OS_LOG_TYPE_INFO, "Created protection info in OON key-swap for participantID: %@, recordID: %@", (uint8_t *)&v40, 0x16u);

LABEL_13:
  }
  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  v26 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v26);

}

void sub_1BEA93E28()
{
  void *v0;

  v0 = (void *)qword_1ED7008D8;
  qword_1ED7008D8 = (uint64_t)&unk_1E78AF730;

}

BOOL sub_1BEA93FC0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CKDPUserInformationRequestAccess *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v20 = *(CKDPUserInformationRequestAccess **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(CKDPUserInformationRequestAccess);
    objc_storeStrong((id *)(a1 + 24), v20);
    if (!PBReaderPlaceMark() || !CKDPUserInformationRequestAccessReadFrom((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1BEA94F9C()
{
  void *v0;

  v0 = (void *)qword_1ED7008E8;
  qword_1ED7008E8 = (uint64_t)&unk_1E78AF758;

}

BOOL sub_1BEA9520C(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadata *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 5;
        goto LABEL_24;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 2;
        goto LABEL_24;
      case 3u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 4;
LABEL_24:
        v19 = (CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadata *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_34;
      case 4u:
        v19 = objc_alloc_init(CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadata);
        objc_storeStrong(a1 + 3, v19);
        if (!PBReaderPlaceMark() || (sub_1BEB037B8(v19, a2) & 1) == 0)
          goto LABEL_38;
        goto LABEL_33;
      case 5u:
        v19 = objc_alloc_init(CKDPCodeFunctionInvokeRequestAttestationRequest);
        objc_storeStrong(a1 + 1, v19);
        if (!PBReaderPlaceMark() || (sub_1BEA43308((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_38;
        goto LABEL_33;
      case 6u:
        v19 = objc_alloc_init(CKCDPTrustedTargetCryptoMetadata);
        objc_storeStrong(a1 + 6, v19);
        if (PBReaderPlaceMark() && (sub_1BEC444E8((uint64_t)v19, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark();
LABEL_34:

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_35;
    }
  }
}

void sub_1BEA95C10()
{
  void *v0;

  v0 = (void *)qword_1ED7008F8;
  qword_1ED7008F8 = (uint64_t)&unk_1E78AF780;

}

uint64_t sub_1BEA95E28(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  id v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MEMORY[0x1E0C94C60]);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_37;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v21 = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_39:
          *(_BYTE *)(a1 + 24) = v21 != 0;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v18 = objc_alloc_init(MEMORY[0x1E0C94C98]);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordFieldIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEA96EB8(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_1BEA971B8(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend__prepareAssetForDownload_(a3, a2, a1);
}

uint64_t sub_1BEA971C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a3, sel__preparePackageForDownload_, a1);
}

id sub_1BEA9782C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v6 = objc_msgSend_itemID(v3, v4, v5);
  objc_msgSend_progress(v3, v7, v8);
  v10 = v9;
  objc_msgSend_signature(v3, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_finished(v3, v14, v15))
    objc_msgSend_stringWithFormat_(v2, v16, (uint64_t)CFSTR("<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>"), v3, v6, v10, v13, CFSTR("finished"));
  else
    objc_msgSend_stringWithFormat_(v2, v16, (uint64_t)CFSTR("<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>"), v3, v6, v10, v13, &stru_1E7838F48);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id sub_1BEA978E0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v6 = objc_msgSend_itemID(v3, v4, v5);
  objc_msgSend_progress(v3, v7, v8);
  v10 = v9;
  objc_msgSend_signature(v3, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_finished(v3, v14, v15))
    objc_msgSend_stringWithFormat_(v2, v16, (uint64_t)CFSTR("<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>"), v3, v6, v10, v13, CFSTR("finished"));
  else
    objc_msgSend_stringWithFormat_(v2, v16, (uint64_t)CFSTR("<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>"), v3, v6, v10, v13, &stru_1E7838F48);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_1BEA97DA4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(id, _QWORD);

  objc_msgSend_downloadPreparationBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_downloadPreparationBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(_QWORD *)(a1 + 40));

  }
}

void sub_1BEA97F00(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void (**v7)(id, _QWORD, double);

  objc_msgSend_downloadProgressBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_downloadProgressBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (void (**)(id, _QWORD, double))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));

  }
}

void sub_1BEA98104(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_downloadCommandBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_downloadCommandBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA9827C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  objc_msgSend_downloadCompletionBlock(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend_downloadCompletionBlock(*(void **)(a1 + 32), v5, v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void *sub_1BEA99524(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    objc_msgSend_operationInfo(result, a2, a3);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend_fetchingAssetsForRereference(v3, v4, v5);

    return (void *)v6;
  }
  return result;
}

void sub_1BEA99FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_1BEA9A5D8(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  id v11;

  v2 = a2;
  MMCSOperationMetricCombineMetrics();
  objc_msgSend_date(MEMORY[0x1E0C99D68], v3, v4);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startDate(v2, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v11, v8, (uint64_t)v7);
  objc_msgSend_setDuration_(v2, v9, v10);

}

uint64_t sub_1BEA9A74C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_metrics(a2, (const char *)a2, a3);
}

void sub_1BEA9BE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1BEA9BEA0(uint64_t a1, const char *a2)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  CKDMMCSItem *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  int isEqualToData;
  const char *v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  int v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  objc_msgSend_itemAtIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_sectionIndex(v4, v5, v6);
  if (objc_msgSend_index(*(void **)(a1 + 40), v8, v9) == v7)
  {
    v10 = [CKDMMCSItem alloc];
    v12 = (void *)objc_msgSend_initWithPackage_(v10, v11, *(_QWORD *)(a1 + 32));
    objc_msgSend_signature(v4, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSignature_(v12, v16, (uint64_t)v15);

    v19 = objc_msgSend_size(v4, v17, v18);
    objc_msgSend_setFileSize_(v12, v20, v19);
    v23 = objc_msgSend_paddedSize(v4, v21, v22);
    objc_msgSend_setPaddedFileSize_(v12, v24, v23);
    objc_msgSend_zeroSizeFileSignature(CKDMMCS, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_signature(v12, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToData = objc_msgSend_isEqualToData_(v27, v31, (uint64_t)v30);

    if (isEqualToData)
    {
      if (objc_msgSend_fileSize(v12, v33, v34))
      {
        if (*MEMORY[0x1E0C95300] != -1)
          dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
        v36 = (void *)*MEMORY[0x1E0C952B0];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_FAULT))
        {
          v44 = v36;
          v47 = 138412546;
          v48 = v4;
          v49 = 2048;
          v50 = objc_msgSend_fileSize(v12, v45, v46);
          _os_log_fault_impl(&dword_1BE990000, v44, OS_LOG_TYPE_FAULT, "Package section item %@ has zero file signature and non-zero size %llu", (uint8_t *)&v47, 0x16u);

        }
      }
      objc_msgSend_setFileSize_(v12, v35, 0);
    }
    v37 = objc_msgSend_offset(v4, v33, v34);
    objc_msgSend_setOffset_(v12, v38, v37);
    objc_msgSend_setPackageIndex_(v12, v39, (uint64_t)a2);
    if (objc_msgSend_fileSize(v12, v40, v41))
      v43 = *(_QWORD *)(a1 + 48);
    else
      v43 = *(_QWORD *)(a1 + 56);
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(v43 + 8) + 40), v42, (uint64_t)v12);

  }
}

void sub_1BEA9C0E4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  id WeakRetained;
  const char *v18;
  id v19;

  v19 = a2;
  objc_msgSend_error(v19, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v8 = *(void **)(a1 + 32);
    objc_msgSend_progress(v19, v6, v7);
    objc_msgSend_updateProgressWithItem_progress_(v8, v9, (uint64_t)v19);
    v11 = v10;
    objc_msgSend_progress(*(void **)(a1 + 40), v12, v13);
    if (v16 < v11)
      v16 = v11;
    objc_msgSend_setProgress_(*(void **)(a1 + 40), v14, v15, v16);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend__didMakeProgressForMMCSSectionItem_task_(WeakRetained, v18, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1BEA9C17C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;

  v3 = a2;
  objc_msgSend_error(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_queue(*(void **)(a1 + 32), v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BEA9C290;
  v14[3] = &unk_1E78323A8;
  v22 = *(_QWORD *)(a1 + 72);
  v15 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v16 = v10;
  v17 = v11;
  v18 = v3;
  v19 = *(id *)(a1 + 56);
  v20 = v6;
  v21 = *(id *)(a1 + 64);
  v12 = v6;
  v13 = v3;
  dispatch_async(v9, v14);

}

void sub_1BEA9C290(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  void *v9;
  const char *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), a2, a3))
  {
    objc_msgSend_assetCache(*(void **)(a1 + 32), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend_trackCachedButNotRegisteredMMCSItems_error_(v6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), 0);

  }
  objc_msgSend_sectionItems(*(void **)(a1 + 40), v4, v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v9, v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));

  objc_msgSend__collectMetricsFromCompletedItemGroup_(*(void **)(a1 + 48), v11, *(_QWORD *)(a1 + 56));
  v12 = *(void **)(a1 + 48);
  v16[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v13, (uint64_t)v16, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__didDownloadMMCSSectionItems_task_error_(v12, v15, (uint64_t)v14, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_1BEA9C398(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t result;

  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeCancelToken_(v4, v5, *(_QWORD *)(a1 + 40));

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1BEA9C514(uint64_t a1, const char *a2)
{
  return objc_msgSend__downloadPackageSectionsWithSectionEnumerator_task_completionBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1BEA9CCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_1BEA9CD24(uint64_t a1, const char *a2, _BYTE *a3)
{
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  objc_msgSend_itemAtIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_sectionIndex(v12, v5, v6);
  if ((v7 & 0x80000000) != 0)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E0C94FF8], v8, *MEMORY[0x1E0C94B20], 1000, CFSTR("Invalid section index %ld for package %@"), (int)v7, *(_QWORD *)(a1 + 32));
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    *a3 = 1;
  }
  else
  {
    objc_msgSend_addIndex_(*(void **)(a1 + 40), v8, v7);
  }

}

uint64_t sub_1BEA9CDD4(uint64_t a1, const char *a2)
{
  return objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2);
}

uint64_t sub_1BEA9CDE4(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  double v27;
  double v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t result;

  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    objc_msgSend_manifestAsset(*(void **)(a1 + 32), v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend_downloaded(v7, v8, v9);

    if (*(_QWORD *)(a1 + 72))
    {
      v13 = 0;
      do
      {
        objc_msgSend_assets(*(void **)(a1 + 40), v11, v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend_count(v14, v15, v16);
        v18 = v13 + 1;

        if (v17 > v13 + 1)
        {
          objc_msgSend_assets(*(void **)(a1 + 40), v11, v12);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndex_(v19, v20, v13 + 1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend_containsIndex_(*(void **)(a1 + 48), v22, v13))
          {
            if ((v10 & 1) != 0)
              LOBYTE(v10) = objc_msgSend_downloaded(v21, v23, v24);
            else
              LOBYTE(v10) = 0;
          }
          else
          {
            objc_msgSend_progressTracker(*(void **)(a1 + 32), v23, v24);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_updateProgressWithItem_progress_(v25, v26, (uint64_t)v21, 1.0);
            v28 = v27;

            objc_msgSend__didMakeProgressForAsset_progress_(*(void **)(a1 + 56), v29, *(_QWORD *)(a1 + 40), v28);
          }

        }
        v13 = v18;
      }
      while (v18 < *(_QWORD *)(a1 + 72));
    }
    objc_msgSend_setDownloaded_(*(void **)(a1 + 40), v11, v10 & 1);
  }
  v30 = *(void **)(a1 + 56);
  v31 = *(_QWORD *)(a1 + 40);
  objc_msgSend_error(*(void **)(a1 + 32), v5, v6);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__didDownloadAsset_error_(v30, v33, v31, v32);

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1BEA9D150(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  _QWORD block[6];
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
  v5 = objc_msgSend_maxPackageDownloadsPerBatch(*(void **)(a1 + 48), v3, v4);
  v6 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v9 = objc_msgSend_count(*(void **)(a1 + 32), v7, v8);
  if (v5 >= v5 - v9)
    v11 = objc_msgSend_initWithCapacity_(v6, v10, v5 - v9);
  else
    v11 = objc_msgSend_initWithCapacity_(v6, v10, v5);
  v14 = (void *)v11;
  objc_msgSend_objectEnumerator(*(void **)(a1 + 56), v12, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_count(*(void **)(a1 + 32), v16, v17);
  v21 = v5 - v18;
  if (v5 > v18)
  {
    do
    {
      objc_msgSend_nextObject(v15, v19, v20);
      v22 = objc_claimAutoreleasedReturnValue();
      if (!v22)
        break;
      v23 = (void *)v22;
      objc_msgSend_addObject_(v14, v19, v22);

      --v21;
    }
    while (v21);
  }
  v37 = v15;
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 56), v19, (uint64_t)v14);
  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v24, (uint64_t)v14);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v25 = v14;
  v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v41, v45, 16);
  if (v27)
  {
    v30 = v27;
    v31 = *(_QWORD *)v42;
    v32 = MEMORY[0x1E0C809B0];
    do
    {
      v33 = 0;
      do
      {
        if (*(_QWORD *)v42 != v31)
          objc_enumerationMutation(v25);
        v34 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * v33);
        objc_msgSend_qualityOfService(*(void **)(a1 + 48), v28, v29);
        CKGetGlobalQueue();
        v35 = objc_claimAutoreleasedReturnValue();
        block[0] = v32;
        block[1] = 3221225472;
        block[2] = sub_1BEA9D384;
        block[3] = &unk_1E782F4A8;
        v36 = *(void **)(a1 + 56);
        block[4] = *(_QWORD *)(a1 + 48);
        block[5] = v34;
        v39 = v36;
        v40 = *(id *)(a1 + 32);
        dispatch_async(v35, block);

        ++v33;
      }
      while (v30 != v33);
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v41, v45, 16);
    }
    while (v30);
  }

}

void sub_1BEA9D384(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  _QWORD v9[6];
  id v10;
  id v11;

  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addCancelToken_withOperation_(v4, v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BEA9D438;
  v9[3] = &unk_1E782F4A8;
  v9[4] = v6;
  v9[5] = v7;
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  objc_msgSend__downloadPackageSectionsWithTask_completionBlock_(v6, v8, v7, v9);

}

void sub_1BEA9D438(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeCancelToken_(v4, v5, *(_QWORD *)(a1 + 40));

  objc_msgSend_cancelTokens(*(void **)(a1 + 40), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllCancelTokens(v8, v9, v10);

  objc_msgSend_group(*(void **)(a1 + 40), v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v13);

  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(void **)(a1 + 32);
  v20[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v17, (uint64_t)v20, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__downloadPackageSectionsWithPendingTasks_downloadingTasks_completedTasks_(v16, v19, v14, v15, v18);

}

void sub_1BEA9E0B0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1BEA9E0E0(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v14 = *(void **)(a1 + 32);
    v15 = v2;
    objc_msgSend_package(v14, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v26 = v18;
    _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "Finished downloading package manifest for package %@", buf, 0xCu);

  }
  objc_msgSend_group(*(void **)(a1 + 32), v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v5);

  objc_msgSend_group(*(void **)(a1 + 32), v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_queue(*(void **)(a1 + 40), v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = MEMORY[0x1E0C809B0];
  v20 = 3221225472;
  v21 = sub_1BEA9E2A0;
  v22 = &unk_1E782EE20;
  v23 = *(id *)(a1 + 32);
  v24 = *(id *)(a1 + 48);
  dispatch_group_notify(v8, v11, &v19);

  objc_msgSend_addObject_(*(void **)(a1 + 56), v12, *(_QWORD *)(a1 + 32), v19, v20, v21, v22);
  objc_msgSend__downloadPackageSectionsWithPendingTasks_downloadingTasks_completedTasks_(*(void **)(a1 + 40), v13, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0);

}

void sub_1BEA9E2A0(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v2 = (void *)*MEMORY[0x1E0C952B0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    objc_msgSend_package(v3, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138412290;
    v9 = v7;
    _os_log_debug_impl(&dword_1BE990000, v4, OS_LOG_TYPE_DEBUG, "Finished downloading package sections for package %@", (uint8_t *)&v8, 0xCu);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1BEA9E3A8(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  const char *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 32);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend__didMakeProgressForMMCSItem_inMemory_(WeakRetained, v5, (uint64_t)v4, *(unsigned __int8 *)(a1 + 40));

}

void sub_1BEA9E400(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_asset(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend__didCommandForAsset_command_(WeakRetained, v10, (uint64_t)v9, v5);
}

void sub_1BEA9E47C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  void *v39;
  uint64_t v40;
  id v41;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend__collectMetricsFromCompletedItemGroupSet_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 56);
  objc_msgSend_error(v3, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__didDownloadMMCSItems_inMemory_error_(v5, v11, v6, v7, v10);

  objc_msgSend_operationInfo(*(void **)(a1 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cloneContextReturnBlock(v14, v15, v16);
  v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    v40 = a1;
    v41 = v3;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    objc_msgSend_allItemGroups(v3, v18, v19);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v47, v52, 16);
    if (v21)
    {
      v24 = v21;
      v25 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v48 != v25)
            objc_enumerationMutation(obj);
          v27 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
          objc_msgSend_cloneContext(v27, v22, v23);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = 0u;
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          objc_msgSend_items(v27, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v43, v51, 16);
          if (v33)
          {
            v36 = v33;
            v37 = *(_QWORD *)v44;
            do
            {
              for (j = 0; j != v36; ++j)
              {
                if (*(_QWORD *)v44 != v37)
                  objc_enumerationMutation(v31);
                objc_msgSend_signature(*(void **)(*((_QWORD *)&v43 + 1) + 8 * j), v34, v35);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                ((void (**)(_QWORD, void *, void *))v17)[2](v17, v39, v28);

              }
              v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v43, v51, 16);
            }
            while (v36);
          }

        }
        v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v47, v52, 16);
      }
      while (v24);
    }

    a1 = v40;
    v3 = v41;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1BEA9E6C0(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;

  objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeCancelToken_(v4, v5, *(_QWORD *)(a1 + 40));

  objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

}

void sub_1BEA9F160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BEA9F18C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4[0] = xmmword_1BECBB5E2;
  v4[1] = unk_1BECBB5F2;
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], a2, (uint64_t)v4, 32);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED700908;
  qword_1ED700908 = v2;

}

void sub_1BEA9F208(id *a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  id WeakRetained;
  id v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a2;
  v5 = v3;
  if (*MEMORY[0x1E0C95280])
    objc_msgSend_checkAndClearUnitTestOverrides_(v3, v4, (uint64_t)CFSTR("DownloadAssetsFromTranscodingService"));
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v7 = v5;
    objc_initWeak(location, v7);
    v8 = MEMORY[0x1E0C809B0];
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_1BEA9F534;
    v26[3] = &unk_1E7832520;
    v27 = a1[5];
    objc_msgSend_setReplaceLocalSerializationsBlobs_(v7, v9, (uint64_t)v26);
    objc_msgSend_setInitialResponseReceivedCallback_(v7, v10, (uint64_t)&unk_1E7832560);
    objc_msgSend_setReplaceWireSerializations_(v7, v11, (uint64_t)&unk_1E78325A0);
    v23[0] = v8;
    v23[1] = 3221225472;
    v23[2] = sub_1BEA9F894;
    v23[3] = &unk_1E78325C8;
    objc_copyWeak(&v25, a1 + 6);
    v24 = a1[4];
    objc_msgSend_setRecordFetchCommandBlock_(v7, v12, (uint64_t)v23);
    v21[0] = v8;
    v21[1] = 3221225472;
    v21[2] = sub_1BEA9F914;
    v21[3] = &unk_1E78325F0;
    v22 = a1[4];
    objc_msgSend_setRecordFetchCompletionBlock_(v7, v13, (uint64_t)v21);
    v17[0] = v8;
    v17[1] = 3221225472;
    v17[2] = sub_1BEA9FBEC;
    v17[3] = &unk_1E7831E10;
    objc_copyWeak(&v19, a1 + 6);
    objc_copyWeak(&v20, location);
    v18 = a1[4];
    objc_msgSend_setCompletionBlock_(v7, v14, (uint64_t)v17);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&v19);

    objc_destroyWeak(&v25);
    objc_destroyWeak(location);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v15 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
    {
      v16 = a1[4];
      LODWORD(location[0]) = 138412290;
      *(id *)((char *)location + 4) = v16;
      _os_log_debug_impl(&dword_1BE990000, v15, OS_LOG_TYPE_DEBUG, "The self is not strong with the transcoding operation for %@", (uint8_t *)location, 0xCu);
    }
  }

}

void sub_1BEA9F4E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_1BEA9F534(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  void (**v8)(id, void *, _QWORD);
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint8_t v25[16];
  uint8_t buf[16];

  v8 = a5;
  v9 = a3;
  objc_msgSend_firstObject(a2, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v9, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v16 = (void *)objc_opt_new();
    objc_msgSend_setWireSerialization_(v16, v17, (uint64_t)v12);
    if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      objc_msgSend_setEncryptedMasterKey_(v16, v18, (uint64_t)v15);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
      v19 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v25 = 0;
        _os_log_error_impl(&dword_1BE990000, v19, OS_LOG_TYPE_ERROR, "Couldn't get encrypted master key for transcoding record", v25, 2u);
      }
    }
    objc_msgSend_setRecord_(*(void **)(a1 + 32), v20, (uint64_t)v16);

  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v21 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BE990000, v21, OS_LOG_TYPE_ERROR, "No wire serialization for transcoding record", buf, 2u);
    }
  }
  objc_msgSend_data(*(void **)(a1 + 32), v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2](v8, v24, 0);

}

void sub_1BEA9F720(uint64_t a1, void *a2, void *a3)
{
  void (**v4)(id, void *, _QWORD);
  id v5;
  CKDPTranscodeResponse *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  uint8_t v18[16];
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = a2;
  v6 = [CKDPTranscodeResponse alloc];
  v8 = (void *)objc_msgSend_initWithData_(v6, v7, (uint64_t)v5);

  objc_msgSend_record(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_wireSerialization(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v19[0] = v14;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v15, (uint64_t)v19, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v17 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_error_impl(&dword_1BE990000, v17, OS_LOG_TYPE_ERROR, "No wire serialization when handling intial transcoding response", v18, 2u);
    }
    v16 = 0;
  }
  v4[2](v4, v16, 0);

}

void sub_1BEA9F894(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  id v11;

  v11 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_downloadCommandBlock(WeakRetained, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend_downloadCommandBlock(WeakRetained, v8, v9);
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v10)[2](v10, *(_QWORD *)(a1 + 32), v11);

  }
}

void sub_1BEA9F914(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  NSObject *v43;
  void *v44;
  int v45;
  void *v46;
  __int16 v47;
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v11 = a4;
  if (v11)
  {
    if (*MEMORY[0x1E0C95300] != -1)
      dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
    v12 = *MEMORY[0x1E0C952B0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
    {
      v13 = *(void **)(a1 + 32);
      v45 = 138412546;
      v46 = v13;
      v47 = 2112;
      v48 = v11;
      _os_log_error_impl(&dword_1BE990000, v12, OS_LOG_TYPE_ERROR, "Error fetching transcoded asset %@: %@", (uint8_t *)&v45, 0x16u);
    }
  }
  else
  {
    objc_msgSend_recordKey(*(void **)(a1 + 32), v9, v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v7, v15, (uint64_t)v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = (void *)*MEMORY[0x1E0C952F8];
    if (v16)
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v17);
      v18 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_DEBUG))
      {
        v44 = *(void **)(a1 + 32);
        v45 = 138412546;
        v46 = v16;
        v47 = 2112;
        v48 = v44;
        _os_log_debug_impl(&dword_1BE990000, v18, OS_LOG_TYPE_DEBUG, "Transferring data from transcoded asset %@ to the response record's asset %@", (uint8_t *)&v45, 0x16u);
      }
      objc_msgSend_fileURL(v16, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setFileURL_(*(void **)(a1 + 32), v22, (uint64_t)v21);

      v25 = objc_msgSend_size(v16, v23, v24);
      objc_msgSend_setSize_(*(void **)(a1 + 32), v26, v25);
      v29 = objc_msgSend_paddedFileSize(v16, v27, v28);
      objc_msgSend_setPaddedFileSize_(*(void **)(a1 + 32), v30, v29);
      objc_msgSend_UUID(v16, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setUUID_(*(void **)(a1 + 32), v34, (uint64_t)v33);

      v37 = objc_msgSend_downloaded(v16, v35, v36);
      objc_msgSend_setDownloaded_(*(void **)(a1 + 32), v38, v37);
      v41 = objc_msgSend_wasCached(v16, v39, v40);
      objc_msgSend_setWasCached_(*(void **)(a1 + 32), v42, v41);
    }
    else
    {
      if (*MEMORY[0x1E0C95300] != -1)
        dispatch_once(MEMORY[0x1E0C95300], v17);
      v43 = *MEMORY[0x1E0C952B0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952B0], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v45) = 0;
        _os_log_error_impl(&dword_1BE990000, v43, OS_LOG_TYPE_ERROR, "No transcoded asset after fetching from transcoder", (uint8_t *)&v45, 2u);
      }
    }

  }
}

void sub_1BEA9FBEC(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_error(v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend__didDownloadAsset_error_(WeakRetained, v6, *(_QWORD *)(a1 + 32), v5);
    objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    dispatch_group_leave(v9);

  }
}

uint64_t sub_1BEAA0E5C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;

  v4 = a2;
  v5 = a3;
  v8 = objc_msgSend_operationCount(v5, v6, v7);
  if (v8 == objc_msgSend_operationCount(v4, v9, v10))
  {
    v13 = 0;
  }
  else
  {
    v14 = objc_msgSend_operationCount(v5, v11, v12);
    if (v14 < objc_msgSend_operationCount(v4, v15, v16))
      v13 = -1;
    else
      v13 = 1;
  }

  return v13;
}

