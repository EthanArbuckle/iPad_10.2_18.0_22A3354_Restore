_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfTimer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1AF33BFCC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x736973706F6E7973;
  if (*v0 != 1)
    v1 = 0x73676E6974746573;
  if (*v0)
    return v1;
  else
    return 0x73657361696C61;
}

uint64_t sub_1AF33C028()
{
  unsigned __int8 *v0;

  return sub_1AF33C030(*v0);
}

uint64_t sub_1AF33C030(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1AF33C06C + 4 * byte_1AF3EB98A[a1]))(0xD000000000000010, 0x80000001AF3F1BE0);
}

uint64_t sub_1AF33C06C()
{
  return 0x694667756265646BLL;
}

unint64_t sub_1AF33C08C()
{
  return 0xD000000000000013;
}

uint64_t sub_1AF33C124()
{
  return 0x7A614C667265706BLL;
}

uint64_t _s6ktrace9PlanLayerV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AF33C1C0 + 4 * byte_1AF3EB9DA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AF33C1F4 + 4 * byte_1AF3EB9D5[v4]))();
}

uint64_t sub_1AF33C1F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF33C1FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF33C204);
  return result;
}

uint64_t sub_1AF33C210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF33C218);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AF33C21C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF33C224(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s6ktrace9PlanLayerV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfPET(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1AF33C310(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1AF33C354()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x736E6F6974706FLL;
  if (*v0 != 1)
    v1 = 0x6465726975716572;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfSamplerOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1AF33C3F4 + 4 * byte_1AF3EB9D0[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1AF33C428 + 4 * byte_1AF3EB9CB[v4]))();
}

uint64_t sub_1AF33C428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF33C430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF33C438);
  return result;
}

uint64_t sub_1AF33C444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF33C44CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1AF33C450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF33C458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfSamplerOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_1AF33C540()
{
  unsigned __int8 *v0;

  return sub_1AF33C548(*v0);
}

uint64_t sub_1AF33C548(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AF33C574 + 4 * byte_1AF3EB9A0[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1AF33C574()
{
  return 0x6E6F6973726576;
}

unint64_t sub_1AF33C58C()
{
  return 0xD000000000000010;
}

uint64_t sub_1AF33C5A8()
{
  return 0x4E70756F7247646FLL;
}

uint64_t sub_1AF33C5C8()
{
  return 0x6168436B63616C73;
}

unint64_t sub_1AF33C5E8()
{
  return 0xD000000000000015;
}

uint64_t sub_1AF33C60C()
{
  return 0x736973706F6E7973;
}

uint64_t sub_1AF33C624()
{
  return 0x746E656D75636F64;
}

uint64_t sub_1AF33C648()
{
  return 0x4C746C7561666564;
}

uint64_t sub_1AF33C66C()
{
  return 0x73726579616CLL;
}

uint64_t sub_1AF33C680()
{
  return 0x73676E6974746573;
}

uint64_t sub_1AF33C698()
{
  _BYTE *v0;

  if (*v0)
    return 0x4665736963657270;
  else
    return 0x6E496E6F69746361;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1AF33C6FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1AF34499C(v1[2], v1[3], v1[4], a1);
}

uint64_t destroy for PlanSettings.KPerfKDebugTrigger()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF33C714()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x6E496E6F69746361;
}

uint64_t sub_1AF33C75C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1AF33C784(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1AF33C784(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AF33C7C4 + 4 * byte_1AF3EB974[a1]))(0x6C61635F72657375, 0xEF6B636174735F6CLL);
}

unint64_t sub_1AF33C7C4()
{
  return 0xD000000000000011;
}

unint64_t sub_1AF33C8D8()
{
  return 0xD000000000000010;
}

uint64_t sub_1AF33C900()
{
  _BYTE *v0;

  if (*v0)
    return 0x654D757043726570;
  else
    return 0xD000000000000012;
}

uint64_t sub_1AF33C94C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x6E496E6F69746361;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _session_start_live(unint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  void **v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t matched;
  void **current;
  char *v26;
  char *v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *appended;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *global_queue;
  CFIndex v57;
  void *v58;
  size_t v59;
  int pid;
  int v61;
  uint8_t buf[64];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  size_t v91[3];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v91 = xmmword_1AF3E9C28;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  memset(buf, 0, sizeof(buf));
  v59 = 648;
  if (sysctl((int *)v91, 4u, buf, &v59, 0, 0) < 0)
    _session_start_live_cold_1();
  if ((buf[32] & 4) == 0)
    _session_start_live_cold_2();
  ktrace_log_init();
  v2 = ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AF33A000, v2, OS_LOG_TYPE_INFO, "starting to trace live", buf, 2u);
  }
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_DWORD *)a1 | 2) != 2)
    _session_start_live_cold_4();
  v57 = 0;
  v58 = 0;
  if (geteuid())
  {
    v3 = *__error();
    ktrace_log_init();
    v4 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      _session_start_live_cold_16(v3, v4);
    *__error() = v3;
    return 1;
  }
  v61 = 0;
  v91[0] = 4;
  if (sysctlbyname("ktrace.state", &v61, v91, 0, 0))
    goto LABEL_12;
  if (v61 == 1)
  {
    pid = -1;
    v59 = 4;
    if (sysctlbyname("ktrace.owning_pid", &pid, &v59, 0, 0))
    {
LABEL_12:
      v6 = *__error();
      if (v6)
        v5 = v6;
      else
        v5 = 22;
      goto LABEL_15;
    }
    v9 = pid;
    if (pid >= 1 && v9 != getpid())
    {
      memset(&buf[3], 0, 61);
      memset(buf, 63, 3);
      if (proc_name(pid, buf, 0x40u) > 0)
      {
        v5 = 16;
LABEL_15:
        *__error() = v5;
        v7 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          _session_start_live_cold_15();
        *__error() = v7;
        return v5;
      }
    }
  }
  v5 = _session_machine_init(a1);
  if ((_DWORD)v5)
    return v5;
  do
  {
    if (__ldaxr(&live_session))
    {
      __clrex();
      if (*(_DWORD *)a1 == 2)
      {
        v11 = atomic_load(&live_session);
        while (1)
        {
          v12 = __ldaxr(&live_session);
          if (v12 != v11)
            break;
          if (!__stlxr(a1, &live_session))
            goto LABEL_33;
        }
        __clrex();
        v15 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          _session_start_live_cold_13();
      }
      else
      {
        v15 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          _session_start_live_cold_14();
      }
      *__error() = v15;
      return 22;
    }
  }
  while (__stlxr(a1, &live_session));
LABEL_33:
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0)
    v13 = mach_continuous_time();
  else
    v13 = mach_absolute_time();
  *(_QWORD *)(a1 + 504) = v13;
  if (!*(_DWORD *)a1)
  {
    *(_QWORD *)(a1 + 520) = kttimesync_timestamp_from_ns(a1 + 432, *(_QWORD *)(a1 + 512)) + v13;
    v16 = trace_initialize(*(_QWORD *)(a1 + 336));
    if ((_DWORD)v16)
    {
      v5 = v16;
      v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        _session_start_live_cold_12();
LABEL_46:
      *__error() = v17;
      goto LABEL_47;
    }
    v21 = *(unsigned __int8 *)(a1 + 828);
    v22 = *(unsigned __int16 *)(a1 + 224);
    if ((v22 & 0x200) != 0)
      v23 = ((4 * v22) | (v21 >> 1)) & 0x202;
    else
      v23 = ((4 * v22) | (v21 >> 1)) & 0x202 | 0x400;
    if ((v21 & 2) != 0)
    {
      matched = trace_set_event_match_disable(a1 + 728, a1 + 768);
      if ((_DWORD)matched)
      {
        v5 = matched;
        v17 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          _session_start_live_cold_11();
        goto LABEL_46;
      }
      v23 |= 0x800u;
    }
    else if (!v23)
    {
LABEL_69:
      v5 = apply_kernel_typefilter_and_pid_filter(a1);
      if ((_DWORD)v5)
        goto LABEL_47;
      goto LABEL_70;
    }
    v5 = trace_set_flags(v23);
    if ((_DWORD)v5)
      goto LABEL_47;
    goto LABEL_69;
  }
  if (*(_DWORD *)a1 != 2)
  {
LABEL_70:
    v14 = 0;
    goto LABEL_71;
  }
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    v14 = ktrace_capture_live_stackshot();
    if (!v14)
    {
      v5 = *__error();
      do
LABEL_47:
        __ldaxr(&live_session);
      while (__stlxr(0, &live_session));
LABEL_142:
      free(v58);
      return v5;
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = trace_set_enable(0);
  if ((_DWORD)v18)
  {
    v5 = v18;
    v19 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      _session_start_live_cold_10();
    v20 = 0;
    *__error() = v19;
    goto LABEL_119;
  }
LABEL_71:
  if ((*(_DWORD *)(a1 + 4) - 1) <= 1)
  {
    current = (void **)ktrace_config_create_current();
    if (current)
    {
      v20 = current;
      ktrace_config_enable_configured(current);
      v26 = *(char **)(a1 + 696);
      if (v26)
        ktrace_config_set_reason((uint64_t)v20, v26);
      v27 = *(char **)(a1 + 704);
      if (v27)
        ktrace_config_set_command((uint64_t)v20, v27);
      v28 = *(_DWORD *)(a1 + 712);
      if (v28)
        ktrace_config_set_trigger_kind((uint64_t)v20, v28);
      if (*(_DWORD *)a1 == 2 || *(_DWORD *)(a1 + 4) == 2)
        ktrace_config_set_context_kind((uint64_t)v20, 2u);
      v29 = *(void **)(a1 + 600);
      if (v29)
      {
        *(_QWORD *)buf = 0;
        if (!objc_msgSend(v29, "shouldStartTracingWithConfiguration:error:", v20, buf, v57))
        {
          v31 = *__error();
          ktrace_log_init();
          v32 = ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            _session_start_live_cold_9((uint64_t *)buf, v31, v32);
          *__error() = v31;
          v5 = 45;
          goto LABEL_119;
        }
      }
      v30 = ktrace_config_serialize((uint64_t)v20, (UInt8 **)&v58, &v57);
      if ((_DWORD)v30)
      {
        v5 = v30;
LABEL_119:
        if (v14)
          stackshot_config_dealloc();
        do
          __ldaxr(&live_session);
        while (__stlxr(0, &live_session));
        if (v20)
          ktrace_config_destroy(v20);
        goto LABEL_142;
      }
      ktrace_config_destroy(v20);
    }
  }
  if (!*(_DWORD *)a1)
  {
    objc_msgSend(*(id *)(a1 + 600), "willStartTracingWithFile:", *(_QWORD *)(a1 + 648));
    ktrace_log_init();
    v38 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      _session_start_live_cold_8(v38, v39, v40, v41, v42, v43, v44, v45);
    v46 = trace_set_enable(1);
    if ((_DWORD)v46)
    {
      v5 = v46;
      v20 = 0;
      goto LABEL_119;
    }
    v47 = *(_DWORD *)(a1 + 4);
    if (v47 == 2)
    {
      ktrace_time_ringbuffer_tracing_started(*(_QWORD *)(a1 + 640));
      v47 = *(_DWORD *)(a1 + 4);
    }
    if (v47 != 1)
      goto LABEL_135;
    ktrace_log_init();
    v48 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      _session_start_live_cold_7(v48, v49, v50, v51, v52, v53, v54, v55);
    v14 = ktrace_capture_live_stackshot();
    if (v14)
    {
LABEL_135:
      objc_msgSend(*(id *)(a1 + 600), "didStartTracingWithFile:", *(_QWORD *)(a1 + 648), v57);
      if (*(_DWORD *)(a1 + 268))
      {
        global_queue = dispatch_get_global_queue(25, 0);
        dispatch_async(global_queue, &__block_literal_global_3);
      }
      goto LABEL_91;
    }
    goto LABEL_137;
  }
LABEL_91:
  kttimesync_init(a1 + 432, 0, (*(unsigned __int16 *)(a1 + 224) >> 7) & 1);
  if (*(_DWORD *)(a1 + 288))
  {
    memset(buf, 0, 24);
    v91[0] = 24;
    if (!sysctlbyname("machdep.remotetime.conversion_params", buf, v91, 0, 0))
    {
      *(_OWORD *)(a1 + 528) = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 544) = *(_QWORD *)&buf[16];
    }
  }
  v33 = *(_DWORD *)(a1 + 4);
  if (!v33)
  {
    populate_threadmap(a1, 0);
    v5 = _session_cpus_init(a1);
    if ((_DWORD)v5)
      return v5;
    v33 = *(_DWORD *)(a1 + 4);
  }
  if ((v33 - 1) <= 1)
  {
    v34 = *(_QWORD *)(a1 + 648);
    if (!v34)
      ktrace_remotetime_update_params_cold_1();
    if (!ktrace_file_header_append_live_cpu_map(v34))
      goto LABEL_139;
    v35 = *(_QWORD *)(a1 + 664);
    if (v35)
      (*(void (**)(uint64_t, _QWORD))(v35 + 16))(v35, *(_QWORD *)(a1 + 648));
    if (!kttimesync_append((__int128 *)(a1 + 432), *(_QWORD *)(a1 + 648)))
      goto LABEL_139;
    if (!v58)
      goto LABEL_104;
    if (!ktrace_file_append_chunk(*(_QWORD *)(a1 + 648), 32774, 1, 4, (UInt8 *)v58, v57))
      goto LABEL_139;
    free(v58);
    v58 = 0;
LABEL_104:
    if ((objc_msgSend(*(id *)(a1 + 600), "containsWithName:", CFSTR("Required"), v57) & 1) == 0)
      ktrace_file_append_ioreg(*(_QWORD *)(a1 + 648));
    if (*(_DWORD *)(a1 + 4) == 1)
    {
      if (!v14)
        ktrace_remotetime_update_params_cold_1();
      appended = ktrace_file_append_stackshot(*(_QWORD *)(a1 + 648), v14);
      stackshot_config_dealloc();
      if (appended)
      {
        v14 = 0;
        goto LABEL_110;
      }
LABEL_137:
      v5 = *__error();
LABEL_141:
      _session_end_internal(a1, 1, 1);
      goto LABEL_142;
    }
LABEL_110:
    if (!ktrace_file_append_live_thread_map(*(_QWORD *)(a1 + 648)) && *__error()
      || *(_DWORD *)(a1 + 288)
      && !ktrace_file_append_chunk(*(_QWORD *)(a1 + 648), 32782, 1, 0, (UInt8 *)(a1 + 528), 24))
    {
LABEL_139:
      v5 = *__error();
      if (v14)
        stackshot_config_dealloc();
      goto LABEL_141;
    }
  }
  v37 = drain_events_block(a1);
  dispatch_async(*(dispatch_queue_t *)(a1 + 128), v37);
  _Block_release(v37);
  if (*(_QWORD *)(a1 + 592))
    ktrace_client_start_tracing();
  if (v14)
    stackshot_config_dealloc();
  return 0;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF45E304]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF45E310](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *ktrace_file_append_chunk(uint64_t a1, int a2, __int16 a3, __int16 a4, UInt8 *a5, CFIndex a6)
{
  int v9;
  _QWORD *appended;

  if (a1 != -1)
  {
    if (!a1)
      ktrace_remotetime_update_params_cold_1();
    if (*(_QWORD *)(a1 + 152))
    {
      v9 = 22;
LABEL_10:
      appended = 0;
      *__error() = v9;
      return appended;
    }
  }
  appended = ktrace_file_append_start(a1, a2, a3, a4);
  if (appended)
  {
    if (a5)
    {
      if (a6)
      {
        v9 = ktrace_file_append_data(a1, (uint64_t)appended, a5, a6);
        if (v9)
          goto LABEL_10;
      }
    }
    v9 = ktrace_file_append_finish(a1, (uint64_t)appended);
    if (v9)
      goto LABEL_10;
  }
  return appended;
}

uint64_t ktrace_file_append_data(uint64_t a1, uint64_t a2, UInt8 *bytes, CFIndex length)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  while (1)
  {
    if (!a1)
      ktrace_remotetime_update_params_cold_1();
    if (!a2)
      ktrace_remotetime_update_params_cold_1();
    if (!bytes)
      ktrace_remotetime_update_params_cold_1();
    if (!length)
      ktrace_remotetime_update_params_cold_1();
    if (a1 == -1 || *(_DWORD *)(a1 + 16) == 4)
    {
      CFDataAppendBytes(*(CFMutableDataRef *)(a2 + 16), bytes, length);
      goto LABEL_11;
    }
    v8 = *(_QWORD *)(a1 + 200);
    if (!v8)
      break;
    a1 = *(_QWORD *)(a1 + 200);
    if (*(_QWORD *)(v8 + 152) != a2)
      ktrace_remotetime_update_params_cold_1();
  }
  if (*(_QWORD *)(a1 + 152) == a2)
  {
    v10 = *(_DWORD *)(a1 + 196);
    if (v10 != -1 && lseek(v10, 0, 2) == -1)
    {
      v9 = *__error();
      v12 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_append_data_cold_6();
      *__error() = v12;
      goto LABEL_23;
    }
    if (ktrace_file_write(a1, bytes, length, -1) < length)
    {
      v9 = *__error();
      v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_append_data_cold_5();
      *__error() = v11;
LABEL_23:
      *(_QWORD *)(a1 + 152) = 0;
      free((void *)a2);
      return v9;
    }
LABEL_11:
    v9 = 0;
    *(_QWORD *)(a2 + 8) += length;
    return v9;
  }
  return 22;
}

_QWORD *ktrace_file_append_start(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t appended;

  if (a1 == -1)
    return ktrace_file_append_start_internal(a1, a2, a3, a4);
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v8 = *(_QWORD *)(a1 + 200);
  if (!v8)
    return ktrace_file_append_start_internal(a1, a2, a3, a4);
  v9 = *(_QWORD *)(a1 + 232);
  if (v9 && *(_QWORD *)(v8 + 152) == v9)
    return ktrace_file_append_start_subchunk(v8, v9, a2, a3, a4);
  appended = ktrace_file_append_start();
  *(_QWORD *)(a1 + 232) = appended;
  if (appended && ktrace_file_append_subchunk(*(_QWORD *)(a1 + 200), appended, 32780, 0, 0, (UInt8 *)(a1 + 216), 4))
  {
    v8 = *(_QWORD *)(a1 + 200);
    v9 = *(_QWORD *)(a1 + 232);
    return ktrace_file_append_start_subchunk(v8, v9, a2, a3, a4);
  }
  return 0;
}

uint64_t ktrace_file_append_finish(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (a1 == -1)
    return 0;
  v3 = *(_QWORD *)(a1 + 200);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 152) != a2)
      ktrace_remotetime_update_params_cold_1();
    if (!*(_QWORD *)(a1 + 232))
      ktrace_remotetime_update_params_cold_1();
    result = ((uint64_t (*)(void))ktrace_file_append_finish)();
    if (!(_DWORD)result)
    {
      result = ktrace_file_append_finish(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 232));
      *(_QWORD *)(a1 + 232) = 0;
    }
  }
  else
  {
    result = ktrace_file_append_finish_internal(a1, (_QWORD *)(a1 + 24), a2);
    if (!(_DWORD)result)
      *(_BYTE *)(a1 + 299) = 0;
  }
  return result;
}

uint64_t ktrace_file_append_finish_internal(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  off_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  _DWORD v22[2];
  uint64_t v23;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (a1 == -1)
    ktrace_remotetime_update_params_cold_1();
  v6 = *(_DWORD *)(a1 + 16);
  if (v6 != 4 && *(_QWORD *)(a1 + 152) != a3)
    return 22;
  v8 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 152) = v8;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(a3 + 8) + *(_QWORD *)(v8 + 8) + 16;
    *(_QWORD *)(v8 + 8) = v10;
    v11 = *(_QWORD *)(a3 + 8) + *(_QWORD *)(a3 + 16) - v9;
    if (v11 > v10)
      *(_QWORD *)(v8 + 8) = v11;
  }
  if (v6 == 4)
  {
    (*(void (**)(_QWORD, BOOL, uint64_t))(*(_QWORD *)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272), a1 + 80 == (_QWORD)a2, a3);
    ktrace_chunk_destroy((_QWORD *)a3);
    return 0;
  }
  v12 = *(_DWORD *)(a3 + 36);
  v22[0] = *(_DWORD *)(a3 + 32);
  v22[1] = v12;
  v13 = *(_QWORD *)(a3 + 16);
  v23 = *(_QWORD *)(a3 + 8);
  v14 = v13 - 16;
  if ((unint64_t)ktrace_file_write(a1, v22, 0x10uLL, v13 - 16) > 0xF)
  {
    v17 = ktrace_chunk_array_append(a2, (_QWORD *)a3);
    if (!(_DWORD)v17)
    {
      if (ktrace_chunk_has_subchunks(a3) && *(_QWORD *)a3 != -1)
      {
        v7 = 0;
        v20 = *(_QWORD *)(a3 + 16);
        v21 = *(_QWORD *)(a3 + 8) + v20;
        *(_QWORD *)(a3 + 80) = 16;
        *(_QWORD *)(a3 + 88) = v20;
        *(_QWORD *)(a3 + 96) = v21;
        return v7;
      }
      return 0;
    }
    v7 = v17;
    v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_finish_internal_cold_5();
  }
  else
  {
    v15 = *__error();
    if (v15)
      v7 = v15;
    else
      v7 = 22;
    v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_finish_internal_cold_4();
  }
  *__error() = v16;
  v18 = *(_DWORD *)(a1 + 196);
  if (v18 != -1)
    ftruncate(v18, v14);
  free((void *)a3);
  return v7;
}

uint64_t ktrace_chunk_array_append(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  result = ktrace_chunk_array_append_internal((uint64_t)a1, a2);
  if (!(_DWORD)result)
  {
    a1[6] = a1[5];
    a1[1] = a2;
  }
  return result;
}

uint64_t ktrace_chunk_array_append_internal(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v4 = *(void **)a1;
  if (!v4)
  {
    v4 = malloc_type_malloc(0x38uLL, 0x2004093837F09uLL);
    *(_QWORD *)a1 = v4;
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = 7;
      goto LABEL_9;
    }
    return *__error();
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 == *(_QWORD *)(a1 + 16))
  {
    v6 = (2 * v5) | 1;
    v4 = malloc_type_realloc(v4, 8 * v6, 0x2004093837F09uLL);
    if (v4)
    {
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 24) = v6;
      goto LABEL_9;
    }
    return *__error();
  }
LABEL_9:
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 16);
  a2[3] = v8;
  *(_QWORD *)(a1 + 40) = a2[1] + a2[2];
  *(_QWORD *)(a1 + 16) = v8 + 1;
  *((_QWORD *)v4 + v8) = a2;
  return v7;
}

_QWORD *ktrace_file_append_start_internal(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  _QWORD *v8;
  int v9;
  int v11;
  off_t v12;
  unint64_t v13;
  NSObject *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a3 < 0)
  {
    *__error() = 22;
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_start_internal_cold_6();
    goto LABEL_8;
  }
  if (a1 != -1 && *(_DWORD *)(a1 + 16) != 4)
  {
    if (*(_BYTE *)(a1 + 296))
    {
      v11 = *(_DWORD *)(a1 + 196);
      if (v11 == -1)
      {
        v12 = *(_QWORD *)(a1 + 280);
      }
      else
      {
        v12 = lseek(v11, 0, 2);
        if (v12 == -1)
        {
          v9 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
            ktrace_file_append_start_internal_cold_5();
LABEL_8:
          v8 = 0;
          *__error() = v9;
          return v8;
        }
      }
      ktrace_chunk_array_read_all(a1, a1 + 80);
      ktrace_chunk_array_read_all(a1, a1 + 24);
      v13 = -(int)v12 & 7;
      if (!v13)
        goto LABEL_24;
      ktrace_log_init();
      v14 = ktrace_file_log;
      v15 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
      if (v15)
        ktrace_file_append_start_internal_cold_4(v13, v14, v16, v17, v18, v19, v20, v21);
      MEMORY[0x1E0C80A78](v15);
      v23 = (char *)&v26 - v22;
      bzero((char *)&v26 - v22, v13);
      if (ktrace_file_write(a1, v23, v13, -1) >= v13)
      {
LABEL_24:
        v8 = ktrace_chunk_create(a1, a2, a3, a4, 0, v12 + v13 + 16);
        if (!v8)
          return v8;
        v26 = xmmword_1AF3E9BC0;
        if (ktrace_file_write(a1, &v26, 0x10uLL, -1) == 16)
        {
          *(_QWORD *)(a1 + 152) = v8;
          return v8;
        }
        v25 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_append_start_internal_cold_2();
        *__error() = v25;
        v9 = *__error();
        free(v8);
        goto LABEL_8;
      }
      v24 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_append_start_internal_cold_3();
      *__error() = v24;
    }
    return 0;
  }
  v8 = ktrace_chunk_create(-1, a2, a3, a4, 0, 0);
  v8[2] = CFDataCreateMutable(0, 0);
  return v8;
}

uint64_t ktrace_file_write(uint64_t a1, const void *a2, size_t a3, off_t a4)
{
  off_t v6;
  int v8;
  unint64_t v9;
  size_t v10;
  int v11;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 16) == 4)
    ktrace_remotetime_update_params_cold_1();
  v6 = a4;
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    while (1)
    {
      *__error() = 0;
      v8 = *(_DWORD *)(a1 + 196);
      if (v6 == -1)
      {
        v9 = write(v8, a2, a3);
        *(_QWORD *)(a1 + 280) = fd_size(*(_DWORD *)(a1 + 196));
      }
      else
      {
        v9 = pwrite(v8, a2, a3, v6);
      }
      if (v9 < a3)
        break;
      if (v9 != -1)
        return v9;
      if (*__error() != 4)
        return -1;
    }
    *__error() = 79;
    return -1;
  }
  if (a4 == -1)
    v6 = *(_QWORD *)(a1 + 280);
  v10 = v6 + a3;
  v11 = ktrace_file_ensure_space((_QWORD *)a1, v6 + a3);
  if (v11)
  {
    *__error() = v11;
    return -1;
  }
  memcpy((void *)(*(_QWORD *)(a1 + 240) + v6), a2, a3);
  if (*(_QWORD *)(a1 + 280) < v10)
    *(_QWORD *)(a1 + 280) = v10;
  return a3;
}

off_t fd_size(int a1)
{
  int v1;
  stat v3;

  if (a1 == -1)
    ktrace_remotetime_update_params_cold_1();
  memset(&v3, 0, sizeof(v3));
  if (!fstat(a1, &v3))
    return v3.st_size;
  v1 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    fd_size_cold_2();
  *__error() = v1;
  return -1;
}

uint64_t ktrace_chunk_array_read_all(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_QWORD *)(a2 + 8))
  {
    v3 = result;
    v4 = 0;
    do
      result = ktrace_chunk_array_next(v3, a2, &v4);
    while (!(_DWORD)result && v4);
  }
  return result;
}

_QWORD *ktrace_chunk_create(uint64_t a1, int a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != -1)
  {
    if (!a1)
      ktrace_remotetime_update_params_cold_1();
    if (*(_DWORD *)(a1 + 16) == 4)
      ktrace_remotetime_update_params_cold_1();
  }
  v12 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A2040F61CF89BuLL);
  v13 = v12;
  if (v12)
  {
    *((_DWORD *)v12 + 8) = a2;
    *((_WORD *)v12 + 18) = a3;
    *((_WORD *)v12 + 19) = a4;
    *v12 = a1;
    v12[1] = a5;
    v12[2] = a6;
    if (ktrace_chunk_has_subchunks((uint64_t)v12))
    {
      v14 = v13[2];
      v15 = v13[1] + v14;
      v13[10] = 16;
      v13[11] = v14;
      v13[12] = v15;
    }
  }
  return v13;
}

uint64_t ktrace_chunk_has_subchunks(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int16 *)(a1 + 36) >> 15;
}

uint64_t supportsDeprecatedWillEndTracingToFile(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = objc_opt_respondsToSelector();

  return v2 & 1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t ktrace_chunk_array_next(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t appended;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  NSObject *v30;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t buf[4];
  unint64_t v55;
  __int16 v56;
  _BYTE v57[18];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v53 = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v6 = *a3;
  *a3 = 0;
  if (v6)
  {
    v7 = v6[3] + 1;
    v8 = *(_QWORD *)(a2 + 16);
    if (v7 < v8)
    {
      appended = 0;
      v10 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v7);
LABEL_9:
      *a3 = v10;
      return appended;
    }
    if (v7 == v8 && *(_QWORD *)(a2 + 8) != 0)
    {
      ktrace_log_init();
      v17 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_chunk_array_next_cold_12(v7, v17, v19, v20, v21, v22, v23, v24);
LABEL_29:
      appended = 0;
      *a3 = 0;
      return appended;
    }
    v12 = v6[1] + v6[2];
    v13 = (-(int)v12 & 7) + v12;
    ktrace_log_init();
    v14 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      v16 = v6[1];
      v15 = v6[2];
      *(_DWORD *)buf = 134218496;
      v55 = v13;
      v56 = 2048;
      *(_QWORD *)v57 = v15;
      *(_WORD *)&v57[8] = 2048;
      *(_QWORD *)&v57[10] = v16;
      _os_log_debug_impl(&dword_1AF33A000, v14, OS_LOG_TYPE_DEBUG, "calculating new offset %lld from %lld base data offset and %llu size", buf, 0x20u);
    }
  }
  else
  {
    if (*(_QWORD *)(a2 + 16))
    {
      appended = 0;
      v10 = **(_QWORD ***)a2;
      goto LABEL_9;
    }
    v13 = (-*(_BYTE *)(a2 + 40) & 7) + *(_QWORD *)(a2 + 40);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      ktrace_chunk_array_next_cold_11();
  }
  v25 = (_QWORD *)(a2 + 48);
  v26 = *(_QWORD *)(a2 + 32);
  if (v26 + v13 >= *(_QWORD *)(a2 + 48))
  {
LABEL_27:
    ktrace_log_init();
    v30 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      v44 = *(_QWORD *)(a2 + 32) + v13;
      v45 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)buf = 134218496;
      v55 = v13;
      v56 = 2048;
      *(_QWORD *)v57 = v44;
      *(_WORD *)&v57[8] = 2048;
      *(_QWORD *)&v57[10] = v45;
      _os_log_debug_impl(&dword_1AF33A000, v30, OS_LOG_TYPE_DEBUG, "next chunk header is at offset %lld (data at %lld), max offset is %lld", buf, 0x20u);
    }
    goto LABEL_29;
  }
  while (1)
  {
    v27 = ktrace_file_read(a1, &v52, v26, v13);
    v28 = *(_QWORD *)(a2 + 32);
    if (v27 < v28)
    {
      appended = *__error();
      if (!(_DWORD)appended)
        ktrace_remotetime_update_params_cold_1();
      v33 = *__error();
      ktrace_log_init();
      v34 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        v48 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)buf = 134218496;
        v55 = v48;
        v56 = 2048;
        *(_QWORD *)v57 = v13;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)&v57[10] = v33;
        _os_log_error_impl(&dword_1AF33A000, v34, OS_LOG_TYPE_ERROR, "cannot read %zu bytes at offset %lld for next chunk header (%{errno}d)", buf, 0x1Cu);
      }
      *__error() = v33;
      return appended;
    }
    if ((_DWORD)v52 != 0x2000)
      break;
    v13 += (-((_DWORD)v28 + (_DWORD)v13 + (_DWORD)v53) & 7) + v28 + v53;
    ktrace_log_init();
    v29 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v55 = v13;
      _os_log_debug_impl(&dword_1AF33A000, v29, OS_LOG_TYPE_DEBUG, "skipping null chunk to offset %lld", buf, 0xCu);
    }
    v26 = *(_QWORD *)(a2 + 32);
    if (v26 + v13 >= *(_QWORD *)(a2 + 48))
      goto LABEL_27;
  }
  if ((_DWORD)v52 == -1)
  {
    v32 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_chunk_array_next_cold_10();
    *__error() = v32;
    return 79;
  }
  if (v53 != -1)
  {
    if (v53 + v13 + v28 > *v25)
    {
      v35 = *__error();
      ktrace_log_init();
      v36 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        v49 = *(_QWORD *)(a2 + 16);
        v50 = *(_QWORD *)(a2 + 32) + v13;
        v51 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)buf = 134219008;
        v55 = v49;
        v56 = 2048;
        *(_QWORD *)v57 = v53;
        *(_WORD *)&v57[8] = 2048;
        *(_QWORD *)&v57[10] = v50;
        v58 = 2048;
        v59 = v51;
        v60 = 1024;
        v61 = v35;
        _os_log_error_impl(&dword_1AF33A000, v36, OS_LOG_TYPE_ERROR, "chunk %zu would extend beyond file: chunk header shows size %llu, data starts at offset %lld, but max offset in file is %lld (%{errno}d)", buf, 0x30u);
      }
      *__error() = v35;
      return 79;
    }
LABEL_50:
    if (v28 == 8)
    {
      ktrace_log_init();
      v46 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_chunk_array_next_cold_6((int *)&v52, v13, v46);
      v38 = v52;
      v41 = HIDWORD(v52);
      v42 = *(_QWORD *)(a2 + 32) + v13;
      v43 = a1;
      v39 = 0;
      v40 = 0;
LABEL_58:
      v6 = ktrace_chunk_create(v43, v38, v39, v40, v41, v42);
    }
    else if (v28 == 16)
    {
      ktrace_log_init();
      v37 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        v55 = v13;
        v56 = 1024;
        *(_DWORD *)v57 = v52;
        *(_WORD *)&v57[4] = 2048;
        *(_QWORD *)&v57[6] = v53;
        _os_log_debug_impl(&dword_1AF33A000, v37, OS_LOG_TYPE_DEBUG, "found chunk with header at offset %lld, tag 0x%08x size %llu", buf, 0x1Cu);
      }
      v38 = v52;
      v39 = WORD2(v52);
      v40 = HIWORD(v52);
      v41 = v53;
      v42 = *(_QWORD *)(a2 + 32) + v13;
      v43 = a1;
      goto LABEL_58;
    }
    if (!v6)
      return *__error();
    *a3 = v6;
    appended = ktrace_chunk_array_append_internal(a2, v6);
    if (!(_DWORD)appended)
    {
      if (*(_QWORD *)(a2 + 40) >= *(_QWORD *)(a2 + 48))
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
          ktrace_chunk_array_next_cold_5();
        appended = 0;
        *(_QWORD *)(a2 + 8) = v6;
      }
      else
      {
        return 0;
      }
    }
    return appended;
  }
  v53 = *v25 - (v13 + v28);
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_50;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    ktrace_chunk_array_next_cold_9();
  if (ktrace_file_write(a1, &v53, 8uLL, v13 + 8) == 8)
  {
    v28 = *(_QWORD *)(a2 + 32);
    goto LABEL_50;
  }
  appended = *__error();
  if (!(_DWORD)appended)
    ktrace_remotetime_update_params_cold_1();
  v47 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    ktrace_chunk_array_next_cold_8();
  *__error() = v47;
  return appended;
}

void ktrace_log_init()
{
  if (ktrace_log_init_ktrace_log_once != -1)
    dispatch_once(&ktrace_log_init_ktrace_log_once, &__block_literal_global_6);
}

void ktrace_end(uint64_t a1, int a2)
{
  _session_end_internal(a1, a2 != 0, 3);
}

void _session_end_internal(uint64_t a1, char a2, int a3)
{
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  char *v17;
  const char *v18;
  unsigned int v19;
  NSObject *v20;
  _QWORD v21[5];
  _QWORD block[5];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)(a1 + 4);
  if ((a2 & 2) != 0)
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 824));
  if ((*(_WORD *)(a1 + 224) & 3) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 156));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    ktrace_log_init();
    v10 = ktrace_log;
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
      return;
    *(_WORD *)buf = 0;
    v11 = "ending before starting/configuration";
    goto LABEL_16;
  }
  v8 = atomic_load((unsigned __int8 *)(a1 + 157));
  if ((v8 & 1) != 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    ktrace_log_init();
    v10 = ktrace_log;
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
      return;
    *(_WORD *)buf = 0;
    v11 = "ending while already ended immediately";
LABEL_16:
    _os_log_impl(&dword_1AF33A000, v10, OS_LOG_TYPE_INFO, v11, buf, 2u);
    return;
  }
  if ((v6 | 2) == 2)
  {
    v9 = _session_end_live(a1);
    if (a3)
      goto LABEL_7;
LABEL_29:
    ktrace_remotetime_update_params_cold_1();
  }
  v9 = 0;
  if (!a3)
    goto LABEL_29;
LABEL_7:
  if ((a2 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 157));
  if ((a2 & 4) != 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 158));
    atomic_store(1u, (unsigned __int8 *)(a1 + 156));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    if (!v9)
    {
      v13 = *(_QWORD *)(a1 + 80);
      if (v13)
        _session_end_internal(v13, 1, 3);
      *(_DWORD *)(a1 + 808) = 7;
      goto LABEL_34;
    }
    goto LABEL_18;
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 156));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
  if ((v9 & 1) != 0)
  {
LABEL_18:
    if (*(_DWORD *)(a1 + 4) == 2)
    {
      *(_WORD *)(a1 + 224) |= 0x20u;
      ktrace_file_append_live_stackshot_internal(*(_QWORD *)(a1 + 648));
    }
    *(_DWORD *)(a1 + 808) = a3;
    if ((v7 - 1) <= 1)
      objc_msgSend(*(id *)(a1 + 600), "willEndTracingWithFile:", 0);
    trace_set_enable(0);
    if (*(_QWORD *)(a1 + 592))
      ktrace_client_stop_tracing();
    if ((v7 - 1) <= 1)
    {
      v12 = *(NSObject **)(a1 + 128);
      if (!v12)
        ktrace_remotetime_update_params_cold_1();
      if ((a2 & 2) != 0)
      {
        objc_msgSend(*(id *)(a1 + 600), "didEndTracingWithFile:", *(_QWORD *)(a1 + 648));
      }
      else
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___session_end_internal_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a1;
        dispatch_async(v12, block);
      }
    }
  }
LABEL_34:
  ktrace_log_init();
  v14 = ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
  {
    v15 = "";
    v16 = " immediately";
    if ((a2 & 1) == 0)
      v16 = "";
    v17 = _end_reason_names[a3];
    v18 = " from draining";
    if ((a2 & 2) == 0)
      v18 = "";
    *(_DWORD *)buf = 136315906;
    v24 = v16;
    v25 = 2080;
    v26 = v18;
    v27 = 2080;
    v28 = v17;
    if (v9)
      v15 = ", was active";
    v29 = 2080;
    v30 = v15;
    _os_log_impl(&dword_1AF33A000, v14, OS_LOG_TYPE_INFO, "ending tracing%s%s due to %s%s", buf, 0x2Au);
  }
  v19 = *(_DWORD *)(a1 + 4);
  if (v19 >= 3)
  {
    if (v19 != 4)
      _session_end_internal_cold_3();
    if (v9)
      _session_teardown(a1);
  }
  else if ((a2 & 1) != 0 || *(_DWORD *)a1 == 1)
  {
    v20 = *(NSObject **)(a1 + 128);
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ___session_end_internal_block_invoke_13;
    v21[3] = &__block_descriptor_40_e5_v8__0l;
    v21[4] = a1;
    dispatch_async(v20, v21);
  }
}

uint64_t _session_end_live(uint64_t a1)
{
  unint64_t v1;
  uint64_t result;

  while (1)
  {
    v1 = __ldaxr(&live_session);
    if (v1 != a1)
      break;
    if (!__stlxr(0, &live_session))
      return 1;
  }
  result = 0;
  __clrex();
  return result;
}

_QWORD *kttimesync_append(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3);
  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v7 = v2;
  v8 = *((_QWORD *)a1 + 5);
  v9 = (*((unsigned __int8 *)a1 + 48) >> 3) & 1;
  return ktrace_file_append_chunk(a2, 32787, 1, 0, (UInt8 *)&v4, 48);
}

_QWORD *ktrace_file_append_stackshot(uint64_t a1, uint64_t a2)
{
  _QWORD *appended;
  UInt8 *stackshot_buffer;
  unsigned int stackshot_size;
  int v6;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  appended = ktrace_file_append_start(a1, 32770, 1, 0);
  if (appended)
  {
    stackshot_buffer = (UInt8 *)stackshot_config_get_stackshot_buffer();
    stackshot_size = stackshot_config_get_stackshot_size();
    v6 = ktrace_file_append_data(a1, (uint64_t)appended, stackshot_buffer, stackshot_size);
    if (v6 || (v6 = ktrace_file_append_finish(a1, (uint64_t)appended)) != 0)
    {
      appended = 0;
      *__error() = v6;
    }
  }
  return appended;
}

_QWORD *ktrace_file_append_live_thread_map(uint64_t a1)
{
  int v2;
  int v3;
  _QWORD *appended;
  int v5;
  CFIndex v7;
  void *v8;

  v7 = 0;
  v8 = 0;
  v2 = kdebug_alloc_thread_map(&v8, (size_t *)&v7);
  if (!v2)
  {
    appended = ktrace_file_append_chunk(a1, 7424, 0, 0, (UInt8 *)v8, v7);
    if (appended)
      v3 = 0;
    else
      v3 = *__error();
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  v3 = v2;
  if (v2 != 2)
  {
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_thread_map_cold_1();
    appended = 0;
    *__error() = v5;
    goto LABEL_10;
  }
  v3 = 0;
  appended = 0;
LABEL_11:
  *__error() = v3;
  return appended;
}

uint64_t kdebug_alloc_thread_map(_QWORD *a1, size_t *a2)
{
  uint64_t result;
  size_t v5;
  void *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14[2];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v11 = 0;
  v12 = 0;
  v13 = 0;
  result = kdebug_get_bufinfo(&v11);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v12))
    {
      v5 = 32 * SHIDWORD(v12);
      *a2 = v5;
      v6 = malloc_type_malloc(v5, 0x35B909D8uLL);
      if (!v6)
        ktrace_remotetime_update_params_cold_1();
      v7 = v6;
      v15 = 12;
      *(_QWORD *)v14 = 0x1800000001;
      if (sysctl(v14, 3u, v6, a2, 0, 0) < 0)
      {
        v8 = *__error();
        free(v7);
        if (v8 == 22)
        {
          return kdebug_alloc_current_thread_map(v9, a2);
        }
        else
        {
          v10 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            kdebug_alloc_thread_map_cold_4();
          *__error() = v10;
          if (v8)
            return v8;
          else
            return 22;
        }
      }
      else
      {
        result = 0;
        *a1 = v7;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

void __drain_events_block_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 v9;
  __int16 v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  int appended;
  int v20;
  int v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v25;
  NSObject *v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  char v38;
  int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  size_t v52;
  void *v53;
  __int128 buf;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)v2;
  v4 = atomic_load((unsigned __int8 *)(v2 + 156));
  v5 = v4 | (v3 == 2);
  if (v4 & 1 | (v3 == 2))
    v6 = 0;
  else
    v6 = *(_DWORD *)(v2 + 152);
  v7 = atomic_load((unsigned __int8 *)(v2 + 157));
  if ((v7 & 1) != 0)
    return;
  v8 = *(_DWORD *)(v2 + 4);
  if (v8 == 2)
  {
    v16 = atomic_load((unsigned __int8 *)(v2 + 159));
    if ((v16 & 1) != 0)
    {
LABEL_46:
      v20 = 0;
      goto LABEL_63;
    }
    if (v6 && (kdebug_wait(v6) & 0x80000000) != 0)
      goto LABEL_32;
    v52 = 0;
    v53 = 0;
    v51 = 0;
    if (trace_collect(&v53, &v52, &v51))
    {
      v14 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __drain_events_block_block_invoke_cold_7();
      goto LABEL_24;
    }
    if (!v53)
      ktrace_remotetime_update_params_cold_1();
    if (!v52)
    {
      trace_free(v53);
      if ((v5 & 1) != 0)
      {
        ktrace_log_init();
        v43 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
          __drain_events_block_block_invoke_cold_6(v43, v44, v45, v46, v47, v48, v49, v50);
        v20 = 1;
        goto LABEL_63;
      }
      goto LABEL_46;
    }
    v27 = *(NSObject **)(v2 + 232);
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v55 = __drain_trailing_duration_block_invoke;
    v56 = &__block_descriptor_56_e5_v8__0l;
    v57 = v2;
    v58 = v53;
    v59 = (void *)v52;
    v26 = v27;
LABEL_45:
    dispatch_async(v26, &buf);
    goto LABEL_46;
  }
  if (v8 == 1)
  {
    v53 = 0;
    v17 = *(_QWORD *)(v2 + 680);
    v18 = *(_QWORD *)(v2 + 648);
    if (v17)
      appended = ktrace_file_append_live_filtered_ktrace(v18, v6, *(_DWORD *)(v2 + 656), &v53, v17);
    else
      appended = ktrace_file_append_live_ktrace(v18, 0, v6, *(_DWORD *)(v2 + 656), (uint64_t *)&v53);
    v21 = appended;
    if (appended)
    {
      ktrace_log_init();
      v22 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
      {
        v23 = strerror(v21);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1AF33A000, v22, OS_LOG_TYPE_INFO, "ending draining to file due to error: %s", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_32;
    }
    v24 = (uint64_t)v53;
    if (v53)
    {
      v25 = (unint64_t)ktrace_chunk_size((uint64_t)v53) < 9;
      v24 = (uint64_t)v53;
    }
    else
    {
      v25 = 0;
    }
    if (v24)
      v28 = v25;
    else
      v28 = 1;
    if ((v5 & v28) == 1)
    {
      ktrace_log_init();
      v29 = ktrace_log;
      v20 = 1;
      if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
        goto LABEL_63;
      v30 = "";
      if (v25)
        v30 = ", undersized chunk";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v30;
      v31 = "ending draining to file, out of events%s";
      v32 = v29;
      v33 = 12;
      goto LABEL_56;
    }
    v34 = *(_QWORD *)(v2 + 160) + ((unint64_t)ktrace_chunk_size(v24) >> 6);
    *(_QWORD *)(v2 + 160) = v34;
    v35 = *(_QWORD *)(v2 + 720);
    if (v34 <= v35 || v35 == 0)
      v20 = 0;
    else
      v20 = 2;
  }
  else
  {
    if (v8)
      __drain_events_block_block_invoke_cold_1();
    v9 = atomic_load((unsigned __int8 *)(v2 + 159));
    if ((v9 & 1) != 0)
    {
      v20 = 3;
      goto LABEL_63;
    }
    if (!*(_QWORD *)(v2 + 320))
    {
      v10 = *(_WORD *)(v2 + 224);
      if ((v10 & 0x20) == 0)
      {
        *(_WORD *)(v2 + 224) = v10 | 0x20;
        v11 = (uint64_t *)ktrace_file_append_live_stackshot_internal(-1);
        if (v11)
          _session_read_stackshot_chunk(v2, v11);
      }
    }
    if (v6 && (kdebug_wait(v6) & 0x80000000) != 0)
      goto LABEL_32;
    v52 = 0;
    v53 = 0;
    v51 = 0;
    v12 = trace_collect(&v53, &v52, &v51);
    if (v12)
    {
      v13 = v12;
      v14 = *__error();
      ktrace_log_init();
      v15 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __drain_events_block_block_invoke_cold_4(v13, v14, v15);
LABEL_24:
      *__error() = v14;
LABEL_32:
      v20 = 4;
      goto LABEL_63;
    }
    if (!v53)
      ktrace_remotetime_update_params_cold_1();
    if ((*(_BYTE *)(v2 + 828) & 4) == 0 && (v51 & 8) != 0 && !*(_DWORD *)v2)
      populate_threadmap(v2, 1);
    if (v52)
    {
      v26 = *(NSObject **)(v2 + 232);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3221225472;
      v55 = __drain_callbacks_block_invoke;
      v56 = &__block_descriptor_56_e5_v8__0l;
      v57 = v2;
      v58 = (void *)v52;
      v59 = v53;
      goto LABEL_45;
    }
    trace_free(v53);
    if ((v5 & 1) == 0)
      goto LABEL_46;
    ktrace_log_init();
    v42 = ktrace_log;
    v20 = 1;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      v31 = "ending after empty trace collection";
      v32 = v42;
      v33 = 2;
LABEL_56:
      _os_log_impl(&dword_1AF33A000, v32, OS_LOG_TYPE_INFO, v31, (uint8_t *)&buf, v33);
    }
  }
LABEL_63:
  switch(v20)
  {
    case 0:
      v40 = atomic_load((unsigned __int8 *)(v2 + 157));
      if ((v40 & 1) != 0)
        return;
      v41 = atomic_load((unsigned __int8 *)(v2 + 156));
      if ((v41 & 1) != 0
        || v3 == 2
        || (buf = 0uLL, LODWORD(v55) = 0, trace_get_bufinfo(&buf))
        || !DWORD1(buf))
      {
        dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 40) + 128), *(dispatch_block_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
      }
      else
      {
        if ((BYTE8(buf) & 8) != 0)
          v39 = 5;
        else
          v39 = 4;
        v37 = v2;
        v38 = 3;
LABEL_67:
        _session_end_internal(v37, v38, v39);
        _session_drain_finish(v2);
      }
      break;
    case 1:
      v37 = v2;
      v38 = 2;
      v39 = 2;
      goto LABEL_67;
    case 2:
      v37 = v2;
      v38 = 2;
      v39 = 6;
      goto LABEL_67;
    case 3:
      return;
    case 4:
      v37 = v2;
      v38 = 3;
      v39 = 1;
      goto LABEL_67;
    default:
      ktrace_remotetime_update_params_cold_1();
  }
}

uint64_t ktrace_file_append_live_ktrace(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t result;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  int v17;
  off_t v18;
  int v19;
  NSObject *v20;
  int v21;
  size_t v22;
  _QWORD v23[2];
  int v24;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  LODWORD(v6) = a3;
  if (a4 - 2 < 3)
    return ktrace_file_append_live_ktrace_transformed(a1, a2, a3, a4, a5, 0);
  if (a4 > 1)
  {
    v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_ktrace_cold_2();
    *__error() = v10;
    *__error() = 22;
    return *__error();
  }
  if (a2)
  {
    *__error() = 22;
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_ktrace_cold_5();
    *__error() = v9;
    return *__error();
  }
  if (*(_BYTE *)(a1 + 296))
  {
    v23[0] = 0;
    v23[1] = 0;
    v24 = 0;
    result = kdebug_get_bufinfo(v23);
    if ((_DWORD)result)
      return result;
    v11 = setup_events_chunk(a1, 0);
    if (v11)
    {
      v12 = (uint64_t)v11;
      v13 = (uint64_t)SLODWORD(v23[0]) << 6;
      v6 = v6;
      v14 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      while (1)
      {
        v15 = *(_DWORD *)(a1 + 196);
        if (v15 == -1)
        {
          v22 = v13;
          if (ktrace_file_ensure_space((_QWORD *)a1, v13)
            || kdebug_wait_and_read_events((void *)(*(_QWORD *)(a1 + 240) + *(_QWORD *)(a1 + 280)), &v22, v6))
          {
LABEL_25:
            v17 = *(_DWORD *)(a1 + 196);
            if (v17 == -1)
            {
              v18 = *(_QWORD *)(a1 + 280);
            }
            else
            {
              v18 = lseek(v17, 0, 2);
              if (v18 == -1)
              {
                v19 = *__error();
                ktrace_log_init();
                v20 = ktrace_file_log;
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                  ktrace_file_append_live_ktrace_cold_4(v19, v20);
                *__error() = v19;
                v18 = -1;
              }
            }
            *(_QWORD *)(v12 + 8) = v18 - *(_QWORD *)(v12 + 16);
            result = finish_events_chunk(a1, v12, 0, 0);
            if (a5 && !(_DWORD)result)
              *a5 = v12;
            return result;
          }
          *(_QWORD *)(a1 + 280) += v22;
        }
        else if (kdebug_write_events(v15, v6))
        {
          goto LABEL_25;
        }
        v16 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
        v6 -= (v16 - v14) / 0xF4240;
        v14 = v16;
        if (v6 <= 0)
          goto LABEL_25;
      }
    }
    return *__error();
  }
  v21 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    ktrace_file_append_live_ktrace_cold_3();
  *__error() = v21;
  return 22;
}

uint64_t kdebug_get_bufinfo(void *a1)
{
  int v2;
  size_t v3;
  int v4[2];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 5;
  *(_QWORD *)v4 = 0x1800000001;
  v3 = 20;
  if ((sysctl(v4, 3u, a1, &v3, 0, 0) & 0x80000000) == 0)
    return 0;
  v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    kdebug_get_bufinfo_cold_1();
  *__error() = v2;
  if (*__error())
    return *__error();
  else
    return 22;
}

_QWORD *setup_events_chunk(uint64_t a1, int a2)
{
  CFIndex v3;
  UInt8 *v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *appended;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v14 = 0;
  v12 = 0;
  v13 = 0;
  if (a2)
    v3 = 12;
  else
    v3 = 8;
  if (a2)
    v4 = (UInt8 *)&v13;
  else
    v4 = (UInt8 *)&v12;
  if ((a2 & 1) != 0)
  {
    v5 = 7936;
  }
  else
  {
    v6 = ktrace_file_align_next(a1, 0xFF8uLL);
    *__error() = v6;
    if (*__error())
      return 0;
    v5 = 7680;
  }
  appended = ktrace_file_append_start(a1, v5, 0, 0);
  if (!appended)
  {
    v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      setup_events_chunk_cold_1();
    goto LABEL_18;
  }
  v7 = appended;
  v9 = ktrace_file_append_data(a1, (uint64_t)appended, v4, v3);
  if (v9)
  {
    *__error() = v9;
    v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      setup_events_chunk_cold_2();
LABEL_18:
    v7 = 0;
    *__error() = v10;
  }
  return v7;
}

uint64_t ktrace_file_align_next(uint64_t a1, unint64_t a2)
{
  int v4;
  off_t v5;
  int v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *appended;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t updated;
  char v15;

  if (a2 <= 8)
    ktrace_remotetime_update_params_cold_1();
  if ((a2 & 7) != 0)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 16) == 4)
    return 0;
  v4 = *(_DWORD *)(a1 + 196);
  if (v4 == -1)
  {
    v5 = *(_QWORD *)(a1 + 280);
  }
  else
  {
    v5 = lseek(v4, 0, 2);
    if (v5 < 0)
    {
      v6 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_align_next_cold_5();
      *__error() = v6;
      return *__error();
    }
  }
  if (((-16 - v5) & (a2 - 1)) == 0)
    return 0;
  v7 = (-32 - v5) & (a2 - 1);
  if (!v7)
    return 0;
  if (*(_BYTE *)(a1 + 299))
    v8 = (_QWORD *)(a1 + 80);
  else
    v8 = (_QWORD *)(a1 + 24);
  appended = ktrace_file_append_start_internal(a1, 0x2000, 0, 0);
  if (appended)
  {
    if (!*(_BYTE *)(a1 + 296))
      ktrace_remotetime_update_params_cold_1();
    v10 = appended;
    v11 = *(_DWORD *)(a1 + 196);
    if (v11 == -1)
    {
      if (!*(_QWORD *)(a1 + 240))
        ktrace_remotetime_update_params_cold_1();
      updated = ktrace_file_ensure_space((_QWORD *)a1, *(_QWORD *)(a1 + 248) + v7);
      if ((_DWORD)updated)
        goto LABEL_32;
      bzero((void *)(*(_QWORD *)(a1 + 240) + *(_QWORD *)(a1 + 280)), v7);
      *(_QWORD *)(a1 + 280) += v7;
    }
    else
    {
      v15 = 0;
      if (lseek(v11, v7 - 1, 2) < 0)
      {
        v12 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_align_next_cold_3();
      }
      else
      {
        if (ktrace_file_write(a1, &v15, 1uLL, -1))
          goto LABEL_29;
        v12 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_align_next_cold_4();
      }
      *__error() = v12;
      updated = *__error();
      if ((_DWORD)updated)
        goto LABEL_32;
    }
LABEL_29:
    v10[1] = v7;
    updated = ktrace_file_append_finish_internal(a1, v8, (uint64_t)v10);
    if ((_DWORD)updated)
      return updated;
    if (*(_BYTE *)(a1 + 299))
    {
      updated = ktrace_file_update_header_size(a1);
      if (!(_DWORD)updated)
        return updated;
LABEL_32:
      ftruncate(*(_DWORD *)(a1 + 196), v10[2] - 16);
      free(v10);
      return updated;
    }
    return 0;
  }
  return *__error();
}

uint64_t kdebug_write_events(int a1, unsigned int a2)
{
  size_t v2;
  int v4;
  size_t v5;
  int v6[2];
  int v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v6 = 0x1800000001;
  v7 = 17;
  v8 = a1;
  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  v5 = v2;
  if ((sysctl(v6, 4u, 0, &v5, 0, 0) & 0x80000000) == 0)
    return 0;
  v4 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    kdebug_write_events_cold_1();
  *__error() = v4;
  if (*__error())
    return *__error();
  else
    return 22;
}

void *drain_events_block(uint64_t a1)
{
  void *v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  uint64_t v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3052000000;
  v7 = __Block_byref_object_copy__1;
  v8 = __Block_byref_object_dispose__1;
  v9 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __drain_events_block_block_invoke;
  v3[3] = &unk_1E5F70948;
  v3[4] = &v4;
  v3[5] = a1;
  v1 = _Block_copy(v3);
  v5[5] = (uint64_t)v1;
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t kttimesync_init(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[9];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;

  v33 = 0;
  v34 = &v33;
  v35 = 0x2000000000;
  v36 = 0;
  v29 = 0;
  v30 = &v29;
  v31 = 0x2000000000;
  v32 = 0;
  if (a2)
  {
    ktrace_file_timebase(a2, (_DWORD *)(a1 + 16), (_DWORD *)(a1 + 20));
    v25 = 0;
    v26 = &v25;
    v27 = 0x2000000000;
    v28 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x2000000000;
    v24 = 0;
    v6 = MEMORY[0x1E0C809B0];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = __kttimesync_init_block_invoke;
    v20[3] = &unk_1E5F6FDC0;
    v20[4] = &v25;
    v20[5] = &v21;
    v20[7] = &v33;
    v20[8] = a1;
    v20[6] = &v29;
    v7 = ktrace_file_iterate(a2, 0, (uint64_t)v20);
    if (*((_DWORD *)v26 + 6))
    {
      v8 = 1;
      v9 = *((unsigned int *)v26 + 6);
      goto LABEL_11;
    }
    v9 = v7;
    if (!(_DWORD)v7)
    {
      if (!*((_BYTE *)v22 + 24))
      {
        v19[0] = v6;
        v19[1] = 0x40000000;
        v19[2] = __kttimesync_init_block_invoke_2;
        v19[3] = &__block_descriptor_tmp_4;
        v19[4] = a1;
        ktrace_file_header_iterate(a2, 0, (uint64_t)v19);
        v17 = 0;
        v18 = 0;
        if (ktrace_file_walltime_offset(a2, (_QWORD *)a1, (uint64_t)&v17, (_QWORD *)(a1 + 40)))
        {
          v8 = 1;
        }
        else
        {
          v8 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          v16 = 1000 * (int)v18;
          *(_QWORD *)(a1 + 24) = v17;
          *(_QWORD *)(a1 + 32) = v16;
        }
        v9 = 45;
LABEL_11:
        _Block_object_dispose(&v21, 8);
        _Block_object_dispose(&v25, 8);
        if (v8)
          goto LABEL_22;
        goto LABEL_12;
      }
      v9 = 0;
    }
    v8 = 1;
    goto LABEL_11;
  }
  v25 = 0;
  v21 = 0;
  if (mach_get_times())
  {
    v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      kttimesync_init_cold_3();
LABEL_21:
    *__error() = v10;
    v9 = 22;
    goto LABEL_22;
  }
  v12 = *(_BYTE *)(a1 + 48);
  v13 = v21 - v25;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 48) = v12 | 3;
  if (mach_timebase_info((mach_timebase_info_t)(a1 + 16)))
  {
    v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      kttimesync_init_cold_2();
    goto LABEL_21;
  }
  if (!gettimeofday(0, (void *)(a1 + 40)))
  {
    *(_BYTE *)(a1 + 48) |= 4u;
LABEL_12:
    if (*((_BYTE *)v34 + 24))
      a3 = *((_BYTE *)v30 + 24) != 0;
    v9 = 0;
    if (a3)
      v11 = 8;
    else
      v11 = 0;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xF7 | v11;
    goto LABEL_22;
  }
  v15 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    kttimesync_init_cold_1();
  *__error() = v15;
  v9 = *__error();
LABEL_22:
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  return v9;
}

_QWORD *ktrace_file_header_append_live_cpu_map(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *appended;
  CFIndex v7;
  void *v8;

  v7 = 0;
  v8 = 0;
  v2 = kdebug_alloc_current_cpu_map(&v8, (size_t *)&v7);
  if (v2)
  {
    v3 = v2;
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_file_header_append_live_cpu_map_cold_1();
    appended = 0;
    *__error() = v4;
  }
  else
  {
    appended = ktrace_file_header_append_chunk(a1, 7168, 1, 0, (UInt8 *)v8, v7);
    if (appended)
      v3 = 0;
    else
      v3 = *__error();
  }
  free(v8);
  *__error() = v3;
  return appended;
}

_QWORD *ktrace_file_header_append_chunk(uint64_t a1, int a2, __int16 a3, __int16 a4, UInt8 *a5, CFIndex a6)
{
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *appended;
  int v14;
  int *v15;
  uint64_t v16;

  if ((unint64_t)(a1 + 1) <= 1)
    ktrace_file_header_append_chunk_cold_3();
  if (!*(_BYTE *)(a1 + 299))
  {
    v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_header_append_chunk_cold_1();
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a1 + 200);
  if (v10)
  {
    result = ktrace_file_append_start(v10, 32778, 0, 0);
    if (result)
    {
      v12 = (uint64_t)result;
      result = ktrace_file_append_subchunk(*(_QWORD *)(a1 + 200), (uint64_t)result, 32780, 0, 0, (UInt8 *)(a1 + 216), 4);
      if (result)
      {
        appended = ktrace_file_append_subchunk(*(_QWORD *)(a1 + 200), v12, a2, 0, 0, a5, a6);
        ktrace_file_append_finish(*(_QWORD *)(a1 + 200), v12);
        return appended;
      }
    }
    return result;
  }
  if (*(_QWORD *)(a1 + 152))
  {
    v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_header_append_chunk_cold_2();
LABEL_12:
    *__error() = v14;
    v15 = __error();
    result = 0;
    *v15 = 22;
    return result;
  }
  result = ktrace_file_append_start_internal(a1, a2, a3, a4);
  if (result)
  {
    v16 = (uint64_t)result;
    if (a5 && a6 && ktrace_file_append_data(a1, (uint64_t)result, a5, a6)
      || ktrace_file_append_finish_internal(a1, (_QWORD *)(a1 + 80), v16))
    {
      return 0;
    }
    else if (ktrace_file_update_header_size(a1))
    {
      return 0;
    }
    else
    {
      return (_QWORD *)v16;
    }
  }
  return result;
}

uint64_t ktrace_file_update_header_size(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 16) == 4)
    return 0;
  v3 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 288) = v3;
  v6 = v3 - 16;
  if ((unint64_t)ktrace_file_write(a1, &v6, 8uLL, 8) > 7)
  {
    result = 0;
    v5 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 56) = 16;
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v5;
  }
  else
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_update_header_size_cold_1();
    *__error() = v4;
    return *__error();
  }
  return result;
}

uint64_t ktrace_file_appending_chunk(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t kdebug_alloc_current_cpu_map(_QWORD *a1, size_t *a2)
{
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  void *v8;
  unsigned int v9;
  int v10;
  size_t size;
  int v12[2];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v13 = 25;
  size = 0;
  *(_QWORD *)v12 = 0x1800000001;
  if (sysctl(v12, 3u, 0, &size, 0, 0))
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      kdebug_alloc_current_cpu_map_cold_5();
    *__error() = v4;
    v5 = *__error();
    if (v5)
      return v5;
    else
      return 22;
  }
  else
  {
    v7 = malloc_type_malloc(size, 0xA43368D8uLL);
    if (!v7)
      ktrace_remotetime_update_params_cold_1();
    v8 = v7;
    result = sysctl(v12, 3u, v7, &size, 0, 0);
    if ((_DWORD)result)
    {
      v9 = *__error();
      free(v8);
      v10 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        kdebug_alloc_current_cpu_map_cold_4();
      *__error() = v10;
      if (v9)
        return v9;
      else
        return 22;
    }
    else
    {
      *a1 = v8;
      *a2 = size;
    }
  }
  return result;
}

uint64_t sub_1AF340784(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B838);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF348620();
  sub_1AF3E812C();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B840);
  sub_1AF347900(&qword_1EEE3B848, &qword_1EEE3B840, (uint64_t (*)(void))sub_1AF3483C0, MEMORY[0x1E0DEAF10]);
  sub_1AF3E7FF4();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1AF3408A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B830);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF3481A4();
  sub_1AF3E812C();
  v10 = 0;
  sub_1AF3E7FDC();
  if (!v1)
  {
    v9 = 1;
    sub_1AF3E7FE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1AF3409C4()
{
  sub_1AF340A10();
  return sub_1AF3E7A90();
}

unint64_t sub_1AF340A10()
{
  unint64_t result;

  result = qword_1EEE3BA80;
  if (!qword_1EEE3BA80)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBB18, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_1EEE3BA80);
  }
  return result;
}

uint64_t sub_1AF340A54(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1AF340A80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1AF3E7BEC();
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 40) + 96))(v1);
}

uint64_t sub_1AF340AB4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AF340AE8()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t initializeBufferWithCopyOfBuffer for PlanSettings.KPerfKDebugTrigger(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AF340B64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v3;
  swift_retain();
  result = sub_1AF3E7D9C();
  *a1 = result;
  return result;
}

uint64_t sub_1AF340BE8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1AF340C04(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1AF340C04(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;

  v11[1] = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B860);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF340D2C();
  sub_1AF3E812C();
  v13 = 0;
  sub_1AF3E7FE8();
  if (!v4)
  {
    v12 = 1;
    sub_1AF3E7FC4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1AF340D2C()
{
  unint64_t result;

  result = qword_1EEE3CEB8;
  if (!qword_1EEE3CEB8)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3ECAC8, &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3CEB8);
  }
  return result;
}

uint64_t sub_1AF340D70(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1AF340DA0(a1, *v1, v1[1], &qword_1EEE3B878, (void (*)(_QWORD *))sub_1AF340EC0);
}

uint64_t sub_1AF340DA0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;
  char v16;

  v14[0] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5(v11);
  sub_1AF3E812C();
  v16 = 0;
  v12 = v14[1];
  sub_1AF3E7FE8();
  if (!v12)
  {
    v15 = 1;
    sub_1AF3E7FE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_1AF340EC0()
{
  unint64_t result;

  result = qword_1EEE3CEC8;
  if (!qword_1EEE3CEC8)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3ECA28, &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3CEC8);
  }
  return result;
}

uint64_t sub_1AF340F04()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v7;
  _BYTE v10[321];
  _BYTE v11[321];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = sub_1AF3E74FC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memcpy(v11, v0, sizeof(v11));
  sub_1AF3E752C();
  swift_allocObject();
  sub_1AF3E7520();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0CAE110], v2);
  sub_1AF3E7508();
  memcpy(v10, v11, sizeof(v10));
  sub_1AF3480DC();
  sub_1AF3E7514();
  if (!v1)
    __asm { BR              X10 }
  swift_release();
  return v7 & 1;
}

uint64_t sub_1AF341258(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t (*v7)(_QWORD *, _QWORD);
  char **v8;
  char **v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD v16[4];

  v5 = v2[3];
  sub_1AF3E7DE4();
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "waking due to ");
  HIBYTE(v16[1]) = -18;
  sub_1AF3E7970();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v5 + 224))(v16[0], v16[1]);
  swift_bridgeObjectRelease();
  v6 = *(uint64_t (**)(_QWORD *))(*v2 + 112);
  swift_bridgeObjectRetain();
  v7 = (uint64_t (*)(_QWORD *, _QWORD))v6(v16);
  v9 = v8;
  v10 = *v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_1AF3413B8(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    *v9 = v10;
  }
  v13 = *((_QWORD *)v10 + 2);
  v12 = *((_QWORD *)v10 + 3);
  if (v13 >= v12 >> 1)
  {
    v10 = sub_1AF3413B8((char *)(v12 > 1), v13 + 1, 1, v10);
    *v9 = v10;
  }
  *((_QWORD *)v10 + 2) = v13 + 1;
  v14 = &v10[16 * v13];
  *((_QWORD *)v14 + 4) = a1;
  *((_QWORD *)v14 + 5) = a2;
  return v7(v16, 0);
}

char *sub_1AF3413B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B488);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t (*sub_1AF3414BC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

char *sub_1AF3414F8()
{
  uint64_t v0;
  uint64_t v1;
  char *result;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  result = strsignal(*(_DWORD *)(*(_QWORD *)(v0 + 16) + 16));
  if (result)
  {
    sub_1AF3E797C();
    sub_1AF347C60();
    v3 = sub_1AF3E7C94();
    swift_bridgeObjectRelease();
    sub_1AF3E7DE4();
    if (*(_QWORD *)(v3 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1AF3E7904();
    }
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v1 + 120))(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    return (char *)sub_1AF3E7BF8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AF34165C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B9B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v2 + 16);
  v28 = *(_QWORD *)(v2 + 24);
  v27 = *(_QWORD *)(v2 + 32);
  v26 = *(_QWORD *)(v2 + 40);
  v25 = *(_QWORD *)(v2 + 48);
  v23 = *(_QWORD *)(v2 + 56);
  v24 = *(_QWORD *)(v2 + 64);
  v22 = *(_QWORD *)(v2 + 72);
  v20 = *(_QWORD *)(v2 + 80);
  v21 = *(_QWORD *)(v2 + 88);
  v18 = *(_QWORD *)(v2 + 96);
  v19 = *(_QWORD *)(v2 + 104);
  v17 = *(_QWORD *)(v2 + 288);
  v16 = *(_QWORD *)(v2 + 296);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF348130();
  sub_1AF3E812C();
  LOBYTE(v31) = 0;
  v8 = v30;
  sub_1AF3E7FC4();
  if (!v8)
  {
    LOBYTE(v31) = 1;
    sub_1AF3E7FE8();
    LOBYTE(v31) = 2;
    sub_1AF3E7FA0();
    LOBYTE(v31) = 3;
    sub_1AF3E7FA0();
    LOBYTE(v31) = 4;
    sub_1AF3E7FA0();
    *(_QWORD *)&v31 = v22;
    v42 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
    sub_1AF34523C(&qword_1EEE3B970, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AF3E7FB8();
    LOBYTE(v31) = 6;
    sub_1AF3E7FC4();
    LOBYTE(v31) = 7;
    sub_1AF3E7FC4();
    v9 = *(_OWORD *)(v2 + 256);
    v39 = *(_OWORD *)(v2 + 240);
    v40 = v9;
    v41 = *(_OWORD *)(v2 + 272);
    v10 = *(_OWORD *)(v2 + 192);
    v35 = *(_OWORD *)(v2 + 176);
    v36 = v10;
    v11 = *(_OWORD *)(v2 + 224);
    v37 = *(_OWORD *)(v2 + 208);
    v38 = v11;
    v12 = *(_OWORD *)(v2 + 128);
    v31 = *(_OWORD *)(v2 + 112);
    v13 = *(_OWORD *)(v2 + 144);
    v34 = *(_OWORD *)(v2 + 160);
    v32 = v12;
    v33 = v13;
    v42 = 8;
    sub_1AF3452E0();
    sub_1AF3E7FF4();
    *(_QWORD *)&v31 = v17;
    v42 = 9;
    sub_1AF3E7FF4();
    *(_QWORD *)&v31 = v16;
    v42 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B9C8);
    sub_1AF347BEC(&qword_1EEE3B9D0, (uint64_t (*)(void))sub_1AF347D5C, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1AF3E7FF4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1AF341AD4()
{
  FILE **v0;
  FILE *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1AF3E7910();
  fputs((const char *)(v2 + 32), v1);
  return swift_release();
}

uint64_t sub_1AF341B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v5;
  _BYTE __dst[321];
  _QWORD __src[41];

  v2 = v1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 208))(__src);
  result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if (a1)
  {
    v5 = sub_1AF340F04();
    result = sub_1AF3B6DB0((uint64_t)__src);
    if ((v5 & 1) == 0)
      return (*(uint64_t (**)(unint64_t, unint64_t))(**(_QWORD **)(v2
                                                                                         + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                           + 248))(0xD00000000000001DLL, 0x80000001AF3F2CF0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t destroy for PlanSettings.ProviderEntry()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ProviderList.didStartTracing(file:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  char **v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_signpost_type_t v28;
  os_signpost_id_t v29;
  uint64_t v30;
  os_signpost_id_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[10];

  v46 = a1;
  v45 = sub_1AF3E773C();
  v44 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v43 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1AF3E7754();
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  result = *v5;
  v7 = *(_QWORD *)(*v5 + 16);
  if (v7)
  {
    v42 = v57;
    v38 = swift_bridgeObjectRetain();
    v8 = (uint64_t *)(v38 + 64);
    v9 = &selRef_init;
    *(_QWORD *)&v10 = 136446210;
    v41 = v10;
    v39 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v10 = 136315138;
    v40 = v10;
    do
    {
      v11 = *(v8 - 4);
      v12 = *(v8 - 3);
      v14 = (void *)*(v8 - 2);
      v13 = *(v8 - 1);
      v15 = *v8;
      v57[4] = v11;
      v57[5] = v12;
      v57[6] = (uint64_t)v14;
      v57[7] = v13;
      v57[8] = v15;
      if ((objc_msgSend(v14, v9[9], sel_didStartTracingToFile_, v38, v39) & 1) != 0)
      {
        v55 = v11;
        v50 = v7;
        v16 = qword_1EEE3C480;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 != -1)
          swift_once();
        v17 = sub_1AF3E7778();
        v18 = __swift_project_value_buffer(v17, (uint64_t)qword_1EEE41228);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v49 = v18;
        v19 = sub_1AF3E7760();
        v20 = sub_1AF3E7B5C();
        v21 = os_log_type_enabled(v19, v20);
        v54 = v15;
        if (v21)
        {
          v22 = (uint8_t *)swift_slowAlloc();
          v23 = swift_slowAlloc();
          v57[0] = v23;
          *(_DWORD *)v22 = v41;
          swift_bridgeObjectRetain();
          v56 = sub_1AF346C80(v55, v12, v57);
          sub_1AF3E7C7C();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v19, v20, "calling provider %{public}s's didStartTracing", v22, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v23, -1, -1);
          MEMORY[0x1AF45E3DC](v22, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1EEE3C488 != -1)
          swift_once();
        __swift_project_value_buffer(v53, (uint64_t)qword_1EEE41240);
        (*(void (**)(void))(v52 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v24 = v43;
        sub_1AF3E7730();
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v47 = v13;
        v48 = v26;
        v57[0] = v26;
        *(_DWORD *)v25 = v40;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v25 + 4) = sub_1AF346C80(v55, v12, v57);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v27 = sub_1AF3E7748();
        v28 = sub_1AF3E7BE0();
        v29 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v27, v28, v29, "04: didStartTracing", "%s", (uint8_t *)v25, 0xCu);
        v30 = v46;
        objc_msgSend(v14, sel_didStartTracingToFile_, v46);
        sub_1AF347DB8(v30);
        LOBYTE(v30) = sub_1AF3E7BD4();
        v31 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v27, (os_signpost_type_t)v30, v31, "04: didStartTracing", "%s", (uint8_t *)v25, 0xCu);

        v32 = MEMORY[0x1E0DEE9B8] + 8;
        v33 = v48;
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v33, -1, -1);
        MEMORY[0x1AF45E3DC](v25, -1, -1);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v45);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
        v48 = (uint64_t)v14;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v34 = sub_1AF3E7760();
        v35 = sub_1AF3E7B5C();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc();
          v37 = swift_slowAlloc();
          v57[0] = v37;
          *(_DWORD *)v36 = v41;
          v49 = v32;
          swift_bridgeObjectRetain();
          v56 = sub_1AF346C80(v55, v12, v57);
          sub_1AF3E7C7C();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v34, v35, "finished time-sensitive didStartTracing from provider %{public}s", v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v37, -1, -1);
          MEMORY[0x1AF45E3DC](v36, -1, -1);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease_n();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        v7 = v50;
        v9 = &selRef_init;
      }
      v8 += 5;
      --v7;
    }
    while (v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ProviderOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1AF3423B0(_QWORD *a1)
{
  return sub_1AF3473D0(a1);
}

void sub_1AF342408()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(_QWORD, _QWORD);
  const void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  _DWORD *v38;
  void *v39;
  uint64_t v40;
  int started;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  char v60;
  void (**v61)(_QWORD, _QWORD);
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint32_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint32_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t (*v87)();
  void *v88;
  uint64_t (*v89)(uint64_t);
  _DWORD *v90;
  uint64_t v91;

  v2 = v1;
  v3 = v0;
  v91 = *MEMORY[0x1E0C80C00];
  v4 = sub_1AF3E7778();
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  MEMORY[0x1E0C80A78](v4);
  v80 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
  v79 = type metadata accessor for RecordingOptions.Options(0);
  v7 = *(_QWORD *)&v6[*(int *)(v79 + 28)];
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  v82 = v6;
  if (v8)
  {
    v76 = v1;
    v81 = v0;
    *(_QWORD *)&v84 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1AF3C5B64(0, v8, 0);
    v9 = v84;
    v10 = (char *)(v7 + 48);
    do
    {
      v11 = *((_QWORD *)v10 - 2);
      v12 = *((_QWORD *)v10 - 1);
      v13 = *v10;
      sub_1AF3A0C08(v11, v12, *v10);
      sub_1AF3A04D4(v11, v12, v13, (uint64_t *)&v86);
      sub_1AF3A0C30(v11, v12, v13);
      *(_QWORD *)&v84 = v9;
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1AF3C5B64(v14 > 1, v15 + 1, 1);
        v9 = v84;
      }
      v10 += 24;
      *(_QWORD *)(v9 + 16) = v15 + 1;
      sub_1AF3BFEF0(&v86, v9 + 40 * v15 + 32);
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v3 = v81;
    v6 = v82;
    v2 = v76;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BC98);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AF3EB020;
  v17 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_kernelDisableWaiter);
  *(_QWORD *)(inited + 56) = type metadata accessor for KernelDisableWaiter();
  *(_QWORD *)(inited + 64) = &off_1E5F6E148;
  *(_QWORD *)(inited + 32) = v17;
  *(_QWORD *)&v86 = v9;
  swift_retain();
  sub_1AF3C6948(inited);
  v18 = v86;
  type metadata accessor for WaitGroup();
  v19 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
  v20 = *(id *)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue);
  swift_retain();
  v21 = sub_1AF39FD1C(v18, v20, v19);
  if (!v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 264))(v21);
    v22 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_recording);
    v23 = *(void (***)(_QWORD, _QWORD))(v22 + 40);
    v76 = 0;
    if (v23)
    {
      _Block_copy(v23);
      _Block_copy(v23);
      v86 = xmmword_1AF3ED200;
      LODWORD(v84) = 2;
      *((_QWORD *)&v84 + 1) = &v86;
      ((void (**)(_QWORD, __int128 *))v23)[2](v23, &v84);
      _Block_release(v23);
      v24 = v23;
    }
    else
    {
      v24 = 0;
    }
    _Block_release(v24);
    v25 = v80;
    (*(void (**)(void))(*(_QWORD *)v19 + 176))();
    swift_retain_n();
    v26 = sub_1AF3E7760();
    v27 = sub_1AF3E7B5C();
    v28 = os_log_type_enabled(v26, v27);
    v74 = v22;
    v75 = v19;
    if (v28)
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = v3;
      v31 = swift_slowAlloc();
      *(_QWORD *)&v86 = v31;
      *(_DWORD *)v29 = 136315138;
      v32 = sub_1AF3E767C();
      *(_QWORD *)&v84 = sub_1AF346C80(v32, v33, (uint64_t *)&v86);
      sub_1AF3E7C7C();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AF33A000, v26, v27, "writing in-process file to %s)", v29, 0xCu);
      swift_arrayDestroy();
      v34 = v31;
      v3 = v30;
      v6 = v82;
      MEMORY[0x1AF45E3DC](v34, -1, -1);
      MEMORY[0x1AF45E3DC](v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v78);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v25, v78);
    }
    v81 = *(_DWORD **)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_session);
    sub_1AF3E767C();
    v35 = v79;
    if (v6[*(int *)(v79 + 60)])
      v36 = 4;
    else
      v36 = 0;
    v89 = sub_1AF341B08;
    v90 = v3;
    *(_QWORD *)&v86 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v86 + 1) = 1107296256;
    v87 = sub_1AF347B2C;
    v88 = &block_descriptor_9;
    v37 = v6;
    v38 = v3;
    v39 = _Block_copy(&v86);
    swift_retain();
    swift_release();
    v40 = sub_1AF3E7910();
    swift_bridgeObjectRelease();
    started = ktrace_start_writing_file(v81, (char *)(v40 + 32), v36, v39, 0);
    swift_release();
    _Block_release(v39);
    if (started)
    {
      type metadata accessor for KTraceRecordError();
      sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
      swift_allocError();
      *v43 = started;
LABEL_19:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return;
    }
    v81 = v38;
    v44 = *(_QWORD *)&v37[*(int *)(v35 + 32)];
    v45 = *(_QWORD *)(v44 + 16);
    v46 = MEMORY[0x1E0DEE9D8];
    if (v45)
    {
      *(_QWORD *)&v84 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1AF3C5B64(0, v45, 0);
      v46 = v84;
      v47 = (char *)(v44 + 48);
      do
      {
        v48 = *((_QWORD *)v47 - 2);
        v49 = *((_QWORD *)v47 - 1);
        v50 = *v47;
        sub_1AF3A0C08(v48, v49, *v47);
        sub_1AF3A04D4(v48, v49, v50, (uint64_t *)&v86);
        sub_1AF3A0C30(v48, v49, v50);
        *(_QWORD *)&v84 = v46;
        v52 = *(_QWORD *)(v46 + 16);
        v51 = *(_QWORD *)(v46 + 24);
        if (v52 >= v51 >> 1)
        {
          sub_1AF3C5B64(v51 > 1, v52 + 1, 1);
          v46 = v84;
        }
        v47 += 24;
        *(_QWORD *)(v46 + 16) = v52 + 1;
        sub_1AF3BFEF0(&v86, v46 + 40 * v52 + 32);
        --v45;
      }
      while (v45);
      v42 = swift_bridgeObjectRelease();
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 256))(v42);
    v54 = v79;
    v55 = v76;
    if (v53)
    {
      sub_1AF347CA8(v46);
      if (v55)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v84 = 0;
    *((_QWORD *)&v84 + 1) = 0xE000000000000000;
    sub_1AF3E7DE4();
    v83 = v84;
    v85 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v84 = 0x676E697472617473;
    *((_QWORD *)&v84 + 1) = 0xE800000000000000;
    v56 = (unsigned __int8 *)sub_1AF345EB0();
    sub_1AF3459F8((uint64_t)&v84, *v56);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v84);
    v57 = sub_1AF3E7970();
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v81 + 208))(&v86, v57);
    swift_bridgeObjectRetain();
    sub_1AF3B6DB0((uint64_t)&v86);
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    sub_1AF3E7670();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    v58 = v83;
    v59 = sub_1AF345A10();
    v60 = sub_1AF347DB0();
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v75 + 216))(v58, *((_QWORD *)&v58 + 1), v59 & 1, v60 & 1);
    swift_bridgeObjectRelease();
    v61 = *(void (***)(_QWORD, _QWORD))(v74 + 40);
    if (v61)
    {
      _Block_copy(*(const void **)(v74 + 40));
      _Block_copy(v61);
      v84 = xmmword_1AF3ED200;
      LODWORD(v83) = 3;
      *((_QWORD *)&v83 + 1) = &v84;
      ((void (**)(_QWORD, __int128 *))v61)[2](v61, &v83);
      _Block_release(v61);
      v62 = v61;
    }
    else
    {
      v62 = 0;
    }
    _Block_release(v62);
    v63 = *(_QWORD *)&v82[*(int *)(v54 + 44)];
    v64 = *(_QWORD *)(v63 + 16);
    if (v64)
    {
      v65 = (const char *)(sub_1AF3E7910() + 32);
      swift_bridgeObjectRetain();
      v66 = notify_post(v65);
      swift_release();
      if (v66)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
        swift_allocError();
        *v72 = v66;
        goto LABEL_19;
      }
      v67 = 0;
      v68 = v63 + 56;
      v69 = v64 - 1;
      while (v69 != v67)
      {
        if ((unint64_t)++v67 >= *(_QWORD *)(v63 + 16))
          __break(1u);
        v70 = v68 + 16;
        v71 = sub_1AF3E7910();
        v66 = notify_post((const char *)(v71 + 32));
        swift_release();
        v68 = v70;
        if (v66)
          goto LABEL_40;
      }
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1AF342DC0(_QWORD *a1)
{
  uint64_t v1;

  return sub_1AF342DE0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1AF342DE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  int v13;
  char v14;
  char v15;
  char v16;

  v13 = a5;
  v12[0] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B880);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF342FD4();
  sub_1AF3E812C();
  v16 = 0;
  sub_1AF3E7FC4();
  if (!v5)
  {
    v12[1] = v12[0];
    v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B888);
    sub_1AF342F74(&qword_1EEE3B890, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1AF3E7FF4();
    v14 = 2;
    sub_1AF3E7FD0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1AF342F74(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEE3B888);
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x1AF45E31C](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AF342FD4()
{
  unint64_t result;

  result = qword_1EEE3CED0;
  if (!qword_1EEE3CED0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EC9D8, &type metadata for PlanSettings.ProviderEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3CED0);
  }
  return result;
}

uint64_t initializeWithCopy for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AF34305C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  FILE *v33;
  FILE *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  ValueMetadata *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  ValueMetadata *v59;
  uint64_t v60;
  ValueMetadata *v61;
  ValueMetadata *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v78 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BCA8);
  MEMORY[0x1E0C80A78](v3);
  v77 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RecordingOptions(0);
  v73 = *(_QWORD *)(v5 - 8);
  v74 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v70 - v9;
  v76 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1E0C80A78](v76);
  v75 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = j_nullsub_1(a2);
  *(_QWORD *)&v82 = v12;
  sub_1AF3C796C();
  v13 = &type metadata for NullTerminatedCStringArray;
  v14 = sub_1AF3E7A48();
  v81 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v14 & ~(v14 >> 63), 0);
  v15 = v81;
  v79 = v12;
  sub_1AF3E7A3C();
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  v71 = v8;
  v72 = v10;
  if (!v14)
  {
LABEL_8:
    sub_1AF3BE280();
    sub_1AF3E7C70();
    while (v79)
    {
      v23 = sub_1AF3E797C();
      v25 = v24;
      v81 = v15;
      v27 = *(_QWORD *)(v15 + 16);
      v26 = *(_QWORD *)(v15 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1AF38FDBC((char *)(v26 > 1), v27 + 1, 1);
        v15 = v81;
      }
      *(_QWORD *)(v15 + 16) = v27 + 1;
      v28 = v15 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v23;
      *(_QWORD *)(v28 + 40) = v25;
      sub_1AF3E7C70();
    }
    v29 = *(_QWORD *)(v15 + 16);
    v30 = v29 != 0;
    v31 = v78;
    v32 = v78[4];
    if (v32)
    {
      v33 = (FILE *)nullsub_1(v32);
      v34 = sub_1AF3BAFB0(v33);
    }
    else
    {
      v34 = 0;
    }
    if (v29 > v30)
    {
      v35 = *((_OWORD *)v31 + 1);
      v82 = *(_OWORD *)v31;
      v83 = v35;
      v84 = *((_OWORD *)v31 + 2);
      v85 = v31[6];
      swift_retain_n();
      sub_1AF344918((uint64_t)&v82);
      sub_1AF3E803C();
      swift_retain();
      v36 = swift_dynamicCastClass();
      if (!v36)
      {
        swift_release();
        v36 = MEMORY[0x1E0DEE9D8];
      }
      v37 = *(_QWORD *)(v36 + 16);
      swift_release();
      if (v37 == v29 - v30)
      {
        v38 = swift_dynamicCastClass();
        v39 = (uint64_t)v77;
        if (!v38)
        {
          swift_release();
          v38 = MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_release();
        v38 = sub_1AF3C6E8C(v15, v15 + 32, v29 != 0, (2 * v29) | 1);
        v39 = (uint64_t)v77;
      }
      swift_release();
      sub_1AF3D8884((uint64_t)&v82, v38, v39);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v39, 1, v74) == 1)
      {
        swift_release();
        sub_1AF3C1760(v39, &qword_1EEE3BCA8);
        return 64;
      }
      else
      {
        v50 = (uint64_t)v72;
        sub_1AF3C79B0(v39, (uint64_t)v72, type metadata accessor for RecordingOptions);
        v51 = v71;
        sub_1AF3C79F4(v50, (uint64_t)v71, type metadata accessor for RecordingOptions);
        type metadata accessor for Recording();
        v52 = swift_allocObject();
        sub_1AF3C2344(v78, v51);
        v53 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 312);
        v54 = swift_retain();
        v55 = v53(v54);
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 320))(v55);
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 328))(v56);
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 336))(v57);
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 344))(v58);
        swift_release_n();
        swift_release();
        if ((v69 & 1) != 0)
          v40 = 0;
        else
          v40 = 75;
        sub_1AF3C7498((uint64_t)v72, type metadata accessor for RecordingOptions);
      }
      return v40;
    }
    v41 = *((_OWORD *)v31 + 1);
    v82 = *(_OWORD *)v31;
    v83 = v41;
    v84 = *((_OWORD *)v31 + 2);
    v85 = v31[6];
    v42 = (uint64_t)v75;
    swift_storeEnumTagMultiPayload();
    sub_1AF344918((uint64_t)&v82);
    sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
    v43 = sub_1AF3E8078();
    v45 = v44;
    sub_1AF3C7498(v42, (uint64_t (*)(_QWORD))type metadata accessor for KTraceRecordError);
    sub_1AF3C4A64(8, v43, v45);
    swift_bridgeObjectRelease();
    sub_1AF3448F0((uint64_t)&v82);
    v13 = (ValueMetadata *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    if (v34)
    {
      v80 = (uint64_t)v34;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5D8);
      v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_1AF3EB020;
      swift_getErrorValue();
      v47 = v13;
      v48 = sub_1AF3E8078();
      *(_QWORD *)(v46 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v46 + 32) = v48;
      *(_QWORD *)(v46 + 40) = v49;
      sub_1AF345E6C();
      sub_1AF3E80B4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v59 = v13;
    }
    if (qword_1EEE40180 == -1)
    {
LABEL_28:
      v60 = sub_1AF3E7778();
      __swift_project_value_buffer(v60, (uint64_t)qword_1EEE41280);
      v61 = v13;
      v62 = v13;
      v63 = sub_1AF3E7760();
      v64 = sub_1AF3E7B50();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        v66 = swift_slowAlloc();
        v80 = v66;
        *(_DWORD *)v65 = 136315138;
        swift_getErrorValue();
        v67 = sub_1AF3E8078();
        v79 = sub_1AF346C80(v67, v68, &v80);
        sub_1AF3E7C7C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1AF33A000, v63, v64, "recording failed: %s", v65, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v66, -1, -1);
        MEMORY[0x1AF45E3DC](v65, -1, -1);
        swift_release();
      }
      else
      {
        swift_release();

      }
      return 71;
    }
LABEL_34:
    swift_once();
    goto LABEL_28;
  }
  sub_1AF3BE280();
  while (1)
  {
    sub_1AF3E7C70();
    result = v79;
    if (!v79)
      break;
    v17 = sub_1AF3E797C();
    v19 = v18;
    v81 = v15;
    v21 = *(_QWORD *)(v15 + 16);
    v20 = *(_QWORD *)(v15 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_1AF38FDBC((char *)(v20 > 1), v21 + 1, 1);
      v15 = v81;
    }
    *(_QWORD *)(v15 + 16) = v21 + 1;
    v22 = v15 + 16 * v21;
    *(_QWORD *)(v22 + 32) = v17;
    *(_QWORD *)(v22 + 40) = v19;
    if (!--v14)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AF343A04()
{
  unint64_t v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  void (**v27)(_QWORD, _QWORD);
  const void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  id v48;
  unsigned __int8 v49;
  void *v50;
  void *v51;
  unsigned int v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint32_t v59;
  uint64_t v60;
  uint64_t v61;
  uint32_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  id v66;
  void *v67;
  _DWORD *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, _QWORD);
  char v77;
  void *v78;
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 aBlock;
  uint64_t (*v89)(uint64_t);
  void *v90;
  uint64_t (*v91)();
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  __int128 *p_aBlock;
  uint64_t v101;

  v3 = v0;
  v101 = *MEMORY[0x1E0C80C00];
  v84 = sub_1AF3E7694();
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v82 = (char *)v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1AF3E7820();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1AF3E7838();
  v10 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t)v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_recording);
  LOBYTE(v12) = *(_BYTE *)(v14 + 48);
  v87 = v14;
  if ((v12 & 1) != 0)
  {
    v85 = v10;
    v79[0] = v11;
    v15 = v3;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0;
    v17 = sub_1AF3448B8(0, (unint64_t *)&qword_1EEE3B758);
    v80 = v6;
    v79[1] = *(_QWORD *)(v15 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue);
    v79[2] = v17;
    sub_1AF3E7BA4();
    swift_getObjectType();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v15;
    v91 = sub_1AF3C7614;
    v92 = v18;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    v2 = 1107296256;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v89 = sub_1AF347CA4;
    v90 = &block_descriptor_18;
    v19 = _Block_copy(&aBlock);
    v81 = v16;
    swift_retain();
    v86 = v15;
    swift_retain();
    sub_1AF3E782C();
    sub_1AF344798();
    sub_1AF3E7BB0();
    _Block_release(v19);
    v20 = *(void (**)(char *, uint64_t))(v80 + 8);
    v80 = v5;
    v21 = v5;
    v5 = (uint64_t)v20;
    v20(v8, v21);
    v1 = *(char **)(v79[0] + 8);
    ((void (*)(uint64_t, uint64_t))v1)(v13, v85);
    swift_release();
    sub_1AF3E7BC8();
    v22 = swift_unknownObjectRetain();
    MEMORY[0x1AF45C654](v22);
    if (*(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_64;
    goto LABEL_3;
  }
LABEL_6:
  v27 = *(void (***)(_QWORD, _QWORD))(v14 + 40);
  if (v27)
  {
    _Block_copy(*(const void **)(v14 + 40));
    _Block_copy(v27);
    aBlock = xmmword_1AF3ED200;
    v99 = 4;
    p_aBlock = &aBlock;
    ((void (**)(_QWORD, int *))v27)[2](v27, &v99);
    _Block_release(v27);
    v28 = v27;
  }
  else
  {
    v28 = 0;
  }
  _Block_release(v28);
  ktrace_end(*(_QWORD *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_session), 0);
  sub_1AF3E7BEC();
  v29 = v93;
  if (v93 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1AF3E7EEC();
    swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_11;
  }
  else
  {
    v13 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
LABEL_11:
      if (v13 < 1)
        goto LABEL_63;
      v30 = 0;
      do
      {
        if ((v29 & 0xC000000000000001) != 0)
          MEMORY[0x1AF45C9A8](v30, v29);
        else
          swift_unknownObjectRetain();
        ++v30;
        swift_getObjectType();
        sub_1AF3E7BBC();
        swift_unknownObjectRelease();
      }
      while (v13 != v30);
    }
  }
  v31 = swift_bridgeObjectRelease();
  v32 = 0;
  v33 = 0xD000000000000015;
  v34 = 0x80000001AF3F2CD0;
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 232))(v31))
  {
    case 0u:
      goto LABEL_29;
    case 1u:
      v32 = 0;
      v34 = 0xEE00646572727563;
      v33 = 0x636F20726F727265;
      goto LABEL_29;
    case 3u:
      v36 = 0x20746120656C6966;
      v37 = 0xE800000000000000;
      goto LABEL_26;
    case 4u:
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      sub_1AF3E7DE4();
      swift_bridgeObjectRelease();
      v36 = 0xD00000000000001ELL;
      v38 = "kdebug event matched, file at ";
      goto LABEL_25;
    case 5u:
      v32 = 0;
      v34 = 0xEE00646570706F72;
      v33 = 0x642073746E657665;
      goto LABEL_29;
    case 6u:
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      sub_1AF3E7DE4();
      swift_bridgeObjectRelease();
      v36 = 0xD000000000000024;
      v38 = "kdebug event quota reached, file at ";
LABEL_25:
      v37 = (unint64_t)(v38 - 32) | 0x8000000000000000;
LABEL_26:
      *(_QWORD *)&aBlock = v36;
      *((_QWORD *)&aBlock + 1) = v37;
      sub_1AF3E767C();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      v34 = *((_QWORD *)&aBlock + 1);
      v33 = aBlock;
      v32 = 1;
      goto LABEL_29;
    case 7u:
      v32 = 0;
      v33 = 0xD000000000000011;
      v35 = "trace was aborted";
      goto LABEL_28;
    default:
      v32 = 0;
      v33 = 0xD000000000000012;
      v35 = "unexpectedly ended";
LABEL_28:
      v34 = (unint64_t)(v35 - 32) | 0x8000000000000000;
LABEL_29:
      v39 = v3 + OBJC_IVAR____TtC6ktrace9Recording_options;
      v40 = type metadata accessor for RecordingOptions.Options(0);
      if (*(_BYTE *)(v39 + *(int *)(v40 + 56)) != 1)
        goto LABEL_33;
      v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
      v42 = sub_1AF345A10();
      v43 = sub_1AF347DB0();
      (*(void (**)(unint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 216))(0xD000000000000010, 0x80000001AF3F2A70, v42 & 1, v43 & 1);
      sub_1AF3E7670();
      v44 = (char *)sub_1AF3E7910();
      swift_bridgeObjectRelease();
      v45 = ktrace_file_open(v44 + 32, 1);
      swift_release();
      if (!v45)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
        swift_allocError();
        v64 = v63;
        *v63 = sub_1AF3E7670();
        v64[1] = v65;
        goto LABEL_50;
      }
      v46 = ktrace_file_compress(v45, 2u);
      if (!v46)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
        swift_allocError();
        *v68 = MEMORY[0x1AF45C330]();
        goto LABEL_50;
      }
      ktrace_file_close(v46);
LABEL_33:
      v85 = v39;
      LODWORD(v81) = v32;
      v86 = v33;
      v47 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 232))();
      v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3620]), sel_init);
      v44 = (char *)sub_1AF3E7628();
      if (v47 == 7)
      {
        *(_QWORD *)&aBlock = 0;
        v49 = objc_msgSend(v48, sel_removeItemAtURL_error_, v44, &aBlock);

        v50 = (void *)aBlock;
        v8 = (char *)v34;
        if ((v49 & 1) == 0)
          goto LABEL_47;
      }
      else
      {
        v51 = (void *)sub_1AF3E7628();
        *(_QWORD *)&aBlock = 0;
        v52 = objc_msgSend(v48, sel_moveItemAtURL_toURL_error_, v44, v51, &aBlock);

        v50 = (void *)aBlock;
        if (!v52)
        {
LABEL_47:
          v66 = (id)aBlock;
          swift_bridgeObjectRelease();
          sub_1AF3E75EC();

LABEL_51:
          swift_willThrow();
          return v44 & 1;
        }
        v8 = (char *)v34;
      }
      v53 = v50;
      v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3620]), sel_init);
      v44 = v82;
      sub_1AF3E7658();
      v55 = (void *)sub_1AF3E7628();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v44, v84);
      *(_QWORD *)&aBlock = 0;
      LODWORD(v44) = objc_msgSend(v54, (SEL)0x1E5F75E48, v55, &aBlock);

      v56 = (id)aBlock;
      if (!(_DWORD)v44)
      {
        v67 = v56;
        swift_bridgeObjectRelease();
        sub_1AF3E75EC();

        goto LABEL_51;
      }
      v57 = *(_QWORD *)(v85 + *(int *)(v40 + 48));
      v58 = *(_QWORD *)(v57 + 16);
      v5 = v86;
      if (v58)
      {
        v13 = sub_1AF3E7910();
        swift_bridgeObjectRetain();
        v59 = notify_post((const char *)(v13 + 32));
        swift_release();
        if (!v59)
        {
          v44 = 0;
          v60 = v57 + 56;
          v1 = (char *)(v58 - 1);
          while (v1 != v44)
          {
            if ((unint64_t)++v44 >= *(_QWORD *)(v57 + 16))
            {
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              sub_1AF3E7AD8();
LABEL_3:
              sub_1AF3E7AF0();
              sub_1AF3E7ACC();
              swift_unknownObjectRelease();
              sub_1AF3E7BA4();
              swift_getObjectType();
              v23 = swift_allocObject();
              v24 = v86;
              *(_QWORD *)(v23 + 16) = v81;
              *(_QWORD *)(v23 + 24) = v24;
              v91 = sub_1AF3C7C84;
              v92 = v23;
              *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
              *((_QWORD *)&aBlock + 1) = v2;
              v89 = sub_1AF347CA4;
              v90 = &block_descriptor_25;
              v25 = _Block_copy(&aBlock);
              swift_retain();
              swift_retain();
              sub_1AF3E782C();
              sub_1AF344798();
              sub_1AF3E7BB0();
              _Block_release(v25);
              ((void (*)(char *, uint64_t))v5)(v8, v80);
              ((void (*)(uint64_t, uint64_t))v1)(v13, v85);
              swift_release();
              sub_1AF3E7BC8();
              v26 = swift_unknownObjectRetain();
              MEMORY[0x1AF45C654](v26);
              if (*(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                sub_1AF3E7AD8();
              sub_1AF3E7AF0();
              sub_1AF3E7ACC();
              swift_release();
              swift_unknownObjectRelease();
              v3 = v86;
              v14 = v87;
              goto LABEL_6;
            }
            v61 = v60 + 16;
            v13 = sub_1AF3E7910();
            v59 = notify_post((const char *)(v13 + 32));
            swift_release();
            v60 = v61;
            if (v59)
              goto LABEL_45;
          }
          v56 = (id)swift_bridgeObjectRelease();
          goto LABEL_54;
        }
LABEL_45:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
        swift_allocError();
        *v62 = v59;
LABEL_50:
        swift_storeEnumTagMultiPayload();
        goto LABEL_51;
      }
LABEL_54:
      if (!(_DWORD)v81)
      {
LABEL_57:
        LOBYTE(v44) = 0;
        v71 = *(_QWORD *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
        goto LABEL_58;
      }
      (*(void (**)(__int128 *__return_ptr, id))(*(_QWORD *)v3 + 280))(&v94, v56);
      v70 = v96;
      v98 = v94;
      sub_1AF398950((uint64_t)&v98);
      v97 = v95;
      sub_1AF398950((uint64_t)&v97);
      if (v70 >= 1)
      {
        swift_bridgeObjectRelease();
        v8 = (char *)0xEB0000000074736FLL;
        v5 = 0x6C2073746E657665;
        goto LABEL_57;
      }
      v71 = *(_QWORD *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
      LOBYTE(v44) = 1;
LABEL_58:
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      sub_1AF3E7970();
      swift_bridgeObjectRetain();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      v73 = *((_QWORD *)&aBlock + 1);
      v72 = aBlock;
      v74 = sub_1AF345A10();
      v75 = sub_1AF347DB0();
      v76 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v71 + 216);
      v76(v72, v73, v74 & 1, v75 & 1);
      swift_bridgeObjectRelease();
      LOBYTE(v72) = sub_1AF345A10();
      v77 = sub_1AF347DB0();
      v76(0xD000000000000042, 0x80000001AF3F2A20, v72 & 1, v77 & 1);
      v78 = *(void **)(v87 + 40);
      if (v78)
      {
        _Block_copy(*(const void **)(v87 + 40));
        _Block_copy(v78);
        sub_1AF3C4EC4(v5, (uint64_t)v8, 6, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v78);
        swift_bridgeObjectRelease();
        _Block_release(v78);
      }
      else
      {
        swift_bridgeObjectRelease();
        _Block_release(0);
      }
      return v44 & 1;
  }
}

uint64_t sub_1AF344798()
{
  sub_1AF3E7820();
  sub_1AF344878(&qword_1EEE3B6D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6D8);
  sub_1AF34482C();
  return sub_1AF3E7D78();
}

unint64_t sub_1AF34482C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEE3B6E0;
  if (!qword_1EEE3B6E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEE3B6D8);
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEE3B6E0);
  }
  return result;
}

uint64_t sub_1AF344878(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1AF45E31C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AF3448B8(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1AF3448F0(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 40));
  return a1;
}

uint64_t sub_1AF344918(uint64_t a1)
{
  _Block_copy(*(const void **)(a1 + 40));
  return a1;
}

void sub_1AF344940(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  v4 = *(void **)(v3 + 40);
  if (v4)
  {
    _Block_copy(v4);
    sub_1AF3C4EC4(a2, a3, a1, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v4);
  }
}

uint64_t sub_1AF34499C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  v38 = *(_QWORD *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  v36 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = swift_checkMetadataState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v37 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v34 - v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v34 - v16;
  v18 = swift_projectBox();
  swift_beginAccess();
  v39 = v8;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v42(v17, v18, v7);
  v19 = sub_1AF3E7D48();
  v41 = v18;
  if ((v19 & 1) != 0)
  {
    if (sub_1AF3E7D3C() < 64)
    {
      v20 = sub_1AF3E7D30();
      v21 = *(void (**)(char *, uint64_t))(v39 + 8);
      v21(v17, v7);
      v22 = v43;
      goto LABEL_13;
    }
    v45 = 0;
    sub_1AF344F88();
    v25 = v40;
    sub_1AF3E7CF4();
    v29 = sub_1AF3E78B0();
    v21 = *(void (**)(char *, uint64_t))(v39 + 8);
    v21(v25, v7);
    v21(v17, v7);
    v22 = v43;
    if ((v29 & 1) == 0)
      goto LABEL_18;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v22, 1, 1, a1);
  }
  v34 = v13;
  v35 = a1;
  v23 = sub_1AF3E7D48();
  v24 = sub_1AF3E7D3C();
  if ((v23 & 1) == 0)
  {
    if (v24 < 64)
    {
      v20 = sub_1AF3E7D30();
      v21 = *(void (**)(char *, uint64_t))(v39 + 8);
      v21(v17, v7);
      a1 = v35;
      v22 = v43;
      v18 = v41;
LABEL_13:
      v25 = v40;
      if (!v20)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v22, 1, 1, a1);
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v24 > 64)
  {
LABEL_15:
    v45 = 0;
    sub_1AF344F88();
    v25 = v40;
    sub_1AF3E7CF4();
    v30 = sub_1AF3E78B0();
    v21 = *(void (**)(char *, uint64_t))(v39 + 8);
    v21(v25, v7);
    v21(v17, v7);
    a1 = v35;
    v22 = v43;
    v18 = v41;
    if ((v30 & 1) == 0)
      goto LABEL_18;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v22, 1, 1, a1);
  }
  swift_getAssociatedConformanceWitness();
  sub_1AF3E8048();
  v25 = v40;
  sub_1AF3E8024();
  v26 = sub_1AF3E78A4();
  v21 = *(void (**)(char *, uint64_t))(v39 + 8);
  v21(v25, v7);
  v27 = v34;
  v42(v34, (uint64_t)v17, v7);
  a1 = v35;
  v18 = v41;
  if ((v26 & 1) == 0)
  {
    v21(v27, v7);
    v21(v17, v7);
    goto LABEL_18;
  }
  v28 = sub_1AF3E7D30();
  v21(v27, v7);
  v21(v17, v7);
  v22 = v43;
  if (!v28)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v22, 1, 1, a1);
LABEL_18:
  swift_beginAccess();
  v42(v25, v18, v7);
  v32 = sub_1AF3E7D0C();
  v21(v25, v7);
  v44 = 1;
  sub_1AF344F88();
  v33 = v37;
  sub_1AF3E7D54();
  v44 = v32;
  sub_1AF3E7D24();
  v21(v33, v7);
  sub_1AF3E7D00();
  swift_beginAccess();
  sub_1AF3E7D18();
  swift_endAccess();
  v21(v33, v7);
  v42(v33, (uint64_t)v25, v7);
  sub_1AF3E7A84();
  return ((uint64_t (*)(char *, uint64_t))v21)(v25, v7);
}

unint64_t sub_1AF344F88()
{
  unint64_t result;

  result = qword_1EEE3BC20;
  if (!qword_1EEE3BC20)
  {
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EEE3BC20);
  }
  return result;
}

unsigned __int8 *sub_1AF344FCC@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AF344FDC(_QWORD *a1)
{
  return sub_1AF34503C(a1);
}

uint64_t sub_1AF34503C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[11];
  char v17;
  _BYTE v18[8];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B960);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF34529C();
  sub_1AF3E812C();
  sub_1AF3478BC(v3, (uint64_t)v18, &qword_1EEE3B968);
  sub_1AF3478BC((uint64_t)v18, (uint64_t)v16, &qword_1EEE3B968);
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
  sub_1AF34523C(&qword_1EEE3B970, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  sub_1AF3E7FB8();
  if (!v2)
  {
    LOBYTE(v16[0]) = 1;
    sub_1AF3E7FC4();
    v9 = *(_OWORD *)(v3 + 136);
    v10 = *(_OWORD *)(v3 + 168);
    v16[8] = *(_OWORD *)(v3 + 152);
    v16[9] = v10;
    v16[10] = *(_OWORD *)(v3 + 184);
    v11 = *(_OWORD *)(v3 + 72);
    v12 = *(_OWORD *)(v3 + 104);
    v16[4] = *(_OWORD *)(v3 + 88);
    v16[5] = v12;
    v16[6] = *(_OWORD *)(v3 + 120);
    v16[7] = v9;
    v13 = *(_OWORD *)(v3 + 40);
    v16[0] = *(_OWORD *)(v3 + 24);
    v14 = *(_OWORD *)(v3 + 56);
    v16[3] = v11;
    v16[1] = v13;
    v16[2] = v14;
    v17 = 2;
    sub_1AF3452E0();
    sub_1AF3E7FF4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1AF34523C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEE3B470);
    v8 = a2;
    result = MEMORY[0x1AF45E31C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AF34529C()
{
  unint64_t result;

  result = qword_1EEE3CED8[0];
  if (!qword_1EEE3CED8[0])
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EC988, &type metadata for PlanLayer.CodingKeys);
    atomic_store(result, qword_1EEE3CED8);
  }
  return result;
}

unint64_t sub_1AF3452E0()
{
  unint64_t result;

  result = qword_1EEE3B978;
  if (!qword_1EEE3B978)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EC068, &type metadata for PlanSettings);
    atomic_store(result, (unint64_t *)&qword_1EEE3B978);
  }
  return result;
}

uint64_t sub_1AF345324(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = sub_1AF3E7778();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v7);
  swift_bridgeObjectRetain_n();
  v10 = sub_1AF3E7760();
  v11 = sub_1AF3E7B5C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v18 = v5;
    v13 = a1;
    v14 = (uint8_t *)v12;
    v15 = swift_slowAlloc();
    v20 = v15;
    *(_DWORD *)v14 = 136446210;
    swift_bridgeObjectRetain();
    v19 = sub_1AF346C80(v13, a2, &v20);
    sub_1AF3E7C7C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1AF33A000, v10, v11, "%{public}s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF45E3DC](v15, -1, -1);
    MEMORY[0x1AF45E3DC](v14, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1AF3454F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, unint64_t, _QWORD, uint64_t);
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD v11[4];
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  if (result)
  {
    v3 = sub_1AF340A80();
    result = swift_release();
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v14 = v1;
        v5 = *(void (**)(uint64_t, unint64_t, _QWORD, uint64_t))(**(_QWORD **)(v0
                                                                                             + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                               + 216);
        v6 = v3 + 40;
        do
        {
          v12 = 0;
          v13 = 0xE000000000000000;
          v11[3] = MEMORY[0x1E0DEA968];
          v11[0] = 0x676E69646E65;
          v11[1] = 0xE600000000000000;
          swift_bridgeObjectRetain();
          v7 = (unsigned __int8 *)sub_1AF345EB0();
          sub_1AF3459F8((uint64_t)v11, *v7);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
          sub_1AF3E7970();
          sub_1AF3E7970();
          swift_bridgeObjectRelease();
          v8 = v12;
          v9 = v13;
          v10 = sub_1AF345A10();
          v5(v8, v9, v10 & 1, 1);
          swift_bridgeObjectRelease();
          v6 += 16;
          --v4;
        }
        while (v4);
        return swift_bridgeObjectRelease();
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AF34565C(char a1, __int16 a2)
{
  unint64_t v3;
  unint64_t v4;
  __int16 v6;
  char v7;

  if (a1 == 8)
  {
    if ((a2 & 0x100) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    v7 = 91;
    sub_1AF3E8018();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    if ((a2 & 0x100) != 0)
      goto LABEL_3;
  }
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  v3 = sub_1AF3459B4();
  v4 = sub_1AF345964();
  sub_1AF345898((uint64_t)&type metadata for ANSIAttributes, v3, v4);
  sub_1AF3E7E74();
  swift_release();
  swift_retain();
  sub_1AF3E7F28();
  if ((v7 & 1) == 0)
  {
    do
    {
      v6 = sub_1AF3E8018();
      sub_1AF3E7970();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      sub_1AF3E7F28();
    }
    while (HIBYTE(v6) != 1);
  }
  swift_release_n();
LABEL_8:
  sub_1AF3E7E80();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  return sub_1AF3E7970();
}

uint64_t sub_1AF345898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  swift_getAssociatedTypeWitness();
  v6 = swift_allocBox();
  sub_1AF3E7A78();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = v6;
  v8 = sub_1AF3E7D90();
  MEMORY[0x1AF45E31C](MEMORY[0x1E0DEC1E8], v8);
  return sub_1AF3E7DA8();
}

unint64_t sub_1AF345964()
{
  unint64_t result;

  result = qword_1EEE3B640;
  if (!qword_1EEE3B640)
  {
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEDEB0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EEE3B640);
  }
  return result;
}

void sub_1AF3459A8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unint64_t sub_1AF3459B4()
{
  unint64_t result;

  result = qword_1EEE3B638;
  if (!qword_1EEE3B638)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB3D0, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_1EEE3B638);
  }
  return result;
}

uint64_t sub_1AF3459F8(uint64_t a1, unsigned __int8 a2)
{
  return sub_1AF34565C(8, a2);
}

uint64_t sub_1AF345A10()
{
  return 1;
}

uint64_t sub_1AF345A18(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v7 = sub_1AF3E7778();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5D8);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1AF3EB020;
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF345D44();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  v12 = v22;
  v13 = v23;
  *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v13;
  swift_beginAccess();
  sub_1AF345E6C();
  sub_1AF3E80B4();
  swift_endAccess();
  result = swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(result);
    swift_bridgeObjectRetain_n();
    v15 = sub_1AF3E7760();
    v16 = sub_1AF3E7B5C();
    if (os_log_type_enabled(v15, v16))
    {
      v20 = v7;
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v22 = v18;
      *(_DWORD *)v17 = 136446210;
      swift_bridgeObjectRetain();
      v21 = sub_1AF346C80(a1, a2, &v22);
      sub_1AF3E7C7C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1AF33A000, v15, v16, "%{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF45E3DC](v18, -1, -1);
      MEMORY[0x1AF45E3DC](v17, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v20);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return result;
}

uint64_t sub_1AF345CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  swift_beginAccess();
  v4 = sub_1AF3E7778();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id sub_1AF345D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  id result;
  void *v9;
  _QWORD v10[2];

  v1 = v0;
  v2 = sub_1AF3E76E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AF3E76DC();
  sub_1AF3E76D0();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10[0] = 43;
  v10[1] = 0xE100000000000000;
  result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC6ktrace8Reporter_updateFormatter), sel_stringFromTimeInterval_, v7);
  if (result)
  {
    v9 = result;
    sub_1AF3E78C8();

    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    sub_1AF3E7970();
    return (id)v10[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1AF345E6C()
{
  unint64_t result;

  result = qword_1EEE3B5E0;
  if (!qword_1EEE3B5E0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3ECD3C, &type metadata for StandardFile);
    atomic_store(result, (unint64_t *)&qword_1EEE3B5E0);
  }
  return result;
}

void *sub_1AF345EB0()
{
  return &unk_1AF3EB32C;
}

uint64_t ProviderList.willEndTracing(file:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_signpost_type_t v38;
  os_signpost_id_t v39;
  os_signpost_type_t v40;
  os_signpost_id_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_signpost_type_t v49;
  os_signpost_id_t v50;
  uint64_t v51;
  os_signpost_id_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79[9];

  v67 = a1;
  v66 = sub_1AF3E773C();
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78]();
  v64 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1AF3E7754();
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  MEMORY[0x1E0C80A78]();
  v72 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  result = *v5;
  v7 = *(_QWORD *)(*v5 + 16);
  if (v7)
  {
    v62 = v79;
    v59 = swift_bridgeObjectRetain();
    v8 = (uint64_t *)(v59 + 64);
    *(_QWORD *)&v9 = 136446210;
    v61 = v9;
    v60 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v9 = 136315138;
    v63 = v9;
    while (1)
    {
      v14 = *(v8 - 4);
      v13 = *(v8 - 3);
      v15 = (void *)*(v8 - 2);
      v16 = *(v8 - 1);
      v17 = *v8;
      v79[4] = v14;
      v79[5] = v13;
      v79[6] = (uint64_t)v15;
      v79[7] = v16;
      v79[8] = v17;
      if ((objc_msgSend(v15, sel_respondsToSelector_, sel_willEndTracing, v59, v60) & 1) != 0)
      {
        v18 = qword_1EEE3C480;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 != -1)
          swift_once();
        v19 = sub_1AF3E7778();
        v20 = __swift_project_value_buffer(v19, (uint64_t)qword_1EEE41228);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v21 = sub_1AF3E7760();
        v22 = sub_1AF3E7B5C();
        v23 = os_log_type_enabled(v21, v22);
        v70 = v8;
        v71 = v7;
        v75 = v14;
        v76 = v17;
        v69 = v20;
        if (v23)
        {
          v24 = (uint8_t *)swift_slowAlloc();
          v25 = swift_slowAlloc();
          v79[0] = v25;
          *(_DWORD *)v24 = v61;
          swift_bridgeObjectRetain();
          v78 = sub_1AF346C80(v14, v13, v79);
          sub_1AF3E7C7C();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v21, v22, "calling provider %{public}s's willEndTracing", v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v25, -1, -1);
          MEMORY[0x1AF45E3DC](v24, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1EEE3C488 != -1)
          swift_once();
        __swift_project_value_buffer(v74, (uint64_t)qword_1EEE41240);
        (*(void (**)(void))(v73 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v77 = v15;
        v35 = v64;
        sub_1AF3E7730();
        v36 = swift_slowAlloc();
        v68 = swift_slowAlloc();
        v79[0] = v68;
        *(_DWORD *)v36 = v63;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v36 + 4) = sub_1AF346C80(v75, v13, v79);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v37 = sub_1AF3E7748();
        v38 = sub_1AF3E7BE0();
        v39 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v37, v38, v39, "05: willEndTracing", "%s", (uint8_t *)v36, 0xCu);
        objc_msgSend(v77, sel_willEndTracing);
        sub_1AF347DB8(v67);
        v40 = sub_1AF3E7BD4();
        v41 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v37, v40, v41, "05: willEndTracing", "%s", (uint8_t *)v36, 0xCu);

        v42 = MEMORY[0x1E0DEE9B8] + 8;
        v43 = v68;
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v43, -1, -1);
        MEMORY[0x1AF45E3DC](v36, -1, -1);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v66);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v44 = sub_1AF3E7760();
        v45 = sub_1AF3E7B5C();
        if (!os_log_type_enabled(v44, v45))
          goto LABEL_28;
        v10 = swift_slowAlloc();
        v69 = v42;
        v11 = (uint8_t *)v10;
        v12 = swift_slowAlloc();
        v79[0] = v12;
        *(_DWORD *)v11 = v61;
        swift_bridgeObjectRetain();
        v78 = sub_1AF346C80(v75, v13, v79);
        sub_1AF3E7C7C();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v44, v45, "finished time-sensitive willEndTracing from provider %{public}s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v12, -1, -1);
        MEMORY[0x1AF45E3DC](v11, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease_n();
      }
      else
      {
        objc_opt_self();
        v26 = swift_dynamicCastObjCClass();
        if (!v26)
          goto LABEL_5;
        v27 = (void *)v26;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (!supportsDeprecatedWillEndTracingToFile(v27))
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        if (qword_1EEE3C480 != -1)
          swift_once();
        v28 = sub_1AF3E7778();
        v29 = __swift_project_value_buffer(v28, (uint64_t)qword_1EEE41228);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v69 = v29;
        v30 = sub_1AF3E7760();
        v31 = sub_1AF3E7B5C();
        v32 = os_log_type_enabled(v30, v31);
        v70 = v8;
        v71 = v7;
        v75 = v14;
        v76 = v17;
        if (v32)
        {
          v33 = (uint8_t *)swift_slowAlloc();
          v34 = swift_slowAlloc();
          v79[0] = v34;
          *(_DWORD *)v33 = v61;
          swift_bridgeObjectRetain();
          v78 = sub_1AF346C80(v14, v13, v79);
          sub_1AF3E7C7C();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v30, v31, "calling provider %{public}s's legacy willEndTracing:", v33, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v34, -1, -1);
          MEMORY[0x1AF45E3DC](v33, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1EEE3C488 != -1)
          swift_once();
        __swift_project_value_buffer(v74, (uint64_t)qword_1EEE41240);
        (*(void (**)(void))(v73 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v77 = v15;
        v46 = v64;
        sub_1AF3E7730();
        v47 = swift_slowAlloc();
        v68 = swift_slowAlloc();
        v79[0] = v68;
        *(_DWORD *)v47 = v63;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v47 + 4) = sub_1AF346C80(v75, v13, v79);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v48 = sub_1AF3E7748();
        v49 = sub_1AF3E7BE0();
        v50 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v48, v49, v50, "05: willEndTracing", "%s", (uint8_t *)v47, 0xCu);
        v51 = v67;
        deprecatedWillEndTracingToFile(v77, v67);
        sub_1AF347DB8(v51);
        LOBYTE(v51) = sub_1AF3E7BD4();
        v52 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v48, (os_signpost_type_t)v51, v52, "05: willEndTracing", "%s", (uint8_t *)v47, 0xCu);

        v53 = MEMORY[0x1E0DEE9B8] + 8;
        v54 = v68;
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v54, -1, -1);
        MEMORY[0x1AF45E3DC](v47, -1, -1);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v66);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v44 = sub_1AF3E7760();
        v55 = sub_1AF3E7B5C();
        if (!os_log_type_enabled(v44, v55))
        {
LABEL_28:

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          goto LABEL_4;
        }
        v56 = (uint8_t *)swift_slowAlloc();
        v57 = swift_slowAlloc();
        v69 = v53;
        v58 = v57;
        v79[0] = v57;
        *(_DWORD *)v56 = v61;
        swift_bridgeObjectRetain();
        v78 = sub_1AF346C80(v75, v13, v79);
        sub_1AF3E7C7C();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v44, v55, "finished time-sensitive willEndTracing from provider %{public}s", v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v58, -1, -1);
        MEMORY[0x1AF45E3DC](v56, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();

      }
LABEL_4:
      v8 = v70;
      v7 = v71;
LABEL_5:
      v8 += 5;
      if (!--v7)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1AF346C80(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1AF346D8C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1AF346D50((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1AF346D50((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1AF346D50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1AF346D8C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1AF3E7C88();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1AF346F44(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1AF3E7E38();
  if (!v8)
  {
    sub_1AF3E7ED4();
    __break(1u);
LABEL_17:
    result = sub_1AF3E7F1C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1AF346F44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1AF346FD8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1AF396724(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1AF396724(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1AF346FD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1AF34714C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1AF3E7DF0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1AF3E7ED4();
      __break(1u);
LABEL_10:
      v2 = sub_1AF3E7994();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1AF3E7F1C();
    __break(1u);
LABEL_14:
    result = sub_1AF3E7ED4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1AF34714C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B600);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t destroy for PlanLayer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1AF33C310(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192));
}

uint64_t sub_1AF347210@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE __dst[328];

  v3 = (const void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_plan);
  swift_beginAccess();
  memcpy(__dst, v3, 0x141uLL);
  memcpy(a1, v3, 0x141uLL);
  return sub_1AF3B6C90((uint64_t)__dst);
}

uint64_t initializeWithCopy for PlanLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AF34738C(v7, v8);
  *(_QWORD *)(a1 + 184) = v7;
  *(_QWORD *)(a1 + 192) = v8;
  return a1;
}

uint64_t sub_1AF34738C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1AF3473D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  _BYTE v12[24];
  _BYTE v13[8];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[8];
  _BYTE v17[16];
  _BYTE v18[8];
  _BYTE v19[8];
  _BYTE v20[24];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B8D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF347A30();
  sub_1AF3E812C();
  sub_1AF3478BC(v3, (uint64_t)v20, &qword_1EEE3B898);
  sub_1AF3478BC((uint64_t)v20, (uint64_t)v12, &qword_1EEE3B898);
  v11 = 0;
  sub_1AF347964();
  sub_1AF3E7FB8();
  if (!v2)
  {
    v12[0] = 1;
    sub_1AF3E7FA0();
    v12[0] = 2;
    sub_1AF3E7FA0();
    v12[0] = 3;
    sub_1AF3E7FAC();
    sub_1AF3478BC(v3 + 64, (uint64_t)v19, &qword_1EEE3B8B8);
    sub_1AF3478BC((uint64_t)v19, (uint64_t)v12, &qword_1EEE3B8B8);
    v11 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B8F0);
    sub_1AF347900(&qword_1EEE3B8F8, &qword_1EEE3B8F0, (uint64_t (*)(void))sub_1AF3484D8, MEMORY[0x1E0DEAF10]);
    sub_1AF3E7FB8();
    sub_1AF3478BC(v3 + 72, (uint64_t)v18, &qword_1EEE3B8C0);
    sub_1AF3478BC((uint64_t)v18, (uint64_t)v12, &qword_1EEE3B8C0);
    v11 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B908);
    sub_1AF347900(&qword_1EEE3B910, &qword_1EEE3B908, (uint64_t (*)(void))sub_1AF348694, MEMORY[0x1E0DEAF10]);
    sub_1AF3E7FB8();
    sub_1AF3478BC(v3 + 80, (uint64_t)v17, &qword_1EEE3B8A8);
    sub_1AF3478BC((uint64_t)v17, (uint64_t)v12, &qword_1EEE3B8A8);
    v11 = 6;
    sub_1AF3479A8();
    sub_1AF3E7FB8();
    sub_1AF3478BC(v3 + 96, (uint64_t)v16, &qword_1EEE3B8A0);
    sub_1AF3478BC((uint64_t)v16, (uint64_t)v12, &qword_1EEE3B8A0);
    v11 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B928);
    sub_1AF347900(&qword_1EEE3B930, &qword_1EEE3B928, (uint64_t (*)(void))sub_1AF348308, MEMORY[0x1E0DEAF10]);
    sub_1AF3E7FB8();
    sub_1AF3478BC(v3 + 104, (uint64_t)v15, &qword_1EEE3B8B0);
    sub_1AF3478BC((uint64_t)v15, (uint64_t)v12, &qword_1EEE3B8B0);
    v11 = 8;
    sub_1AF3479EC();
    sub_1AF3E7FB8();
    sub_1AF3478BC(v3 + 128, (uint64_t)v14, &qword_1EEE3B8B0);
    sub_1AF3478BC((uint64_t)v14, (uint64_t)v12, &qword_1EEE3B8B0);
    v11 = 9;
    sub_1AF3E7FB8();
    sub_1AF3478BC(v3 + 152, (uint64_t)v13, &qword_1EEE3B8C8);
    sub_1AF3478BC((uint64_t)v13, (uint64_t)v12, &qword_1EEE3B8C8);
    v11 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B948);
    sub_1AF347900(&qword_1EEE3B950, &qword_1EEE3B948, (uint64_t (*)(void))sub_1AF34836C, MEMORY[0x1E0DEAF10]);
    sub_1AF3E7FB8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1AF3478BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AF347900(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1AF45E31C](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AF347964()
{
  unint64_t result;

  result = qword_1EEE3B8E8;
  if (!qword_1EEE3B8E8)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBA88, &type metadata for KDebugBufferSize);
    atomic_store(result, (unint64_t *)&qword_1EEE3B8E8);
  }
  return result;
}

unint64_t sub_1AF3479A8()
{
  unint64_t result;

  result = qword_1EEE3B920;
  if (!qword_1EEE3B920)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBCB8, &type metadata for PlanSettings.KPerfPET);
    atomic_store(result, (unint64_t *)&qword_1EEE3B920);
  }
  return result;
}

unint64_t sub_1AF3479EC()
{
  unint64_t result;

  result = qword_1EEE3B940;
  if (!qword_1EEE3B940)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBE60, &type metadata for PlanSettings.KPerfLazyTrigger);
    atomic_store(result, (unint64_t *)&qword_1EEE3B940);
  }
  return result;
}

unint64_t sub_1AF347A30()
{
  unint64_t result;

  result = qword_1EEE3B8E0;
  if (!qword_1EEE3B8E0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBFA0, &type metadata for PlanSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3B8E0);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 __Block_byref_object_copy__0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1AF347B30(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_1AF347B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *i;
  BOOL v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  for (i = (_QWORD *)(a1 + 40); ; i += 5)
  {
    v7 = *(i - 1) == a2 && *i == a3;
    if (v7 || (sub_1AF3E8030() & 1) != 0)
      break;
    if (!--v3)
      return 0;
  }
  return 1;
}

uint64_t sub_1AF347BEC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEE3B9C8);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1AF45E31C](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AF347C60()
{
  unint64_t result;

  result = qword_1EEE3B760;
  if (!qword_1EEE3B760)
  {
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EEE3B760);
  }
  return result;
}

uint64_t sub_1AF347CA8(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = v1[3];
    v6 = v1[4];
    v7 = (_QWORD *)(result + 32);
    v8 = v1[5];
    swift_bridgeObjectRetain();
    v9 = v4 - 1;
    do
    {
      v10 = v9;
      v11 = v7[3];
      v12 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(v5, v6, v8, v11, v12);
      if (v3)
        break;
      v9 = v10 - 1;
      v7 += 5;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1AF347D5C()
{
  unint64_t result;

  result = qword_1EEE3B9D8;
  if (!qword_1EEE3B9D8)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EC0B8, &type metadata for PlanLayer);
    atomic_store(result, (unint64_t *)&qword_1EEE3B9D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanLayer.CodingKeys()
{
  return &type metadata for PlanLayer.CodingKeys;
}

uint64_t sub_1AF347DB0()
{
  return 0;
}

uint64_t sub_1AF347DB8(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result)
  {
    v2 = result;
    result = ktrace_file_appending_chunk(result);
    if (result)
    {
      v3 = result;
      LODWORD(v16) = ktrace_chunk_tag(result);
      sub_1AF3988E4();
      v4 = sub_1AF3E7A0C();
      v6 = v5;
      if (qword_1EEE3C480 != -1)
        swift_once();
      v7 = sub_1AF3E7778();
      __swift_project_value_buffer(v7, (uint64_t)qword_1EEE41228);
      v8 = v1[1];
      v14 = *v1;
      v16 = v1[4];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1AF398928((uint64_t)&v16);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1AF398928((uint64_t)&v16);
      swift_bridgeObjectRetain();
      v9 = sub_1AF3E7760();
      v10 = sub_1AF3E7B50();
      if (os_log_type_enabled(v9, v10))
      {
        v12 = v4;
        v11 = swift_slowAlloc();
        v13 = swift_slowAlloc();
        v15 = v13;
        *(_DWORD *)v11 = 136446466;
        swift_bridgeObjectRetain();
        sub_1AF346C80(v14, v8, &v15);
        sub_1AF3E7C7C();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_1AF398950((uint64_t)&v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AF398950((uint64_t)&v16);
        *(_WORD *)(v11 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1AF346C80(v12, v6, &v15);
        sub_1AF3E7C7C();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v9, v10, "\tprovider %{public}s left chunk with tag 0x%{public}s unfinished", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v13, -1, -1);
        MEMORY[0x1AF45E3DC](v11, -1, -1);

      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AF398950((uint64_t)&v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AF398950((uint64_t)&v16);

        swift_bridgeObjectRelease_n();
      }
      return ktrace_file_append_finish(v2, v3);
    }
  }
  return result;
}

uint64_t sub_1AF3480C8(_QWORD *a1)
{
  return sub_1AF34165C(a1);
}

unint64_t sub_1AF3480DC()
{
  unint64_t result;

  result = qword_1EEE3B9B0;
  if (!qword_1EEE3B9B0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EC248, &type metadata for Plan);
    atomic_store(result, (unint64_t *)&qword_1EEE3B9B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Plan.CodingKeys()
{
  return &type metadata for Plan.CodingKeys;
}

unint64_t sub_1AF348130()
{
  unint64_t result;

  result = qword_1EEE3B9C0;
  if (!qword_1EEE3B9C0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EC180, &type metadata for Plan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3B9C0);
  }
  return result;
}

uint64_t sub_1AF348174(_QWORD *a1)
{
  return sub_1AF3408A8(a1);
}

ValueMetadata *type metadata accessor for KDebugBufferSize.CodingKeys()
{
  return &type metadata for KDebugBufferSize.CodingKeys;
}

unint64_t sub_1AF3481A4()
{
  unint64_t result;

  result = qword_1EEE3CEA0;
  if (!qword_1EEE3CEA0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3ECBB8, &type metadata for KDebugBufferSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3CEA0);
  }
  return result;
}

unint64_t sub_1AF3481F8()
{
  unint64_t result;

  result = qword_1EEE3B670;
  if (!qword_1EEE3B670)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB530, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_1EEE3B670);
  }
  return result;
}

unint64_t sub_1AF34823C()
{
  unint64_t result;

  result = qword_1EEE3B660;
  if (!qword_1EEE3B660)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB408, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_1EEE3B660);
  }
  return result;
}

unint64_t sub_1AF348280()
{
  unint64_t result;

  result = qword_1EEE3B658;
  if (!qword_1EEE3B658)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB4D0, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_1EEE3B658);
  }
  return result;
}

unint64_t sub_1AF3482C4()
{
  unint64_t result;

  result = qword_1EEE3B668;
  if (!qword_1EEE3B668)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB508, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_1EEE3B668);
  }
  return result;
}

unint64_t sub_1AF348308()
{
  unint64_t result;

  result = qword_1EEE3B938;
  if (!qword_1EEE3B938)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBC68, &type metadata for PlanSettings.KPerfKDebugTrigger);
    atomic_store(result, (unint64_t *)&qword_1EEE3B938);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfKDebugTrigger.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys;
}

unint64_t sub_1AF34836C()
{
  unint64_t result;

  result = qword_1EEE3B958;
  if (!qword_1EEE3B958)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBEB0, &type metadata for PlanSettings.ProviderEntry);
    atomic_store(result, (unint64_t *)&qword_1EEE3B958);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.ProviderEntry.CodingKeys()
{
  return &type metadata for PlanSettings.ProviderEntry.CodingKeys;
}

unint64_t sub_1AF3483C0()
{
  unint64_t result;

  result = qword_1EEE3B850;
  if (!qword_1EEE3B850)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBB78, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_1EEE3B850);
  }
  return result;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfPETModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AF348450 + 4 * byte_1AF3EB9EE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AF348484 + 4 * byte_1AF3EB9E9[v4]))();
}

uint64_t sub_1AF348484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF34848C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF348494);
  return result;
}

uint64_t sub_1AF3484A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF3484A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AF3484AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF3484B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF3484C0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1AF340784(a1, *v1);
}

unint64_t sub_1AF3484D8()
{
  unint64_t result;

  result = qword_1EEE3B900;
  if (!qword_1EEE3B900)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBBC8, &type metadata for PlanSettings.KPerfAction);
    atomic_store(result, (unint64_t *)&qword_1EEE3B900);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfAction.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AF34855C + 4 * byte_1AF3EB9DF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AF34857C + 4 * byte_1AF3EB9E4[v4]))();
}

_BYTE *sub_1AF34855C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AF34857C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AF348584(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AF34858C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AF348594(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AF34859C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for ReporterError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_1AF3485F8()
{
  return 0x7372656C706D6173;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfAction.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfAction.CodingKeys;
}

unint64_t sub_1AF348620()
{
  unint64_t result;

  result = qword_1EEE3CEA8;
  if (!qword_1EEE3CEA8)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3ECB68, &type metadata for PlanSettings.KPerfAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3CEA8);
  }
  return result;
}

uint64_t sub_1AF348664(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1AF340DA0(a1, *v1, v1[1], &qword_1EEE3B858, (void (*)(_QWORD *))sub_1AF3486E8);
}

unint64_t sub_1AF348694()
{
  unint64_t result;

  result = qword_1EEE3B918;
  if (!qword_1EEE3B918)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EBC18, &type metadata for PlanSettings.KPerfTimer);
    atomic_store(result, (unint64_t *)&qword_1EEE3B918);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfTimer.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfTimer.CodingKeys;
}

unint64_t sub_1AF3486E8()
{
  unint64_t result;

  result = qword_1EEE3CEB0;
  if (!qword_1EEE3CEB0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3ECB18, &type metadata for PlanSettings.KPerfTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEE3CEB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.CodingKeys()
{
  return &type metadata for PlanSettings.CodingKeys;
}

uint64_t ktrace_only_do_time_sensitive_postprocess(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 224)) & 1;
}

uint64_t ktrace_set_only_do_time_sensitive_postprocess(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_WORD *)(result + 224) = *(_WORD *)(result + 224) & 0xFEFF | v2;
  return result;
}

void *ktrace_postprocessing_set_completed_handler(uint64_t *a1, const void *a2)
{
  uint64_t v3;
  _DWORD *v5;
  void *result;

  v3 = *a1;
  if ((*(_WORD *)(v3 + 224) & 3) != 0)
    ktrace_postprocessing_set_completed_handler_cold_1();
  v5 = ktrace_callback_list_add(v3, (uint64_t)(a1 + 2));
  v5[4] = 5;
  result = _Block_copy(a2);
  *((_QWORD *)v5 + 3) = result;
  *v5 = 2;
  return result;
}

uint64_t ktrace_postprocessing_get_processing_queue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ktrace_postprocess_file_internal(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD aBlock[7];
  uint64_t v44;
  dispatch_object_t object;
  uint64_t v46;
  uint64_t v47;

  v10 = dup(*(_DWORD *)(a2 + 196));
  if (v10 < 0)
    return *__error();
  v11 = v10;
  v12 = ktrace_file_open_fd(v10, 0);
  if (v12)
  {
    v13 = v12;
    v14 = dispatch_semaphore_create(0);
    v15 = ktrace_session_create_with_flags(0);
    if (!v15)
      ktrace_postprocess_file_internal_cold_1();
    v16 = (uint64_t)v15;
    *(_BYTE *)(v15[37] + 96) &= ~1u;
    if (a1)
    {
      v17 = *(_QWORD *)(a1 + 72);
      if (v17)
        (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v17, v16);
      objc_msgSend(*(id *)(a1 + 600), "configurePostprocessingWithSession:", v16);
    }
    v46 = 0;
    v47 = 0;
    v44 = v16;
    object = dispatch_queue_create("com.apple.libktrace.postprocessing", 0);
    v18 = ktrace_set_ktrace_file(v16, v13, 1);
    if ((_DWORD)v18)
      goto LABEL_31;
    if (!a3)
      ktrace_catalog_postprocess_file(v16, a2, &v44);
    ktrace_uuid_map_postprocess_file(v16, a2, a3, a4, (uint64_t)&v44);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __ktrace_postprocess_file_internal_block_invoke;
    aBlock[3] = &unk_1E5F6FD98;
    aBlock[5] = a5;
    aBlock[6] = v16;
    aBlock[4] = v14;
    ktrace_set_completion_handler(v16, aBlock);
    if (!a1 || (v19 = atomic_load((unsigned __int8 *)(a1 + 158)), (v19 & 1) == 0))
    {
      ktrace_log_init();
      v20 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ktrace_postprocess_file_internal_cold_4(v20, v21, v22, v23, v24, v25, v26, v27);
      v28 = ktrace_start(v16, object);
      if ((_DWORD)v28)
      {
        v18 = v28;
        *__error() = v28;
        v29 = *__error();
        ktrace_log_init();
        v30 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_postprocess_file_internal_cold_3(v29, v30);
        *__error() = v29;
        goto LABEL_31;
      }
      if (a1)
        *(_QWORD *)(a1 + 80) = v16;
      dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
      ktrace_log_init();
      v31 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ktrace_postprocess_file_internal_cold_2(v31, v32, v33, v34, v35, v36, v37, v38);
      if ((int)v46 >= 1)
      {
        v39 = 0;
        v40 = (uint64_t *)(v47 + 24);
        do
        {
          v41 = *v40;
          v40 += 4;
          (*(void (**)(void))(v41 + 16))();
          ++v39;
        }
        while (v39 < (int)v46);
      }
      if (a1)
        objc_msgSend(*(id *)(a1 + 600), "postprocessingCompleteWithFile:", a2);
    }
    v18 = 0;
LABEL_31:
    ktrace_session_destroy(v16);
    dispatch_release(v14);
    ktrace_callback_list_reset((int *)&v46);
    dispatch_release(object);
    return v18;
  }
  v18 = *__error();
  close(v11);
  return v18;
}

intptr_t __ktrace_postprocess_file_internal_block_invoke(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40))
    **(_QWORD **)(a1 + 40) = ktrace_get_current_timestamp(*(_QWORD *)(a1 + 48));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t ktrace_postprocess_file(uint64_t a1)
{
  return ktrace_postprocess_file_internal(0, a1, 0, 2, 0);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void ktrace_client_destroy()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_start_tracing()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_stop_tracing()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_get_subfile()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_get_live_kernel_map()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_copy_dscsym()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_get_mounts()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_get_dscsym()
{
  _os_crash();
  __break(1u);
}

void ktrace_client_get_file_info()
{
  _os_crash();
  __break(1u);
}

uint64_t ktrace_client_open_bridge()
{
  *__error() = 45;
  return 0;
}

uint64_t deserializeSignpostSpecs(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithContentsOfFile:", a1);
  if (!v2)
  {
    v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:", a1);
    if (v3)
    {
      v8[0] = v3;
      v4 = v8;
    }
    else
    {
      v5 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", a1);
      if (!v5)
        return 0;
      v2 = objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v5, 0, 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        return v2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return 0;
      v7 = v2;
      v4 = &v7;
    }
    return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
  }
  return v2;
}

uint64_t signpostSpecPathsForURL(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  _BYTE v22[128];
  _QWORD v23[3];

  v23[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return MEMORY[0x1E0C9AA60];
  v21 = 0;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = objc_msgSend(a1, "path");
  if (!objc_msgSend(v2, "fileExistsAtPath:isDirectory:", v3, &v21))
    return MEMORY[0x1E0C9AA60];
  if (!v21)
  {
    v23[0] = v3;
    return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
  }
  v20 = 0;
  v4 = (void *)objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", a1, 0, 0, &v20);
  if (!v4 || v20 != 0)
    return MEMORY[0x1E0C9AA60];
  v6 = v4;
  if (!objc_msgSend(v4, "count"))
    return MEMORY[0x1E0C9AA60];
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        v13 = (void *)objc_msgSend(v12, "pathExtension");
        if ((objc_msgSend(v13, "isEqualToString:", CFSTR("plist")) & 1) != 0
          || objc_msgSend(v13, "isEqualToString:", CFSTR("json")))
        {
          v14 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "URLByResolvingAliasFileAtURL:options:error:", v12, 768, 0);
          if (v14)
            objc_msgSend(v7, "addObject:", objc_msgSend(v14, "path"));
        }
      }
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v9);
  }
  return (uint64_t)v7;
}

_QWORD *ktariadne_append_live_signpost_specs(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *result;
  int *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = (void *)signpostSpecPathsForURL((void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/AppleInternal/Library/Ariadne/Plists/")));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        v9 = deserializeSignpostSpecs(v8);
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v8, (_QWORD)v13);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }
  v10 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v2, 200, 0, 0, (_QWORD)v13);
  if (v10)
    return ktrace_file_append_chunk(a1, 20986, 0, 0, (UInt8 *)objc_msgSend(v10, "bytes"), objc_msgSend(v10, "length"));
  v12 = __error();
  result = 0;
  *v12 = 79;
  return result;
}

_QWORD *ktariadne_append_live_device_tree(uint64_t a1)
{
  void *v2;
  uint64_t RootEntry;
  io_object_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *appended;

  v2 = (void *)MEMORY[0x1AF45DCBC]();
  RootEntry = IORegistryGetRootEntry(0);
  v4 = RootEntry;
  v5 = serializeServiceRecursively(RootEntry);
  if (v5)
  {
    v6 = v5;
    IOObjectRelease(v4);
    v7 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v6, 200, 0, 0);
    appended = ktrace_file_append_chunk(a1, 20991, 0, 0, (UInt8 *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"));
  }
  else
  {
    appended = 0;
  }
  objc_autoreleasePoolPop(v2);
  return appended;
}

void *serializeServiceRecursively(uint64_t a1)
{
  io_registry_entry_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  io_iterator_t iterator;
  CFMutableDictionaryRef properties;
  uint64_t entryID;
  _OWORD v11[8];
  char v12[128];
  char v13[136];
  uint64_t v14;

  v1 = a1;
  v14 = *MEMORY[0x1E0C80C00];
  iterator = 0;
  if (MEMORY[0x1AF45D278](a1, "IODeviceTree", &iterator))
    return 0;
  v3 = IOIteratorNext(iterator);
  memset(v13, 0, 128);
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  entryID = 0;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (!IORegistryEntryGetNameInPlane(v1, "IODeviceTree", v13))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13), CFSTR("IORegistryEntryName"));
  if (!IORegistryEntryGetLocationInPlane(v1, "IODeviceTree", v12))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12), CFSTR("IORegistryEntryLocation"));
  if (!IORegistryEntryGetRegistryEntryID(v1, &entryID))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", entryID), CFSTR("IORegistryEntryID"));
  if (!_IOObjectGetClass())
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11), CFSTR("IOObjectClass"));
  properties = 0;
  IORegistryEntryCreateCFProperties(v1, &properties, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (properties)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", properties, CFSTR("IORegistryEntryProperties"));
    CFRelease(properties);
  }
  if ((_DWORD)v3)
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    do
    {
      v5 = (void *)MEMORY[0x1AF45DCBC]();
      objc_msgSend(v4, "addObject:", serializeServiceRecursively(v3));
      v6 = IOIteratorNext(iterator);
      IOObjectRelease(v3);
      objc_autoreleasePoolPop(v5);
      v3 = v6;
    }
    while ((_DWORD)v6);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("IORegistryEntryChildren"));
  }
  IOObjectRelease(iterator);
  return v2;
}

uint64_t ktariadne_read_times(uint64_t a1, void *a2, void *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6)
{
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFNumber *Value;
  uint64_t result;
  int v16;
  NSObject *v17;
  int *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  long double v21;
  const __CFNumber *v22;
  double v23;
  double valuePtr;

  if (*(_DWORD *)(*(_QWORD *)a1 + 20) != 5 || ktrace_chunk_tag(a1) != 20482)
    return 0;
  v12 = (const __CFDictionary *)ktrace_chunk_copy_plist(a1);
  if (v12)
  {
    v13 = v12;
    Value = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("MachAbsoluteTime"));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt64Type, a2);
      if (!a3)
        goto LABEL_14;
    }
    else
    {
      *a6 = 45;
      if (!a3)
        goto LABEL_14;
    }
    v19 = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("ContinuousTimeOffset"));
    if (!v19)
    {
      *a6 = 45;
      if (a4)
      {
LABEL_15:
        v20 = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("SecondsSinceEpoch"));
        if (v20)
        {
          valuePtr = 0.0;
          CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
          v23 = 0.0;
          v21 = modf(valuePtr, &v23);
          *a4 = (uint64_t)v23;
          a4[1] = (uint64_t)(v21 * 1000000000.0);
        }
        else
        {
          *a6 = 45;
        }
      }
LABEL_20:
      if (a5)
      {
        v22 = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("SecondsFromGMT"));
        if (v22)
        {
          valuePtr = 0.0;
          CFNumberGetValue(v22, kCFNumberDoubleType, &valuePtr);
          *a5 = (int)(valuePtr / -60.0);
        }
        else
        {
          *a6 = 45;
        }
      }
      CFRelease(v13);
      return 1;
    }
    CFNumberGetValue(v19, kCFNumberSInt64Type, a3);
LABEL_14:
    if (a4)
      goto LABEL_15;
    goto LABEL_20;
  }
  v16 = *__error();
  ktrace_log_init();
  v17 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    ktariadne_read_times_cold_1(v16, v17);
  v18 = __error();
  result = 0;
  *v18 = v16;
  return result;
}

uint64_t __kttimesync_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (ktrace_chunk_tag((uint64_t)a2) == 32787)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) == 1)
    {
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      v4 = ktrace_chunk_copy_data(a2, 0, &v11, 0x30uLL);
      if (v4)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        v8 = *(_QWORD *)(a1 + 64);
        *(_OWORD *)v8 = v11;
        *(_OWORD *)(v8 + 16) = v12;
        *(_QWORD *)(v8 + 32) = v13;
        *(_QWORD *)(v8 + 40) = *(_QWORD *)((char *)&v13 + 4);
        *(_BYTE *)(v8 + 48) = *(_BYTE *)(v8 + 48) & 0xF0 | (8 * (BYTE12(v13) & 1)) | 7;
      }
    }
    return 1;
  }
  if (ktrace_chunk_tag((uint64_t)a2) == 32774)
  {
    v5 = (void **)ktrace_config_create(a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = ktrace_config_kdebug_using_mach_continuous_time((uint64_t)v5);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = 1;
    *(_BYTE *)(v6 + 24) = 1;
    ktrace_config_destroy(v5);
  }
  else
  {
    if (!ktariadne_read_times((uint64_t)a2, *(void **)(a1 + 64), (void *)(*(_QWORD *)(a1 + 64) + 8), (_QWORD *)(*(_QWORD *)(a1 + 64) + 24), (_DWORD *)(*(_QWORD *)(a1 + 64) + 40), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)))return 1;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      return 0;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + 48) |= 2u;
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + 48) |= 1u;
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + 48) |= 4u;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v7 = 1;
      *(_BYTE *)(v10 + 24) = 1;
    }
  }
  return v7;
}

BOOL __kttimesync_init_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = ktrace_chunk_tag(a2);
  if (v4 == 36874)
  {
    v5 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
    if (v5)
    {
      v6 = v5;
      v12 = 0;
      if (dict_uint64(v5, CFSTR("mach_abs_time"), &v12))
      {
        v7 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          __kttimesync_init_block_invoke_2_cold_2();
        *__error() = v7;
      }
      else
      {
        **(_QWORD **)(a1 + 32) = v12;
        v11 = 0;
        if (!dict_uint64(v6, CFSTR("mach_cont_time"), &v11))
        {
          v9 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(v9 + 8) = v11 - *(_QWORD *)v9;
          *(_BYTE *)(v9 + 48) |= 1u;
        }
      }
      CFRelease(v6);
    }
    else
    {
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        __kttimesync_init_block_invoke_2_cold_1();
      *__error() = v8;
    }
  }
  return v4 != 36874;
}

uint64_t kttimesync_update_kdebug(uint64_t result, int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (a2 == 25165824)
  {
    v6 = a4 | ((unint64_t)a6 << 32);
    v7 = v6 - *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = v6;
    v8 = *(unsigned int *)(result + 16);
    v9 = *(unsigned int *)(result + 20);
    if ((_DWORD)v8 != (_DWORD)v9)
      v7 = v7 * v8 / v9;
    v10 = *(_QWORD *)(result + 24) + v7 / 0x3B9ACA00;
    v11 = *(_QWORD *)(result + 32) + v7 % 0x3B9ACA00;
    *(_QWORD *)(result + 24) = v10;
    *(_QWORD *)(result + 32) = v11;
  }
  return result;
}

unint64_t machtime_to_timespec(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t result;

  if (a1)
  {
    v2 = *a1;
    v3 = a1[1];
    if ((_DWORD)v2 != (_DWORD)v3)
      a2 = v2 * a2 / v3;
    return a2 / 0x3B9ACA00;
  }
  else
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t kttimesync_update_kdebug_prepass(uint64_t result, int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 == 25165824)
  {
    v5 = a3 | ((unint64_t)a5 << 32);
    *(_QWORD *)(result + 8) -= v5;
    v6 = *(unsigned int *)(result + 16);
    v7 = *(unsigned int *)(result + 20);
    if ((_DWORD)v6 != (_DWORD)v7)
      v5 = v5 * v6 / v7;
    v8 = *(_QWORD *)(result + 32) + 1000000000 * (v5 / 0x3B9ACA00) - v5;
    *(_QWORD *)(result + 24) -= v5 / 0x3B9ACA00;
    *(_QWORD *)(result + 32) = v8;
  }
  return result;
}

double kttimesync_frequency(uint64_t a1, double a2, double a3)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 16);
  LODWORD(a3) = *(_DWORD *)(a1 + 20);
  return (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
}

unint64_t kttimesync_ns_from_mach(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != (_DWORD)v3)
    return v2 * a2 / v3;
  return a2;
}

uint64_t kttimesync_cont_from_abs(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) + a2;
}

unint64_t kttimesync_abs_from_cont(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v3)
    return v4;
  else
    return 0;
}

unint64_t kttimesync_ns_from_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != (_DWORD)v3)
    return v2 * a2 / v3;
  return a2;
}

unint64_t kttimesync_timestamp_from_ns(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != (_DWORD)v3)
    return v3 * a2 / v2;
  return a2;
}

unint64_t kttimesync_abs_from_timestamp(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  if ((*(_BYTE *)(a1 + 48) & 8) == 0)
    return a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v4)
    return v5;
  else
    return 0;
}

uint64_t kttimesync_cont_from_timestamp(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 48) & 8) == 0)
    a2 += *(_QWORD *)(a1 + 8);
  return a2;
}

unint64_t kttimesync_wall_from_timestamp(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 20);
  v4 = *(_QWORD *)a1 - a2;
  if (*(_QWORD *)a1 <= a2)
  {
    v6 = a2 - *(_QWORD *)a1;
    if ((_DWORD)v2 != (_DWORD)v3)
      v6 = v6 * v2 / v3;
    if (*(_QWORD *)(a1 + 32) + v6 % 0x3B9ACA00 <= 0x3B9AC9FF)
      return *(_QWORD *)(a1 + 24) + v6 / 0x3B9ACA00;
    else
      return *(_QWORD *)(a1 + 24) + v6 / 0x3B9ACA00 + 1;
  }
  else
  {
    if ((_DWORD)v2 != (_DWORD)v3)
      v4 = v4 * v2 / v3;
    return *(_QWORD *)(a1 + 24)
         - v4 / 0x3B9ACA00
         + ((uint64_t)(*(_QWORD *)(a1 + 32) + 1000000000 * (v4 / 0x3B9ACA00) - v4) >> 63);
  }
}

uint64_t timespec_subtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 - a3 + ((a2 - a4) >> 63);
}

uint64_t timespec_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a4 + a2) <= 0x3B9AC9FF)
    return a3 + a1;
  else
    return a3 + a1 + 1;
}

uint64_t kttimesync_can_convert_continuous(uint64_t a1)
{
  return *(_BYTE *)(a1 + 48) & 1;
}

double ktrace_remotetime_update_params(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 528) = result;
  return result;
}

uint64_t ktrace_get_remotetime_for_localtime(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v7 = 0;
  ktrace_convert_timestamp_to_nanoseconds(a1, a2, &v7);
  result = 0;
  v4 = *(double *)(a1 + 528);
  if (v4 != 0.0)
  {
    v5 = v4 * (double)(uint64_t)(v7 - *(_QWORD *)(a1 + 536));
    v6 = *(_QWORD *)(a1 + 544);
    if (__OFADD__(v6, (uint64_t)v5))
      return 0;
    else
      return v6 + (uint64_t)v5;
  }
  return result;
}

uint64_t ktrace_set_remotetime_conversion_enabled(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  *(_DWORD *)(result + 288) = a2;
  return result;
}

uint64_t ktrace_get_remotetime_conversion_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 288);
}

uint64_t timeval_subtract(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return a1 - a3 + ((a2 - a4) >> 31);
}

uint64_t timeval_add(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if ((a4 + a2) <= 0xF423F)
    return a3 + a1;
  else
    return a3 + a1 + 1;
}

unint64_t machtime_to_timeval(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t result;

  if (a1)
  {
    v2 = *a1;
    v3 = a1[1];
    if ((_DWORD)v2 != (_DWORD)v3)
      a2 = v2 * a2 / v3;
    return a2 / 0x3B9ACA00;
  }
  else
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t OUTLINED_FUNCTION_3()
{
  return _os_assert_log();
}

void _session_process_events(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  double v41;
  double v42;
  char *v43;
  uint64_t v44;
  int is_64_bit;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  int v55;
  void *v56;
  uint64_t v57;
  int v58;
  _OWORD v59[6];
  _OWORD v60[4];
  _OWORD v61[7];

  if (*(_DWORD *)(a1 + 4))
    ktrace_remotetime_update_params_cold_1();
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v53 = *(unsigned int *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v51 = *(_QWORD *)(a1 + 8);
  i = tracepoint_timestamp(a2, a4);
  if (!*(_QWORD *)(a1 + 488))
    *(_QWORD *)(a1 + 488) = i;
  v12 = 32;
  if (a4)
    v12 = 64;
  v57 = v12;
  v13 = 5;
  if (a4)
    v13 = 6;
  v50 = a3 >> v13;
  if (a3 >> v13)
  {
    v14 = 0;
    v15 = 0;
    v49 = a1 + 432;
    v54 = (void **)(a1 + 248);
    v52 = v10 + 24;
    v55 = a4;
    do
    {
      if (v15)
        objc_autoreleasePoolPop(v15);
      v15 = (void *)MEMORY[0x1AF45DCBC](i);
      v16 = atomic_load((unsigned __int8 *)(a1 + 157));
      if ((v16 & 1) != 0)
        break;
      if (a4)
        v17 = 48;
      else
        v17 = 28;
      v18 = *(unsigned int *)(a2 + v17);
      i = tracepoint_timestamp(a2, a4);
      *(_QWORD *)(a1 + 496) = i;
      v58 = 1 << (BYTE2(v18) & 7);
      if ((v58 & *(_BYTE *)(v51 + (v18 >> 19))) != 0)
      {
        v19 = i;
        v56 = v15;
        v20 = v18 & 0xFFFFFFFC;
        if ((v18 & 0xFFFFFFFC) == 0x7020008)
        {
          clear_events(*(_QWORD *)(a1 + 240), v54);
          *(_QWORD *)(a1 + 488) = v19;
          if (*(_DWORD *)(a1 + 272))
            thread_cputime_map_dropped_events(a1, *(_QWORD *)(a1 + 408));
          v21 = *(_QWORD *)(a1 + 64);
          if (v21)
            (*(void (**)(void))(v21 + 16))();
        }
        else if ((_DWORD)v18 == 25165824)
        {
          if (a4)
          {
            v22 = *(_QWORD *)(a2 + 8);
            v23 = *(_QWORD *)(a2 + 16);
            v24 = *(_QWORD *)(a2 + 24);
            v25 = *(_QWORD *)(a2 + 32);
          }
          else
          {
            v22 = *(unsigned int *)(a2 + 8);
            LODWORD(v23) = *(_DWORD *)(a2 + 12);
            v24 = *(unsigned int *)(a2 + 16);
            LODWORD(v25) = *(_DWORD *)(a2 + 20);
          }
          kttimesync_update_kdebug(v49, *(_DWORD *)(a2 + v17), v22, v23, v24, v25);
        }
        if (*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280) || *(_DWORD *)(a1 + 276))
          kthmap_update(*(_QWORD *)(a1 + 296), a2, a4);
        v26 = *(_QWORD *)(a1 + 304);
        if (v26 && (BYTE3(v18) == 31 || v20 == 67174404 || v20 == 117571592 || v20 == 117440520))
          ktrace_uuid_map_update(v26, a1, (uint64_t *)a2, a4);
        if (v20 == 117440524)
        {
          v27 = *(_QWORD *)(a1 + 88);
          if (v27)
          {
            if (v55)
              v28 = *(const void **)(a2 + 8);
            else
              v28 = (const void *)*(unsigned int *)(a2 + 8);
            v29 = kthmap_process_name_for_tid(*(_QWORD *)(a1 + 296), v28);
            (*(void (**)(uint64_t, const void *, uint64_t))(v27 + 16))(v27, v28, v29);
          }
        }
        a4 = v55;
        if (*(_DWORD *)(a1 + 268) && (v18 & 0xFFFFFFF8 | 4) == 0x3010094)
          vnode_path_map_update(*(CFDictionaryRef **)(a1 + 400), v18, a2, v55);
        if (*(_DWORD *)(a1 + 272)
          && ((v20 - 20971520) <= 0x24 && ((1 << v20) & 0x1000000101) != 0 || v20 == 117440524))
        {
          thread_cputime_map_update(a1, *(_QWORD *)(a1 + 408), v18, a2, v55);
        }
        _session_handle_stackshot(a1, v19);
        if (*(_DWORD *)(a1 + 288) && (_DWORD)v18 == 25165840)
          ktrace_remotetime_update_params(a1, a2);
        ++*(_QWORD *)(a1 + 160);
        v15 = v56;
        if (*(_QWORD *)(a1 + 520) <= v19)
        {
          memset(v61, 0, 96);
          if ((int)v8 >= 1)
          {
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = *(_DWORD *)(v9 + 32 * v30);
              if (v32 == 1)
              {
                if ((v58 & *(_BYTE *)(*(_QWORD *)(v9 + 32 * v30 + 8) + (v18 >> 19))) == 0)
                  goto LABEL_101;
              }
              else if (!v32)
              {
                v33 = v9 + 32 * v30;
                v35 = *(_DWORD *)(v33 + 8);
                v34 = v33 + 8;
                if (v18 < v35 || v18 >= *(_DWORD *)(v34 + 4))
                  goto LABEL_101;
              }
              v36 = *(_DWORD *)(v9 + 32 * v30 + 16);
              if (v36 == 2)
              {
                *(_QWORD *)&v59[0] = 0;
                if (!*(_QWORD *)(a1 + 416))
                {
                  v39 = kpdecode_cursor_create();
                  *(_QWORD *)(a1 + 416) = v39;
                  if (!v39)
                    ktrace_remotetime_update_params_cold_1();
                  v40 = (char *)malloc_type_valloc(0x1000uLL, 0xF48082EBuLL);
                  if (!v40)
                    ktrace_remotetime_update_params_cold_1();
                  v43 = v40;
                  v44 = *(_QWORD *)(a1 + 608);
                  if (v44)
                    is_64_bit = ktrace_file_is_64_bit(v44);
                  else
                    is_64_bit = 1;
                  v48 = kttimesync_frequency(v49, v41, v42);
                  *(_DWORD *)v43 = 1437204992;
                  *(_QWORD *)(v43 + 12) = 0;
                  *(_QWORD *)(v43 + 4) = 0;
                  *((_DWORD *)v43 + 5) = is_64_bit;
                  *((_QWORD *)v43 + 3) = (unint64_t)((double)(unint64_t)v48 * 1000000000.0);
                  *((_OWORD *)v43 + 2) = 0u;
                  *((_OWORD *)v43 + 3) = 0u;
                  *((_OWORD *)v43 + 4) = 0u;
                  *((_OWORD *)v43 + 5) = 0u;
                  *((_OWORD *)v43 + 6) = 0u;
                  *((_OWORD *)v43 + 7) = 0u;
                  *((_OWORD *)v43 + 8) = 0u;
                  *((_OWORD *)v43 + 9) = 0u;
                  *((_OWORD *)v43 + 10) = 0u;
                  *((_OWORD *)v43 + 11) = 0u;
                  *((_OWORD *)v43 + 12) = 0u;
                  *((_OWORD *)v43 + 13) = 0u;
                  *((_OWORD *)v43 + 14) = 0u;
                  *((_OWORD *)v43 + 15) = 0u;
                  *((_OWORD *)v43 + 16) = 0u;
                  *((_OWORD *)v43 + 17) = 0u;
                  if (kpdecode_cursor_setchunk())
                    ktrace_remotetime_update_params_cold_1();
                  while (!kpdecode_cursor_next_record())
                    kpdecode_record_free();
                  free(v43);
                  a4 = v55;
                  if (*(_BYTE *)(a1 + 16))
                    kpdecode_cursor_set_option();
                }
                kpdecode_cursor_clearchunk();
                if (kpdecode_cursor_setchunk())
                  ktrace_remotetime_update_params_cold_1();
                *(_QWORD *)&v59[0] = 0;
                for (i = kpdecode_cursor_next_record(); !(_DWORD)i; i = kpdecode_cursor_next_record())
                  (*(void (**)(void))(*(_QWORD *)(v9 + 32 * v30 + 24) + 16))();
                goto LABEL_101;
              }
              if (v36 == 1)
              {
                if ((v18 & 1) != 0)
                {
                  insert_start_event(*(_QWORD *)(a1 + 240), v54, a2);
                  goto LABEL_101;
                }
                if ((v18 & 2) == 0)
                  goto LABEL_101;
                memset(v60, 0, sizeof(v60));
                memset(v59, 0, sizeof(v59));
                i = match_end_event(*(_QWORD *)(a1 + 240), (__int128 **)v54, a2, v60);
                if (!(_DWORD)i)
                  goto LABEL_101;
                i = process_tracepoint(a1, (uint64_t)v60, (uint64_t)v59, a4);
                if (!(_DWORD)i)
                  goto LABEL_101;
                if ((v31 & 1) == 0)
                  process_tracepoint(a1, a2, (uint64_t)v61, a4);
                v46 = v52;
                v47 = v53;
                if ((int)v53 >= 1)
                {
                  do
                  {
                    if (*(_DWORD *)(v46 - 8) == 1)
                      (*(void (**)(void))(*(_QWORD *)v46 + 16))();
                    v46 += 32;
                    --v47;
                  }
                  while (v47);
                }
              }
              else
              {
                if (v36)
                  _session_process_events_cold_1();
                if ((v31 & 1) == 0)
                {
                  i = process_tracepoint(a1, a2, (uint64_t)v61, a4);
                  if (!(_DWORD)i)
                  {
                    v31 = 0;
                    goto LABEL_101;
                  }
                }
                v37 = v52;
                v38 = v53;
                if ((int)v53 >= 1)
                {
                  do
                  {
                    if (!*(_DWORD *)(v37 - 8))
                      (*(void (**)(void))(*(_QWORD *)v37 + 16))();
                    v37 += 32;
                    --v38;
                  }
                  while (v38);
                }
              }
              i = (*(uint64_t (**)(void))(*(_QWORD *)(v9 + 32 * v30 + 24) + 16))();
              v31 = 1;
LABEL_101:
              ++v30;
            }
            while (v30 != v8);
          }
          v15 = v56;
        }
      }
      ++v14;
      a2 += v57;
    }
    while (v14 != v50);
    if (v15)
      objc_autoreleasePoolPop(v15);
  }
}

uint64_t process_tracepoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const void *v14;
  const void *v15;
  _BOOL4 v16;
  BOOL v17;
  int v18;
  const void *v20;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  v8 = *(_QWORD *)a2;
  if (a4)
  {
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a3 + 40) = *(_QWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 52);
  }
  else
  {
    v8 &= 0xFFFFFFFFFFFFFFuLL;
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 28);
    *(_QWORD *)(a3 + 8) = *(unsigned int *)(a2 + 8);
    *(_QWORD *)(a3 + 16) = *(unsigned int *)(a2 + 12);
    *(_QWORD *)(a3 + 24) = *(unsigned int *)(a2 + 16);
    *(_QWORD *)(a3 + 32) = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(a3 + 40) = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned __int8 *)(a2 + 7);
  }
  *(_DWORD *)(a3 + 52) = v9;
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0)
  {
    v8 = kttimesync_cont_from_timestamp(a1 + 432, v8);
    *(_QWORD *)a3 = v8;
  }
  if (*(_DWORD *)(a1 + 264))
  {
    _session_convert_walltime(a1, v8);
    *(_QWORD *)(a3 + 64) = v11;
  }
  else
  {
    v10 = 0;
    *(_DWORD *)(a3 + 64) = 0;
  }
  *(_QWORD *)(a3 + 56) = v10;
  if (*(_DWORD *)(a1 + 260) != 1 && !*(_DWORD *)(a1 + 560) && !*(_DWORD *)(a1 + 576))
  {
    *(_DWORD *)(a3 + 88) = -1;
    *(_QWORD *)(a3 + 80) = 0;
    goto LABEL_41;
  }
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 88) = kthmap_pid_name_for_tid(*(_QWORD *)(a1 + 296), *(const void **)(a3 + 40), (_QWORD *)(a3 + 80));
  v12 = *(const void **)(a3 + 80);
  if (*(_DWORD *)(a1 + 260) == 2)
    *(_QWORD *)(a3 + 80) = 0;
  if (!*(_BYTE *)(a1 + 580)
    || !CFSetContainsValue(*(CFSetRef *)(a1 + 584), (const void *)(*(_DWORD *)(a3 + 48) & 0xFFFFFFFC)))
  {
    if (!*(_DWORD *)(a1 + 268)
      || *(_DWORD *)(a3 + 48) >> 2 != 12599332
      || (v13 = *(_DWORD *)(a3 + 88), v13 != getpid()))
    {
      if (*(_DWORD *)(a1 + 560) == 1)
      {
        v14 = (const void *)*(int *)(a3 + 88);
        if ((_DWORD)v14 != -1)
        {
          if (CFSetContainsValue(*(CFSetRef *)(a1 + 552), v14))
            return 0;
        }
      }
      if (*(_DWORD *)(a1 + 576) == 1 && v12 && CFSetContainsValue(*(CFSetRef *)(a1 + 568), v12))
        return 0;
      if (*(_DWORD *)(a1 + 560) == 2 || *(_DWORD *)(a1 + 576) == 2)
      {
        v15 = (const void *)*(int *)(a3 + 88);
        if ((_DWORD)v15 == -1)
        {
          v16 = 1;
          if (v12)
            goto LABEL_29;
        }
        else
        {
          v16 = CFSetContainsValue(*(CFSetRef *)(a1 + 552), v15) == 0;
          if (v12)
          {
LABEL_29:
            v17 = CFSetContainsValue(*(CFSetRef *)(a1 + 568), v12) == 0;
LABEL_33:
            v18 = *(_DWORD *)(a1 + 560) != 2 || v16;
            if (v18 == 1)
            {
              if (*(_DWORD *)(a1 + 576) != 2)
                v17 = 1;
              if (v17)
                return 0;
            }
            goto LABEL_41;
          }
        }
        v17 = 1;
        goto LABEL_33;
      }
    }
  }
LABEL_41:
  if (*(_DWORD *)(a1 + 256) == 1)
    v20 = ktrace_name_for_eventid(a1, (void *)(*(_DWORD *)(a3 + 48) & 0xFFFFFFFC));
  else
    v20 = 0;
  *(_QWORD *)(a3 + 72) = v20;
  return 1;
}

BOOL int_equal_callback(int a1, int a2)
{
  return a1 == a2;
}

uint64_t int_hash_callback(uint64_t result)
{
  return result;
}

BOOL str_equal_callback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t str_hash_callback(const char *a1)
{
  strlen(a1);
  return CFHashBytes();
}

BOOL proc_name_equal_callback(const char *a1, const char *a2)
{
  return strncmp(a1, a2, 0x10uLL) == 0;
}

uint64_t proc_name_hash_callback(const char *a1)
{
  strlen(a1);
  return CFHashBytes();
}

void free_callback(int a1, void *a2)
{
  free(a2);
}

BOOL ptr_equal_callback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL long_equal_callback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef str_desc_copy_callback(char *cStr)
{
  return CFStringCreateWithCStringNoCopy(0, cStr, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
}

uint64_t sysctlbyname_string(__CFDictionary *a1, const void *a2, char *a3, char **a4, size_t count)
{
  int v9;
  uint64_t result;
  char *v11;
  char *v12;
  CFStringRef v13;
  CFStringRef v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  size_t v18;
  size_t v19;
  uint8_t buf[4];
  char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v19 = count;
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (count)
  {
LABEL_11:
    v11 = (char *)malloc_type_calloc(count, 1uLL, 0x2C308B52uLL);
    if (!v11)
      ktrace_remotetime_update_params_cold_1();
    v12 = v11;
    v18 = v19;
    if (sysctlbyname(a3, v11, &v18, 0, 0) < 0)
    {
      v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        sysctlbyname_string_cold_3();
    }
    else if (v18 >= v19)
    {
      v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        sysctlbyname_string_cold_7();
    }
    else
    {
      v12[v18] = 0;
      if (!a1)
      {
LABEL_18:
        result = 0;
        *a4 = v12;
        return result;
      }
      if (!a2)
        ktrace_remotetime_update_params_cold_1();
      v13 = CFStringCreateWithCString(0, v12, 0x600u);
      if (v13)
      {
        v14 = v13;
        CFDictionarySetValue(a1, a2, v13);
        CFRelease(v14);
        goto LABEL_18;
      }
      v15 = *__error();
      ktrace_log_init();
      v17 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v21 = a3;
        v22 = 2080;
        v23 = v12;
        v24 = 1024;
        v25 = v15;
        _os_log_error_impl(&dword_1AF33A000, v17, OS_LOG_TYPE_ERROR, "could not create string from sysctlbyname(%s) result '%s' (%{errno}d)", buf, 0x1Cu);
      }
    }
    *__error() = v15;
    v16 = *__error();
    free(v12);
    if (v16)
      return v16;
    else
      return 22;
  }
  if ((sysctlbyname(a3, 0, &v19, 0, 0) & 0x80000000) == 0 || v19)
  {
    count = ++v19;
    goto LABEL_11;
  }
  v9 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    sysctlbyname_string_cold_3();
  *__error() = v9;
  if (*__error())
    return *__error();
  else
    return 22;
}

uint64_t sysctlbyname_uint64(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 8uLL, kCFNumberSInt64Type);
}

uint64_t sysctlbyname_number_internal(__CFDictionary *a1, const void *a2, const char *a3, void *a4, size_t a5, CFNumberType a6)
{
  size_t v12;
  char *v13;
  int v14;
  int v15;
  NSObject *v16;
  int v18;
  int v19;
  NSObject *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  uint64_t v23;
  size_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  _BYTE v28[10];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  v24 = a5;
  v14 = sysctlbyname(a3, v13, &v24, 0, 0);
  if (v14 < 0)
  {
    v18 = v14;
    v19 = *__error();
    ktrace_log_init();
    v20 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v26 = a3;
      v27 = 1024;
      *(_DWORD *)v28 = v18;
      *(_WORD *)&v28[4] = 1024;
      *(_DWORD *)&v28[6] = v19;
      _os_log_error_impl(&dword_1AF33A000, v20, OS_LOG_TYPE_ERROR, "sysctlbyname(%s) returned %d (%{errno}d)", buf, 0x18u);
    }
    *__error() = v19;
    return *__error();
  }
  else
  {
    if (v24 <= a5)
    {
      if (a1)
      {
        if (!a2)
          ktrace_remotetime_update_params_cold_1();
        v21 = CFNumberCreate(0, a6, v13);
        if (!v21)
          return 12;
        v22 = v21;
        CFDictionarySetValue(a1, a2, v21);
        CFRelease(v22);
      }
      memcpy(a4, v13, a5);
      return 0;
    }
    v15 = *__error();
    ktrace_log_init();
    v16 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v26 = a3;
      v27 = 2048;
      *(_QWORD *)v28 = v24;
      *(_WORD *)&v28[8] = 1024;
      v29 = v15;
      _os_log_error_impl(&dword_1AF33A000, v16, OS_LOG_TYPE_ERROR, "sysctlbyname(%s) needs too much space %zu (%{errno}d)", buf, 0x1Cu);
    }
    *__error() = v15;
    return 22;
  }
}

uint64_t sysctlbyname_uint32(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberSInt32Type);
}

uint64_t sysctlbyname_uint(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberIntType);
}

uint64_t sysctlbyname_int(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberIntType);
}

uint64_t sysctl_string(__CFDictionary *a1, const void *a2, int *a3, u_int a4, _QWORD *a5)
{
  void *v10;
  void *v11;
  CFStringRef v12;
  CFStringRef v13;
  uint64_t result;
  size_t v15;

  v15 = 0;
  if (!a5)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (sysctl(a3, a4, 0, &v15, 0, 0) < 0 && (*__error() == 2 || *__error() == 1))
    return *__error();
  v10 = malloc_type_malloc(++v15, 0x276C1F5CuLL);
  if (v10)
  {
    v11 = v10;
    if (sysctl(a3, a4, v10, &v15, 0, 0) < 0)
    {
      free(v11);
      return *__error();
    }
    *((_BYTE *)v11 + v15) = 0;
    v12 = CFStringCreateWithCString(0, (const char *)v11, 0x600u);
    if (v12)
    {
      v13 = v12;
      CFDictionarySetValue(a1, a2, v12);
      CFRelease(v13);
      result = 0;
      *a5 = v11;
      return result;
    }
    free(v11);
  }
  return 12;
}

uint64_t sysctl_uint(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  return sysctl_number_internal(a1, a2, a3, a4, a5, 4uLL, kCFNumberIntType);
}

uint64_t sysctl_number_internal(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5, size_t a6, CFNumberType a7)
{
  size_t v14;
  char *v15;
  int v16;
  int v18;
  CFNumberRef v19;
  CFNumberRef v20;
  size_t v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a5)
    ktrace_remotetime_update_params_cold_1();
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v15, v14);
  v21[0] = a6;
  if (sysctl(a3, a4, v15, v21, 0, 0) < 0)
  {
    v18 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      sysctl_number_internal_cold_5();
    *__error() = v18;
    return *__error();
  }
  else if (v21[0] <= a6)
  {
    v19 = CFNumberCreate(0, a7, v15);
    if (v19)
    {
      v20 = v19;
      CFDictionarySetValue(a1, a2, v19);
      CFRelease(v20);
      memcpy(a5, v15, a6);
      return 0;
    }
    else
    {
      return 12;
    }
  }
  else
  {
    v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      sysctl_number_internal_cold_6();
    *__error() = v16;
    return 22;
  }
}

uint64_t sysctl_uint64(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  return sysctl_number_internal(a1, a2, a3, a4, a5, 8uLL, kCFNumberSInt64Type);
}

const void *create_dict(UInt8 *bytes, CFIndex length)
{
  const __CFData *v2;
  const __CFData *v3;
  CFPropertyListRef v4;
  const void *v5;
  CFTypeID v6;
  int v7;
  CFErrorRef v8;
  int v9;
  _BOOL4 v10;
  CFErrorRef error;

  error = 0;
  v2 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFPropertyListCreateWithData(0, v2, 0, 0, &error);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 != CFDictionaryGetTypeID())
    {
      v7 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        create_dict_cold_3();
      *__error() = v7;
      CFRelease(v5);
      v5 = 0;
    }
  }
  else
  {
    v8 = error;
    v9 = *__error();
    ktrace_log_init();
    v10 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10)
        create_dict_cold_2();
    }
    else if (v10)
    {
      create_dict_cold_1();
    }
    v5 = 0;
    *__error() = v9;
  }
  CFRelease(v3);
  if (error)
    CFRelease(error);
  return v5;
}

uint64_t dict_string(const __CFDictionary *a1, void *key, __CFDictionary *a3, const void *a4, char **a5)
{
  const __CFString *Value;
  const __CFString *v9;
  CFTypeID v10;
  CFIndex Length;
  CFIndex v12;
  char *v13;
  char *v14;
  uint64_t result;
  int v16;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!key)
    ktrace_remotetime_update_params_cold_1();
  if (!a5)
    ktrace_remotetime_update_params_cold_1();
  Value = (const __CFString *)CFDictionaryGetValue(a1, key);
  if (!Value)
    return 22;
  v9 = Value;
  v10 = CFGetTypeID(Value);
  if (v10 != CFStringGetTypeID())
  {
    v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_string_cold_5();
    *__error() = v16;
    return 22;
  }
  if (a3)
  {
    if (!a4)
      ktrace_remotetime_update_params_cold_1();
    CFDictionarySetValue(a3, a4, v9);
  }
  Length = CFStringGetLength(v9);
  v12 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v13 = (char *)malloc_type_malloc(v12, 0x2014CD84uLL);
  if (v13)
  {
    v14 = v13;
    if (CFStringGetCString(v9, v13, v12, 0x8000100u))
    {
      result = 0;
      *a5 = v14;
      return result;
    }
    free(v14);
    return 22;
  }
  return 12;
}

uint64_t dict_uint64(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberSInt64Type);
}

uint64_t dict_number_internal(const __CFDictionary *a1, void *key, void *a3, CFNumberType a4)
{
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  int v10;
  NSObject *v11;
  int v13;
  int v14;
  int v15;
  const __CFNumber *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  CFRange v22;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!key)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (!Value)
    return 22;
  v8 = Value;
  v9 = CFGetTypeID(Value);
  if (v9 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v8, a4, a3))
    {
      v10 = *__error();
      ktrace_log_init();
      v11 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        v15 = 138412802;
        v16 = v8;
        v17 = 2112;
        v18 = key;
        v19 = 1024;
        v20 = v10;
        _os_log_error_impl(&dword_1AF33A000, v11, OS_LOG_TYPE_ERROR, "dictionary number %@ at key '%@' is not the right type (%{errno}d)", (uint8_t *)&v15, 0x1Cu);
      }
      *__error() = v10;
      return 22;
    }
    return 0;
  }
  if (v9 != CFDataGetTypeID())
  {
    v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_number_internal_cold_5();
    *__error() = v13;
    return 22;
  }
  if (CFDataGetLength(v8) == 4)
  {
    v22.location = 0;
    v22.length = 4;
    CFDataGetBytes(v8, v22, (UInt8 *)a3);
    return 0;
  }
  *__error() = 34;
  v14 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    dict_number_internal_cold_4();
  *__error() = v14;
  return 34;
}

uint64_t dict_uint32(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberSInt32Type);
}

uint64_t dict_int(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberIntType);
}

uint64_t dict_BOOL(const __CFDictionary *a1, void *key, BOOL *a3)
{
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;
  int v7;
  uint64_t result;
  int v9;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!key)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  Value = (const __CFBoolean *)CFDictionaryGetValue(a1, key);
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == CFBooleanGetTypeID())
    {
      v7 = CFBooleanGetValue(v5);
      result = 0;
      *a3 = v7 != 0;
      return result;
    }
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_BOOL_cold_5();
  }
  else
  {
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_BOOL_cold_4();
  }
  *__error() = v9;
  return 22;
}

uint64_t dict_data(const __CFDictionary *a1, const void *a2, UInt8 **a3, CFIndex *a4)
{
  const __CFData *Value;
  const __CFData *v7;
  CFTypeID v8;
  size_t Length;
  CFIndex v10;
  UInt8 *v11;
  UInt8 *v12;
  uint64_t result;
  int v14;
  CFRange v15;

  Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_BOOL_cold_4();
    goto LABEL_11;
  }
  v7 = Value;
  v8 = CFGetTypeID(Value);
  if (v8 != CFDataGetTypeID())
  {
    v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_data_cold_2();
LABEL_11:
    *__error() = v14;
    return 22;
  }
  Length = CFDataGetLength(v7);
  if (!Length)
  {
    *a3 = 0;
    if (a4)
    {
      result = 0;
      *a4 = 0;
      return result;
    }
    return 0;
  }
  v10 = Length;
  v11 = (UInt8 *)malloc_type_malloc(Length, 0xCA18849AuLL);
  if (v11)
  {
    v12 = v11;
    v15.location = 0;
    v15.length = v10;
    CFDataGetBytes(v7, v15, v11);
    *a3 = v12;
    if (a4)
    {
      result = 0;
      *a4 = v10;
      return result;
    }
    return 0;
  }
  return *__error();
}

CFIndex dict_uint64_arr(const __CFDictionary *a1, void *a2, _QWORD *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberSInt64Type, 8);
}

CFIndex dict_number_arr_internal(const __CFDictionary *a1, void *key, _QWORD *a3, _DWORD *a4, CFNumberType a5, uint64_t a6)
{
  const __CFArray *Value;
  const __CFArray *v11;
  CFTypeID v12;
  CFIndex result;
  uint64_t v14;
  CFIndex v15;
  unsigned int v16;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v18;
  CFTypeID v19;
  int v20;
  int v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  uint8_t buf[4];
  _BYTE v28[14];
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!key)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
  if (!Value)
  {
    v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_BOOL_cold_4();
    goto LABEL_19;
  }
  v11 = Value;
  v12 = CFGetTypeID(Value);
  if (v12 != CFArrayGetTypeID())
  {
    v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_number_arr_internal_cold_6();
LABEL_19:
    *__error() = v20;
    return 22;
  }
  result = CFArrayGetCount(v11);
  if (result)
  {
    v14 = result;
    v26 = (char *)malloc_type_malloc(result * a6, 0x559DC39AuLL);
    if (v26)
    {
      if (v14 < 1)
      {
LABEL_14:
        result = 0;
        *a3 = v26;
        *a4 = v14;
        return result;
      }
      v15 = 0;
      v16 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v15);
        if (!ValueAtIndex)
        {
          v21 = *__error();
          ktrace_log_init();
          v22 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            goto LABEL_28;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v28 = v16;
          *(_WORD *)&v28[4] = 2112;
          *(_QWORD *)&v28[6] = v11;
          v29 = 1024;
          v30 = v21;
          v23 = "element %u missing from array: %@ (%{errno}d)";
          v24 = v22;
LABEL_30:
          _os_log_error_impl(&dword_1AF33A000, v24, OS_LOG_TYPE_ERROR, v23, buf, 0x18u);
          goto LABEL_28;
        }
        v18 = ValueAtIndex;
        v19 = CFGetTypeID(ValueAtIndex);
        if (v19 != CFNumberGetTypeID())
          break;
        if (!CFNumberGetValue(v18, a5, &v26[v15 * a6]))
        {
          v21 = *__error();
          ktrace_log_init();
          v25 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            goto LABEL_28;
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)v28 = v18;
          *(_WORD *)&v28[8] = 1024;
          *(_DWORD *)&v28[10] = v16;
          v29 = 1024;
          v30 = v21;
          v23 = "array number '%@' at index %u is not the right type (%{errno}d)";
          v24 = v25;
          goto LABEL_30;
        }
        v15 = ++v16;
        if (v14 <= v16)
          goto LABEL_14;
      }
      v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        dict_number_arr_internal_cold_5();
LABEL_28:
      *__error() = v21;
      free(v26);
      return 22;
    }
    return *__error();
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

CFIndex dict_uint32_arr(const __CFDictionary *a1, void *a2, _QWORD *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberSInt32Type, 4);
}

CFIndex dict_int_arr(const __CFDictionary *a1, void *a2, _QWORD *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberIntType, 4);
}

uint64_t dict_set_string(__CFDictionary *a1, const void *a2, char *cStr)
{
  CFStringRef Mutable;
  CFStringRef v6;
  int v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (cStr)
    Mutable = CFStringCreateWithCString(0, cStr, 0x600u);
  else
    Mutable = CFStringCreateMutable(0, 1);
  v6 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(a1, a2, Mutable);
    CFRelease(v6);
    return 0;
  }
  else
  {
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_set_string_cold_3();
    *__error() = v8;
    return 12;
  }
}

uint64_t dict_set_cfstring(__CFDictionary *a1, const void *a2, CFStringRef theString, char **a4)
{
  CFIndex Length;
  CFIndex v9;
  char *v10;
  char *v11;
  int v12;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  Length = CFStringGetLength(theString);
  v9 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v10 = (char *)malloc_type_malloc(v9, 0xDD986364uLL);
  if (v10)
  {
    v11 = v10;
    if (CFStringGetCString(theString, v10, v9, 0x8000100u))
    {
      if (a4)
        *a4 = v11;
      else
        free(v11);
      CFDictionarySetValue(a1, a2, theString);
      return 0;
    }
    else
    {
      free(v11);
      return 22;
    }
  }
  else
  {
    v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_set_cfstring_cold_3();
    *__error() = v12;
    return 12;
  }
}

uint64_t dict_set_uint64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberSInt64Type);
}

uint64_t dict_set_number(__CFDictionary *a1, const void *a2, const void *a3, CFNumberType theType)
{
  CFNumberRef v6;
  CFNumberRef v7;
  int v9;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v6 = CFNumberCreate(0, theType, a3);
  if (v6)
  {
    v7 = v6;
    CFDictionarySetValue(a1, a2, v6);
    CFRelease(v7);
    return 0;
  }
  else
  {
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_set_number_cold_4();
    *__error() = v9;
    return 22;
  }
}

uint64_t dict_set_uint32(__CFDictionary *a1, const void *a2, int a3)
{
  int v4;

  v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberSInt32Type);
}

uint64_t dict_set_int(__CFDictionary *a1, const void *a2, int a3)
{
  int v4;

  v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberIntType);
}

uint64_t dict_set_BOOL(__CFDictionary *a1, const void *a2, int a3)
{
  const void **v3;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v3 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(a1, a2, *v3);
  return 0;
}

uint64_t dict_set_data(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6;
  CFDataRef v7;

  v6 = CFDataCreate(0, bytes, length);
  if (!v6)
    return 12;
  v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t dict_set_uint64_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 8, kCFNumberSInt64Type);
}

uint64_t dict_set_number_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex capacity, uint64_t a5, CFNumberType a6)
{
  int v9;
  uint64_t v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  NSObject *v21;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v9 = capacity;
  v12 = capacity;
  Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v14 = Mutable;
    if (a3 && v9)
    {
      v15 = 0;
      while (1)
      {
        v16 = CFNumberCreate(0, a6, a3);
        if (!v16)
          break;
        v17 = v16;
        CFArrayAppendValue(v14, v16);
        CFRelease(v17);
        ++v15;
        a3 += a5;
        if (v12 == v15)
          goto LABEL_9;
      }
      v20 = *__error();
      ktrace_log_init();
      v21 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        dict_set_number_arr_cold_4(v15, v20, v21);
      *__error() = v20;
      v18 = 22;
    }
    else
    {
LABEL_9:
      CFDictionarySetValue(a1, a2, v14);
      v18 = 0;
    }
    CFRelease(v14);
  }
  else
  {
    v19 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dict_set_number_arr_cold_3();
    *__error() = v19;
    return 22;
  }
  return v18;
}

uint64_t dict_set_uint32_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 4, kCFNumberSInt32Type);
}

uint64_t dict_set_int_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 4, kCFNumberIntType);
}

UInt8 *aasprintf(char *a1, ...)
{
  CFDataRef v1;
  UInt8 *bytes[2];
  va_list va;

  va_start(va, a1);
  bytes[0] = 0;
  va_copy((va_list)&bytes[1], va);
  vasprintf((char **)bytes, a1, va);
  if (!bytes[0])
    ktrace_remotetime_update_params_cold_1();
  v1 = CFDataCreateWithBytesNoCopy(0, bytes[0], 1, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  CFAutorelease(v1);
  return bytes[0];
}

CFStringRef cfaasprintf(char *a1, ...)
{
  size_t v1;
  CFStringRef v2;
  CFStringRef v3;
  char *__s[2];
  va_list va;

  va_start(va, a1);
  __s[0] = 0;
  va_copy((va_list)&__s[1], va);
  vasprintf(__s, a1, va);
  if (!__s[0])
    ktrace_remotetime_update_params_cold_1();
  v1 = strlen(__s[0]);
  v2 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)__s[0], v1, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  v3 = v2;
  CFAutorelease(v2);
  return v3;
}

char *utf8_nullable(const __CFString *a1)
{
  if (a1)
    return utf8(a1);
  else
    return "<null>";
}

char *utf8(const __CFString *a1)
{
  char *CStringPtr;
  CFIndex v3;
  char *v4;
  CFIndex Length;
  CFIndex v6;
  char *v7;
  CFDataRef v8;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    v3 = CFStringGetLength(a1) + 1;
    v4 = (char *)malloc_type_malloc(v3, 0xBBD065C4uLL);
    if (!v4)
      ktrace_remotetime_update_params_cold_1();
    CStringPtr = v4;
    if (!CFStringGetCString(a1, v4, v3, 0x8000100u))
    {
      Length = CFStringGetLength(a1);
      v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      free(CStringPtr);
      v7 = (char *)malloc_type_malloc(v6, 0xC51E0DBCuLL);
      if (!v7)
        ktrace_remotetime_update_params_cold_1();
      CStringPtr = v7;
      if (!CFStringGetCString(a1, v7, v6, 0x8000100u))
        ktrace_remotetime_update_params_cold_1();
    }
    v8 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)CStringPtr, 1, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    CFAutorelease(v8);
  }
  return CStringPtr;
}

char *uuid_string(uint64_t a1, uint64_t a2)
{
  char *v2;
  CFDataRef v3;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  v2 = (char *)malloc_type_calloc(1uLL, 0x25uLL, 0x1000040C946DD6EuLL);
  uuid_unparse((const unsigned __int8 *)v5, v2);
  v3 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v2, 1, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  CFAutorelease(v3);
  return v2;
}

uint64_t CFSetApplierTrampoline(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFDictionaryApplierTrampoline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t CFArrayApplierTrampoline(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

uint64_t ktrace_chunk_tag(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 32);
}

uint64_t ktrace_chunk_version_major(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_WORD *)(a1 + 36) & 0x7FFF;
}

uint64_t ktrace_chunk_version_minor(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int16 *)(a1 + 38);
}

uint64_t ktrace_chunk_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 8);
}

uint64_t ktrace_chunk_is_64_bit(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)a1)
    return *(unsigned __int8 *)(*(_QWORD *)a1 + 298);
  else
    return current_system_is_64_bit();
}

uint64_t ktrace_chunk_copy_data(uint64_t *a1, uint64_t a2, void *a3, size_t a4)
{
  size_t v6;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  int v12;
  size_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  v6 = a1[1];
  if (v6 < a4)
    ktrace_remotetime_update_params_cold_1();
  if (a2 < 0)
    ktrace_remotetime_update_params_cold_1();
  if (a4 + a2 > v6)
    ktrace_remotetime_update_params_cold_1();
  v8 = *a1;
  if (!*a1)
    return 45;
  if (ktrace_file_read(v8, a3, a4, a1[2] + a2) >= (uint64_t)a4)
    return 0;
  ktrace_log_init();
  v9 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
  {
    v11 = a1[2] + a2;
    v12 = 134218240;
    v13 = a4;
    v14 = 2048;
    v15 = v11;
    _os_log_debug_impl(&dword_1AF33A000, v9, OS_LOG_TYPE_DEBUG, "cannot read %zu bytes at offset %lld", (uint8_t *)&v12, 0x16u);
  }
  return *__error();
}

const UInt8 *ktrace_chunk_map_data(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const UInt8 *result;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  off_t v16;
  char *v17;
  char *v18;
  size_t v19;
  char *v20;
  off_t v21;
  ssize_t v22;
  int v23;
  NSObject *v24;
  int *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  off_t v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = *a1;
  if (!*a1)
  {
    *__error() = 45;
    v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_chunk_map_data_cold_2();
    goto LABEL_17;
  }
  if (!a3)
  {
    *__error() = 22;
    v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_chunk_map_data_cold_3();
LABEL_17:
    v13 = __error();
    result = 0;
    *v13 = v12;
    return result;
  }
  if ((a2 & 0x8000000000000000) != 0)
    ktrace_remotetime_update_params_cold_1();
  v7 = a1[1];
  if (v7 <= a2)
    ktrace_remotetime_update_params_cold_1();
  if (v7 < a3)
    ktrace_remotetime_update_params_cold_1();
  if (a3 + a2 > v7)
    ktrace_remotetime_update_params_cold_1();
  if (v4 == -1)
    return CFDataGetBytePtr((CFDataRef)a1[2]);
  v8 = a1[2] + a2;
  v9 = *(_QWORD *)(v4 + 240);
  if (v9)
  {
    v10 = *(_QWORD *)(v4 + 280);
    if (v8 >= (uint64_t)v10)
      ktrace_remotetime_update_params_cold_1();
    if (v8 + a3 > v10)
      ktrace_remotetime_update_params_cold_1();
    return (const UInt8 *)(v9 + v8);
  }
  v14 = getpagesize();
  if (v14 <= 0)
    ktrace_remotetime_update_params_cold_1();
  v15 = v8 & (v14 - 1);
  v16 = v8 & -v14;
  if (*(_BYTE *)(v4 + 301))
  {
    v17 = (char *)mmap(0, v15 + a3, 1, 1, *(_DWORD *)(v4 + 196), v16);
LABEL_22:
    if (v17 != (char *)-1)
      return (const UInt8 *)&v17[v15];
  }
  else
  {
    v18 = (char *)mmap(0, v15 + a3, 3, 4098, -1, 0);
    if (v18 != (char *)-1)
    {
      v17 = v18;
      if (!(v15 + a3))
        return (const UInt8 *)&v17[v15];
      v19 = v15 + a3;
      v20 = v18;
      v21 = v16;
      while (1)
      {
        v22 = pread(*(_DWORD *)(*a1 + 196), v20, v19, v21);
        if (!v22)
          break;
        if (v22 <= 0)
          goto LABEL_33;
        if (v19 < v22)
          ktrace_chunk_map_data_cold_6();
        v20 += v22;
        v21 += v22;
        v19 -= v22;
        if (!v19)
          goto LABEL_22;
      }
      *__error() = 5;
LABEL_33:
      munmap(v17, v15 + a3);
    }
  }
  v23 = *__error();
  ktrace_log_init();
  v24 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    v26 = 134219008;
    v27 = v15 + a3;
    v28 = 2048;
    v29 = a3;
    v30 = 2048;
    v31 = v16;
    v32 = 2048;
    v33 = a2;
    v34 = 1024;
    v35 = v23;
    _os_log_error_impl(&dword_1AF33A000, v24, OS_LOG_TYPE_ERROR, "failed to map %zu (%zu) bytes chunk data at offset %lld (%lld) (%{errno}d)", (uint8_t *)&v26, 0x30u);
  }
  v25 = __error();
  result = 0;
  *v25 = v23;
  return result;
}

uint64_t ktrace_chunk_unmap_data(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if (a2 && (unint64_t)(*(_QWORD *)result + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)result + 240))
    return ktrace_chunk_unmap_data_internal(a2, a3);
  return result;
}

uint64_t ktrace_chunk_unmap_data_internal(unint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = getpagesize();
  if (v4 <= 0)
    ktrace_remotetime_update_params_cold_1();
  result = munmap((void *)(-v4 & a1), ((v4 - 1) & a1) + a2);
  if ((_DWORD)result)
    ktrace_chunk_unmap_data_internal_cold_1();
  return result;
}

CFDataRef ktrace_chunk_copy_cfdata(uint64_t a1, unint64_t a2, void *a3)
{
  const UInt8 *v5;
  const UInt8 *v6;
  const __CFAllocator *v7;
  const __CFAllocator *v8;
  CFDataRef v9;
  CFAllocatorContext v11;

  if (*(_QWORD *)a1 == -1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 16));
    return *(CFDataRef *)(a1 + 16);
  }
  else
  {
    v5 = ktrace_chunk_map_data((uint64_t *)a1, a2, (unint64_t)a3);
    if (v5)
    {
      v6 = v5;
      v11.version = 0;
      memset(&v11.retain, 0, 40);
      v11.info = a3;
      v11.deallocate = (CFAllocatorDeallocateCallBack)callback_unmap_chunk;
      v11.preferredSize = 0;
      v7 = CFAllocatorCreate(0, &v11);
      if (!v7)
        ktrace_remotetime_update_params_cold_1();
      v8 = v7;
      v9 = CFDataCreateWithBytesNoCopy(0, v6, (CFIndex)a3, v7);
      CFRelease(v8);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

CFPropertyListRef ktrace_chunk_copy_plist(uint64_t a1)
{
  void *v2;
  const __CFData *v3;
  const __CFData *v4;
  CFPropertyListRef v5;
  int v6;
  NSObject *v7;
  int v8;
  CFErrorRef error;

  v2 = (void *)ktrace_chunk_size(a1);
  v3 = ktrace_chunk_copy_cfdata(a1, 0, v2);
  if (v3)
  {
    v4 = v3;
    error = 0;
    v5 = CFPropertyListCreateWithData(0, v3, 0, 0, &error);
    CFRelease(v4);
    if (!v5)
    {
      v6 = *__error();
      ktrace_log_init();
      v7 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_chunk_copy_plist_cold_2(&error, v6, v7);
      *__error() = v6;
      CFRelease(error);
    }
  }
  else
  {
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_chunk_copy_plist_cold_1();
    v5 = 0;
    *__error() = v8;
  }
  return v5;
}

const char *utf8_cferror(__CFError *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  char *v3;

  if (!a1)
    return "unknown error";
  v1 = CFErrorCopyDescription(a1);
  if (!v1)
    return "unknown error";
  v2 = v1;
  v3 = utf8(v1);
  CFRelease(v2);
  return v3;
}

uint64_t ktrace_chunk_overwrite(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v9;
  const UInt8 *BytePtr;
  NSObject *v11;
  uint64_t v12;
  int v13;
  size_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  if (a4 + a2 > *(_QWORD *)(a1 + 8))
    return 34;
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 45;
  if (v9 == -1)
  {
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
    memcpy((void *)&BytePtr[a2], a3, a4);
    return 0;
  }
  if (ktrace_file_write(v9, a3, a4, *(_QWORD *)(a1 + 16) + a2) >= a4)
    return 0;
  ktrace_log_init();
  v11 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_QWORD *)(a1 + 16) + a2;
    v13 = 134218240;
    v14 = a4;
    v15 = 2048;
    v16 = v12;
    _os_log_debug_impl(&dword_1AF33A000, v11, OS_LOG_TYPE_DEBUG, "cannot write %zu bytes at offset %lld", (uint8_t *)&v13, 0x16u);
  }
  return *__error();
}

uint64_t ktrace_chunk_iterate_subchunks(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v10;
  _QWORD *v12;

  v12 = a2;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v5 = (uint64_t)(a1 + 6);
  v6 = ktrace_chunk_array_validate_chunk(*a1, (uint64_t)(a1 + 6), &v12);
  if ((_DWORD)v6)
  {
    v7 = v6;
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_chunk_iterate_subchunks_cold_3();
    *__error() = v8;
  }
  else
  {
    if (v12)
    {
      do
      {
        if (!(*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
          break;
      }
      while (!ktrace_chunk_array_next(*a1, v5, &v12) && v12 != 0);
    }
    else
    {
      ktrace_log_init();
      v10 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_chunk_iterate_subchunks_cold_2(v10);
    }
    return 0;
  }
  return v7;
}

void ktrace_chunk_destroy(_QWORD *a1)
{
  const void *v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*a1 != -1)
    ktrace_remotetime_update_params_cold_1();
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  free(a1);
}

void kteventnames_append(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  uint64_t v5;
  const __CFArray *v6;
  _QWORD v7[5];
  _QWORD context[5];
  CFRange v9;
  CFRange v10;

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_BYTE *)(a1 + 32) & 2) != 0 || (byte_1EEE3BED0 & 6) == 6)
  {
    append_eventnames_from_dir(a2, "/usr/share/misc");
    append_eventnames_from_dir(a2, "/usr/local/share/misc");
  }
  v4 = *(const __CFArray **)(a1 + 16);
  v9.length = CFArrayGetCount(v4);
  v5 = MEMORY[0x1E0C809B0];
  context[0] = MEMORY[0x1E0C809B0];
  context[1] = 3221225472;
  context[2] = __kteventnames_append_block_invoke;
  context[3] = &__block_descriptor_40_e9_v16__0_v8l;
  context[4] = a2;
  v9.location = 0;
  CFArrayApplyFunction(v4, v9, (CFArrayApplierFunction)CFArrayApplierTrampoline, context);
  v6 = *(const __CFArray **)(a1 + 24);
  v10.length = CFArrayGetCount(v6);
  v7[0] = v5;
  v7[1] = 3221225472;
  v7[2] = __kteventnames_append_block_invoke_2;
  v7[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v7[4] = a2;
  v10.location = 0;
  CFArrayApplyFunction(v6, v10, (CFArrayApplierFunction)CFArrayApplierTrampoline, v7);
}

uint64_t kteventnames_using_default(uint64_t a1)
{
  if ((~byte_1EEE3BED0 & 6) != 0)
    return (*(unsigned __int8 *)(a1 + 32) >> 1) & 1;
  else
    return 1;
}

DIR *__kteventnames_append_block_invoke(uint64_t a1, char *a2)
{
  return append_eventnames_from_dir(*(_QWORD *)(a1 + 32), a2);
}

DIR *append_eventnames_from_dir(uint64_t a1, char *a2)
{
  DIR *result;
  DIR *v5;
  dirent *i;
  const char *d_name;
  char __str[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = opendir(a2);
  if (result)
  {
    v5 = result;
    for (i = readdir(result); i; i = readdir(v5))
    {
      d_name = i->d_name;
      if (issuffix(i->d_name, ".codes"))
      {
        snprintf(__str, 0x400uLL, "%s/%s", a2, d_name);
        append_eventnames_from_path(a1, __str);
      }
    }
    return (DIR *)closedir(v5);
  }
  return result;
}

_DWORD *__kteventnames_append_block_invoke_2(uint64_t a1, char *a2)
{
  return append_eventnames_from_path(*(_QWORD *)(a1 + 32), a2);
}

_DWORD *append_eventnames_from_path(uint64_t a1, char *a2)
{
  _DWORD *result;
  int v4;
  NSObject *v5;

  result = ktrace_file_append_file(a1, 32783, 0, 0, a2, 0, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
    v4 = *__error();
    ktrace_log_init();
    v5 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      append_eventnames_from_path_cold_1((uint64_t)a2, v4, v5);
    result = __error();
    *result = v4;
  }
  return result;
}

uint64_t kteventnames_add_path(CFMutableDictionaryRef *a1, char *a2)
{
  uint64_t v4;
  char *v5;

  os_unfair_lock_lock((os_unfair_lock_t)&global);
  v4 = kteventnames_add_path_locked(a1, a2);
  if (!(_DWORD)v4)
  {
    v5 = strdup(a2);
    if (!v5)
      ktrace_remotetime_update_params_cold_1();
    CFArrayAppendValue(a1[3], v5);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  return v4;
}

uint64_t kteventnames_add_path_locked(CFMutableDictionaryRef *a1, char *__filename)
{
  FILE *v3;
  FILE *v4;

  v3 = fopen(__filename, "r");
  if (!v3)
    return *__error();
  v4 = v3;
  kteventnames_add_stream(a1, v3);
  fclose(v4);
  return 0;
}

BOOL kteventnames_add_chunks(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if ((*(_BYTE *)(a1 + 32) & 6) != 2)
    return 0;
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __kteventnames_add_chunks_block_invoke;
  v6[3] = &unk_1E5F6FE28;
  v6[4] = &v7;
  v6[5] = a1;
  LODWORD(a2) = ktrace_file_iterate(a2, 0, (uint64_t)v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  if ((_DWORD)a2)
    v4 = 1;
  else
    v4 = *((_DWORD *)v8 + 6) != 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1AF34D250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __kteventnames_add_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  const __CFData *v17;
  const __CFData *v18;
  CFMutableDictionaryRef *v19;
  UInt8 *BytePtr;
  size_t Length;
  FILE *v22;
  FILE *v23;
  uint64_t result;
  int *v25;
  void *context;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (ktrace_chunk_tag(a2) == 20986)
  {
    v4 = *(CFMutableDictionaryRef **)(a1 + 40);
    v5 = (void *)ktrace_chunk_copy_plist(a2);
    context = (void *)MEMORY[0x1AF45DCBC]();
    v27 = v5;
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v6 = (void *)objc_msgSend(v5, "allValues", context);
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v33;
          do
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v33 != v9)
                objc_enumerationMutation(v6);
              v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v30 = 0u;
                v31 = 0u;
                v28 = 0u;
                v29 = 0u;
                v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
                if (v12)
                {
                  v13 = v12;
                  v14 = *(_QWORD *)v29;
                  do
                  {
                    for (j = 0; j != v13; ++j)
                    {
                      if (*(_QWORD *)v29 != v14)
                        objc_enumerationMutation(v11);
                      kteventnames_add_track(v4, 0, *(void **)(*((_QWORD *)&v28 + 1) + 8 * j));
                    }
                    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
                  }
                  while (v13);
                }
              }
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
          }
          while (v8);
        }
      }
    }
    objc_autoreleasePoolPop(context);

  }
  else if (ktrace_chunk_tag(a2) == 32783 && !ktrace_chunk_version_major(a2))
  {
    v16 = (void *)ktrace_chunk_size_t(a2);
    v17 = ktrace_chunk_copy_cfdata(a2, 0, v16);
    if (!v17)
    {
      v25 = __error();
      result = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *v25;
      return result;
    }
    v18 = v17;
    v19 = *(CFMutableDictionaryRef **)(a1 + 40);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v17);
    Length = CFDataGetLength(v18);
    v22 = fmemopen(BytePtr, Length, "r");
    if (!v22)
      ktrace_remotetime_update_params_cold_1();
    v23 = v22;
    kteventnames_add_stream(v19, v22);
    fclose(v23);
    CFRelease(v18);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) |= 4u;
  }
  return 1;
}

BOOL kteventnames_from_system(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 32) & 4) == 0;
}

uint64_t kteventnames_use_default(uint64_t result, int a2)
{
  char v2;

  if ((*(_BYTE *)(result + 32) & 1) != 0)
    ktrace_remotetime_update_params_cold_1();
  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 0xFD | v2;
  return result;
}

uint64_t kteventnames_using_global(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if ((v1 & 4) != 0)
    return 0;
  v2 = (v1 >> 1) & 1;
  if ((~byte_1EEE3BED0 & 6) != 0)
    return v2;
  else
    return 1;
}

CFMutableArrayRef kteventnames_init(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;
  CFMutableArrayRef v4;
  CFMutableArrayRef result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 2;
  Mutable = CFDictionaryCreateMutable(0, 0, &str_no_free_key_callbacks, &int_value_callbacks);
  *(_QWORD *)a1 = Mutable;
  if (!Mutable)
    ktrace_remotetime_update_params_cold_1();
  v3 = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, &str_no_free_value_callbacks);
  *(_QWORD *)(a1 + 8) = v3;
  if (!v3)
    ktrace_remotetime_update_params_cold_1();
  v4 = CFArrayCreateMutable(0, 0, &free_array_callbacks);
  *(_QWORD *)(a1 + 16) = v4;
  if (!v4)
    ktrace_remotetime_update_params_cold_1();
  result = CFArrayCreateMutable(0, 0, &free_array_callbacks);
  *(_QWORD *)(a1 + 24) = result;
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  return result;
}

void kteventnames_freeze(uint64_t *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t context;
  uint64_t v7;
  void (*v8)(uint64_t, const void *, const void *);
  void *v9;
  uint64_t v10;

  os_unfair_lock_lock((os_unfair_lock_t)&global);
  v2 = *((_BYTE *)a1 + 32);
  if ((v2 & 4) == 0 && ((a1[4] & 2) != 0 || (byte_1EEE3BED0 & 6) == 6))
  {
    ensure_global_names_locked();
    v3 = *a1;
    v4 = MEMORY[0x1E0C809B0];
    context = MEMORY[0x1E0C809B0];
    v7 = 3221225472;
    v8 = __copy_cfdict_block_invoke;
    v9 = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    v10 = v3;
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEE3BEA8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &context);
    v5 = a1[1];
    context = v4;
    v7 = 3221225472;
    v8 = __copy_cfdict_block_invoke;
    v9 = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    v10 = v5;
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEE3BEB0, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &context);
    v2 = *((_BYTE *)a1 + 32);
  }
  *((_BYTE *)a1 + 32) = v2 | 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
}

const void *kteventnames_name_from_id(uint64_t a1, void *key)
{
  unint64_t v3;
  const void *result;
  const void *Value;

  v3 = key;
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)key);
  if (!result)
  {
    if ((*(_BYTE *)(a1 + 32) & 5) == 0 && ((*(_BYTE *)(a1 + 32) & 2) != 0 || (byte_1EEE3BED0 & 6) == 6))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&global);
      ensure_global_names_locked();
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EEE3BEB0, (const void *)v3);
      os_unfair_lock_unlock((os_unfair_lock_t)&global);
      return Value;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ensure_global_names_locked()
{
  DIR *v0;
  DIR *v1;
  dirent *v2;
  const char *d_name;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  char __str[1024];
  uint8_t buf[4];
  char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  _QWORD v31[4];

  v31[1] = *MEMORY[0x1E0C80C00];
  if ((byte_1EEE3BED0 & 1) != 0)
    return;
  kteventnames_init((uint64_t)&qword_1EEE3BEA8);
  v0 = opendir("/AppleInternal/Library/Ariadne/Plists/");
  if (!v0)
    goto LABEL_26;
  v1 = v0;
  while (1)
  {
    v2 = readdir(v1);
    if (!v2)
      break;
    d_name = v2->d_name;
    if (issuffix(v2->d_name, ".plist"))
    {
      snprintf(__str, 0x400uLL, "%s/%s", "/AppleInternal/Library/Ariadne/Plists/", d_name);
      v23 = 0;
      v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __str);
      if (objc_msgSend(v4, "hasSuffix:", CFSTR(".plist")))
      {
        v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DB0], "inputStreamWithFileAtPath:", v4);
        if (!v5)
        {
          *__error() = 2;
          v12 = *__error();
          ktrace_log_init();
          v13 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            goto LABEL_22;
          *(_DWORD *)buf = 136315394;
          v26 = __str;
          v27 = 1024;
          LODWORD(v28) = v12;
          v14 = v13;
          v15 = "failed to open file at %s (%{errno}d)";
          v16 = 18;
          goto LABEL_24;
        }
        v6 = v5;
        objc_msgSend(v5, "open");
        v7 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithStream:options:format:error:", v6, 0, 0, &v23);
        objc_msgSend(v6, "close");
        if (v7)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v31[0] = v7;
            v7 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 1);
          }
          v21 = 0u;
          v22 = 0u;
          v19 = 0u;
          v20 = 0u;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, buf, 16);
          if (v8)
          {
            v9 = v8;
            v10 = *(_QWORD *)v20;
            do
            {
              for (i = 0; i != v9; ++i)
              {
                if (*(_QWORD *)v20 != v10)
                  objc_enumerationMutation(v7);
                kteventnames_add_track((CFMutableDictionaryRef *)&qword_1EEE3BEA8, 0, *(void **)(*((_QWORD *)&v19 + 1) + 8 * i));
              }
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, buf, 16);
            }
            while (v9);
          }
        }
        else
        {
          *__error() = 79;
          v12 = *__error();
          ktrace_log_init();
          v17 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            goto LABEL_22;
          v18 = objc_msgSend((id)objc_msgSend(v23, "localizedDescription"), "UTF8String");
          *(_DWORD *)buf = 136315650;
          v26 = __str;
          v27 = 2080;
          v28 = v18;
          v29 = 1024;
          v30 = v12;
          v14 = v17;
          v15 = "failed to read Ariadne signpost file at %s as plist: %s (%{errno}d)";
          v16 = 28;
LABEL_24:
          _os_log_error_impl(&dword_1AF33A000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
LABEL_22:
          *__error() = v12;
          __error();
        }
      }
    }
  }
  closedir(v1);
LABEL_26:
  kteventnames_add_dir("/usr/share/misc");
  kteventnames_add_dir("/usr/local/share/misc");
  byte_1EEE3BED0 |= 1u;
}

const void *kteventnames_id_from_name(uint64_t a1, const void *a2)
{
  const void *Value;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
  if (!(_DWORD)Value)
  {
    if ((*(_BYTE *)(a1 + 32) & 5) == 0 && ((*(_BYTE *)(a1 + 32) & 2) != 0 || (byte_1EEE3BED0 & 6) == 6))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&global);
      ensure_global_names_locked();
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EEE3BEA8, a2);
      os_unfair_lock_unlock((os_unfair_lock_t)&global);
    }
    else
    {
      return 0;
    }
  }
  return Value;
}

void kteventnames_destroy(CFTypeRef *a1)
{
  CFRelease(a1[1]);
  CFRelease(*a1);
  CFRelease(a1[2]);
  CFRelease(a1[3]);
}

void ktrace_set_default_event_names_enabled(int a1)
{
  char v2;

  os_unfair_lock_lock((os_unfair_lock_t)&global);
  if (a1 == 1)
    v2 = 6;
  else
    v2 = 2;
  byte_1EEE3BED0 = v2 | byte_1EEE3BED0 & 0xF9;
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
}

BOOL ktrace_get_default_event_names_enabled()
{
  return (~byte_1EEE3BED0 & 6) == 0;
}

uint64_t ktrace_add_codes_file(char *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  ensure_global_names_locked();
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  return kteventnames_add_path((CFMutableDictionaryRef *)&qword_1EEE3BEA8, a1);
}

char *issuffix(char *a1, const char *a2)
{
  char *result;

  result = strrchr(a1, *a2);
  if (result)
    return (char *)(strcmp(result, a2) == 0);
  return result;
}

void kteventnames_add_stream(CFMutableDictionaryRef *a1, FILE *__stream)
{
  char *v4;
  char *v5;
  const char *Value;
  const char *v7;
  NSObject *v8;
  const void *v9;
  size_t __linecapp;
  char *__linep;
  void *key;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  char *v18;
  char __s2[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  __linecapp = 0;
  __linep = 0;
  if (getline(&__linep, &__linecapp, __stream) >= 1)
  {
    do
    {
      v4 = __linep;
      v5 = strchr(__linep, 35);
      if (v5)
      {
        *v5 = 0;
        v4 = __linep;
      }
      if (*v4)
      {
        key = 0;
        if (sscanf(v4, "%x%127s", &key, __s2) == 2)
        {
          __s2[127] = 0;
          Value = (const char *)CFDictionaryGetValue(a1[1], key);
          if (Value)
          {
            v7 = Value;
            if (strcmp(Value, __s2))
            {
              ktrace_log_init();
              v8 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218498;
                v14 = key;
                v15 = 2080;
                v16 = v7;
                v17 = 2080;
                v18 = __s2;
                _os_log_debug_impl(&dword_1AF33A000, v8, OS_LOG_TYPE_DEBUG, "conflicting names for debugid %#lx: %s and %s", buf, 0x20u);
              }
            }
          }
          else
          {
            v9 = name_intern(__s2);
            CFDictionarySetValue(*a1, v9, key);
            CFDictionarySetValue(a1[1], key, v9);
          }
        }
      }
    }
    while (getline(&__linep, &__linecapp, __stream) > 0);
  }
  free(__linep);
}

const void *name_intern(void *value)
{
  const void *v2;
  size_t v3;
  size_t v4;
  char *v5;
  size_t v6;

  if (name_intern_nameset_once != -1)
    dispatch_once(&name_intern_nameset_once, &__block_literal_global);
  v2 = CFSetGetValue((CFSetRef)name_intern_nameset, value);
  if (!v2)
  {
    v3 = strlen((const char *)value) + 1;
    if (v3 >= 0x8000)
      ktrace_remotetime_update_params_cold_1();
    v4 = name_intern_namebuf_left;
    if (v3 >= name_intern_namebuf_left)
    {
      v5 = (char *)malloc_type_malloc(0x8000uLL, 0x9A8656EuLL);
      name_intern_namebuf_pos = (uint64_t)v5;
      if (!v5)
        ktrace_remotetime_update_params_cold_1();
      v4 = 0x8000;
      name_intern_namebuf_left = 0x8000;
    }
    else
    {
      v5 = (char *)name_intern_namebuf_pos;
    }
    v6 = strlcpy(v5, (const char *)value, v4);
    v2 = (const void *)name_intern_namebuf_pos;
    name_intern_namebuf_pos += v6 + 1;
    if (name_intern_namebuf_left < v6 + 1)
      ktrace_remotetime_update_params_cold_1();
    name_intern_namebuf_left -= v6 + 1;
    CFSetAddValue((CFMutableSetRef)name_intern_nameset, v2);
  }
  return v2;
}

CFMutableSetRef __name_intern_block_invoke()
{
  CFMutableSetRef result;

  result = CFSetCreateMutable(0, 0, &str_no_free_set_callbacks);
  name_intern_nameset = (uint64_t)result;
  return result;
}

void kteventnames_add_track(CFMutableDictionaryRef *a1, uint64_t a2, void *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t k;
  void *v27;
  const void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *value;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = (void *)MEMORY[0x1AF45DCBC]();
    v7 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Name"));
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v7 = (void *)objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR("_"));
      else
        v7 = 0;
    }
    v8 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Children"));
    if (v8 && (v9 = (void *)v8, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v30 != v12)
              objc_enumerationMutation(v9);
            kteventnames_add_track(a1, v7, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i));
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
        }
        while (v11);
      }
    }
    else if (v7)
    {
      if (a2)
        v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), a2, v7);
      v14 = name_intern((void *)objc_msgSend(v7, "UTF8String"));
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v15 = objc_msgSend(&unk_1E5F75150, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v35;
        do
        {
          for (j = 0; j != v16; ++j)
          {
            if (*(_QWORD *)v35 != v17)
              objc_enumerationMutation(&unk_1E5F75150);
            v19 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * j));
            if (v19)
            {
              value = 0;
              if (!_to_integer(v19, (unint64_t *)&value))
                goto LABEL_29;
              v20 = value;
              CFDictionarySetValue(*a1, v14, value);
              CFDictionarySetValue(a1[1], v20, v14);
            }
          }
          v16 = objc_msgSend(&unk_1E5F75150, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
        }
        while (v16);
      }
LABEL_29:
      v21 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Component"));
      value = 0;
      if (_to_integer(v21, (unint64_t *)&value))
      {
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v22 = objc_msgSend(&unk_1E5F75168, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
        if (v22)
        {
          v23 = v22;
          v24 = *(_QWORD *)v35;
          v25 = ((unint64_t)value << 16) | 0x2B000000;
          do
          {
            for (k = 0; k != v23; ++k)
            {
              if (*(_QWORD *)v35 != v24)
                objc_enumerationMutation(&unk_1E5F75168);
              v27 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * k));
              v33 = 0;
              if (_to_integer(v27, &v33))
              {
                v28 = (const void *)(v25 | (4 * (v33 & 0x3FFF)));
                CFDictionarySetValue(*a1, v14, v28);
                CFDictionarySetValue(a1[1], v28, v14);
              }
            }
            v23 = objc_msgSend(&unk_1E5F75168, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
          }
          while (v23);
        }
      }
    }
    objc_autoreleasePoolPop(v6);
  }
}

BOOL _to_integer(void *a1, unint64_t *a2)
{
  char *__endptr;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *a2 = objc_msgSend(a1, "unsignedLongValue");
    return 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      __endptr = 0;
      *a2 = strtoul((const char *)objc_msgSend(a1, "UTF8String"), &__endptr, 0);
      return *__endptr == 0;
    }
    else
    {
      return 0;
    }
  }
}

void __copy_cfdict_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
}

void kteventnames_add_dir(const char *a1)
{
  DIR *v2;
  DIR *v3;
  int v4;
  dirent *v5;
  const char *d_name;
  int v7;
  BOOL v8;
  char *v9;
  char __str[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = opendir(a1);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    while (1)
    {
      v5 = readdir(v3);
      if (!v5)
        break;
      d_name = v5->d_name;
      if (issuffix(v5->d_name, ".codes"))
      {
        snprintf(__str, 0x400uLL, "%s/%s", a1, d_name);
        v7 = kteventnames_add_path_locked((CFMutableDictionaryRef *)&qword_1EEE3BEA8, __str);
        if (v4)
          v8 = 1;
        else
          v8 = v7 == 0;
        if (!v8)
          v4 = v7;
      }
    }
    closedir(v3);
    if (!v4)
    {
      v9 = strdup(a1);
      if (!v9)
        ktrace_remotetime_update_params_cold_1();
      CFArrayAppendValue((CFMutableArrayRef)qword_1EEE3BEB8, v9);
    }
  }
}

uint64_t ktrace_events_all(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = ktrace_events_range(a1, 0, -1, a2);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t ktrace_events_range(uint64_t a1, int a2, int a3, const void *a4)
{
  _DWORD *v7;
  _DWORD *v8;
  void *v9;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v7 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v7)
    return 12;
  v8 = v7;
  *v7 = 0;
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = 0;
  v9 = _Block_copy(a4);
  result = 0;
  *((_QWORD *)v8 + 3) = v9;
  return result;
}

uint64_t ktrace_events_all_paired(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = ktrace_events_range_paired(a1, 0, 0xFFFFFFFF, a2);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t ktrace_events_range_paired(uint64_t a1, int a2, unsigned int a3, const void *a4)
{
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  void *v10;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v7 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v7)
    return 12;
  v8 = v7;
  *v7 = 0;
  v9 = (a3 + 3) & 0xFFFFFFFC;
  if (a3 > 0xFFFFFFFB)
    v9 = -1;
  v7[2] = a2 & 0xFFFFFFFC;
  v7[3] = v9;
  v7[4] = 1;
  v10 = _Block_copy(a4);
  result = 0;
  *((_QWORD *)v8 + 3) = v10;
  return result;
}

uint64_t ktrace_events_any(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  void *v5;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = ktrace_callback_list_add(a1, a1 + 40);
  if (!v3)
    return 12;
  v4 = v3;
  *v3 = 2;
  v3[4] = 0;
  v5 = _Block_copy(a2);
  result = 0;
  *((_QWORD *)v4 + 3) = v5;
  return result;
}

uint64_t ktrace_events_any_paired(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  void *v5;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = ktrace_callback_list_add(a1, a1 + 40);
  if (!v3)
    return 12;
  v4 = v3;
  *v3 = 2;
  v3[4] = 1;
  v5 = _Block_copy(a2);
  result = 0;
  *((_QWORD *)v4 + 3) = v5;
  return result;
}

uint64_t ktrace_events_single(uint64_t a1, int a2, const void *a3)
{
  return ktrace_events_range(a1, a2, a2 + 4, a3);
}

uint64_t ktrace_events_single_paired(uint64_t a1, int a2, const void *a3)
{
  return ktrace_events_range_paired(a1, a2, a2 + 4, a3);
}

uint64_t ktrace_events_filter_bitmap(uint64_t a1, const void *a2, const void *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v6 = malloc_type_malloc(0x2000uLL, 0x90BBD73uLL);
  if (!v6)
    return 12;
  v7 = v6;
  memcpy(v6, a2, 0x2000uLL);
  v8 = ktrace_events_filter_bitmap_internal(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8)
    free(v7);
  return v8;
}

uint64_t ktrace_events_filter_bitmap_internal(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v5 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v5)
    return 12;
  v6 = v5;
  *(_DWORD *)v5 = 1;
  v5[1] = a2;
  *((_DWORD *)v5 + 4) = 0;
  v7 = _Block_copy(a3);
  result = 0;
  v6[3] = v7;
  return result;
}

uint64_t ktrace_events_filter_bitmap_paired(uint64_t a1, const void *a2, const void *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v6 = malloc_type_malloc(0x2000uLL, 0x702EFDB0uLL);
  if (!v6)
    return 12;
  v7 = v6;
  memcpy(v6, a2, 0x2000uLL);
  v8 = ktrace_events_filter_bitmap_internal_paired(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8)
    free(v7);
  return v8;
}

uint64_t ktrace_events_filter_bitmap_internal_paired(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v5 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v5)
    return 12;
  v6 = v5;
  *(_DWORD *)v5 = 1;
  v5[1] = a2;
  *((_DWORD *)v5 + 4) = 1;
  v7 = _Block_copy(a3);
  result = 0;
  v6[3] = v7;
  return result;
}

uint64_t ktrace_events_filter(uint64_t a1, const char *a2, const void *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v6 = malloc_type_calloc(0x2000uLL, 1uLL, 0x100004077774924uLL);
  if (!v6)
    return 12;
  v7 = v6;
  if (trace_parse_filter(a2, v6))
  {
    v8 = 22;
LABEL_7:
    free(v7);
    return v8;
  }
  v8 = ktrace_events_filter_bitmap_internal(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8)
    goto LABEL_7;
  return v8;
}

uint64_t ktrace_events_filter_paired(uint64_t a1, const char *a2, const void *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v6 = malloc_type_calloc(0x2000uLL, 1uLL, 0x100004077774924uLL);
  if (!v6)
    return 12;
  v7 = v6;
  if (trace_parse_filter(a2, v6))
  {
    v8 = 22;
LABEL_7:
    free(v7);
    return v8;
  }
  v8 = ktrace_events_filter_bitmap_internal_paired(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8)
    goto LABEL_7;
  return v8;
}

BOOL ktrace_session_has_callbacks(int *a1)
{
  return a1[6] > 0 || a1[28] > 0 || a1[24] > 0;
}

void *ktrace_callback_list_add(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  v3 = *(_DWORD *)a2;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(_DWORD *)a2 + 1;
  *(_DWORD *)a2 = v5;
  if (v3 < v4)
    goto LABEL_10;
  if (v4)
    v4 *= 2;
  else
    v4 = 1;
  result = malloc_type_realloc(*(void **)(a2 + 8), 32 * v4, 0x109204018D12139uLL);
  if (result)
  {
    *(_DWORD *)(a2 + 4) = v4;
    *(_QWORD *)(a2 + 8) = result;
    v5 = *(_DWORD *)a2;
LABEL_10:
    if (v5 > v4)
      ktrace_remotetime_update_params_cold_1();
    return (void *)(*(_QWORD *)(a2 + 8) + 32 * (v5 - 1));
  }
  return result;
}

void ktrace_callback_list_sort(int *a1)
{
  void *v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = (void *)*((_QWORD *)a1 + 1);
  if (v2)
    qsort_b(v2, *a1, 0x20uLL, &__block_literal_global_0);
}

uint64_t __ktrace_callback_list_sort_block_invoke(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3;
  int v4;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;

  v3 = *a3;
  if (*a2 == 1)
  {
    if (v3 != 1)
      return 0xFFFFFFFFLL;
  }
  else
  {
    if (v3 == 1)
      return 1;
    if (*a2 == 3)
    {
      if (v3 != 3)
        return 0xFFFFFFFFLL;
    }
    else if (v3 == 3)
    {
      return 1;
    }
  }
  v4 = a3[4];
  if (a2[4] == 1)
  {
    if (v4 != 1)
      return 0xFFFFFFFFLL;
    goto LABEL_14;
  }
  if (v4 == 1)
    return 1;
LABEL_14:
  v6 = a2[2];
  v7 = a3[2];
  v8 = v6 >= v7;
  v9 = v6 != v7;
  if (v8)
    return v9;
  else
    return 0xFFFFFFFFLL;
}

void ktrace_callback_list_reset(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*a1 >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v4 + v2) == 1)
        free(*(void **)(v4 + v2 + 8));
      _Block_release(*(const void **)(v4 + v2 + 24));
      ++v3;
      v2 += 32;
    }
    while (v3 < *a1);
  }
  free(*((void **)a1 + 1));
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
}

void ktrace_compressor_init(_DWORD *a1, int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  bzero(a1, 0x388uLL);
  a1[1] = a2;
}

void ktrace_compressor_reset(_DWORD *a1)
{
  int v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = a1[1];
  bzero(a1, 0x388uLL);
  a1[1] = v2;
}

char *ktrace_compressor_commit(int *a1, void *a2, unint64_t a3)
{
  char *v5;
  _BYTE __src[65];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x41)
    return safe_encode(a1, (uint64_t)a2, a3);
  v5 = safe_encode(a1, (uint64_t)__src, a3);
  if (v5)
    memcpy(a2, __src, (size_t)v5);
  return v5;
}

char *safe_encode(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *result;
  int v55;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v6 = *((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1);
  v7 = (_QWORD *)(a2 + 2);
  v8 = __clz(v6 | 1);
  v9 = (9 * v8) >> 6;
  if (v8 >= 8)
  {
    *v7 = ((2 * v6) | 1) << (8 - v9);
  }
  else
  {
    *(_BYTE *)(a2 + 2) = 0;
    *(_QWORD *)(a2 + 3) = v6;
  }
  v10 = (_QWORD *)((char *)v7 + 9 - v9);
  v11 = a1[1];
  if (v11 == 2)
  {
    v25 = 0;
    v26 = 0;
    v13 = 0;
    v27 = *a1;
    v28 = (unsigned int *)&a1[12 * *a1];
    v29 = -1;
    while (1)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      if (v27 + 1 <= 0x10)
        ++v27;
      else
        v27 = 0;
      v33 = 6;
      do
      {
        v34 = *(_QWORD *)&v28[v33];
        if (!v34)
          goto LABEL_35;
        v35 = *(_QWORD *)&a1[12 * v27 + v33];
        if ((v35 ^ v34) == 3)
        {
          v36 = (2 << v30);
LABEL_33:
          v32 |= v36;
          goto LABEL_35;
        }
        if (v34 == v35)
        {
          v36 = (1 << v30);
          goto LABEL_33;
        }
        v37 = 9 - ((9 * __cls(v34 - v35)) >> 6);
        v32 |= (v37 << ((v33 * 4) - 8)) | (3 << v30);
        v31 += v37;
LABEL_35:
        v33 += 2;
        v30 += 2;
      }
      while (v30 != 12);
      if (v31 < v29)
      {
        v29 = v31;
        v13 = v32 | (v25 << 12);
        v26 = v27;
      }
      if (++v25 == 16)
      {
        v10 = (_QWORD *)encode_row((uint64_t)v10, (uint64_t)&a1[12 * v26 + 6], (uint64_t)(v28 + 6), v13);
        goto LABEL_60;
      }
    }
  }
  if (v11 == 3)
  {
    v38 = *a1;
    v39 = (unsigned int *)&a1[12 * *a1];
    v40 = (uint64_t)(v39 + 6);
    v41 = 3999999939 * ((*((_QWORD *)v39 + 7) << 30) | (*((_QWORD *)v39 + 8) >> 2));
    v42 = (char *)a1 + ((BYTE5(v41) ^ BYTE3(v41)) & 0x3F);
    v43 = v42[840];
    v42[840] = *a1;
    v44 = v43 + ~v38;
    if (v44 <= 0x11)
      v45 = v43 + ~v38;
    else
      v45 = v44 + 17;
    if (v45 <= 0xF && (v46 = (unsigned int *)&a1[12 * v43], *((_QWORD *)v46 + 7) == *(_QWORD *)(v40 + 32)))
    {
      v47 = (uint64_t)(v46 + 6);
    }
    else
    {
      LOWORD(v45) = 0;
      if ((v38 + 1) <= 0x10)
        v48 = v38 + 1;
      else
        v48 = 0;
      v47 = (uint64_t)&a1[12 * v48 + 6];
    }
    v49 = 0;
    v50 = 0;
    v13 = 0;
    while (1)
    {
      v51 = *(_QWORD *)(v40 + v50);
      if (v51)
      {
        v52 = *(_QWORD *)(v47 + v50);
        if ((v52 ^ v51) == 3)
        {
          v53 = (2 << v49);
        }
        else
        {
          if (v51 != v52)
          {
            v13 |= ((unint64_t)(9 - ((9 * __cls(v51 - v52)) >> 6)) << (v50 + 16)) | (3 << v49);
            goto LABEL_58;
          }
          v53 = (1 << v49);
        }
        v13 |= v53;
      }
LABEL_58:
      v50 += 8;
      v49 += 2;
      if (v49 == 12)
      {
        v10 = (_QWORD *)encode_row((uint64_t)v10, v47, v40, v13);
        LOWORD(v13) = v13 | ((_WORD)v45 << 12);
        goto LABEL_60;
      }
    }
  }
  if (v11 != 4)
    safe_encode_cold_3();
  v12 = 0;
  LOWORD(v13) = 0;
  v14 = (unsigned int *)&a1[12 * *a1 + 6];
  if ((*a1 + 1) <= 0x10)
    v15 = *a1 + 1;
  else
    v15 = 0;
  v16 = (unsigned int *)&a1[12 * v15 + 6];
  do
  {
    v18 = *(_QWORD *)v14;
    v14 += 2;
    v17 = v18;
    v20 = *(_QWORD *)v16;
    v16 += 2;
    v19 = v20;
    if (v17)
    {
      if (v17 == v19)
      {
        v21 = 1 << v12;
      }
      else
      {
        v22 = v17 - v19;
        v23 = __cls(v22);
        v24 = (9 * v23) >> 6;
        if (v23 >= 8)
        {
          *v10 = ((2 * v22) | 1) << (8 - v24);
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_QWORD *)((char *)v10 + 1) = v22;
        }
        v10 = (_QWORD *)((char *)v10 + 9 - v24);
        v21 = 3 << v12;
      }
      LOWORD(v13) = v13 | v21;
    }
    v12 += 2;
  }
  while (v12 != 12);
LABEL_60:
  *(_WORD *)a2 = v13;
  result = (char *)v10 - a2;
  if ((unint64_t)result > a3)
    return 0;
  if (*a1)
    v55 = *a1 - 1;
  else
    v55 = 16;
  *a1 = v55;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a1 + 2);
  return result;
}

void ktrace_compressor_decompress(uint64_t a1, char *a2, unint64_t a3)
{
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x40)
  {
    __memcpy_chk();
    a2 = &v3;
  }
  __asm { BR              X16 }
}

unint64_t sub_1AF34F294(unint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + v3) = *(_QWORD *)(v4 + v3);
  if (v3 != 40)
    JUMPOUT(0x1AF34F280);
  if (result >= 0x42)
    ktrace_remotetime_update_params_cold_1();
  if (result > v7)
    return 0;
  *(_DWORD *)v6 = v2;
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = v8 + v1;
  return result;
}

uint64_t ktrace_compressor_read_first_timestamp(char *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  _DWORD v8[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  bzero(v8, 0x388uLL);
  v8[1] = 1;
  ktrace_compressor_decompress((uint64_t)v8, a1, a2);
  if (!v6)
    return 22;
  result = 0;
  *a3 = v9;
  return result;
}

unint64_t decompress_32(unsigned int *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  v8 = 0;
  v9 = *a3;
  if (*a3)
  {
    v11 = 0;
    if (a5)
    {
      v11 = 0;
      v8 = 0;
      do
      {
        ktrace_compressor_decompress((uint64_t)a1, (char *)(a2 + v11), v9 - v11);
        if (!v13)
          break;
        v14 = a4 + v8;
        v15 = &a1[12 * *a1];
        *(_QWORD *)v14 = *((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE4(*((_QWORD *)v15 + 8)) << 56);
        *(int32x4_t *)(v14 + 8) = vuzp1q_s32(*(int32x4_t *)(v15 + 6), *(int32x4_t *)(v15 + 10));
        *(int32x2_t *)(v14 + 24) = vmovn_s64(*(int64x2_t *)(v15 + 14));
        v11 += v13;
        v8 += 32;
        if (v11 >= v9)
          break;
      }
      while (v8 < a5);
    }
  }
  else
  {
    v11 = 0;
  }
  *a3 = v11;
  return v8;
}

unint64_t decompress_64(unsigned int *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  v8 = 0;
  v9 = *a3;
  if (*a3)
  {
    v11 = 0;
    if (a5)
    {
      v11 = 0;
      v8 = 0;
      do
      {
        ktrace_compressor_decompress((uint64_t)a1, (char *)(a2 + v11), v9 - v11);
        if (!v13)
          break;
        v14 = a4 + v8;
        *(_QWORD *)v14 = *((_QWORD *)a1 + 2);
        v15 = &a1[12 * *a1];
        v16 = v15[17];
        *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 3);
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 4);
        *(_QWORD *)(v14 + 24) = *((_QWORD *)v15 + 5);
        *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 6);
        *(_QWORD *)(v14 + 40) = *((_QWORD *)v15 + 7);
        *(_DWORD *)(v14 + 48) = *((_QWORD *)v15 + 8);
        *(_DWORD *)(v14 + 52) = v16;
        v11 += v13;
        v8 += 64;
        if (v11 >= v9)
          break;
      }
      while (v8 < a5);
    }
  }
  else
  {
    v11 = 0;
  }
  *a3 = v11;
  return v8;
}

uint64_t encode_row(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = a4 >> 16;
  do
  {
    if ((_BYTE)v5)
    {
      v6 = *(_QWORD *)(a3 + v4) - *(_QWORD *)(a2 + v4);
      if (v5 > 8u)
      {
        *(_BYTE *)result = 0;
        *(_QWORD *)(result + 1) = v6;
      }
      else
      {
        *(_QWORD *)result = ((2 * v6) | 1) << (v5 - 1);
      }
    }
    result += v5;
    v5 >>= 8;
    v4 += 8;
  }
  while (v4 != 48);
  return result;
}

uint64_t config_init_v1_0(const __CFDictionary *a1, char **a2)
{
  _DWORD *v4;
  uint64_t result;

  v4 = (_DWORD *)a2 + 63;
  result = dict_uint32(a1, CFSTR("owner_kind"), (char *)a2 + 252);
  if (!(_DWORD)result)
  {
    if (!*v4)
      return 0;
    result = dict_string(a1, CFSTR("owner_name"), 0, 0, a2);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t config_init_v1_1(const __CFDictionary *a1, char **a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  result = dict_uint32(a1, CFSTR("context_kind"), a2 + 32);
  if (!(_DWORD)result)
  {
    dict_string(a1, CFSTR("reason"), 0, 0, a2 + 1);
    dict_string(a1, CFSTR("command"), 0, 0, a2 + 2);
    return dict_uint32(a1, CFSTR("trigger_kind"), (char *)a2 + 260);
  }
  return result;
}

uint64_t config_init_v1_2(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  dict_uint64(a1, CFSTR("kperf_lazy_wait_threshold"), (void *)(a2 + 160));
  dict_uint32(a1, CFSTR("kperf_lazy_wait_action"), (void *)(a2 + 168));
  dict_uint64(a1, CFSTR("kperf_lazy_cpu_threshold"), (void *)(a2 + 176));
  dict_uint32(a1, CFSTR("kperf_lazy_cpu_action"), (void *)(a2 + 184));
  return 0;
}

uint64_t config_init_v1_3(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  dict_BOOL(a1, CFSTR("kdebug_continuous_time"), (BOOL *)(a2 + 77));
  dict_BOOL(a1, CFSTR("kdebug_coprocessor_tracing"), (BOOL *)(a2 + 78));
  return 0;
}

uint64_t config_init_v1_4(const __CFDictionary *a1, uint64_t a2)
{
  int v5;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v5 = 0;
  dict_uint64_arr(a1, CFSTR("kdebug_disabling_event_match"), (_QWORD *)(a2 + 40), &v5);
  dict_uint64_arr(a1, CFSTR("kdebug_disabling_event_mask"), (_QWORD *)(a2 + 48), &v5);
  return 0;
}

_BYTE *ktrace_config_create(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  const UInt8 *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int inited;
  _BYTE *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  UInt8 *v14;
  unint64_t v15;
  const __CFDictionary *dict;
  const __CFDictionary *v17;
  char *v18;
  BOOL *v19;
  unsigned int v20;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = ktrace_chunk_tag((uint64_t)a1);
  if (v2 != 20995)
  {
    v11 = v2;
    v3 = 0;
    v5 = 0;
    v7 = 0;
    v12 = a1;
    goto LABEL_8;
  }
  v3 = ktrace_chunk_size_t(a1);
  v4 = ktrace_chunk_map_data(a1, 0, v3);
  if (!v4)
  {
    inited = *__error();
    if (inited)
    {
LABEL_27:
      v10 = 0;
      *__error() = inited;
      return v10;
    }
    return 0;
  }
  v5 = (unint64_t)v4;
  v6 = ktrace_file_open_memory((uint64_t)v4, v3, 0, 0);
  if (v6)
  {
    v7 = v6;
    v23 = 0;
    v24 = &v23;
    v25 = 0x2000000000;
    v26 = 0;
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 0x40000000;
    v22[2] = __ktrace_config_create_block_invoke;
    v22[3] = &unk_1E5F6FEB0;
    v22[4] = &v23;
    v8 = ktrace_file_iterate((uint64_t)v6, 0, (uint64_t)v22);
    if (v8)
    {
      inited = v8;
      _Block_object_dispose(&v23, 8);
      v10 = 0;
LABEL_12:
      ktrace_file_close(v7);
LABEL_13:
      if (!v5)
      {
        if (!inited)
          return v10;
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    v12 = (uint64_t *)v24[3];
    v11 = ktrace_chunk_tag((uint64_t)v12);
    _Block_object_dispose(&v23, 8);
LABEL_8:
    if (v11 != 32774 || ktrace_chunk_version_major((uint64_t)v12) > 1)
    {
      v10 = 0;
      inited = 79;
      goto LABEL_11;
    }
    v13 = ktrace_chunk_size((uint64_t)v12);
    v14 = (UInt8 *)ktrace_chunk_map_data(v12, 0, v13);
    if (!v14)
    {
      v10 = 0;
      inited = *__error();
      goto LABEL_11;
    }
    v15 = (unint64_t)v14;
    dict = (const __CFDictionary *)create_dict(v14, v13);
    if (!dict)
    {
      v10 = 0;
      inited = 12;
LABEL_52:
      ktrace_chunk_unmap_data((uint64_t)v12, v15, v13);
LABEL_11:
      if (!v7)
        goto LABEL_13;
      goto LABEL_12;
    }
    v17 = dict;
    v18 = (char *)malloc_type_calloc(1uLL, 0x110uLL, 0x101004089C2A7BEuLL);
    if (!v18)
      ktrace_remotetime_update_params_cold_1();
    v10 = v18;
    v18[78] = 1;
    v19 = (BOOL *)(v18 + 78);
    v20 = ktrace_chunk_version_minor((uint64_t)v12);
    if (v20 < 4)
    {
      if (v20 != 3)
      {
        if (v20 < 2)
        {
          if (!v20)
            goto LABEL_36;
          goto LABEL_35;
        }
LABEL_34:
        config_init_v1_2(v17, (uint64_t)v10);
LABEL_35:
        inited = config_init_v1_1(v17, (char **)v10);
        if (inited)
        {
LABEL_51:
          CFRelease(v17);
          goto LABEL_52;
        }
LABEL_36:
        inited = config_init_v1_0(v17, (char **)v10);
        if (!inited)
        {
          inited = dict_uint32(v17, CFSTR("kdebug_state"), v10 + 68);
          if (!inited && ((v10[68] & 1) == 0 || (inited = config_kdebug_init((uint64_t)v10, v17)) == 0))
          {
            inited = dict_uint32(v17, CFSTR("kperf_state"), v10 + 136);
            if (!inited && ((v10[136] & 1) == 0 || (inited = config_kperf_init((uint64_t)v10, v17)) == 0))
            {
              inited = dict_uint32(v17, CFSTR("kpc_state"), v10 + 216);
              if (!inited)
              {
                if ((v10[216] & 1) != 0)
                  inited = config_kpc_init((uint64_t)v10, v17);
                else
                  inited = 0;
              }
            }
          }
        }
        goto LABEL_51;
      }
    }
    else
    {
      LODWORD(v23) = 0;
      dict_uint64_arr(v17, CFSTR("kdebug_disabling_event_match"), (_QWORD *)v10 + 5, &v23);
      dict_uint64_arr(v17, CFSTR("kdebug_disabling_event_mask"), (_QWORD *)v10 + 6, &v23);
    }
    dict_BOOL(v17, CFSTR("kdebug_continuous_time"), v10 + 77);
    dict_BOOL(v17, CFSTR("kdebug_coprocessor_tracing"), v19);
    goto LABEL_34;
  }
  v10 = 0;
  inited = *__error();
LABEL_24:
  ktrace_chunk_unmap_data((uint64_t)a1, v5, v3);
  if (inited)
  {
LABEL_25:
    if (v10)
      ktrace_config_destroy((void **)v10);
    goto LABEL_27;
  }
  return v10;
}

BOOL __ktrace_config_create_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = ktrace_chunk_tag(a2);
  if (v4 == 32774)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return v4 != 32774;
}

uint64_t config_kdebug_init(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;

  result = dict_uint64(a2, CFSTR("kdebug_buffer_size"), (void *)(a1 + 56));
  if (!(_DWORD)result)
  {
    result = dict_data(a2, CFSTR("kdebug_typefilter"), (UInt8 **)(a1 + 24), 0);
    if (!(_DWORD)result)
    {
      result = dict_uint32(a2, CFSTR("kdebug_procfilt_mode"), (void *)(a1 + 72));
      if (!(_DWORD)result)
      {
        result = dict_int_arr(a2, CFSTR("kdebug_procfilt"), (_QWORD *)(a1 + 32), (_DWORD *)(a1 + 64));
        if (!(_DWORD)result)
          return dict_BOOL(a2, CFSTR("kdebug_wrapping"), (BOOL *)(a1 + 76));
      }
    }
  }
  return result;
}

CFIndex config_kperf_init(uint64_t a1, const __CFDictionary *a2)
{
  _DWORD *v4;
  CFIndex result;
  int v6;
  int v7;

  v4 = (_DWORD *)(a1 + 128);
  result = dict_uint64_arr(a2, CFSTR("kperf_actions_sampler"), (_QWORD *)(a1 + 80), (_DWORD *)(a1 + 128));
  if (!(_DWORD)result)
  {
    v7 = 0;
    result = dict_uint64_arr(a2, CFSTR("kperf_actions_user_data"), (_QWORD *)(a1 + 88), &v7);
    if (!(_DWORD)result)
    {
      if (*v4 != v7)
        return 79;
      result = dict_int_arr(a2, CFSTR("kperf_actions_pid_filter"), (_QWORD *)(a1 + 96), &v7);
      if ((_DWORD)result)
        return result;
      if (*v4 != v7)
        return 79;
      result = dict_uint32_arr(a2, CFSTR("kperf_timers_action_id"), (_QWORD *)(a1 + 104), (_DWORD *)(a1 + 132));
      if ((_DWORD)result)
        return result;
      v6 = 0;
      result = dict_uint64_arr(a2, CFSTR("kperf_timers_period_ns"), (_QWORD *)(a1 + 112), &v6);
      if ((_DWORD)result)
        return result;
      if (*(_DWORD *)(a1 + 132) != v6)
        return 79;
      result = dict_uint32(a2, CFSTR("kperf_pet_mode"), (void *)(a1 + 140));
      if (!(_DWORD)result)
      {
        result = dict_int(a2, CFSTR("kperf_pet_timer_id"), (void *)(a1 + 144));
        if (!(_DWORD)result)
        {
          result = dict_uint32(a2, CFSTR("kperf_pet_idle_rate"), (void *)(a1 + 148));
          if (!(_DWORD)result)
          {
            result = dict_uint32(a2, CFSTR("kperf_kdebug_action_id"), (void *)(a1 + 152));
            if (!(_DWORD)result)
              return dict_string(a2, CFSTR("kperf_kdebug_filter"), 0, 0, (char **)(a1 + 120));
          }
        }
      }
    }
  }
  return result;
}

CFIndex config_kpc_init(uint64_t a1, const __CFDictionary *a2)
{
  CFIndex result;
  int v5;

  result = dict_uint64_arr(a2, CFSTR("kpc_config"), (_QWORD *)(a1 + 192), (_DWORD *)(a1 + 240));
  if (!(_DWORD)result)
  {
    result = dict_uint64(a2, CFSTR("kpc_classes"), (void *)(a1 + 224));
    if (!(_DWORD)result)
    {
      result = dict_uint64(a2, CFSTR("kpc_thread_classes"), (void *)(a1 + 232));
      if (!(_DWORD)result)
      {
        result = dict_uint64_arr(a2, CFSTR("kpc_periods"), (_QWORD *)(a1 + 200), (_DWORD *)(a1 + 244));
        if (!(_DWORD)result)
        {
          v5 = 0;
          result = dict_uint32_arr(a2, CFSTR("kpc_action_ids"), (_QWORD *)(a1 + 208), &v5);
          if (!(_DWORD)result)
          {
            if (*(_DWORD *)(a1 + 244) == v5)
              return 0;
            else
              return 22;
          }
        }
      }
    }
  }
  return result;
}

void ktrace_config_destroy(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[1]);
    free(a1[2]);
    free(a1[3]);
    free(a1[4]);
    free(a1[5]);
    free(a1[6]);
    free(a1[10]);
    free(a1[11]);
    free(a1[12]);
    free(a1[13]);
    free(a1[14]);
    free(a1[15]);
    free(a1[24]);
    free(a1[26]);
    free(a1[25]);
    free(a1);
  }
}

uint64_t ktrace_config_create_current()
{
  char **v0;
  uint64_t v1;
  int v2;
  int bufinfo;
  int v4;
  int v5;
  void *v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int is_64_bit;
  char v11;
  __int16 v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31[2];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = (char **)malloc_type_calloc(1uLL, 0x110uLL, 0x101004089C2A7BEuLL);
  if (!v0)
    ktrace_remotetime_update_params_cold_1();
  v1 = (uint64_t)v0;
  v2 = sysctlbyname_string(0, 0, "ktrace.configured_by", v0, 0x20uLL);
  if (v2)
    goto LABEL_35;
  v2 = sysctlbyname_int(0, 0, "ktrace.state", (void *)(v1 + 252));
  if (v2)
    goto LABEL_35;
  v2 = sysctlbyname_int(0, 0, "ktrace.owning_pid", (void *)(v1 + 248));
  if (v2)
    goto LABEL_35;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  bufinfo = kdebug_get_bufinfo(&v22);
  if (bufinfo)
  {
    v2 = bufinfo;
LABEL_35:
    ktrace_config_destroy((void **)v1);
    v1 = 0;
    *__error() = v2;
    return v1;
  }
  v4 = v22;
  if ((_DWORD)v22)
  {
    if (HIDWORD(v22))
      v5 = 1;
    else
      v5 = 3;
    *(_DWORD *)(v1 + 68) = v5;
    if ((v23 & 0x400000) != 0)
    {
      v6 = malloc_type_malloc(0x2000uLL, 0x26CD95C2uLL);
      *(_QWORD *)(v1 + 24) = v6;
      if (!v6)
        ktrace_remotetime_update_params_cold_1();
      v7 = v6;
      v8 = (const void *)kdebug_typefilter();
      memcpy(v7, v8, 0x2000uLL);
      v4 = v22;
    }
    v9 = v4;
    is_64_bit = current_system_is_64_bit();
    v11 = 5;
    if (is_64_bit)
      v11 = 6;
    *(_QWORD *)(v1 + 56) = v9 << v11;
    v12 = v23;
    *(_BYTE *)(v1 + 76) = (v23 & 2) == 0;
    if ((v12 & 0x10) != 0)
    {
      v13 = 1;
    }
    else
    {
      if ((v12 & 0x40) == 0)
      {
        *(_DWORD *)(v1 + 72) = 0;
        goto LABEL_24;
      }
      v13 = 2;
    }
    *(_DWORD *)(v1 + 72) = v13;
    v14 = proc_listpids(7u, 0, 0, 0);
    v15 = malloc_type_calloc(1uLL, v14, 0x680600A7uLL);
    if (!v15)
      ktrace_remotetime_update_params_cold_1();
    v16 = v15;
    *(_DWORD *)(v1 + 64) = proc_listpids(7u, 0, v15, v14) >> 2;
    *(_QWORD *)(v1 + 32) = v16;
    v12 = v23;
LABEL_24:
    if ((v12 & 0x800) == 0)
    {
LABEL_32:
      *(_BYTE *)(v1 + 77) = (v12 & 0x200) != 0;
      *(_BYTE *)(v1 + 78) = (v12 & 0x400) == 0;
      goto LABEL_33;
    }
    v32 = 27;
    *(_QWORD *)v31 = 0x1800000001;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v25 = 80;
    if (sysctl(v31, 3u, &v26, &v25, 0, 0))
    {
      v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_config_create_current_cold_3();
    }
    else
    {
      v18 = malloc_type_calloc(5uLL, 8uLL, 0x100004000313F17uLL);
      if (v18)
      {
        v19 = v18;
        v20 = (char *)malloc_type_calloc(5uLL, 8uLL, 0x100004000313F17uLL);
        *v19 = v26;
        v19[1] = *((_QWORD *)&v26 + 1);
        *((_OWORD *)v19 + 1) = v27;
        v19[4] = v28;
        *(_QWORD *)v20 = DWORD2(v28);
        *(_OWORD *)(v20 + 8) = v29;
        *(_OWORD *)(v20 + 24) = v30;
        *(_QWORD *)(v1 + 40) = v19;
        *(_QWORD *)(v1 + 48) = v20;
        goto LABEL_31;
      }
      v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_config_create_current_cold_2();
    }
    *__error() = v17;
LABEL_31:
    v12 = v23;
    goto LABEL_32;
  }
  *(_DWORD *)(v1 + 68) = 0;
LABEL_33:
  v2 = config_current_kperf(v1);
  if (v2)
    goto LABEL_35;
  v2 = config_current_kpc(v1);
  if (v2)
    goto LABEL_35;
  return v1;
}

uint64_t config_current_kperf(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  size_t v38;

  v2 = (_DWORD *)(a1 + 128);
  v3 = kperf_action_count_get();
  if ((_DWORD)v3)
  {
    v4 = v3;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_20();
    goto LABEL_4;
  }
  v7 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 128), 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 80) = v7;
  if (!v7)
    ktrace_remotetime_update_params_cold_1();
  v8 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 128), 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 88) = v8;
  if (!v8)
    ktrace_remotetime_update_params_cold_1();
  v9 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 128), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 96) = v9;
  if (!v9)
    ktrace_remotetime_update_params_cold_1();
  if (*v2)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      LODWORD(v38) = 0;
      v13 = v11 + 1;
      v14 = kperf_action_samplers_get();
      if ((_DWORD)v14)
        break;
      v15 = (_DWORD)v38 != 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v11) = v38;
      v16 = kperf_action_userdata_get();
      if ((_DWORD)v16)
      {
        v4 = v16;
        v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          config_current_kperf_cold_18();
        goto LABEL_4;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v11) = v38;
      v17 = kperf_action_filter_get();
      if ((_DWORD)v17)
      {
        v4 = v17;
        goto LABEL_5;
      }
      v12 |= v15;
      v10 += 4;
      ++v11;
      if (v13 >= *v2)
        goto LABEL_19;
    }
    v4 = v14;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_19();
    goto LABEL_4;
  }
  v12 = 0;
LABEL_19:
  v18 = kperf_timer_count_get();
  if ((_DWORD)v18)
  {
    v4 = v18;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_17();
    goto LABEL_4;
  }
  v19 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 132), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 104) = v19;
  if (!v19)
    ktrace_remotetime_update_params_cold_1();
  v20 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 132), 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 112) = v20;
  if (!v20)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 132))
  {
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v38 = 0;
      v23 = kperf_timer_action_get();
      if ((_DWORD)v23)
        break;
      v24 = kperf_timer_period_get();
      if ((_DWORD)v24)
      {
        v4 = v24;
        v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          config_current_kperf_cold_15();
        goto LABEL_4;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v22++) = kperf_ticks_to_ns();
      v21 += 4;
      if (v22 >= *(unsigned int *)(a1 + 132))
        goto LABEL_29;
    }
    v4 = v23;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_16();
    goto LABEL_4;
  }
LABEL_29:
  v25 = kperf_kdebug_action_get();
  if ((_DWORD)v25)
  {
    v4 = v25;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_14();
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 152))
  {
    v26 = kperf_kdebug_filter_get();
    if (v26)
    {
      v27 = v26;
      *(_QWORD *)(a1 + 120) = kperf_kdebug_filter_create_desc();
      MEMORY[0x1AF45DA40](v27);
    }
  }
  v28 = kperf_timer_pet_get();
  if ((_DWORD)v28)
  {
    v4 = v28;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_13();
    goto LABEL_4;
  }
  if (*(int *)(a1 + 144) > 15)
  {
    *(_QWORD *)(a1 + 140) = 0xFFFFFFFF00000000;
  }
  else
  {
    v37 = 0;
    v38 = 4;
    if (sysctlbyname("kperf.lightweight_pet", &v37, &v38, 0, 0) == -1)
    {
      v31 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        config_current_kperf_cold_6();
LABEL_65:
      *__error() = v31;
      if (!*__error())
        return 22;
      return *__error();
    }
    if (v37)
      v29 = 2;
    else
      v29 = 1;
    *(_DWORD *)(a1 + 140) = v29;
  }
  v38 = 4;
  if (sysctlbyname("kperf.pet_idle_rate", (void *)(a1 + 148), &v38, 0, 0) == -1)
  {
    v31 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_7();
    goto LABEL_65;
  }
  v30 = kperf_lazy_wait_time_threshold_get();
  if ((_DWORD)v30)
  {
    v4 = v30;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kperf_cold_12();
  }
  else
  {
    *(_QWORD *)(a1 + 160) = kperf_ticks_to_ns();
    v32 = kperf_lazy_wait_action_get();
    if ((_DWORD)v32)
    {
      v4 = v32;
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        config_current_kperf_cold_11();
    }
    else
    {
      v33 = kperf_lazy_cpu_time_threshold_get();
      if ((_DWORD)v33)
      {
        v4 = v33;
        v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          config_current_kperf_cold_10();
      }
      else
      {
        *(_QWORD *)(a1 + 176) = kperf_ticks_to_ns();
        v34 = kperf_lazy_cpu_action_get();
        if ((_DWORD)v34)
        {
          v4 = v34;
          v5 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            config_current_kperf_cold_9();
        }
        else
        {
          v37 = 0;
          v35 = kperf_sample_get();
          if (!(_DWORD)v35)
          {
            if (v37)
            {
              v4 = 0;
              v36 = 3;
            }
            else
            {
              v4 = 0;
              if ((v12 & 1) == 0)
              {
                *(_DWORD *)(a1 + 136) = 0;
                return v4;
              }
              v36 = 1;
            }
            *(_DWORD *)(a1 + 136) = v36;
            return v4;
          }
          v4 = v35;
          v5 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            config_current_kperf_cold_8();
        }
      }
    }
  }
LABEL_4:
  *__error() = v5;
LABEL_5:
  if (*__error())
    return *__error();
  return v4;
}

uint64_t config_current_kpc(uint64_t a1)
{
  unsigned int counting;
  int counter_count;
  size_t v4;
  void *v5;
  uint64_t config;
  uint64_t period;
  int v8;
  void *v9;
  uint64_t actionid;
  void *v11;

  counting = kpc_get_counting();
  *(_QWORD *)(a1 + 224) = counting;
  if (!counting)
  {
    period = 0;
    *(_DWORD *)(a1 + 216) = 0;
    return period;
  }
  *(_DWORD *)(a1 + 216) = 3;
  *(_QWORD *)(a1 + 232) = kpc_get_thread_counting();
  *(_DWORD *)(a1 + 240) = kpc_get_config_count();
  counter_count = kpc_get_counter_count();
  *(_DWORD *)(a1 + 244) = counter_count;
  v4 = *(unsigned int *)(a1 + 240);
  if (!(_DWORD)v4 || !counter_count)
  {
    period = 0;
    *(_QWORD *)(a1 + 240) = 0;
    return period;
  }
  v5 = malloc_type_calloc(v4, 8uLL, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 192) = v5;
  if (!v5)
    ktrace_remotetime_update_params_cold_1();
  config = kpc_get_config();
  if ((_DWORD)config)
  {
    period = config;
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kpc_cold_6();
LABEL_18:
    *__error() = v8;
    if (*__error())
      return *__error();
    return period;
  }
  v9 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 244), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 208) = v9;
  if (!v9)
    ktrace_remotetime_update_params_cold_1();
  actionid = kpc_get_actionid();
  if ((_DWORD)actionid)
  {
    period = actionid;
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kpc_cold_5();
    goto LABEL_18;
  }
  v11 = malloc_type_malloc(8 * *(unsigned int *)(a1 + 244), 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 200) = v11;
  if (!v11)
    ktrace_remotetime_update_params_cold_1();
  period = kpc_get_period();
  if ((_DWORD)period)
  {
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      config_current_kpc_cold_4();
    goto LABEL_18;
  }
  return period;
}

_DWORD *ktrace_config_enable_configured(_DWORD *result)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if (result[17] == 1)
    result[17] = 3;
  if (result[34] == 1)
    result[34] = 3;
  if (result[54] == 1)
    result[54] = 3;
  return result;
}

uint64_t ktrace_config_kdebug_get_state(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 68);
}

uint64_t ktrace_config_kperf_get_state(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 136);
}

uint64_t ktrace_config_kpc_get_state(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 216);
}

_QWORD *ktrace_config_append(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  _QWORD *appended;
  UInt8 *v6;
  CFIndex v8;
  UInt8 *v9;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v8 = 0;
  v9 = 0;
  v3 = ktrace_config_serialize(a1, &v9, &v8);
  if (v3)
  {
    v4 = v3;
    appended = 0;
  }
  else
  {
    v6 = v9;
    if (!v9)
      ktrace_remotetime_update_params_cold_1();
    if (!v8)
      ktrace_remotetime_update_params_cold_1();
    appended = ktrace_file_append_chunk(a2, 32774, 1, 4, v9, v8);
    v4 = *__error();
    free(v6);
  }
  *__error() = v4;
  return appended;
}

uint64_t ktrace_config_serialize(uint64_t a1, UInt8 **a2, CFIndex *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  UInt8 *v9;
  const __CFData *v11;
  const __CFData *v12;
  size_t Length;
  CFIndex v14;
  UInt8 *v15;
  CFErrorRef v16;
  int v17;
  NSObject *v18;
  _BOOL4 v19;
  int v20;
  CFErrorRef error;
  CFRange v22;

  error = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 12;
  v7 = Mutable;
  v8 = dict_set_string(Mutable, CFSTR("owner_name"), *(char **)a1);
  if (!(_DWORD)v8)
  {
    v8 = dict_set_uint32(v7, CFSTR("owner_kind"), *(_DWORD *)(a1 + 252));
    if (!(_DWORD)v8)
    {
      v8 = dict_set_int(v7, CFSTR("owner_pid"), *(_DWORD *)(a1 + 248));
      if (!(_DWORD)v8)
      {
        v8 = dict_set_uint32(v7, CFSTR("context_kind"), *(_DWORD *)(a1 + 256));
        if (!(_DWORD)v8)
        {
          v8 = dict_set_string(v7, CFSTR("reason"), *(char **)(a1 + 8));
          if (!(_DWORD)v8)
          {
            v8 = dict_set_string(v7, CFSTR("command"), *(char **)(a1 + 16));
            if (!(_DWORD)v8)
            {
              v8 = dict_set_uint32(v7, CFSTR("trigger_kind"), *(_DWORD *)(a1 + 260));
              if (!(_DWORD)v8)
              {
                v8 = dict_set_uint32(v7, CFSTR("kdebug_state"), *(_DWORD *)(a1 + 68));
                if (!(_DWORD)v8)
                {
                  v8 = dict_set_uint64(v7, CFSTR("kdebug_buffer_size"), *(_QWORD *)(a1 + 56));
                  if (!(_DWORD)v8)
                  {
                    v8 = dict_set_data(v7, CFSTR("kdebug_typefilter"), *(UInt8 **)(a1 + 24), (unint64_t)(*(_QWORD *)(a1 + 24) != 0) << 13);
                    if (!(_DWORD)v8)
                    {
                      v8 = dict_set_uint32(v7, CFSTR("kdebug_procfilt_mode"), *(_DWORD *)(a1 + 72));
                      if (!(_DWORD)v8)
                      {
                        v8 = dict_set_int_arr(v7, CFSTR("kdebug_procfilt"), *(char **)(a1 + 32), *(unsigned int *)(a1 + 64));
                        if (!(_DWORD)v8)
                        {
                          v8 = dict_set_BOOL(v7, CFSTR("kdebug_wrapping"), *(unsigned __int8 *)(a1 + 76));
                          if (!(_DWORD)v8)
                          {
                            v8 = dict_set_BOOL(v7, CFSTR("kdebug_continuous_time"), *(unsigned __int8 *)(a1 + 77));
                            if (!(_DWORD)v8)
                            {
                              v8 = dict_set_BOOL(v7, CFSTR("kdebug_coprocessor_tracing"), *(unsigned __int8 *)(a1 + 78));
                              if (!(_DWORD)v8)
                              {
                                v8 = dict_set_uint64_arr(v7, CFSTR("kdebug_disabling_event_match"), *(char **)(a1 + 40), 5);
                                if (!(_DWORD)v8)
                                {
                                  v8 = dict_set_uint64_arr(v7, CFSTR("kdebug_disabling_event_mask"), *(char **)(a1 + 48), 5);
                                  if (!(_DWORD)v8)
                                  {
                                    v8 = dict_set_uint32(v7, CFSTR("kperf_state"), *(_DWORD *)(a1 + 136));
                                    if (!(_DWORD)v8)
                                    {
                                      v8 = dict_set_uint64_arr(v7, CFSTR("kperf_actions_sampler"), *(char **)(a1 + 80), *(unsigned int *)(a1 + 128));
                                      if (!(_DWORD)v8)
                                      {
                                        v8 = dict_set_uint64_arr(v7, CFSTR("kperf_actions_user_data"), *(char **)(a1 + 88), *(unsigned int *)(a1 + 128));
                                        if (!(_DWORD)v8)
                                        {
                                          v8 = dict_set_int_arr(v7, CFSTR("kperf_actions_pid_filter"), *(char **)(a1 + 96), *(unsigned int *)(a1 + 128));
                                          if (!(_DWORD)v8)
                                          {
                                            v8 = dict_set_uint32_arr(v7, CFSTR("kperf_timers_action_id"), *(char **)(a1 + 104), *(unsigned int *)(a1 + 132));
                                            if (!(_DWORD)v8)
                                            {
                                              v8 = dict_set_uint64_arr(v7, CFSTR("kperf_timers_period_ns"), *(char **)(a1 + 112), *(unsigned int *)(a1 + 132));
                                              if (!(_DWORD)v8)
                                              {
                                                v8 = dict_set_uint32(v7, CFSTR("kperf_kdebug_action_id"), *(_DWORD *)(a1 + 152));
                                                if (!(_DWORD)v8)
                                                {
                                                  v8 = dict_set_string(v7, CFSTR("kperf_kdebug_filter"), *(char **)(a1 + 120));
                                                  if (!(_DWORD)v8)
                                                  {
                                                    v8 = dict_set_uint32(v7, CFSTR("kperf_pet_mode"), *(_DWORD *)(a1 + 140));
                                                    if (!(_DWORD)v8)
                                                    {
                                                      v8 = dict_set_int(v7, CFSTR("kperf_pet_timer_id"), *(_DWORD *)(a1 + 144));
                                                      if (!(_DWORD)v8)
                                                      {
                                                        v8 = dict_set_uint32(v7, CFSTR("kperf_pet_idle_rate"), *(_DWORD *)(a1 + 148));
                                                        if (!(_DWORD)v8)
                                                        {
                                                          v8 = dict_set_uint64(v7, CFSTR("kperf_lazy_wait_threshold"), *(_QWORD *)(a1 + 160));
                                                          if (!(_DWORD)v8)
                                                          {
                                                            v8 = dict_set_uint32(v7, CFSTR("kperf_lazy_wait_action"), *(_DWORD *)(a1 + 168));
                                                            if (!(_DWORD)v8)
                                                            {
                                                              v8 = dict_set_uint64(v7, CFSTR("kperf_lazy_cpu_threshold"), *(_QWORD *)(a1 + 176));
                                                              if (!(_DWORD)v8)
                                                              {
                                                                v8 = dict_set_uint32(v7, CFSTR("kperf_lazy_cpu_action"), *(_DWORD *)(a1 + 184));
                                                                if (!(_DWORD)v8)
                                                                {
                                                                  v8 = dict_set_uint32(v7, CFSTR("kpc_state"), *(_DWORD *)(a1 + 216));
                                                                  if (!(_DWORD)v8)
                                                                  {
                                                                    v8 = dict_set_uint64_arr(v7, CFSTR("kpc_config"), *(char **)(a1 + 192), *(unsigned int *)(a1 + 240));
                                                                    if (!(_DWORD)v8)
                                                                    {
                                                                      v8 = dict_set_uint64(v7, CFSTR("kpc_classes"), *(_QWORD *)(a1 + 224));
                                                                      if (!(_DWORD)v8)
                                                                      {
                                                                        v8 = dict_set_uint64(v7, CFSTR("kpc_thread_classes"), *(_QWORD *)(a1 + 232));
                                                                        if (!(_DWORD)v8)
                                                                        {
                                                                          v8 = dict_set_uint64_arr(v7, CFSTR("kpc_periods"), *(char **)(a1 + 200), *(unsigned int *)(a1 + 244));
                                                                          if (!(_DWORD)v8)
                                                                          {
                                                                            v8 = dict_set_uint32_arr(v7, CFSTR("kpc_action_ids"), *(char **)(a1 + 208), *(unsigned int *)(a1 + 244));
                                                                            if (!(_DWORD)v8)
                                                                            {
                                                                              v11 = CFPropertyListCreateData(0, v7, kCFPropertyListBinaryFormat_v1_0, 0, &error);
                                                                              if (v11)
                                                                              {
                                                                                v12 = v11;
                                                                                Length = CFDataGetLength(v11);
                                                                                v14 = Length;
                                                                                if (Length)
                                                                                {
                                                                                  v15 = (UInt8 *)malloc_type_malloc(Length, 0xF6663FB7uLL);
                                                                                  if (v15)
                                                                                  {
                                                                                    v22.location = 0;
                                                                                    v22.length = v14;
                                                                                    CFDataGetBytes(v12, v22, v15);
                                                                                    v8 = 0;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v8 = *__error();
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  *__error() = 22;
                                                                                  v20 = *__error();
                                                                                  ktrace_log_init();
                                                                                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                                                                                  {
                                                                                    ktrace_config_serialize_cold_4();
                                                                                  }
                                                                                  v15 = 0;
                                                                                  *__error() = v20;
                                                                                  v8 = 22;
                                                                                }
                                                                                CFRelease(v12);
                                                                                CFRelease(v7);
                                                                                if (!(_DWORD)v8)
                                                                                {
                                                                                  *a2 = v15;
                                                                                  *a3 = v14;
                                                                                  return v8;
                                                                                }
                                                                                v9 = v15;
                                                                                goto LABEL_42;
                                                                              }
                                                                              v16 = error;
                                                                              v17 = *__error();
                                                                              ktrace_log_init();
                                                                              v18 = ktrace_log;
                                                                              v19 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
                                                                              if (v16)
                                                                              {
                                                                                if (v19)
                                                                                  ktrace_config_serialize_cold_3((uint64_t *)&error, v17, v18);
                                                                              }
                                                                              else if (v19)
                                                                              {
                                                                                ktrace_config_serialize_cold_2();
                                                                              }
                                                                              *__error() = v17;
                                                                              v8 = 22;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  CFRelease(v7);
  v9 = 0;
LABEL_42:
  free(v9);
  return v8;
}

const char *state_name(int a1)
{
  if (a1 > 2)
  {
    if (a1 == 3)
    {
      return "enabled";
    }
    else
    {
      if (a1 != 0x8000000)
        goto LABEL_10;
      return "unknown";
    }
  }
  else
  {
    if (a1)
    {
      if (a1 == 1)
        return "configured";
LABEL_10:
      state_name_cold_1();
    }
    return "off";
  }
}

char *owner_kind_name(unsigned int a1)
{
  if (a1 >= 3)
    owner_kind_name_cold_1();
  return off_1E5F6FED0[a1];
}

char *context_kind_name(unsigned int a1)
{
  if (a1 >= 5)
    context_kind_name_cold_1();
  return off_1E5F6FEE8[a1];
}

char *trigger_kind_name(unsigned int a1)
{
  if (a1 >= 4)
    trigger_kind_name_cold_1();
  return off_1E5F6FF10[a1];
}

FILE *print_typefilter(FILE *result, const char *a2, uint64_t a3)
{
  uint64_t v3;
  FILE *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  const char *v12;
  int i;
  int v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a3 + 24);
  if (v3)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = v3 + 1;
    v9 = *(_QWORD *)(a3 + 24);
    v18 = v9;
    do
    {
      if (*(_BYTE *)(v3 + 32 * v6))
      {
LABEL_4:
        if ((v7 & 1) == 0)
        {
          v10 = kdebug_alloc_filter_description(v3);
          v11 = v10;
          if (v10)
            v12 = v10;
          else
            v12 = "";
          fprintf(v5, "%stypefilter: %s\n", a2, v12);
          free(v11);
          fprintf(v5, "%s%8s  ", a2, "");
          for (i = 0; i != 256; i += 8)
            fprintf(v5, "%02x ", i);
          fputc(10, v5);
          fprintf(v5, "%s%8s  ", a2, "");
          v14 = 32;
          do
          {
            fwrite("---", 3uLL, 1uLL, v5);
            --v14;
          }
          while (v14);
          fputc(10, v5);
          v3 = v18;
        }
        fprintf(v5, "%s%6s%02x: ", a2, "", v6);
        for (j = 0; j != 32; ++j)
          fprintf(v5, "%02X ", *(unsigned __int8 *)(v9 + j));
        result = (FILE *)fputc(10, v5);
        v7 = 1;
      }
      else
      {
        v16 = 0;
        while (v16 != 31)
        {
          if (*(unsigned __int8 *)(v8 + v16++))
          {
            if ((unint64_t)(v16 - 1) <= 0x1E)
              goto LABEL_4;
            break;
          }
        }
      }
      ++v6;
      v8 += 32;
      v9 += 32;
    }
    while (v6 != 256);
  }
  return result;
}

FILE *ktrace_config_copy_description(uint64_t a1)
{
  FILE *result;
  FILE *v3;
  size_t v4;
  char *__bufp;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = 0;
  __bufp = 0;
  result = open_memstream(&__bufp, &v4);
  if (result)
  {
    v3 = result;
    ktrace_config_print_description(a1, result);
    fclose(v3);
    return (FILE *)__bufp;
  }
  return result;
}

uint64_t ktrace_config_print_description(uint64_t a1, FILE *__stream)
{
  int v4;
  const char *v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  char *v9;
  _BYTE *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  unint64_t v17;
  const char *v18;
  const char *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  const char *v27;
  unint64_t v28;
  unint64_t i;
  int v30;
  unint64_t v31;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!__stream)
    ktrace_remotetime_update_params_cold_1();
  v4 = *(_DWORD *)(a1 + 252);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = "foreground";
    }
    else
    {
      if (v4 != 2)
        owner_kind_name_cold_1();
      v5 = "background";
    }
    fprintf(__stream, "owner: %s[%d] (%s)\n", *(const char **)a1, *(_DWORD *)(a1 + 248), v5);
  }
  else
  {
    fwrite("unowned\n", 8uLL, 1uLL, __stream);
  }
  v6 = *(_DWORD *)(a1 + 256);
  if (v6)
  {
    v7 = context_kind_name(v6);
    fprintf(__stream, "context: %s\n", v7);
  }
  v8 = *(_DWORD *)(a1 + 260);
  if (v8)
  {
    v9 = trigger_kind_name(v8);
    fprintf(__stream, "trigger: %s\n", v9);
  }
  v10 = *(_BYTE **)(a1 + 8);
  if (v10 && *v10)
    fprintf(__stream, "reason: %s\n", *(const char **)(a1 + 8));
  if (*(_QWORD *)(a1 + 16))
    fprintf(__stream, "command: %s\n", *(const char **)(a1 + 16));
  v11 = state_name(*(_DWORD *)(a1 + 68));
  fprintf(__stream, "kdebug: %s\n", v11);
  if (*(_DWORD *)(a1 + 68))
  {
    if (*(_BYTE *)(a1 + 77))
      v12 = "continuous";
    else
      v12 = "absolute";
    fprintf(__stream, "\ttimestamps: %s\n", v12);
    fprintf(__stream, "\tbuffer size: %llu bytes\n", *(_QWORD *)(a1 + 56));
    if (*(_BYTE *)(a1 + 76))
      v13 = "YES";
    else
      v13 = "NO";
    fprintf(__stream, "\twrapping: %s\n", v13);
    if (*(_BYTE *)(a1 + 78))
      v14 = "YES";
    else
      v14 = "NO";
    fprintf(__stream, "\tcoprocessors: %s\n", v14);
    v15 = *(_DWORD *)(a1 + 72);
    if (v15)
    {
      if (v15 == 1)
        v16 = "in";
      else
        v16 = "ex";
      fprintf(__stream, "\tprocesses %scluded:\n", v16);
      fwrite("\t\t", 2uLL, 1uLL, __stream);
      if (*(_DWORD *)(a1 + 64))
      {
        v17 = 0;
        do
        {
          if (v17)
            v18 = ", ";
          else
            v18 = "";
          fprintf(__stream, "%s%d", v18, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v17++));
        }
        while (v17 < *(unsigned int *)(a1 + 64));
      }
      fputc(10, __stream);
    }
    if (*(_QWORD *)(a1 + 40))
      v19 = "YES";
    else
      v19 = "NO";
    fprintf(__stream, "\tend event matching: %s\n", v19);
    v20 = *(_QWORD **)(a1 + 40);
    if (v20)
    {
      fprintf(__stream, "\t\tdebugid: 0x%08x & 0x%08x\n", *v20, **(_QWORD **)(a1 + 48));
      fwrite("\t\targs:\n", 8uLL, 1uLL, __stream);
      v21 = *(_QWORD **)(a1 + 40);
      fprintf(__stream, "\t\t\t0x%016llx & 0x%016llx\n\t\t\t0x%016llx & 0x%016llx\n\t\t\t0x%016llx & 0x%016llx\n\t\t\t0x%016llx & 0x%016llx\n", v21[1], *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), v21[2], *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), v21[3], *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), v21[4], *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32));
    }
    print_typefilter(__stream, "\t", a1);
  }
  v22 = state_name(*(_DWORD *)(a1 + 136));
  fprintf(__stream, "kperf: %s\n", v22);
  if (*(_DWORD *)(a1 + 136))
  {
    fprintf(__stream, "\t%u actions:\n", *(_DWORD *)(a1 + 128));
    if (*(_DWORD *)(a1 + 128))
    {
      v23 = 0;
      do
      {
        v24 = v23 + 1;
        fprintf(__stream, "\t\t%u: samplers = %#llx, user data = %#llx, pid filter = %d\n", v23 + 1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v23), *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v23));
        v23 = v24;
      }
      while (v24 < *(unsigned int *)(a1 + 128));
    }
    fprintf(__stream, "\t%u timers:\n", *(_DWORD *)(a1 + 132));
    if (*(_DWORD *)(a1 + 132))
    {
      v25 = 0;
      do
      {
        fprintf(__stream, "\t\t%u: period = %llu ns, action = %u\n", v25, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v25), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v25));
        ++v25;
      }
      while (v25 < *(unsigned int *)(a1 + 132));
    }
    v26 = *(const char **)(a1 + 120);
    if (v26)
      fprintf(__stream, "\tkdebug filter: %d: %s\n", *(_DWORD *)(a1 + 152), v26);
    if (*(_DWORD *)(a1 + 140))
    {
      fprintf(__stream, "\tPET: %d: ", *(_DWORD *)(a1 + 144));
      if (*(_DWORD *)(a1 + 140) == 1)
        fprintf(__stream, "original (%d idle rate)", *(_DWORD *)(a1 + 148));
      else
        fwrite("lightweight", 0xBuLL, 1uLL, __stream);
      fputc(10, __stream);
    }
    if (*(_DWORD *)(a1 + 168))
      fprintf(__stream, "\tlazy wait: %u: %llu ns\n", *(_DWORD *)(a1 + 168), *(_QWORD *)(a1 + 160));
    if (*(_DWORD *)(a1 + 184))
      fprintf(__stream, "\tlazy CPU: %u: %llu ns\n", *(_DWORD *)(a1 + 184), *(_QWORD *)(a1 + 176));
  }
  v27 = state_name(*(_DWORD *)(a1 + 136));
  fprintf(__stream, "kpc: %s\n", v27);
  if (*(_DWORD *)(a1 + 216))
  {
    if (*(_QWORD *)(a1 + 224))
      fprintf(__stream, "\tclasses: %#llx\n", *(_QWORD *)(a1 + 224));
    if (*(_QWORD *)(a1 + 232))
      fprintf(__stream, "\tthread classes: %#llx\n", *(_QWORD *)(a1 + 232));
    fprintf(__stream, "\t%u counters\n", *(_DWORD *)(a1 + 244));
    v28 = *(unsigned int *)(a1 + 244);
    if ((_DWORD)v28)
    {
      for (i = 0; i < v28; ++i)
      {
        v30 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * i);
        if (v30)
        {
          fprintf(__stream, "\t\tCTR%u: %llu triggering %u\n", i, *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * i), v30);
          v28 = *(unsigned int *)(a1 + 244);
        }
      }
    }
    fprintf(__stream, "\t%u configurations\n", *(_DWORD *)(a1 + 240));
    if (*(_DWORD *)(a1 + 240))
    {
      v31 = 0;
      do
      {
        fprintf(__stream, "\t\tCFG%u: %#llx\n", v31, *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v31));
        ++v31;
      }
      while (v31 < *(unsigned int *)(a1 + 240));
    }
  }
  return 0;
}

uint64_t ktrace_config_get_owner_name(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)a1;
}

uint64_t ktrace_config_get_owner_kind(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 252);
}

uint64_t ktrace_config_get_owner_pid(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 248);
}

uint64_t ktrace_config_get_context_kind(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 256);
}

uint64_t ktrace_config_set_context_kind(uint64_t result, unsigned int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if (a2 >= 5)
    ktrace_remotetime_update_params_cold_1();
  *(_DWORD *)(result + 256) = a2;
  return result;
}

uint64_t ktrace_config_get_reason(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 8);
}

char *ktrace_config_set_reason(uint64_t a1, char *__s1)
{
  void *v4;
  char *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = *(void **)(a1 + 8);
  if (v4)
    free(v4);
  if (__s1)
    result = strdup(__s1);
  else
    result = 0;
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t ktrace_config_get_command(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 16);
}

char *ktrace_config_set_command(uint64_t a1, char *__s1)
{
  void *v4;
  char *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = *(void **)(a1 + 16);
  if (v4)
    free(v4);
  if (__s1)
    result = strdup(__s1);
  else
    result = 0;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t ktrace_config_get_trigger_kind(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 260);
}

uint64_t ktrace_config_set_trigger_kind(uint64_t result, unsigned int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if (a2 >= 4)
    ktrace_remotetime_update_params_cold_1();
  *(_DWORD *)(result + 260) = a2;
  return result;
}

BOOL ktrace_config_kdebug_get_filtering_events(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t ktrace_config_kdebug_get_typefilter(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  *__error() = 0;
  return *(_QWORD *)(a1 + 24);
}

uint64_t ktrace_config_kdebug_get_debugid_enabled(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 68) != 3)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    return (*(unsigned __int8 *)(v2 + ((unint64_t)a2 >> 19)) >> (BYTE2(a2) & 7)) & 1;
  else
    return 1;
}

uint64_t ktrace_config_kdebug_get_buffer_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 56);
}

uint64_t ktrace_config_kdebug_get_procfilt_mode(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 72);
}

uint64_t ktrace_config_kdebug_get_procfilt(uint64_t a1, _QWORD *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  *a2 = *(unsigned int *)(a1 + 64);
  return *(_QWORD *)(a1 + 32);
}

uint64_t ktrace_config_kdebug_pid_included(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  unint64_t v5;
  _DWORD *v6;
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_DWORD *)(a1 + 72);
  result = 1;
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 != 2)
        ktrace_config_kdebug_pid_included_cold_2();
      LODWORD(result) = 0;
    }
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD **)(a1 + 32);
      if (*v6 == a2)
      {
        v7 = 0;
      }
      else
      {
        v8 = 1;
        do
        {
          v9 = v8;
          if (v5 == v8)
            break;
          v10 = v6[v8++];
        }
        while (v10 != a2);
        v7 = v9 >= v5;
      }
    }
    else
    {
      v7 = 1;
    }
    return result ^ v7;
  }
  return result;
}

uint64_t ktrace_config_kdebug_get_wrapping(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int8 *)(a1 + 76);
}

uint64_t ktrace_config_kdebug_using_mach_continuous_time(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t ktrace_config_kdebug_get_coprocessor_tracing(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int8 *)(a1 + 78);
}

uint64_t ktrace_config_kdebug_get_disabling_event_matching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_QWORD **)(a1 + 40);
  if (!v3)
    return 0;
  v4 = *(_QWORD **)(a1 + 48);
  if (!v4)
    return 0;
  v5 = v3[1];
  *(_DWORD *)a2 = *v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v3[2];
  *(_QWORD *)(a2 + 24) = v3[3];
  *(_QWORD *)(a2 + 32) = v3[4];
  v6 = v4[1];
  *(_DWORD *)a3 = *v4;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v4[2];
  *(_QWORD *)(a3 + 24) = v4[3];
  *(_QWORD *)(a3 + 32) = v4[4];
  return 1;
}

uint64_t ktrace_config_kperf_get_action_count(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 128);
}

uint64_t ktrace_config_kperf_get_action_samplers(uint64_t a1, unsigned int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 && *(_DWORD *)(a1 + 128) >= a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (a2 - 1));
  else
    return 0;
}

uint64_t ktrace_config_kperf_get_action_user_data(uint64_t a1, unsigned int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 && *(_DWORD *)(a1 + 128) >= a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (a2 - 1));
  else
    return 0;
}

uint64_t ktrace_config_kperf_get_action_pid_only(uint64_t a1, unsigned int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 && *(_DWORD *)(a1 + 128) >= a2)
    return *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * (a2 - 1));
  else
    return 0xFFFFFFFFLL;
}

uint64_t ktrace_config_kperf_get_timer_count(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 132);
}

uint64_t ktrace_config_kperf_get_timer_action_id(uint64_t a1, unsigned int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 132) <= a2)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * a2);
}

uint64_t ktrace_config_kperf_get_timer_period_ns(uint64_t a1, unsigned int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 132) <= a2)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2);
}

uint64_t ktrace_config_kperf_get_pet_mode(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 140);
}

uint64_t ktrace_config_kperf_get_pet_timer_id(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 144);
}

uint64_t ktrace_config_kperf_get_pet_idle_rate(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 148);
}

uint64_t ktrace_config_kperf_get_kdebug_action_id(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 152);
}

uint64_t ktrace_config_kperf_get_kdebug_filter_desc(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 120);
}

BOOL ktrace_config_kperf_get_lazy_wait_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_DWORD *)(a1 + 168) != 0;
}

uint64_t ktrace_config_kperf_get_lazy_wait_time_threshold(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 168))
    return *(_QWORD *)(a1 + 160);
  else
    return 0;
}

BOOL ktrace_config_kperf_get_lazy_cpu_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_DWORD *)(a1 + 184) != 0;
}

uint64_t ktrace_config_kperf_get_lazy_cpu_time_threshold(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 184))
    return *(_QWORD *)(a1 + 176);
  else
    return 0;
}

uint64_t ktrace_config_kpc_get_classes(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 224);
}

uint64_t ktrace_config_kpc_get_thread_classes(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 232);
}

uint64_t ktrace_config_kpc_get_config(uint64_t a1, _QWORD *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  *a2 = *(unsigned int *)(a1 + 240);
  return *(_QWORD *)(a1 + 192);
}

uint64_t ktrace_config_kpc_get_action_id(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 216) == 3 && (v2 = *(_QWORD *)(a1 + 208)) != 0 && *(_DWORD *)(a1 + 244) > a2)
    return *(unsigned int *)(v2 + 4 * a2);
  else
    return 0;
}

uint64_t ktrace_config_kpc_get_period(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 216) == 3 && (v2 = *(_QWORD *)(a1 + 200)) != 0 && *(_DWORD *)(a1 + 244) > a2)
    return *(_QWORD *)(v2 + 8 * a2);
  else
    return 0;
}

uint64_t ktrace_file_append_local_log_content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  int v10;

  v8 = (void *)objc_msgSend(MEMORY[0x1E0D44698], "localStore");
  if (v8)
    return ktrace_file_append_log_content_from_store(a1, v8, a2, a3, 0, a4, 0);
  v10 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    ktrace_file_append_local_log_content_cold_1();
  *__error() = v10;
  return 22;
}

uint64_t ktrace_file_append_log_content_from_store(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v23[7];
  _QWORD v24[5];
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;

  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = 0;
  v14 = (void *)MEMORY[0x1AF45DCBC]();
  v26 = 0;
  v27 = &v26;
  v28 = 0x3052000000;
  v29 = __Block_byref_object_copy_;
  v30 = __Block_byref_object_dispose_;
  v15 = MEMORY[0x1E0C809B0];
  v31 = 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __ktrace_file_append_log_content_from_store_block_invoke;
  v25[3] = &unk_1E5F6FF38;
  v25[4] = &v26;
  objc_msgSend(a2, "prepareWithCompletionHandler:", v25);
  v16 = v27[5];
  if (v16)
  {
    v17 = dispatch_semaphore_create(0);
    v18 = objc_alloc(MEMORY[0x1E0D44688]);
    v19 = v27[5];
    v23[6] = a1;
    v24[0] = v15;
    v24[1] = 3221225472;
    v24[2] = __ktrace_file_append_log_content_from_store_block_invoke_2;
    v24[3] = &__block_descriptor_40_e16_v16__0__NSData_8l;
    v24[4] = a1;
    v23[0] = v15;
    v23[1] = 3221225472;
    v23[2] = __ktrace_file_append_log_content_from_store_block_invoke_4;
    v23[3] = &unk_1E5F6FF80;
    v23[4] = v17;
    v23[5] = &v32;
    v20 = (void *)objc_msgSend(v18, "initWithSource:dataProcessingBlock:completionBlock:", v19, v24, v23);
    objc_msgSend(v20, "setFlags:", a3);
    objc_msgSend(v20, "setArgumentRedactionBlock:", a5);
    objc_msgSend(v20, "setFilterPredicate:", a4);
    objc_msgSend(v20, "serializeFromDate:toDate:", a6, a7);
    dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);

    dispatch_release(v17);
  }
  _Block_object_dispose(&v26, 8);
  objc_autoreleasePoolPop(v14);
  if (v16)
    v21 = *((unsigned int *)v33 + 6);
  else
    v21 = 22;
  _Block_object_dispose(&v32, 8);
  return v21;
}

void sub_1AF352880(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

int *__ktrace_file_append_log_content_from_store_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  int *result;

  if (a3)
  {
    v4 = objc_msgSend(a3, "localizedDescription");
    v5 = *__error();
    ktrace_log_init();
    v6 = ktrace_log;
    v7 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v7)
        __ktrace_file_append_log_content_from_store_block_invoke_cold_2(a3, v5, v6);
    }
    else if (v7)
    {
      __ktrace_file_append_log_content_from_store_block_invoke_cold_1();
    }
    result = __error();
    *result = v5;
  }
  else
  {
    result = a2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  }
  return result;
}

_DWORD *__ktrace_file_append_log_content_from_store_block_invoke_2(uint64_t a1, void *a2)
{
  _DWORD *result;
  int v3;

  result = ktrace_file_append_chunk(*(_QWORD *)(a1 + 32), 32785, *MEMORY[0x1E0D446C8], 0, (UInt8 *)objc_msgSend(a2, "bytes"), objc_msgSend(a2, "length"));
  if (!result)
  {
    v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_file_append_log_content_from_store_block_invoke_2_cold_1();
    result = __error();
    *result = v3;
  }
  return result;
}

intptr_t __ktrace_file_append_log_content_from_store_block_invoke_4(uint64_t a1, void *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;

  switch(a3)
  {
    case 1:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_2();
      v6 = 57;
      goto LABEL_26;
    case 2:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_3();
      v6 = 55;
      goto LABEL_26;
    case 3:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_4();
      v6 = 6;
      goto LABEL_26;
    case 4:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_5();
      v6 = 89;
      goto LABEL_26;
    case 6:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_6();
      v6 = 45;
      goto LABEL_26;
    case 7:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_7();
      v6 = 1;
      goto LABEL_26;
    case 8:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_8();
      v6 = 22;
      goto LABEL_26;
    case 9:
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_9();
      v6 = 70;
LABEL_26:
      *__error() = v5;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
      break;
    default:
      break;
  }
  if (a2
    && !ktrace_file_append_chunk(*(_QWORD *)(a1 + 48), 32786, *MEMORY[0x1E0D446C8], 0, (UInt8 *)objc_msgSend(a2, "bytes"), objc_msgSend(a2, "length")))
  {
    v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_file_append_log_content_from_store_block_invoke_4_cold_1();
    *__error() = v7;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL ktrace_file_contains_log_content(uint64_t a1)
{
  _BOOL8 v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __ktrace_file_contains_log_content_block_invoke;
  v3[3] = &unk_1E5F6FFA8;
  v3[4] = &v8;
  v3[5] = &v4;
  ktrace_file_iterate(a1, 0, (uint64_t)v3);
  if (*((_BYTE *)v9 + 24))
    v1 = *((_BYTE *)v5 + 24) != 0;
  else
    v1 = 0;
  _Block_object_dispose(&v4, 8);
  _Block_object_dispose(&v8, 8);
  return v1;
}

void sub_1AF352E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL __ktrace_file_contains_log_content_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = ktrace_chunk_tag(a2);
  if (v3 == 32785)
  {
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    if (v3 != 32786)
      return !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;
    v4 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 8) + 24) = 1;
  return !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;
}

void sub_1AF353150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

unsigned int *ktrace_cpus_create(uint64_t *a1)
{
  _DWORD *v2;
  int v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  size_t count;

  if (ktrace_chunk_tag((uint64_t)a1) != 7168 || ktrace_chunk_version_major((uint64_t)a1) >= 2)
  {
    v2 = 0;
    *__error() = 0;
    return v2;
  }
  count = 0;
  if ((unint64_t)ktrace_chunk_size((uint64_t)a1) <= 7)
  {
LABEL_6:
    v2 = 0;
    *__error() = 79;
    return v2;
  }
  v4 = ktrace_chunk_copy_data(a1, 0, &count, 8uLL);
  if (v4)
  {
    v2 = 0;
    *__error() = v4;
    return v2;
  }
  if ((_DWORD)count != 1)
  {
    if ((_DWORD)count == 1437204737)
      return _create_from_legacy_cpu_map(a1, HIDWORD(count));
    goto LABEL_6;
  }
  v5 = malloc_type_calloc(HIDWORD(count), 0x28uLL, 0x10000400A747E1EuLL);
  if (!v5)
    ktrace_remotetime_update_params_cold_1();
  v6 = v5;
  v7 = ktrace_chunk_copy_data(a1, 8, v5, 40 * HIDWORD(count));
  if (v7)
  {
    v8 = v7;
    v2 = 0;
  }
  else
  {
    v2 = _create_from_cpu_map(HIDWORD(count), (uint64_t)v6);
    v8 = *__error();
  }
  free(v6);
  *__error() = v8;
  return v2;
}

unsigned int *_create_from_legacy_cpu_map(uint64_t *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  NSObject *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  char *v12;
  int v13;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = ktrace_chunk_size_t(a1);
  v5 = a2;
  if (v4 < ((16 * a2) | 8uLL))
  {
    v6 = v4;
    *__error() = 79;
    v7 = *__error();
    ktrace_log_init();
    v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      v17 = 134218752;
      v18 = v6;
      v19 = 2048;
      v20 = (16 * a2) | 8;
      v21 = 1024;
      v22 = a2;
      v23 = 1024;
      v24 = v7;
      _os_log_error_impl(&dword_1AF33A000, v8, OS_LOG_TYPE_ERROR, "legacy CPU map chunk is too small %zu, expected %zu for %u CPUs (%{errno}d)", (uint8_t *)&v17, 0x22u);
    }
    goto LABEL_8;
  }
  v9 = (unsigned int *)malloc_type_malloc(33 * a2 + 4, 0xBCEC85B9uLL);
  if (!v9)
    ktrace_remotetime_update_params_cold_1();
  v10 = v9;
  v11 = (char *)malloc_type_malloc(16 * a2, 0x3DAB024FuLL);
  if (!v11)
    ktrace_remotetime_update_params_cold_1();
  v12 = v11;
  v13 = ktrace_chunk_copy_data(a1, 8, v11, 16 * a2);
  if (v13)
  {
    v7 = v13;
    free(v10);
    free(v12);
LABEL_8:
    v10 = 0;
    *__error() = v7;
    return v10;
  }
  *v10 = a2;
  if (a2)
  {
    v15 = v12 + 8;
    do
    {
      v16 = (char *)v10 + 33 * *((unsigned int *)v15 - 2);
      __strlcpy_chk();
      v16[36] = *(v15 - 4) & 1;
      v15 += 16;
      --v5;
    }
    while (v5);
  }
  free(v12);
  return v10;
}

_DWORD *_create_from_cpu_map(unsigned int a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;

  LODWORD(v3) = a1;
  v4 = malloc_type_malloc(33 * a1 + 4, 0x66DDB4EuLL);
  if (!v4)
    ktrace_remotetime_update_params_cold_1();
  v5 = v4;
  *v4 = v3;
  if ((_DWORD)v3)
  {
    v3 = v3;
    v6 = a2 + 8;
    do
    {
      v7 = (char *)v5 + 33 * *(unsigned int *)(v6 - 8);
      __strlcpy_chk();
      v7[36] = *(_BYTE *)(v6 - 4) & 1;
      v6 += 40;
      --v3;
    }
    while (v3);
  }
  return v5;
}

_DWORD *ktrace_cpus_create_current()
{
  int v0;
  _DWORD *v1;
  size_t v3;
  void *v4;

  v3 = 0;
  v4 = 0;
  v0 = kdebug_alloc_current_cpu_map(&v4, &v3);
  if (v0)
  {
    v1 = 0;
    *__error() = v0;
  }
  else
  {
    v1 = _create_from_cpu_map(*((_DWORD *)v4 + 1), (uint64_t)v4 + 8);
    free(v4);
  }
  return v1;
}

uint64_t ktrace_cpus_get_count(unsigned int *a1)
{
  return *a1;
}

uint64_t ktrace_cpus_get_cpu_name(uint64_t a1, unsigned int a2)
{
  return a1 + 33 * a2 + 4;
}

uint64_t ktrace_cpus_get_cpu_is_coproc(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 33 * a2 + 36);
}

uint64_t ktrace_print_trace_point(FILE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t earliest_timestamp;
  int v12;
  const char *v14;
  __int128 v15;
  char *name_for_thread;
  __int128 v17;
  const char *v18;
  char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  unint64_t v24;
  char v25[32];
  char v26[32];
  char v27[32];
  char v28[32];
  char v29[32];
  char v30[32];
  _BYTE v31[64];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD __str[2];
  _OWORD v45[64];
  _OWORD v46[64];
  char v47[1024];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v10 = *a3;
  earliest_timestamp = ktrace_get_earliest_timestamp(a2);
  v12 = ktrace_convert_timestamp_to_nanoseconds(a2, v10 - earliest_timestamp, &v24);
  if (v12)
  {
    *__error() = v12;
    return 0xFFFFFFFFLL;
  }
  bzero(v47, 0x400uLL);
  if ((a5 & 1) != 0)
  {
    memset(v31, 0, 56);
    if (!localtime_r(a3 + 7, (tm *)v31))
      return 0xFFFFFFFFLL;
    if (!strftime((char *)v46, 0x400uLL, "%FT%T", (const tm *)v31)
      || !strftime((char *)v45, 0x400uLL, "%Z", (const tm *)v31))
    {
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }
    snprintf(v47, 0x400uLL, "\"%s.%06u%s\"", (const char *)v46, *((_DWORD *)a3 + 16), (const char *)v45);
    v14 = ", \"walltime\": ";
  }
  else
  {
    v14 = "";
  }
  v15 = 0uLL;
  memset(__str, 0, sizeof(__str));
  if ((a5 & 4) != 0 && *((_DWORD *)a3 + 22) != -1)
  {
    snprintf((char *)__str, 0x20uLL, "%d", *((_DWORD *)a3 + 22));
    v15 = 0uLL;
  }
  v45[14] = v15;
  v45[15] = v15;
  v45[12] = v15;
  v45[13] = v15;
  v45[10] = v15;
  v45[11] = v15;
  v45[8] = v15;
  v45[9] = v15;
  v45[6] = v15;
  v45[7] = v15;
  v45[4] = v15;
  v45[5] = v15;
  v45[2] = v15;
  v45[3] = v15;
  v45[0] = v15;
  v45[1] = v15;
  if ((a5 & 2) != 0)
  {
    name_for_thread = (char *)ktrace_get_name_for_thread(a2, (const void *)a3[5]);
    if (name_for_thread)
      escape_string(a4, v45, 0x100uLL, name_for_thread);
  }
  v17 = 0uLL;
  memset(v46, 0, 512);
  if ((a5 & 8) != 0)
  {
    escape_string(a4, v46, 0x200uLL, (char *)a3[9]);
    v17 = 0uLL;
    v18 = ", \"eventname\": ";
  }
  else
  {
    v18 = "";
  }
  v23 = v18;
  v42 = v17;
  v43 = v17;
  v40 = v17;
  v41 = v17;
  v38 = v17;
  v39 = v17;
  v36 = v17;
  v37 = v17;
  v34 = v17;
  v35 = v17;
  v32 = v17;
  v33 = v17;
  *(_OWORD *)&v31[32] = v17;
  *(_OWORD *)&v31[48] = v17;
  *(_OWORD *)v31 = v17;
  *(_OWORD *)&v31[16] = v17;
  if ((a5 & 0x10) != 0)
  {
    v19 = (char *)a3[10];
    if (v19)
      escape_string(a4, v31, 0x100uLL, v19);
  }
  if ((_DWORD)a4)
  {
    v20 = "%llu";
    snprintf(v30, 0x20uLL, "%llu");
  }
  else
  {
    v20 = "\"%llu\"";
    snprintf(v30, 0x20uLL, "\"%llu\"");
  }
  snprintf(v29, 0x20uLL, v20, a3[1]);
  snprintf(v28, 0x20uLL, v20, a3[2]);
  snprintf(v27, 0x20uLL, v20, a3[3]);
  snprintf(v26, 0x20uLL, v20, a3[4]);
  snprintf(v25, 0x20uLL, v20, a3[5]);
  if (a4 < 2)
    return fprintf(a1, "{ \"timestampns\": %s%s%s%s%s, \"debugid\": %u, \"args\": [ %s, %s, %s, %s ], \"cpuid\": %u, \"threadid\": %s%s%s%s%s%s%s }", v30, v14, v47, v23, v46, *((unsigned int *)a3 + 12), v29, v28, v27, v26, *((unsigned int *)a3 + 13), v25);
  if ((_DWORD)a4 != 2)
    ktrace_print_trace_point_cold_1();
  if ((a5 & 1) != 0)
    v21 = ",";
  else
    v21 = "";
  if ((a5 & 8) != 0)
    v22 = ",";
  else
    v22 = "";
  return fprintf(a1, "%s%s%s%s%s,%u,%s,%s,%s,%s,%u,%s%s%s%s%s%s%s", v30, v21, v47, v22, v46, *((unsigned int *)a3 + 12), v29, v28, v27, v26, *((unsigned int *)a3 + 13), v25);
}

uint64_t escape_string(uint64_t result, _BYTE *a2, unint64_t a3, char *__s)
{
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;

  *a2 = 34;
  if (!__s)
  {
LABEL_7:
    v10 = 1;
    goto LABEL_20;
  }
  if ((_DWORD)result == 2)
  {
    v7 = a3 - 2;
    v8 = *__s;
    if (*__s)
      v9 = v7 >= 2;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_7;
    v13 = __s + 1;
    v14 = 1;
    v15 = 1;
    do
    {
      if (v8 == 34)
      {
        ++v15;
        a2[v14] = 34;
        LOBYTE(v8) = *(v13 - 1);
      }
      v10 = v15 + 1;
      a2[v15] = v8;
      v16 = *v13++;
      v8 = v16;
      v14 = v15 + 1;
      if (v16)
        v17 = v7 > v10;
      else
        v17 = 0;
      ++v15;
    }
    while (v17);
  }
  else
  {
    v11 = strlen(__s);
    if (v11 >= a3 >> 2)
      v12 = a3 >> 2;
    else
      v12 = v11;
    result = strsnvisx(a2 + 1, a3 - 2, __s, v12, 34, "\\\"\b\f\n\r\t");
    v10 = result + 1;
  }
  if (v10 <= 0)
    escape_string_cold_1();
LABEL_20:
  *(_WORD *)&a2[v10] = 34;
  return result;
}

uint64_t ktrace_print_csv_header(FILE *a1, uint64_t a2, char a3)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v3 = ",walltime";
  v4 = "";
  if ((a3 & 1) == 0)
    v3 = "";
  v5 = ",eventname";
  if ((a3 & 8) == 0)
    v5 = "";
  v6 = ",threadname";
  if ((a3 & 2) == 0)
    v6 = "";
  v7 = ",pid";
  if ((a3 & 4) == 0)
    v7 = "";
  if ((a3 & 0x10) != 0)
    v4 = ",execname";
  return fprintf(a1, "timestampns%s%s,debugid,arg1,arg2,arg3,arg4,cpuid,threadid%s%s%s", v3, v5, v6, v7, v4);
}

void thread_cputime_map_update(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unsigned int v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  _QWORD *state;
  uint64_t v16;
  const void *v17;
  uint64_t *Value;
  uint64_t v19;
  __CFDictionary *v20;
  _QWORD *v21;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  v10 = a3 & 0xFFFFFFFC;
  if ((int)(a3 & 0xFFFFFFFC) <= 20971555)
  {
    if (v10 == 20971520 || v10 == 20971528)
    {
      if (a5)
      {
        v11 = *(const void **)(a4 + 16);
        v12 = *(const void **)(a4 + 40);
        v13 = *(_QWORD *)a4;
      }
      else
      {
        v11 = (const void *)*(unsigned int *)(a4 + 12);
        v12 = (const void *)*(unsigned int *)(a4 + 24);
        v13 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFLL;
      }
      state = thread_cputime_get_state((CFDictionaryRef *)a2, v12);
      v16 = state[1];
      if (!v16)
      {
        if (*(_BYTE *)(a2 + 16))
        {
          v16 = *(_QWORD *)(a1 + 488);
        }
        else
        {
          v16 = v13;
          if ((unint64_t)(*state + 1) >= 2)
            ktrace_remotetime_update_params_cold_1();
        }
      }
      if (*state != -1)
        *state = *state + v13 - v16;
      state[1] = 0;
      *((_QWORD *)thread_cputime_get_state((CFDictionaryRef *)a2, v11) + 1) = v13;
      return;
    }
LABEL_28:
    thread_cputime_map_update_cold_1();
  }
  if (v10 == 20971556)
  {
    if (a5)
      v17 = *(const void **)(a4 + 40);
    else
      v17 = (const void *)*(unsigned int *)(a4 + 24);
    v21 = thread_cputime_get_state((CFDictionaryRef *)a2, v17);
    if (*v21 != -1)
      *v21 = -1;
  }
  else
  {
    if (v10 != 117440524)
      goto LABEL_28;
    if (a5)
      v14 = *(const void **)(a4 + 8);
    else
      v14 = (const void *)*(unsigned int *)(a4 + 8);
    Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)a2, v14);
    if (Value)
    {
      v19 = *Value;
      v20 = *(__CFDictionary **)a2;
      *(_QWORD *)(a2 + 8) += v19;
      CFDictionaryRemoveValue(v20, v14);
    }
  }
}

const void *thread_cputime_get_state(CFDictionaryRef *a1, const void *a2)
{
  const void *Value;
  void *v5;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  Value = CFDictionaryGetValue(*a1, a2);
  if (!Value)
  {
    v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
    if (!v5)
      ktrace_remotetime_update_params_cold_1();
    Value = v5;
    CFDictionarySetValue(*a1, a2, v5);
  }
  return Value;
}

void thread_cputime_map_destroy(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

void thread_cputime_map_dropped_events(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = 1;
  if (!*(_QWORD *)a2)
    ktrace_remotetime_update_params_cold_1();
  CFDictionaryApplyFunction(*(CFDictionaryRef *)a2, (CFDictionaryApplierFunction)apply_clear_oncore, 0);
}

void apply_clear_oncore(uint64_t a1, _QWORD *a2)
{
  if (a2[1])
  {
    if (*a2 != -1)
      a2[1] = 0;
  }
}

CFMutableDictionaryRef ktrace_set_thread_cputime_enabled(CFMutableDictionaryRef result, int a2)
{
  CFMutableDictionaryRef v2;
  CFMutableDictionaryRef *v3;
  CFMutableDictionaryRef *v4;
  CFDictionaryValueCallBacks v5;

  if (!result)
    ktrace_remotetime_update_params_cold_1();
  v2 = result;
  if ((*((_WORD *)result + 112) & 3) != 0)
    ktrace_set_thread_cputime_enabled_cold_4();
  if (a2 && !*((_DWORD *)result + 68))
  {
    *((_DWORD *)result + 68) = 1;
    *(_OWORD *)&v5.version = xmmword_1E5F70018;
    *(_OWORD *)&v5.release = *(_OWORD *)&off_1E5F70028;
    v5.equal = (CFDictionaryEqualCallBack)ptr_equal_callback;
    v3 = (CFMutableDictionaryRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x1020040545B2139uLL);
    *((_QWORD *)v2 + 51) = v3;
    if (!v3)
      ktrace_remotetime_update_params_cold_1();
    v4 = v3;
    result = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v5);
    *v4 = result;
    if (!result)
      ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

uint64_t ktrace_get_thread_cputime_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 272);
}

_QWORD *ktrace_get_cputime_for_thread(uint64_t a1, const void *a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_DWORD *)(a1 + 272))
    return 0;
  result = CFDictionaryGetValue(**(CFDictionaryRef **)(a1 + 408), a2);
  if (result)
  {
    v4 = result;
    result = (_QWORD *)*result;
    v5 = v4[1];
    if (v5)
      return (_QWORD *)((char *)result + *(_QWORD *)(a1 + 496) - v5);
  }
  return result;
}

uint64_t ktrace_get_cputime_total(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_DWORD *)(a1 + 272))
    return 0;
  v1 = *(_QWORD *)(a1 + 408);
  v2 = *(const __CFDictionary **)v1;
  if (!*(_QWORD *)v1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_QWORD *)(v1 + 8);
  v5 = a1;
  v6 = v3;
  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)apply_sum_time, &v5);
  return v6;
}

void apply_sum_time(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (*a2 != -1)
  {
    v3 = a3[1] + *a2;
    a3[1] = v3;
    v4 = a2[1];
    if (v4)
      a3[1] = v3 - v4 + *(_QWORD *)(*a3 + 496);
  }
}

uint64_t clear_events(uint64_t result, _QWORD *a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t j;

  for (i = 0; i != 1024; ++i)
  {
    v3 = *(_QWORD *)(result + 8 * i);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 56);
      for (j = *(_QWORD *)(result + 8 * i); v4; v4 = *(_QWORD *)(v4 + 56))
        j = v4;
      *(_QWORD *)(j + 56) = *a2;
      *a2 = v3;
      *(_QWORD *)(result + 8 * i) = 0;
    }
  }
  return result;
}

__n128 insert_start_event(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  void *v14;

  v5 = *(_QWORD *)(a3 + 40);
  v6 = v5 & 0x3FF;
  v7 = *(void **)(a1 + 8 * v6);
  if (!v7)
    goto LABEL_9;
  if (*((_QWORD *)v7 + 5) == v5 && *((_DWORD *)v7 + 12) == *(_DWORD *)(a3 + 48))
  {
    *(_QWORD *)(a1 + 8 * v6) = *((_QWORD *)v7 + 7);
    goto LABEL_13;
  }
  v8 = *((_QWORD *)v7 + 7);
  if (!v8)
  {
LABEL_9:
    v7 = *a2;
    if (*a2)
      *a2 = (void *)*((_QWORD *)v7 + 7);
    else
      v7 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
    goto LABEL_13;
  }
  while (*(_QWORD *)(v8 + 40) != v5 || *(_DWORD *)(v8 + 48) != *(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      goto LABEL_9;
  }
  v9 = *(void **)(v8 + 56);
  *((_QWORD *)v7 + 7) = v9;
  v10 = v7 == v9;
  v7 = (void *)v8;
  if (v10)
    ktrace_remotetime_update_params_cold_1();
LABEL_13:
  result = *(__n128 *)a3;
  v12 = *(_OWORD *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v7 + 3) = v13;
  *(__n128 *)v7 = result;
  *((_OWORD *)v7 + 1) = v12;
  *((_DWORD *)v7 + 12) &= 0xFFFFFFFC;
  v14 = *(void **)(a1 + 8 * v6);
  *((_QWORD *)v7 + 7) = v14;
  *(_QWORD *)(a1 + 8 * v6) = v7;
  if (v7 == v14)
    ktrace_remotetime_update_params_cold_1();
  return result;
}

uint64_t match_end_event(uint64_t a1, __int128 **a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 *v5;
  unsigned int v6;
  __int128 *v7;
  __int128 *v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(__int128 **)(a1 + 8 * (v4 & 0x3FF));
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(a3 + 48) & 0xFFFFFFFC;
  if (*((_QWORD *)v5 + 5) != v4 || *((_DWORD *)v5 + 12) != v6)
  {
    v7 = (__int128 *)*((_QWORD *)v5 + 7);
    if (v7)
    {
      while (*((_QWORD *)v7 + 5) != v4 || *((_DWORD *)v7 + 12) != v6)
      {
        v7 = (__int128 *)*((_QWORD *)v7 + 7);
        if (!v7)
          return 0;
      }
      v9 = (__int128 *)*((_QWORD *)v7 + 7);
      *((_QWORD *)v5 + 7) = v9;
      v10 = v5 == v9;
      v5 = v7;
      if (v10)
        ktrace_remotetime_update_params_cold_1();
      goto LABEL_11;
    }
    return 0;
  }
  *(_QWORD *)(a1 + 8 * (v4 & 0x3FF)) = *((_QWORD *)v5 + 7);
LABEL_11:
  v11 = *v5;
  v12 = v5[1];
  v13 = v5[3];
  a4[2] = v5[2];
  a4[3] = v13;
  *a4 = v11;
  a4[1] = v12;
  *((_QWORD *)v5 + 7) = *a2;
  *a2 = v5;
  return 1;
}

_QWORD *ktrace_file_create(uint64_t a1, char *a2)
{
  int v3;

  if (a1 && *(_DWORD *)(a1 + 16) == 4)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v3 = open(a2, 1538, 438);
  if (v3 == -1)
    return 0;
  else
    return ktrace_file_create_fd(a1, v3);
}

_QWORD *ktrace_file_create_fd(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  int internal;
  int v7;

  if (a2 < 0)
    ktrace_remotetime_update_params_cold_1();
  v4 = ktrace_file_alloc_fd(a2, 1);
  if (!v4)
  {
    v7 = *__error();
    close(a2);
    goto LABEL_6;
  }
  v5 = (_QWORD *)v4;
  internal = ktrace_file_create_internal(v4, a1);
  if (internal)
  {
    v7 = internal;
    ktrace_file_close(v5);
LABEL_6:
    v5 = 0;
    *__error() = v7;
  }
  return v5;
}

_QWORD *ktrace_file_create_memory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;

  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v4 = ktrace_file_alloc_memory(0, 0, a2, a3);
  v5 = v4;
  if (v4 && ktrace_file_create_internal((uint64_t)v4, a1))
  {
    ktrace_file_close(v5);
    return 0;
  }
  return v5;
}

_QWORD *ktrace_file_alloc_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;

  v9 = ktrace_file_alloc();
  v10 = (_QWORD *)v8;
  if (v8)
  {
    *(_DWORD *)(v8 + 16) = 2;
    *(_DWORD *)(v8 + 196) = -1;
    *(_QWORD *)(v8 + 256) = a3;
    *(_QWORD *)(v8 + 264) = a4;
    if (a1)
    {
      *(_QWORD *)(v8 + 280) = a2;
      *(_QWORD *)(v8 + 240) = a1;
      *(_QWORD *)(v8 + 248) = a2;
      if (a3)
      {
        *(_BYTE *)(v8 + 296) = 1;
      }
      else if (!a2)
      {
        ktrace_remotetime_update_params_cold_1();
      }
    }
    else
    {
      if (!a3)
        ktrace_remotetime_update_params_cold_1();
      *(_BYTE *)(v8 + 296) = 1;
      v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, double))(a3 + 16))(a3, 0, 0, 0x2000, v9);
      v10[30] = v11;
      if (v11)
      {
        v10[31] = 0x2000;
      }
      else
      {
        *__error() = 12;
        ktrace_file_close(v10);
        return 0;
      }
    }
  }
  return v10;
}

uint64_t ktrace_file_create_internal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uuid_t out;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v5 = ktrace_file_write_header_system_default(a1);
    if ((_DWORD)v5)
      return v5;
    goto LABEL_10;
  }
  *(_QWORD *)out = 0x155AA0300;
  *(_QWORD *)&out[8] = 40;
  v16 = *(_QWORD *)(a2 + 188);
  v17 = *(_OWORD *)(a2 + 160);
  v18 = *(_QWORD *)(a2 + 176);
  v19 = *(_DWORD *)(a2 + 184);
  v20 = *(_BYTE *)(a2 + 298) != 0;
  ktrace_file_write_header_internal(a1, (uint64_t)out);
  v5 = v4;
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 20) = 4;
    v11 = 0;
    v12 = &v11;
    v13 = 0x2000000000;
    v14 = 0;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __ktrace_file_write_header_template_block_invoke;
    v10[3] = &unk_1E5F70268;
    v10[4] = &v11;
    v10[5] = a1;
    v6 = ktrace_file_header_iterate(a2, 0, (uint64_t)v10);
    v7 = *((_DWORD *)v12 + 6);
    if (v7)
      v5 = v7;
    else
      v5 = v6;
    _Block_object_dispose(&v11, 8);
  }
  if (!(_DWORD)v5)
  {
LABEL_10:
    memset(out, 0, sizeof(out));
    uuid_generate_random(out);
    if (ktrace_file_header_append_chunk(a1, 35841, 0, 0, out, 16) || (v5 = *__error(), !(_DWORD)v5))
    {
      v5 = 0;
      v8 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 56) = 16;
      *(_QWORD *)(a1 + 64) = v8;
      *(_QWORD *)(a1 + 72) = v8;
    }
  }
  return v5;
}

void ktrace_file_close(_QWORD *cf)
{
  if (!cf)
    ktrace_remotetime_update_params_cold_1();
  if (cf[25])
    ktrace_remotetime_update_params_cold_1();
  if (CFGetRetainCount(cf) != 1)
    ktrace_remotetime_update_params_cold_1();
  CFRelease(cf);
}

uint64_t ktrace_file_alloc_fd(int a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  stat v7;
  statfs v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(&v7, 0, sizeof(v7));
  if (a1 == -1)
    ktrace_remotetime_update_params_cold_1();
  if (fstat(a1, &v7) < 0)
    return 0;
  if ((v7.st_mode & 0xF000) == 0x4000)
  {
    v4 = 0;
    *__error() = 21;
  }
  else
  {
    ktrace_file_alloc();
    v4 = v5;
    if (v5)
    {
      bzero(&v8, 0x878uLL);
      if (!fstatfs(a1, &v8) && (v8.f_flags & 0x1000) != 0)
        *(_BYTE *)(v4 + 301) = 1;
      *(_DWORD *)(v4 + 16) = 1;
      *(_DWORD *)(v4 + 196) = a1;
      *(_BYTE *)(v4 + 296) = a2;
    }
  }
  return v4;
}

uint64_t ktrace_file_create_chunk_sink(const void *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  ktrace_file_alloc();
  v3 = v2;
  if (v2)
  {
    *(_DWORD *)(v2 + 196) = -1;
    *(_DWORD *)(v2 + 16) = 4;
    *(_QWORD *)(v2 + 272) = _Block_copy(a1);
    *(_BYTE *)(v3 + 299) = 1;
    *(_BYTE *)(v3 + 296) = 1;
  }
  return v3;
}

uint64_t ktrace_file_open(const char *a1, int a2)
{
  int v3;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2)
    v3 = open(a1, 2);
  else
    v3 = open(a1, 0);
  if (v3 == -1)
    return 0;
  else
    return ktrace_file_open_fd(v3, a2);
}

uint64_t ktrace_file_open_fd(int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  off_t v6;
  int v7;
  int v8;

  if (a1 == -1)
    ktrace_remotetime_update_params_cold_1();
  v4 = ktrace_file_alloc_fd(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = fd_size(*(_DWORD *)(v4 + 196));
    *(_QWORD *)(v5 + 280) = v6;
    if (v6 < 0)
    {
      close(a1);
      *(_DWORD *)(v5 + 196) = -1;
      ktrace_file_close((_QWORD *)v5);
      v5 = 0;
      *__error() = 79;
    }
    else
    {
      v7 = ktrace_file_open_internal(v5, a2);
      if (v7)
      {
        v8 = v7;
        ktrace_file_close((_QWORD *)v5);
        v5 = 0;
        *__error() = v8;
      }
    }
  }
  else
  {
    close(a1);
  }
  return v5;
}

uint64_t ktrace_file_open_internal(uint64_t a1, int a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  int appended;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _QWORD *v25;
  void *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v32 = 0;
  if (ktrace_file_read(a1, &v32, 4uLL, 0) <= 3)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_open_internal_cold_1();
LABEL_4:
    *__error() = v4;
LABEL_5:
    v5 = *__error();
    goto LABEL_67;
  }
  if (v32 <= 1437204736)
  {
    if (v32 != 4096)
    {
      if (v32 == 1095914544)
      {
        *(_DWORD *)(a1 + 20) = 5;
        v33 = 0;
        v34 = &v33;
        v35 = 0x2000000000;
        v36 = 0;
        *(_BYTE *)(a1 + 296) = 0;
        if (*(uint64_t *)(a1 + 280) <= 4096)
        {
LABEL_23:
          *(_QWORD *)&v37 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v37 + 1) = 0x40000000;
          *(_QWORD *)&v38 = __parse_artrace_file_block_invoke;
          *((_QWORD *)&v38 + 1) = &unk_1E5F70290;
          *(_QWORD *)&v39 = &v33;
          *((_QWORD *)&v39 + 1) = a1;
          if (ktrace_file_iterate(a1, 0, (uint64_t)&v37))
            v5 = 1;
          else
            v5 = *((_DWORD *)v34 + 6) != 0;
        }
        else
        {
          v10 = 4096;
          while (1)
          {
            *(_QWORD *)&v37 = 0;
            if (ktrace_file_read(a1, &v37, 8uLL, v10) != 8)
              break;
            v11 = v10 + 8;
            v12 = DWORD1(v37);
            v13 = ktrace_chunk_create(a1, (int)v37 + 20480, 0, 0, DWORD1(v37), v11);
            if (!v13)
            {
              v29 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                ktrace_file_open_internal_cold_3();
              *__error() = v29;
              v28 = *__error();
              goto LABEL_65;
            }
            v14 = v13;
            appended = ktrace_chunk_array_append_internal(a1 + 24, v13);
            if (appended)
            {
              v30 = appended;
              free(v14);
              *__error() = v30;
              v28 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                ktrace_file_open_internal_cold_4();
              goto LABEL_65;
            }
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
            *(_QWORD *)(a1 + 32) = v14;
            v10 = v11 + v12;
            if (v10 >= *(_QWORD *)(a1 + 280))
              goto LABEL_23;
          }
          v27 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
            ktrace_file_open_internal_cold_5();
          *__error() = v27;
          __error();
          v28 = 0;
LABEL_65:
          *__error() = v28;
          v5 = *__error();
        }
        _Block_object_dispose(&v33, 8);
        goto LABEL_67;
      }
      if (v32 == 1437204736)
      {
        v6 = 1;
LABEL_26:
        *(_DWORD *)(a1 + 20) = v6;
        v9 = parse_v1_file(a1);
        goto LABEL_27;
      }
      goto LABEL_38;
    }
    *(_DWORD *)(a1 + 20) = 4;
    v7 = a1;
    v8 = 1;
LABEL_16:
    v9 = parse_v3_header(v7, v8);
LABEL_27:
    v5 = v9;
    goto LABEL_67;
  }
  switch(v32)
  {
    case 1437204737:
      v6 = 2;
      goto LABEL_26;
    case 1437204992:
      *(_DWORD *)(a1 + 20) = 3;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_file_open_internal_cold_8();
      *(_BYTE *)(a1 + 296) = 0;
      if (ktrace_file_read(a1, &v37, 0x120uLL, 0) != 288)
      {
        v4 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_open_internal_cold_7();
        goto LABEL_4;
      }
      *(_QWORD *)(a1 + 168) = *((_QWORD *)&v37 + 1);
      *(_DWORD *)(a1 + 176) = v38;
      v16 = 1000000000;
      if (*((_QWORD *)&v38 + 1))
      {
        v17 = *((_QWORD *)&v38 + 1);
        v18 = 1000000000;
        do
        {
          v16 = v17;
          v17 = v18 % v17;
          v18 = v16;
        }
        while (v17);
      }
      v19 = *((_QWORD *)&v38 + 1) / v16;
      *(_DWORD *)(a1 + 188) = 0x3B9ACA00 / v16;
      *(_DWORD *)(a1 + 192) = v19;
      if ((BYTE4(v38) & 1) != 0)
      {
        *(_BYTE *)(a1 + 298) = 1;
        v20 = 32;
      }
      else
      {
        v20 = 32;
        if (!*(_BYTE *)(a1 + 298))
          v20 = 28;
      }
      v23 = (-(v20 * DWORD1(v37)) & 0xFFCLL) + v20 * (uint64_t)SDWORD1(v37);
      if (*(_QWORD *)(a1 + 280) >= v23)
      {
        v25 = ktrace_chunk_create(a1, 7424, 1, 0, v23 - 288, 288);
        if (!v25)
          goto LABEL_5;
        v26 = v25;
        v5 = ktrace_chunk_array_append_internal(a1 + 24, v25);
        if (v5)
        {
          free(v26);
        }
        else
        {
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 32) = v26;
          if (!synthesize_events_chunk(a1, (-(int)v23 & 0xFFCLL) + v23))
            goto LABEL_5;
        }
        goto LABEL_67;
      }
      v24 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_open_internal_cold_6();
      *__error() = v24;
LABEL_52:
      v5 = 22;
      goto LABEL_67;
    case 1437205248:
      *(_DWORD *)(a1 + 20) = 4;
      v7 = a1;
      v8 = 0;
      goto LABEL_16;
  }
LABEL_38:
  *(_DWORD *)(a1 + 20) = 0;
  LODWORD(v37) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if ((unint64_t)ktrace_file_read(a1, &v37, 4uLL, 0) <= 3)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_open_internal_cold_2();
    goto LABEL_4;
  }
  if (v37 > 0x186A0)
    goto LABEL_52;
  if ((_DWORD)v37)
  {
    v21 = synthesize_thread_map_chunk(a1, 4uLL, v37);
    if (!v21)
      goto LABEL_5;
    v22 = v21[1] + v21[2];
  }
  else
  {
    v22 = 4;
  }
  if (!synthesize_events_chunk(a1, v22))
    goto LABEL_5;
  v5 = 0;
LABEL_67:
  if (*(unsigned __int8 *)(a1 + 296) == a2)
    return v5;
  else
    return 79;
}

_QWORD *ktrace_file_open_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;

  v4 = ktrace_file_alloc_memory(a1, a2, a3, a4);
  v5 = v4;
  if (v4)
  {
    v6 = ktrace_file_open_internal((uint64_t)v4, *((unsigned __int8 *)v4 + 296));
    if (v6)
    {
      v7 = v6;
      ktrace_file_close(v5);
      v5 = 0;
      *__error() = v7;
    }
  }
  return v5;
}

uint64_t ktrace_file_get_memory(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_QWORD *)(a1 + 240);
  if (!v3)
    return 79;
  v4 = 0;
  *a2 = v3;
  *a3 = *(_QWORD *)(a1 + 280);
  return v4;
}

uint64_t ktrace_file_get_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t ktrace_file_read(uint64_t a1, void *a2, size_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int v12;

  *__error() = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v8 = *(_QWORD *)(a1 + 240);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 248);
    if (v9 < a4 || a4 + a3 > v9)
    {
      v11 = __error();
      v12 = 22;
LABEL_12:
      *v11 = v12;
      return -1;
    }
    else
    {
      memcpy(a2, (const void *)(v8 + a4), a3);
    }
  }
  else
  {
    while (1)
    {
      v10 = pread(*(_DWORD *)(a1 + 196), a2, a3, a4);
      if (v10 < a3)
      {
        v11 = __error();
        v12 = 79;
        goto LABEL_12;
      }
      if (v10 != -1)
        return v10;
      if (*__error() != 4)
        return -1;
    }
  }
  return a3;
}

uint64_t ktrace_file_ensure_space(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a1[30])
    ktrace_remotetime_update_params_cold_1();
  v3 = a1[31];
  if (v3 >= a2)
    return 0;
  v4 = a1[31];
  while (v4 >= v3)
  {
    v4 = 2 * v4 - 1;
    if (v4 >= a2)
      goto LABEL_11;
  }
  v4 = a2;
LABEL_11:
  v6 = (*(uint64_t (**)(void))(a1[32] + 16))();
  if (!v6)
    return 12;
  v7 = v6;
  result = 0;
  a1[30] = v7;
  a1[31] = v4;
  return result;
}

uint64_t current_system_is_64_bit()
{
  return 1;
}

uint64_t ktrace_chunk_array_validate_chunk(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  _QWORD *v4;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v4 = *a3;
  if (!*a3)
    return ktrace_chunk_array_next(a1, a2, a3);
  if (v4[3] < *(_QWORD *)(a2 + 16))
    return 0;
  v6 = *__error();
  ktrace_log_init();
  v7 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    v8 = v4[3];
    v9 = *(_QWORD *)(a2 + 16);
    v10 = 134218496;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    v14 = 1024;
    v15 = v6;
    _os_log_error_impl(&dword_1AF33A000, v7, OS_LOG_TYPE_ERROR, "attempt to iterate chunk at position %zu with only %zu chunks (%{errno}d)", (uint8_t *)&v10, 0x1Cu);
  }
  *__error() = v6;
  return 79;
}

uint64_t ktrace_file_iterate(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v13 = a2;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 16) == 4)
    ktrace_remotetime_update_params_cold_1();
  v5 = *(_QWORD *)(a1 + 200);
  if (v5)
    return ktrace_file_iterate_subfile(v5, *(unsigned int *)(a1 + 216), 0, a3);
  v7 = ktrace_chunk_array_validate_chunk(a1, a1 + 24, &v13);
  if ((_DWORD)v7)
  {
    v8 = v7;
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_iterate_cold_5();
    *__error() = v9;
  }
  else
  {
    if (v13)
    {
      v12 = v13;
      while ((*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
      {
        v10 = v12;
        v11 = ktrace_chunk_array_next(a1, a1 + 24, &v12);
        if (v12 == v10)
        {
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_FAULT))
            ktrace_file_iterate_cold_4();
          return 5;
        }
        v8 = v11;
        if ((_DWORD)v11 || !v12)
          return v8;
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_file_iterate_cold_3();
    }
    return 0;
  }
  return v8;
}

uint64_t ktrace_file_iterate_subfile(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  char v24;

  if (*(_DWORD *)(a1 + 16) == 4)
    ktrace_remotetime_update_params_cold_1();
  v23[0] = 0;
  v23[1] = v23;
  if (a3)
    v4 = 32778;
  else
    v4 = 32779;
  v23[2] = 0x2000000000;
  v24 = 1;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __ktrace_file_iterate_subfile_block_invoke;
  v8[3] = &unk_1E5F702E0;
  v9 = v4;
  v10 = a2;
  v8[6] = &v15;
  v8[7] = &v19;
  v8[8] = v23;
  v8[4] = a4;
  v8[5] = &v11;
  v5 = ktrace_file_iterate(a1, 0, (uint64_t)v8);
  *((_DWORD *)v12 + 6) = v5;
  v6 = *((unsigned int *)v16 + 6);
  if (!(_DWORD)v6)
  {
    *((_DWORD *)v16 + 6) = v5;
    v6 = v5;
    if (!(_DWORD)v5)
      v6 = 2 * (*((_BYTE *)v20 + 24) == 0);
  }
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(v23, 8);
  return v6;
}

_QWORD *ktrace_file_append_file(uint64_t a1, int a2, __int16 a3, __int16 a4, char *a5, unint64_t a6, off_t a7)
{
  int v13;
  int v14;
  off_t st_size;
  size_t v16;
  UInt8 *v17;
  UInt8 *v18;
  CFIndex v19;
  _QWORD *appended;
  int v21;
  int v22;
  NSObject *v23;
  stat v25;
  uint8_t buf[4];
  unint64_t v27;
  __int16 v28;
  off_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v13 = open(a5, 0);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v13;
    memset(&v25, 0, sizeof(v25));
    if (fstat(v13, &v25) == -1)
    {
      v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_append_file_cold_2();
    }
    else
    {
      st_size = v25.st_size;
      v16 = v25.st_size - a6;
      if (v25.st_size <= a6)
      {
        *__error() = 34;
        v21 = *__error();
        ktrace_log_init();
        v23 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          v27 = a6;
          v28 = 2048;
          v29 = st_size;
          v30 = 1024;
          v31 = v21;
          _os_log_error_impl(&dword_1AF33A000, v23, OS_LOG_TYPE_ERROR, "invalid file size to append, offset = %jd, filesize = %jd (%{errno}d)", buf, 0x1Cu);
        }
      }
      else
      {
        v17 = (UInt8 *)mmap(0, v25.st_size - a6, 1, 1, v14, a6);
        if (v17 != (UInt8 *)-1)
        {
          v18 = v17;
          if (st_size >= a7)
            v19 = a7;
          else
            v19 = st_size;
          appended = ktrace_file_append_chunk(a1, a2, a3, a4, v17, v19);
          if (munmap(v18, v16) != -1)
            goto LABEL_22;
          v21 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
            ktrace_file_append_file_cold_4();
LABEL_21:
          *__error() = v21;
LABEL_22:
          close(v14);
          return appended;
        }
        v21 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_append_file_cold_3();
      }
    }
    appended = 0;
    goto LABEL_21;
  }
  v22 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    ktrace_file_append_file_cold_1();
  appended = 0;
  *__error() = v22;
  return appended;
}

_QWORD *ktrace_file_append_subchunk(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5, UInt8 *a6, CFIndex a7)
{
  _QWORD *appended;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)(a1 + 152) == a2)
  {
    appended = ktrace_file_append_start_subchunk(a1, a2, a3, a4, a5);
    if (appended
      && (ktrace_file_append_data(a1, (uint64_t)appended, a6, a7)
       || a1 != -1 && ktrace_file_append_finish(a1, (uint64_t)appended)))
    {
      return 0;
    }
  }
  else
  {
    appended = 0;
    *__error() = 22;
  }
  return appended;
}

_QWORD *ktrace_file_append_start_subchunk(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5)
{
  int *v7;
  _QWORD *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)(a1 + 152) == a2)
  {
    result = ktrace_file_append_start_internal(a1, a3, a4, a5);
    if (result)
    {
      *(_WORD *)(a2 + 36) |= 0x8000u;
      result[5] = a2;
      *(_QWORD *)(a1 + 152) = result;
    }
  }
  else
  {
    v7 = __error();
    result = 0;
    *v7 = 22;
  }
  return result;
}

_QWORD *ktrace_file_append(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  UInt8 *v5;
  _QWORD *appended;
  int v7;
  __int16 v8;
  __int16 v9;

  v4 = ktrace_chunk_size((uint64_t)a2);
  if (v4)
  {
    v5 = (UInt8 *)ktrace_chunk_map_data(a2, 0, v4);
    if (!v5)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = ktrace_chunk_tag((uint64_t)a2);
  v8 = ktrace_chunk_version_major((uint64_t)a2);
  v9 = ktrace_chunk_version_minor((uint64_t)a2);
  appended = ktrace_file_append_chunk(a1, v7, v8, v9, v5, v4);
  if (v5)
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, v4);
  return appended;
}

uint64_t ktrace_file_header_iterate(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  v10 = a2;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v5 = *(_QWORD *)(a1 + 200);
  if (v5)
    return ktrace_file_iterate_subfile(v5, *(_DWORD *)(a1 + 216), 1, a3);
  v7 = ktrace_chunk_array_validate_chunk(a1, a1 + 80, &v10);
  if ((_DWORD)v7)
  {
    v8 = v7;
    v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_iterate_cold_5();
    *__error() = v9;
  }
  else
  {
    if (v10)
    {
      while ((*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
      {
        v8 = ktrace_chunk_array_next(a1, a1 + 80, &v10);
        if ((_DWORD)v8 || !v10)
          return v8;
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_file_iterate_cold_3();
    }
    return 0;
  }
  return v8;
}

uint64_t ktrace_file_append_live_ktrace_transformed(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, _QWORD *a5, uint64_t a6)
{
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t appended;
  uint64_t v24;
  int v26;
  int v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  UInt8 *v39;
  void *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  unint64_t v47;
  _DWORD v48[226];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_BYTE *)(a1 + 296))
  {
    *__error() = 22;
    v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_ktrace_cold_3();
    goto LABEL_35;
  }
  bzero(v48, 0x388uLL);
  if (a4 <= 1 && !a6)
  {
    *__error() = 22;
    v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_ktrace_transformed_cold_8();
LABEL_35:
    *__error() = v12;
    return *__error();
  }
  if (a4 < 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v48;
    ktrace_compressor_init(v48, a4);
  }
  v43 = 0;
  v40 = malloc_type_calloc(1uLL, 0x400000uLL, 0xED05397CuLL);
  if (!v40)
  {
    v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_ktrace_transformed_cold_3();
    goto LABEL_35;
  }
  v39 = (UInt8 *)malloc_type_calloc(1uLL, 0x400000uLL, 0x203E65ACuLL);
  if (!v39)
  {
    v20 = *__error();
    v26 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_live_ktrace_transformed_cold_4();
    v16 = 0;
    *__error() = v26;
    goto LABEL_52;
  }
  v37 = a6;
  v34 = a4;
  v35 = a5;
  v13 = 1000000 * a3;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    ktrace_file_append_live_ktrace_transformed_cold_7();
  v14 = mach_absolute_time();
  v15 = ktrace_current_timebase();
  v16 = 0;
  v17 = HIDWORD(v15);
  v18 = v15;
  v36 = v14 + v13 / v15 * HIDWORD(v15);
  while (1)
  {
    v42 = 0x400000;
    if (v13)
      v19 = kdebug_wait_and_read_events(v40, &v42, v13 / 0xF4240);
    else
      v19 = kdebug_read_events(v40, &v42);
    v20 = v19;
    if ((_DWORD)v19)
    {
      *__error() = v19;
      v27 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_append_live_ktrace_transformed_cold_6();
      goto LABEL_46;
    }
    if (!v42)
      break;
    v21 = tracepoint_timestamp((uint64_t)v40 + v42 - 64, 1);
    v22 = v21;
    if (!a2 || v43 || v21 >= a2)
    {
      v41 = 0;
      appended = append_transformed_events_internal(a1, &v43, (uint64_t)v40, v42, v39, 1, &v41, (uint64_t)v38, v37);
      if ((_DWORD)appended)
      {
        v20 = appended;
        *__error() = appended;
        v27 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_append_live_ktrace_transformed_cold_5();
LABEL_46:
        *__error() = v27;
        goto LABEL_51;
      }
      v16 += v41;
      if (v22 > v36)
      {
        ktrace_log_init();
        v32 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          v45 = v36;
          v46 = 2048;
          v47 = v22;
          v29 = "ending transformed append: cutoff timestamp was %llu, newest event is %llu\n";
          v30 = v32;
          v31 = 22;
LABEL_49:
          _os_log_impl(&dword_1AF33A000, v30, OS_LOG_TYPE_INFO, v29, buf, v31);
        }
        goto LABEL_50;
      }
    }
    if (a3)
    {
LABEL_31:
      v24 = mach_absolute_time();
      v13 -= (v24 - v14) * v18 / v17;
      v14 = v24;
      if ((v13 & 0x8000000000000000) != 0)
        goto LABEL_50;
    }
    else if ((v13 & 0x8000000000000000) != 0)
    {
      goto LABEL_50;
    }
  }
  if (a3)
    goto LABEL_31;
  ktrace_log_init();
  v28 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    v29 = "ending transformed append: no more events";
    v30 = v28;
    v31 = 2;
    goto LABEL_49;
  }
LABEL_50:
  v20 = 0;
LABEL_51:
  a5 = v35;
  a4 = v34;
LABEL_52:
  free(v40);
  free(v39);
  if (v43)
  {
    v33 = finish_events_chunk(a1, v43, a4 > 1, v16);
    v20 = v33;
    if (a5)
    {
      if (!(_DWORD)v33)
        *a5 = v43;
    }
  }
  return v20;
}

uint64_t ktrace_file_append_live_filtered_ktrace(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t a5)
{
  int v5;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a3 < 5)
    return ktrace_file_append_live_ktrace_transformed(a1, 0, a2, a3, a4, a5);
  v5 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    ktrace_file_append_live_filtered_ktrace_cold_2();
  *__error() = v5;
  return 22;
}

_QWORD *ktrace_file_compress(uint64_t a1, unsigned int a2)
{
  int v4;
  int v5;
  int v6;
  _QWORD *fd;
  void *v9;
  void *v10;
  int v11;
  std::error_code *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  _QWORD v19[7];
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint8_t buf[4];
  std::__fs::filesystem::path *p_from;
  __int16 v27;
  std::__fs::filesystem::path *p_to;
  __int16 v29;
  int v30;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __from;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 <= 1 || *(_DWORD *)(a1 + 20) != 4)
  {
    fd = 0;
    *__error() = 45;
    return fd;
  }
  bzero(&__from, 0x400uLL);
  bzero(&__to, 0x400uLL);
  v4 = *(_DWORD *)(a1 + 196);
  if (v4 != -1)
  {
    if (fcntl(v4, 50, &__to) < 0)
    {
      v13 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_compress_cold_3();
    }
    else
    {
      __sprintf_chk((char *)&__from, 0, 0x400uLL, "%s.XXXXXX", (const char *)&__to);
      v5 = mkstemp((char *)&__from);
      if (v5 < 0)
      {
        v13 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_compress_cold_4();
      }
      else
      {
        v6 = v5;
        if ((fcopyfile(v4, v5, 0, 7u) & 0x80000000) == 0)
        {
          fd = ktrace_file_create_fd(a1, v6);
          goto LABEL_12;
        }
        v15 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_compress_cold_5();
        *__error() = v15;
        v13 = *__error();
        close(v6);
      }
    }
    fd = 0;
    *__error() = v13;
    return fd;
  }
  fd = ktrace_file_create_memory(a1, *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264));
  v6 = -1;
LABEL_12:
  if (fd)
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x2000000000;
    v24 = 0;
    v9 = malloc_type_malloc(0x400000uLL, 0xBA92C05FuLL);
    if (v9)
    {
      v10 = v9;
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = __ktrace_file_compress_block_invoke;
      v19[3] = &unk_1E5F70048;
      v19[5] = fd;
      v19[6] = v9;
      v20 = a2;
      v19[4] = &v21;
      v11 = ktrace_file_iterate(a1, 0, (uint64_t)v19);
      if (v11)
      {
        *((_DWORD *)v22 + 6) = v11;
      }
      else if (!*((_DWORD *)v22 + 6) && (*(_DWORD *)(a1 + 196) & 0x80000000) == 0)
      {
        rename(&__from, &__to, v12);
        if (v16 < 0)
        {
          *((_DWORD *)v22 + 6) = *__error();
          v17 = *__error();
          ktrace_log_init();
          v18 = ktrace_file_log;
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            p_from = &__from;
            v27 = 2080;
            p_to = &__to;
            v29 = 1024;
            v30 = v17;
            _os_log_error_impl(&dword_1AF33A000, v18, OS_LOG_TYPE_ERROR, "failed to rename %s to %s (%{errno}d)", buf, 0x1Cu);
          }
          *__error() = v17;
        }
      }
      free(v10);
      if (!*((_DWORD *)v22 + 6))
      {
        ktrace_file_close((_QWORD *)a1);
        goto LABEL_33;
      }
      if ((v6 & 0x80000000) == 0)
        unlink((const char *)&__from);
      ktrace_file_close(fd);
      v14 = *((_DWORD *)v22 + 6);
    }
    else
    {
      v14 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_compress_cold_2();
    }
    fd = 0;
    *__error() = v14;
LABEL_33:
    _Block_object_dispose(&v21, 8);
  }
  return fd;
}

uint64_t __ktrace_file_compress_block_invoke(uint64_t a1, uint64_t *a2)
{
  int *v4;
  uint64_t result;

  if (ktrace_chunk_tag((uint64_t)a2) == 7680)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) >= 9
      && !append_transformed_events(*(_QWORD *)(a1 + 40), a2, *(UInt8 **)(a1 + 48), *(_DWORD *)(a1 + 56), 0))
    {
      goto LABEL_4;
    }
  }
  else if (!ktrace_file_append(*(_QWORD *)(a1 + 40), a2))
  {
LABEL_4:
    v4 = __error();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *v4;
    return result;
  }
  return 1;
}

uint64_t append_transformed_events(uint64_t a1, uint64_t *a2, UInt8 *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  const UInt8 *v15;
  unint64_t v16;
  int is_64_bit;
  _DWORD *v18;
  int appended;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD v25[226];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v10 = ktrace_chunk_size((uint64_t)a2);
  v11 = v10 - 8;
  if (v10 > 8)
  {
    v14 = v10;
    v15 = ktrace_chunk_map_data(a2, 0, v10);
    if (v15)
    {
      v16 = (unint64_t)v15;
      bzero(v25, 0x388uLL);
      ktrace_compressor_init(v25, a4);
      v23 = 0;
      v24 = 0;
      is_64_bit = ktrace_file_is_64_bit(a1);
      if (a4 <= 1)
        v18 = 0;
      else
        v18 = v25;
      appended = append_transformed_events_internal(a1, &v24, v16 + 8, v11, a3, is_64_bit, &v23, (uint64_t)v18, a5);
      if (appended || (appended = finish_events_chunk(a1, v24, 1, v23)) != 0)
        *__error() = appended;
      v20 = *__error();
      ktrace_chunk_unmap_data((uint64_t)a2, v16, v14);
      *__error() = v20;
      return v24;
    }
    else
    {
      v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        append_transformed_events_cold_1();
      v22 = __error();
      result = 0;
      *v22 = v21;
    }
  }
  else
  {
    v12 = __error();
    result = 0;
    *v12 = 22;
  }
  return result;
}

uint64_t ktrace_file_append_filtered_kdebug_events(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t appended;
  UInt8 *v9;
  UInt8 *v10;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v6 = ktrace_chunk_tag((uint64_t)a2);
  if (v6 == 7680)
  {
    v9 = (UInt8 *)malloc_type_malloc(0x400000uLL, 0x1C07ADB3uLL);
    if (!v9)
      return 0;
    v10 = v9;
    appended = append_transformed_events(a1, a2, v9, 1u, a3);
    v7 = *__error();
    free(v10);
  }
  else
  {
    if (v6 == 7936)
      v7 = 45;
    else
      v7 = 22;
    appended = 0;
  }
  *__error() = v7;
  return appended;
}

uint64_t ktrace_capture_live_stackshot()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v0 = stackshot_config_create();
  if (!v0)
  {
    *__error() = 12;
    v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_capture_live_stackshot_cold_1();
    goto LABEL_10;
  }
  v1 = v0;
  v2 = stackshot_config_set_flags();
  if (v2)
  {
    v3 = v2;
    stackshot_config_dealloc();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_capture_live_stackshot_cold_3();
LABEL_10:
    v1 = 0;
    *__error() = v3;
    return v1;
  }
  v4 = stackshot_capture_with_config();
  if (v4)
  {
    v5 = v4;
    stackshot_config_dealloc();
    *__error() = v5;
    v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_capture_live_stackshot_cold_2();
    goto LABEL_10;
  }
  return v1;
}

uint64_t ktrace_file_append_live_stackshot(uint64_t a1)
{
  return ktrace_file_append_live_stackshot_internal(a1);
}

uint64_t ktrace_file_append_live_stackshot_internal(uint64_t a1)
{
  uint64_t result;
  _QWORD *appended;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = ktrace_capture_live_stackshot();
  if (result)
  {
    appended = ktrace_file_append_stackshot(a1, result);
    stackshot_config_dealloc();
    return (uint64_t)appended;
  }
  return result;
}

uint64_t ktrace_file_walltime_offset(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 20) != 5)
  {
    *a2 = *(_QWORD *)(a1 + 160);
    if (a3)
    {
      v7 = *(_QWORD *)(a1 + 168);
      if (!v7)
        return 79;
      *(_QWORD *)a3 = v7;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 176);
    }
    if (a4)
    {
      if (*(_BYTE *)(a1 + 297))
      {
        v6 = 0;
        *a4 = *(_QWORD *)(a1 + 180);
        return v6;
      }
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_file_walltime_offset_cold_3();
      if (gettimeofday(0, a4))
        return *__error();
    }
    return 0;
  }
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __ktrace_file_walltime_offset_block_invoke;
  v9[3] = &unk_1E5F70070;
  v9[6] = a2;
  v9[7] = a3;
  v9[8] = a4;
  v9[4] = &v10;
  v9[5] = &v14;
  v5 = ktrace_file_iterate(a1, 0, (uint64_t)v9);
  if (*((_BYTE *)v11 + 24))
  {
    if (v5)
      v6 = 1;
    else
      v6 = *((_DWORD *)v15 + 6) != 0;
  }
  else
  {
    v6 = 79;
  }
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
  return v6;
}

BOOL __ktrace_file_walltime_offset_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  if (*(_QWORD *)(a1 + 56))
    v3 = v8;
  else
    v3 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ktariadne_read_times(a2, *(void **)(a1 + 48), 0, v3, *(_DWORD **)(a1 + 64), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 24));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    return 1;
  v4 = *(_QWORD **)(a1 + 56);
  if (!v4)
    return 0;
  timespec_to_timeval();
  *v4 = v5;
  v4[1] = v6;
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t ktrace_file_machtime_to_walltime(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22[2];
  _QWORD v23[2];
  unint64_t v24;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v23[1] = 0;
  v24 = 0;
  v23[0] = 0;
  result = ktrace_file_walltime_offset(a1, &v24, (uint64_t)v23, 0);
  if (!(_DWORD)result)
  {
    v7 = *(_DWORD *)(a1 + 192);
    if (v7)
    {
      v22[0] = *(_DWORD *)(a1 + 188);
      v22[1] = v7;
      timeval_to_timespec();
      v9 = v8;
      v11 = v10;
      v12 = machtime_to_timespec(v22, v24);
      v14 = timespec_subtract(v9, v11, v12, v13);
      v16 = v15;
      v17 = machtime_to_timespec(v22, a3);
      timespec_add(v17, v18, v14, v16);
      timespec_to_timeval();
      v20 = v19;
      result = 0;
      *a2 = v20;
      a2[1] = v21;
    }
    else
    {
      return 79;
    }
  }
  return result;
}

uint64_t ktrace_file_timebase(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_DWORD *)(a1 + 192))
    return 79;
  v3 = 0;
  *a2 = *(_DWORD *)(a1 + 188);
  *a3 = *(_DWORD *)(a1 + 192);
  return v3;
}

uint64_t ktrace_file_earliest_walltime(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v5 = 0;
  result = ktrace_file_earliest_timestamp(a1, &v5);
  if (!(_DWORD)result)
    return ktrace_file_machtime_to_walltime(a1, (_QWORD *)a2, v5);
  return result;
}

uint64_t ktrace_file_earliest_timestamp(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __ktrace_file_earliest_timestamp_block_invoke;
  v10[3] = &unk_1E5F70098;
  v10[4] = &v19;
  v10[5] = &v11;
  v10[6] = &v15;
  v10[7] = a1;
  v3 = ktrace_file_iterate(a1, 0, (uint64_t)v10);
  if ((_DWORD)v3)
  {
    v4 = v3;
    *__error() = v3;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_earliest_timestamp_cold_5();
    *__error() = v5;
  }
  else
  {
    v6 = *((_DWORD *)v20 + 6);
    if (v6)
    {
      *__error() = v6;
      v7 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_earliest_timestamp_cold_4();
      *__error() = v7;
      v4 = *((unsigned int *)v20 + 6);
    }
    else if (*((_BYTE *)v16 + 24))
    {
      v4 = 0;
      *a2 = v12[3];
    }
    else
    {
      *__error() = 22;
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        ktrace_file_earliest_timestamp_cold_3();
      *__error() = v8;
      v4 = 22;
    }
  }
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v4;
}

uint64_t __ktrace_file_earliest_timestamp_block_invoke(_QWORD *a1, uint64_t *a2)
{
  int v4;
  int v5;
  int is_64_bit;
  size_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t (*v13)(unsigned int *, uint64_t, unint64_t *, uint64_t, unint64_t);
  uint64_t v14;
  _OWORD v15[4];
  _OWORD v16[56];
  _BYTE v17[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = ktrace_chunk_tag((uint64_t)a2);
  v5 = v4;
  if (v4 != 7680 && v4 != 20982 && v4 != 7936 || !ktrace_stream_estimate_events(a2))
    return 1;
  is_64_bit = ktrace_file_is_64_bit(a1[7]);
  memset(v15, 0, sizeof(v15));
  if (is_64_bit)
    v7 = 64;
  else
    v7 = 32;
  if (v5 == 20982)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) < 0x30)
      return 1;
    memset(v16, 0, 48);
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(a2, 0, v16, 0x30uLL);
    v11 = *(_QWORD *)&v16[0] & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_18;
  }
  v8 = is_64_bit;
  if (v5 == 7936)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) < 0xD)
      return 1;
    v12 = (unint64_t)(ktrace_chunk_size((uint64_t)a2) - 77) >= 0xFFFFFFFFFFFFFFBFLL
        ? ktrace_chunk_size((uint64_t)a2) - 12
        : 64;
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(a2, 12, v17, v12);
    if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
      return 1;
    bzero(v16, 0x388uLL);
    ktrace_compressor_reset(v16);
    v13 = decompress_32;
    if (v8)
      v13 = decompress_64;
    v14 = 64;
    if (v13((unsigned int *)v16, (uint64_t)v17, (unint64_t *)&v14, (uint64_t)v15, v7) != v7)
    {
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 79;
      return 1;
    }
    v11 = *(_QWORD *)&v15[0];
    if (!v8)
      v11 = *(_QWORD *)&v15[0] & 0xFFFFFFFFFFFFFFLL;
LABEL_18:
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v11;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    return 0;
  }
  if (v5 != 7680)
    return 0;
  if (ktrace_chunk_size((uint64_t)a2) >= (v7 | 8))
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(a2, 8, v15, v7);
    result = 1;
    if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
      return result;
    v10 = *(_QWORD *)&v15[0];
    if (!v8)
      v10 = *(_QWORD *)&v15[0] & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v10;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    return 0;
  }
  return 1;
}

uint64_t ktrace_file_is_64_bit(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int8 *)(a1 + 298);
}

uint64_t ktrace_file_latest_timestamp(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *end_iterator;
  _OWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = __ktrace_file_latest_timestamp_block_invoke;
  v18[3] = &unk_1E5F700C0;
  v18[4] = &v27;
  v18[5] = &v19;
  v18[6] = &v23;
  v5 = ktrace_file_iterate(a1, 0, (uint64_t)v18);
  v6 = v5;
  if ((_DWORD)v5 || (v6 = *((_DWORD *)v20 + 6)) != 0)
  {
    *__error() = v6;
    v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      ktrace_file_latest_timestamp_cold_3();
    *__error() = v7;
    if (!(_DWORD)v5)
LABEL_8:
      v5 = *((unsigned int *)v20 + 6);
  }
  else
  {
    v8 = v24[3];
    if (v8)
    {
      v5 = 0;
      *a2 = v8;
      goto LABEL_11;
    }
    if (!v28[3])
    {
      v5 = 45;
      goto LABEL_11;
    }
    v10 = ktrace_stream_create(0, *(_BYTE *)(a1 + 298), 1);
    if (!v10)
    {
      v5 = *__error();
      goto LABEL_11;
    }
    v11 = (_QWORD *)v10;
    v5 = ktrace_stream_add(v10, v28[3]);
    if (!(_DWORD)v5)
    {
      if (ktrace_chunk_tag(v28[3]) == 7936)
      {
        v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        v13 = dispatch_queue_create("com.apple.ktrace.latest_timestamp", v12);
        v14 = dispatch_group_create();
        v17[0] = v4;
        v17[1] = 0x40000000;
        v17[2] = __ktrace_file_latest_timestamp_block_invoke_5;
        v17[3] = &unk_1E5F70110;
        v17[4] = &v23;
        v17[5] = a1;
        v5 = ktrace_stream_iterate_group((uint64_t)v11, 0x400000uLL, v13, v14, (uint64_t)v17);
        dispatch_group_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(v13);
      }
      else
      {
        end_iterator = ktrace_stream_create_end_iterator(v11);
        if (end_iterator)
        {
          memset(v16, 0, sizeof(v16));
          ktrace_iter_get_event((uint64_t)end_iterator, (uint64_t)v16);
          v5 = 0;
          v24[3] = *(_QWORD *)&v16[0];
        }
        else
        {
          v5 = *__error();
        }
      }
      ktrace_stream_destroy(v11);
      *a2 = v24[3];
      if (!(_DWORD)v5)
        goto LABEL_8;
    }
  }
LABEL_11:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v5;
}

uint64_t __ktrace_file_latest_timestamp_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v5;

  if ((ktrace_chunk_tag((uint64_t)a2) == 7680
     || ktrace_chunk_tag((uint64_t)a2) == 7936
     || ktrace_chunk_tag((uint64_t)a2) == 20982)
    && ktrace_stream_estimate_events(a2))
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  }
  if (ktrace_chunk_tag((uint64_t)a2) == 32775
    && !ktrace_chunk_version_major((uint64_t)a2)
    && (unint64_t)ktrace_chunk_size((uint64_t)a2) >= 8)
  {
    v5 = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = ktrace_chunk_copy_data(a2, 0, &v5, 8uLL);
    if (!*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v5;
  }
  return 1;
}

BOOL __ktrace_file_latest_timestamp_block_invoke_5(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD v8[6];

  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(v4 + 298);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __ktrace_file_latest_timestamp_block_invoke_2;
  v8[3] = &unk_1E5F700E8;
  v8[4] = v5;
  v8[5] = v4;
  return trace_enumerate(a2, a3, v6, (uint64_t)v8);
}

uint64_t __ktrace_file_latest_timestamp_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = tracepoint_timestamp(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 298));
  return 0;
}

uint64_t ktrace_file_earliest_continuous_time(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v4 = kttimesync_init((uint64_t)v7, a1, 0);
  if (!(_DWORD)v4)
  {
    v6 = 0;
    v4 = ktrace_file_earliest_timestamp(a1, &v6);
    if (!(_DWORD)v4)
      *a2 = kttimesync_cont_from_timestamp((uint64_t)v7, v6);
  }
  return v4;
}

uint64_t ktrace_file_latest_continuous_time(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v4 = kttimesync_init((uint64_t)v7, a1, 0);
  if (!(_DWORD)v4)
  {
    v6 = 0;
    v4 = ktrace_file_latest_timestamp(a1, &v6);
    if (!(_DWORD)v4)
      *a2 = kttimesync_cont_from_timestamp((uint64_t)v7, v6);
  }
  return v4;
}

uint64_t ktrace_file_latest_walltime(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v5 = 0;
  result = ktrace_file_latest_timestamp(a1, &v5);
  if (!(_DWORD)result)
    return ktrace_file_machtime_to_walltime(a1, (_QWORD *)a2, v5);
  return result;
}

uint64_t ktrace_file_supports_continuous_time(uint64_t a1)
{
  int v1;
  uint64_t result;
  _OWORD v3[3];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v1 = kttimesync_init((uint64_t)v3, a1, 0);
  result = 0;
  if (!v1)
    return kttimesync_can_convert_continuous((uint64_t)v3);
  return result;
}

uint64_t ktrace_file_uuid(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __ktrace_file_uuid_block_invoke;
  v5[3] = &unk_1E5F70138;
  v5[5] = &v10;
  v5[6] = a2;
  v5[4] = &v6;
  v2 = ktrace_file_header_iterate(a1, 0, (uint64_t)v5);
  if (*((_BYTE *)v11 + 24))
  {
    if (v2)
      v3 = 1;
    else
      v3 = *((_DWORD *)v7 + 6) != 0;
  }
  else
  {
    v3 = 22;
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
  return v3;
}

uint64_t __ktrace_file_uuid_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  if (ktrace_chunk_tag((uint64_t)a2) != 35841)
    return 1;
  v4 = 1;
  if (!ktrace_chunk_version_major((uint64_t)a2))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ktrace_chunk_copy_data(a2, 0, *(void **)(a1 + 48), 0x10uLL);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    return 0;
  }
  return v4;
}

uint64_t ktrace_file_ktrace_event_count(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __ktrace_file_ktrace_event_count_block_invoke;
  v4[3] = &unk_1E5F70160;
  v4[4] = &v5;
  v1 = ktrace_file_iterate(a1, 0, (uint64_t)v4);
  if (v1)
  {
    *__error() = v1;
    v2 = -1;
  }
  else
  {
    v2 = v6[3];
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __ktrace_file_ktrace_event_count_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v4;

  v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 7680 || v4 == 20982 || v4 == 7936)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += ktrace_stream_estimate_events(a2);
  return 1;
}

uint64_t ktrace_file_write_header_system_default(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t current;
  uint64_t v5;
  const __CFData *v6;
  const __CFData *v7;
  size_t Length;
  CFIndex v9;
  UInt8 *v10;
  CFErrorRef v11;
  int v12;
  _BOOL4 v13;
  int v14;
  uint64_t v16;
  timeval v17;
  _QWORD v18[5];
  __darwin_suseconds_t tv_usec;
  uint64_t v20;
  int v21;
  CFErrorRef error;
  CFRange v23;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v18[0] = 0x155AA0300;
  v18[1] = 40;
  v18[2] = ktrace_current_timebase();
  v17.tv_sec = 0;
  *(_QWORD *)&v17.tv_usec = 0;
  v16 = 0;
  v18[3] = mach_absolute_time();
  if (!gettimeofday(&v17, &v16))
  {
    v18[4] = v17.tv_sec;
    tv_usec = v17.tv_usec;
    v20 = v16;
    v21 = 1;
    ktrace_file_write_header_internal(a1, (uint64_t)v18);
    v2 = v3;
    if ((_DWORD)v3)
      return v2;
    *(_DWORD *)(a1 + 20) = 4;
    current = ktrace_machine_create_current();
    if (!current)
      return 0;
    v5 = current;
    error = 0;
    v6 = CFPropertyListCreateData(0, *(CFPropertyListRef *)(current + 216), kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!v6)
    {
      v11 = error;
      v12 = *__error();
      ktrace_log_init();
      v13 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13)
          ktrace_file_write_header_system_default_cold_3();
      }
      else if (v13)
      {
        ktrace_file_write_header_system_default_cold_2();
      }
      *__error() = v12;
      v2 = 22;
      goto LABEL_24;
    }
    v7 = v6;
    Length = CFDataGetLength(v6);
    if (Length)
    {
      v9 = Length;
      v10 = (UInt8 *)malloc_type_malloc(Length, 0xA2EF9FA4uLL);
      if (v10)
      {
        v23.location = 0;
        v23.length = v9;
        CFDataGetBytes(v7, v23, v10);
        if (ktrace_file_header_append_chunk(a1, 35840, 1, 6, v10, v9))
        {
          v2 = 0;
LABEL_23:
          CFRelease(v7);
          free(v10);
LABEL_24:
          ktrace_machine_destroy(v5);
          return v2;
        }
        v14 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
          ktrace_file_write_header_system_default_cold_4();
        *__error() = v14;
      }
      v2 = *__error();
      goto LABEL_23;
    }
    v10 = 0;
    v2 = 22;
    goto LABEL_23;
  }
  return *__error();
}

double ktrace_file_write_header_internal(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _QWORD *appended;
  _QWORD *v5;
  int v6;
  double result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 44);
  *((_QWORD *)&v3 + 1) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 180) = v3;
  *(_BYTE *)(a1 + 298) = *(_BYTE *)(a2 + 52) & 1;
  if (*(_DWORD *)(a1 + 16) == 4)
  {
    appended = ktrace_file_append_chunk(-1, 36863, 0, 0, (UInt8 *)a2, 56);
    if (!appended)
      ktrace_remotetime_update_params_cold_1();
    v5 = appended;
    (*(void (**)(void))(*(_QWORD *)(a1 + 272) + 16))();
    ktrace_chunk_destroy(v5);
    goto LABEL_10;
  }
  if ((unint64_t)ktrace_file_write(a1, (const void *)a2, 0x38uLL, -1) > 0x37)
  {
LABEL_10:
    *(_BYTE *)(a1 + 297) = 1;
    *(_BYTE *)(a1 + 299) = 1;
    *(_QWORD *)(a1 + 288) = 56;
    *(_QWORD *)&result = 16;
    *(_OWORD *)(a1 + 112) = xmmword_1AF3E9BB0;
    *(_QWORD *)(a1 + 128) = 56;
    return result;
  }
  v6 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    ktrace_file_write_header_internal_cold_4();
  *__error() = v6;
  __error();
  return result;
}

_QWORD *ktrace_file_create_iterator(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *iterator;
  _QWORD v7[5];

  v2 = ktrace_stream_create(0, *(_BYTE *)(a1 + 298), 0);
  if (!v2)
    return 0;
  v3 = (_QWORD *)v2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __ktrace_file_create_iterator_block_invoke;
  v7[3] = &__block_descriptor_tmp_12;
  v7[4] = v2;
  v4 = ktrace_file_iterate(a1, 0, (uint64_t)v7);
  iterator = 0;
  if (!v4)
    iterator = ktrace_stream_create_iterator(v3);
  ktrace_stream_destroy(v3);
  return iterator;
}

uint64_t __ktrace_file_create_iterator_block_invoke(uint64_t a1, uint64_t a2)
{
  ktrace_stream_add(*(_QWORD *)(a1 + 32), a2);
  return 1;
}

const __CFDictionary *ktrace_file_relationship_type(const __CFDictionary *result)
{
  const __CFString *Value;

  if (result)
  {
    Value = (const __CFString *)CFDictionaryGetValue(result, CFSTR("type"));
    return (const __CFDictionary *)(Value && CFStringCompare(Value, CFSTR("bridge"), 0) == kCFCompareEqualTo);
  }
  return result;
}

uint64_t ktrace_file_iterate_subfiles(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __ktrace_file_iterate_subfiles_block_invoke;
  v6[3] = &unk_1E5F701D0;
  v6[6] = &v11;
  v6[7] = a1;
  v6[4] = a2;
  v6[5] = &v7;
  v2 = ktrace_file_iterate(a1, 0, (uint64_t)v6);
  *((_DWORD *)v8 + 6) = v2;
  v3 = *((_DWORD *)v12 + 6);
  if (v3)
    v4 = v3;
  else
    v4 = v2;
  *((_DWORD *)v12 + 6) = v4;
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  return v4;
}

uint64_t __ktrace_file_iterate_subfiles_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  const __CFDictionary *v8;
  _QWORD *Value;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  CFPropertyListRef v15;
  int v16;
  _QWORD v18[9];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  if (ktrace_chunk_tag((uint64_t)a2) == 32778)
  {
    v34 = 0;
    v35 = &v34;
    v36 = 0x2000000000;
    v37 = -1;
    v30 = 0;
    v31 = &v30;
    v32 = 0x2000000000;
    v33 = 0;
    v23 = 0;
    v24 = &v23;
    v25 = 0x5000000000;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v19 = 0;
    v20 = &v19;
    v21 = 0x2000000000;
    v22 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __ktrace_file_iterate_subfiles_block_invoke_2;
    v18[3] = &unk_1E5F701A8;
    v18[4] = a1[6];
    v18[5] = &v34;
    v18[6] = &v19;
    v18[7] = &v23;
    v18[8] = &v30;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = ktrace_chunk_iterate_subchunks(a2, 0, (uint64_t)v18);
    v4 = *(_QWORD *)(a1[6] + 8);
    v5 = *(_DWORD *)(v4 + 24);
    if (!v5)
      v5 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    *(_DWORD *)(v4 + 24) = v5;
    if (*(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
      goto LABEL_5;
    if (*((_BYTE *)v20 + 24))
    {
      v7 = *((_DWORD *)v35 + 6);
      if (v7 != -1)
      {
        if (*((_WORD *)v24 + 14) == 1)
        {
          v8 = *(const __CFDictionary **)(a1[7] + 208);
          if (!v8)
          {
            *(_QWORD *)(a1[7] + 208) = CFDictionaryCreateMutable(0, 1, &long_key_callbacks, MEMORY[0x1E0C9B3A0]);
            v8 = *(const __CFDictionary **)(a1[7] + 208);
            if (!v8)
              ktrace_remotetime_update_params_cold_1();
            v7 = *((_DWORD *)v35 + 6);
          }
          Value = CFDictionaryGetValue(v8, (const void *)v7);
          if (!Value)
          {
            ktrace_file_alloc();
            Value = (_QWORD *)v10;
            *(_DWORD *)(v10 + 196) = -1;
            *(_DWORD *)(v10 + 16) = 3;
            *(_QWORD *)(v10 + 200) = a1[7];
            v11 = v35;
            *(_DWORD *)(v10 + 216) = *((_DWORD *)v35 + 6);
            v12 = v24;
            *(_BYTE *)(v10 + 298) = *((_BYTE *)v24 + 76) & 1;
            *(_QWORD *)(v10 + 160) = v12[6];
            *(_QWORD *)&v13 = *(uint64_t *)((char *)v12 + 68);
            *((_QWORD *)&v13 + 1) = v12[5];
            *(_OWORD *)(v10 + 180) = v13;
            *(_BYTE *)(v10 + 297) = 1;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1[7] + 208), (const void *)*((unsigned int *)v11 + 6), (const void *)v10);
            CFRelease(Value);
          }
          v14 = v31[3];
          if (!v14 || Value[28])
            goto LABEL_19;
          v15 = ktrace_chunk_copy_plist(v14);
          if (v15)
          {
            Value[28] = v15;
LABEL_19:
            (*(void (**)(void))(a1[4] + 16))();
LABEL_5:
            v6 = 1;
LABEL_28:
            _Block_object_dispose(&v19, 8);
            _Block_object_dispose(&v23, 8);
            _Block_object_dispose(&v30, 8);
            _Block_object_dispose(&v34, 8);
            return v6;
          }
          v6 = 0;
LABEL_27:
          *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 79;
          goto LABEL_28;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (!v31[3])
        goto LABEL_5;
      if (*((_DWORD *)v35 + 6) != -1)
      {
LABEL_22:
        v16 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          __ktrace_file_iterate_subfiles_block_invoke_cold_2();
LABEL_26:
        v6 = 0;
        *__error() = v16;
        goto LABEL_27;
      }
    }
    v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_file_iterate_subfiles_block_invoke_cold_1();
    goto LABEL_26;
  }
  return 1;
}

BOOL __ktrace_file_iterate_subfiles_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int *v6;
  _BOOL8 result;
  void *v8;
  uint64_t *v9;
  size_t v10;

  v4 = ktrace_chunk_tag(a2);
  if (v4 == 32777)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) || ktrace_chunk_version_major(a2))
    {
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 79;
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_iterate_subfiles_block_invoke_2_cold_3();
      goto LABEL_17;
    }
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = a2;
    return 1;
  }
  if (v4 == 32781)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24)
      || (unint64_t)ktrace_chunk_size(a2) < 0x38
      || ktrace_chunk_version_major(a2))
    {
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 79;
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_iterate_subfiles_block_invoke_2_cold_2();
      goto LABEL_17;
    }
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    v8 = (void *)(*(_QWORD *)(a1[7] + 8) + 24);
    v9 = (uint64_t *)a2;
    v10 = 56;
    goto LABEL_22;
  }
  if (v4 != 32780)
    return 1;
  if ((unint64_t)ktrace_chunk_size(a2) < 4 || ktrace_chunk_version_major(a2))
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 79;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_file_iterate_subfiles_block_invoke_2_cold_1();
LABEL_17:
    v6 = __error();
    result = 0;
    *v6 = v5;
    return result;
  }
  v8 = (void *)(*(_QWORD *)(a1[5] + 8) + 24);
  v9 = (uint64_t *)a2;
  v10 = 4;
LABEL_22:
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = ktrace_chunk_copy_data(v9, 0, v8, v10);
  return *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) == 0;
}

uint64_t ktrace_file_create_subfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, const void *a8)
{
  uint64_t v16;
  int v17;
  _QWORD *appended;
  uint64_t v19;
  const __CFData *Data;
  const __CFData *v21;
  UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v24;
  _QWORD v26[5];
  int v27;
  _QWORD v28[5];
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[6];

  v32 = 0;
  v33 = &v32;
  v34 = 0x2000000000;
  v35 = 0;
  v36 = 1;
  v16 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v37[2] = __find_unused_subfile_id_block_invoke;
  v37[3] = &__block_descriptor_tmp_34;
  v37[4] = &v36;
  v17 = ktrace_file_iterate_subfiles(a1, (uint64_t)v37);
  if (v17)
    goto LABEL_16;
  appended = ktrace_file_append_start(a1, 32778, 0, 0);
  if (!appended)
    goto LABEL_13;
  v19 = (uint64_t)appended;
  if (!ktrace_file_append_subchunk(a1, (uint64_t)appended, 32780, 0, 0, (UInt8 *)&v36, 4))
    goto LABEL_13;
  v28[0] = 0x155AA0300;
  v28[1] = 40;
  v28[2] = a2;
  v28[3] = a3;
  v28[4] = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  if (!ktrace_file_append_subchunk(a1, v19, 32781, 0, 0, (UInt8 *)v28, 56))
  {
LABEL_13:
    if (*__error())
    {
      v17 = *__error();
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (!a8)
    goto LABEL_9;
  Data = CFPropertyListCreateData(0, a8, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
LABEL_15:
    v17 = 5;
    goto LABEL_16;
  }
  v21 = Data;
  BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
  Length = CFDataGetLength(v21);
  if (!ktrace_file_append_subchunk(a1, v19, 32777, 0, 0, BytePtr, Length))
  {
    __error();
    CFRelease(v21);
    goto LABEL_13;
  }
  CFRelease(v21);
LABEL_9:
  v17 = ktrace_file_append_finish(a1, v19);
  if (v17)
  {
LABEL_16:
    v24 = 0;
    *__error() = v17;
    goto LABEL_17;
  }
  v26[0] = v16;
  v26[1] = 0x40000000;
  v26[2] = __ktrace_file_create_subfile_block_invoke;
  v26[3] = &unk_1E5F701F8;
  v27 = v36;
  v26[4] = &v32;
  ktrace_file_iterate_subfiles(a1, (uint64_t)v26);
  v24 = v33[3];
  if (!v24)
    ktrace_remotetime_update_params_cold_1();
  *(_BYTE *)(v24 + 299) = 1;
LABEL_17:
  _Block_object_dispose(&v32, 8);
  return v24;
}

uint64_t __ktrace_file_create_subfile_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 216) == *(_DWORD *)(result + 40))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ktrace_file_append_subfile(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const __CFData *Data;
  const __CFData *v11;
  uint64_t v12;
  UInt8 *BytePtr;
  CFIndex Length;
  _QWORD *v15;
  unsigned int v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  __int128 v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *appended;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;

  v30 = 0;
  v31 = &v30;
  v32 = 0x2000000000;
  v33 = 0;
  v34 = 1;
  v6 = MEMORY[0x1E0C809B0];
  v19 = MEMORY[0x1E0C809B0];
  v20 = 0x40000000;
  v21 = __find_unused_subfile_id_block_invoke;
  *(_QWORD *)&v22 = &__block_descriptor_tmp_34;
  *((_QWORD *)&v22 + 1) = &v34;
  v33 = ktrace_file_iterate_subfiles(a1, (uint64_t)&v19);
  v7 = *((unsigned int *)v31 + 6);
  if (!(_DWORD)v7)
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x2000000000;
    appended = 0;
    appended = ktrace_file_append_start(a1, 32778, 0, 0);
    v8 = v27[3];
    if (v8)
    {
      if (ktrace_file_append_subchunk(a1, v8, 32780, 0, 0, (UInt8 *)&v34, 4))
      {
        v19 = 0x155AA0300;
        v20 = 40;
        v21 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 188);
        v22 = *(_OWORD *)(a2 + 160);
        v23 = *(_QWORD *)(a2 + 176);
        v9 = *(unsigned __int8 *)(a2 + 298);
        v24 = *(_DWORD *)(a2 + 184);
        v25 = v9;
        if (ktrace_file_append_subchunk(a1, v27[3], 32781, 0, 0, (UInt8 *)&v19, 56))
        {
          if (a3)
          {
            Data = CFPropertyListCreateData(0, a3, kCFPropertyListBinaryFormat_v1_0, 0, 0);
            if (!Data)
              goto LABEL_19;
            v11 = Data;
            v12 = v27[3];
            BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
            Length = CFDataGetLength(v11);
            if (!ktrace_file_append_subchunk(a1, v12, 32777, 0, 0, BytePtr, Length))
            {
              *((_DWORD *)v31 + 6) = *__error();
              CFRelease(v11);
              v17 = *((_DWORD *)v31 + 6);
              if (v17)
                v7 = v17;
              else
                v7 = 5;
              goto LABEL_20;
            }
            CFRelease(v11);
          }
          v18[0] = v6;
          v18[1] = 0x40000000;
          v18[2] = __ktrace_file_append_subfile_block_invoke;
          v18[3] = &unk_1E5F70220;
          v18[4] = &v30;
          v18[5] = &v26;
          v18[6] = a1;
          v7 = ktrace_file_header_iterate(a2, 0, (uint64_t)v18);
          if ((_DWORD)v7)
            goto LABEL_20;
          v7 = *((unsigned int *)v31 + 6);
          if ((_DWORD)v7)
            goto LABEL_20;
          v7 = ktrace_file_append_finish(a1, v27[3]);
          *((_DWORD *)v31 + 6) = v7;
          if ((_DWORD)v7)
            goto LABEL_20;
          v15 = ktrace_file_append_start(a1, 32779, 0, 0);
          v27[3] = (uint64_t)v15;
          if (v15 && ktrace_file_append_subchunk(a1, (uint64_t)v15, 32780, 0, 0, (UInt8 *)&v34, 4))
          {
            v7 = ktrace_file_iterate(a2, 0, (uint64_t)v18);
            if (!(_DWORD)v7)
            {
              v7 = *((unsigned int *)v31 + 6);
              if (!(_DWORD)v7)
              {
                v7 = ktrace_file_append_finish(a1, v27[3]);
                *((_DWORD *)v31 + 6) = v7;
              }
            }
            goto LABEL_20;
          }
        }
      }
    }
    if (*__error())
    {
      v7 = *__error();
LABEL_20:
      _Block_object_dispose(&v26, 8);
      goto LABEL_21;
    }
LABEL_19:
    v7 = 5;
    goto LABEL_20;
  }
LABEL_21:
  _Block_object_dispose(&v30, 8);
  return v7;
}

uint64_t __ktrace_file_append_subfile_block_invoke(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  const UInt8 *v5;
  UInt8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;
  CFIndex v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = ktrace_chunk_size_t(a2);
  v5 = ktrace_chunk_map_data(a2, 0, v4);
  if (v5)
  {
    v6 = (UInt8 *)v5;
    v7 = a1[6];
    v8 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v9 = ktrace_chunk_tag((uint64_t)a2);
    v10 = ktrace_chunk_version_major((uint64_t)a2);
    v11 = ktrace_chunk_version_minor((uint64_t)a2);
    v12 = ktrace_chunk_size_t(a2);
    if (ktrace_file_append_subchunk(v7, v8, v9, v10, v11, v6, v12))
    {
      v13 = ktrace_chunk_size_t(a2);
      ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v13);
      return 1;
    }
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *__error();
    v16 = ktrace_chunk_size_t(a2);
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v16);
    v17 = *(_QWORD *)(a1[4] + 8);
    if (*(_DWORD *)(v17 + 24))
      return 0;
    result = 0;
    *(_DWORD *)(v17 + 24) = 5;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
      return 0;
    if (*__error())
      v15 = *__error();
    else
      v15 = 5;
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v15;
  }
  return result;
}

double ktrace_file_alloc()
{
  uint64_t Instance;
  double result;

  ktrace_log_init();
  if (ktrace_file_alloc_once != -1)
    dispatch_once(&ktrace_file_alloc_once, &__block_literal_global_1);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    result = 0.0;
    *(_OWORD *)(Instance + 272) = 0u;
    *(_OWORD *)(Instance + 288) = 0u;
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 256) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_DWORD *)(Instance + 196) = -1;
  }
  return result;
}

uint64_t __ktrace_file_alloc_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  ktrace_file_typeid = result;
  return result;
}

void ktrace_file_dealloc(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  ktrace_chunk_array_destroy(a1 + 80);
  ktrace_chunk_array_destroy(a1 + 24);
  v2 = *(_DWORD *)(a1 + 196);
  if (v2 == -1)
  {
    if (*(_QWORD *)(a1 + 240))
    {
      v3 = *(_QWORD *)(a1 + 264);
      if (v3)
        (*(void (**)(void))(v3 + 16))();
    }
  }
  else
  {
    close(v2);
  }
  v4 = *(const void **)(a1 + 208);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 224);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 272);
  if (v6)
    CFRelease(v6);
}

void ktrace_chunk_array_destroy(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  _QWORD *v4;

  if (a1)
  {
    v2 = *(void **)a1;
    if (v2)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v3 = 0;
        do
        {
          v4 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
          if (v4[8])
          {
            ktrace_chunk_array_destroy(v4 + 6);
            v4 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
          }
          free(v4);
          ++v3;
        }
        while (v3 < *(_QWORD *)(a1 + 16));
        v2 = *(void **)a1;
      }
      free(v2);
    }
    *(_QWORD *)a1 = 0;
  }
}

uint64_t __ktrace_file_write_header_template_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const UInt8 *v5;
  UInt8 *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  __int16 v10;
  _QWORD *appended;
  uint64_t result;
  int *v13;

  if (ktrace_chunk_tag((uint64_t)a2) == 35841)
    return 1;
  v4 = ktrace_chunk_size((uint64_t)a2);
  v5 = ktrace_chunk_map_data(a2, 0, v4);
  if (v5)
  {
    v6 = (UInt8 *)v5;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = ktrace_chunk_tag((uint64_t)a2);
    v9 = ktrace_chunk_version_major((uint64_t)a2);
    v10 = ktrace_chunk_version_minor((uint64_t)a2);
    appended = ktrace_file_header_append_chunk(v7, v8, v9, v10, v6, v4);
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v4);
    if (appended)
      return 1;
  }
  v13 = __error();
  result = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *v13;
  return result;
}

uint64_t parse_v1_file(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  int appended;
  int v17;
  void *v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    parse_v1_file_cold_13();
  *(_BYTE *)(a1 + 296) = 0;
  if (ktrace_file_read(a1, &v21, 0x14uLL, 0) != 20)
  {
    v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      parse_v1_file_cold_12();
    *__error() = v7;
    return *__error();
  }
  v2 = v22;
  *(_QWORD *)(a1 + 168) = v22;
  if (!v2)
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      parse_v1_file_cold_11();
    *(_QWORD *)(a1 + 168) = *(unsigned int *)(a1 + 172);
  }
  v3 = SHIDWORD(v21);
  *(_DWORD *)(a1 + 176) = v23;
  if (!(_DWORD)v3)
  {
    *(_BYTE *)(a1 + 298) = 1;
    v6 = 24;
    goto LABEL_17;
  }
  v4 = synthesize_thread_map_chunk(a1, 0x14uLL, v3);
  if (v4)
  {
    v5 = v4;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      parse_v1_file_cold_10();
    v6 = v5[1] + v5[2];
LABEL_17:
    v24 = 0;
    if ((unint64_t)ktrace_file_read(a1, &v24, 4uLL, v6) > 3)
    {
      if (v24 == 1437204737)
      {
        *(_DWORD *)buf = 0;
        if ((unint64_t)ktrace_file_read(a1, buf, 4uLL, v6 + 4) > 3)
        {
          if (*(_DWORD *)buf < 0x3E9u)
          {
            v12 = (16 * *(unsigned int *)buf) | 8;
            ktrace_log_init();
            v13 = ktrace_file_log;
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
              parse_v1_file_cold_8((uint64_t)buf, v12, v13);
            v14 = ktrace_chunk_create(a1, 7168, 1, 0, v12, v6);
            if (v14)
            {
              v15 = v14;
              appended = ktrace_chunk_array_append_internal(a1 + 80, v14);
              if (!appended)
              {
                *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
                *(_QWORD *)(a1 + 88) = v15;
                v6 += v15[1];
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
                  parse_v1_file_cold_6();
LABEL_50:
                v18 = synthesize_events_chunk(a1, (-(int)v6 & 0xFFFLL) + v6);
                result = 0;
                if (v18)
                  return result;
                return *__error();
              }
              v17 = appended;
              free(v15);
              *__error() = v17;
              v8 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                parse_v1_file_cold_7();
            }
            else
            {
              v8 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                parse_v1_file_cold_5();
            }
          }
          else
          {
            *__error() = 79;
            v8 = *__error();
            ktrace_log_init();
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
              parse_v1_file_cold_4();
          }
        }
        else
        {
          v8 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
            parse_v1_file_cold_3();
        }
      }
      else
      {
        *__error() = 79;
        v8 = *__error();
        ktrace_log_init();
        v11 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          v26 = v6;
          v27 = 1024;
          v28 = v24;
          v29 = 1024;
          v30 = v8;
          _os_log_error_impl(&dword_1AF33A000, v11, OS_LOG_TYPE_ERROR, "value at CPU map magic number (offset %lld) was %#x (%{errno}d)", buf, 0x18u);
        }
      }
    }
    else
    {
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        parse_v1_file_cold_2();
    }
    *__error() = v8;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      parse_v1_file_cold_1();
    goto LABEL_50;
  }
  if (*__error())
    return *__error();
  v9 = 28 * v3;
  if (((28 * (_WORD)v3 + 4088) & 0xFFC) == 0)
  {
    v6 = v9 + 20;
LABEL_45:
    *(_BYTE *)(a1 + 298) = 0;
    goto LABEL_17;
  }
  if ((((_WORD)v9 + 4092) & 0xFFC) == 0)
  {
    v6 = v9 + 24;
    goto LABEL_45;
  }
  v6 = (32 * v3) | 0x18;
  if (v6 <= 0)
    v10 = -(-v6 & 0xFFF);
  else
    v10 = (32 * v3) & 0xFE7 | 0x18;
  if (v10 <= 0x1F)
  {
    *(_BYTE *)(a1 + 298) = 1;
    goto LABEL_17;
  }
  *__error() = 79;
  v20 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    parse_v1_file_cold_9();
  *__error() = v20;
  return 79;
}

uint64_t parse_v3_header(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 56);
  if ((unint64_t)ktrace_file_read(a1, v17, 0x38uLL, 0) <= 0x37)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      parse_v3_header_cold_1();
    *__error() = v4;
    return *__error();
  }
  if (a2)
    v6 = 14;
  else
    v6 = 1;
  if (v6 < WORD2(v17[0]))
    return 79;
  if (((WORD2(v17[0]) > 0xAu) & a2) != 0)
    v7 = 8;
  else
    v7 = 16;
  v8 = *(_OWORD *)((char *)&v17[1] + 8);
  *(_QWORD *)&v9 = *(_QWORD *)((char *)&v17[2] + 12);
  *((_QWORD *)&v9 + 1) = *(_QWORD *)&v17[1];
  *(_OWORD *)(a1 + 180) = v9;
  *(_OWORD *)(a1 + 160) = v8;
  *(_DWORD *)(a1 + 176) = DWORD2(v17[2]);
  ktrace_log_init();
  v10 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    parse_v3_header_cold_3(a1, a1 + 180, v10);
  if ((BYTE4(v17[3]) & 1) != 0)
    *(_BYTE *)(a1 + 298) = 1;
  *(_BYTE *)(a1 + 297) = 1;
  *(_QWORD *)(a1 + 288) = *((_QWORD *)&v17[0] + 1) + 16;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    parse_v3_header_cold_2();
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = 56;
  v12 = *(_QWORD *)(a1 + 280);
  v11 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 56) = 16;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  if (v11 > v12)
  {
    v13 = *__error();
    ktrace_log_init();
    v14 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 280);
      v16 = *(_QWORD *)(a1 + 288);
      *(_DWORD *)buf = 134218496;
      v19 = v15;
      v20 = 2048;
      v21 = v16;
      v22 = 1024;
      v23 = v13;
      _os_log_error_impl(&dword_1AF33A000, v14, OS_LOG_TYPE_ERROR, "file is smaller (%lld) than indicated in the file header chunk (%lld) (%{errno}d)", buf, 0x1Cu);
    }
    *__error() = v13;
    return 79;
  }
  result = 0;
  if (v11 == v12)
    *(_BYTE *)(a1 + 299) = 1;
  return result;
}

uint64_t __parse_artrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  UInt8 *v11;
  UInt8 *v12;
  int v13;
  const __CFDictionary *dict;
  const __CFDictionary *v15;
  CFTypeID v16;
  BOOL v17;
  int v18;
  int v19;
  char v20;
  int valuePtr;
  void *value[2];
  _DWORD v24[7];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20482)
  {
    v8 = *(_QWORD *)(a1 + 40);
    value[0] = 0;
    if (!v8)
      ktrace_remotetime_update_params_cold_1();
    if (!a2)
      ktrace_remotetime_update_params_cold_1();
    v9 = ktrace_chunk_size((uint64_t)a2);
    if (v9)
    {
      v10 = v9;
      v11 = (UInt8 *)malloc_type_malloc(v9, 0x9E5EAC3BuLL);
      if (v11)
      {
        v12 = v11;
        v13 = ktrace_chunk_copy_data(a2, 0, v11, v10);
        if (!v13)
        {
          dict = (const __CFDictionary *)create_dict(v12, v10);
          if (dict)
          {
            v15 = dict;
            if (CFDictionaryGetValueIfPresent(dict, CFSTR("Kernel64bit"), (const void **)value))
            {
              v16 = CFGetTypeID(value[0]);
              if (v16 == CFNumberGetTypeID())
              {
                valuePtr = 0;
                if (CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
                {
                  v13 = 0;
                  v17 = valuePtr == 0;
LABEL_32:
                  v20 = !v17;
                  *(_BYTE *)(v8 + 298) = v20;
                  goto LABEL_41;
                }
                v19 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                  __parse_artrace_file_block_invoke_cold_9();
              }
              else
              {
                if (v16 == CFBooleanGetTypeID())
                {
                  v13 = 0;
                  v17 = CFBooleanGetValue((CFBooleanRef)value[0]) == 0;
                  goto LABEL_32;
                }
                v19 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                  __parse_artrace_file_block_invoke_cold_10();
              }
            }
            else
            {
              v19 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                __parse_artrace_file_block_invoke_cold_8();
            }
            *__error() = v19;
            v13 = 79;
LABEL_41:
            CFRelease(v15);
            goto LABEL_42;
          }
          v13 = *__error();
        }
LABEL_42:
        free(v12);
        goto LABEL_43;
      }
      v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        __parse_artrace_file_block_invoke_cold_7();
    }
    else
    {
      v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        __parse_artrace_file_block_invoke_cold_6();
    }
    *__error() = v18;
    v13 = 79;
LABEL_43:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13;
    return !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  if (v4 != 20481)
    return 1;
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)value = 0u;
  memset(v24, 0, sizeof(v24));
  if (!v5)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((unint64_t)ktrace_chunk_size((uint64_t)a2) > 0x2B)
  {
    v7 = ktrace_chunk_copy_data(a2, 0, value, 0x2CuLL);
    if (!v7)
      *(_QWORD *)(v5 + 188) = *(_QWORD *)&v24[5];
  }
  else
  {
    v6 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      __parse_artrace_file_block_invoke_cold_3();
    *__error() = v6;
    v7 = 79;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
  return !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

_QWORD *synthesize_thread_map_chunk(uint64_t a1, unint64_t a2, int a3)
{
  size_t v6;
  _DWORD *v7;
  _DWORD *v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  _BOOL4 v22;
  _BOOL4 v23;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  NSObject *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  int v33;
  unint64_t v34;
  __int16 v35;
  size_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = (32 * a3) | 4;
  v7 = malloc_type_malloc(v6, 0xE5B64436uLL);
  if (!v7)
  {
    v17 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      synthesize_thread_map_chunk_cold_2();
    *__error() = v17;
    v15 = 0;
    v16 = 0;
    if (*__error())
      goto LABEL_23;
    goto LABEL_9;
  }
  v8 = v7;
  v9 = 28 * a3 + 4;
  v10 = ktrace_file_read(a1, v7, v9, a2);
  if (v10 < v9)
  {
    v11 = v10;
    v12 = *__error();
    v13 = *__error();
    ktrace_log_init();
    v14 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      v33 = 134218496;
      v34 = v11;
      v35 = 2048;
      v36 = v9;
      v37 = 1024;
      v38 = v13;
      _os_log_error_impl(&dword_1AF33A000, v14, OS_LOG_TYPE_ERROR, "only read %zu bytes of expected %zu bytes for 32-bit V1 thread map (%{errno}d)", (uint8_t *)&v33, 0x1Cu);
    }
    v15 = 0;
    v16 = 0;
    *__error() = v13;
    goto LABEL_22;
  }
  if (thread_map_entries_valid(v8, a3, 0))
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      synthesize_thread_map_chunk_cold_3();
    v21 = 0;
LABEL_21:
    v12 = 0;
    v15 = v21 + a2;
    v16 = v9 - v21;
    goto LABEL_22;
  }
  v22 = thread_map_entries_valid(v8 + 1, a3, 0);
  ktrace_log_init();
  v23 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
  if (v22)
  {
    if (v23)
      synthesize_thread_map_chunk_cold_4();
    v21 = 4;
    goto LABEL_21;
  }
  if (v23)
    synthesize_thread_map_chunk_cold_8();
  v25 = v6 - v9;
  v26 = ktrace_file_read(a1, (char *)v8 + v9, v25, v9 + a2);
  if (v26 >= v25)
  {
    v30 = thread_map_entries_valid(v8 + 1, a3, 1);
    ktrace_log_init();
    v31 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
    if (v30)
    {
      v16 = 32 * a3;
      if (v31)
        synthesize_thread_map_chunk_cold_5();
      v12 = 0;
      *(_BYTE *)(a1 + 298) = 1;
      v15 = a2 + 4;
    }
    else
    {
      if (v31)
        synthesize_thread_map_chunk_cold_7();
      v32 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        synthesize_thread_map_chunk_cold_6();
      v15 = 0;
      v16 = 0;
      *__error() = v32;
      v12 = 22;
    }
  }
  else
  {
    v27 = v26;
    v12 = *__error();
    v28 = *__error();
    ktrace_log_init();
    v29 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      v33 = 134218496;
      v34 = v27;
      v35 = 2048;
      v36 = v25;
      v37 = 1024;
      v38 = v28;
      _os_log_error_impl(&dword_1AF33A000, v29, OS_LOG_TYPE_ERROR, "only read %zu bytes of expected %zu bytes in 64-bit V1 thread map (%{errno}d)", (uint8_t *)&v33, 0x1Cu);
    }
    v15 = 0;
    v16 = 0;
    *__error() = v28;
  }
LABEL_22:
  free(v8);
  if (v12)
  {
LABEL_23:
    v18 = 0;
    *__error() = 0;
    return v18;
  }
LABEL_9:
  v18 = ktrace_chunk_create(a1, 7424, 1, 0, v16, v15);
  v19 = ktrace_chunk_array_append((_QWORD *)(a1 + 24), v18);
  if (v19)
  {
    *__error() = v19;
    v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      synthesize_thread_map_chunk_cold_1();
    *__error() = v20;
    free(v18);
    return 0;
  }
  return v18;
}

void *synthesize_events_chunk(uint64_t a1, unint64_t a2)
{
  int v4;
  NSObject *v5;
  _QWORD *v6;
  void *v7;
  int appended;
  int v9;
  uint64_t v11;

  if ((unint64_t)ktrace_file_read(a1, (void *)(a1 + 160), 8uLL, a2) <= 7)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      synthesize_events_chunk_cold_1();
LABEL_21:
    v7 = 0;
    *__error() = v4;
    return v7;
  }
  if (!*(_BYTE *)(a1 + 298))
  {
    v11 = 0;
    if ((unint64_t)ktrace_file_read(a1, &v11, 8uLL, a2 + 56) <= 7)
    {
      v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        synthesize_events_chunk_cold_6();
      goto LABEL_21;
    }
    if (!v11)
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        synthesize_events_chunk_cold_5();
      *(_BYTE *)(a1 + 298) = 1;
    }
  }
  ktrace_log_init();
  v5 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    synthesize_events_chunk_cold_4(a1, a2, v5);
  v6 = ktrace_chunk_create(a1, 7680, 1, 0, *(_QWORD *)(a1 + 280) - (a2 - 8), a2 - 8);
  if (!v6)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      synthesize_events_chunk_cold_2();
    goto LABEL_21;
  }
  v7 = v6;
  appended = ktrace_chunk_array_append_internal(a1 + 24, v6);
  if (appended)
  {
    v9 = appended;
    free(v7);
    *__error() = v9;
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      synthesize_events_chunk_cold_3();
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 32) = v7;
  return v7;
}

BOOL thread_map_entries_valid(_DWORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 >= 100)
    v3 = 100;
  else
    v3 = a2;
  if (a3)
    v4 = 3;
  else
    v4 = 2;
  if (!a3)
  {
    if (*a1)
      goto LABEL_10;
    return 0;
  }
  if (!*(_QWORD *)a1)
    return 0;
LABEL_10:
  v5 = 0;
  if (v3)
  {
    v6 = &a1[v4];
    v7 = v4 * 4 + 20;
    do
    {
      v8 = 0;
      --v3;
      do
      {
        if (!*((_BYTE *)v6 + v8))
          break;
        if (*((char *)v6 + v8) < 32)
          ++v5;
        ++v8;
      }
      while (v8 != 20);
      v6 = (_DWORD *)((char *)v6 + v7);
    }
    while (v3);
  }
  return v5 == 0;
}

BOOL __ktrace_file_iterate_subfile_block_invoke(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  int v6;
  _QWORD v8[6];
  __int128 v9;
  uint64_t v10;
  int v11;
  _QWORD v12[3];
  char v13;

  v4 = 1;
  if (ktrace_chunk_tag((uint64_t)a2) == *(_DWORD *)(a1 + 72))
  {
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2000000000;
    v13 = 1;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __ktrace_file_iterate_subfile_block_invoke_2;
    v8[3] = &unk_1E5F702B8;
    v11 = *(_DWORD *)(a1 + 76);
    v9 = *(_OWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 64);
    v8[4] = *(_QWORD *)(a1 + 32);
    v8[5] = v12;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = ktrace_chunk_iterate_subchunks(a2, 0, (uint64_t)v8);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(_DWORD *)(v5 + 24);
    if (!v6)
      v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *(_DWORD *)(v5 + 24) = v6;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0;
    else
      v4 = 0;
    _Block_object_dispose(v12, 8);
  }
  return v4;
}

BOOL __ktrace_file_iterate_subfile_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 result;
  int v8;
  int *v9;
  int v10;
  int v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(unsigned __int8 *)(v4 + 24);
  *(_BYTE *)(v4 + 24) = 0;
  v6 = ktrace_chunk_tag((uint64_t)a2);
  result = 1;
  if (v6 != 32777 && v6 != 32781)
  {
    if (v6 != 32780)
    {
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) != 0;
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 79;
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_iterate_subfile_block_invoke_2_cold_1();
      goto LABEL_12;
    }
    if (!v5
      || (unint64_t)ktrace_chunk_size((uint64_t)a2) < 4
      || ktrace_chunk_version_major((uint64_t)a2))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 79;
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_file_iterate_subfile_block_invoke_2_cold_2();
LABEL_12:
      v9 = __error();
      result = 0;
      *v9 = v8;
      return result;
    }
    v11 = 0;
    v10 = ktrace_chunk_copy_data(a2, 0, &v11, 4uLL);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v10;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      if (v11 == *(_DWORD *)(a1 + 72))
      {
        result = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t finish_events_chunk(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t appended;
  int v8;
  int v10;

  if (a3)
  {
    v10 = a4;
    v6 = ktrace_chunk_overwrite(a2, 8, &v10, 4uLL);
    if ((_DWORD)v6)
    {
      appended = v6;
      *__error() = v6;
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        finish_events_chunk_cold_2();
LABEL_8:
      *__error() = v8;
      return appended;
    }
  }
  appended = ktrace_file_append_finish(a1, a2);
  if ((_DWORD)appended)
  {
    *__error() = appended;
    v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      finish_events_chunk_cold_1();
    goto LABEL_8;
  }
  return appended;
}

uint64_t append_transformed_events_internal(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, UInt8 *a5, int a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v15;
  CFIndex v16;
  _QWORD v18[14];
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v29 = 0;
  v30 = &v29;
  v31 = 0x2000000000;
  v32 = 0;
  v10 = 32;
  if (a6)
    v10 = 64;
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  if (!a5)
    ktrace_remotetime_update_params_cold_1();
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = __append_transformed_events_internal_block_invoke;
  v18[3] = &unk_1E5F70308;
  v19 = a6;
  v18[4] = a9;
  v18[5] = &v25;
  v20 = a8 != 0;
  v18[8] = 0x400000;
  v18[9] = a8;
  v18[10] = a5;
  v18[11] = a1;
  v18[12] = a2;
  v18[13] = v10;
  v18[6] = &v29;
  v18[7] = &v21;
  trace_enumerate(a3, a4, a6, (uint64_t)v18);
  v15 = *((unsigned int *)v30 + 6);
  if (!(_DWORD)v15)
  {
    v16 = v26[3];
    if (v16)
    {
      v15 = lazy_chunk_write(a1, a2, a8 != 0, a5, v16);
      *((_DWORD *)v30 + 6) = v15;
    }
    else
    {
      v15 = 0;
    }
  }
  *a7 = v22[3];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  return v15;
}

uint64_t __append_transformed_events_internal_block_invoke(uint64_t a1, char *__src)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  CFIndex v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  char *v20;
  size_t v21;

  v4 = *(_QWORD *)__src;
  if (*(_BYTE *)(a1 + 112))
  {
    v5 = *((unsigned int *)__src + 13);
    v6 = __src + 48;
    v7 = *((_QWORD *)__src + 1);
    v8 = *((_QWORD *)__src + 2);
    v9 = *((_QWORD *)__src + 3);
    v10 = *((_QWORD *)__src + 4);
    v11 = *((_QWORD *)__src + 5);
  }
  else
  {
    v5 = HIBYTE(v4);
    v4 &= 0xFFFFFFFFFFFFFFuLL;
    v6 = __src + 28;
    v7 = *((unsigned int *)__src + 2);
    v8 = *((unsigned int *)__src + 3);
    v9 = *((unsigned int *)__src + 4);
    v10 = *((unsigned int *)__src + 5);
    v11 = *((unsigned int *)__src + 6);
  }
  v12 = *(unsigned int *)v6;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13
    || (result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(v13 + 16))(v13, v4, v12, v7, v8, v9, v10, v11, v5), (_DWORD)result))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v16 = *(_QWORD *)(a1 + 64) - v15;
    if (*(_BYTE *)(a1 + 113))
    {
      v17 = *(unsigned int **)(a1 + 72);
      v18 = *(_QWORD *)(a1 + 80);
      v19 = &v17[12 * *v17];
      *((_QWORD *)v17 + 2) = v4;
      *((_QWORD *)v19 + 3) = v7;
      *((_QWORD *)v19 + 4) = v8;
      *((_QWORD *)v19 + 5) = v9;
      *((_QWORD *)v19 + 6) = v10;
      *((_QWORD *)v19 + 7) = v11;
      *((_QWORD *)v19 + 8) = v12 | (v5 << 32);
      v20 = ktrace_compressor_commit((int *)v17, (void *)(v18 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)), v16);
      if (!v20)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = lazy_chunk_write(*(_QWORD *)(a1 + 88), *(uint64_t **)(a1 + 96), *(unsigned __int8 *)(a1 + 113), *(UInt8 **)(a1 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)+ 8)+ 24));
        result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        if ((_DWORD)result)
          return result;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        v20 = ktrace_compressor_commit(*(int **)(a1 + 72), *(void **)(a1 + 80), *(_QWORD *)(a1 + 64));
        if (!v20)
          ktrace_remotetime_update_params_cold_1();
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 104);
      if (v21 > v16)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = lazy_chunk_write(*(_QWORD *)(a1 + 88), *(uint64_t **)(a1 + 96), 0, *(UInt8 **)(a1 + 80), v15);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        v21 = *(_QWORD *)(a1 + 104);
      }
      memcpy((void *)(*(_QWORD *)(a1 + 80) + v15), __src, v21);
      v20 = *(char **)(a1 + 104);
    }
    result = 0;
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v20;
  }
  return result;
}

uint64_t lazy_chunk_write(uint64_t a1, uint64_t *a2, int a3, UInt8 *bytes, CFIndex length)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v9 = *a2;
  if (!v9)
  {
    v10 = setup_events_chunk(a1, a3);
    if (!v10)
      return *__error();
    v9 = (uint64_t)v10;
    *a2 = (uint64_t)v10;
  }
  result = ktrace_file_append_data(a1, v9, bytes, length);
  if ((_DWORD)result)
    *a2 = 0;
  return result;
}

uint64_t __find_unused_subfile_id_block_invoke(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;

  v2 = *(_DWORD *)(a2 + 216);
  v3 = *(unsigned int **)(result + 32);
  if (v2 >= *v3)
    *v3 = v2 + 1;
  return result;
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_14(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_18(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

void ktrace_catalog_internal::IterateProcesses(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  unsigned int *i;

  for (i = *a2; i != *a3; *a2 = i)
  {
    if (!(*(unsigned int (**)(uint64_t, char *))(a4 + 16))(a4, (char *)i + *i))
      break;
    i = *a2 + 1;
  }
}

void ktrace_catalog_internal::IterateThreads(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  unsigned int *i;

  for (i = *a2; i != *a3; *a2 = i)
  {
    if (!(*(unsigned int (**)(uint64_t, char *))(a4 + 16))(a4, (char *)i + *i))
      break;
    i = *a2 + 1;
  }
}

_QWORD *ktrace_catalog_internal::IterateLostEvents(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;

  v2 = (unsigned int *)(*result + *(unsigned __int16 *)(*result - *(int *)*result + 10));
  v3 = (unsigned int *)((char *)v2 + *v2);
  v6 = *v3;
  v4 = v3 + 1;
  v5 = v6;
  if (v6)
  {
    v8 = 4 * v5 - 4;
    v9 = v4;
    do
    {
      v10 = *v9++;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, (char *)v4 + v10);
      if ((_DWORD)result)
        v11 = v8 == 0;
      else
        v11 = 1;
      v8 -= 4;
      v4 = v9;
    }
    while (!v11);
  }
  return result;
}

unsigned int **ktrace_catalog_internal::IterateProcesses(unsigned int **result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  BOOL v13;

  v3 = *result;
  v4 = (int)**result;
  v5 = *(unsigned __int16 *)((char *)*result - v4 + 6);
  if (*(_WORD *)((char *)*result - v4 + 6))
  {
    v6 = *(unsigned int *)((char *)v3 + v5);
    v7 = (char *)v3 + v5 + v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
    v6 = **result;
  }
  v8 = (uint64_t)&v3[*(unsigned int *)((char *)v3 + v5 + v6)] + v5 + v6;
  if (v7 != (char *)v8)
  {
    v9 = v7 + 4;
    v10 = (unsigned int *)(v8 + 4);
    v11 = (unsigned int *)(v7 + 4);
    do
    {
      v12 = *v11++;
      result = (unsigned int **)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v9[v12]);
      if ((_DWORD)result)
        v13 = v11 == v10;
      else
        v13 = 1;
      v9 = (char *)v11;
    }
    while (!v13);
  }
  return result;
}

unsigned int **ktrace_catalog_internal::IterateThreads(unsigned int **result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  BOOL v13;

  v3 = *result;
  v4 = (int)**result;
  v5 = *(unsigned __int16 *)((char *)*result - v4 + 8);
  if (*(_WORD *)((char *)*result - v4 + 8))
  {
    v6 = *(unsigned int *)((char *)v3 + v5);
    v7 = (char *)v3 + v5 + v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
    v6 = **result;
  }
  v8 = (uint64_t)&v3[*(unsigned int *)((char *)v3 + v5 + v6)] + v5 + v6;
  if (v7 != (char *)v8)
  {
    v9 = v7 + 4;
    v10 = (unsigned int *)(v8 + 4);
    v11 = (unsigned int *)(v7 + 4);
    do
    {
      v12 = *v11++;
      result = (unsigned int **)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v9[v12]);
      if ((_DWORD)result)
        v13 = v11 == v10;
      else
        v13 = 1;
      v9 = (char *)v11;
    }
    while (!v13);
  }
  return result;
}

uint64_t ktrace_catalog_internal::GetProcessFromTid(ktrace_catalog_internal *this, unint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD v10[2];
  uint64_t (*v11)(_QWORD *, int *);
  void *v12;
  uint64_t *v13;
  ktrace_catalog_internal *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;

  v20 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v21 = &v20;
  v19 = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 8, &v20, (uint64_t)&std::piecewise_construct, &v21)[3];
  v3 = v17[3];
  if (!v3)
  {
    v4 = (unsigned int *)*((_QWORD *)this + 6);
    v5 = (unsigned int *)(*(_QWORD *)this + *(unsigned __int16 *)(*(_QWORD *)this - **(int **)this + 6));
    v6 = (uint64_t)&v5[*(unsigned int *)((char *)v5 + *v5) + 1] + *v5;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v11 = ___ZN23ktrace_catalog_internal17GetProcessFromTidEy_block_invoke;
    v12 = &unk_1E5F70350;
    v14 = this;
    v15 = v20;
    v13 = &v16;
    if (v4 == (unsigned int *)v6)
    {
      v3 = 0;
    }
    else
    {
      do
      {
        v7 = v11(v10, (int *)((char *)v4 + *v4));
        if (++v4 == (unsigned int *)v6)
          v8 = 0;
        else
          v8 = v7;
      }
      while ((v8 & 1) != 0);
      v3 = v17[3];
    }
  }
  _Block_object_dispose(&v16, 8);
  return v3;
}

void sub_1AF35AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23ktrace_catalog_internal17GetProcessFromTidEy_block_invoke(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17[2];

  v2 = *(unsigned __int16 *)((char *)a2 - *a2 + 10);
  v3 = *(unsigned int *)((char *)a2 + v2);
  v4 = *(unsigned int *)((char *)a2 + v2 + v3);
  if (!(_DWORD)v4)
    return 1;
  v7 = 4 * v4;
  v8 = a1[5] + 8;
  for (i = v2 + v3; ; i += 4)
  {
    v10 = *(unsigned int *)((char *)a2 + i + 4);
    v11 = (char *)a2 + i + v10;
    v12 = (char *)a2 + i + v10 - *((int *)v11 + 1);
    if (*((unsigned __int16 *)v12 + 2) < 5u)
    {
      v13 = 0;
    }
    else
    {
      v13 = *((unsigned __int16 *)v12 + 4);
      if (v13)
        v13 = *(_QWORD *)((char *)a2 + i + v10 + v13 + 4);
    }
    v17[0] = v13;
    v17[1] = (unint64_t)a2;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,KernelTraceCatalog::Process const*>>(v8, v17, v17);
    v14 = v10 - *((int *)v11 + 1);
    if (*(unsigned __int16 *)((char *)a2 + i + v14 + 4) < 5u)
    {
      v15 = 0;
    }
    else
    {
      v15 = *(unsigned __int16 *)((char *)a2 + i + v14 + 8);
      if (v15)
        v15 = *(_QWORD *)((char *)a2 + i + v10 + v15 + 4);
    }
    if (v15 == a1[6])
      break;
    v7 -= 4;
    if (!v7)
      return 1;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  return result;
}

unsigned int *ktrace_catalog_internal::GetThreadFromTid(ktrace_catalog_internal *this, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *result;
  uint64_t __key;

  v2 = (unsigned int *)(*(_QWORD *)this + *(unsigned __int16 *)(*(_QWORD *)this - **(int **)this + 8));
  v3 = (unsigned int *)((char *)v2 + *v2);
  __key = a2;
  result = (unsigned int *)bsearch(&__key, v3 + 1, *v3, 4uLL, (int (__cdecl *)(const void *, const void *))flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::KeyCompare<unsigned long long>);
  if (result)
    return (unsigned int *)((char *)result + *result);
  return result;
}

char *ktrace_catalog_internal::GetProcessFromUniqueID(ktrace_catalog_internal *this, unint64_t *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t *__key;

  v3 = (unsigned int *)(*(_QWORD *)this + *(unsigned __int16 *)(*(_QWORD *)this - **(int **)this + 6));
  v4 = (unsigned int *)((char *)v3 + *v3);
  __key = a2;
  v5 = (unsigned int *)bsearch(&__key, v4 + 1, *v4, 4uLL, (int (__cdecl *)(const void *, const void *))flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Process>>::KeyCompare<unsigned long long>);
  if (!v5)
    return 0;
  v6 = *v5;
  v7 = (char *)v5 + v6;
  v8 = *(unsigned __int16 *)((char *)v5 + v6 - *(int *)((char *)v5 + v6) + 10);
  v9 = (unsigned int *)((char *)v5 + v6 + v8);
  v10 = *v9;
  v11 = *(unsigned int *)((char *)v9 + v10);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 4 * v11;
    v14 = (char *)this + 8;
    v15 = (char *)v5 + v8 + v6 + v10;
    do
    {
      v16 = *(unsigned int *)&v15[v12 + 4];
      v17 = &v15[v12 + v16 - *(int *)&v15[v12 + 4 + v16]];
      if (*((unsigned __int16 *)v17 + 2) >= 5u && (v18 = *((unsigned __int16 *)v17 + 4)) != 0)
        v19 = *(_QWORD *)&v15[v12 + 4 + v16 + v18];
      else
        v19 = 0;
      v21 = v19;
      __key = &v21;
      std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v14, &v21, (uint64_t)&std::piecewise_construct, &__key)[3] = v7;
      v12 += 4;
    }
    while (v13 != v12);
  }
  return v7;
}

_QWORD *ktrace_catalog_open(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  unsigned int *v5;
  int v6;
  int *v7;
  int v8;
  uint64_t v10;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = __ktrace_catalog_open_block_invoke;
  v15[3] = &unk_1E5F70378;
  v15[4] = &v16;
  v1 = ktrace_file_iterate(a1, 0, (uint64_t)v15);
  if (v1)
  {
    v2 = 0;
    *__error() = v1;
    goto LABEL_10;
  }
  v3 = v17[3];
  if (!v3)
  {
    v7 = __error();
    v2 = 0;
    v8 = 45;
LABEL_9:
    *v7 = v8;
    goto LABEL_10;
  }
  v4 = ktrace_chunk_size_t(v3);
  v5 = (unsigned int *)malloc_type_malloc(v4, 0xFE3087F9uLL);
  if (!v5)
  {
    v7 = __error();
    v2 = 0;
    v8 = 12;
    goto LABEL_9;
  }
  v6 = ktrace_chunk_copy_data((uint64_t *)v17[3], 0, v5, v4);
  if (v6)
  {
    free(v5);
    v2 = 0;
    *__error() = v6;
  }
  else
  {
    v2 = (_QWORD *)operator new();
    *v2 = v5;
    v2[1] = 0;
    v10 = operator new();
    v11 = (int *)((char *)v5 + *v5);
    *(_QWORD *)v10 = v11;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_DWORD *)(v10 + 40) = 1065353216;
    v12 = (unsigned __int16 *)((char *)v11 - *v11);
    if (*v12 >= 7u && (v13 = v12[3]) != 0)
      v14 = (char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13);
    else
      v14 = 0;
    *(_QWORD *)(v10 + 48) = v14 + 4;
    v2[1] = v10;
  }
LABEL_10:
  _Block_object_dispose(&v16, 8);
  return v2;
}

void sub_1AF35B3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_catalog_open_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (ktrace_chunk_tag(a2) != 32788 || ktrace_chunk_version_major(a2) > 1)
    return 1;
  result = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return result;
}

void ktrace_catalog_create(uint64_t a1@<X0>, uint64_t **a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6;
  void **v7;
  void ***v8;
  int v9;
  uint64_t v10;
  char *v11;
  int ProcessDirect;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  void **v24;
  void **v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  void *v36;
  unsigned int v37;
  void *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  void *__p;
  char *v52;
  char *v53;
  _QWORD v54[8];
  void **i;
  void ***v56;
  uint64_t v57;
  _QWORD *(*v58)(_QWORD *, _QWORD *);
  void (*v59)(uint64_t);
  _QWORD **v60;
  _QWORD *v61[3];

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = xmmword_1AF3E9BF0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 1;
  *(_WORD *)(a3 + 80) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  __p = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v6 = *(_QWORD *)(a1 + 296);
  i = 0;
  v56 = &i;
  v57 = 0x4002000000;
  v58 = __Block_byref_object_copy__22;
  v59 = __Block_byref_object_dispose__23;
  v61[0] = 0;
  v61[1] = 0;
  v60 = v61;
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 0x40000000;
  v54[2] = ___ZL30ktrace_catalog_read_thread_mapP6kthmapRN11flatbuffers17FlatBufferBuilderERNSt3__16vectorINS1_6OffsetIN18KernelTraceCatalog7ProcessEEENS4_9allocatorIS9_EEEERNS5_INS6_INS7_6ThreadEEENSA_ISF_EEEE_block_invoke;
  v54[3] = &unk_1E5F70468;
  v54[6] = a3;
  v54[7] = &v48;
  v54[4] = &i;
  v54[5] = v6;
  kthmap_iterate_threads(v6, (uint64_t)v54);
  v44 = a1;
  v7 = v56[5];
  v8 = v56 + 6;
  if (v7 != (void **)(v56 + 6))
  {
    do
    {
      v9 = *((_DWORD *)v7 + 8);
      v10 = (uint64_t)v7[5];
      v11 = (char *)kthmap_name_for_pid(v6, v9);
      ProcessDirect = KernelTraceCatalog::CreateProcessDirect((flatbuffers::FlatBufferBuilder *)a3, v10, v9, v11, v7 + 6);
      v13 = ProcessDirect;
      v14 = v52;
      if (v52 >= v53)
      {
        v16 = (char *)__p;
        v17 = (v52 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        v19 = v53 - (_BYTE *)__p;
        if ((v53 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)&v53, v20);
          v16 = (char *)__p;
          v14 = v52;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = v13;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        __p = v22;
        v52 = v15;
        v53 = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v52 = ProcessDirect;
        v15 = v14 + 4;
      }
      v52 = v15;
      v24 = (void **)v7[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (void **)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (void **)v7[2];
          v26 = *v25 == v7;
          v7 = v25;
        }
        while (!v26);
      }
      v7 = v25;
    }
    while (v25 != (void **)v8);
  }
  _Block_object_dispose(&i, 8);
  std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy((uint64_t)&v60, v61[0]);
  v27 = *a2;
  v28 = a2[1];
  for (i = &v45; v27 != v28; ++v27)
  {
    v29 = *v27;
    flatbuffers::FlatBufferBuilder::NotNested(a3);
    *(_BYTE *)(a3 + 70) = 1;
    v30 = *(_QWORD *)(a3 + 40);
    v31 = *(_QWORD *)(a3 + 48);
    v32 = *(_QWORD *)(a3 + 32);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a3, 4, v29, 0);
    LODWORD(v54[0]) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, (int)v32 - (int)v31 + (int)v30);
    std::back_insert_iterator<std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>::operator=[abi:ne180100]((uint64_t *)&i, v54);
  }
  v33 = *(_QWORD *)(v44 + 496);
  if (v52 == __p)
    v34 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Process>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Process>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Process>> &)::t;
  else
    v34 = __p;
  v35 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Process>((flatbuffers::FlatBufferBuilder *)a3, (uint64_t)v34, (v52 - (_BYTE *)__p) >> 2);
  if (v49 == v48)
    v36 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Thread>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>> &)::t;
  else
    v36 = v48;
  v37 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>((flatbuffers::FlatBufferBuilder *)a3, (uint64_t)v36, (v49 - (_BYTE *)v48) >> 2);
  if (v46 == v45)
    v38 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::LostEvent>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>> const&)::t;
  else
    v38 = v45;
  v39 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>((flatbuffers::FlatBufferBuilder *)a3, (uint64_t)v38, (v46 - (_BYTE *)v45) >> 2);
  flatbuffers::FlatBufferBuilder::NotNested(a3);
  *(_BYTE *)(a3 + 70) = 1;
  v40 = *(_DWORD *)(a3 + 32);
  v41 = *(_DWORD *)(a3 + 48);
  v42 = *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a3, 4, v33, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 10, v39);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 8, v37);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 6, v35);
  v43 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v40 - v41 + v42);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v43, "KTCA", 0);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1AF35B844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34)
{
  flatbuffers::FlatBufferBuilder *v34;

  _Block_object_dispose(&a28, 8);
  std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a10, a34);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(v34);
  _Unwind_Resume(a1);
}

uint64_t ktrace_catalog_postprocess_file(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  _QWORD v9[7];
  _QWORD v10[5];
  _QWORD v11[5];
  void *__p;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x4002000000;
  v11[3] = __Block_byref_object_copy__0;
  v11[4] = __Block_byref_object_dispose__0;
  v13 = 0;
  v14 = 0;
  __p = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v6 = MEMORY[0x1E0C809B0];
  v19 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = ___ZL36ktrace_catalog_file_contains_catalogP11ktrace_file_block_invoke;
  v15[3] = &unk_1E5F70490;
  v15[4] = &v16;
  ktrace_file_iterate(a2, 0, (uint64_t)v15);
  v7 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  if (!v7)
  {
    ktrace_set_execnames_enabled(a1, 1);
    v10[0] = v6;
    v10[1] = 0x40000000;
    v10[2] = __ktrace_catalog_postprocess_file_block_invoke;
    v10[3] = &unk_1E5F703A0;
    v10[4] = v11;
    ktrace_events_single(a1, 117571592, v10);
    v9[0] = v6;
    v9[1] = 0x40000000;
    v9[2] = __ktrace_catalog_postprocess_file_block_invoke_2;
    v9[3] = &unk_1E5F703C8;
    v9[4] = v11;
    v9[5] = a1;
    v9[6] = a2;
    ktrace_postprocessing_set_completed_handler(a3, v9);
  }
  _Block_object_dispose(v11, 8);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1AF35BA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  _Block_object_dispose(&a22, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __ktrace_catalog_postprocess_file_block_invoke(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (char *)v3[6];
  v5 = v3[7];
  if ((unint64_t)v4 >= v5)
  {
    v7 = (char *)v3[5];
    v8 = (v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)v7;
    v10 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v3 + 7), v11);
      v7 = (char *)v3[5];
      v4 = (char *)v3[6];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = *a2;
    v6 = v13 + 8;
    while (v4 != v7)
    {
      v15 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v13 - 1) = v15;
      v13 -= 8;
    }
    v3[5] = v13;
    v3[6] = v6;
    v3[7] = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v4 = *a2;
    v6 = v4 + 8;
  }
  v3[6] = v6;
}

void __ktrace_catalog_postprocess_file_block_invoke_2(_QWORD *a1)
{
  UInt8 *BufferPointer;
  _DWORD v3[24];

  ktrace_catalog_create(a1[5], (uint64_t **)(*(_QWORD *)(a1[4] + 8) + 40), (unint64_t)v3);
  BufferPointer = (UInt8 *)flatbuffers::FlatBufferBuilder::GetBufferPointer((flatbuffers::FlatBufferBuilder *)v3);
  if (BufferPointer)
    ktrace_file_append_chunk(a1[6], 32788, 1, 0, BufferPointer, (v3[8] - v3[12] + v3[10]));
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)v3);
}

void sub_1AF35BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FlatBufferBuilder::GetBufferPointer(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 71))
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  result = *((_QWORD *)this + 6);
  if (!result)
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  return result;
}

uint64_t ktrace_process_unique_id(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (v2 = v1[2]) != 0)
    return *(_QWORD *)(*a1 + v2);
  else
    return 0;
}

uint64_t ktrace_process_id(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 7u && (v2 = v1[3]) != 0)
    return *(unsigned int *)(*a1 + v2);
  else
    return 0;
}

uint64_t ktrace_process_last_name(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 9u && (v2 = v1[4]) != 0)
    return *a1 + v2 + *(unsigned int *)(*a1 + v2) + 4;
  else
    return 0;
}

uint64_t ktrace_process_main_thread(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void ktrace_catalog_iterate_threads(uint64_t a1, uint64_t a2)
{
  unsigned int **v2;
  _QWORD v3[9];
  _QWORD v4[7];
  _QWORD v5[7];
  _QWORD v6[5];
  _BYTE v7[16];

  v2 = *(unsigned int ***)(a1 + 8);
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3802000000;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__9;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3802000000;
  v5[3] = __Block_byref_object_copy__10;
  v5[4] = __Block_byref_object_dispose__11;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x3802000000;
  v4[3] = __Block_byref_object_copy__10;
  v4[4] = __Block_byref_object_dispose__11;
  v4[6] = v7;
  v5[6] = v7;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __ktrace_catalog_iterate_threads_block_invoke;
  v3[3] = &unk_1E5F703F0;
  v3[7] = v5;
  v3[8] = v2;
  v3[5] = v6;
  v3[6] = v4;
  v3[4] = a2;
  ktrace_catalog_internal::IterateThreads(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v6, 8);
}

void sub_1AF35BDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __ktrace_catalog_iterate_threads_block_invoke(_QWORD *a1, int *a2)
{
  ktrace_catalog_internal *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  int *ProcessFromTid;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v4 = (ktrace_catalog_internal *)a1[8];
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 5u && (v6 = v5[2]) != 0)
    v7 = *(_QWORD *)((char *)a2 + v6);
  else
    v7 = 0;
  ProcessFromTid = (int *)ktrace_catalog_internal::GetProcessFromTid(v4, v7);
  v9 = (unsigned __int16 *)((char *)a2 - *a2);
  v10 = *v9;
  if (v10 >= 9 && (v11 = v9[4]) != 0 && *((_BYTE *)a2 + v11))
  {
    v12 = a1 + 5;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = ProcessFromTid;
    v13 = a1 + 6;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = a2;
    v14 = (uint64_t)a2;
  }
  else
  {
    v15 = *(unsigned __int16 *)((char *)ProcessFromTid - *ProcessFromTid + 10);
    v16 = *(unsigned int *)((char *)ProcessFromTid + v15);
    v17 = (unsigned int *)((char *)ProcessFromTid + v15 + v16);
    v18 = *v17;
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 4 * v18;
      v21 = (char *)ProcessFromTid + v15 + v16;
      while (1)
      {
        v22 = *(unsigned int *)&v21[v19 + 4];
        v23 = (char *)&v17[v19 / 4] + v22 - *(int *)((char *)&v17[v19 / 4 + 1] + v22);
        if (*((unsigned __int16 *)v23 + 2) >= 9u)
        {
          v24 = *((unsigned __int16 *)v23 + 6);
          if (v24)
          {
            if (*((_BYTE *)&v17[v19 / 4 + 1] + v22 + v24))
              break;
          }
        }
        v19 += 4;
        if (v20 == v19)
          goto LABEL_15;
      }
      v14 = (uint64_t)v17 + v22 + v19 + 4;
    }
    else
    {
LABEL_15:
      v14 = 0;
    }
    v12 = a1 + 5;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = ProcessFromTid;
    v13 = a1 + 6;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = a2;
    if (v10 < 9)
      goto LABEL_20;
    LODWORD(v11) = v9[4];
    if (!v9[4])
      goto LABEL_20;
  }
  if (!*((_BYTE *)a2 + v11))
  {
LABEL_20:
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48) = *(_QWORD *)(a1[7] + 8) + 40;
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) = v14;
    return (*(uint64_t (**)(void))(a1[4] + 16))();
  }
  *(_QWORD *)(*(_QWORD *)(*v12 + 8) + 48) = *(_QWORD *)(*v13 + 8) + 40;
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void ktrace_catalog_iterate_processes(uint64_t a1, uint64_t a2)
{
  unsigned int **v2;
  _QWORD v3[7];
  _QWORD v4[5];
  _QWORD v5[2];
  _QWORD v6[5];
  _QWORD v7[2];

  v2 = *(unsigned int ***)(a1 + 8);
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3802000000;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__9;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x3802000000;
  v4[3] = __Block_byref_object_copy__10;
  v4[4] = __Block_byref_object_dispose__11;
  v7[1] = v5;
  v5[1] = v7;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __ktrace_catalog_iterate_processes_block_invoke;
  v3[3] = &unk_1E5F70418;
  v3[5] = v6;
  v3[6] = v4;
  v3[4] = a2;
  ktrace_catalog_internal::IterateProcesses(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v6, 8);
}

void sub_1AF35C098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_catalog_iterate_processes_block_invoke(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = *(unsigned __int16 *)((char *)a2 - *a2 + 10);
  v3 = *(unsigned int *)((char *)a2 + v2);
  v4 = *(unsigned int *)((char *)a2 + v2 + v3);
  if ((_DWORD)v4)
  {
    v5 = 4 * v4;
    v6 = v2 + v3;
    while (1)
    {
      v7 = *(unsigned int *)((char *)a2 + v6 + 4);
      v8 = (char *)a2 + v6 + v7 - *(int *)((char *)a2 + v6 + v7 + 4);
      if (*((unsigned __int16 *)v8 + 2) >= 9u)
      {
        v9 = *((unsigned __int16 *)v8 + 6);
        if (v9)
        {
          if (*((_BYTE *)a2 + v6 + v7 + v9 + 4))
            break;
        }
      }
      v6 += 4;
      v5 -= 4;
      if (!v5)
        goto LABEL_7;
    }
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = (char *)a2 + v7 + v6 + 4;
  }
  else
  {
LABEL_7:
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48) = 0;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], *(_QWORD *)(a1[5] + 8) + 40);
}

_QWORD *ktrace_process_iterate_threads(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD v11[2];

  v11[1] = result;
  v2 = (unsigned int *)(*result + *(unsigned __int16 *)(*result - *(int *)*result + 10));
  v3 = (unsigned int *)((char *)v2 + *v2);
  v6 = *v3;
  v4 = v3 + 1;
  v5 = v6;
  if (v6)
  {
    v8 = 4 * v5;
    v9 = v4;
    do
    {
      v10 = *v9++;
      v11[0] = (char *)v4 + v10;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 16))(a2, v11);
      v4 = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void ktrace_catalog_iterate_lostevents(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[6];

  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3002000000;
  v15[3] = __Block_byref_object_copy__15;
  v15[4] = __Block_byref_object_dispose__16;
  v2 = *(_QWORD **)(a1 + 8);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v11 = __ktrace_catalog_iterate_lostevents_block_invoke;
  v12 = &unk_1E5F70440;
  v13 = a2;
  v14 = v15;
  v3 = (unsigned int *)(*v2 + *(unsigned __int16 *)(*v2 - *(int *)*v2 + 10));
  v4 = *v3;
  v6 = (unsigned int *)((char *)v3 + v4 + 4);
  v5 = *(unsigned int *)((char *)v3 + v4);
  if ((_DWORD)v5)
  {
    v7 = 4 * v5 - 4;
    do
    {
      v8 = v11((uint64_t)v10, (uint64_t)v6 + *v6);
      ++v6;
      if (v7)
        v9 = v8;
      else
        v9 = 0;
      v7 -= 4;
    }
    while ((v9 & 1) != 0);
  }
  _Block_object_dispose(v15, 8);
}

void sub_1AF35C2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

uint64_t __ktrace_catalog_iterate_lostevents_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = a2;
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
}

uint64_t ktrace_lostevent_get_timestamp(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (v2 = v1[2]) != 0)
    return *(_QWORD *)(*a1 + v2);
  else
    return 0;
}

uint64_t ktrace_catalog_get_timestamp(uint64_t a1)
{
  int *v1;
  unsigned __int16 *v2;
  uint64_t v3;

  v1 = **(int ***)(a1 + 8);
  v2 = (unsigned __int16 *)((char *)v1 - *v1);
  if (*v2 >= 5u && (v3 = v2[2]) != 0)
    return *(_QWORD *)((char *)v1 + v3);
  else
    return 0;
}

uint64_t ktrace_thread_id(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (v2 = v1[2]) != 0)
    return *(_QWORD *)(*a1 + v2);
  else
    return 0;
}

uint64_t ktrace_thread_last_name(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 7u && (v2 = v1[3]) != 0)
    return *a1 + v2 + *(unsigned int *)(*a1 + v2) + 4;
  else
    return 0;
}

BOOL ktrace_thread_is_main(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  return *v1 >= 9u && (v2 = v1[4]) != 0 && *(_BYTE *)(*a1 + v2) != 0;
}

uint64_t ktrace_thread_process(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void ktrace_catalog_close(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v2 + 8);
    MEMORY[0x1AF45D4D0](v2, 0x10F0C4042F376B1);
  }
  free(*(void **)a1);
  free((void *)a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  flatbuffers::vector_downward::clear_buffer(this);
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

_QWORD *flatbuffers::vector_downward::clear_buffer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[5];
  if (v2)
  {
    v3 = *this;
    if (*v1)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      this = (_QWORD *)MEMORY[0x1AF45D4B8](v2, 0x1000C8077774924);
  }
  v1[5] = 0;
  return this;
}

void flatbuffers::DefaultAllocator::deallocate(flatbuffers::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2)
    JUMPOUT(0x1AF45D4B8);
}

void flatbuffers::DefaultAllocator::~DefaultAllocator(flatbuffers::DefaultAllocator *this)
{
  JUMPOUT(0x1AF45D4D0);
}

uint64_t flatbuffers::DefaultAllocator::allocate(flatbuffers::DefaultAllocator *this)
{
  return operator new[]();
}

char *flatbuffers::Allocator::reallocate_downward(flatbuffers::Allocator *this, unsigned __int8 *a2, unint64_t a3, unint64_t a4, size_t a5, size_t a6)
{
  char *v12;

  if (a4 <= a3)
    flatbuffers::Allocator::reallocate_downward();
  v12 = (char *)(*(uint64_t (**)(flatbuffers::Allocator *, unint64_t))(*(_QWORD *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers::Allocator *, unsigned __int8 *, unint64_t))(*(_QWORD *)this + 24))(this, a2, a3);
  return v12;
}

_QWORD *__Block_byref_object_copy__22(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

void ___ZL30ktrace_catalog_read_thread_mapP6kthmapRN11flatbuffers17FlatBufferBuilderERNSt3__16vectorINS1_6OffsetIN18KernelTraceCatalog7ProcessEEENS4_9allocatorIS9_EEEERNS5_INS6_INS7_6ThreadEEENSA_ISF_EEEE_block_invoke(_QWORD *a1, unsigned int a2, uint64_t a3, const void *a4)
{
  const char *v8;
  _BOOL4 is_main_thread;
  unint64_t v10;
  size_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t **v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  _QWORD v44[2];
  _OWORD *v45;

  v8 = (const char *)kthmap_thread_name_for_tid(a1[5], a4);
  is_main_thread = kthmap_tid_is_main_thread(a1[5], a4);
  v10 = a1[6];
  if (v8)
  {
    v11 = strlen(v8);
    LODWORD(v8) = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)v10, v8, v11);
  }
  flatbuffers::FlatBufferBuilder::NotNested(v10);
  *(_BYTE *)(v10 + 70) = 1;
  v12 = *(_DWORD *)(v10 + 32) - *(_DWORD *)(v10 + 48) + *(_DWORD *)(v10 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 4, (uint64_t)a4, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 6, v8);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 8, is_main_thread, 0);
  v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v12);
  v14 = v13;
  v15 = a1[7];
  v16 = *(_DWORD **)(v15 + 8);
  v17 = *(_QWORD *)(v15 + 16);
  if ((unint64_t)v16 >= v17)
  {
    v19 = *(_DWORD **)v15;
    v20 = ((uint64_t)v16 - *(_QWORD *)v15) >> 2;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v22 = v17 - (_QWORD)v19;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(v15 + 16, v23);
      v19 = *(_DWORD **)v15;
      v16 = *(_DWORD **)(v15 + 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[4 * v20];
    v26 = &v24[4 * v23];
    *(_DWORD *)v25 = v14;
    v18 = v25 + 4;
    while (v16 != v19)
    {
      v27 = *--v16;
      *((_DWORD *)v25 - 1) = v27;
      v25 -= 4;
    }
    *(_QWORD *)v15 = v25;
    *(_QWORD *)(v15 + 8) = v18;
    *(_QWORD *)(v15 + 16) = v26;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v16 = v13;
    v18 = v16 + 1;
  }
  *(_QWORD *)(v15 + 8) = v18;
  v28 = (uint64_t **)(*(_QWORD *)(a1[4] + 8) + 40);
  v44[0] = a2;
  v44[1] = a3;
  v45 = v44;
  v29 = std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__emplace_unique_key_args<std::pair<int,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<int,unsigned long long>&&>,std::tuple<>>(v28, (int *)v44, (uint64_t)&std::piecewise_construct, &v45);
  v30 = v29;
  v31 = (char *)v29[7];
  v32 = (uint64_t)(v29 + 8);
  v33 = v29[8];
  if ((unint64_t)v31 >= v33)
  {
    v35 = (char *)v29[6];
    v36 = (v31 - v35) >> 2;
    if ((unint64_t)(v36 + 1) >> 62)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v37 = v33 - (_QWORD)v35;
    v38 = (uint64_t)(v33 - (_QWORD)v35) >> 1;
    if (v38 <= v36 + 1)
      v38 = v36 + 1;
    if (v37 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(v32, v39);
      v35 = (char *)v30[6];
      v31 = (char *)v30[7];
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[4 * v36];
    v42 = &v40[4 * v39];
    *(_DWORD *)v41 = v14;
    v34 = v41 + 4;
    while (v31 != v35)
    {
      v43 = *((_DWORD *)v31 - 1);
      v31 -= 4;
      *((_DWORD *)v41 - 1) = v43;
      v41 -= 4;
    }
    v30[6] = v41;
    v30[7] = v34;
    v30[8] = v42;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *(_DWORD *)v31 = v14;
    v34 = v31 + 4;
  }
  v30[7] = v34;
}

uint64_t KernelTraceCatalog::CreateProcessDirect(flatbuffers::FlatBufferBuilder *this, uint64_t a2, int a3, char *__s, void **a5)
{
  const char *v6;
  size_t v10;
  uint64_t v11;
  void *v12;
  int v13;

  v6 = __s;
  if (__s)
  {
    v10 = strlen(__s);
    LODWORD(v6) = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v10);
  }
  if (a5)
  {
    v11 = (_BYTE *)a5[1] - (_BYTE *)*a5;
    if (v11)
      v12 = *a5;
    else
      v12 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Thread>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>> &)::t;
    LODWORD(a5) = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>(this, (uint64_t)v12, v11 >> 2);
  }
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_BYTE *)this + 70) = 1;
  v13 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)this, 4, a2, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 10, a5);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 8, v6);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((unint64_t)this, 6, a3, 0);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v13);
}

void std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  _BYTE *v6;
  void *v7;

  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  flatbuffers::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  v6 = (_BYTE *)(*((_QWORD *)this + 6) - flatbuffers::vector_downward::ensure_space(this, 1uLL));
  *((_QWORD *)this + 6) = v6;
  *v6 = 0;
  if (a3)
  {
    v7 = (void *)(*((_QWORD *)this + 6) - flatbuffers::vector_downward::ensure_space(this, a3));
    *((_QWORD *)this + 6) = v7;
    memcpy(v7, a2, a3);
  }
  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

uint64_t flatbuffers::FlatBufferBuilder::NotNested(uint64_t this)
{
  if (*(_BYTE *)(this + 70))
    flatbuffers::FlatBufferBuilder::NotNested();
  if (*(_DWORD *)(this + 64))
    flatbuffers::FlatBufferBuilder::NotNested();
  return this;
}

unint64_t flatbuffers::vector_downward::fill(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t result;
  uint64_t v5;

  result = flatbuffers::vector_downward::ensure_space(this, a2);
  *((_QWORD *)this + 6) -= result;
  if (a2)
  {
    v5 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 6) + v5++) = 0;
    while (a2 != v5);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  _DWORD *v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = (_DWORD *)(*(_QWORD *)(a1 + 48)
                - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 4uLL));
  *(_QWORD *)(a1 + 48) = v4;
  *v4 = a2;
  return (*(_DWORD *)(a1 + 32) - (_DWORD)v4 + *(_DWORD *)(a1 + 40));
}

unint64_t flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((_QWORD *)this + 9) < a3)
    *((_QWORD *)this + 9) = a3;
  return flatbuffers::vector_downward::fill(this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

unint64_t flatbuffers::vector_downward::ensure_space(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v2 < v3 || (v5 = *((_QWORD *)this + 5), v3 < v5))
    flatbuffers::vector_downward::ensure_space();
  if (v2 - v3 < a2)
  {
    flatbuffers::vector_downward::reallocate(this, a2);
    v5 = *((_QWORD *)this + 5);
    v2 = *((_QWORD *)this + 6);
  }
  if ((*((_DWORD *)this + 8) - v2 + v5) >= 0x7FFFFFFF)
    flatbuffers::vector_downward::ensure_space();
  return a2;
}

uint64_t flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void *v13;

  v5 = *((_QWORD *)this + 4);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v6 = &v4[v5 - *((_QWORD *)this + 6)];
  v7 = *((_QWORD *)this + 7) - (_QWORD)v4;
  if (v5)
    v8 = v5 >> 1;
  else
    v8 = *((_QWORD *)this + 2);
  if (v8 > a2)
    a2 = v8;
  v9 = (*((_QWORD *)this + 3) + v5 + a2 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v9;
  v10 = *(_QWORD *)this;
  if (v4)
  {
    if (v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    }
    else
    {
      v13 = &unk_1E5F6F820;
      result = (uint64_t)flatbuffers::Allocator::reallocate_downward((flatbuffers::Allocator *)&v13, v4, v5, v9, v6, v7);
    }
  }
  else if (v10)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
  }
  else
  {
    result = operator new[]();
  }
  v12 = result + *((_QWORD *)this + 4) - v6;
  *((_QWORD *)this + 5) = result;
  *((_QWORD *)this + 6) = v12;
  *((_QWORD *)this + 7) = result + v7;
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((_QWORD *)this + 9) < a2)
    *((_QWORD *)this + 9) = a2;
  return flatbuffers::vector_downward::fill(this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(result, a3);
    result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(_QWORD **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(_QWORD *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2)
      LOWORD(v7) = a2;
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = (_QWORD *)(*(_QWORD *)(a1 + 48)
                - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 8uLL));
  *(_QWORD *)(a1 + 48) = v4;
  *v4 = a2;
  return (*(_DWORD *)(a1 + 32) - (_DWORD)v4 + *(_DWORD *)(a1 + 40));
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(flatbuffers::FlatBufferBuilder *result, uint64_t a2, unsigned int a3)
{
  unint64_t v4;
  int v5;

  if (a3)
  {
    v4 = (unint64_t)result;
    v5 = flatbuffers::FlatBufferBuilder::ReferTo(result, a3);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4, a2, v5, 0);
  }
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(result, a3);
    result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(_QWORD **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(_QWORD *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2)
      LOWORD(v7) = a2;
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::ReferTo(flatbuffers::FlatBufferBuilder *this, unsigned int a2)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  if (!a2
    || (v4 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10), v5 = v4 >= a2, v6 = v4 - a2, !v5))
  {
    flatbuffers::FlatBufferBuilder::ReferTo();
  }
  return v6 + 4;
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(result, a3);
    result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(_QWORD **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(_QWORD *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2)
      LOWORD(v7) = a2;
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  _BYTE *v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = (_BYTE *)(*(_QWORD *)(a1 + 48)
               - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 1uLL));
  *(_QWORD *)(a1 + 48) = v4;
  *v4 = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned __int16 v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  size_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  _DWORD *v22;

  if (!*((_BYTE *)this + 70))
    flatbuffers::FlatBufferBuilder::EndTable();
  v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u)
    v5 = 4;
  else
    v5 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  *((_WORD *)this + 34) = v5;
  v6 = (void *)(*((_QWORD *)this + 6) - flatbuffers::vector_downward::ensure_space(this, v5));
  *((_QWORD *)this + 6) = v6;
  bzero(v6, v5);
  v7 = v4 - a2;
  if ((v4 - a2) >= 0x10000)
    flatbuffers::FlatBufferBuilder::EndTable();
  v8 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v8)
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  v8[1] = v7;
  *v8 = *((_WORD *)this + 34);
  v9 = *((_QWORD *)this + 7);
  if (!v9)
    flatbuffers::FlatBufferBuilder::EndTable();
  v10 = *((unsigned int *)this + 16);
  v11 = v9 - 8 * v10;
  if ((_DWORD)v10)
  {
    v12 = (int *)(v9 - 8 * v10);
    do
    {
      v13 = *((unsigned __int16 *)v12 + 2);
      if (*(unsigned __int16 *)((char *)v8 + v13))
        flatbuffers::FlatBufferBuilder::EndTable();
      v14 = *v12;
      v12 += 2;
      *(unsigned __int16 *)((char *)v8 + v13) = v4 - v14;
    }
    while ((unint64_t)v12 < v9);
  }
  *((_QWORD *)this + 7) = v11;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  v16 = *((_QWORD *)this + 4);
  v15 = *((_QWORD *)this + 5);
  v17 = v16 - (_DWORD)v8 + v15;
  if (*((_BYTE *)this + 81))
  {
    if (!v15)
      flatbuffers::FlatBufferBuilder::EndTable();
    if (v15 < v11)
    {
      v18 = *v8;
      v19 = v15 + v16;
      v20 = (unsigned int *)*((_QWORD *)this + 5);
      while (1)
      {
        v21 = *v20;
        if ((_DWORD)v18 == *(unsigned __int16 *)(v19 - v21) && !memcmp((const void *)(v19 - v21), v8, v18))
          break;
        if ((unint64_t)++v20 >= v11)
        {
          v17 = v16 - (_DWORD)v8 + v15;
          goto LABEL_21;
        }
      }
      v8 = (unsigned __int16 *)((char *)v8 + (v16 - (_DWORD)v8 + v15 - v4));
      *((_QWORD *)this + 6) = v8;
      v17 = v21;
    }
  }
LABEL_21:
  if (v17 == (_DWORD)v16 + (_DWORD)v15 - (_DWORD)v8)
  {
    flatbuffers::vector_downward::ensure_space(this, 4uLL);
    v22 = (_DWORD *)*((_QWORD *)this + 7);
    *v22 = v17;
    *((_QWORD *)this + 7) = v22 + 1;
    v16 = *((_QWORD *)this + 4);
    v15 = *((_QWORD *)this + 5);
  }
  *(_DWORD *)(v15 + v16 - v4) = v17 - v4;
  *((_BYTE *)this + 70) = 0;
  return v4;
}

void std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5F6B920, MEMORY[0x1E0DE42D0]);
}

void sub_1AF35D310(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_OWORD *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__emplace_unique_key_args<std::pair<int,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<int,unsigned long long>&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__find_equal<std::pair<int,unsigned long long>>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__find_equal<std::pair<int,unsigned long long>>(uint64_t a1, _QWORD *a2, int *a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_QWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = *(_DWORD *)(v4 + 32);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = *v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = v8[5];
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, unint64_t a3)
{
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  flatbuffers::FlatBufferBuilder *v10;

  v6 = (unsigned int *)(a2 + 4 * a3);
  v10 = a1;
  v7 = 126 - 2 * __clz(a3);
  if (a3)
    v8 = v7;
  else
    v8 = 0;
  std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>(a2, v6, (uint64_t)&v10, v8, 1);
  return flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(a1, a2, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  flatbuffers::FlatBufferBuilder::StartVector(a1, a3, 4uLL);
  if (a3)
  {
    v6 = a2 - 4;
    v7 = a3;
    do
    {
      v8 = v7 - 1;
      v9 = flatbuffers::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v9);
      v7 = v8;
    }
    while (v8);
  }
  return flatbuffers::FlatBufferBuilder::EndVector(a1, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v21 - *(a2 - 1)), (int *)(v21 - *v9));
        if ((_DWORD)result)
        {
          v22 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v17 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
          if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *(v9 - 1)), (int *)(v17 - *v9)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>((int *)v9, (int *)a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v18, a3);
          v9 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          v12 = *v8;
          v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
            result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v12;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;

  if (result != a2)
  {
    v4 = result;
    for (i = result + 1; v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v9 - v7), (int *)(v9 - v8));
      if ((_DWORD)result)
      {
        v10 = *v4;
        v11 = v4;
        do
        {
          v12 = v11;
          v13 = *--v11;
          *v12 = v13;
          v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
          result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v10), (int *)(v14 - *(v12 - 2)));
        }
        while ((result & 1) != 0);
        *v11 = v10;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v8 = *(_QWORD *)(*(_QWORD *)a4 + 40) + *(_QWORD *)(*(_QWORD *)a4 + 32);
  v9 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *a2), (int *)(v8 - *a1));
  v10 = *(_QWORD *)(*(_QWORD *)a4 + 40) + *(_QWORD *)(*(_QWORD *)a4 + 32);
  result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *a3), (int *)(v10 - *a2));
  if (!v9)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v14 = *(_QWORD *)(*(_QWORD *)a4 + 40) + *(_QWORD *)(*(_QWORD *)a4 + 32);
    if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *a2), (int *)(v14 - *a1)))
      return 1;
    v15 = *a1;
    *a1 = *a2;
    *a2 = v15;
    return 2;
  }
  v12 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v12;
    v16 = *(_QWORD *)(*(_QWORD *)a4 + 40) + *(_QWORD *)(*(_QWORD *)a4 + 32);
    if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v16 - *a3), (int *)(v16 - v12)))
      return 1;
    v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    return 2;
  }
  *a1 = *a3;
  *a3 = v12;
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v4 = a2;
  v6 = *a1;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
  if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v7 - v6), (int *)(v7 - *(a2 - 1))))
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - v6), (int *)(v10 - v9)));
  }
  else
  {
    v11 = a1 + 1;
    do
    {
      v8 = v11;
      if (v11 >= v4)
        break;
      v12 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      ++v11;
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - v6), (int *)(v12 - *v8)));
  }
  if (v8 < v4)
  {
    do
    {
      v13 = *--v4;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    }
    while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v6), (int *)(v14 - v13)));
  }
  while (v8 < v4)
  {
    v15 = *v8;
    *v8 = *v4;
    *v4 = v15;
    do
    {
      v16 = v8[1];
      ++v8;
      v17 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v6), (int *)(v17 - v16)));
    do
    {
      v18 = *--v4;
      v19 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    }
    while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - v6), (int *)(v19 - v18)));
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v6 = 0;
  v7 = *a1;
  do
    v8 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
  while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - a1[++v6]), (int *)(v8 - v7)));
  v10 = &a1[v6];
  v11 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v10 >= a2)
        break;
      v14 = *--a2;
      v15 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - v14), (int *)(v15 - v7)));
  }
  else
  {
    do
    {
      v12 = *--a2;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    }
    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - v12), (int *)(v13 - v7)));
  }
  if (v10 < a2)
  {
    v16 = &a1[v6];
    v17 = a2;
    do
    {
      v18 = *v16;
      *v16 = *v17;
      *v17 = v18;
      do
      {
        v19 = v16[1];
        ++v16;
        v20 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      }
      while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v20 - v19), (int *)(v20 - v7)));
      do
      {
        v21 = *--v17;
        v22 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      }
      while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v22 - v21), (int *)(v22 - v7)));
    }
    while (v16 < v17);
    v11 = v16 - 1;
  }
  if (v11 != a1)
    *a1 = *v11;
  *v11 = v7;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *v19;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *(a2 - 1)), (int *)(v8 - *a1)))
      {
        v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v11), (int *)(v14 - *v10)))
    {
      v15 = *v11;
      v16 = v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16 + 12) = *(unsigned int *)((char *)a1 + v16 + 8);
        if (v16 == -8)
          break;
        v17 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        v18 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v15), (int *)(v17 - *(unsigned int *)((char *)a1 + v16 + 4)));
        v16 -= 4;
        if (!v18)
        {
          v19 = (unsigned int *)((char *)a1 + v16 + 12);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v15;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 4;
    if (++v11 == a2)
      return 1;
  }
}

BOOL KernelTraceCatalog::Thread::KeyCompareLessThan(int *a1, int *a2)
{
  unsigned __int16 *v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 5u)
  {
    v3 = 0;
  }
  else
  {
    v3 = v2[2];
    if (v3)
      v3 = *(_QWORD *)((char *)a1 + v3);
  }
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 < 5u)
  {
    v5 = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      v5 = *(_QWORD *)((char *)a2 + v5);
  }
  return v3 < v5;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v10;
  _BOOL8 result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a2, a3, a5);
  v10 = *(_QWORD *)(*(_QWORD *)a5 + 40) + *(_QWORD *)(*(_QWORD *)a5 + 32);
  result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *a4), (int *)(v10 - *a3));
  if (result)
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    v13 = *(_QWORD *)(*(_QWORD *)a5 + 40) + *(_QWORD *)(*(_QWORD *)a5 + 32);
    result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - *a3), (int *)(v13 - *a2));
    if (result)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = *(_QWORD *)(*(_QWORD *)a5 + 40) + *(_QWORD *)(*(_QWORD *)a5 + 32);
      result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *a2), (int *)(v15 - *a1));
      if (result)
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v12;
  _BOOL8 result;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a2, a3, a4, a6);
  v12 = *(_QWORD *)(*(_QWORD *)a6 + 40) + *(_QWORD *)(*(_QWORD *)a6 + 32);
  result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - *a5), (int *)(v12 - *a4));
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    v15 = *(_QWORD *)(*(_QWORD *)a6 + 40) + *(_QWORD *)(*(_QWORD *)a6 + 32);
    result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *a4), (int *)(v15 - *a3));
    if (result)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = *(_QWORD *)(*(_QWORD *)a6 + 40) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *a3), (int *)(v17 - *a2));
      if (result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        v19 = *(_QWORD *)(*(_QWORD *)a6 + 40) + *(_QWORD *)(*(_QWORD *)a6 + 32);
        result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *a2), (int *)(v19 - *a1));
        if (result)
        {
          v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>((_BOOL8)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)a4 + 40) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *v14), (int *)(v15 - *a1)))
        {
          v16 = *v14;
          *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>((_BOOL8)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>((_BOOL8)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(_BOOL8 result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  _DWORD *v5;
  _BOOL8 v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3)
      {
        v14 = *(_QWORD *)(*(_QWORD *)a2 + 40) + *(_QWORD *)(*(_QWORD *)a2 + 32);
        if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v12), (int *)(v14 - v12[1])))
        {
          ++v12;
          v11 = v13;
        }
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 40) + *(_QWORD *)(*(_QWORD *)a2 + 32);
      result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *v12), (int *)(v15 - *v5));
      if (!result)
      {
        v21 = *v5;
        do
        {
          v16 = v5;
          v5 = v12;
          *v16 = *v12;
          if (v7 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = (unsigned int *)(v6 + 4 * v17);
          v18 = 2 * v11 + 2;
          if (v18 < a3)
          {
            v19 = *(_QWORD *)(*(_QWORD *)a2 + 40) + *(_QWORD *)(*(_QWORD *)a2 + 32);
            if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *v12), (int *)(v19 - v12[1])))
            {
              ++v12;
              v17 = v18;
            }
          }
          v20 = *(_QWORD *)(*(_QWORD *)a2 + 40) + *(_QWORD *)(*(_QWORD *)a2 + 32);
          result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v20 - *v12), (int *)(v20 - v21));
          v11 = v17;
        }
        while (!result);
        *v5 = v21;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 40) + *(_QWORD *)(*(_QWORD *)a2 + 32);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - *v9), (int *)(v12 - v9[1])))
      {
        ++v9;
        v10 = v11;
      }
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 4);
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *v8), (int *)(v10 - *(unsigned int *)(a2 - 4)));
    if (result)
    {
      v11 = *v9;
      do
      {
        v12 = v9;
        v9 = v8;
        *v12 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 4 * v7);
        v13 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - *v8), (int *)(v13 - v11));
      }
      while (result);
      *v9 = v11;
    }
  }
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::StartVector(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_BYTE *)this + 70) = 1;
  v6 = a3 * a2;
  flatbuffers::FlatBufferBuilder::PreAlign(this, v6, 4uLL);
  return flatbuffers::FlatBufferBuilder::PreAlign(this, v6, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::EndVector(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((_BYTE *)this + 70))
    flatbuffers::FlatBufferBuilder::EndVector();
  *((_BYTE *)this + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a2);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Process>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, unint64_t a3)
{
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  flatbuffers::FlatBufferBuilder *v10;

  v6 = (unsigned int *)(a2 + 4 * a3);
  v10 = a1;
  v7 = 126 - 2 * __clz(a3);
  if (a3)
    v8 = v7;
  else
    v8 = 0;
  std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>(a2, v6, (uint64_t)&v10, v8, 1);
  return flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(a1, a2, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v21 - *(a2 - 1)), (int *)(v21 - *v9));
        if ((_DWORD)result)
        {
          v22 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v17 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
          if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *(v9 - 1)), (int *)(v17 - *v9)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>((int *)v9, (int *)a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>(v9, v18, a3);
          v9 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *v19;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *(a2 - 1)), (int *)(v8 - *a1)))
      {
        v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
    if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v11), (int *)(v14 - *v10)))
    {
      v15 = *v11;
      v16 = v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16 + 12) = *(unsigned int *)((char *)a1 + v16 + 8);
        if (v16 == -8)
          break;
        v17 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        v18 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v15), (int *)(v17 - *(unsigned int *)((char *)a1 + v16 + 4)));
        v16 -= 4;
        if (!v18)
        {
          v19 = (unsigned int *)((char *)a1 + v16 + 12);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v15;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, unsigned int a2, const char *a3, int a4)
{
  _BOOL4 v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t result;

  v8 = a3 != 0;
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 5);
  v9 = 4;
  if (a4)
    v9 = 8;
  flatbuffers::FlatBufferBuilder::PreAlign(this, v9 + 4 * v8, *((_QWORD *)this + 9));
  if (a3)
  {
    if (strlen(a3) != 4)
      flatbuffers::FlatBufferBuilder::Finish();
    v10 = (_DWORD *)(*((_QWORD *)this + 6) - flatbuffers::vector_downward::ensure_space(this, 4uLL));
    *((_QWORD *)this + 6) = v10;
    *v10 = *(_DWORD *)a3;
  }
  v11 = flatbuffers::FlatBufferBuilder::ReferTo(this, a2);
  result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, v11);
  if (a4)
    result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
  *((_BYTE *)this + 71) = 1;
  return result;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(*((_QWORD *)this + 11), *(_QWORD **)(v2 + 8));
    MEMORY[0x1AF45D4D0](v2, 0x1060C40C2B13FB5);
  }
  flatbuffers::vector_downward::~vector_downward(this);
}

void std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(a1, *a2);
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

BOOL ___ZL36ktrace_catalog_file_contains_catalogP11ktrace_file_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = ktrace_chunk_tag(a2);
  if (v3 == 32788)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 != 32788;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AF35F2A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,KernelTraceCatalog::Process const*>>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  v12 = a3[1];
  i[2] = *a3;
  i[3] = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AF35F6F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::KeyCompare<unsigned long long>(unint64_t *a1, unsigned int *a2)
{
  int *v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unsigned int v6;

  v2 = (int *)((char *)a2 + *a2);
  v3 = *a1;
  v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
    {
      v5 = *(_QWORD *)((char *)v2 + v5);
      if (v5 <= v3)
        v6 = 0;
      else
        v6 = -1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (v5 >= v3)
    return v6;
  else
    return v6 + 1;
}

uint64_t flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Process>>::KeyCompare<unsigned long long>(unint64_t *a1, unsigned int *a2)
{
  int *v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unsigned int v6;

  v2 = (int *)((char *)a2 + *a2);
  v3 = *a1;
  v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
    {
      v5 = *(_QWORD *)((char *)v2 + v5);
      if (v5 <= v3)
        v6 = 0;
      else
        v6 = -1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (v5 >= v3)
    return v6;
  else
    return v6 + 1;
}

uint64_t *std::back_insert_iterator<std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t ktrace_set_file(uint64_t a1, const char *a2)
{
  uint64_t v3;

  v3 = ktrace_file_open(a2, 0);
  if (!v3)
    return *__error();
  ktrace_set_ktrace_file(a1, v3, 1);
  return 0;
}

uint64_t ktrace_set_ktrace_file(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  __int16 v7;
  _QWORD v9[5];

  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)(a1 + 608))
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)a1 == 1)
    ktrace_remotetime_update_params_cold_1();
  if (a3 && *(_QWORD *)(a2 + 200))
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __ktrace_set_ktrace_file_block_invoke;
  v9[3] = &__block_descriptor_tmp_4;
  v9[4] = a1;
  ktrace_file_header_iterate(a2, 0, (uint64_t)v9);
  *(_QWORD *)(a1 + 608) = a2;
  if (*(_DWORD *)a1 == 3)
    v6 = 4;
  else
    v6 = 1;
  *(_DWORD *)a1 = v6;
  if (*(_DWORD *)(a1 + 256))
    kteventnames_add_chunks(a1 + 360, a2);
  if (a3)
    v7 = 4;
  else
    v7 = 0;
  *(_WORD *)(a1 + 224) = *(_WORD *)(a1 + 224) & 0xFFFB | v7;
  return 0;
}

BOOL __ktrace_set_ktrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352) = ktrace_cpus_create(a2);
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352) == 0;
}

uint64_t ktrace_get_ktrace_file(uint64_t a1)
{
  return *(_QWORD *)(a1 + 608);
}

void _session_chunk_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[6];
  int v13;

  v4 = *(unsigned int *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = ktrace_chunk_tag(a2);
  if ((int)v4 >= 1)
  {
    v7 = v6;
    v8 = 0;
    v9 = (unsigned int *)(v5 + 12);
    v10 = MEMORY[0x1E0C809B0];
    do
    {
      if (v7 < *(v9 - 1))
        break;
      if (v7 < *v9)
      {
        v11 = *(NSObject **)(a1 + 232);
        block[0] = v10;
        block[1] = 0x40000000;
        block[2] = ___session_chunk_callbacks_block_invoke;
        block[3] = &__block_descriptor_tmp_3_1;
        v13 = v8;
        block[4] = v5;
        block[5] = a2;
        dispatch_async(v11, block);
      }
      ++v8;
      v9 += 8;
    }
    while (v4 != v8);
  }
}

uint64_t ___session_chunk_callbacks_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * *(int *)(a1 + 48) + 24) + 16))();
}

uint64_t *_session_read_stackshot_chunk(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;

  result = (uint64_t *)ktrace_chunk_tag((uint64_t)a2);
  switch((_DWORD)result)
  {
    case 0x51FE:
      goto LABEL_7;
    case 0x8002:
      result = (uint64_t *)ktrace_chunk_version_major((uint64_t)a2);
      if (result > 1)
        return result;
LABEL_7:
      result = (uint64_t *)ktrace_stackshot_chunk_timestamp(a2);
      if (result == (uint64_t *)-1)
        return result;
      v5 = result;
      result = *(uint64_t **)(a1 + 320);
      if (result)
      {
        v6 = (uint64_t **)(a1 + 320);
        do
        {
          result = (uint64_t *)ktrace_stackshot_chunk_timestamp(result);
          if (v5 <= result)
            break;
          v7 = (uint64_t)*v6;
          v8 = *(uint64_t **)(v7 + 104);
          v6 = (uint64_t **)(v7 + 104);
          result = v8;
        }
        while (v8);
        if (v6 != (uint64_t **)(a1 + 320))
          goto LABEL_16;
      }
      else
      {
        v6 = (uint64_t **)(a1 + 320);
      }
      *(_QWORD *)(a1 + 328) = v5;
LABEL_16:
      a2[13] = (uint64_t)*v6;
      *v6 = a2;
      return result;
    case 0x9000:
      result = (uint64_t *)ktrace_chunk_version_major((uint64_t)a2);
      if (!(_DWORD)result)
        goto LABEL_7;
      break;
  }
  return result;
}

uint64_t ktrace_chunks_range(uint64_t a1, int a2, int a3, const void *a4)
{
  _DWORD *v7;
  _DWORD *v8;
  void *v9;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v7 = ktrace_callback_list_add(a1, a1 + 112);
  if (!v7)
    return 12;
  v8 = v7;
  *v7 = 3;
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = 3;
  v9 = _Block_copy(a4);
  result = 0;
  *((_QWORD *)v8 + 3) = v9;
  return result;
}

uint64_t ktrace_chunks(uint64_t a1, int a2, const void *a3)
{
  return ktrace_chunks_range(a1, a2, a2 + 1, a3);
}

uint64_t _session_start_file(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t started;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[12];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2000000000;
  v33 = 0;
  v28 = 0;
  v29 = &v28;
  v30 = 0x2000000000;
  v31 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2000000000;
  v27 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_QWORD *)(a1 + 608);
  if (!v3)
    ktrace_remotetime_update_params_cold_1();
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___session_start_file_block_invoke;
  v13[3] = &unk_1E5F704F8;
  v13[4] = &v18;
  v13[5] = &v14;
  v13[6] = &v28;
  v13[7] = v32;
  v13[8] = v26;
  v13[9] = &v34;
  v13[10] = &v22;
  v13[11] = a1;
  if (ktrace_file_iterate(v3, 0, (uint64_t)v13) || *((_DWORD *)v23 + 6))
  {
    started = 1;
    goto LABEL_6;
  }
  kttimesync_init(a1 + 432, *(_QWORD *)(a1 + 608), *((unsigned __int8 *)v19 + 24));
  if (!*(_DWORD *)(a1 + 452))
  {
    v7 = *(_DWORD *)(a1 + 428);
    ktrace_log_init();
    v8 = ktrace_log;
    v9 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      if (v9)
        _session_start_file_cold_5((int *)(a1 + 424), (int *)(a1 + 428), v8);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a1 + 424);
    }
    else
    {
      if (v9)
        _session_start_file_cold_4(v8);
      if (mach_timebase_info((mach_timebase_info_t)(a1 + 448)))
        ktrace_remotetime_update_params_cold_1();
    }
  }
  started = _session_machine_init(a1);
  if (!(_DWORD)started)
  {
    started = _session_cpus_init(a1);
    if (!(_DWORD)started)
    {
      v10 = ktrace_file_earliest_timestamp(*(_QWORD *)(a1 + 608), (_QWORD *)(a1 + 504));
      v11 = *(_QWORD *)(a1 + 504);
      *(_QWORD *)(a1 + 520) = kttimesync_timestamp_from_ns(a1 + 432, *(_QWORD *)(a1 + 512)) + v11;
      if (*((_BYTE *)v29 + 24))
      {
        ktrace_start_file_ariadne_prepass(a1);
      }
      else
      {
        if (!v10 && !v11 || !*((_BYTE *)v35 + 24) && !*((_BYTE *)v15 + 24))
        {
          v12 = 1;
LABEL_26:
          started = ktrace_start_file_internal(a1, v12, a2);
          goto LABEL_6;
        }
        ktrace_start_file_prepass(a1);
      }
      v12 = 0;
      goto LABEL_26;
    }
  }
LABEL_6:
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(v32, 8);
  _Block_object_dispose(&v34, 8);
  return started;
}

uint64_t ___session_start_file_block_invoke(_QWORD *a1, uint64_t *a2)
{
  void **v4;
  void **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (void **)ktrace_config_create(a2);
  if (v4)
  {
    v5 = v4;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = ktrace_config_kdebug_using_mach_continuous_time((uint64_t)v4);
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = ktrace_config_get_context_kind((uint64_t)v5) == 2;
    ktrace_config_destroy(v5);
  }
  v6 = ktrace_chunk_tag((uint64_t)a2);
  if (v6 <= 7935)
  {
    if (v6 == 7424)
    {
      v7 = a1[7];
      goto LABEL_19;
    }
    if (v6 != 7680)
      return 1;
LABEL_12:
    if (!*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) && !*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24))
      *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 1;
    v7 = a1[8];
    goto LABEL_19;
  }
  switch(v6)
  {
    case 7936:
      *(_WORD *)(a1[11] + 224) |= 0x40u;
      goto LABEL_12;
    case 32782:
      v8 = a1[11];
      if (*(_DWORD *)(v8 + 288))
        *(_DWORD *)(*(_QWORD *)(a1[10] + 8) + 24) = ktrace_chunk_copy_data(a2, 0, (void *)(v8 + 528), 0x18uLL);
      break;
    case 20982:
      v7 = a1[6];
LABEL_19:
      *(_BYTE *)(*(_QWORD *)(v7 + 8) + 24) = 1;
      break;
  }
  return 1;
}

void ktrace_start_file_ariadne_prepass(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 128);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __ktrace_start_file_ariadne_prepass_block_invoke;
  block[3] = &__block_descriptor_tmp_7_1;
  block[4] = a1;
  dispatch_async(v1, block);
}

void ktrace_start_file_prepass(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD block[5];

  v2 = MEMORY[0x1E0C809B0];
  if (*(_DWORD *)(a1 + 284))
  {
    _session_ensure_uuidmap(a1);
    v3 = *(NSObject **)(a1 + 232);
    block[0] = v2;
    block[1] = 0x40000000;
    block[2] = __ktrace_start_file_prepass_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = a1;
    dispatch_async(v3, block);
  }
  v4 = *(NSObject **)(a1 + 128);
  v7[0] = v2;
  v7[1] = 0x40000000;
  v7[2] = __ktrace_start_file_prepass_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_9_0;
  v7[4] = a1;
  dispatch_async(v4, v7);
  v5 = *(NSObject **)(a1 + 128);
  v6[0] = v2;
  v6[1] = 0x40000000;
  v6[2] = __ktrace_start_file_prepass_block_invoke_3;
  v6[3] = &__block_descriptor_tmp_16_0;
  v6[4] = a1;
  dispatch_async(v5, v6);
}

uint64_t ktrace_start_file_internal(uint64_t a1, char a2, int a3)
{
  char is_64_bit;
  int v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v14[5];
  char v15;
  char v16;
  _QWORD block[5];

  is_64_bit = ktrace_file_is_64_bit(*(_QWORD *)(a1 + 608));
  v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    v8 = a3 == 0;
  }
  else
  {
    a2 = 0;
    v8 = 1;
  }
  v9 = MEMORY[0x1E0C809B0];
  if (!v8)
  {
    v10 = *(NSObject **)(a1 + 128);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __ktrace_start_file_internal_block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    block[4] = a1;
    dispatch_async(v10, block);
    v7 = *(_DWORD *)(a1 + 24);
  }
  if (v7 >= 1)
  {
    v11 = ktrace_stream_create(0, is_64_bit, (*(unsigned __int16 *)(a1 + 224) >> 6) & 1);
    *(_QWORD *)(a1 + 616) = v11;
    if (!v11)
      return *__error();
  }
  v12 = *(NSObject **)(a1 + 128);
  v14[0] = v9;
  v14[1] = 0x40000000;
  v14[2] = __ktrace_start_file_internal_block_invoke_9;
  v14[3] = &__block_descriptor_tmp_35;
  v14[4] = a1;
  v15 = a2;
  v16 = is_64_bit;
  dispatch_async(v12, v14);
  return 0;
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 608);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __ktrace_start_file_ariadne_prepass_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_6;
  v4[4] = v1;
  return ktrace_file_iterate(v2, 0, (uint64_t)v4);
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v5[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 232);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __ktrace_start_file_ariadne_prepass_block_invoke_3;
  v5[3] = &__block_descriptor_tmp_5_0;
  v5[4] = v2;
  v5[5] = a2;
  dispatch_async(v3, v5);
  return 1;
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke_3(uint64_t a1)
{
  return kthmap_read_chunk(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 296), *(uint64_t **)(a1 + 40));
}

_QWORD *__ktrace_start_file_prepass_block_invoke(uint64_t a1)
{
  return ktrace_prepass_uuid_map_init(*(_QWORD *)(a1 + 32));
}

void __ktrace_start_file_prepass_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 296) && (*(_DWORD *)(v1 + 260) || *(_DWORD *)(v1 + 280)))
  {
    v3 = ktrace_catalog_open(*(_QWORD *)(v1 + 608));
    if (v3)
    {
      v4 = (uint64_t)v3;
      kthmap_read_catalog(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), (uint64_t)v3);
      ktrace_catalog_close(v4);
    }
  }
}

void __ktrace_start_file_prepass_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD block[5];
  _QWORD v9[5];
  _QWORD v10[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = MEMORY[0x1E0C809B0];
  if (*(_QWORD *)(v2 + 296) && (*(_DWORD *)(v2 + 260) || *(_DWORD *)(v2 + 280)))
  {
    v4 = *(_QWORD *)(v2 + 608);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __ktrace_start_file_prepass_block_invoke_4;
    v10[3] = &__block_descriptor_tmp_13_0;
    v10[4] = v2;
    ktrace_file_iterate(v4, 0, (uint64_t)v10);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(v2 + 608);
  v9[0] = v3;
  v9[1] = 0x40000000;
  v9[2] = __ktrace_start_file_prepass_block_invoke_7;
  v9[3] = &__block_descriptor_tmp_14_0;
  v9[4] = v2;
  ktrace_file_iterate(v5, 0, (uint64_t)v9);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 232);
  block[0] = v3;
  block[1] = 0x40000000;
  block[2] = __ktrace_start_file_prepass_block_invoke_8;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = v6;
  dispatch_async(v7, block);
}

uint64_t __ktrace_start_file_prepass_block_invoke_4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[6];

  v4 = ktrace_chunk_tag(a2);
  if (v4 == 20990)
    goto LABEL_7;
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major(a2) <= 1)
    {
LABEL_7:
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(NSObject **)(v5 + 232);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 0x40000000;
      v8[2] = __ktrace_start_file_prepass_block_invoke_5;
      v8[3] = &__block_descriptor_tmp_12_0;
      v8[4] = a2;
      v8[5] = v5;
      dispatch_async(v6, v8);
    }
  }
  else if (v4 == 36864 && !ktrace_chunk_version_major(a2))
  {
    goto LABEL_7;
  }
  return 1;
}

uint64_t __ktrace_start_file_prepass_block_invoke_5(uint64_t a1)
{
  uint64_t *v1;
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __ktrace_start_file_prepass_block_invoke_6;
  v3[3] = &__block_descriptor_tmp_11_0;
  v1 = *(uint64_t **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return ktrace_stackshot_chunk_unwrap(v1, (uint64_t)v3);
}

void __ktrace_start_file_prepass_block_invoke_6(uint64_t a1, uint64_t a2, unint64_t a3)
{
  kthmap_update_stackshot(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), a2, a3);
}

uint64_t __ktrace_start_file_prepass_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char is_64_bit;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v11[6];
  char v12;
  _QWORD block[7];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 296);
  if (!v3)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 128));
  is_64_bit = ktrace_chunk_is_64_bit(a2);
  if (!*(_QWORD *)(v2 + 624))
    *(_QWORD *)(v2 + 624) = ktrace_stream_create(0, is_64_bit, (*(unsigned __int16 *)(v2 + 224) >> 6) & 1);
  v6 = *(NSObject **)(v2 + 232);
  v7 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __ktrace_prepass_chunk_block_invoke;
  block[3] = &__block_descriptor_tmp_17_0;
  block[4] = v3;
  block[5] = a2;
  block[6] = v2;
  dispatch_async(v6, block);
  if (!ktrace_stream_add(*(_QWORD *)(v2 + 624), a2))
  {
    v8 = *(_QWORD *)(v2 + 624);
    v9 = *(NSObject **)(v2 + 232);
    v11[0] = v7;
    v11[1] = 0x40000000;
    v11[2] = __ktrace_prepass_chunk_block_invoke_2;
    v11[3] = &__block_descriptor_tmp_21;
    v12 = is_64_bit;
    v11[4] = v2;
    v11[5] = v3;
    ktrace_stream_iterate_group(v8, 0x800000uLL, v9, 0, (uint64_t)v11);
  }
  return 1;
}

uint64_t __ktrace_start_file_prepass_block_invoke_8(uint64_t a1)
{
  return ktrace_prepass_uuid_map_finish(*(_QWORD *)(a1 + 32));
}

void __ktrace_prepass_chunk_block_invoke(uint64_t a1)
{
  kthmap_read_chunk(*(_BYTE **)(a1 + 32), *(uint64_t **)(a1 + 40));
  ktrace_uuid_map_learn_tailspin_process_info_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 304), *(_QWORD *)(a1 + 40));
  ktrace_uuid_map_learn_tailspin_symbols_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 304), *(_QWORD *)(a1 + 40));
  ktrace_uuid_map_learn_aot_translations_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 304), *(_QWORD *)(a1 + 40));
  ktrace_uuid_map_chunk_prepass(*(_QWORD *)(a1 + 48), *(uint64_t **)(a1 + 40));
}

BOOL __ktrace_prepass_chunk_block_invoke_2(_BOOL8 result, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3;
  int v4;
  _QWORD v5[4];
  __int128 v6;
  char v7;

  v3 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 32) + 157));
  if ((v3 & 1) == 0)
  {
    v4 = *(unsigned __int8 *)(result + 48);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __ktrace_prepass_chunk_block_invoke_3;
    v5[3] = &__block_descriptor_tmp_19_0;
    v7 = v4;
    v6 = *(_OWORD *)(result + 32);
    return trace_enumerate(a2, a3, v4, (uint64_t)v5);
  }
  return result;
}

uint64_t __ktrace_prepass_chunk_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ktrace_uuid_map_event_prepass(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(_QWORD *)(a1 + 32), (uint64_t *)a2, *(unsigned __int8 *)(a1 + 48));
  ktrace_thread_map_update_prepass(*(_QWORD *)(a1 + 40), a2, *(unsigned __int8 *)(a1 + 48));
  v4 = 48;
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v4 = 28;
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 12);
    LODWORD(v7) = *(_DWORD *)(a2 + 16);
  }
  kttimesync_update_kdebug_prepass(*(_QWORD *)(a1 + 32) + 432, *(_DWORD *)(a2 + v4), v5, v6, v7);
  return 0;
}

uint64_t __ktrace_start_file_internal_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 608);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __ktrace_start_file_internal_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_28;
  v4[4] = v1;
  return ktrace_file_iterate(v2, 0, (uint64_t)v4);
}

BOOL __ktrace_start_file_internal_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  int v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];

  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 156));
  if ((v2 & 1) != 0)
    return (v2 & 1) == 0;
  v5 = ktrace_chunk_tag(a2);
  if (v5 > 32772)
  {
    if (v5 <= 32799)
    {
      if (v5 == 32773)
      {
        if (!ktrace_chunk_version_major(a2))
        {
          v11 = *(_QWORD *)(a1 + 32);
          v7 = *(NSObject **)(v11 + 232);
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 0x40000000;
          v17[2] = __ktrace_start_file_internal_block_invoke_6;
          v17[3] = &__block_descriptor_tmp_25_1;
          v17[4] = v11;
          v17[5] = a2;
          v8 = v17;
          goto LABEL_23;
        }
      }
      else if (v5 == 32784 && !ktrace_chunk_version_major(a2))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(NSObject **)(v6 + 232);
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 0x40000000;
        v16[2] = __ktrace_start_file_internal_block_invoke_7;
        v16[3] = &__block_descriptor_tmp_26;
        v16[4] = v6;
        v16[5] = a2;
        v8 = v16;
LABEL_23:
        dispatch_async(v7, v8);
        return (v2 & 1) == 0;
      }
      return (v2 & 1) == 0;
    }
    if (v5 == 32800)
    {
      if (!ktrace_chunk_version_major(a2))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v7 = *(NSObject **)(v13 + 232);
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 0x40000000;
        v15[2] = __ktrace_start_file_internal_block_invoke_8;
        v15[3] = &__block_descriptor_tmp_27;
        v15[4] = v13;
        v15[5] = a2;
        v8 = v15;
        goto LABEL_23;
      }
      return (v2 & 1) == 0;
    }
    if (v5 != 36869)
      return (v2 & 1) == 0;
LABEL_15:
    if (!ktrace_chunk_version_major(a2))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v7 = *(NSObject **)(v10 + 232);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = __ktrace_start_file_internal_block_invoke_3;
      v20[3] = &__block_descriptor_tmp_22_0;
      v20[4] = v10;
      v20[5] = a2;
      v8 = v20;
      goto LABEL_23;
    }
    return (v2 & 1) == 0;
  }
  if (v5 == 20530)
  {
    if (!ktrace_chunk_version_major(a2))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v7 = *(NSObject **)(v12 + 232);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = __ktrace_start_file_internal_block_invoke_4;
      v19[3] = &__block_descriptor_tmp_23;
      v19[4] = v12;
      v19[5] = a2;
      v8 = v19;
      goto LABEL_23;
    }
    return (v2 & 1) == 0;
  }
  if (v5 == 32769)
    goto LABEL_15;
  if (v5 == 32772 && ktrace_chunk_version_major(a2) <= 1)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v7 = *(NSObject **)(v9 + 232);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __ktrace_start_file_internal_block_invoke_5;
    v18[3] = &__block_descriptor_tmp_24_0;
    v18[4] = v9;
    v18[5] = a2;
    v8 = v18;
    goto LABEL_23;
  }
  return (v2 & 1) == 0;
}

uint64_t __ktrace_start_file_internal_block_invoke_3(uint64_t a1)
{
  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  return ktrace_uuid_map_learn_sharedcache_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(uint64_t **)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_4(uint64_t a1)
{
  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  ktrace_uuid_map_learn_ariadne_process_dict_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(_QWORD *)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_5(uint64_t a1)
{
  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  ktrace_uuid_map_learn_inodes_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(_QWORD *)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_6(uint64_t a1)
{
  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  ktrace_uuid_map_learn_kernelmap_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(uint64_t **)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_7(uint64_t a1)
{
  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  ktrace_uuid_map_learn_process_info_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(uint64_t **)(a1 + 40));
}

uint64_t __ktrace_start_file_internal_block_invoke_8(uint64_t a1)
{
  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  return ktrace_uuid_map_learn_aot_translations_with_chunk(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), *(_QWORD *)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_9(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[5];
  _QWORD block[5];
  _QWORD v10[5];
  __int16 v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 608);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __ktrace_start_file_internal_block_invoke_10;
  v10[3] = &__block_descriptor_tmp_32_0;
  v10[4] = v2;
  v11 = *(_WORD *)(a1 + 40);
  ktrace_file_iterate(v3, 0, (uint64_t)v10);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(int *)(v5 + 96) >= 1)
  {
    v6 = *(NSObject **)(v5 + 232);
    block[0] = v4;
    block[1] = 0x40000000;
    block[2] = __ktrace_start_file_internal_block_invoke_13;
    block[3] = &__block_descriptor_tmp_33;
    block[4] = v5;
    dispatch_async(v6, block);
    v5 = *(_QWORD *)(a1 + 32);
  }
  v7 = *(NSObject **)(v5 + 128);
  v8[0] = v4;
  v8[1] = 0x40000000;
  v8[2] = __ktrace_start_file_internal_block_invoke_14;
  v8[3] = &__block_descriptor_tmp_34_0;
  v8[4] = v5;
  dispatch_async(v7, v8);
}

BOOL __ktrace_start_file_internal_block_invoke_10(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v12[5];
  char v13;
  _QWORD block[6];

  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 156));
  if ((v2 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(NSObject **)(v5 + 232);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __ktrace_start_file_internal_block_invoke_11;
      block[3] = &__block_descriptor_tmp_30_0;
      block[4] = v5;
      block[5] = a2;
      dispatch_async(v6, block);
    }
    _session_read_stackshot_chunk(*(_QWORD *)(a1 + 32), a2);
    _session_chunk_callbacks(*(_QWORD *)(a1 + 32), (uint64_t)a2);
    v7 = *(_QWORD *)(a1 + 32);
    if (*(int *)(v7 + 24) >= 1 && !ktrace_stream_add(*(_QWORD *)(v7 + 616), (uint64_t)a2))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(v8 + 616);
      v10 = *(NSObject **)(v8 + 232);
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = __ktrace_start_file_internal_block_invoke_12;
      v12[3] = &__block_descriptor_tmp_31_0;
      v12[4] = v8;
      v13 = *(_BYTE *)(a1 + 41);
      ktrace_stream_iterate_group(v9, 0x800000uLL, v10, 0, (uint64_t)v12);
    }
  }
  return (v2 & 1) == 0;
}

uint64_t __ktrace_start_file_internal_block_invoke_11(uint64_t a1)
{
  return kthmap_read_chunk(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 296), *(uint64_t **)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_12(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3;

  v3 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 157));
  if ((v3 & 1) == 0)
    _session_process_events(*(_QWORD *)(a1 + 32), a2, a3, *(unsigned __int8 *)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_13(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 320))
    _session_handle_stackshot(v1, 0xFFFFFFFFFFFFFFFFLL);
}

void __ktrace_start_file_internal_block_invoke_14(uint64_t a1)
{
  _session_end_internal(*(_QWORD *)(a1 + 32), 0, 2);
}

void trace_end(int a1)
{
  if (trace_end_get_global_once != -1)
    dispatch_once(&trace_end_get_global_once, &__block_literal_global_2);
  ktrace_end(trace_end_s, a1);
}

void __trace_end_block_invoke()
{
  trace_end_s = global_session;
  global_session = 0;
}

void *trace_set_dropped_events_handler(void *aBlock)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_dropped_events_handler(global_session, aBlock);
}

void *trace_set_thread_exit_handler(void *aBlock)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_thread_exit_handler(global_session, aBlock);
}

uint64_t trace_set_walltime_enabled(int a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_walltimes_enabled(global_session, a1);
}

uint64_t trace_set_raw_file(const char *a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_file(global_session, a1);
}

uint64_t trace_set_use_existing()
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_use_existing(global_session);
}

uint64_t trace_filter(const char *a1, const void *a2)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_events_filter(global_session, a1, a2);
}

uint64_t trace_exclude_process(const char *a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_exclude_process(global_session, a1);
}

uint64_t trace_exclude_pid(int a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_exclude_pid(global_session, a1);
}

uint64_t trace_filter_pid(int a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_filter_pid(global_session, a1);
}

uint64_t trace_set_command_map_enabled(int a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_execnames_enabled(global_session, a1);
}

uint64_t trace_codename_add_default_files()
{
  ktrace_session_set_default_event_names_enabled(global_session, 1);
  return 0;
}

uint64_t trace_add_code_file(char *a1)
{
  return ktrace_session_add_codes_file(global_session, a1);
}

void *trace_set_completion_handler(void *aBlock)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_completion_handler(global_session, aBlock);
}

uint64_t trace_all(const void *a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_events_all(global_session, a1);
}

uint64_t trace_single(int a1, const void *a2)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_events_single(global_session, a1, a2);
}

uint64_t trace_single_paired(int a1, const void *a2)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_events_single_paired(global_session, a1, a2);
}

uint64_t trace_range(int a1, int a2, const void *a3)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_events_range(global_session, a1, a2, a3);
}

uint64_t trace_range_paired(int a1, unsigned int a2, const void *a3)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_events_range_paired(global_session, a1, a2, a3);
}

uint64_t trace_start(NSObject *a1)
{
  uint64_t result;

  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  result = ktrace_start(global_session, a1);
  if ((_DWORD)result == 1)
  {
    fwrite("libktrace: cannot trace in a live mode unless root\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    exit(1);
  }
  return result;
}

uint64_t trace_get_command_for_thread(const void *a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_get_execname_for_thread(global_session, a1);
}

uint64_t trace_get_pid_for_thread(const void *a1)
{
  return ktrace_get_pid_for_thread(global_session, a1);
}

uint64_t trace_set_buffer_size(uint64_t a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_buffer_size(global_session, a1);
}

uint64_t trace_set_mode(unsigned int a1)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_set_mode(global_session, a1);
}

void trace_set_signal_handler()
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  ktrace_set_signal_handler(global_session);
}

uint64_t trace_parse_arg(int a1, uint64_t a2, int a3)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_parse_arg(global_session, a1, a2, a3);
}

uint64_t trace_parse_args(int a1, char **a2)
{
  if (allocated_once != -1)
    dispatch_once(&allocated_once, &__block_literal_global_3);
  return ktrace_parse_args(global_session, a1, a2);
}

const void *trace_codename_for_debugid(int a1)
{
  return ktrace_name_for_eventid(global_session, (void *)(a1 & 0xFFFFFFFC));
}

const void *trace_codename_to_debugid(const void *a1)
{
  return ktrace_eventid_for_name(global_session, a1);
}

uint64_t trace_enable()
{
  return 1;
}

uint64_t trace_disable()
{
  return 1;
}

uint64_t trace_setup()
{
  return 1;
}

uint64_t trace_reset()
{
  return 1;
}

uint64_t trace_collect_and_process()
{
  return 1;
}

_QWORD *__initialize_global_session_block_invoke()
{
  _QWORD *result;

  result = ktrace_session_create();
  global_session = (uint64_t)result;
  return result;
}

void _session_drain_finish(uint64_t a1)
{
  unint64_t *v2;
  void (**v3)(_QWORD);
  unint64_t v4;
  NSObject *v5;
  _QWORD block[5];

  v2 = (unint64_t *)(a1 + 56);
  v3 = *(void (***)(_QWORD))(a1 + 56);
  do
  {
    v4 = __ldaxr(v2);
    if ((void (**)(_QWORD))v4 != v3)
    {
      __clrex();
      return;
    }
  }
  while (__stlxr(0, v2));
  _session_teardown(a1);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      v3[2](v3);
      _Block_release(v3);
    }
    else
    {
      v5 = *(NSObject **)(a1 + 232);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___session_drain_finish_block_invoke;
      block[3] = &unk_1E5F70900;
      block[4] = v3;
      dispatch_async(v5, block);
    }
  }
}

void ___session_drain_finish_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t apply_kernel_typefilter_and_pid_filter(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_DWORD *)(a1 + 560)
    || *(_DWORD *)(a1 + 576) == 2
    || (v3 = a1,
        v4 = 0,
        CFSetApplyFunction(*(CFSetRef *)(a1 + 552), (CFSetApplierFunction)pid_set_applier, &v3),
        result = v4,
        !(_DWORD)v4))
  {
    if (*(_BYTE *)(a1 + 16))
      return 0;
    result = trace_set_filter(*(void **)(a1 + 8));
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

void populate_threadmap(uint64_t a1, int a2)
{
  NSObject *v3;
  _QWORD v4[7];
  char v5;
  size_t v6;
  uint64_t v7;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_DWORD *)a1 | 2) != 2)
    _session_start_live_cold_4();
  if (*(_QWORD *)(a1 + 232) && *(_DWORD *)(a1 + 260))
  {
    v6 = 0;
    v7 = 0;
    if (a2)
      kdebug_alloc_current_thread_map((uint64_t)&v7, &v6);
    else
      kdebug_alloc_thread_map(&v7, &v6);
    if (v7)
    {
      v3 = *(NSObject **)(a1 + 232);
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = __populate_threadmap_block_invoke;
      v4[3] = &__block_descriptor_57_e5_v8__0l;
      v4[4] = a1;
      v4[5] = v7;
      v4[6] = v6;
      v5 = 1;
      dispatch_async(v3, v4);
    }
  }
}

uint64_t ktrace_configure(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)a1 == 1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)a1 == 3)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  v2 = atomic_load(&live_session);
  if (v2 && (*(_WORD *)(v2 + 224) & 1) != 0)
    return 22;
  do
  {
    v3 = __ldaxr(&live_session);
    if (v3 != v2)
    {
      __clrex();
      return 22;
    }
  }
  while (__stlxr(a1, &live_session));
  _session_machine_init(a1);
  *(_WORD *)(a1 + 224) |= 2u;
  *(_DWORD *)(a1 + 4) = 4;
  v4 = trace_initialize(*(_QWORD *)(a1 + 336));
  if ((_DWORD)v4
    || (ktrace_compute_filter(a1), _session_cpus_init(a1), v4 = apply_kernel_typefilter_and_pid_filter(a1), (_DWORD)v4)
    || (v4 = trace_set_enable(1), (_DWORD)v4))
  {
    _session_end_internal(a1, 1, 1);
  }
  return v4;
}

uint64_t ktrace_reset_existing()
{
  unint64_t v0;
  unint64_t v1;

  v0 = atomic_load(&live_session);
  if (!v0)
    return trace_remove_internal();
  if ((*(_WORD *)(v0 + 224) & 2) == 0)
    ktrace_reset_existing_cold_1();
  while (1)
  {
    v1 = __ldaxr(&live_session);
    if (v1 != v0)
      break;
    if (!__stlxr(0, &live_session))
      return trace_remove_internal();
  }
  __clrex();
  return 22;
}

uint64_t ktrace_disable_configured(uint64_t a1)
{
  unint64_t v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 2) == 0)
    return 22;
  while (1)
  {
    v2 = __ldaxr(&live_session);
    if (v2 != a1)
      break;
    if (!__stlxr(0, &live_session))
      return trace_set_enable(0);
  }
  __clrex();
  return 48;
}

uint64_t pid_set_applier(uint64_t result, _DWORD *a2)
{
  if (!a2[2])
  {
    result = trace_set_pid_filter(*(_DWORD *)(*(_QWORD *)a2 + 560) == 2, result);
    a2[2] = result;
  }
  return result;
}

void __populate_threadmap_block_invoke(uint64_t a1)
{
  kthmap_read_kdebug_map(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *(unsigned __int8 *)(a1 + 56));
  free(*(void **)(a1 + 40));
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __drain_callbacks_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  int is_64_bit;
  uint64_t v11;
  uint64_t v12;

  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 157));
  if ((v2 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(v4 + 720);
    if (v5)
    {
      v6 = *(_QWORD *)(v4 + 160);
      v7 = v5 > v6;
      v8 = v5 - v6;
      if (!v7)
        ktrace_remotetime_update_params_cold_1();
      if (v3 >= v8 << 6)
        v3 = v8 << 6;
    }
    v9 = *(_QWORD *)(a1 + 48);
    is_64_bit = current_system_is_64_bit();
    _session_process_events(v4, v9, v3, is_64_bit);
  }
  trace_free(*(void **)(a1 + 48));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 720);
  if (v12)
  {
    if (*(_QWORD *)(v11 + 160) == v12)
      _session_end_internal(v11, 1, 6);
  }
}

uint64_t __drain_trailing_duration_block_invoke(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)(a1[4] + 157));
  if ((v2 & 1) == 0)
  {
    v3 = a1[6];
    if (v3 >= 0x40)
    {
      v5 = a1[4];
      v4 = a1[5];
      v6 = v3 >> 6;
      do
      {
        ktrace_time_ringbuffer_handle_tracepoint(*(uint64_t **)(v5 + 640), v4);
        v4 += 64;
        --v6;
      }
      while (v6);
    }
  }
  return trace_free((void *)a1[5]);
}

uint64_t OUTLINED_FUNCTION_7()
{
  return _os_assert_log();
}

uint64_t ktrace_exclude_process(uint64_t a1, const char *a2)
{
  uint64_t result;
  char *v5;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = validate_filter(a1, 1);
  if (!(_DWORD)result)
  {
    v5 = strdup(a2);
    if (v5)
    {
      *(_DWORD *)(a1 + 576) = 1;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 568), v5);
      return 0;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t validate_filter(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  if (a2)
    v2 = 2;
  else
    v2 = 1;
  if (*(_DWORD *)(a1 + 560) == v2 || *(_DWORD *)(a1 + 576) == v2)
    return 22;
  v3 = *(unsigned int *)(a1 + 260);
  if ((_DWORD)v3)
    return 0;
  *(_DWORD *)(a1 + 260) = 2;
  return v3;
}

uint64_t ktrace_filter_process(uint64_t a1, const char *a2)
{
  uint64_t result;
  char *v5;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = validate_filter(a1, 0);
  if (!(_DWORD)result)
  {
    v5 = strdup(a2);
    if (v5)
    {
      *(_DWORD *)(a1 + 576) = 2;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 568), v5);
      return 0;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t ktrace_exclude_pid(uint64_t a1, int a2)
{
  uint64_t v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = validate_filter(a1, 1);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 560) = 1;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 552), (const void *)a2);
  }
  return v4;
}

uint64_t ktrace_filter_pid(uint64_t a1, int a2)
{
  uint64_t v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = validate_filter(a1, 0);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 560) = 2;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 552), (const void *)a2);
  }
  return v4;
}

uint64_t ktrace_ignore_process_filter_for_event(uint64_t a1, void *value)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  *(_BYTE *)(a1 + 580) = 1;
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 584), (const void *)value);
  return 0;
}

uint64_t ktrace_current_timebase()
{
  if (ktrace_current_timebase_once != -1)
    dispatch_once(&ktrace_current_timebase_once, &__block_literal_global_4);
  return ktrace_current_timebase_mtb;
}

uint64_t __ktrace_current_timebase_block_invoke()
{
  uint64_t result;

  result = mach_timebase_info((mach_timebase_info_t)&ktrace_current_timebase_mtb);
  if ((_DWORD)result)
    ktrace_postprocess_file_internal_cold_1();
  return result;
}

uint64_t kdebug_wait(unsigned int a1)
{
  int v2;
  size_t v3;
  int v4[2];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 23;
  *(_QWORD *)v4 = 0x1800000001;
  v3 = a1;
  if ((sysctl(v4, 3u, 0, &v3, 0, 0) & 0x80000000) == 0)
    return 0;
  v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    kdebug_wait_cold_1();
  *__error() = v2;
  if (*__error())
    return *__error();
  else
    return 22;
}

uint64_t kdebug_read_events(void *a1, size_t *a2)
{
  uint64_t result;
  int v4;
  int v5[2];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 10;
  *(_QWORD *)v5 = 0x1800000001;
  if (sysctl(v5, 3u, a1, a2, 0, 0) < 0)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      kdebug_read_events_cold_1();
    *__error() = v4;
    if (*__error())
      return *__error();
    else
      return 22;
  }
  else
  {
    result = 0;
    *a2 <<= 6;
  }
  return result;
}

uint64_t kdebug_wait_and_read_events(void *a1, size_t *a2, unsigned int a3)
{
  uint64_t result;

  result = kdebug_wait(a3);
  if (!(_DWORD)result)
    return kdebug_read_events(a1, a2);
  return result;
}

uint64_t kdebug_get_flags()
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  if (kdebug_get_bufinfo(&v1))
    return 0;
  else
    return v2;
}

uint64_t kdebug_alloc_current_thread_map(uint64_t a1, size_t *a2)
{
  void *v3;
  void *v4;
  int v6;
  unsigned int v7;
  int v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  *a2 = 36000;
  v3 = malloc_type_malloc(0x8CA0uLL, 0x76FF0578uLL);
  if (!v3)
    ktrace_remotetime_update_params_cold_1();
  v4 = v3;
  v9 = 21;
  *(_QWORD *)v8 = 0x1800000001;
  if ((sysctl(v8, 3u, v3, a2, 0, 0) & 0x80000000) == 0)
    return 0;
  v6 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    kdebug_alloc_current_thread_map_cold_3();
  *__error() = v6;
  v7 = *__error();
  free(v4);
  if (v7)
    return v7;
  else
    return 22;
}

char *kdebug_alloc_filter_description(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  char v6;
  size_t v7;
  int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  int i;
  void *v13;
  uint64_t v14;

  v2 = malloc_type_malloc(0x200uLL, 0x2B4827B2uLL);
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  v3 = v2;
  v4 = 0;
  v5 = 0;
  v6 = 1;
  v7 = 512;
LABEL_3:
  while (2)
  {
    v8 = 0;
    v9 = v4 << 8;
    while (((*(unsigned __int8 *)(a1 + ((unint64_t)(v8 & 0xF8 | v9) >> 3)) >> (v8 & 7)) & 1) != 0)
    {
      if (++v8 == 256)
      {
        if (v5 + 8 > v7)
        {
          v7 *= 2;
          v10 = malloc_type_realloc(v3, v7, 0x81D5B2E1uLL);
          if (!v10)
            ktrace_remotetime_update_params_cold_1();
          v3 = v10;
        }
        if (v5)
        {
          v11 = v5 + 1;
          *((_BYTE *)v3 + v5) = 44;
        }
        else
        {
          v11 = 0;
        }
        v5 = v11 + snprintf((char *)v3 + v11, 8uLL, "C0x%02x", v4++);
        if (v4 != 256)
          goto LABEL_3;
        if ((v6 & 1) != 0)
        {
          free(v3);
          return strdup("ALL");
        }
        goto LABEL_27;
      }
    }
    for (i = 0; i != 256; ++i)
    {
      if (((*(unsigned __int8 *)(a1 + ((unint64_t)(i & 0xF8 | v9) >> 3)) >> (i & 7)) & 1) != 0)
      {
        if (v5 + 10 > v7)
        {
          v7 *= 2;
          v13 = malloc_type_realloc(v3, v7, 0xBE78DFFAuLL);
          if (!v13)
            ktrace_remotetime_update_params_cold_1();
          v3 = v13;
        }
        if (v5)
        {
          v14 = v5 + 1;
          *((_BYTE *)v3 + v5) = 44;
        }
        else
        {
          v14 = 0;
        }
        v5 = v14 + snprintf((char *)v3 + v14, 0xAuLL, "S0x%02x%02x", v4, i);
      }
    }
    v6 = 0;
    if (++v4 != 256)
      continue;
    break;
  }
LABEL_27:
  *((_BYTE *)v3 + v5) = 0;
  return (char *)v3;
}

uint64_t ktrace_end_on_event_match(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 760) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 728) = v3;
  *(_OWORD *)(a1 + 744) = v4;
  v6 = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 800) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 768) = v6;
  *(_OWORD *)(a1 + 784) = v5;
  *(_BYTE *)(a1 + 828) |= 2u;
  return 0;
}

uint64_t ktrace_end_on_dropped_events(uint64_t a1)
{
  *(_BYTE *)(a1 + 828) |= 4u;
  return 0;
}

uint64_t ktrace_end_on_event_count(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 720) = a2;
  return 0;
}

void ktrace_iterate_threads(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  kthmap_iterate_threads(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_set_execnames_enabled(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  if (!a2)
  {
    if (*(_DWORD *)(result + 560) || *(_DWORD *)(result + 576))
      a2 = 2;
    else
      a2 = 0;
  }
  *(_DWORD *)(result + 260) = a2;
  return result;
}

uint64_t ktrace_get_execnames_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 260);
}

uint64_t ktrace_get_execname_for_thread(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_process_name_for_tid(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_get_execname_for_pid(uint64_t a1, int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_name_for_pid(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_get_pid_for_thread(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_pid_for_tid(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_get_task_uniqueid_for_thread(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_uniqueid_for_tid(*(_QWORD *)(a1 + 296), a2);
}

const void *ktrace_get_name_for_thread(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_thread_name_for_tid(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_get_name_for_cpu(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = *(_QWORD *)(a1 + 352);
  if (result)
    return ktrace_cpus_get_cpu_name(result, a2);
  return result;
}

uint64_t ktrace_get_cpu_is_coproc(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = *(_QWORD *)(a1 + 352);
  if (result)
    return ktrace_cpus_get_cpu_is_coproc(result, a2);
  return result;
}

uint64_t ktrace_session_add_codes_file(uint64_t a1, char *a2)
{
  return kteventnames_add_path((CFMutableDictionaryRef *)(a1 + 360), a2);
}

uint64_t ktrace_session_set_default_event_names_enabled(uint64_t a1, int a2)
{
  return kteventnames_use_default(a1 + 360, a2);
}

uint64_t ktrace_session_get_default_event_names_enabled(uint64_t a1)
{
  return kteventnames_using_default(a1 + 360);
}

BOOL ktrace_session_getting_event_names_from_system(uint64_t a1)
{
  return kteventnames_from_system(a1 + 360);
}

uint64_t ktrace_session_set_event_names_enabled(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  *(_DWORD *)(result + 256) = a2;
  if (!a2)
    return kteventnames_use_default(result + 360, 0);
  return result;
}

uint64_t ktrace_session_get_event_names_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 256);
}

const void *ktrace_name_for_eventid(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 256))
    return kteventnames_name_from_id(a1 + 360, a2);
  else
    return 0;
}

const void *ktrace_eventid_for_name(uint64_t a1, const void *a2)
{
  if (*(_DWORD *)(a1 + 256))
    return kteventnames_id_from_name(a1 + 360, a2);
  else
    return 0;
}

uint64_t ktrace_set_uuid_map_enabled(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 3) != 0)
    ktrace_set_thread_cputime_enabled_cold_4();
  if (a2 == 2)
    ktrace_remotetime_update_params_cold_1();
  *(_DWORD *)(result + 284) = a2;
  return result;
}

uint64_t ktrace_get_uuid_map_enabled(uint64_t a1)
{
  return *(unsigned int *)(a1 + 284);
}

uint64_t ktrace_get_jetsam_coalitions_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 276);
}

uint64_t ktrace_dump_address_space(uint64_t a1, unint64_t a2, FILE *a3)
{
  return ktrace_uuid_map_dump_address_space(*(ktrace_uuid_map **)(a1 + 304), a2, a3);
}

uint64_t ktrace_dump_address_space_pid(uint64_t a1, int a2, FILE *a3)
{
  return ktrace_uuid_map_dump_address_space_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3);
}

uint64_t ktrace_get_thread_group_flags(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_flags_for_thread_group(*(_QWORD *)(a1 + 296), a2, a3);
}

uint64_t ktrace_set_dsc_unslid_base_addresses(uint64_t a1, uint64_t a2)
{
  _session_ensure_uuidmap(a1);
  return ktrace_uuid_map_set_dsc_unslid_base_addresses(*(_QWORD *)(a1 + 304), a2);
}

uint64_t ktrace_enable_symbolication(uint64_t a1)
{
  _session_ensure_uuidmap(a1);
  ktrace_uuid_map_learn_live_kernelmap(*(ktrace_uuid_map **)(a1 + 304));
  ktrace_get_symbolicator(a1);
  return ktrace_symbolicator_enable_symbolication();
}

void ktrace_get_symbolicator(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 312);
  if (!v2)
  {
    ktrace_symbolicator_create();
    *(_QWORD *)(a1 + 312) = v2;
    if (!v2)
      ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 0x10) == 0)
  {
    v3 = *(_QWORD *)(a1 + 608);
    if (v3)
    {
      ktrace_symbolicator_read_file(v2, v3);
      *(_WORD *)(a1 + 224) |= 0x10u;
    }
  }
}

double ktrace_get_uuid_offset_for@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  ktrace_uuid_map *v5;
  uint64_t v7;
  int v8;
  double result;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  int v13;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v5 = *(ktrace_uuid_map **)(a1 + 304);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 16);
    switch(v7)
    {
      case 2:
        v10 = *(_QWORD *)(a2 + 8);
        break;
      case 1:
        v11 = *(const void **)(a2 + 8);
        v12 = kthmap_uniqueid_for_tid(*(_QWORD *)(a1 + 296), v11);
        if (v12 == -1)
        {
          v13 = kthmap_pid_for_tid(*(_QWORD *)(a1 + 296), v11);
          if ((v13 & 0x80000000) == 0)
          {
            v8 = v13;
            v5 = *(ktrace_uuid_map **)(a1 + 304);
            return ktrace_uuid_map_get_offset_for_pid_address(v5, v8, *(_QWORD *)a2, *(_BYTE *)(a2 + 24) & 1, a3);
          }
          goto LABEL_14;
        }
        v10 = v12;
        v5 = *(ktrace_uuid_map **)(a1 + 304);
        break;
      case 0:
        v8 = *(_DWORD *)(a2 + 8);
        return ktrace_uuid_map_get_offset_for_pid_address(v5, v8, *(_QWORD *)a2, *(_BYTE *)(a2 + 24) & 1, a3);
      default:
        goto LABEL_14;
    }
    return ktrace_uuid_map_get_offset_for_address(v5, v10, *(_QWORD *)a2, *(_BYTE *)(a2 + 24) & 1, a3);
  }
LABEL_14:
  result = 0.0;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

double ktrace_get_uuid_offset_for_task_address@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD v5[3];
  char v6;
  _BYTE v7[15];

  memset(v7, 0, sizeof(v7));
  v5[0] = a3;
  v5[1] = a2;
  v5[2] = 2;
  v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

double ktrace_get_uuid_offset_for_pid_address@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD v5[3];
  char v6;
  _BYTE v7[15];

  memset(v7, 0, sizeof(v7));
  v5[0] = a3;
  v5[1] = a2;
  v5[2] = 0;
  v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

double ktrace_get_uuid_offset_for_thread_address@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD v5[3];
  char v6;
  _BYTE v7[15];

  memset(v7, 0, sizeof(v7));
  v5[0] = a3;
  v5[1] = a2;
  v5[2] = 1;
  v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

uint64_t ktrace_create_cssymbolicator_for_pid(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return ktrace_uuid_map_create_cssymbolicator_for_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3, a4);
}

uint64_t ktrace_create_cssymbolicator_for_task(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return ktrace_uuid_map_create_cssymbolicator_for_task(*(ktrace_uuid_map **)(a1 + 304), a2, a3, a4);
}

uint64_t ktrace_create_cssymbolicator_for_thread(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  unint64_t task_uniqueid_for_thread;
  int pid_for_thread;

  task_uniqueid_for_thread = ktrace_get_task_uniqueid_for_thread(a1, a4);
  if (task_uniqueid_for_thread != -1)
    return ktrace_uuid_map_create_cssymbolicator_for_task(*(ktrace_uuid_map **)(a1 + 304), a2, a3, task_uniqueid_for_thread);
  pid_for_thread = ktrace_get_pid_for_thread(a1, a4);
  if (pid_for_thread < 0)
    return 0;
  else
    return ktrace_uuid_map_create_cssymbolicator_for_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3, pid_for_thread);
}

UInt8 *ktrace_describe_uuid_offset(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 304);
    ktrace_get_symbolicator(a1);
    v4 = a2[3];
    v12 = a2[2];
    v13 = v4;
    v14 = a2[4];
    v5 = a2[1];
    v10 = *a2;
    v11 = v5;
    return ktrace_symbolicator_get_description(v3, v6, &v10);
  }
  else
  {
    v8 = a2[3];
    v12 = a2[2];
    v13 = v8;
    v14 = a2[4];
    v9 = a2[1];
    v10 = *a2;
    v11 = v9;
    return ktrace_uuid_offset_get_description(0, &v10);
  }
}

BOOL ktrace_symbolicate_uuid_offset(uint64_t a1, _OWORD *a2, _BYTE *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  ktrace_get_symbolicator(a1);
  v11 = a2[3];
  v15[2] = a2[2];
  v15[3] = v11;
  v15[4] = a2[4];
  v12 = a2[1];
  v15[0] = *a2;
  v15[1] = v12;
  return ktrace_symbolicator_symbolicate(v13, (uint64_t)v15, a3, a4, a5, a6);
}

BOOL ktrace_plausible_kernel_address(uint64_t a1, unint64_t a2)
{
  return ktrace_uuid_map_plausible_kernel_address(*(_QWORD *)(a1 + 304), a2);
}

uint64_t ktrace_set_jetsam_coalitions_enabled(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  *(_DWORD *)(result + 276) = a2;
  return result;
}

uint64_t ktrace_get_jetsam_coalition_for_thread(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_jetsam_coalition_for_tid(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_get_jetsam_coalition_for_pid(uint64_t a1, int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_jetsam_coalition_for_pid(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace_set_thread_groups_enabled(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  *(_DWORD *)(result + 280) = a2;
  return result;
}

uint64_t ktrace_get_thread_groups_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 280);
}

uint64_t ktrace_get_thread_group_for_thread(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_thread_group_for_tid(*(_QWORD *)(a1 + 296), a2);
}

char *ktrace_get_thread_group_name(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return kthmap_name_for_thread_group(*(_QWORD *)(a1 + 296), a2);
}

uint64_t ktrace::RingBufferImpl::handleTracepoint(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  FILE **v10;
  int v11;
  NSObject *v12;
  _BYTE *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint8_t buf[4];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 >= *(_QWORD *)(result + 72))
  {
    v3 = result;
    ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation((int *)result, a2);
    result = (uint64_t)ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards((int *)v3, a2);
    v4 = *(_DWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v3 + 48) + 48 * v4;
    v6 = *(_QWORD *)a2;
    *(_QWORD *)v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(_DWORD *)(a2 + 52) << 56);
    v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 12) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(v3 + 56) = v4 + 1;
    *(_QWORD *)(v3 + 80) = v6;
    if (v7 == 117571592)
      *(_BYTE *)(*(_QWORD *)(v3 + 32) + 16) = 1;
    if (v4 + 1 == *(_DWORD *)(v3 + 40))
    {
      v8 = *(_QWORD *)(v3 + 24);
      if (v8 != *(_QWORD *)(v3 + 32))
      {
        v9 = 0;
        v10 = (FILE **)MEMORY[0x1E0C80C10];
        while (*(_QWORD *)(v3 + 80) - *(_QWORD *)(v8 + 8) >= *(_QWORD *)v3)
        {
          *(_QWORD *)(v3 + 24) = *(_QWORD *)v8;
          if (v9)
          {
            result = ktrace::MemoryPool<ktrace::RingBufferHeader>::freeToMemoryPool(*(_QWORD *)(v3 + 112), (_QWORD *)v8);
            v8 = v9;
          }
          else
          {
            *(_BYTE *)(v8 + 16) = 0;
            if (!*(_BYTE *)(v3 + 16))
            {
              fwrite("WARNING: The ring buffer size now covers the full requested ring buffer time.\n", 0x4EuLL, 1uLL, *v10);
              v11 = *__error();
              ktrace_log_init();
              v12 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                v18 = v11;
                _os_log_error_impl(&dword_1AF33A000, v12, OS_LOG_TYPE_ERROR, "WARNING: The ring buffer size now covers the full requested ring buffer time. (%{errno}d)", buf, 8u);
              }
              result = (uint64_t)__error();
              *(_DWORD *)result = v11;
              *(_BYTE *)(v3 + 16) = 1;
            }
          }
          v9 = v8;
          v8 = *(_QWORD *)(v3 + 24);
          if (v8 == *(_QWORD *)(v3 + 32))
            goto LABEL_25;
        }
        if (v9)
          goto LABEL_25;
      }
      result = (uint64_t)ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(*(_QWORD *)(v3 + 112));
      if (result)
      {
        v9 = result;
        v13 = (_BYTE *)(result + 16);
      }
      else
      {
        v9 = *(_QWORD *)(v3 + 24);
        if (v9 == *(_QWORD *)(v3 + 32))
          ktrace::RingBufferImpl::handleTracepoint();
        v13 = (_BYTE *)(v3 + 16);
        v14 = *(unsigned __int8 *)(v3 + 16);
        *(_QWORD *)(v3 + 24) = *(_QWORD *)v9;
        *(_BYTE *)(v9 + 16) = 0;
        if (!v14)
          goto LABEL_25;
        fwrite("WARNING: The maximum ring buffer size has been reached. The trace will not be able to cover the full requested ring buffer time.\n", 0x81uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        v15 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace::RingBufferImpl::handleTracepoint();
        result = (uint64_t)__error();
        *(_DWORD *)result = v15;
      }
      *v13 = 0;
LABEL_25:
      v16 = *(uint64_t **)(v3 + 32);
      *v16 = v9;
      v16[1] = *(_QWORD *)(v3 + 80);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v3 + 32) = v9;
      *(_QWORD *)(v3 + 48) = v9 + 24;
      *(_DWORD *)(v3 + 56) = 0;
    }
  }
  return result;
}

int *ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation(int *result, uint64_t a2)
{
  int *v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 7))
  {
    v3 = result;
    v4 = result[23];
    if (!v4)
    {
      fwrite("ERROR: Timestamp size exceeded. Trace file will probably be corrupted and unreadable. You can fix this by rebooting.\n", 0x75uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation();
      result = __error();
      *result = v5;
      *((_BYTE *)v3 + 96) = 1;
      v4 = v3[23];
    }
    v3[23] = v4 + 1;
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (HIDWORD(v6))
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "WARNING: Thread id size exceeded for debugid: 0x%08x cpuid: %-2u tid: 0x%llx\n", *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), v6);
    v7 = *__error();
    ktrace_log_init();
    v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = *(_DWORD *)(a2 + 52);
      v11 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)buf = 67109888;
      v13 = v9;
      v14 = 1024;
      v15 = v10;
      v16 = 2048;
      v17 = v11;
      v18 = 1024;
      v19 = v7;
      _os_log_error_impl(&dword_1AF33A000, v8, OS_LOG_TYPE_ERROR, "WARNING: Thread id size exceeded for debugid: 0x%08x cpuid: %-2u tid: 0x%llx (%{errno}d)", buf, 0x1Eu);
    }
    result = __error();
    *result = v7;
  }
  return result;
}

int *ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(int *result, uint64_t a2)
{
  int *v2;
  int v3;
  uint64_t v5;
  NSObject *v6;

  if (*((_QWORD *)result + 10) > *(_QWORD *)a2)
  {
    v2 = result;
    v3 = result[22];
    if (!v3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "ERROR: Timestamps out of order for class 0x%x. Trace file will probably be corrupted and unreadable. Please file a bug against Purple Ariadne with this trace.\n", *(unsigned __int8 *)(a2 + 51));
      v5 = *__error();
      ktrace_log_init();
      v6 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(a2 + 48, v5, v6);
      result = __error();
      *result = v5;
      *((_BYTE *)v2 + 96) = 1;
      v3 = v2[22];
    }
    v2[22] = v3 + 1;
  }
  return result;
}

uint64_t ktrace::MemoryPool<ktrace::RingBufferHeader>::freeToMemoryPool(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  *a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 8);
  ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(a1);
  return pthread_mutex_unlock(v4);
}

_QWORD *ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(uint64_t a1)
{
  pthread_mutex_t *v2;
  _QWORD *v3;

  v2 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = *v3;
    --*(_DWORD *)(a1 + 8);
    ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(a1);
  }
  pthread_mutex_unlock(v2);
  return v3;
}

int *ktrace::RingBufferImpl::handleCompletion(ktrace::RingBufferImpl *this, ktrace_file *a2)
{
  uint64_t *v4;
  _QWORD *appended;
  uint64_t v6;
  FILE **v7;
  int v8;
  int v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  int *result;
  int v21;
  uint8_t buf[4];
  unint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  appended = ktrace_file_append_start((uint64_t)a2, 20982, 0, 0);
  if (appended)
  {
    v6 = (uint64_t)appended;
    if (v4 != *((uint64_t **)this + 4))
    {
      v7 = (FILE **)MEMORY[0x1E0C80C10];
      do
      {
        if (*((_BYTE *)v4 + 16))
        {
          v8 = *((_DWORD *)this + 25);
          if (!v8)
          {
            fwrite("ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help.\n", 0x89uLL, 1uLL, *v7);
            v9 = *__error();
            ktrace_log_init();
            v10 = ktrace_log;
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v23) = v9;
              _os_log_error_impl(&dword_1AF33A000, v10, OS_LOG_TYPE_ERROR, "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help. (%{errno}d)", buf, 8u);
            }
            *__error() = v9;
            v8 = *((_DWORD *)this + 25);
          }
          *((_DWORD *)this + 25) = v8 + 1;
          *((_BYTE *)this + 96) = 1;
        }
        v11 = 48 * *((int *)this + 10);
        if (ktrace_file_append_data((uint64_t)a2, v6, (UInt8 *)v4 + 24, v11))
        {
          v12 = v11 / 0x30;
          fprintf(*v7, "ERROR: Failed to write %ld kdebug events into chunk in output file\n", v11 / 0x30);
          v13 = *__error();
          ktrace_log_init();
          v14 = ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            v23 = v12;
            v24 = 1024;
            v25 = v13;
            _os_log_error_impl(&dword_1AF33A000, v14, OS_LOG_TYPE_ERROR, "ERROR: Failed to write %ld kdebug events into chunk in output file (%{errno}d)", buf, 0x12u);
          }
          *__error() = v13;
        }
        v4 = (uint64_t *)*v4;
      }
      while (v4 != *((uint64_t **)this + 4));
    }
    if (*((_BYTE *)v4 + 16))
    {
      v15 = *((_DWORD *)this + 25);
      if (!v15)
      {
        fwrite("ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help.\n", 0x89uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        v16 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace::RingBufferImpl::handleCompletion();
        *__error() = v16;
        v15 = *((_DWORD *)this + 25);
        v4 = (uint64_t *)*((_QWORD *)this + 4);
      }
      *((_DWORD *)this + 25) = v15 + 1;
      *((_BYTE *)this + 96) = 1;
    }
    v17 = *((unsigned int *)this + 14);
    if (ktrace_file_append_data((uint64_t)a2, v6, (UInt8 *)v4 + 24, 48 * v17))
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "ERROR: Failed to write %ld kdebug events into chunk in output file\n", v17);
      v18 = *__error();
      ktrace_log_init();
      v19 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace::RingBufferImpl::handleCompletion(v17, v18, v19);
      *__error() = v18;
    }
    return (int *)ktrace_file_append_finish((uint64_t)a2, v6);
  }
  else
  {
    fwrite("ERROR: Failed to create kdebug events chunk in output file\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v21 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace::RingBufferImpl::handleCompletion();
    result = __error();
    *result = v21;
  }
  return result;
}

ktrace::RingBufferImpl *ktrace::RingBufferImpl::RingBufferImpl(ktrace::RingBufferImpl *this, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v13;
  int v14;
  uint64_t v15;
  mach_timebase_info info;
  unint64_t v17;
  size_t v18;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_DWORD *)this + 10) = 50000;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  v4 = (uint64_t *)((char *)this + 112);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_BYTE *)this + 96) = 0;
  v17 = 0;
  v18 = 8;
  if (sysctlbyname("hw.memsize", &v17, &v18, 0, 0))
  {
    __error();
    perror("ERROR: Couldn't get total memory size");
    v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace::RingBufferImpl::RingBufferImpl();
    *__error() = v13;
    exit(1);
  }
  v5 = v17 >> 20;
  v6 = *((_DWORD *)this + 3);
  if (!v6)
  {
    v6 = (int)v5 >> 3;
    *((_DWORD *)this + 3) = (int)v5 >> 3;
  }
  v7 = 3 * (int)v5 / 4;
  if (v7 < v6)
    v6 = v7;
  if (v6 >= 0xFF8)
    v6 = 4088;
  if (v6 <= 2)
    v6 = 2;
  *((_DWORD *)this + 2) = v6;
  mach_timebase_info(&info);
  *(_QWORD *)this = (unint64_t)info.denom * a2 / info.numer;
  ktrace::MemoryPool<ktrace::RingBufferHeader>::create(0x100000, *((_DWORD *)this + 2), &v15);
  v8 = v15;
  v15 = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
  {
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)v4, v9);
    v10 = v15;
    v15 = 0;
    if (v10)
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)&v15, v10);
  }
  v11 = ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(*v4);
  *((_QWORD *)this + 3) = v11;
  *((_QWORD *)this + 4) = v11;
  if (!v11)
  {
    fwrite("ERROR: Couldn't allocate ring buffer.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace::RingBufferImpl::RingBufferImpl();
    *__error() = v14;
    exit(1);
  }
  *((_BYTE *)v11 + 16) = 0;
  *v11 = 0;
  *((_DWORD *)this + 10) = 21844;
  *((_QWORD *)this + 6) = v11 + 3;
  return this;
}

void sub_1AF363914(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::create(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *global_queue;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v6 = operator new();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 112) = 1;
  v20 = v6;
  *(_DWORD *)v6 = a1;
  *(_DWORD *)(v6 + 4) = a2;
  global_queue = dispatch_get_global_queue(21, 0);
  *(_QWORD *)(v6 + 120) = dispatch_queue_create_with_target_V2("com.apple.ktrace.memorypool.reaper_queue", 0, global_queue);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 48), 0);
  v8 = v20;
  *(_DWORD *)(v20 + 8) = 0;
  v9 = a2 / 10;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = 0x800000 / a1 + a2 / 10;
  if (v10 >= a2)
    v10 = a2;
  *(_DWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 36) = v10;
  *(_QWORD *)(v8 + 40) = 0;
  if (a2 < 1)
  {
    v12 = 0;
LABEL_8:
    v13 = __OFADD__(v10, v9);
    v14 = v10 + v9;
    if (v14 < 0 != v13)
      ++v14;
    if (v12 < v14 >> 1)
    {
      v15 = v14 >> 1;
      v16 = *(_QWORD **)(v8 + 16);
      do
      {
        v17 = *(_QWORD **)(v8 + 24);
        *(_QWORD *)(v8 + 24) = *v17;
        *v17 = v16;
        v8 = v20;
        *(_QWORD *)(v20 + 16) = v17;
        v18 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v18;
        v16 = v17;
      }
      while (v18 < v15);
    }
    *a3 = v8;
  }
  else
  {
    while (1)
    {
      v11 = mmap(0, a1, 3, 4098, -1, 0);
      if (v11 == (_QWORD *)-1)
        break;
      *v11 = *(_QWORD *)(v20 + 24);
      v8 = v20;
      *(_QWORD *)(v20 + 24) = v11;
      if (!--a2)
      {
        v9 = *(_DWORD *)(v8 + 32);
        v10 = *(_DWORD *)(v8 + 36);
        v12 = *(_DWORD *)(v8 + 8);
        goto LABEL_8;
      }
    }
    *a3 = 0;
    v19 = v20;
    v20 = 0;
    if (v19)
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)&v20, v19);
  }
}

void sub_1AF363B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

ktrace_time_ringbuffer *ktrace_time_ringbuffer_create(uint64_t a1)
{
  ktrace_time_ringbuffer *v2;

  v2 = (ktrace_time_ringbuffer *)operator new();
  ktrace_time_ringbuffer::ktrace_time_ringbuffer(v2, a1);
  return v2;
}

void sub_1AF363B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF45D4D0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t ktrace_time_ringbuffer_null()
{
  return 0;
}

uint64_t *ktrace_time_ringbuffer_destroy(uint64_t *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *result;
    *result = 0;
    if (v1)
      std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((uint64_t)result, v1);
    JUMPOUT(0x1AF45D4D0);
  }
  return result;
}

uint64_t ktrace_time_ringbuffer_tracing_started(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = mach_absolute_time();
    *(_QWORD *)(*(_QWORD *)v1 + 72) = result;
  }
  return result;
}

uint64_t *ktrace_time_ringbuffer_handle_tracepoint(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2)
      return (uint64_t *)ktrace::RingBufferImpl::handleTracepoint(*result, a2);
  }
  return result;
}

int *ktrace_time_ringbuffer_tracing_stopped(int *result, ktrace_file *a2)
{
  if (result)
    return ktrace::RingBufferImpl::handleCompletion(*(ktrace::RingBufferImpl **)result, a2);
  return result;
}

void ktrace_time_ringbuffer::ktrace_time_ringbuffer(ktrace_time_ringbuffer *this, uint64_t a2)
{
  ktrace::RingBufferImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = 0;
  v4 = (ktrace::RingBufferImpl *)operator new();
  ktrace::RingBufferImpl::RingBufferImpl(v4, a2);
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = v4;
  if (v5)
    std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((uint64_t)this, v5);
}

void sub_1AF363C9C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1AF45D4D0](v2, 0x1020C40FC637495);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((uint64_t)v1, v4);
  _Unwind_Resume(a1);
}

void std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = (_QWORD *)(a2 + 112);
    v3 = *(_QWORD *)(a2 + 112);
    *v2 = 0;
    if (v3)
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((uint64_t)v2, v3);
    JUMPOUT(0x1AF45D4D0);
  }
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(uint64_t a1)
{
  int v1;
  NSObject *v2;
  _QWORD block[5];

  if (!*(_DWORD *)(a1 + 44))
  {
    if ((v1 = *(_DWORD *)(a1 + 8), v1 < *(_DWORD *)(a1 + 32)) && *(_QWORD *)(a1 + 24) || *(_DWORD *)(a1 + 36) < v1)
    {
      v2 = *(NSObject **)(a1 + 120);
      if (v2)
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZN6ktrace10MemoryPoolINS_16RingBufferHeaderEE21checkPinnedThresholdsEv_block_invoke;
        block[3] = &__block_descriptor_tmp_7;
        block[4] = a1;
        dispatch_async(v2, block);
      }
    }
  }
}

uint64_t ___ZN6ktrace10MemoryPoolINS_16RingBufferHeaderEE21checkPinnedThresholdsEv_block_invoke(uint64_t a1)
{
  return ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory(*(int **)(a1 + 32));
}

uint64_t ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory(int *a1)
{
  pthread_mutex_t *v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = (pthread_mutex_t *)(a1 + 12);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 12));
  v3 = a1[2];
  v5 = a1[8];
  v4 = a1[9];
  if (v3 >= v5)
  {
    if (v4 >= v3)
      return pthread_mutex_unlock(v2);
    v6 = __OFADD__(v4, v5);
    v10 = v4 + v5;
    if (v10 < 0 != v6)
      ++v10;
    v8 = v3 - (v10 >> 1);
    v9 = a1 + 4;
  }
  else
  {
    v6 = __OFADD__(v4, v5);
    v7 = v4 + v5;
    if (v7 < 0 != v6)
      ++v7;
    v8 = (v7 >> 1) - v3;
    v9 = a1 + 6;
  }
  v11 = (_QWORD *)*v9;
  if (*v9)
  {
    if (v8 < 1)
      ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory();
    v12 = 1;
    v13 = (_QWORD *)*v9;
    if (v8 != 1)
    {
      while (1)
      {
        v14 = (_QWORD *)*v13;
        if (!*v13)
          break;
        ++v12;
        v13 = (_QWORD *)*v13;
        if (v8 == v12)
        {
          v13 = v14;
          v12 = v8;
          break;
        }
      }
    }
    v15 = (_QWORD *)*v13;
    if (v3 >= v5)
    {
      *((_QWORD *)a1 + 2) = v15;
      a1[2] = v3 - v12;
    }
    else
    {
      *((_QWORD *)a1 + 3) = v15;
    }
    *v13 = 0;
    a1[11] = 1;
    pthread_mutex_unlock(v2);
    v16 = v11;
    do
    {
      if (v3 >= v5)
        madvise(v16, *a1, 5);
      v16 = (_QWORD *)*v16;
    }
    while (v16);
    pthread_mutex_lock(v2);
    a1[11] = 0;
    if (v3 >= v5)
    {
      *v13 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = v11;
    }
    else
    {
      *v13 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v11;
      a1[2] += v12;
    }
  }
  return pthread_mutex_unlock(v2);
}

void std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  if (a2)
  {
    v3 = *(NSObject **)(a2 + 120);
    if (v3)
    {
      dispatch_sync(v3, &__block_literal_global_5);
      *(_QWORD *)(a2 + 120) = 0;
    }
    JUMPOUT(0x1AF45D4D0);
  }
}

_QWORD *ktrace_session_create_with_flags(char a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  CFSetCallBacks v9;
  CFSetCallBacks callBacks;
  size_t v11;
  int v12;

  v2 = malloc_type_malloc(0x340uLL, 0x10F00409744CDD0uLL);
  bzero(v2, 0x340uLL);
  v3 = kthmap_create();
  v2[37] = v3;
  if (v3)
  {
    kteventnames_init((uint64_t)(v2 + 45));
    v4 = malloc_type_calloc(0x400uLL, 8uLL, 0x2004093837F09uLL);
    v2[30] = v4;
    if (v4)
    {
      memset(&callBacks, 0, sizeof(callBacks));
      v2[69] = CFSetCreateMutable(0, 0, &callBacks);
      v2[73] = CFSetCreateMutable(0, 0, &callBacks);
      v9 = *(CFSetCallBacks *)byte_1E5F70A30;
      v2[71] = CFSetCreateMutable(0, 0, &v9);
      *((_WORD *)v2 + 112) &= 0xFFFCu;
      v2[38] = 0;
      v2[63] = -1;
      v2[102] = dispatch_group_create();
      *((_DWORD *)v2 + 206) = 0;
      *((_DWORD *)v2 + 36) = 25;
      *((_DWORD *)v2 + 38) = 5000;
      v12 = 0;
      v11 = 4;
      if (sysctlbyname("hw.logicalcpu_max", &v12, &v11, 0, 0) == -1)
        ktrace_remotetime_update_params_cold_1();
      if (!v12)
        ktrace_remotetime_update_params_cold_1();
      v2[42] = (uint64_t)v12 << 6;
      *v2 = 0;
      *((_DWORD *)v2 + 164) = 0;
      *(_QWORD *)((char *)v2 + 276) = 0;
      *((_DWORD *)v2 + 66) = 1;
      *((_DWORD *)v2 + 71) = a1 & 1;
      *((_DWORD *)v2 + 64) = a1 & 1;
      *((_BYTE *)v2 + 392) = v2[49] & 0xFD | (2 * (a1 & 1));
      *((_WORD *)v2 + 112) = v2[28] & 0xFDFF | ((a1 & 1) << 9);
      *((_DWORD *)v2 + 65) = a1 & 1;
      *((_DWORD *)v2 + 72) = a1 & 1;
      return v2;
    }
  }
  else
  {
    v4 = (void *)v2[30];
  }
  free(v4);
  v2[30] = 0;
  free((void *)v2[37]);
  v2[37] = 0;
  v5 = (const void *)v2[69];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)v2[73];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)v2[71];
  if (v7)
    CFRelease(v7);
  free(v2);
  return 0;
}

_QWORD *ktrace_session_create()
{
  return ktrace_session_create_with_flags(1);
}

uint64_t ___session_end_internal_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 600), "didEndTracingWithFile:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 648));
}

void _session_teardown(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v4;
  ktrace_file *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 4) != 4)
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  v2 = atomic_load((unsigned __int8 *)(a1 + 159));
  if ((v2 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 159));
    switch(*(_DWORD *)a1)
    {
      case 0:
        trace_remove_internal();
        break;
      case 1:
      case 3:
        break;
      case 2:
        trace_set_enable(1);
        break;
      default:
        _session_teardown_cold_2();
    }
    v3 = atomic_load((unsigned __int8 *)(a1 + 158));
    if ((v3 & 1) == 0)
    {
      v4 = *(_DWORD *)(a1 + 4);
      if ((v4 - 1) <= 1)
      {
        v5 = *(ktrace_file **)(a1 + 648);
        if (!v5)
          ktrace_remotetime_update_params_cold_1();
        if (v4 == 2)
          ktrace_time_ringbuffer_tracing_stopped(*(int **)(a1 + 640), v5);
        v6 = *(_QWORD *)(a1 + 672);
        if (v6)
          (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(_QWORD *)(a1 + 648));
        if ((*(_BYTE *)(a1 + 828) & 1) == 0)
        {
          v7 = *(_QWORD *)(a1 + 648);
          if (*(_DWORD *)(v7 + 16) != 4)
          {
            kteventnames_append(a1 + 360, v7);
            v15 = 0;
            if ((*(_WORD *)(a1 + 224) & 0x100) != 0)
              v8 = 1;
            else
              v8 = 3;
            if (*(_DWORD *)(a1 + 656) >= 2u)
              v9 = v8 | 4;
            else
              v9 = v8;
            ktrace_postprocess_file_internal(a1, *(_QWORD *)(a1 + 648), 0, v9, (uint64_t)&v15);
            if (*(_QWORD *)(a1 + 592))
              ktrace_client_get_subfile();
            if (v15)
              goto LABEL_31;
            v10 = ktrace_file_latest_timestamp(*(_QWORD *)(a1 + 648), &v15);
            if (v10)
            {
              *__error() = v10;
              v11 = *__error();
              ktrace_log_init();
              v12 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                _session_teardown_cold_4(v11, v12);
              *__error() = v11;
            }
            if (v15)
LABEL_31:
              ktrace_file_append_chunk(*(_QWORD *)(a1 + 648), 32775, 0, 1, (UInt8 *)&v15, 8);
          }
        }
        if (*(_QWORD *)(a1 + 592))
          ktrace_client_destroy();
        v13 = *(_QWORD *)(a1 + 648);
        if (v13)
        {
          v14 = ktrace_catalog_open(v13);
          objc_msgSend(*(id *)(a1 + 600), "willFinishWithCatalog:file:", v14, *(_QWORD *)(a1 + 648));
          if (v14)
            ktrace_catalog_close((uint64_t)v14);
        }
        else
        {
          objc_msgSend(*(id *)(a1 + 600), "willFinishWithCatalog:file:", 0, 0);
        }
        ktrace_file_close(*(_QWORD **)(a1 + 648));
        *(_QWORD *)(a1 + 648) = 0;
      }
    }
  }
}

void ___session_end_internal_block_invoke_13(uint64_t a1)
{
  _session_drain_finish(*(_QWORD *)(a1 + 32));
}

void *ktrace_set_cleanup_handler(uint64_t a1, void *aBlock)
{
  void *result;

  if (*(_QWORD *)(a1 + 688))
    ktrace_remotetime_update_params_cold_1();
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 688) = result;
  return result;
}

void ktrace_session_free(uint64_t a1)
{
  const void *v2;
  const void *v3;
  _QWORD *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  _QWORD *v15;
  KtraceSymbolicator *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  const void *v20;

  if ((*(_DWORD *)a1 | 2) == 2)
    _session_end_live(a1);
  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    _Block_release(v3);
  v4 = *(_QWORD **)(a1 + 608);
  if (v4 && (*(_WORD *)(a1 + 224) & 4) != 0)
    ktrace_file_close(v4);
  if (*(_QWORD *)(a1 + 592) && (*(_WORD *)(a1 + 224) & 8) != 0)
    ktrace_client_destroy();
  ktrace_callback_list_reset((int *)(a1 + 24));
  ktrace_callback_list_reset((int *)(a1 + 40));
  ktrace_callback_list_reset((int *)(a1 + 112));
  ktrace_callback_list_reset((int *)(a1 + 96));
  kthmap_destroy(*(CFTypeRef **)(a1 + 296));
  ktrace_machine_destroy(*(_QWORD *)(a1 + 344));
  vnode_path_map_destroy(*(CFDictionaryRef **)(a1 + 400));
  thread_cputime_map_destroy(*(const void ***)(a1 + 408));
  clear_events(*(_QWORD *)(a1 + 240), (_QWORD *)(a1 + 248));
  free(*(void **)(a1 + 240));
  v5 = *(const void **)(a1 + 552);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 584);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 568);
  if (v7)
    CFRelease(v7);
  kteventnames_destroy((CFTypeRef *)(a1 + 360));
  if (*(_QWORD *)(a1 + 176))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 176));
  }
  if (*(_QWORD *)(a1 + 184))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }
  if (*(_QWORD *)(a1 + 200))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 200));
  }
  if (*(_QWORD *)(a1 + 192))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 192));
  }
  if (*(_QWORD *)(a1 + 208))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 208));
  }
  if (*(_QWORD *)(a1 + 216))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 216));
  }
  v8 = *(const void **)(a1 + 664);
  if (v8)
    _Block_release(v8);
  v9 = *(const void **)(a1 + 672);
  if (v9)
    _Block_release(v9);
  v10 = *(const void **)(a1 + 88);
  if (v10)
    _Block_release(v10);
  v11 = *(const void **)(a1 + 72);
  if (v11)
    _Block_release(v11);
  if (*(_QWORD *)(a1 + 416))
    MEMORY[0x1AF45D980]();
  v12 = *(const void **)(a1 + 624);
  if (v12)
    ktrace_stream_destroy(v12);
  v13 = *(const void **)(a1 + 616);
  if (v13)
    ktrace_stream_destroy(v13);
  v14 = *(const void **)(a1 + 304);
  if (v14)
    CFRelease(v14);
  if (!*(_DWORD *)a1)
  {
    v15 = *(_QWORD **)(a1 + 320);
    if (v15)
    {
      if (v15[13])
        ktrace_remotetime_update_params_cold_1();
      ktrace_chunk_destroy(v15);
    }
  }
  v16 = *(KtraceSymbolicator **)(a1 + 312);
  if (v16)
    ktrace_symbolicator_destroy(v16);
  v17 = *(uint64_t **)(a1 + 640);
  if (v17)
    ktrace_time_ringbuffer_destroy(v17);
  v18 = *(void **)(a1 + 352);
  if (v18)
    ktrace_cpus_destroy(v18);
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 696));
  free(*(void **)(a1 + 704));
  dispatch_release(*(dispatch_object_t *)(a1 + 816));
  v19 = *(_QWORD *)(a1 + 688);
  if (v19)
  {
    (*(void (**)(void))(v19 + 16))();
    _Block_release(*(const void **)(a1 + 688));
  }
  v20 = *(const void **)(a1 + 680);
  if (v20)
    _Block_release(v20);

  free((void *)a1);
}

void ktrace_session_destroy(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  _session_end_internal(a1, 1, 3);
  v2 = *(NSObject **)(a1 + 128);
  if (v2)
  {
    dispatch_release(v2);
    v3 = *(NSObject **)(a1 + 136);
    if (v3)
      dispatch_release(v3);
  }
  else
  {
    ktrace_session_free(a1);
  }
}

uint64_t ktrace_start(unint64_t a1, NSObject *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t started;
  NSObject *v24;
  _QWORD v26[5];
  char __str[8];
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = (unsigned __int8 *)(a1 + 156);
  v4 = atomic_load(v3);
  if ((v4 & 1) != 0)
    ktrace_start_cold_12(v3);
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_start_cold_11();
  v6 = *(_DWORD *)(a1 + 4);
  if ((v6 - 1) <= 1)
  {
    if (*(_DWORD *)a1)
      goto LABEL_8;
    objc_msgSend(*(id *)(a1 + 600), "configureWithSession:", a1);
    v6 = *(_DWORD *)(a1 + 4);
  }
  if (!v6 && *(int *)(a1 + 112) >= 1 && *(_DWORD *)a1 != 1)
    return 22;
LABEL_8:
  ktrace_compute_filter(a1);
  if (*(_DWORD *)a1 == 4)
  {
    v8 = *(_QWORD *)(a1 + 608);
    if (!v8)
      ktrace_remotetime_update_params_cold_1();
    *(_QWORD *)__str = 0;
    v28 = __str;
    v29 = 0x2020000000;
    v30 = 0;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __ktrace_start_block_invoke;
    v26[3] = &unk_1E5F70A10;
    v26[4] = __str;
    v7 = ktrace_file_iterate(v8, 0, (uint64_t)v26);
    if (!(_DWORD)v7)
      v7 = v28[24] == 0;
    _Block_object_dispose(__str, 8);
  }
  else if (*(_DWORD *)a1 == 3)
  {
    print_filter(*(_QWORD *)(a1 + 8));
    return 0;
  }
  else
  {
    snprintf(__str, 0x80uLL, "com.apple.libktrace.collection.%p", (const void *)a1);
    if (*(_DWORD *)(a1 + 148))
    {
      *(_QWORD *)(a1 + 136) = dispatch_workloop_create_inactive(__str);
      dispatch_workloop_set_scheduler_priority();
      dispatch_activate(*(dispatch_object_t *)(a1 + 136));
    }
    v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v10 = dispatch_queue_attr_make_with_qos_class(v9, (dispatch_qos_class_t)*(_DWORD *)(a1 + 144), -1);
    v11 = dispatch_queue_create_with_target_V2(__str, v10, *(dispatch_queue_t *)(a1 + 136));
    *(_QWORD *)(a1 + 128) = v11;
    if (!v11)
      ktrace_remotetime_update_params_cold_1();
    dispatch_set_context(v11, (void *)a1);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 128), (dispatch_function_t)collection_queue_finalizer);
    if (!*(_QWORD *)(a1 + 128))
      ktrace_remotetime_update_params_cold_1();
    v12 = *(_DWORD *)(a1 + 284);
    kteventnames_freeze((uint64_t *)(a1 + 360));
    v13 = *(_DWORD *)(a1 + 4);
    if ((v13 - 1) >= 2)
    {
      if (v13)
        ktrace_start_cold_4();
      v14 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)a1 == 1)
      {
        if (!v14 && !*(_QWORD *)(a1 + 120))
          ktrace_remotetime_update_params_cold_1();
      }
      else if (!v14)
      {
        ktrace_remotetime_update_params_cold_1();
      }
      snprintf(__str, 0x80uLL, "com.apple.libktrace.processing.%p", (const void *)a1);
      v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v16 = dispatch_queue_create_with_target_V2(__str, v15, a2);
      *(_QWORD *)(a1 + 232) = v16;
      dispatch_set_context(v16, (void *)a1);
      dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 232), (dispatch_function_t)processing_queue_finalizer);
      ktrace_callback_list_sort((int *)(a1 + 24));
      if (*(_DWORD *)a1 == 1)
        ktrace_callback_list_sort((int *)(a1 + 112));
    }
    else
    {
      if (!*(_QWORD *)(a1 + 648))
        ktrace_remotetime_update_params_cold_1();
      if ((*(_DWORD *)a1 | 2) != 2)
        ktrace_start_cold_9();
    }
    *(_WORD *)(a1 + 224) |= 1u;
    v17 = *(NSObject **)(a1 + 176);
    if (v17)
      dispatch_activate(v17);
    v18 = *(NSObject **)(a1 + 184);
    if (v18)
      dispatch_activate(v18);
    v19 = *(NSObject **)(a1 + 200);
    if (v19)
      dispatch_activate(v19);
    v20 = *(NSObject **)(a1 + 192);
    if (v20)
      dispatch_activate(v20);
    v21 = *(NSObject **)(a1 + 208);
    if (v21)
      dispatch_activate(v21);
    v22 = *(NSObject **)(a1 + 216);
    if (v22)
      dispatch_activate(v22);
    v7 = 0;
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 2:
        started = _session_start_live(a1);
        goto LABEL_51;
      case 1:
        ktrace_log_init();
        v24 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__str = 0;
          _os_log_impl(&dword_1AF33A000, v24, OS_LOG_TYPE_INFO, "starting to trace from file", (uint8_t *)__str, 2u);
        }
        started = _session_start_file(a1, v12 != 0);
LABEL_51:
        v7 = started;
        if ((_DWORD)started)
          *(_WORD *)(a1 + 224) &= ~1u;
        break;
      case 4:
        return v7;
      default:
        ktrace_start_cold_6();
    }
  }
  return v7;
}

void sub_1AF364ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void print_filter(uint64_t a1)
{
  char *v2;
  char *v3;

  printf("Filter: ");
  if (a1)
  {
    v2 = kdebug_alloc_filter_description(a1);
    if (!v2)
      ktrace_remotetime_update_params_cold_1();
    v3 = v2;
    puts(v2);
    free(v3);
  }
  else
  {
    puts("ALL");
  }
}

BOOL __ktrace_start_block_invoke(uint64_t a1, uint64_t *a2)
{
  void **v3;
  void **v4;
  uint64_t typefilter;

  v3 = (void **)ktrace_config_create(a2);
  v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    typefilter = ktrace_config_kdebug_get_typefilter((uint64_t)v3);
    print_filter(typefilter);
    ktrace_config_destroy(v4);
  }
  return v4 == 0;
}

void ktrace_abort(uint64_t a1)
{
  _session_end_internal(a1, 5, 7);
}

void collection_queue_finalizer(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v1 = *(NSObject **)(a1 + 232);
  if (v1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __collection_queue_finalizer_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async(v1, block);
  }
  else
  {
    ktrace_session_free(a1);
  }
}

void __collection_queue_finalizer_block_invoke(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 232));
}

void processing_queue_finalizer(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  ktrace_session_free(a1);
}

uint64_t ktrace_convert_timestamp_to_nanoseconds(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!*(_DWORD *)(a1 + 452))
    return 45;
  v4 = kttimesync_ns_from_timestamp(a1 + 432, a2);
  result = 0;
  *a3 = v4;
  return result;
}

uint64_t ktrace_convert_timestamp_to_walltime(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_BYTE *)(a1 + 480) & 2) == 0)
    return 45;
  v5 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  result = 0;
  *a3 = v5;
  a3[1] = v6;
  return result;
}

uint64_t ktrace_convert_absolute_to_walltime(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  char v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v5 = *(_BYTE *)(a1 + 480);
  if ((v5 & 8) != 0)
  {
    a2 = kttimesync_cont_from_abs(a1 + 432, a2);
    v5 = *(_BYTE *)(a1 + 480);
  }
  if ((v5 & 2) == 0)
    return 45;
  v7 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  result = 0;
  *a3 = v7;
  a3[1] = v8;
  return result;
}

uint64_t ktrace_get_continuous_from_absolute(uint64_t a1, uint64_t a2)
{
  return kttimesync_cont_from_abs(a1 + 432, a2);
}

uint64_t ktrace_convert_continuous_to_walltime(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  char v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v5 = *(_BYTE *)(a1 + 480);
  if ((v5 & 8) == 0)
  {
    a2 = kttimesync_abs_from_cont(a1 + 432, a2);
    v5 = *(_BYTE *)(a1 + 480);
  }
  if ((v5 & 2) == 0)
    return 45;
  v7 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  result = 0;
  *a3 = v7;
  a3[1] = v8;
  return result;
}

unint64_t ktrace_get_absolute_from_continuous(uint64_t a1, unint64_t a2)
{
  return kttimesync_abs_from_cont(a1 + 432, a2);
}

unint64_t ktrace_get_current_timestamp(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_WORD *)(a1 + 224);
  v3 = a1 + 432;
  v4 = *(_QWORD *)(a1 + 496);
  if ((v2 & 0x80) != 0)
    return kttimesync_cont_from_timestamp(v3, v4);
  else
    return kttimesync_abs_from_timestamp(v3, v4);
}

uint64_t ktrace_set_walltimes_enabled(uint64_t result, int a2)
{
  if ((*(_WORD *)(result + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  *(_DWORD *)(result + 264) = a2;
  return result;
}

uint64_t ktrace_get_walltimes_enabled(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

void _session_convert_walltime(uint64_t a1, unint64_t a2)
{
  kttimesync_wall_from_timestamp(a1 + 432, a2);
  timespec_to_timeval();
}

uint64_t ktrace_get_continuous_from_timestamp(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0)
    return a2;
  else
    return kttimesync_cont_from_timestamp(a1 + 432, a2);
}

unint64_t ktrace_get_absolute_from_timestamp(uint64_t a1, unint64_t a2)
{
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0)
    return kttimesync_abs_from_timestamp(a1 + 432, a2);
  else
    return a2;
}

unint64_t ktrace_get_ns_from_timestamp(uint64_t a1, uint64_t a2)
{
  return kttimesync_ns_from_timestamp(a1 + 432, a2);
}

unint64_t ktrace_get_earliest_timestamp(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_WORD *)(a1 + 224);
  v3 = a1 + 432;
  v4 = *(_QWORD *)(a1 + 504);
  if ((v2 & 0x80) != 0)
    return kttimesync_cont_from_timestamp(v3, v4);
  else
    return kttimesync_abs_from_timestamp(v3, v4);
}

uint64_t ktrace_set_continuous_timestamps(uint64_t result, int a2)
{
  __int16 v2;
  __int16 v3;

  if (!result)
    ktrace_remotetime_update_params_cold_1();
  v2 = *(_WORD *)(result + 224);
  if ((v2 & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  if (a2)
    v3 = 128;
  else
    v3 = 0;
  *(_WORD *)(result + 224) = v2 & 0xFF7F | v3;
  return result;
}

uint64_t ktrace_set_callbacks_after_elapsed(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 512) = a2;
  return result;
}

uint64_t tracepoint_timestamp(uint64_t a1, int a2)
{
  if (a2)
    return *(_QWORD *)a1;
  else
    return *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFLL;
}

uint64_t ktrace_file_append_ioreg(uint64_t a1)
{
  __CFDictionary *Mutable;
  const __CFData *Data;
  UInt8 *BytePtr;
  CFIndex Length;
  _QWORD *appended;
  int v8;
  NSObject *v9;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  ktrace_merge_ioreg_service(Mutable, "IOMobileFramebuffer");
  ktrace_merge_ioreg_service(Mutable, "AGXAccelerator");
  if (!Mutable)
    return 1;
  Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(Mutable);
  if (Data)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
    Length = CFDataGetLength(Data);
    appended = ktrace_file_append_chunk(a1, 32776, 0, 0, BytePtr, Length);
    CFRelease(Data);
    return appended != 0;
  }
  else
  {
    v8 = *__error();
    ktrace_log_init();
    v9 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_file_append_ioreg_cold_1(v8, v9);
    *__error() = v8;
    return 22;
  }
}

void ktrace_merge_ioreg_service(__CFDictionary *a1, char *name)
{
  const __CFDictionary *v4;
  __CFArray *v5;
  __CFArray *Mutable;
  io_registry_entry_t v7;
  CFStringRef v8;
  CFStringRef v9;
  void *value;
  io_iterator_t existing;

  existing = 0;
  v4 = IOServiceMatching(name);
  if (IOServiceGetMatchingServices(0, v4, &existing))
  {
    v5 = 0;
LABEL_8:
    Mutable = 0;
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    while (1)
    {
      v7 = IOIteratorNext(existing);
      if (!v7)
      {
        v5 = Mutable;
        goto LABEL_8;
      }
      value = 0;
      if (IORegistryEntryCreateCFProperties(v7, (CFMutableDictionaryRef *)&value, 0, 0))
        break;
      CFArrayAppendValue(Mutable, value);
      CFRelease(value);
    }
    v5 = 0;
  }
  if (existing)
    IOObjectRelease(existing);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
  {
    v8 = CFStringCreateWithCString(0, name, 0x8000100u);
    if (!v8)
      ktrace_postprocess_file_internal_cold_1();
    v9 = v8;
    CFAutorelease(v8);
    CFDictionarySetValue(a1, v9, v5);
    CFRelease(v5);
  }
}

os_log_t __ktrace_log_init_block_invoke()
{
  os_log_t result;

  ktrace_log = (uint64_t)os_log_create("com.apple.libktrace", "ktrace");
  result = os_log_create("com.apple.libktrace", "ktrace_file");
  ktrace_file_log = (uint64_t)result;
  return result;
}

uint64_t ktrace_machine_create_current()
{
  _QWORD *v0;
  uint64_t v1;
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  const __CFDictionary *v9;
  int v10;
  int v11;
  _QWORD *v13;
  void *v14;
  void *v15;
  const __CFDictionary *v16;
  uint64_t MatchingService;
  int v18;
  io_registry_entry_t v19;
  unsigned int v20;
  unsigned int v21;
  const __CFAllocator *v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int has_internal_content;
  int v41;
  int v42;
  int v43;
  int v44;
  NSObject *v45;
  timespec v46;
  CFIndex v47;
  unsigned int v48;
  unsigned int v49;
  uint8_t v50;
  _BYTE v51[11];
  unsigned int v52;
  uint64_t v53;
  io_iterator_t iterator;
  uint8_t buf[8];
  __int16 v56;
  int v57;
  uuid_t uu;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v46 = (timespec)xmmword_1AF3E9C80;
  v0 = malloc_type_calloc(1uLL, 0xE0uLL, 0x107004026BB74DFuLL);
  v1 = (uint64_t)v0;
  if (v0)
  {
    memset(uu, 0, sizeof(uu));
    v0[2] = -1;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v4 = 12;
LABEL_46:
      ktrace_machine_destroy(v1);
      v1 = 0;
      *__error() = v4;
      return v1;
    }
    v3 = Mutable;
    *(_QWORD *)buf = 0x400000001;
    LODWORD(v47) = 0;
    iterator = 0;
    v53 = 4;
    v4 = sysctl_string(Mutable, CFSTR("kern_version"), (int *)buf, 2u, (_QWORD *)(v1 + 40));
    if (v4)
      goto LABEL_41;
    v4 = sysctlbyname_string(v3, CFSTR("boot_args"), "kern.bootargs", (char **)(v1 + 48), 0);
    if (v4)
      goto LABEL_41;
    *(_QWORD *)buf = 0x1800000006;
    v4 = sysctl_uint64(v3, CFSTR("hw_memsize"), (int *)buf, 2u, (void *)(v1 + 8));
    if (v4)
      goto LABEL_41;
    *(_QWORD *)buf = 0x700000006;
    v4 = sysctl_uint(v3, CFSTR("hw_pagesize"), (int *)buf, 2u, (void *)(v1 + 168));
    if (v4)
      goto LABEL_41;
    v4 = sysctlbyname_uint(v3, CFSTR("vm_pagesize"), "vm.pagesize", (void *)(v1 + 172));
    if (v4)
      goto LABEL_41;
    v4 = sysctlbyname_int(v3, CFSTR("cpu_type"), "hw.cputype", (void *)(v1 + 192));
    if (v4)
      goto LABEL_41;
    v4 = sysctlbyname_int(v3, CFSTR("cpu_subtype"), "hw.cpusubtype", (void *)(v1 + 196));
    if (v4)
      goto LABEL_41;
    v4 = sysctlbyname_int(v3, CFSTR("cpu_family"), "hw.cpufamily", (void *)(v1 + 200));
    if (v4)
      goto LABEL_41;
    *(_QWORD *)buf = 0x200000006;
    v4 = sysctl_string(v3, CFSTR("hw_model"), (int *)buf, 2u, (_QWORD *)(v1 + 88));
    if (v4)
      goto LABEL_41;
    *(_QWORD *)buf = 0x1B00000006;
    v4 = sysctl_string(v3, CFSTR("hw_product"), (int *)buf, 2u, (_QWORD *)(v1 + 96));
    if (v4)
      goto LABEL_41;
    v4 = sysctlbyname_int(v3, CFSTR("active_cpus"), "hw.activecpu", &v47);
    if (v4)
      goto LABEL_41;
    if ((v47 & 0x80000000) != 0)
      goto LABEL_40;
    *(_DWORD *)(v1 + 176) = v47;
    v4 = sysctlbyname_int(v3, CFSTR("max_cpus"), "hw.logicalcpu_max", &v47);
    if (v4)
      goto LABEL_41;
    if ((v47 & 0x80000000) != 0)
    {
LABEL_40:
      v4 = 22;
    }
    else
    {
      *(_DWORD *)(v1 + 180) = v47;
      v4 = sysctlbyname_string(v3, CFSTR("boot_uuid"), "kern.bootsessionuuid", (char **)(v1 + 120), 0);
      if (!v4)
      {
        v4 = sysctlbyname_uint64(v3, CFSTR("min_kern_vaddr"), "vm.vm_min_kernel_address", (void *)(v1 + 16));
        if (!v4)
        {
          v4 = sysctlbyname_uint64(v3, CFSTR("max_kern_vaddr"), "vm.vm_max_kernel_address", (void *)(v1 + 24));
          if (!v4)
          {
            v5 = sysctlbyname("hw.cputhreadtype", &iterator, (size_t *)&v53, 0, 0) || (int)iterator <= 0;
            v6 = !v5;
            v4 = dict_set_BOOL(v3, CFSTR("hyperthreading"), v6);
            if (!v4)
            {
              *(_BYTE *)(v1 + 207) = v6;
              *(_QWORD *)v1 |= 2uLL;
              v4 = sysctlbyname_uint32(v3, CFSTR("physical_cpus"), "hw.physicalcpu_max", (void *)(v1 + 188));
              if (!v4)
              {
                v4 = sysctlbyname_uint32(v3, CFSTR("vm_pages"), "vm.pages", (void *)(v1 + 184));
                if (!v4)
                {
                  v53 = 4;
                  v7 = sysctlbyname("kern.thread_groups_supported", &iterator, (size_t *)&v53, 0, 0)
                    || (int)iterator <= 0;
                  v8 = !v7;
                  v4 = dict_set_BOOL(v3, CFSTR("thread_groups"), v8);
                  if (!v4)
                  {
                    *(_BYTE *)(v1 + 208) = v8;
                    *(_QWORD *)v1 |= 4uLL;
                    v9 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
                    if (dict_string(v9, (void *)*MEMORY[0x1E0C9ABB0], v3, CFSTR("os_version"), (char **)(v1 + 64)))
                    {
                      v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                        ktrace_machine_create_current_cold_10();
                    }
                    else if (dict_string(v9, (void *)*MEMORY[0x1E0C9AB98], v3, CFSTR("os_name"), (char **)(v1 + 56)))
                    {
                      v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                        ktrace_machine_create_current_cold_9();
                    }
                    else
                    {
                      if (!dict_string(v9, (void *)*MEMORY[0x1E0C9AB90], v3, CFSTR("os_build"), (char **)(v1 + 80)))
                      {
                        dict_string(v9, (void *)*MEMORY[0x1E0C9ABA8], v3, CFSTR("os_version_extra"), (char **)(v1 + 72));
                        if (!v9)
                          goto LABEL_57;
                        goto LABEL_56;
                      }
                      v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
                        ktrace_machine_create_current_cold_8();
                    }
                    *__error() = v10;
                    if (!v9)
                    {
LABEL_57:
                      iterator = 0;
                      v13 = malloc_type_calloc(*(unsigned int *)(v1 + 180), 8uLL, 0x100004000313F17uLL);
                      if (!v13)
                        goto LABEL_109;
                      v14 = malloc_type_calloc(*(unsigned int *)(v1 + 180), 4uLL, 0x100004052888210uLL);
                      *(_QWORD *)(v1 + 136) = v14;
                      if (!v14)
                        goto LABEL_109;
                      v15 = malloc_type_calloc(*(unsigned int *)(v1 + 180), 4uLL, 0x100004052888210uLL);
                      *(_QWORD *)(v1 + 152) = v15;
                      if (!v15)
                        goto LABEL_109;
                      v16 = IOServiceNameMatching("cpus");
                      MatchingService = IOServiceGetMatchingService(0, v16);
                      if (!(_DWORD)MatchingService
                        || MEMORY[0x1AF45D278](MatchingService, "IODeviceTree", &iterator))
                      {
                        v18 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          ktrace_machine_create_current_cold_6();
                        *__error() = v18;
                        v4 = 22;
                        goto LABEL_112;
                      }
                      v19 = IOIteratorNext(iterator);
                      if (v19)
                      {
                        v20 = 0;
                        v21 = 0;
                        v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                        while (1)
                        {
                          v53 = 0;
                          if (!IORegistryEntryCreateCFProperties(v19, (CFMutableDictionaryRef *)&v53, v22, 0))
                            break;
LABEL_93:
                          v19 = IOIteratorNext(iterator);
                          if (!v19)
                            goto LABEL_98;
                        }
                        if (!v53)
                        {
                          *__error() = 0;
                          v24 = *__error();
                          ktrace_log_init();
                          v25 = ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 67109120;
                            *(_DWORD *)&buf[4] = v24;
                            _os_log_error_impl(&dword_1AF33A000, v25, OS_LOG_TYPE_ERROR, "CPU properties are NULL on IOKit success (%{errno}d)", buf, 8u);
                          }
                          *__error() = v24;
                          goto LABEL_93;
                        }
                        v52 = 0;
                        if (dict_uint32((const __CFDictionary *)v53, CFSTR("logical-cpu-id"), &v52))
                        {
                          ktrace_log_init();
                          v23 = ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
                            ktrace_machine_create_current_cold_7(&v50, v51, v23);
                          goto LABEL_92;
                        }
                        if (v52 >= *(_DWORD *)(v1 + 180))
                          goto LABEL_92;
                        v49 = 0;
                        v26 = dict_uint32((const __CFDictionary *)v53, CFSTR("logical-cluster-id"), &v49);
                        if (v26)
                        {
                          *__error() = v26;
                          v44 = *__error();
                          ktrace_log_init();
                          v45 = ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 67109376;
                            *(_DWORD *)&buf[4] = v52;
                            v56 = 1024;
                            v57 = v44;
                            _os_log_error_impl(&dword_1AF33A000, v45, OS_LOG_TYPE_ERROR, "failed to get logical-cluster-id property for CPU %u (%{errno}d)", buf, 0xEu);
                          }
                          *__error() = v44;
                          v4 = *__error();
                          goto LABEL_112;
                        }
                        *(_DWORD *)(*(_QWORD *)(v1 + 136) + 4 * v52) = v49;
                        if (v20 <= v49)
                          v20 = v49;
                        v48 = 0;
                        if (dict_uint32((const __CFDictionary *)v53, CFSTR("die-id"), &v48))
                        {
                          v27 = 0;
                          v48 = 0;
                        }
                        else
                        {
                          v27 = v48;
                        }
                        *(_DWORD *)(*(_QWORD *)(v1 + 152) + 4 * v52) = v27;
                        if (v21 <= v48)
                          v21 = v48;
                        *(_QWORD *)buf = 0;
                        v47 = 0;
                        v28 = dict_data((const __CFDictionary *)v53, CFSTR("cluster-type"), (UInt8 **)buf, &v47);
                        v29 = v52;
                        v13[v52] = 0;
                        if (v28)
                          goto LABEL_92;
                        v30 = *(void **)buf;
                        if (v47)
                        {
                          v31 = **(_BYTE **)buf;
                          if (v31 == 80)
                          {
                            v32 = 2;
                            goto LABEL_90;
                          }
                          if (v31 == 69)
                          {
                            v32 = 1;
LABEL_90:
                            v13[v29] = v32;
                          }
                        }
                        free(v30);
LABEL_92:
                        CFRelease((CFTypeRef)v53);
                        goto LABEL_93;
                      }
                      v21 = 0;
                      v20 = 0;
LABEL_98:
                      *(_DWORD *)(v1 + 160) = v20 + 1;
                      v4 = dict_set_uint32(v3, CFSTR("max_clusters"), v20 + 1);
                      if (!v4)
                      {
                        v33 = (char *)malloc_type_calloc(*(unsigned int *)(v1 + 160), 8uLL, 0x100004000313F17uLL);
                        *(_QWORD *)(v1 + 144) = v33;
                        if (v33)
                        {
                          v34 = *(unsigned int *)(v1 + 180);
                          if ((_DWORD)v34)
                          {
                            v35 = *(unsigned int **)(v1 + 136);
                            v36 = v13;
                            do
                            {
                              v38 = *v35++;
                              v37 = v38;
                              if (!*(_QWORD *)&v33[8 * v38])
                                *(_QWORD *)&v33[8 * v37] = *v36;
                              ++v36;
                              --v34;
                            }
                            while (v34);
                          }
                          v4 = dict_set_uint64_arr(v3, CFSTR("cluster_flags"), v33, *(unsigned int *)(v1 + 160));
                          if (!v4)
                          {
                            v4 = dict_set_uint32_arr(v3, CFSTR("cluster_by_cpu"), *(char **)(v1 + 136), *(unsigned int *)(v1 + 180));
                            if (!v4)
                            {
                              *(_DWORD *)(v1 + 164) = v21 + 1;
                              v4 = dict_set_uint32(v3, CFSTR("max_dies"), v21 + 1);
                              if (!v4)
                                v4 = dict_set_uint32_arr(v3, CFSTR("die_by_cpu"), *(char **)(v1 + 152), *(unsigned int *)(v1 + 180));
                            }
                          }
                          goto LABEL_112;
                        }
LABEL_109:
                        v39 = *__error();
                        if (v39)
                          v4 = v39;
                        else
                          v4 = 12;
                      }
LABEL_112:
                      if (iterator)
                        IOObjectRelease(iterator);
                      free(v13);
                      if (v4)
                      {
                        *__error() = v4;
                        v11 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          ktrace_machine_create_current_cold_5();
                      }
                      else
                      {
                        has_internal_content = os_variant_has_internal_content();
                        v41 = dict_set_BOOL(v3, CFSTR("apple_internal"), has_internal_content);
                        v42 = dict_set_BOOL(v3, CFSTR("internal_content"), has_internal_content);
                        if (!(v42 | v41))
                        {
                          *(_BYTE *)(v1 + 205) = has_internal_content;
                          *(_BYTE *)(v1 + 206) = has_internal_content;
                          *(_QWORD *)v1 |= 1uLL;
                          if (!gethostuuid(uu, &v46))
                          {
                            if (uuid_is_null(uu))
                            {
                              v11 = *__error();
                              ktrace_log_init();
                              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                                ktrace_machine_create_current_cold_3();
                              v4 = 22;
                              goto LABEL_43;
                            }
                            uuid_unparse(uu, (char *)buf);
                            v4 = dict_set_string(v3, CFSTR("device_uuid"), (char *)buf);
                            if (v4)
                              goto LABEL_44;
                            *(_QWORD *)(v1 + 128) = strdup((const char *)buf);
                          }
                          ktrace_machine_fill_name(v1, v3);
                          ktrace_machine_fill_volume_size(v1, v3);
                          *(_BYTE *)(v1 + 204) = current_system_is_64_bit();
                          *(_QWORD *)(v1 + 216) = v3;
                          return v1;
                        }
                        v43 = v42 | v41;
                        v11 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          ktrace_machine_create_current_cold_4();
                        v4 = v43;
                      }
LABEL_43:
                      *__error() = v11;
LABEL_44:
                      if (*(_QWORD *)(v1 + 216))
                        ktrace_remotetime_update_params_cold_1();
                      CFRelease(v3);
                      goto LABEL_46;
                    }
LABEL_56:
                    CFRelease(v9);
                    goto LABEL_57;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    *__error() = v4;
    v11 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_create_current_cold_2();
    goto LABEL_43;
  }
  return v1;
}

void ktrace_machine_fill_name(uint64_t a1, __CFDictionary *a2)
{
  __SecTask *v4;
  CFTypeRef v5;
  CFTypeID v6;
  int Value;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  CFErrorRef error;

  v4 = SecTaskCreateFromSelf(0);
  error = 0;
  v5 = SecTaskCopyValueForEntitlement(v4, CFSTR("com.apple.developer.device-information.user-assigned-device-name"), &error);
  CFRelease(v4);
  if (v5)
  {
    v6 = CFGetTypeID(v5);
    if (v6 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue((CFBooleanRef)v5);
      CFRelease(v5);
      if (Value)
      {
        v8 = (const __CFString *)MGCopyAnswer();
        if (v8)
        {
          v9 = v8;
          dict_set_cfstring(a2, CFSTR("name"), v8, (char **)(a1 + 104));
          CFRelease(v9);
        }
        return;
      }
    }
    else
    {
      CFRelease(v5);
    }
    ktrace_log_init();
    v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      ktrace_machine_fill_name_cold_2(v12, v13, v14);
  }
  else
  {
    v10 = *__error();
    ktrace_log_init();
    v11 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_fill_name_cold_1(&error, v10, v11);
    *__error() = v10;
  }
}

_DWORD *ktrace_machine_fill_volume_size(uint64_t a1, __CFDictionary *a2)
{
  int v4;
  uint64_t v5;
  _DWORD *result;
  statfs v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(&v7, 0, 512);
  if (statfs("/", &v7))
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_fill_volume_size_cold_3();
LABEL_10:
    result = __error();
    *result = v4;
    return result;
  }
  if (!is_mul_ok(v7.f_bsize, v7.f_blocks))
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_fill_volume_size_cold_1();
    goto LABEL_10;
  }
  v5 = v7.f_bsize * v7.f_blocks;
  result = (_DWORD *)dict_set_uint64(a2, CFSTR("root_vol_size"), v5);
  if ((_DWORD)result)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_fill_volume_size_cold_2();
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void ktrace_machine_destroy(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 56));
    free(*(void **)(a1 + 64));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 80));
    free(*(void **)(a1 + 88));
    free(*(void **)(a1 + 96));
    free(*(void **)(a1 + 104));
    free(*(void **)(a1 + 112));
    free(*(void **)(a1 + 120));
    free(*(void **)(a1 + 128));
    free(*(void **)(a1 + 144));
    free(*(void **)(a1 + 136));
    free(*(void **)(a1 + 152));
    v2 = *(const void **)(a1 + 216);
    if (v2)
      CFRelease(v2);
    free((void *)a1);
  }
}

uint64_t ktrace_machine_create(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  const UInt8 *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  const __CFDictionary *dict;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  UInt8 *v16;
  unint64_t v17;
  _QWORD *v18;
  const __CFDictionary *v19;
  const char *v20;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD v27[5];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!*a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = ktrace_chunk_tag((uint64_t)a1);
  if (v2 != 20995)
  {
    v12 = v2;
    v3 = 0;
    v5 = 0;
    v7 = 0;
    v13 = a1;
LABEL_9:
    if (v12 != 35840)
      goto LABEL_36;
    if (ktrace_chunk_version_major((uint64_t)v13) > 1)
    {
      v11 = 0;
      dict = 0;
      v9 = 45;
      if (v7)
        goto LABEL_37;
LABEL_38:
      if (!v5)
      {
        if (!v9)
          return v11;
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    v14 = ktrace_chunk_version_minor((uint64_t)v13);
    v15 = ktrace_chunk_size((uint64_t)v13);
    v16 = (UInt8 *)ktrace_chunk_map_data(v13, 0, v15);
    if (!v16)
    {
LABEL_36:
      v11 = 0;
      dict = 0;
      v9 = 0;
      if (!v7)
        goto LABEL_38;
      goto LABEL_37;
    }
    v17 = (unint64_t)v16;
    dict = (const __CFDictionary *)create_dict(v16, v15);
    if (!dict)
    {
      v9 = 0;
      v11 = 0;
      goto LABEL_80;
    }
    v18 = malloc_type_calloc(1uLL, 0xE0uLL, 0x107004026BB74DFuLL);
    v11 = (uint64_t)v18;
    if (!v18)
    {
      v9 = 12;
      goto LABEL_80;
    }
    v26 = v14;
    v18[2] = -1;
    *((_BYTE *)v18 + 204) = ktrace_file_is_64_bit(*v13);
    *(_QWORD *)(v11 + 216) = dict;
    if (!dict_string(dict, CFSTR("kern_version"), 0, 0, (char **)(v11 + 40))
      && !dict_string(dict, CFSTR("boot_args"), 0, 0, (char **)(v11 + 48))
      && !dict_uint64(dict, CFSTR("hw_memsize"), (void *)(v11 + 8))
      && !dict_uint32(dict, CFSTR("hw_pagesize"), (void *)(v11 + 168))
      && !dict_uint32(dict, CFSTR("vm_pagesize"), (void *)(v11 + 172))
      && !dict_string(dict, CFSTR("os_name"), 0, 0, (char **)(v11 + 56))
      && !dict_string(dict, CFSTR("os_version"), 0, 0, (char **)(v11 + 64))
      && !dict_string(dict, CFSTR("os_build"), 0, 0, (char **)(v11 + 80))
      && !dict_string(dict, CFSTR("hw_model"), 0, 0, (char **)(v11 + 88))
      && !dict_int(dict, CFSTR("cpu_type"), (void *)(v11 + 192))
      && !dict_int(dict, CFSTR("cpu_subtype"), (void *)(v11 + 196))
      && !dict_int(dict, CFSTR("cpu_family"), (void *)(v11 + 200))
      && !dict_uint32(dict, CFSTR("active_cpus"), (void *)(v11 + 176))
      && !dict_uint32(dict, CFSTR("max_cpus"), (void *)(v11 + 180)))
    {
      dict_BOOL(dict, CFSTR("apple_internal"), (BOOL *)(v11 + 205));
    }
    if (!v14)
    {
LABEL_79:
      v9 = 0;
LABEL_80:
      ktrace_chunk_unmap_data((uint64_t)v13, v17, v15);
      if (v7)
        goto LABEL_37;
      goto LABEL_38;
    }
    v19 = *(const __CFDictionary **)(v11 + 216);
    dict_string(v19, CFSTR("name"), 0, 0, (char **)(v11 + 104));
    dict_string(v19, CFSTR("hostname"), 0, 0, (char **)(v11 + 112));
    v25 = v15;
    if (dict_string(v19, CFSTR("device_uuid"), 0, 0, (char **)(v11 + 128)))
    {
      v20 = "device UUID";
    }
    else if (dict_string(v19, CFSTR("boot_uuid"), 0, 0, (char **)(v11 + 120)))
    {
      v20 = "boot UUID";
    }
    else if (dict_uint32(v19, CFSTR("vm_pages"), (void *)(v11 + 184)))
    {
      v20 = "VM pages";
    }
    else if (dict_uint64(v19, CFSTR("min_kern_vaddr"), (void *)(v11 + 16)))
    {
      v20 = "minimum kernel address";
    }
    else if (dict_uint64(v19, CFSTR("root_vol_size"), (void *)(v11 + 32)))
    {
      v20 = "root volume size";
    }
    else if (dict_uint32(v19, CFSTR("physical_cpus"), (void *)(v11 + 188)))
    {
      v20 = "physical CPUs";
    }
    else if (dict_BOOL(v19, CFSTR("internal_content"), (BOOL *)(v11 + 206)))
    {
      v20 = "internal content";
    }
    else
    {
      *(_QWORD *)v11 |= 1uLL;
      if (dict_BOOL(v19, CFSTR("hyperthreading"), (BOOL *)(v11 + 207)))
      {
        v20 = "hyperthreading";
      }
      else
      {
        *(_QWORD *)v11 |= 2uLL;
        if (!dict_BOOL(v19, CFSTR("thread_groups"), (BOOL *)(v11 + 208)))
        {
          *(_QWORD *)v11 |= 4uLL;
LABEL_73:
          v15 = v25;
          if (v26 >= 2)
          {
            ktrace_machine_v1_2(v11);
            if (v26 != 2)
            {
              ktrace_machine_v1_3(v11);
              if (v26 >= 4)
              {
                ktrace_machine_v1_4(v11);
                if (v26 != 4)
                {
                  dict_string(*(const __CFDictionary **)(v11 + 216), CFSTR("os_version_extra"), 0, 0, (char **)(v11 + 72));
                  if (v26 >= 6)
                    dict_string(*(const __CFDictionary **)(v11 + 216), CFSTR("hw_product"), 0, 0, (char **)(v11 + 96));
                }
              }
            }
          }
          goto LABEL_79;
        }
        v20 = "thread groups";
      }
    }
    v24 = (uint64_t)v20;
    v22 = *__error();
    ktrace_log_init();
    v23 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_create_cold_3(v24, v22, v23);
    *__error() = v22;
    goto LABEL_73;
  }
  v3 = ktrace_chunk_size_t(a1);
  v4 = ktrace_chunk_map_data(a1, 0, v3);
  if (!v4)
  {
    v9 = *__error();
    if (v9)
    {
LABEL_47:
      v11 = 0;
      *__error() = v9;
      return v11;
    }
    return 0;
  }
  v5 = (unint64_t)v4;
  v6 = ktrace_file_open_memory((uint64_t)v4, v3, 0, 0);
  if (v6)
  {
    v7 = v6;
    v28 = 0;
    v29 = &v28;
    v30 = 0x2000000000;
    v31 = 0;
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v27[2] = __ktrace_machine_create_block_invoke;
    v27[3] = &unk_1E5F70A88;
    v27[4] = &v28;
    v8 = ktrace_file_header_iterate((uint64_t)v6, 0, (uint64_t)v27);
    if (v8)
    {
      v9 = v8;
      _Block_object_dispose(&v28, 8);
      dict = 0;
      v11 = 0;
LABEL_37:
      ktrace_file_close(v7);
      goto LABEL_38;
    }
    v13 = (uint64_t *)v29[3];
    v12 = ktrace_chunk_tag((uint64_t)v13);
    _Block_object_dispose(&v28, 8);
    goto LABEL_9;
  }
  v11 = 0;
  dict = 0;
  v9 = *__error();
LABEL_42:
  ktrace_chunk_unmap_data((uint64_t)a1, v5, v3);
  if (v9)
  {
LABEL_43:
    if (v11)
      ktrace_machine_destroy(v11);
    if (dict)
      CFRelease(dict);
    goto LABEL_47;
  }
  return v11;
}

BOOL __ktrace_machine_create_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = ktrace_chunk_tag(a2);
  if (v4 == 35840)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return v4 != 35840;
}

_DWORD *ktrace_machine_v1_2(uint64_t a1)
{
  _DWORD *result;
  int v2;

  result = (_DWORD *)dict_uint64(*(const __CFDictionary **)(a1 + 216), CFSTR("max_kern_vaddr"), (void *)(a1 + 24));
  if ((_DWORD)result)
  {
    v2 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_v1_2_cold_1();
    result = __error();
    *result = v2;
  }
  return result;
}

_DWORD *ktrace_machine_v1_3(uint64_t a1)
{
  const __CFDictionary *v2;
  int *v3;
  int v4;
  int v5;
  int v6;
  _DWORD *result;
  uint64_t v8;
  int v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(const __CFDictionary **)(a1 + 216);
  v3 = (int *)(a1 + 160);
  v4 = dict_uint32(v2, CFSTR("max_clusters"), (void *)(a1 + 160));
  if (v4)
  {
    *__error() = v4;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_v1_3_cold_2();
    goto LABEL_12;
  }
  v15 = 0;
  v6 = dict_uint32_arr(v2, CFSTR("cluster_by_cpu"), (_QWORD *)(a1 + 136), &v15);
  if (v6)
  {
    *__error() = v6;
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_v1_3_cold_1();
    goto LABEL_12;
  }
  if (v15 == *(_DWORD *)(a1 + 180))
  {
    v14 = 0;
    result = (_DWORD *)dict_uint64_arr(v2, CFSTR("cluster_flags"), (_QWORD *)(a1 + 144), &v14);
    if (v14 == *(_DWORD *)(a1 + 160))
      return result;
    *__error() = 22;
    v5 = *__error();
    ktrace_log_init();
    v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      v9 = *v3;
      *(_DWORD *)buf = 67109632;
      v17 = v9;
      v18 = 1024;
      v19 = v14;
      v20 = 1024;
      v21 = v5;
      v10 = "mismatched number of clusters, %u in machine and %u inarray (%{errno}d)";
      v11 = v8;
LABEL_15:
      _os_log_error_impl(&dword_1AF33A000, v11, OS_LOG_TYPE_ERROR, v10, buf, 0x14u);
    }
  }
  else
  {
    *__error() = 22;
    v5 = *__error();
    ktrace_log_init();
    v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_DWORD *)(a1 + 180);
      *(_DWORD *)buf = 67109632;
      v17 = v13;
      v18 = 1024;
      v19 = v15;
      v20 = 1024;
      v21 = v5;
      v10 = "mismatched number of CPUs for clusters, %u in machine and %u in array (%{errno}d)";
      v11 = v12;
      goto LABEL_15;
    }
  }
LABEL_12:
  result = __error();
  *result = v5;
  return result;
}

_DWORD *ktrace_machine_v1_4(uint64_t a1)
{
  const __CFDictionary *v2;
  int v3;
  int v4;
  _DWORD *result;
  NSObject *v6;
  int v7;
  int v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(const __CFDictionary **)(a1 + 216);
  v3 = dict_uint32(v2, CFSTR("max_dies"), (void *)(a1 + 164));
  if (v3)
  {
    *__error() = v3;
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_machine_v1_4_cold_2();
  }
  else
  {
    v8 = 0;
    result = (_DWORD *)dict_uint32_arr(v2, CFSTR("die_by_cpu"), (_QWORD *)(a1 + 152), &v8);
    if ((_DWORD)result)
    {
      *__error() = (int)result;
      v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_machine_v1_4_cold_1();
    }
    else
    {
      if (v8 == *(_DWORD *)(a1 + 180))
        return result;
      *__error() = 22;
      v4 = *__error();
      ktrace_log_init();
      v6 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_DWORD *)(a1 + 180);
        *(_DWORD *)buf = 67109632;
        v10 = v7;
        v11 = 1024;
        v12 = v8;
        v13 = 1024;
        v14 = v4;
        _os_log_error_impl(&dword_1AF33A000, v6, OS_LOG_TYPE_ERROR, "mismatched number of CPUs for dies, %u in machine and %u in array (%{errno}d)", buf, 0x14u);
      }
    }
  }
  result = __error();
  *result = v4;
  return result;
}

uint64_t ktrace_machine_kernel_version(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 40);
}

uint64_t ktrace_machine_boot_args(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 48);
}

uint64_t ktrace_machine_memory_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 8);
}

uint64_t ktrace_machine_hw_page_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 168);
}

uint64_t ktrace_machine_vm_page_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 172);
}

uint64_t ktrace_machine_os_name(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 56);
}

uint64_t ktrace_machine_os_version(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 64);
}

uint64_t ktrace_machine_os_version_extra(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 72);
}

uint64_t ktrace_machine_os_build(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 80);
}

uint64_t ktrace_machine_model(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 88);
}

uint64_t ktrace_machine_product(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 96);
}

uint64_t ktrace_machine_cpu_type(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 192);
}

uint64_t ktrace_machine_cpu_subtype(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 196);
}

uint64_t ktrace_machine_cpu_family(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 200);
}

uint64_t ktrace_machine_active_cpus(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 176);
}

uint64_t ktrace_machine_max_cpus(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 180);
}

uint64_t ktrace_machine_max_clusters(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 160);
}

uint64_t ktrace_machine_cpu_cluster(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_QWORD *)(a1 + 136);
  if (!v3)
    return 45;
  if (*(_DWORD *)(a1 + 180) <= a2)
    return 34;
  result = 0;
  *a3 = *(_DWORD *)(v3 + 4 * a2);
  return result;
}

uint64_t ktrace_machine_cluster_flags(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(_QWORD *)(a1 + 144);
  if (!v3)
    return 45;
  if (*(_DWORD *)(a1 + 160) <= a2)
    return 34;
  result = 0;
  *a3 = *(_QWORD *)(v3 + 8 * a2);
  return result;
}

uint64_t ktrace_machine_max_dies(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t ktrace_machine_cpu_die(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 152);
  if (!v3)
    return 45;
  if (*(_DWORD *)(a1 + 180) <= a2)
    return 34;
  result = 0;
  *a3 = *(_DWORD *)(v3 + 4 * a2);
  return result;
}

uint64_t ktrace_machine_name(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 104);
}

uint64_t ktrace_machine_hostname(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 112);
}

uint64_t ktrace_machine_device_uuid(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 128);
}

uint64_t ktrace_machine_boot_uuid(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 120);
}

unint64_t ktrace_machine_vm_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 184) * (unint64_t)*(unsigned int *)(a1 + 172);
}

uint64_t ktrace_machine_physical_cpus(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 188);
}

uint64_t ktrace_machine_root_volume_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 32);
}

uint64_t ktrace_machine_vm_pages(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 184);
}

uint64_t ktrace_machine_apple_internal(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned __int8 *)(a1 + 205);
}

uint64_t ktrace_machine_has_internal_content(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*a1 & 1) == 0)
    return 45;
  result = 0;
  *a2 = a1[206];
  return result;
}

uint64_t ktrace_machine_has_hyperthreading(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*a1 & 2) == 0)
    return 45;
  result = 0;
  *a2 = a1[207];
  return result;
}

uint64_t ktrace_machine_has_thread_groups(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*a1 & 4) == 0)
    return 45;
  result = 0;
  *a2 = a1[208];
  return result;
}

uint64_t ktrace_machine_min_kernel_vaddr(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == -1)
    return 45;
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t ktrace_machine_max_kernel_vaddr(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 45;
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t ktrace_machine_print_description(uint64_t a1, FILE *a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int active;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t i;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  char *v31;
  char v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v4 = (const char *)ktrace_machine_kernel_version(a1);
  fprintf(a2, "kernel version: %s\n", v4);
  v5 = (const char *)ktrace_machine_boot_args(a1);
  fprintf(a2, "boot-args: %s\n", v5);
  v6 = (const char *)ktrace_machine_os_name(a1);
  v7 = (const char *)ktrace_machine_os_version(a1);
  v8 = (const char *)ktrace_machine_os_build(a1);
  fprintf(a2, "OS: %s %s (%s)", v6, v7, v8);
  v9 = (const char *)ktrace_machine_os_version_extra(a1);
  if (v9)
    fprintf(a2, " [%s]", v9);
  fputc(10, a2);
  v10 = (const char *)ktrace_machine_model(a1);
  fprintf(a2, "HW model: %s\n", v10);
  v11 = (const char *)ktrace_machine_product(a1);
  fprintf(a2, "HW product: %s\n", v11);
  v12 = ktrace_machine_memory_size(a1);
  fprintf(a2, "memory size: %'llu\n", v12);
  v13 = ktrace_machine_vm_size(a1);
  if (v13)
  {
    fprintf(a2, "VM size: %'llu", v13);
    v14 = ktrace_machine_vm_pages(a1);
    if (v14)
      fprintf(a2, " (%'llu pages)", v14);
    fputc(10, a2);
  }
  v15 = ktrace_machine_hw_page_size(a1);
  fprintf(a2, "HW page size: %u\n", v15);
  v16 = ktrace_machine_vm_page_size(a1);
  fprintf(a2, "VM page size: %u\n", v16);
  active = ktrace_machine_active_cpus(a1);
  fprintf(a2, "active CPUS: %u\n", active);
  v18 = ktrace_machine_max_cpus(a1);
  fprintf(a2, "max CPUS: %u\n", v18);
  v19 = ktrace_machine_physical_cpus(a1);
  if (v19)
    fprintf(a2, "physical CPUS: %u\n", v19);
  v20 = ktrace_machine_cpu_type(a1);
  fprintf(a2, "CPU type: %#x\n", v20);
  v21 = ktrace_machine_cpu_subtype(a1);
  fprintf(a2, "CPU subtype: %#x\n", v21);
  v22 = ktrace_machine_cpu_family(a1);
  fprintf(a2, "CPU family: %#x\n", v22);
  v23 = *(_DWORD *)(a1 + 164);
  if (v23 >= 2)
    fprintf(a2, "max dies: %u\n", *(_DWORD *)(a1 + 164));
  v24 = ktrace_machine_max_clusters(a1);
  if (v24)
  {
    v25 = v24;
    fprintf(a2, "max clusters: %u\n", v24);
    if (v18)
    {
      for (i = 0; i != v18; ++i)
      {
        fprintf(a2, "\tCPU %u: cluster ", i);
        LODWORD(v45) = 0;
        if (ktrace_machine_cpu_cluster(a1, i, &v45))
          fwrite("???", 3uLL, 1uLL, a2);
        else
          fprintf(a2, "%u", v45);
        if (v23 < 2)
        {
          fputc(10, a2);
        }
        else
        {
          fwrite(", die ", 6uLL, 1uLL, a2);
          v27 = *(_QWORD *)(a1 + 152);
          if (v27 && i < *(unsigned int *)(a1 + 180))
            fprintf(a2, "%u\n", *(_DWORD *)(v27 + 4 * i));
          else
            fwrite("???\n", 4uLL, 1uLL, a2);
        }
      }
    }
    v28 = 0;
    if (v25 <= 1)
      v29 = 1;
    else
      v29 = v25;
    do
    {
      fprintf(a2, "\tcluster %u:", v28);
      v45 = 0;
      v30 = ktrace_machine_cluster_flags(a1, v28, &v45);
      if (v30)
      {
        v31 = strerror(v30);
        fprintf(a2, " ??? (%s)", v31);
      }
      else
      {
        v32 = v45;
        if ((v45 & 1) != 0)
          fwrite(" EFFICIENT", 0xAuLL, 1uLL, a2);
        if ((v32 & 2) != 0)
          fwrite(" PERFORMANT", 0xBuLL, 1uLL, a2);
      }
      fputc(10, a2);
      ++v28;
    }
    while (v29 != v28);
  }
  v44 = 0;
  if (ktrace_machine_has_internal_content((_BYTE *)a1, &v44))
  {
    ktrace_machine_apple_internal(a1);
    fprintf(a2, "Apple Internal: %s\n");
  }
  else
  {
    fprintf(a2, "Apple Internal content: %s\n");
  }
  v33 = (const char *)ktrace_machine_name(a1);
  if (v33)
    fprintf(a2, "name: %s\n", v33);
  v34 = (const char *)ktrace_machine_hostname(a1);
  if (v34)
    fprintf(a2, "hostname: %s\n", v34);
  v35 = (const char *)ktrace_machine_device_uuid(a1);
  if (v35)
    fprintf(a2, "device UUID: %s\n", v35);
  v36 = (const char *)ktrace_machine_boot_uuid(a1);
  if (v36)
    fprintf(a2, "boot UUID: %s\n", v36);
  v45 = -1;
  if (!ktrace_machine_min_kernel_vaddr(a1, &v45))
    fprintf(a2, "min kern vaddr: %#llx\n", v45);
  v43 = -1;
  if (!ktrace_machine_max_kernel_vaddr(a1, &v43))
    fprintf(a2, "max kern vaddr: %#llx\n", v43);
  v37 = ktrace_machine_root_volume_size(a1);
  if (v37)
    fprintf(a2, "root volume size: %'llu\n", v37);
  v42 = 0;
  if (!ktrace_machine_has_hyperthreading((_BYTE *)a1, &v42))
  {
    if (v42)
      v38 = "YES";
    else
      v38 = "NO";
    fprintf(a2, "hyperthreading: %s\n", v38);
  }
  v41 = 0;
  if (!ktrace_machine_has_thread_groups((_BYTE *)a1, &v41))
  {
    if (v41)
      v39 = "YES";
    else
      v39 = "NO";
    fprintf(a2, "thread groups: %s\n", v39);
  }
  return 0;
}

FILE *ktrace_machine_copy_description(uint64_t a1)
{
  FILE *result;
  FILE *v3;
  size_t v4;
  char *__bufp;

  v4 = 0;
  __bufp = 0;
  result = open_memstream(&__bufp, &v4);
  if (result)
  {
    v3 = result;
    ktrace_machine_print_description(a1, result);
    fclose(v3);
    return (FILE *)__bufp;
  }
  return result;
}

void OUTLINED_FUNCTION_5_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

uint64_t ktrace_start_writing_fd(unint64_t a1, int a2, int a3, const void *a4, const void *a5)
{
  _QWORD *fd;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 <= 0)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_DWORD *)a1 | 2) != 2)
    _session_start_live_cold_4();
  fd = ktrace_file_create_fd(0, a2);
  *(_QWORD *)(a1 + 648) = fd;
  if (fd)
  {
    if (a4)
      *(_QWORD *)(a1 + 664) = _Block_copy(a4);
    if (a5)
      *(_QWORD *)(a1 + 672) = _Block_copy(a5);
    *(_DWORD *)(a1 + 656) = a3;
    if (*(_DWORD *)(a1 + 4) != 2)
      *(_DWORD *)(a1 + 4) = 1;
    return ktrace_start(a1, 0);
  }
  else
  {
    v11 = *__error();
    ktrace_log_init();
    v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_start_writing_fd_cold_3(v11, v12, v13, v14, v15, v16, v17, v18);
    *__error() = v11;
    return *__error();
  }
}

uint64_t ktrace_start_writing_ktrace_file(unint64_t a1, uint64_t a2, int a3, void *aBlock, void *a5)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_DWORD *)a1 | 2) != 2)
    _session_start_live_cold_4();
  *(_QWORD *)(a1 + 648) = a2;
  if (aBlock)
    *(_QWORD *)(a1 + 664) = _Block_copy(aBlock);
  if (a5)
    *(_QWORD *)(a1 + 672) = _Block_copy(a5);
  *(_DWORD *)(a1 + 656) = a3;
  if (*(_DWORD *)(a1 + 4) != 2)
    *(_DWORD *)(a1 + 4) = 1;
  if (*(_DWORD *)(a2 + 16) == 4)
    ktrace_file_write_header_system_default(a2);
  return ktrace_start(a1, 0);
}

uint64_t ktrace_start_writing_path(_DWORD *a1, char *a2, unsigned int a3)
{
  int v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*a1 | 2) != 2)
    _session_start_live_cold_4();
  v4 = open(a2, 1538, a3);
  if (v4 == -1)
    return *__error();
  else
    return ktrace_start_writing_fd((unint64_t)a1, v4, 0, 0, 0);
}

uint64_t ktrace_start_writing_file(_DWORD *a1, char *a2, int a3, const void *a4, const void *a5)
{
  int v9;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*a1 | 2) != 2)
    _session_start_live_cold_4();
  v9 = open(a2, 1538, 438);
  if (v9 != -1)
    return ktrace_start_writing_fd((unint64_t)a1, v9, a3, a4, a5);
  v11 = *__error();
  ktrace_log_init();
  v12 = ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    ktrace_start_writing_file_cold_4(v11, v12, v13, v14, v15, v16, v17, v18);
  *__error() = v11;
  if (*__error())
    return *__error();
  else
    return 22;
}

uint64_t ktrace_stackshot(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  void *v5;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_postprocessing_set_completed_handler_cold_1();
  v3 = ktrace_callback_list_add(a1, a1 + 96);
  if (!v3)
    return 12;
  v4 = v3;
  v3[4] = 4;
  v5 = _Block_copy(a2);
  result = 0;
  *((_QWORD *)v4 + 3) = v5;
  *v4 = 2;
  return result;
}

uint64_t ktrace_kperf(uint64_t a1, _QWORD *a2)
{
  return ktrace_kpdecode(a1, 0, a2);
}

uint64_t ktrace_kpdecode(uint64_t a1, char a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t result;
  _QWORD *v10;
  void *v11;
  _QWORD v12[5];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v6 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v6)
    return 12;
  v7 = v6;
  if ((a2 & 2) != 0)
  {
    v6[1] = 0xFFFFFFFF00000000;
    *(_BYTE *)(a1 + 16) = 1;
    v8 = 2;
  }
  else
  {
    v8 = 0;
    v6[1] = 0x2600000025000000;
  }
  *(_DWORD *)v6 = v8;
  *((_DWORD *)v6 + 4) = 2;
  if ((a2 & 1) != 0)
  {
    v10 = a3;
  }
  else
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __ktrace_kpdecode_block_invoke;
    v12[3] = &unk_1E5F70AB0;
    v12[4] = a3;
    v10 = v12;
  }
  v11 = _Block_copy(v10);
  result = 0;
  v7[3] = v11;
  return result;
}

uint64_t __ktrace_kpdecode_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return kpdecode_record_free();
}

uint64_t _session_ensure_uuidmap(uint64_t result)
{
  _QWORD *v1;
  int v2;
  NSObject *v3;

  if (!*(_QWORD *)(result + 304))
  {
    v1 = (_QWORD *)result;
    if (_session_machine_init(result))
    {
      v2 = *__error();
      ktrace_log_init();
      v3 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        _session_ensure_uuidmap_cold_1(v2, v3);
      *__error() = v2;
    }
    result = ktrace_uuid_map_create(v1[43], v1[76]);
    v1[38] = result;
  }
  return result;
}

uint64_t _session_machine_init(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t current;
  _QWORD v7[5];
  _QWORD v8[5];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)(a1 + 344))
    return 0;
  v3 = *(_QWORD *)(a1 + 608);
  if (v3)
  {
    v4 = MEMORY[0x1E0C809B0];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___session_machine_init_block_invoke;
    v8[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
    v8[4] = a1;
    result = ktrace_file_header_iterate(v3, 0, (uint64_t)v8);
    if (!(_DWORD)result)
    {
      if (!*(_QWORD *)(a1 + 344))
      {
        v5 = *(_QWORD *)(a1 + 608);
        v7[0] = v4;
        v7[1] = 3221225472;
        v7[2] = ___session_machine_init_block_invoke_2;
        v7[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
        v7[4] = a1;
        return ktrace_file_iterate(v5, 0, (uint64_t)v7);
      }
      return 0;
    }
  }
  else
  {
    current = ktrace_machine_create_current();
    *(_QWORD *)(a1 + 344) = current;
    if (current)
      return 0;
    else
      return 22;
  }
  return result;
}

_TtC6ktrace12ProviderList *_session_ensure_providers(_TtC6ktrace12ProviderList *result)
{
  _TtC6ktrace12ProviderList *v1;

  if (!result[25].super.isa)
  {
    v1 = result;
    _session_machine_init((uint64_t)result);
    result = -[ProviderList initWithMachine:]([_TtC6ktrace12ProviderList alloc], "initWithMachine:", *(_QWORD *)v1[14].providers);
    v1[25].super.isa = (Class)result;
  }
  return result;
}

void _session_handle_stackshot(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD v14[5];
  _QWORD v15[5];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(uint64_t **)(a1 + 320);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 328);
    v6 = MEMORY[0x1E0C809B0];
    while (v5 <= a2)
    {
      v7 = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 496) = v5;
      if ((*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280)) && *(_QWORD *)(a1 + 296))
      {
        v15[0] = v6;
        v15[1] = 3221225472;
        v15[2] = ___session_handle_stackshot_block_invoke;
        v15[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
        v15[4] = a1;
        ktrace_stackshot_chunk_unwrap(v3, (uint64_t)v15);
      }
      if (*(_DWORD *)(a1 + 284))
      {
        v8 = *(uint64_t **)(a1 + 320);
        v14[0] = v6;
        v14[1] = 3221225472;
        v14[2] = ___session_handle_stackshot_block_invoke_2;
        v14[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
        v14[4] = a1;
        ktrace_stackshot_chunk_unwrap(v8, (uint64_t)v14);
      }
      if (*(_DWORD *)(a1 + 96))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(a1 + 104) + v9;
          if (*(_DWORD *)(v11 + 16) != 4)
            ktrace_remotetime_update_params_cold_1();
          ktrace_stackshot_chunk_unwrap(*(uint64_t **)(a1 + 320), *(_QWORD *)(v11 + 24));
          *(_QWORD *)(a1 + 496) = v7;
          ++v10;
          v9 += 32;
        }
        while (v10 < *(unsigned int *)(a1 + 96));
      }
      v12 = *(_QWORD **)(a1 + 320);
      v13 = (uint64_t *)v12[13];
      if (!*(_DWORD *)a1)
        ktrace_chunk_destroy(v12);
      *(_QWORD *)(a1 + 320) = v13;
      if (!v13)
      {
        *(_QWORD *)(a1 + 328) = -1;
        return;
      }
      v5 = ktrace_stackshot_chunk_timestamp(v13);
      v3 = *(uint64_t **)(a1 + 320);
      *(_QWORD *)(a1 + 328) = v5;
      if (!v3)
        return;
    }
  }
}

void ___session_handle_stackshot_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  kthmap_update_stackshot(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296), a2, a3);
}

void ___session_handle_stackshot_block_invoke_2(uint64_t a1, kcdata_item *a2, void *a3)
{
  kcdata_iter v6;

  _session_ensure_uuidmap(*(_QWORD *)(a1 + 32));
  v6.item = a2;
  v6.end = a3;
  ktrace_uuid_map_update_with_stackshot(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), v6, *(_QWORD *)(a1 + 32));
}

_BYTE *ktrace_compute_filter(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  uint64_t i;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = *(_BYTE **)(a1 + 8);
  if (!v2)
  {
    v2 = malloc_type_malloc(0x2000uLL, 0xD9507EA2uLL);
    *(_QWORD *)(a1 + 8) = v2;
  }
  bzero(v2, 0x2000uLL);
  if (*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280) || *(_QWORD *)(a1 + 88))
  {
    v2[224] |= 3u;
    if (*(_DWORD *)(a1 + 280))
      v2[52] |= 0x40u;
  }
  if (*(_DWORD *)(a1 + 276))
    v2[52] |= 0x80u;
  if (*(_DWORD *)(a1 + 268))
    v2[96] |= 2u;
  if (*(_DWORD *)(a1 + 272))
    v2[40] |= 1u;
  if (*(_DWORD *)(a1 + 284))
    v2[992] |= 0x20u;
  if (*(_DWORD *)(a1 + 288))
    v2[48] |= 1u;
  v3 = *(unsigned int *)(a1 + 24);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    do
    {
      v6 = (int *)(v5 + 32 * v4);
      v8 = *v6;
      v7 = v6 + 2;
      if (v8 == 1)
      {
        for (i = 0; i != 0x2000; i += 8)
          *(_QWORD *)&v2[i] |= *(_QWORD *)(*(_QWORD *)v7 + i);
      }
      else
      {
        v10 = v7[1] - 1;
        v11 = HIWORD(*v7);
        if (v11 <= HIWORD(v10))
        {
          v12 = HIWORD(v10) + 1;
          do
          {
            v2[(unint64_t)v11 >> 3] |= 1 << (v11 & 7);
            ++v11;
          }
          while (v12 != v11);
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  return v2;
}

uint64_t ktrace_set_use_existing(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[2];
  int v4;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  if (kdebug_get_bufinfo(v3))
    return *__error();
  if (!LODWORD(v3[0]))
    return 55;
  result = 0;
  *(_DWORD *)a1 = 2;
  return result;
}

char *ktrace_set_reason(uint64_t a1, char *__s1)
{
  char *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  result = strdup(__s1);
  *(_QWORD *)(a1 + 696) = result;
  return result;
}

uint64_t ktrace_set_trigger_kind(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  *(_DWORD *)(result + 712) = a2;
  return result;
}

void ktrace_set_command_argv(uint64_t a1, const char **a2)
{
  const char *v4;
  uint64_t v5;
  const char **v6;
  const char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  unsigned int v13;
  const char *v14;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v4 = *a2;
  if (*a2)
  {
    v5 = 0;
    v6 = a2 + 1;
    do
    {
      v5 += strlen(v4) + 1;
      v7 = *v6++;
      v4 = v7;
    }
    while (v7);
  }
  else
  {
    v5 = 0;
  }
  v8 = (char *)malloc_type_malloc(v5 + 1, 0x403BB2EDuLL);
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a2 + 1;
    while (1)
    {
      v12 = v10 ? " " : "";
      v13 = snprintf(&v8[v10], v5 - v10, "%s%s", v12, v9);
      if ((v13 & 0x80000000) != 0)
        break;
      v10 += v13;
      v14 = *v11++;
      v9 = v14;
      if (!v14)
        goto LABEL_15;
    }
    free(v8);
  }
  else
  {
LABEL_15:
    *(_QWORD *)(a1 + 704) = v8;
  }
}

uint64_t ktrace_set_buffer_size(uint64_t result, uint64_t a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  *(_QWORD *)(result + 336) = a2;
  return result;
}

uint64_t ktrace_get_buffer_size(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 336);
}

uint64_t ktrace_set_collection_interval(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t ktrace_get_collection_interval(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 152);
}

uint64_t ktrace_set_collection_qos(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  *(_DWORD *)(result + 144) = a2;
  return result;
}

uint64_t ktrace_set_collection_priority(uint64_t result, int a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(result + 224) & 1) != 0)
    ktrace_callback_list_add_cold_4();
  *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t ktrace_get_collection_qos(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 144);
}

uint64_t ktrace_get_collection_priority(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 148);
}

uint64_t ktrace_set_no_postprocessing(uint64_t result)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  *(_BYTE *)(result + 828) |= 1u;
  return result;
}

void *ktrace_set_writing_filter(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = *(const void **)(a1 + 680);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 680) = result;
  return result;
}

uint64_t ktrace_add_stackshot_flags(uint64_t result, uint64_t a2)
{
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  *(_QWORD *)(result + 168) |= a2;
  return result;
}

uint64_t ktrace_is_kernel_64_bit(uint64_t a1)
{
  size_t v2;
  _OWORD v3[2];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 == 1)
    return ktrace_file_is_64_bit(*(_QWORD *)(a1 + 608));
  v34 = xmmword_1AF3E9C98;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  memset(v3, 0, sizeof(v3));
  v2 = 648;
  if (sysctl((int *)&v34, 4u, v3, &v2, 0, 0) == -1)
    return 0;
  else
    return (v4 >> 2) & 1;
}

BOOL ___session_machine_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = ktrace_machine_create(a2);
  if (v3)
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344) = v3;
  return v3 == 0;
}

BOOL ___session_machine_init_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = ktrace_machine_create(a2);
  if (v3)
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344) = v3;
  return v3 == 0;
}

uint64_t ktrace_get_machine(uint64_t a1)
{
  int v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = _session_machine_init(a1);
  *__error() = v2;
  return *(_QWORD *)(a1 + 344);
}

uint64_t _session_cpus_init(uint64_t a1)
{
  uint64_t v3;
  _DWORD *current;
  _QWORD v5[5];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)(a1 + 352))
    return 0;
  v3 = *(_QWORD *)(a1 + 608);
  if (v3)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___session_cpus_init_block_invoke;
    v5[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
    v5[4] = a1;
    return ktrace_file_header_iterate(v3, 0, (uint64_t)v5);
  }
  else
  {
    current = ktrace_cpus_create_current();
    *(_QWORD *)(a1 + 352) = current;
    if (current)
      return 0;
    else
      return 22;
  }
}

BOOL ___session_cpus_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352) = ktrace_cpus_create(a2);
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352) == 0;
}

uint64_t ktrace_get_cpus(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)(a1 + 352);
}

void *ktrace_set_thread_exit_handler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  v4 = *(const void **)(a1 + 88);
  if (v4)
    _Block_release(v4);
  if (aBlock)
    result = _Block_copy(aBlock);
  else
    result = 0;
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void *ktrace_set_completion_handler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  v4 = *(const void **)(a1 + 56);
  if (v4)
    _Block_release(v4);
  if (aBlock)
    result = _Block_copy(aBlock);
  else
    result = 0;
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void *ktrace_set_dropped_events_handler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  v4 = *(const void **)(a1 + 64);
  if (v4)
    _Block_release(v4);
  if (aBlock)
    result = _Block_copy(aBlock);
  else
    result = 0;
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void *ktrace_set_post_processing_handler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  v4 = *(const void **)(a1 + 72);
  if (v4)
    _Block_release(v4);
  if (aBlock)
    result = _Block_copy(aBlock);
  else
    result = 0;
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

double ktrace_set_supplemental_timebase(uint64_t a1, double *a2)
{
  double result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  result = *a2;
  *(double *)(a1 + 424) = *a2;
  return result;
}

uint64_t ktrace_parse_arg(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  FILE *v9;
  const char *v10;
  size_t v11;
  _DWORD *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v17;
  const char *v18;
  int v19;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  v5 = 1;
  if (a4 <= 81)
  {
    if (a4 != 67)
    {
      if (a4 != 69)
      {
        if (a4 == 70)
        {
          if ((*(_WORD *)(a1 + 224) & 3) != 0)
            ktrace_set_remotetime_conversion_enabled_cold_2();
          v5 = 0;
          if (*(_DWORD *)a1 == 1)
            v6 = 4;
          else
            v6 = 3;
          *(_DWORD *)a1 = v6;
        }
        return v5;
      }
      if (ktrace_set_use_existing(a1))
      {
        v9 = (FILE *)*MEMORY[0x1E0C80C10];
        v10 = "Unable to use existing trace buffer.\n";
        v5 = 1;
        v11 = 37;
        goto LABEL_31;
      }
      return 0;
    }
    v12 = (_DWORD *)MEMORY[0x1E0C844E0];
    ktrace_session_add_codes_file(a1, *(char **)(a3 + 8 * (int)*MEMORY[0x1E0C844E0]));
    v5 = 0;
    ++*v12;
    return v5;
  }
  if (a4 != 120)
  {
    if (a4 != 112)
    {
      if (a4 == 82)
      {
        v7 = (int)*MEMORY[0x1E0C844E0];
        v8 = *(const char **)(a3 + 8 * v7);
        *MEMORY[0x1E0C844E0] = v7 + 1;
        if (!v8)
        {
          v5 = 1;
          fwrite("No trace file specified.\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          return v5;
        }
        if (ktrace_set_file(a1, v8))
        {
          v9 = (FILE *)*MEMORY[0x1E0C80C10];
          v10 = "Unable to use trace file.\n";
          v5 = 1;
          v11 = 26;
LABEL_31:
          fwrite(v10, v11, 1uLL, v9);
          return v5;
        }
        return 0;
      }
      return v5;
    }
    v17 = (int)*MEMORY[0x1E0C844E0];
    if ((int)v17 < a2)
    {
      v18 = *(const char **)(a3 + 8 * v17);
      *MEMORY[0x1E0C844E0] = v17 + 1;
      if ((*v18 - 48) > 9)
        return ktrace_filter_process(a1, v18);
      v19 = atoi(v18);
      return ktrace_filter_pid(a1, v19);
    }
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = "-p requires an argument\n";
LABEL_30:
    v5 = 1;
    v11 = 24;
    goto LABEL_31;
  }
  v13 = (int)*MEMORY[0x1E0C844E0];
  if ((int)v13 >= a2)
  {
    v9 = (FILE *)*MEMORY[0x1E0C80C10];
    v10 = "-x requires an argument\n";
    goto LABEL_30;
  }
  v14 = *(const char **)(a3 + 8 * v13);
  *MEMORY[0x1E0C844E0] = v13 + 1;
  if ((*v14 - 48) > 9)
    return ktrace_exclude_process(a1, v14);
  v15 = atoi(v14);
  return ktrace_exclude_pid(a1, v15);
}

uint64_t ktrace_set_mode(uint64_t a1, unsigned int a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  if (a2 >= 5)
    _session_teardown_cold_2();
  if (a2 == 3)
  {
    if (*(_DWORD *)a1 == 1)
      a2 = 4;
    else
      a2 = 3;
  }
  *(_DWORD *)a1 = a2;
  return 0;
}

uint64_t ktrace_parse_args(uint64_t a1, int a2, char **a3)
{
  char *v6;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  *MEMORY[0x1E0C844D8] = 0;
  v6 = (char *)MEMORY[0x1E0C844E8];
  while (getopt(a2, a3, "") != -1)
  {
    if (ktrace_parse_arg(a1, a2, (uint64_t)a3, *v6))
      return 1;
  }
  return 0;
}

uint64_t ktrace_set_interactive(uint64_t result)
{
  *(_DWORD *)(result + 152) = 500;
  return result;
}

void ktrace_set_signal_handler(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD handler[6];
  _QWORD v11[3];
  int v12;
  _QWORD v13[5];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  *(_DWORD *)(a1 + 152) = 500;
  if (ktrace_set_signal_handler_signal_queue_once != -1)
    dispatch_once(&ktrace_set_signal_handler_signal_queue_once, &__block_literal_global_7);
  if ((*(_WORD *)(a1 + 224) & 3) != 0)
    ktrace_set_remotetime_conversion_enabled_cold_2();
  v2 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __ktrace_set_signal_handler_block_invoke_2;
  v13[3] = &__block_descriptor_40_e5_v8__0l;
  v13[4] = a1;
  v3 = dispatch_source_create(MEMORY[0x1E0C80DC0], 2uLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(_QWORD *)(a1 + 176) = v3;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  handler[0] = v2;
  handler[1] = 3221225472;
  handler[2] = __ktrace_set_signal_handler_block_invoke_3;
  handler[3] = &unk_1E5F70948;
  handler[4] = v11;
  handler[5] = a1;
  dispatch_source_set_event_handler(v3, handler);
  signal(2, (void (__cdecl *)(int))1);
  v4 = dispatch_source_create(MEMORY[0x1E0C80DC0], 1uLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(_QWORD *)(a1 + 184) = v4;
  dispatch_source_set_event_handler(v4, v13);
  signal(1, (void (__cdecl *)(int))1);
  v5 = dispatch_source_create(MEMORY[0x1E0C80DC0], 0xDuLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(_QWORD *)(a1 + 200) = v5;
  dispatch_source_set_event_handler(v5, v13);
  signal(13, (void (__cdecl *)(int))1);
  v6 = dispatch_source_create(MEMORY[0x1E0C80DC0], 0xFuLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(_QWORD *)(a1 + 192) = v6;
  dispatch_source_set_event_handler(v6, v13);
  signal(15, (void (__cdecl *)(int))1);
  v7 = dispatch_source_create(MEMORY[0x1E0C80DC0], 3uLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(_QWORD *)(a1 + 208) = v7;
  dispatch_source_set_event_handler(v7, v13);
  signal(3, (void (__cdecl *)(int))1);
  v9[0] = v2;
  v9[1] = 3221225472;
  v9[2] = __ktrace_set_signal_handler_block_invoke_4;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = a1;
  v8 = dispatch_source_create(MEMORY[0x1E0C80DC0], 0x1DuLL, 0, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(_QWORD *)(a1 + 216) = v8;
  dispatch_source_set_event_handler(v8, v9);
  signal(29, (void (__cdecl *)(int))1);
  _Block_object_dispose(v11, 8);
}

void sub_1AF368FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

dispatch_queue_t __ktrace_set_signal_handler_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1);
  result = dispatch_queue_create("com.apple.libktrace.signals", v0);
  ktrace_set_signal_handler_signal_queue = (uint64_t)result;
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  return result;
}

void __ktrace_set_signal_handler_block_invoke_2(uint64_t a1)
{
  ktrace_end(*(_QWORD *)(a1 + 32), 1);
}

void __ktrace_set_signal_handler_block_invoke_3(uint64_t a1)
{
  _DWORD *v2;
  _BOOL4 v3;
  uint64_t v4;
  int v5;

  v2 = *(_DWORD **)(a1 + 40);
  if (*v2 == 1)
  {
    v3 = 1;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    v3 = v5 != 0;
  }
  ktrace_end((uint64_t)v2, v3);
}

uint64_t __ktrace_set_signal_handler_block_invoke_4(uint64_t a1)
{
  return printf("%llu events seen\n", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
}

uint64_t ktrace_get_coprocessor_tracing_enabled(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 224) >> 9) & 1;
}

uint64_t ktrace_set_coprocessor_tracing_enabled(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_WORD *)(result + 224) = *(_WORD *)(result + 224) & 0xFDFF | v2;
  return result;
}

dispatch_queue_t ktrace_set_trailing_duration(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t result;

  if (*(_DWORD *)(a1 + 4) == 2)
    ktrace_remotetime_update_params_cold_1();
  *(_QWORD *)(a1 + 640) = ktrace_time_ringbuffer_create(a2);
  *(_DWORD *)(a1 + 4) = 2;
  result = dispatch_queue_create("com.apple.ktrace.trailing_processing", 0);
  *(_QWORD *)(a1 + 232) = result;
  return result;
}

uint64_t ktrace_get_mode(unsigned int *a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *a1;
}

uint64_t ktrace_add_client(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  __int16 v5;

  if (*(_DWORD *)a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_QWORD *)(a1 + 592))
    return 22;
  result = 0;
  *(_QWORD *)(a1 + 592) = a2;
  if (a3)
    v5 = 8;
  else
    v5 = 0;
  *(_WORD *)(a1 + 224) = *(_WORD *)(a1 + 224) & 0xFFF7 | v5;
  return result;
}

uint64_t ktrace_get_end_reason(uint64_t a1)
{
  return *(unsigned int *)(a1 + 808);
}

uint64_t _session_providers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 600);
}

uint64_t ktrace_stream_create(int a1, char a2, int a3)
{
  uint64_t Instance;
  uint64_t v7;
  intptr_t v8;

  if (ktrace_stream_create_once != -1)
    dispatch_once(&ktrace_stream_create_once, &__block_literal_global_8);
  Instance = _CFRuntimeCreateInstance();
  v7 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = 0;
    bzero((void *)(Instance + 32), 0x398uLL);
    *(_QWORD *)(v7 + 952) = 0;
    *(_DWORD *)(v7 + 24) = a1;
    *(_BYTE *)(v7 + 972) = a2;
    if ((a3 & 1) != 0)
      v8 = 2;
    else
      v8 = 32;
    *(_QWORD *)(v7 + 960) = dispatch_semaphore_create(v8);
    *(_DWORD *)(v7 + 968) = a3;
  }
  return v7;
}

uint64_t __ktrace_stream_create_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  ktrace_stream_typeid = result;
  if (!result)
    ktrace_remotetime_update_params_cold_1();
  return result;
}

uint64_t ktrace_stream_add(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v4 = *(unsigned __int8 *)(a1 + 972);
  if (v4 != ktrace_chunk_is_64_bit(a2))
    ktrace_remotetime_update_params_cold_1();
  v5 = ktrace_chunk_tag(a2);
  switch(v5)
  {
    case 7680:
      v6 = 8;
      break;
    case 20982:
      v6 = 0;
      break;
    case 7936:
      v6 = 12;
      break;
    default:
      return 22;
  }
  if (ktrace_chunk_size(a2) <= v6)
    return 55;
  v7 = malloc_type_malloc(0x20uLL, 0x10200404161829EuLL);
  if (!v7)
    return 12;
  v7[1] = 0;
  v7[2] = 0;
  v8 = *(_QWORD *)(a1 + 40);
  v7[3] = v8;
  *v7 = a2;
  if (v8)
    *(_QWORD *)(v8 + 16) = v7;
  if (!*(_QWORD *)(a1 + 32))
    *(_QWORD *)(a1 + 32) = v7;
  v9 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  return v9;
}

uint64_t ktrace_stream_iterate_group(uint64_t a1, size_t a2, NSObject *a3, NSObject *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t);
  uint64_t v19;
  size_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const UInt8 *v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD block[9];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a5)
    ktrace_remotetime_update_params_cold_1();
  v8 = a1 + 32;
  v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    v31 = a1 + 48;
    while (1)
    {
      v12 = (uint64_t *)*v7;
      if (!*v7)
        return 0;
      v13 = ktrace_chunk_tag(*v7);
      v14 = ktrace_chunk_size((uint64_t)v12);
      v15 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      if (v15 > v14)
        ktrace_remotetime_update_params_cold_1();
      v16 = v14;
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 960), 0xFFFFFFFFFFFFFFFFLL);
      if (v13 == 20982)
        break;
      if (v13 == 7936)
      {
        if (v16 < 0xD)
          goto LABEL_47;
        if (!*(_QWORD *)(*(_QWORD *)v8 + 8))
          *(_QWORD *)(*(_QWORD *)v8 + 8) = 12;
        v25 = 0x200000;
        if ((*(_DWORD *)(a1 + 968) & 1) == 0)
          v25 = 0x400000;
        if (v25 >= a2)
          v20 = a2;
        else
          v20 = v25;
        if (*(_BYTE *)(a1 + 972))
          v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))stream_decompress_64;
        else
          v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))stream_decompress_32;
        v19 = a1;
        v21 = a3;
        v22 = a4;
        v23 = a5;
        v24 = v31;
LABEL_31:
        v26 = convert_events(v19, v20, v21, v22, v23, v18, v24);
        if ((_DWORD)v26)
        {
          v29 = v26;
          goto LABEL_49;
        }
        goto LABEL_32;
      }
      if (v13 != 7680)
        ktrace_stream_iterate_group_cold_4();
      if (v16 < 8)
      {
LABEL_47:
        v29 = 79;
LABEL_49:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 960));
        return v29;
      }
      v17 = 72;
      if (!*(_BYTE *)(a1 + 972))
        v17 = 40;
      if (v16 < v17)
      {
        ktrace_chunk_queue_dequeue(v8);
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 960));
LABEL_32:
        v7 = *(uint64_t **)v8;
        goto LABEL_33;
      }
      if (!v15)
        v15 = 8;
      if (v16 - v15 >= a2)
        v27 = a2;
      else
        v27 = v16 - v15;
      v28 = ktrace_chunk_map_data(v12, v15, v27);
      if (!v28)
      {
        v29 = *__error();
        goto LABEL_49;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __ktrace_stream_iterate_group_block_invoke;
      block[3] = &unk_1E5F70B38;
      block[4] = a5;
      block[5] = v28;
      block[6] = v27;
      block[7] = v12;
      block[8] = a1;
      if (a4)
        dispatch_group_async(a4, a3, block);
      else
        dispatch_async(a3, block);
      v7 = *(uint64_t **)v8;
      *(_QWORD *)(*(_QWORD *)v8 + 8) = v27 + v15;
      if (v27 + v15 == v16)
      {
        ktrace_chunk_queue_dequeue(v8);
        goto LABEL_32;
      }
LABEL_33:
      if (!v7)
        return 0;
    }
    if (*(_BYTE *)(a1 + 972))
      v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))convert_artrace_events_64;
    else
      v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))convert_artrace_events_32;
    v19 = a1;
    v20 = a2;
    v21 = a3;
    v22 = a4;
    v23 = a5;
    v24 = 0;
    goto LABEL_31;
  }
  return 0;
}

void ktrace_chunk_queue_dequeue(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = *(_QWORD **)a1;
  if (v2)
  {
    v3 = v2[2];
    *(_QWORD *)a1 = v3;
    if (v2 == *(_QWORD **)(a1 + 8))
      *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      *(_QWORD *)(v3 + 24) = 0;
    free(v2);
    ktrace_compressor_reset((_DWORD *)(a1 + 16));
  }
}

intptr_t __ktrace_stream_iterate_group_block_invoke(_QWORD *a1)
{
  (*(void (**)(void))(a1[4] + 16))();
  ktrace_chunk_unmap_data(a1[7], a1[5], a1[6]);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1[8] + 960));
}

uint64_t convert_events(uint64_t a1, size_t a2, NSObject *a3, NSObject *a4, uint64_t a5, uint64_t (*a6)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t), uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const UInt8 *v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  NSObject *v30;
  int v31;
  NSObject *queue;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t (*v36)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t);
  char *v37;
  _QWORD block[8];
  size_t v40;
  uint64_t v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a5)
    ktrace_remotetime_update_params_cold_1();
  if (!a6)
    ktrace_remotetime_update_params_cold_1();
  v12 = a1;
  v14 = a1 + 32;
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    v15 = *(uint64_t **)v13;
  else
    v15 = 0;
  v16 = *(_QWORD *)(v13 + 8);
  v17 = ktrace_chunk_size((uint64_t)v15);
  if (v16 >= v17)
    return 0;
  v18 = v17;
  v37 = (char *)malloc_type_malloc(a2, 0xBA32FD9BuLL);
  if (!v37)
    return 12;
  if (!a2)
  {
    v24 = 0;
LABEL_35:
    free(v37);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v12 + 960));
    return v24;
  }
  v35 = v12;
  v36 = a6;
  v33 = a5;
  v34 = a4;
  queue = a3;
  v19 = 0;
  while (1)
  {
    if (v18 - v16 >= 0x400000)
      v20 = 0x400000;
    else
      v20 = v18 - v16;
    v40 = 0;
    v41 = 0;
    v21 = v18 - v16;
    if (v18 == v16)
    {
LABEL_25:
      ktrace_chunk_queue_dequeue(v14);
LABEL_26:
      v24 = 0;
      goto LABEL_32;
    }
    v22 = ktrace_chunk_map_data(v15, v16, v20);
    if (!v22)
    {
      v24 = *__error();
      goto LABEL_32;
    }
    v23 = (unint64_t)v22;
    v40 = a2;
    v41 = v20;
    v24 = v36(v22, &v41, &v37[v19], &v40, a7);
    ktrace_chunk_unmap_data((uint64_t)v15, v23, v20);
    if ((_DWORD)v24)
      goto LABEL_32;
    v25 = v40;
    if (!v40)
      break;
    v19 += v40;
    v26 = v41;
    v16 += v41;
    *(_QWORD *)(*(_QWORD *)v14 + 8) = v16;
    if (v21 == v26)
      goto LABEL_25;
    a2 -= v25;
    if (!a2)
      goto LABEL_26;
  }
  if (v21 > 0x400000)
  {
    ktrace_log_init();
    v30 = ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      convert_events_cold_5(v20, v30);
    goto LABEL_26;
  }
  *__error() = 79;
  v27 = *__error();
  ktrace_log_init();
  v28 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    v31 = ktrace_chunk_tag((uint64_t)v15);
    *(_DWORD *)buf = 67109888;
    v43 = v31;
    v44 = 2048;
    v45 = v16;
    v46 = 2048;
    v47 = v18 - v16;
    v48 = 1024;
    v49 = v27;
    _os_log_error_impl(&dword_1AF33A000, v28, OS_LOG_TYPE_ERROR, "truncated events chunk (tag = 0x%x, offset = %llu, left = %zu) (%{errno}d)", buf, 0x22u);
  }
  *__error() = v27;
  v24 = 79;
LABEL_32:
  v12 = v35;
  if (!v19)
    goto LABEL_35;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __convert_events_block_invoke;
  block[3] = &unk_1E5F70B60;
  block[4] = v33;
  block[5] = v37;
  block[6] = v19;
  block[7] = v35;
  if (v34)
    dispatch_group_async(v34, queue, block);
  else
    dispatch_async(queue, block);
  return v24;
}

uint64_t stream_decompress_64(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unsigned int *a5)
{
  *a4 = decompress_64(a5, a1, a2, a3, *a4);
  return 0;
}

uint64_t stream_decompress_32(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unsigned int *a5)
{
  *a4 = decompress_32(a5, a1, a2, a3, *a4);
  return 0;
}

uint64_t convert_artrace_events_64(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (*a2 >= 0x30uLL)
  {
    v5 = 0;
    v4 = 0;
    v6 = *a2 / 0x30uLL;
    v7 = *a4;
    v8 = (_OWORD *)(a1 + 16);
    while (1)
    {
      v9 = v4 + 64;
      if (v4 + 64 > v7)
        break;
      v10 = *((_QWORD *)v8 - 2);
      v11 = a3 + v4;
      *(_QWORD *)v11 = v10 & 0xFFFFFFFFFFFFFFLL;
      v12 = *((unsigned int *)v8 - 1);
      *(_DWORD *)(v11 + 48) = *((_DWORD *)v8 - 2);
      *(_DWORD *)(v11 + 52) = HIBYTE(v10);
      *(_OWORD *)(v11 + 8) = *v8;
      *(_OWORD *)(v11 + 24) = v8[1];
      *(_QWORD *)(v11 + 40) = v12;
      ++v5;
      v8 += 3;
      v4 = v9;
      if (v6 == v5)
      {
        v4 = v6 << 6;
        v5 = v6;
        break;
      }
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *a2 = 48 * v5;
  *a4 = v4;
  return 0;
}

uint64_t convert_artrace_events_32(int32x4_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int32x4_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (*a2 >= 0x30uLL)
  {
    v5 = 0;
    v4 = 0;
    v6 = *a2 / 0x30uLL;
    v7 = *a4;
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4 + 32;
      if (v4 + 32 > v7)
        break;
      v10 = a3 + v4;
      *(_QWORD *)v10 = v8[-1].i64[0];
      *(int32x4_t *)(v10 + 8) = vuzp1q_s32(*v8, v8[1]);
      *(int32x2_t *)(v10 + 24) = vrev64_s32((int32x2_t)v8[-1].u64[1]);
      ++v5;
      v8 += 3;
      v4 = v9;
      if (v6 == v5)
      {
        v4 = 32 * v6;
        v5 = v6;
        break;
      }
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *a2 = 48 * v5;
  *a4 = v4;
  return 0;
}

uint64_t ktrace_stream_out_compressed(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (a2 >= 5)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  if (!a4)
    ktrace_remotetime_update_params_cold_1();
  return 22;
}

unint64_t ktrace_stream_estimate_events(uint64_t *a1)
{
  int v2;
  unint64_t v3;
  int is_64_bit;
  unint64_t v5;
  unsigned int v7;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = ktrace_chunk_tag((uint64_t)a1);
  v3 = ktrace_chunk_size((uint64_t)a1);
  is_64_bit = ktrace_chunk_is_64_bit((uint64_t)a1);
  if (v2 == 20982)
    return v3 / 0x30;
  if (v2 == 7936)
  {
    v7 = 0;
    if (ktrace_chunk_copy_data(a1, 8, &v7, 4uLL))
      return 0;
    else
      return v7;
  }
  else
  {
    v5 = (v3 - 8) >> 6;
    if (!is_64_bit)
      v5 = (v3 - 8) >> 5;
    if (v2 == 7680)
      return v5;
    else
      return 0;
  }
}

void ktrace_iter_destroy(_QWORD **a1)
{
  _QWORD *v2;
  const void *v3;
  const void *v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v2 = *a1;
  if (*a1)
  {
    v3 = (const void *)v2[1];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)v2[6];
    if (v4)
      CFRelease(v4);
    free(v2);
    *a1 = 0;
  }
}

_QWORD *ktrace_stream_create_iterator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int inited;
  int v5;
  _QWORD *v7;

  if (!a1[4])
    return 0;
  CFRetain(a1);
  v2 = malloc_type_malloc(0x40uLL, 0x10700401C01FCAEuLL);
  v7 = v2;
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  v3 = v2;
  *v2 = a1[4];
  v2[1] = a1;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  inited = ktrace_iter_init_chunk((uint64_t)v2);
  if (inited)
  {
    v5 = inited;
    ktrace_iter_destroy(&v7);
    *__error() = v5;
    return v7;
  }
  return v3;
}

uint64_t ktrace_iter_init_chunk(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  const __CFData *v8;
  uint64_t v9;
  void *v10;
  const __CFData *v11;
  CFIndex Length;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const UInt8 *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  __CFData *Mutable;
  __CFData *v23;
  unint64_t (*v24)(unsigned int *, uint64_t, unint64_t *, uint64_t, unint64_t);
  UInt8 *MutableBytePtr;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const UInt8 *BytePtr;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33[226];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56))
    return 0;
  v3 = **(uint64_t ***)a1;
  v4 = ktrace_chunk_tag((uint64_t)v3);
  if (v4 == 20982)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)v3) >= 0x30)
    {
      v10 = (void *)ktrace_chunk_size_t(v3);
      v11 = ktrace_chunk_copy_cfdata((uint64_t)v3, 0, v10);
      *(_QWORD *)(a1 + 48) = v11;
      if (v11)
      {
        *(_QWORD *)(a1 + 24) = CFDataGetBytePtr(v11);
        Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
        *(_QWORD *)(a1 + 16) = 0;
        v9 = 48;
        *(_QWORD *)(a1 + 32) = Length;
LABEL_16:
        *(_QWORD *)(a1 + 40) = v9;
LABEL_17:
        v13 = ktrace_chunk_tag((uint64_t)v3);
        result = 0;
        *(_DWORD *)(a1 + 56) = v13;
        return result;
      }
      return 12;
    }
    return 107;
  }
  if (v4 != 7936)
  {
    if (v4 != 7680)
      ktrace_stream_iterate_group_cold_4();
    v5 = ktrace_chunk_size((uint64_t)v3);
    v6 = 72;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 972))
      v6 = 40;
    if (v5 >= v6)
    {
      v7 = (void *)ktrace_chunk_size_t(v3);
      v8 = ktrace_chunk_copy_cfdata((uint64_t)v3, 0, v7);
      *(_QWORD *)(a1 + 48) = v8;
      if (v8)
      {
        *(_QWORD *)(a1 + 24) = CFDataGetBytePtr(v8);
        *(_QWORD *)(a1 + 32) = CFDataGetLength(*(CFDataRef *)(a1 + 48));
        *(_QWORD *)(a1 + 16) = 8;
        v9 = 64;
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 972))
          v9 = 32;
        goto LABEL_16;
      }
      return 12;
    }
    return 107;
  }
  v14 = ktrace_stream_estimate_events(v3);
  if (!v14)
    return 107;
  v15 = v14;
  if ((unint64_t)ktrace_chunk_size((uint64_t)v3) < 0xD)
    return 107;
  v16 = ktrace_chunk_size_t(v3);
  v17 = ktrace_chunk_map_data(v3, 0, v16);
  if (!v17)
    return *__error();
  v18 = (unint64_t)v17;
  v19 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 972) == 0;
  v20 = 64;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 972))
    v20 = 32;
  *(_QWORD *)(a1 + 40) = v20;
  v21 = 5;
  if (!v19)
    v21 = 6;
  Mutable = CFDataCreateMutable(0, v15 << v21);
  if (!Mutable)
  {
    v31 = ktrace_chunk_size_t(v3);
    ktrace_chunk_unmap_data((uint64_t)v3, v18, v31);
    return 12;
  }
  v23 = Mutable;
  CFDataSetLength(Mutable, *(_QWORD *)(a1 + 40) * v15);
  bzero(v33, 0x388uLL);
  ktrace_compressor_reset(v33);
  v32 = ktrace_chunk_size_t(v3) - 12;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 972))
    v24 = decompress_64;
  else
    v24 = decompress_32;
  MutableBytePtr = CFDataGetMutableBytePtr(v23);
  v26 = CFDataGetLength(v23);
  *(_QWORD *)(a1 + 32) = v24(v33, v18 + 12, (unint64_t *)&v32, (uint64_t)MutableBytePtr, v26);
  v27 = ktrace_chunk_size_t(v3);
  ktrace_chunk_unmap_data((uint64_t)v3, v18, v27);
  if (*(_QWORD *)(a1 + 32))
  {
    v28 = *(_QWORD *)(a1 + 32);
    if (v28 != CFDataGetLength(v23))
    {
      ktrace_log_init();
      v29 = ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
        ktrace_iter_init_chunk_cold_2(v23, (uint64_t *)(a1 + 32), v29);
      *(_QWORD *)(a1 + 32) = CFDataGetLength(v23);
    }
    BytePtr = CFDataGetBytePtr(v23);
    *(_QWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = BytePtr;
    goto LABEL_17;
  }
  CFRelease(v23);
  return 9;
}

_QWORD *ktrace_stream_create_end_iterator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int inited;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;

  if (!a1[4])
    return 0;
  CFRetain(a1);
  v2 = malloc_type_malloc(0x40uLL, 0x10700401C01FCAEuLL);
  v11 = v2;
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  v3 = v2;
  *v2 = a1[5];
  v2[1] = a1;
  *((_OWORD *)v2 + 1) = 0u;
  v4 = v2 + 2;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  inited = ktrace_iter_init_chunk((uint64_t)v2);
  if (inited)
  {
    v6 = inited;
    ktrace_iter_destroy(&v11);
    v3 = 0;
    *__error() = v6;
  }
  else
  {
    v7 = v3[2];
    v8 = v3[5];
    v9 = (v3[4] - v7) / v8;
    if ((v9 & 0x8000000000000000) != 0)
      ktrace_remotetime_update_params_cold_1();
    *v4 = v7 + (v9 - 1) * v8;
  }
  return v3;
}

__n128 ktrace_iter_copy(uint64_t a1)
{
  const void *v2;
  const void *v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRetain(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRetain(v3);
  v4 = malloc_type_malloc(0x40uLL, 0x10700401C01FCAEuLL);
  if (!v4)
    ktrace_remotetime_update_params_cold_1();
  result = *(__n128 *)a1;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v7;
  *v4 = result;
  v4[1] = v6;
  return result;
}

uint64_t ktrace_iter_prev(uint64_t *a1)
{
  uint64_t v2;
  uint64_t inited;
  int v5;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  inited = ktrace_iter_init_chunk(*a1);
  if ((_DWORD)inited)
    goto LABEL_2;
  v5 = *(_DWORD *)(v2 + 56);
  if (v5 != 7680 && v5 != 20982 && v5 != 7936)
    ktrace_stream_iterate_group_cold_4();
  if (!*(_QWORD *)(v2 + 48))
    ktrace_remotetime_update_params_cold_1();
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = v8 >= v9;
  v11 = v8 - v9;
  if (v10)
  {
    inited = 0;
    *(_QWORD *)(v2 + 16) = v11;
    return inited;
  }
  ktrace_iter_fini_chunk(v2);
  v12 = *(_QWORD *)v2;
  if (!*(_QWORD *)(*(_QWORD *)v2 + 24))
  {
LABEL_17:
    inited = 0;
LABEL_2:
    ktrace_iter_destroy((_QWORD **)a1);
    return inited;
  }
  while (1)
  {
    *(_QWORD *)v2 = *(_QWORD *)(v12 + 24);
    v13 = ktrace_iter_init_chunk(v2);
    if ((_DWORD)v13 != 107)
      break;
    v12 = *(_QWORD *)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_17;
  }
  inited = v13;
  if ((_DWORD)v13 || !*(_QWORD *)v2)
    goto LABEL_2;
  return inited;
}

void ktrace_iter_fini_chunk(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  CFRelease(v2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
}

uint64_t ktrace_iter_next(uint64_t *a1)
{
  uint64_t v2;
  uint64_t inited;
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  inited = ktrace_iter_init_chunk(*a1);
  if ((_DWORD)inited)
    goto LABEL_2;
  v5 = *(_DWORD *)(v2 + 56);
  if (v5 != 7680 && v5 != 20982 && v5 != 7936)
    ktrace_stream_iterate_group_cold_4();
  if (!*(_QWORD *)(v2 + 48))
    ktrace_remotetime_update_params_cold_1();
  v8 = *(_QWORD *)(v2 + 40);
  v9 = v8 + *(_QWORD *)(v2 + 16);
  if ((unint64_t)(v9 + v8) <= *(_QWORD *)(v2 + 32))
  {
    inited = 0;
    *(_QWORD *)(v2 + 16) = v9;
    return inited;
  }
  ktrace_iter_fini_chunk(v2);
  v10 = *(_QWORD *)v2;
  if (!*(_QWORD *)(*(_QWORD *)v2 + 16))
  {
LABEL_17:
    inited = 0;
LABEL_2:
    ktrace_iter_destroy((_QWORD **)a1);
    return inited;
  }
  while (1)
  {
    *(_QWORD *)v2 = *(_QWORD *)(v10 + 16);
    v11 = ktrace_iter_init_chunk(v2);
    if ((_DWORD)v11 != 107)
      break;
    v10 = *(_QWORD *)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_17;
  }
  inited = v11;
  if ((_DWORD)v11 || !*(_QWORD *)v2)
    goto LABEL_2;
  return inited;
}

uint64_t ktrace_iter_next_until(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = *a1;
  result = ktrace_iter_init_chunk(*a1);
  if (!(_DWORD)result)
  {
    if (!*(_QWORD *)(v4 + 48))
      ktrace_remotetime_update_params_cold_1();
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 8) + 972);
    *(_QWORD *)(v4 + 16) += *(_QWORD *)(v4 + 40);
    do
    {
      v7 = *(_DWORD *)(v4 + 56);
      if (v7 == 7680 || v7 == 7936)
      {
        v9 = *(_QWORD *)(v4 + 16);
        v11 = *(_QWORD *)(v4 + 32);
        v10 = *(_QWORD *)(v4 + 40);
        while (v10 + v9 <= v11)
        {
          v12 = *(_QWORD *)(v4 + 24) + v9;
          if (v6)
            v13 = 48;
          else
            v13 = 28;
          if ((*(unsigned int (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(unsigned int *)(v12 + v13)))
            return 0;
          v11 = *(_QWORD *)(v4 + 32);
          v10 = *(_QWORD *)(v4 + 40);
          v9 = *(_QWORD *)(v4 + 16) + v10;
          *(_QWORD *)(v4 + 16) = v9;
        }
      }
      else
      {
        if (v7 != 20982)
          ktrace_stream_iterate_group_cold_4();
        v14 = *(_QWORD *)(v4 + 16);
        v16 = *(_QWORD *)(v4 + 32);
        v15 = *(_QWORD *)(v4 + 40);
        while (v15 + v14 <= v16)
        {
          if ((*(unsigned int (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(unsigned int *)(*(_QWORD *)(v4 + 24) + v14 + 8)))
          {
            return 0;
          }
          v16 = *(_QWORD *)(v4 + 32);
          v15 = *(_QWORD *)(v4 + 40);
          v14 = *(_QWORD *)(v4 + 16) + v15;
          *(_QWORD *)(v4 + 16) = v14;
        }
      }
      result = ktrace_iter_next(a1);
    }
    while (*a1);
  }
  return result;
}

__n128 ktrace_iter_get_event(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  __n128 *v6;
  unint64_t v7;
  uint64_t v8;
  __n128 result;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 7680)
  {
    if (v2 == 20982)
    {
      v6 = (__n128 *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 16));
      v7 = v6->n128_u64[0];
      *(_QWORD *)a2 = v6->n128_u64[0] & 0xFFFFFFFFFFFFFFLL;
      v8 = v6->n128_u32[3];
      *(_DWORD *)(a2 + 48) = v6->n128_u32[2];
      *(_DWORD *)(a2 + 52) = HIBYTE(v7);
      *(__n128 *)(a2 + 8) = v6[1];
      result = v6[2];
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v8;
      return result;
    }
    if (v2 != 7936)
      ktrace_stream_iterate_group_cold_4();
  }
  if (!*(_QWORD *)(a1 + 48))
    ktrace_remotetime_update_params_cold_1();
  v3 = (uint64_t *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 16));
  v4 = *v3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 972))
  {
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v3 + 12);
    *(_QWORD *)(a2 + 8) = v3[1];
    *(_QWORD *)(a2 + 16) = v3[2];
    *(_QWORD *)(a2 + 24) = v3[3];
    *(_QWORD *)(a2 + 32) = v3[4];
    *(_QWORD *)(a2 + 40) = v3[5];
    v5 = *((_DWORD *)v3 + 13);
  }
  else
  {
    *(_QWORD *)a2 = v4 & 0xFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v3 + 7);
    *(_QWORD *)(a2 + 8) = *((unsigned int *)v3 + 2);
    *(_QWORD *)(a2 + 16) = *((unsigned int *)v3 + 3);
    *(_QWORD *)(a2 + 24) = *((unsigned int *)v3 + 4);
    *(_QWORD *)(a2 + 32) = *((unsigned int *)v3 + 5);
    *(_QWORD *)(a2 + 40) = *((unsigned int *)v3 + 6);
    v5 = *((unsigned __int8 *)v3 + 7);
  }
  *(_DWORD *)(a2 + 52) = v5;
  return result;
}

BOOL ktrace_iter_equal(unint64_t a1, unint64_t a2)
{
  _BOOL8 result;

  if (!(a1 | a2))
    return 1;
  result = 0;
  if (a1 && a2)
    return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return result;
}

void ktrace_stream_dealloc(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    v3 = (_QWORD *)(a1 + 32);
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        if (!*v2)
          break;
        ktrace_chunk_queue_dequeue((uint64_t)v3);
        v2 = (_QWORD *)*v3;
      }
      while (*v3);
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 960));
  }
}

intptr_t __convert_events_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  free(*(void **)(a1 + 40));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 56) + 960));
}

_QWORD *kthmap_create()
{
  _QWORD *v0;
  _QWORD *v1;
  CFMutableDictionaryRef v2;
  CFMutableDictionaryRef v3;
  CFMutableDictionaryRef v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFMutableDictionaryRef v10;
  CFMutableSetRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  CFDictionaryValueCallBacks v22;
  CFDictionaryValueCallBacks v23;
  CFDictionaryValueCallBacks valueCallBacks;

  v0 = malloc_type_calloc(1uLL, 0x68uLL, 0x1020040FEC3D670uLL);
  v1 = v0;
  if (v0)
  {
    *((_BYTE *)v0 + 96) |= 3u;
    *(_OWORD *)&valueCallBacks.version = xmmword_1E5F70B80;
    *(_OWORD *)&valueCallBacks.release = *(_OWORD *)&off_1E5F70B90;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)task_equal;
    *(_OWORD *)&v23.version = xmmword_1E5F70BA8;
    *(_OWORD *)&v23.release = *(_OWORD *)&off_1E5F70BB8;
    v23.equal = (CFDictionaryEqualCallBack)jetsam_coalition_equal;
    *(_OWORD *)&v22.version = xmmword_1E5F70BD0;
    *(_OWORD *)&v22.release = *(_OWORD *)&off_1E5F70BE0;
    v22.equal = (CFDictionaryEqualCallBack)thread_group_equal;
    v2 = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, &valueCallBacks);
    v1[2] = v2;
    if (!v2)
      goto LABEL_12;
    valueCallBacks.release = 0;
    v3 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &valueCallBacks);
    v1[3] = v3;
    if (!v3)
      goto LABEL_12;
    v4 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &valueCallBacks);
    v1[4] = v4;
    if (!v4)
      goto LABEL_12;
    Mutable = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &str_value_callbacks);
    v1[5] = Mutable;
    if (!Mutable)
      goto LABEL_12;
    v6 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &long_value_callbacks);
    v1[6] = v6;
    if (!v6)
      goto LABEL_12;
    v7 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &int_value_callbacks);
    v1[7] = v7;
    if (!v7)
      goto LABEL_12;
    v8 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v22);
    v1[8] = v8;
    if (!v8
      || (v22.release = 0, v9 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v22), (v1[9] = v9) == 0)
      || (v10 = CFDictionaryCreateMutable(0, 0, &long_key_callbacks, &v23), (v1[10] = v10) == 0)
      || (v11 = CFSetCreateMutable(0, 0, &long_value_set_callbacks), (v1[11] = v11) == 0))
    {
LABEL_12:
      v12 = (const void *)v1[9];
      if (v12)
        CFRelease(v12);
      v13 = (const void *)v1[8];
      if (v13)
        CFRelease(v13);
      v14 = (const void *)v1[7];
      if (v14)
        CFRelease(v14);
      v15 = (const void *)v1[6];
      if (v15)
        CFRelease(v15);
      v16 = (const void *)v1[5];
      if (v16)
        CFRelease(v16);
      v17 = (const void *)v1[4];
      if (v17)
        CFRelease(v17);
      v18 = (const void *)v1[2];
      if (v18)
        CFRelease(v18);
      v19 = (const void *)v1[3];
      if (v19)
        CFRelease(v19);
      v20 = (const void *)v1[10];
      if (v20)
        CFRelease(v20);
      free(v1);
      return 0;
    }
  }
  return v1;
}

void task_release(int a1, _QWORD *a2)
{
  void *v3;

  if (a2)
  {
    v3 = (void *)a2[3];
    if (v3)
      free(v3);
    free(a2);
  }
}

BOOL task_equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void jetsam_coalition_release(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL jetsam_coalition_equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void thread_group_release(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL thread_group_equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void kthmap_destroy(CFTypeRef *a1)
{
  if (a1)
  {
    CFRelease(a1[2]);
    CFRelease(a1[3]);
    CFRelease(a1[4]);
    CFRelease(a1[5]);
    CFRelease(a1[6]);
    CFRelease(a1[7]);
    CFRelease(a1[8]);
    CFRelease(a1[9]);
    CFRelease(a1[10]);
    CFRelease(a1[11]);
    free(a1);
  }
}

uint64_t kthmap_read_chunk(_BYTE *a1, uint64_t *a2)
{
  int v4;
  int v6;
  uint64_t v7;
  int is_64_bit;
  unsigned int v9;
  UInt8 *v10;
  unint64_t v11;
  uint64_t kdebug_map;
  const __CFData *dictionary;
  const __CFDictionary *v14;
  void (__cdecl *v15)(const void *, const void *, void *);
  const __CFData *v16;

  v4 = ktrace_chunk_tag((uint64_t)a2);
  if ((v4 - 20530) < 2 || v4 == 7424)
  {
    v6 = v4;
    v7 = ktrace_chunk_size((uint64_t)a2);
    is_64_bit = ktrace_chunk_is_64_bit((uint64_t)a2);
    v9 = ktrace_chunk_version_major((uint64_t)a2);
    v10 = (UInt8 *)ktrace_chunk_map_data(a2, 0, v7);
    if (!v10)
      return *__error();
    v11 = (unint64_t)v10;
    if (v6 == 20531)
    {
      if ((a1[96] & 2) == 0)
      {
LABEL_19:
        kdebug_map = 0;
LABEL_22:
        ktrace_chunk_unmap_data((uint64_t)a2, v11, v7);
        return kdebug_map;
      }
      dictionary = create_dictionary(v10, v7);
      if (dictionary)
      {
        v14 = dictionary;
        v15 = (void (__cdecl *)(const void *, const void *, void *))ariadne_thread_dict_apply;
LABEL_18:
        CFDictionaryApplyFunction(v14, v15, a1);
        CFRelease(v14);
        goto LABEL_19;
      }
    }
    else
    {
      if (v6 != 20530)
      {
        if (v6 == 7424)
          kdebug_map = kthmap_read_kdebug_map((uint64_t)a1, (uint64_t)v10, v7, v9 > 1, is_64_bit);
        else
          kdebug_map = 22;
        goto LABEL_22;
      }
      if ((a1[96] & 2) == 0)
        goto LABEL_19;
      v16 = create_dictionary(v10, v7);
      if (v16)
      {
        v14 = v16;
        v15 = (void (__cdecl *)(const void *, const void *, void *))_ariadne_process_dict_apply;
        goto LABEL_18;
      }
    }
    kdebug_map = 79;
    goto LABEL_22;
  }
  return 22;
}

uint64_t kthmap_read_kdebug_map(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;
  size_t v9;
  size_t v10;
  int v11;
  const char *v12;
  _DWORD *v13;
  _DWORD *v14;
  const void *v15;
  const void *v16;
  char *v17;
  unsigned int v18;
  const char *v19;
  const void *v20;
  const void *Value;
  char *v22;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  int v27;
  char *v28;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_BYTE *)(a1 + 96) & 2) == 0)
    return 0;
  if (!a4)
  {
    if (a5)
      v24 = 32;
    else
      v24 = 28;
    if (!a3)
      return 0;
    v25 = 0;
    while (1)
    {
      if (a5)
      {
        v26 = *(const void **)(a2 + v25);
        if (v26)
        {
          v27 = *(_DWORD *)(a2 + v25 + 8);
          v28 = (char *)(a2 + v25 + 12);
          goto LABEL_30;
        }
      }
      else
      {
        v26 = (const void *)*(unsigned int *)(a2 + v25);
        if ((_DWORD)v26)
        {
          v27 = *(_DWORD *)(a2 + v25 + 4);
          v28 = (char *)(a2 + v25 + 8);
LABEL_30:
          result = insert_legacy_entry_internal(a1, v26, v27, v28);
          if ((_DWORD)result)
            return result;
        }
      }
      v25 += v24;
      if (v25 >= a3)
        return 0;
    }
  }
  if (a3 >= 33)
  {
    v9 = a2 + a3;
    v10 = a2 + 32;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (*(_DWORD *)(a2 + 16))
    {
      v11 = 0;
      do
      {
        v12 = (const char *)(v10 + *(unsigned int *)(a2 + 20));
        if ((unint64_t)v12 >= v9)
          return 1;
        v13 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
        if (!v13)
          return 1;
        v14 = v13;
        *((_QWORD *)v13 + 3) = strdup(v12);
        v15 = (const void *)*(int *)(v10 + 8);
        v14[2] = (_DWORD)v15;
        v14[4] = *(_DWORD *)(v10 + 12);
        v16 = *(const void **)v10;
        *(_QWORD *)v14 = *(_QWORD *)v10;
        v17 = strdup(v12);
        *((_QWORD *)v14 + 3) = v17;
        v10 = (size_t)&v12[strlen(v17) + 1];
        if (v10 >= v9)
        {
          free(v14);
          return 1;
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v15, v14);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), v16, v14);
      }
      while (++v11 < *(_DWORD *)(a2 + 16));
    }
    if (*(_DWORD *)(a2 + 24))
    {
      v18 = 0;
      while (1)
      {
        v19 = (const char *)(v10 + *(unsigned int *)(a2 + 28));
        if ((unint64_t)v19 >= v9)
          break;
        v20 = *(const void **)v10;
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*(int *)(v10 + 8));
        if (Value)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v20, Value);
          v22 = strdup(v19);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v20, v22);
          v19 += strlen(v22) + 1;
          if ((unint64_t)v19 >= v9)
            break;
        }
        result = 0;
        ++v18;
        v10 = (size_t)v19;
        if (v18 >= *(_DWORD *)(a2 + 24))
          return result;
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t kthmap_prepass_stackshot(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _QWORD v4[5];

  if (result)
  {
    v3 = result;
    result = ktrace_chunk_tag((uint64_t)a2);
    switch((_DWORD)result)
    {
      case 0x51FE:
        goto LABEL_8;
      case 0x8002:
        result = ktrace_chunk_version_major((uint64_t)a2);
        if (result > 1)
          return result;
        goto LABEL_8;
      case 0x9000:
        result = ktrace_chunk_version_major((uint64_t)a2);
        if (!(_DWORD)result)
        {
LABEL_8:
          v4[0] = MEMORY[0x1E0C809B0];
          v4[1] = 0x40000000;
          v4[2] = __kthmap_prepass_stackshot_block_invoke;
          v4[3] = &__block_descriptor_tmp_11;
          v4[4] = v3;
          return ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v4);
        }
        break;
    }
  }
  return result;
}

void __kthmap_prepass_stackshot_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  kthmap_update_stackshot(*(_QWORD *)(a1 + 32), a2, a3);
}

void kthmap_update_stackshot(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  os_log_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  os_log_t *v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *Value;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  unint64_t v34;
  const void **v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39[15];
  char v40;
  char v41[15];
  char v42;
  char v43[15];
  char v44;
  char v45[15];

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
  v6 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    v7 = 0;
    v37 = 0;
    v8 = -1;
    v9 = (os_log_t *)&ktrace_log;
    v10 = -1;
    while (1)
    {
      v11 = *(unsigned int *)(a2 + 4);
      if (v6 + v11 > a3)
        return;
      v12 = *(_DWORD *)a2;
      v13 = *(_DWORD *)a2 & 0xFFFFFFF0;
      if (v13 == 32)
        v14 = 17;
      else
        v14 = *(_DWORD *)a2;
      if (v14 > 2309)
      {
        if (v14 > 2334)
        {
          if (v14 == 2335)
          {
            set_thread_thread_group(a1, (const void *)v10, *(void **)(a2 + 16));
          }
          else if (v14 == 2337 && v7)
          {
            v7[4] = *(_QWORD *)(a2 + 16);
          }
        }
        else if (v14 == 2310)
        {
          if ((*(_BYTE *)(a2 + 81) & 0x20) != 0 && v7)
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), *(const void **)(a2 + 16));
        }
        else if (v14 == 2313)
        {
          v16 = v11 >= (*(_DWORD *)(a2 + 8) & 0xFu);
          v17 = v11 - (*(_DWORD *)(a2 + 8) & 0xF);
          if (!v16)
            v17 = 0;
          if (*(_BYTE *)(a2 + 16 + (v17 - 1)))
          {
            ktrace_log_init();
            if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
              kthmap_update_stackshot_cold_2(&v40, v41);
          }
          else if (v10 != -1 && (*(_BYTE *)(a1 + 96) & 2) != 0)
          {
            rename_thread(a1, (const void *)v10);
          }
        }
        goto LABEL_93;
      }
      if (v14 <= 19)
        break;
      if (v14 == 20)
      {
        v24 = v37;
        if (v37 == 2)
          v10 = -1;
        --v37;
        if (v24 == 1)
        {
          v8 = -1;
          v7 = 0;
        }
        goto LABEL_93;
      }
      if (v14 == 2309 && v8 != -1)
      {
        v16 = v11 >= (*(_DWORD *)(a2 + 8) & 0xFu);
        v18 = v11 - (*(_DWORD *)(a2 + 8) & 0xF);
        if (!v16)
          v18 = 0;
        if (v18 <= 0x77)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
            kthmap_update_stackshot_cold_2(&v44, v45);
          goto LABEL_93;
        }
        if (*(_QWORD *)(a2 + 16) != v8)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
            kthmap_update_stackshot_cold_2(&v42, v43);
          goto LABEL_93;
        }
        Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*(int *)(a2 + 100));
        v7 = Value;
        if ((*(_BYTE *)(a1 + 96) & 2) != 0)
        {
          if (!Value)
          {
            v30 = task_alloc(*(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 100), (const char *)(a2 + 104), 0x20uLL);
            if (!v30)
              ktrace_remotetime_update_params_cold_1();
            v7 = v30;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*(int *)(a2 + 100), v30);
          }
          v36 = v10;
          v31 = *v7;
          if (*v7 == -1)
          {
            *v7 = v8;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), (const void *)v8, v7);
            v31 = *v7;
          }
          v32 = (char *)v7[3];
          if (v31 == v8)
          {
            *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 100);
            if (!v32)
              goto LABEL_91;
            v33 = strlen(v32);
            if (v33 < strnlen((const char *)(a2 + 104), 0x20uLL))
            {
              free(v32);
              v7[3] = 0;
              goto LABEL_91;
            }
          }
          else
          {
            if (v32)
            {
              free((void *)v7[3]);
              v7[3] = 0;
            }
            *(uint64_t *)((char *)v7 + 12) = -1;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 100);
LABEL_91:
            v7[3] = (uint64_t)strndup((const char *)(a2 + 104), 0x20uLL);
          }
LABEL_92:
          v10 = v36;
        }
      }
LABEL_93:
      a2 = v6 + *(unsigned int *)(a2 + 4);
      v6 = a2 + 16;
      if (a2 + 16 > a3)
        return;
    }
    if (v14 != 17)
    {
      if (v14 == 19)
      {
        if (v12 != 19 || v11 < 4 || v13 == 32)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
            kthmap_update_stackshot_cold_2(&v38, v39);
        }
        else
        {
          v15 = *(_DWORD *)(a2 + 16);
          ++v37;
          if (v15 == 2308)
          {
            v10 = *(_QWORD *)(a2 + 8);
            if (v7 && (*(_BYTE *)(a1 + 96) & 2) != 0)
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)(a2 + 8), v7);
          }
          else if (v15 == 2307)
          {
            v8 = *(_QWORD *)(a2 + 8);
          }
        }
      }
      goto LABEL_93;
    }
    v19 = *(_QWORD *)(a2 + 8);
    if (HIDWORD(v19) != 2334)
    {
      if (HIDWORD(v19) == 2336 && (_DWORD)v19)
      {
        v20 = v8;
        v21 = v9;
        v22 = 0;
        v23 = (uint64_t *)(a2 + 40);
        do
        {
          new_jetsam_coalition(a1, (const void *)*(v23 - 3), *(v23 - 2), *(v23 - 1), *v23);
          ++v22;
          v23 += 4;
        }
        while (v22 < *(unsigned int *)(a2 + 8));
        v9 = v21;
        v8 = v20;
      }
      goto LABEL_93;
    }
    if (v12 == 17 || !(_DWORD)v19 || (v11 - (*(_DWORD *)a2 & 0xF)) / v19 < 0x20)
    {
      if ((_DWORD)v19)
      {
        v34 = 0;
        v35 = (const void **)(a2 + 24);
        do
        {
          new_thread_group(a1, *(v35 - 1), v35);
          ++v34;
          v35 += 3;
        }
        while (v34 < *(unsigned int *)(a2 + 8));
      }
      v9 = (os_log_t *)&ktrace_log;
      goto LABEL_93;
    }
    v36 = v10;
    v25 = 0;
    v26 = a2 + 24;
    do
    {
      new_thread_group(a1, *(const void **)(v26 - 8), (_BYTE *)v26);
      v27 = *(_QWORD *)(v26 + 16);
      v28 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(v26 - 8));
      if (v28)
        v28[3] = v27 | 0x8000000000000000;
      v26 += 32;
      ++v25;
    }
    while (v25 < *(unsigned int *)(a2 + 8));
    v9 = (os_log_t *)&ktrace_log;
    goto LABEL_92;
  }
}

void kthmap_update(uint64_t a1, uint64_t a2, int a3)
{
  const void *v6;
  uint64_t v7;
  int v8;
  signed int v9;
  int v10;
  _QWORD *v11;
  void *v12;
  size_t v13;
  const void *v14;
  int v15;
  char *v16;
  void *v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  void *v21;
  const void *v22;
  CFDictionaryRef *v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  void **v34;
  void **v35;
  NSObject *v36;
  int v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  void *value;

  if (a3)
    v6 = *(const void **)(a2 + 40);
  else
    v6 = (const void *)*(unsigned int *)(a2 + 24);
  v7 = 28;
  if (a3)
    v7 = 48;
  v8 = *(_DWORD *)(a2 + v7);
  v9 = v8 & 0xFFFFFFFC;
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
  {
    if (v9 > 27721739)
    {
      if (v9 > 117440519)
      {
        if (v9 > 117506055)
        {
          if (v9 == 117506056)
          {
            if (a3)
              v33 = 32;
            else
              v33 = 16;
            rename_task_copy(a1, v6, (const char *)(a2 + 8), v33);
          }
          else if (v9 == 117506064)
          {
            if (a3)
              v30 = 32;
            else
              v30 = 16;
            if ((v8 & 1) != 0)
              rename_thread(a1, v6);
            else
              extend_thread_name(a1, v6, (const char *)(a2 + 8), v30);
          }
        }
        else if (v9 == 117440520)
        {
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), v6);
        }
        else if (v9 == 117506052)
        {
          v41 = v6;
          value = (void *)-1;
          CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), v6, (const void **)&value);
          v10 = (int)value;
          if (value != 0xFFFFFFFFLL)
          {
            value = 0;
            CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)v10, (const void **)&value);
            v11 = value;
            if (value)
            {
              if (!*(_BYTE *)(a2 + 8))
                goto LABEL_116;
              v12 = (void *)*((_QWORD *)value + 3);
              if (v12)
                free(v12);
              if (a3)
                v13 = 32;
              else
                v13 = 16;
              v11[3] = strndup((const char *)(a2 + 8), v13);
            }
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), &v41);
          }
        }
        goto LABEL_116;
      }
      if (v9 != 27721740)
      {
        if (v9 != 27721744)
        {
          if (v9 == 117440516)
          {
            if (a3)
            {
              v14 = *(const void **)(a2 + 8);
              v15 = *(_DWORD *)(a2 + 16);
              v16 = *(char **)(a2 + 32);
            }
            else
            {
              v14 = (const void *)*(unsigned int *)(a2 + 8);
              v15 = *(_DWORD *)(a2 + 12);
              v16 = (char *)*(unsigned int *)(a2 + 20);
            }
            new_thread((CFDictionaryRef *)a1, v14, v15, v6);
            if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v34 = (void **)ktrace_thread_map_task_for_thread(a1, v14);
              if (v34)
              {
                v35 = v34;
                if (*v34 == (void *)-1)
                  set_task_unique_id(a1, v34, v16);
                if (v35[4] == (void *)-1)
                  v35[4] = (void *)get_jetsam_coalition_for_tid(a1, v6);
                if (v16 != *v35)
                {
                  ktrace_log_init();
                  v36 = ktrace_log;
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
                    kthmap_update_cold_2(v36);
                }
              }
              else
              {
                v37 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                  kthmap_update_cold_1();
                *__error() = v37;
              }
            }
          }
          goto LABEL_116;
        }
        goto LABEL_59;
      }
      goto LABEL_56;
    }
    if (v9 <= 27656211)
    {
      if (v9 == 27656192)
      {
LABEL_50:
        if (a3)
          v19 = *(const void **)(a2 + 8);
        else
          v19 = (const void *)*(unsigned int *)(a2 + 8);
        new_thread_group(a1, v19, "");
        goto LABEL_116;
      }
      if (v9 == 27656200)
      {
LABEL_52:
        if (a3)
        {
          v21 = *(void **)(a2 + 16);
          v20 = *(const void **)(a2 + 24);
        }
        else
        {
          v21 = (void *)*(unsigned int *)(a2 + 12);
          v20 = (const void *)*(unsigned int *)(a2 + 16);
        }
        set_thread_thread_group(a1, v20, v21);
        goto LABEL_116;
      }
      if (v9 != 27656204)
        goto LABEL_116;
LABEL_54:
      if (a3)
        v22 = *(const void **)(a2 + 8);
      else
        v22 = (const void *)*(unsigned int *)(a2 + 8);
      if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v22))
        __strlcpy_chk();
      goto LABEL_116;
    }
    if (v9 == 27656212)
    {
LABEL_62:
      if (a3)
      {
        v26 = *(const void **)(a2 + 8);
        v27 = *(_QWORD *)(a2 + 16);
      }
      else
      {
        v26 = (const void *)*(unsigned int *)(a2 + 8);
        v27 = *(unsigned int *)(a2 + 12);
      }
      thread_group_set_flags(a1, v26, v27);
      goto LABEL_116;
    }
  }
  else
  {
    if (v9 <= 27721727)
    {
      if (v9 <= 27656203)
      {
        if (v9 != 27656192)
        {
          if (v9 != 27656200)
            goto LABEL_116;
          goto LABEL_52;
        }
        goto LABEL_50;
      }
      if (v9 != 27656204)
      {
        if (v9 != 27656212)
          goto LABEL_116;
        goto LABEL_62;
      }
      goto LABEL_54;
    }
    if (v9 > 27721739)
    {
      if (v9 != 27721740)
      {
        if (v9 != 27721744)
          goto LABEL_116;
LABEL_59:
        if (a3)
        {
          v23 = (CFDictionaryRef *)(a1 + 80);
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8)))
            goto LABEL_116;
          v24 = *(const void **)(a2 + 8);
          v25 = *(_QWORD *)(a2 + 24);
        }
        else
        {
          v23 = (CFDictionaryRef *)(a1 + 80);
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8)))
            goto LABEL_116;
          v24 = (const void *)*(unsigned int *)(a2 + 8);
          v25 = *(unsigned int *)(a2 + 16);
        }
        v32 = CFDictionaryGetValue(*v23, v24);
        if (v32)
          v32[2] = v25;
        goto LABEL_116;
      }
LABEL_56:
      if (a3)
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8)))
          goto LABEL_116;
        v17 = *(void **)(a2 + 16);
      }
      else
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8)))
          goto LABEL_116;
        v17 = (void *)*(unsigned int *)(a2 + 12);
      }
      v31 = a1;
      v18 = -1;
      goto LABEL_87;
    }
  }
  if (v9 != 27721728)
  {
    if (v9 != 27721736)
      goto LABEL_116;
    if (a3)
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8)))
        goto LABEL_116;
      v18 = *(_QWORD *)(a2 + 8);
      v17 = *(void **)(a2 + 16);
    }
    else
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8)))
        goto LABEL_116;
      v18 = *(unsigned int *)(a2 + 8);
      v17 = (void *)*(unsigned int *)(a2 + 12);
    }
    v31 = a1;
LABEL_87:
    set_task_jetsam_coalition(v31, v17, v18);
    goto LABEL_116;
  }
  if (a3)
  {
    if (*(_QWORD *)(a2 + 16) != 1)
      goto LABEL_116;
    v28 = *(const void **)(a2 + 8);
    v29 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    if (*(_DWORD *)(a2 + 12) != 1)
      goto LABEL_116;
    v29 = *(unsigned int *)(a2 + 16);
    v28 = (const void *)*(unsigned int *)(a2 + 8);
  }
  new_jetsam_coalition(a1, v28, 0, v29, 0);
LABEL_116:
  if ((*(_BYTE *)(a1 + 96) & 1) == 0)
    return;
  if (v9 == 27656196)
  {
    if (a3)
      v39 = *(const void **)(a2 + 8);
    else
      v39 = (const void *)*(unsigned int *)(a2 + 8);
    delete_thread_group(a1, v39);
  }
  else
  {
    if (v9 == 27721732)
    {
      if (a3)
      {
        if (*(_QWORD *)(a2 + 16) != 1)
          return;
        v40 = *(const void **)(a2 + 8);
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) != 1)
          return;
        v40 = (const void *)*(unsigned int *)(a2 + 8);
      }
      delete_jetsam_coalition(a1, v40);
      return;
    }
    if (v9 == 117440524 && (*(_BYTE *)(a1 + 96) & 2) != 0)
    {
      if (a3)
        v38 = *(const void **)(a2 + 8);
      else
        v38 = (const void *)*(unsigned int *)(a2 + 8);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), v38);
    }
  }
}

void new_thread(CFDictionaryRef *a1, const void *a2, int a3, const void *a4)
{
  const void *v8;
  const void *Value;
  char *v10;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v8 = (const void *)a3;
  Value = CFDictionaryGetValue(a1[2], (const void *)a3);
  if (!Value)
  {
    v10 = (char *)malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
    if (!v10)
      return;
    Value = v10;
    *(_QWORD *)v10 = -1;
    *((_DWORD *)v10 + 2) = a3;
    *(_QWORD *)(v10 + 12) = -1;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 4) = -1;
    CFDictionarySetValue(a1[2], v8, v10);
  }
  CFDictionarySetValue(a1[4], a2, Value);
  if (a4 != (const void *)-1)
  {
    CFDictionarySetValue(a1[7], a4, v8);
    CFDictionarySetValue(a1[6], a2, a4);
  }
}

void *ktrace_thread_map_task_for_thread(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  return value;
}

void set_task_unique_id(uint64_t a1, _QWORD *a2, void *key)
{
  void *value;

  value = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*a2 != -1)
    ktrace_remotetime_update_params_cold_1();
  *a2 = key;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), key, (const void **)&value))
    a2[4] = *((_QWORD *)value + 4);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, a2);
}

uint64_t get_jetsam_coalition_for_tid(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
    return *((_QWORD *)value + 4);
  else
    return -1;
}

char *rename_task_copy(uint64_t a1, const void *a2, const char *a3, size_t a4)
{
  char *result;
  _QWORD *v7;
  void *v8;
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  result = (char *)CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  v7 = value;
  if (value)
  {
    v8 = (void *)*((_QWORD *)value + 3);
    if (v8)
      free(v8);
    result = strndup(a3, a4);
    v7[3] = result;
  }
  return result;
}

void rename_thread(uint64_t a1, const void *a2)
{
  void *v4;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  v4 = malloc_type_malloc(0x40uLL, 0xD27CCDA5uLL);
  __strlcpy_chk();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, v4);
}

const char *extend_thread_name(uint64_t a1, const void *a2, const char *a3, uint64_t a4)
{
  const char *result;
  const char *v7;
  uint64_t v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = (const char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  if (result)
  {
    v7 = result;
    result = (const char *)strlen(result);
    if ((unint64_t)&result[a4 - 64] >= 0xFFFFFFFFFFFFFFBFLL)
      v8 = a4;
    else
      v8 = 63 - (_QWORD)result;
    if (v8)
      return (const char *)strlcpy((char *)&result[(_QWORD)v7], a3, v8 + 1);
  }
  return result;
}

void new_jetsam_coalition(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *Value;
  _QWORD *v11;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2))
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2);
    if (Value)
    {
      *Value = a2;
      Value[1] = a3;
      Value[2] = a4;
      Value[3] = a5;
    }
  }
  else
  {
    v11 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
    if (!v11)
      ktrace_remotetime_update_params_cold_1();
    *v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), a2, v11);
  }
}

void set_task_jetsam_coalition(uint64_t a1, void *key, uint64_t a3)
{
  _QWORD *v6;
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (key != (void *)-1)
  {
    value = 0;
    CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), key, (const void **)&value);
    if (value)
    {
      *((_QWORD *)value + 4) = a3;
    }
    else
    {
      v6 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
      if (v6)
      {
        v6[3] = 0;
        *v6 = key;
        v6[1] = -1;
        *((_DWORD *)v6 + 4) = -1;
      }
      v6[4] = a3;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, v6);
    }
  }
}

_QWORD *new_thread_group(uint64_t a1, const void *a2, _BYTE *a3)
{
  _QWORD *Value;
  _QWORD *v7;
  _QWORD *v8;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    v7 = Value;
    *Value = a2;
    if (*a3)
      __strlcpy_chk();
  }
  else
  {
    v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
    if (!v8)
      ktrace_remotetime_update_params_cold_1();
    v7 = v8;
    *v8 = a2;
    __strlcpy_chk();
    v7[3] = 0;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), a2, v7);
  }
  return v7;
}

void set_thread_thread_group(uint64_t a1, const void *a2, void *key)
{
  const void *Value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  if (Value || (Value = new_thread_group(a1, key, "")) != 0)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), a2, Value);
}

_QWORD *thread_group_set_flags(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (result)
    result[3] = a3 | 0x8000000000000000;
  return result;
}

void delete_jetsam_coalition(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 80), a2);
}

void delete_thread_group(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), a2);
}

uint64_t ktrace_thread_map_pid_for_parent_tid(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = (void *)-1;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), a2, (const void **)&value);
  return value;
}

void *ktrace_thread_map_task_for_pid(uint64_t a1, int a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  return value;
}

uint64_t kthmap_name_for_pid(uint64_t a1, int a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  if (value)
    return *((_QWORD *)value + 3);
  else
    return 0;
}

uint64_t kthmap_jetsam_coalition_for_tid(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
    return *((_QWORD *)value + 4);
  else
    return -1;
}

uint64_t kthmap_jetsam_coalition_for_pid(uint64_t a1, int a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  if (value)
    return *((_QWORD *)value + 4);
  else
    return -1;
}

const void *kthmap_thread_name_for_tid(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
}

uint64_t kthmap_thread_group_for_tid(uint64_t a1, const void *a2)
{
  const void *Value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  if (Value)
    return *(_QWORD *)Value;
  else
    return -1;
}

char *kthmap_name_for_thread_group(uint64_t a1, const void *a2)
{
  char *Value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
    return Value + 8;
  else
    return 0;
}

uint64_t kthmap_flags_for_thread_group(uint64_t a1, const void *a2, uint64_t *a3)
{
  _QWORD *Value;
  uint64_t v5;
  uint64_t result;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (!Value)
    return 2;
  v5 = Value[3];
  if ((v5 & 0x8000000000000000) == 0)
    return 91;
  result = 0;
  if (a3)
    *a3 = v5 & 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t kthmap_pid_for_tid(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
    return *((unsigned int *)value + 2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t kthmap_uniqueid_for_tid(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
    return *(_QWORD *)value;
  else
    return -1;
}

uint64_t kthmap_pid_name_for_tid(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
  {
    v4 = *((_QWORD *)value + 3);
    result = *((unsigned int *)value + 2);
  }
  else
  {
    v4 = 0;
    result = 0xFFFFFFFFLL;
  }
  *a3 = v4;
  return result;
}

uint64_t kthmap_process_name_for_tid(uint64_t a1, const void *a2)
{
  void *value;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  value = 0;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
    return *((_QWORD *)value + 3);
  else
    return 0;
}

void ktrace_thread_map_update_prepass(uint64_t a1, uint64_t a2, int a3)
{
  const void *v5;
  uint64_t v6;
  signed int v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *Value;
  size_t v16;

  if (a3)
    v5 = *(const void **)(a2 + 40);
  else
    v5 = (const void *)*(unsigned int *)(a2 + 24);
  v6 = 28;
  if (a3)
    v6 = 48;
  v7 = *(_DWORD *)(a2 + v6) & 0xFFFFFFFC;
  if ((*(_BYTE *)(a1 + 96) & 2) == 0)
  {
    if (v7 <= 27721727)
    {
      if (v7 > 27656207)
      {
        if (v7 != 27656208)
        {
          if (v7 != 27656212)
            return;
LABEL_43:
          if (a3)
          {
            thread_group_set_flags(a1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 24));
            return;
          }
          v13 = *__error();
          ktrace_log_init();
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            goto LABEL_71;
          goto LABEL_70;
        }
LABEL_41:
        if (a3)
        {
          new_thread_group(a1, *(const void **)(a2 + 8), (_BYTE *)(a2 + 16));
          return;
        }
        v13 = *__error();
        ktrace_log_init();
        if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          goto LABEL_71;
        goto LABEL_70;
      }
LABEL_27:
      if (v7 == 27656192)
      {
        if (a3)
        {
          delete_thread_group(a1, *(const void **)(a2 + 8));
          return;
        }
        v13 = *__error();
        ktrace_log_init();
        if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          goto LABEL_71;
      }
      else
      {
        if (v7 != 27656200)
          return;
        if (a3)
        {
          set_thread_thread_group(a1, *(const void **)(a2 + 24), *(void **)(a2 + 8));
          return;
        }
        v13 = *__error();
        ktrace_log_init();
        if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          goto LABEL_71;
      }
LABEL_70:
      ktrace_thread_map_update_prepass_cold_1();
LABEL_71:
      *__error() = v13;
      return;
    }
    if (v7 <= 27721735)
    {
      if (v7 != 27721728)
      {
        if (v7 != 27721732)
          return;
        goto LABEL_50;
      }
LABEL_45:
      if (a3)
      {
        if (*(_QWORD *)(a2 + 16) != 1)
          return;
        v10 = *(const void **)(a2 + 8);
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) != 1)
          return;
        v10 = (const void *)*(unsigned int *)(a2 + 8);
      }
      delete_jetsam_coalition(a1, v10);
      return;
    }
    if (v7 != 27721736)
    {
      if (v7 != 27721740)
        return;
LABEL_33:
      if (a3)
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8)))
          return;
        v9 = *(_QWORD *)(a2 + 8);
        v8 = *(void **)(a2 + 16);
      }
      else
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8)))
          return;
        v9 = *(unsigned int *)(a2 + 8);
        v8 = (void *)*(unsigned int *)(a2 + 12);
      }
      v14 = a1;
      goto LABEL_61;
    }
LABEL_38:
    if (a3)
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a2 + 8)))
        return;
      v8 = *(void **)(a2 + 16);
    }
    else
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), (const void *)*(unsigned int *)(a2 + 8)))
        return;
      v8 = (void *)*(unsigned int *)(a2 + 12);
    }
    v14 = a1;
    v9 = -1;
LABEL_61:
    set_task_jetsam_coalition(v14, v8, v9);
    return;
  }
  if (v7 <= 27721731)
  {
    if (v7 <= 27656207)
      goto LABEL_27;
    if (v7 == 27656208)
      goto LABEL_41;
    if (v7 == 27656212)
      goto LABEL_43;
    if (v7 != 27721728)
      return;
    goto LABEL_45;
  }
  if (v7 > 27721739)
  {
    if (v7 != 27721740)
    {
      if (v7 == 117506060)
      {
        if (a3)
          v16 = 32;
        else
          v16 = 16;
        rename_task_copy(a1, v5, (const char *)(a2 + 8), v16);
      }
      else if (v7 == 117440528)
      {
        new_thread((CFDictionaryRef *)a1, v5, *(_DWORD *)(a2 + 8), (const void *)0xFFFFFFFFFFFFFFFFLL);
      }
      return;
    }
    goto LABEL_33;
  }
  if (v7 != 27721732)
  {
    if (v7 != 27721736)
      return;
    goto LABEL_38;
  }
LABEL_50:
  if (a3)
  {
    if (*(_QWORD *)(a2 + 16) != 1)
      return;
    v11 = *(const void **)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    if (*(_DWORD *)(a2 + 12) != 1)
      return;
    v12 = *(unsigned int *)(a2 + 16);
    v11 = (const void *)*(unsigned int *)(a2 + 8);
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), v11);
  if (Value)
  {
    *Value = v11;
    Value[1] = 0;
    Value[2] = v12;
    Value[3] = 0;
  }
}

unint64_t ktrace_thread_map_estimate_threads(uint64_t a1)
{
  unint64_t v2;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (ktrace_chunk_tag(a1) != 7424)
    return 0;
  v2 = ktrace_chunk_size(a1);
  if (ktrace_chunk_is_64_bit(a1))
    return v2 >> 5;
  else
    return v2 / 0x1C;
}

BOOL kthmap_tid_is_main_thread(uint64_t a1, const void *a2)
{
  return CFSetGetValue(*(CFSetRef *)(a1 + 88), a2) != 0;
}

_QWORD *task_alloc(uint64_t a1, int a2, const char *a3, size_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;

  v8 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
  v9 = v8;
  if (v8)
  {
    if (a3)
    {
      v10 = strndup(a3, a4);
      v9[3] = v10;
      if (!v10)
      {
        free(v9);
        return 0;
      }
    }
    else
    {
      v8[3] = 0;
    }
    *v9 = a1;
    *((_DWORD *)v9 + 2) = a2;
    *(_QWORD *)((char *)v9 + 12) = -1;
    v9[4] = -1;
  }
  return v9;
}

void kthmap_iterate_threads(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v2;
  _QWORD context[5];

  v2 = *(const __CFDictionary **)(a1 + 32);
  context[0] = MEMORY[0x1E0C809B0];
  context[1] = 0x40000000;
  context[2] = __kthmap_iterate_threads_block_invoke;
  context[3] = &unk_1E5F70C20;
  context[4] = a2;
  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
}

uint64_t __kthmap_iterate_threads_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t kthmap_read_catalog(uint64_t a1, uint64_t a2)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __kthmap_read_catalog_block_invoke;
  v4[3] = &__block_descriptor_tmp_7_2;
  v4[4] = a1;
  ktrace_catalog_iterate_processes(a2, (uint64_t)v4);
  *(_BYTE *)(a1 + 96) &= ~2u;
  return a1;
}

uint64_t __kthmap_read_catalog_block_invoke(uint64_t a1, _QWORD *a2)
{
  const char *name;
  const char *v5;
  size_t v6;
  int v7;
  const void *v8;
  const void **Value;
  const void **v10;
  const void *v11;
  char *v12;
  _QWORD v14[6];

  name = (const char *)ktrace_process_last_name(a2);
  if (name)
  {
    v5 = name;
    v6 = strlen(name);
    v7 = ktrace_process_id(a2);
    v8 = (const void *)ktrace_process_unique_id(a2);
    Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 16), (const void *)v7);
    if (!Value)
    {
      v10 = (const void **)task_alloc((uint64_t)v8, v7, v5, v6);
      if (!v10)
        ktrace_remotetime_update_params_cold_1();
      Value = v10;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 16), (const void *)v7, v10);
    }
    v11 = *Value;
    if (*Value == (const void *)-1)
    {
      *Value = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 24), v8, Value);
      v11 = *Value;
    }
    v12 = (char *)Value[3];
    if (v11 == v8)
    {
      *((_DWORD *)Value + 2) = v7;
      if (v12)
      {
        if (strlen(v12) >= v6)
        {
LABEL_15:
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 0x40000000;
          v14[2] = __kthmap_read_catalog_block_invoke_2;
          v14[3] = &__block_descriptor_tmp_5_1;
          v14[4] = *(_QWORD *)(a1 + 32);
          v14[5] = Value;
          ktrace_process_iterate_threads(a2, (uint64_t)v14);
          return 1;
        }
        free(v12);
        Value[3] = 0;
      }
    }
    else
    {
      if (v12)
      {
        free((void *)Value[3]);
        Value[3] = 0;
      }
      *(const void **)((char *)Value + 12) = (const void *)-1;
      *((_DWORD *)Value + 2) = v7;
    }
    Value[3] = strdup(v5);
    goto LABEL_15;
  }
  return 1;
}

uint64_t __kthmap_read_catalog_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  const char *name;
  uint64_t v5;
  const void *v6;
  __CFDictionary *v7;
  const void *v8;

  name = (const char *)ktrace_thread_last_name(a2);
  if (name)
  {
    strlen(name);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (const void *)ktrace_thread_id(a2);
    rename_thread(v5, v6);
  }
  v7 = *(__CFDictionary **)(*(_QWORD *)(a1 + 32) + 32);
  v8 = (const void *)ktrace_thread_id(a2);
  CFDictionarySetValue(v7, v8, *(const void **)(a1 + 40));
  return 1;
}

const __CFData *create_dictionary(UInt8 *bytes, CFIndex length)
{
  const __CFData *v2;
  const __CFData *v3;
  const __CFData *v4;
  const __CFData *v5;
  CFTypeID v6;
  int v7;
  int v8;
  const __CFData *v9;
  int v10;

  v2 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (v2)
  {
    v3 = v2;
    v4 = (const __CFData *)CFPropertyListCreateWithData(0, v2, 0, 0, 0);
    if (v4)
    {
      v5 = v4;
      v6 = CFGetTypeID(v4);
      if (v6 == CFDictionaryGetTypeID())
      {
        CFRelease(v3);
        return v5;
      }
      v10 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        create_dictionary_cold_3();
      *__error() = v10;
      CFRelease(v3);
      v9 = v5;
    }
    else
    {
      v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        create_dictionary_cold_2();
      *__error() = v8;
      v9 = v3;
    }
    CFRelease(v9);
    return 0;
  }
  v7 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    create_dictionary_cold_1();
  v5 = 0;
  *__error() = v7;
  return v5;
}

void ariadne_thread_dict_apply(const __CFString *a1, const __CFDictionary *a2, CFDictionaryRef *a3)
{
  const char *CStringPtr;
  char *v7;
  CFIndex v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int valuePtr;
  CFStringRef theString;
  void *value;
  char *__endptr[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  theString = 0;
  value = 0;
  valuePtr = 0;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  v7 = (char *)CStringPtr;
  if (!CStringPtr)
  {
    v8 = CFStringGetLength(a1) + 1;
    v9 = (char *)malloc_type_malloc(v8, 0xAD710C5BuLL);
    if (!v9)
      ktrace_remotetime_update_params_cold_1();
    v7 = v9;
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u))
      ktrace_remotetime_update_params_cold_1();
  }
  __endptr[0] = 0;
  v10 = strtoull(v7, __endptr, 0);
  if (v7 == __endptr[0])
  {
    v12 = *__error();
    v11 = -1;
    if (CStringPtr)
    {
LABEL_6:
      if (v12)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
    v11 = v10;
    v12 = 0;
    if (CStringPtr)
      goto LABEL_6;
  }
  free(v7);
  if (v12)
  {
LABEL_7:
    v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ariadne_thread_dict_apply_cold_4();
LABEL_9:
    *__error() = v13;
    return;
  }
LABEL_13:
  if (v11 == -1)
    _os_assumes_log();
  if (!CFDictionaryGetValueIfPresent(a2, CFSTR("PID"), (const void **)&value))
  {
    v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ariadne_thread_dict_apply_cold_3();
    goto LABEL_9;
  }
  if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
  {
    new_thread(a3, (const void *)v11, valuePtr, (const void *)0xFFFFFFFFFFFFFFFFLL);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("Name"), (const void **)&theString))
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      *(_OWORD *)__endptr = 0u;
      v18 = 0u;
      if (CFStringGetCString(theString, (char *)__endptr, 65, 0x8000100u))
      {
        strlen((const char *)__endptr);
        rename_thread((uint64_t)a3, (const void *)v11);
      }
    }
  }
}

void _ariadne_process_dict_apply(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  const char *CStringPtr;
  char *v7;
  CFIndex v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  CFIndex v13;
  char *v14;
  char *v15;
  _QWORD *Value;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  CFStringRef theString;
  char *__endptr;

  theString = 0;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  v7 = (char *)CStringPtr;
  if (!CStringPtr)
  {
    v8 = CFStringGetLength(a1) + 1;
    v9 = (char *)malloc_type_malloc(v8, 0x899DF4E3uLL);
    if (!v9)
      ktrace_remotetime_update_params_cold_1();
    v7 = v9;
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u))
      ktrace_remotetime_update_params_cold_1();
  }
  __endptr = 0;
  v10 = strtol(v7, &__endptr, 0);
  if (v7 == __endptr)
  {
    v12 = *__error();
    v11 = -1;
    if (CStringPtr)
      goto LABEL_12;
  }
  else
  {
    if ((int)v10 == v10)
      v11 = v10;
    else
      v11 = -1;
    if ((int)v10 == v10)
      v12 = 0;
    else
      v12 = 34;
    if (CStringPtr)
    {
LABEL_12:
      if (v12)
        return;
      goto LABEL_16;
    }
  }
  free(v7);
  if (v12)
    return;
LABEL_16:
  if (v11 == -1)
    _os_assumes_log();
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("Name"), (const void **)&theString))
  {
    v13 = CFStringGetLength(theString) + 1;
    v14 = (char *)malloc_type_malloc(v13, 0xDF3A1DAEuLL);
    if (!v14)
      return;
    v15 = v14;
    if (CFStringGetCString(theString, v14, v13, 0x8000100u))
    {
      if (!a3)
        ktrace_remotetime_update_params_cold_1();
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), (const void *)v11);
      if (Value)
        goto LABEL_25;
      v17 = malloc_type_malloc(0x28uLL, 0x1010040139C5EC2uLL);
      if (v17)
      {
        Value = v17;
        *v17 = -1;
        *((_DWORD *)v17 + 2) = v11;
        *(_QWORD *)((char *)v17 + 12) = -1;
        v17[3] = 0;
        v17[4] = -1;
LABEL_25:
        if (v11)
          v18 = -1;
        else
          v18 = 0;
        *Value = v18;
        Value[3] = v15;
        Value[4] = 0;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), (const void *)v11, Value);
        return;
      }
    }
    free(v15);
    return;
  }
  v19 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    _ariadne_process_dict_apply_cold_3();
  *__error() = v19;
}

uint64_t insert_legacy_entry_internal(uint64_t a1, const void *a2, _BOOL4 a3, char *__s1)
{
  _BOOL8 v7;
  const void *Value;
  const void *v9;
  _QWORD *v10;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a3)
    a3 = strcmp(__s1, "kernel_task") != 0;
  v7 = a3;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)a3);
  if (Value)
  {
    v9 = Value;
    if (!*((_QWORD *)Value + 3))
      *((_QWORD *)Value + 3) = strndup(__s1, 0x14uLL);
    goto LABEL_9;
  }
  v10 = task_alloc(-1, v7, __s1, 0x14uLL);
  if (v10)
  {
    v9 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, v10);
LABEL_9:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v9);
    return 0;
  }
  return 12;
}

void OUTLINED_FUNCTION_3_2(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

_BYTE *OUTLINED_FUNCTION_5_3(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

uint64_t ktrace_address_space_create(int a1)
{
  uint64_t Instance;
  uint64_t v3;
  _QWORD *v4;

  ktrace_log_init();
  if (ktrace_register_types(void)::once != -1)
    dispatch_once(&ktrace_register_types(void)::once, &__block_literal_global_110);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    ktrace_remotetime_update_params_cold_1();
  v3 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_DWORD *)(Instance + 32) = a1;
  *(_QWORD *)(Instance + 24) = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *(_QWORD *)(v3 + 16) = v4;
  return v3;
}

uint64_t ktrace_uuid_map_create(uint64_t a1, uint64_t a2)
{
  uint64_t Instance;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  _QWORD v18[5];
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  ktrace_log_init();
  if (ktrace_register_types(void)::once != -1)
    dispatch_once(&ktrace_register_types(void)::once, &__block_literal_global_110);
  Instance = _CFRuntimeCreateInstance();
  v5 = Instance;
  if (Instance)
  {
    v6 = 4294901759;
    v7 = 0xFFFFFF8000000000;
    v8 = -4097;
    if (a2)
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __ktrace_uuid_map_create_block_invoke;
      v18[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
      v18[4] = Instance;
      ktrace_file_iterate(a2, 0, (uint64_t)v18);
      if (!*(_BYTE *)(a2 + 298))
      {
        v8 = 4294901759;
        v7 = 0x80000000;
      }
    }
    *(_QWORD *)(v5 + 272) = 0;
    if (a1)
    {
      *(_QWORD *)(v5 + 272) = *(_DWORD *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 204) << 24) | ((unint64_t)*(unsigned int *)(a1 + 196) << 32);
    }
    else
    {
      v20 = 0;
      v21 = &v20;
      v22 = 0x2020000000;
      v23 = 0;
      if (!a2)
      {
        _Block_object_dispose(&v20, 8);
        goto LABEL_25;
      }
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke;
      v19[3] = &unk_1E5F6FE28;
      v19[4] = &v20;
      v19[5] = v5 + 272;
      ktrace_file_iterate(a2, 0, (uint64_t)v19);
      v11 = *((unsigned __int8 *)v21 + 24);
      _Block_object_dispose(&v20, 8);
      if (!v11)
      {
LABEL_25:
        *(_QWORD *)(v5 + 256) = v7;
        v6 = v8;
LABEL_26:
        v10 = v6;
LABEL_27:
        *(_QWORD *)(v5 + 264) = v10;
        *(_QWORD *)(v5 + 16) = 0;
        v12 = operator new();
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_DWORD *)(v12 + 32) = 1065353216;
        *(_QWORD *)(v5 + 24) = v12;
        v13 = operator new();
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_DWORD *)(v13 + 32) = 1065353216;
        *(_QWORD *)(v5 + 32) = v13;
        v14 = operator new();
        *(_OWORD *)v14 = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_DWORD *)(v14 + 32) = 1065353216;
        *(_QWORD *)(v5 + 40) = v14;
        v15 = operator new();
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_DWORD *)(v15 + 32) = 1065353216;
        *(_QWORD *)(v5 + 216) = v15;
        std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100](v5 + 48);
        *(_OWORD *)(v5 + 80) = 0u;
        *(_OWORD *)(v5 + 96) = 0u;
        *(_OWORD *)(v5 + 112) = 0u;
        *(_OWORD *)(v5 + 128) = 0u;
        *(_OWORD *)(v5 + 144) = 0u;
        *(_OWORD *)(v5 + 160) = 0u;
        *(_OWORD *)(v5 + 176) = 0u;
        *(_OWORD *)(v5 + 192) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_DWORD *)(v5 + 80) = 1065353216;
        *(_QWORD *)(v5 + 96) = 0;
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        *(_DWORD *)(v5 + 112) = 0;
        *(_QWORD *)(v5 + 128) = 0;
        *(_QWORD *)(v5 + 136) = 0;
        *(_QWORD *)(v5 + 120) = 0;
        *(_BYTE *)(v5 + 144) = 0;
        *(_QWORD *)(v5 + 152) = -1;
        *(_OWORD *)(v5 + 160) = 0u;
        *(_OWORD *)(v5 + 176) = 0u;
        *(_DWORD *)(v5 + 192) = 1065353216;
        *(_DWORD *)(v5 + 200) = 1;
        *(_BYTE *)(v5 + 208) = 1;
        return v5;
      }
    }
    if ((CSArchitectureIsArm64() & 1) != 0)
    {
      v7 = 0xFFFFFFE000000000;
      v6 = 0xFFFFFFF27FFFFFFFLL;
      if (!a1)
        goto LABEL_23;
LABEL_14:
      v9 = *(_QWORD *)(a1 + 16);
      if (v9 == -1)
        v9 = v7;
      *(_QWORD *)(v5 + 256) = v9;
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
        goto LABEL_27;
      goto LABEL_26;
    }
    if ((CSArchitectureIsArm() & 1) != 0)
    {
      v7 = 0x80000000;
      if (a1)
        goto LABEL_14;
      goto LABEL_23;
    }
    if ((CSArchitectureIsX86_64() & 1) != 0)
    {
      v7 = 0xFFFFFF8000000000;
      v6 = -4097;
      if (a1)
        goto LABEL_14;
LABEL_23:
      v8 = v6;
      goto LABEL_25;
    }
    v17 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_uuid_map_create_cold_1(a1 == 0, a1, v17);
    CFRelease((CFTypeRef)v5);
    return 0;
  }
  return v5;
}

void sub_1AF36D850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_uuid_map_create_block_invoke(uint64_t a1, uint64_t a2)
{
  if (ktrace_chunk_tag(a2) >= 0x9000 && ktrace_chunk_tag(a2) >> 13 <= 4)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 288) = 1;
  if (ktrace_chunk_tag(a2) >= 0x5000 && ktrace_chunk_tag(a2) >> 13 <= 2)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 289) = 1;
  return 1;
}

BOOL ktrace_uuid_map_plausible_kernel_address(_BOOL8 result, unint64_t a2)
{
  if (result)
    return *(_QWORD *)(result + 256) <= a2 && *(_QWORD *)(result + 264) >= a2;
  return result;
}

void ktrace_address_space_append(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_OWORD *)a2 == 0)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      ktrace_address_space_append();
  }
  else
  {
    if (*(_DWORD *)(a2 + 16) == 3)
    {
      if ((*(_BYTE *)(a1 + 36) & 2) != 0)
      {
        v6 = *(uint64_t **)(a1 + 16);
        v8 = *v6;
        v7 = v6[1];
        while (v8 != v7)
        {
          if (*(_DWORD *)(v8 + 16) == 3)
          {
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
              ktrace_address_space_append();
            return;
          }
          v8 += 96;
        }
      }
      *(_BYTE *)(a1 + 36) |= 2u;
    }
    v3 = *(uint64_t **)(a1 + 16);
    v4 = v3[1];
    if (v4 >= v3[2])
    {
      v5 = std::vector<SymbolOwner>::__push_back_slow_path<SymbolOwner const&>(v3, (_OWORD *)a2);
    }
    else
    {
      std::vector<SymbolOwner>::__construct_one_at_end[abi:ne180100]<SymbolOwner const&>((uint64_t)v3, (_OWORD *)a2);
      v5 = v4 + 96;
    }
    v3[1] = v5;
    *(_BYTE *)(a1 + 36) &= ~1u;
  }
}

void ktrace_address_space_sort(uint64_t a1, __n128 a2)
{
  __int128 **v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL (*v8)(uint64_t, uint64_t);

  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    v3 = *(__int128 ***)(a1 + 16);
    v4 = *v3;
    v5 = v3[1];
    v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*v3) >> 5));
    v8 = ktrace_compare_symbol_owners;
    if (v5 == v4)
      v7 = 0;
    else
      v7 = v6;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>(v4, v5, (uint64_t (**)(__int128 *, __int128 *))&v8, v7, 1, a2);
    *(_BYTE *)(a1 + 36) |= 1u;
  }
}

BOOL ktrace_compare_symbol_owners(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 48) < *(_QWORD *)(a2 + 48);
}

uint64_t ktrace_address_space_symbol_owner_for_address(uint64_t a1, unint64_t a2, __n128 a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  ktrace_address_space_sort(a1, a3);
  v5 = *(uint64_t **)(a1 + 16);
  v7 = *v5;
  v6 = v5[1];
  while (1)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5);
    if (!v8)
      return 0;
    if (v8 == 1)
      break;
    if (*(_QWORD *)(v7 + 96 * ((v6 - v7) / 192) + 48) <= a2)
      v7 += 96 * ((v6 - v7) / 192);
    else
      v6 = v7 + 96 * ((v6 - v7) / 192);
  }
  v9 = *(_QWORD *)(v7 + 48);
  v10 = a2 >= v9;
  v11 = a2 - v9;
  if (!v10)
    return 0;
  if (*(_QWORD *)(v7 + 56))
  {
    if (v11 < optional_uint64::value((optional_uint64 *)(v7 + 56)))
      return v7;
    return 0;
  }
  if (HIDWORD(v11) && *(_DWORD *)(v7 + 16) != 4)
    return 0;
  return v7;
}

uint64_t optional_uint64::value(optional_uint64 *this)
{
  if (!*(_QWORD *)this)
    ktrace_remotetime_update_params_cold_1();
  return *(_QWORD *)this - 1;
}

_DWORD *ktrace_address_space_from_stackshot(kcdata_iter a1)
{
  kcdata_item *end;
  kcdata_item_t item;
  uint64_t v3;
  _DWORD *v4;
  optional_uint64 *v5;
  kcdata_item_t v6;
  unsigned int v8;
  _BYTE *v9;
  uint64_t size;
  uint32_t type;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t flags;
  unsigned int v20;
  unsigned int v21;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v28;
  unsigned int v29;
  const unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v49;
  unint64_t v50;
  SymbolOwner *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _BYTE *v56;
  optional_uint64 *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[6];
  char v71;
  _BYTE v72[15];
  _OWORD v73[6];
  char v74;
  _BYTE v75[15];
  _OWORD v76[6];
  __int128 v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  _BYTE v83[7];

  end = (kcdata_item *)a1.end;
  item = a1.item;
  v3 = ktrace_address_space_create(-1);
  v4 = (_DWORD *)v3;
  if (!v3)
    return v4;
  *(_QWORD *)(v3 + 24) = item->flags + 1;
  v5 = (optional_uint64 *)(v3 + 24);
  v6 = item + 1;
  if (&item[1] <= end)
  {
    v8 = 0;
    v9 = v83;
    do
    {
      size = item->size;
      if ((kcdata_item_t)((char *)v6 + size) > end)
        break;
      type = item->type;
      v12 = item->type & 0xFFFFFFF0;
      if (v12 == 32)
        v13 = 17;
      else
        v13 = item->type;
      switch(v13)
      {
        case 2309:
          v14 = item->flags & 0xF;
          v15 = size >= v14;
          v16 = size - v14;
          if (!v15)
            v16 = 0;
          if (v16 >= 0x78)
          {
            v4[8] = item[6].size;
            goto LABEL_214;
          }
          break;
        case 20:
          if (v8 < 2)
          {
            if (v4[8] != -1)
              return v4;
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
              ktrace_address_space_from_stackshot();
            goto LABEL_5;
          }
          --v8;
          goto LABEL_214;
        case 19:
          ++v8;
          goto LABEL_214;
      }
      v17 = type == 17;
      if (v12 != 32 && type != 17)
        goto LABEL_196;
      flags = item->flags;
      if ((_DWORD)flags)
      {
        if (type == 17)
        {
          v17 = 1;
          if (SHIDWORD(flags) <= 2310)
          {
            switch(HIDWORD(flags))
            {
              case 0x30:
                v20 = 20;
                break;
              case 0x31:
                v20 = 24;
                break;
              case 0x81A:
LABEL_46:
                v20 = 8;
                break;
              default:
                goto LABEL_60;
            }
          }
          else
          {
            switch(HIDWORD(flags))
            {
              case 0x907:
                v20 = 4;
                break;
              case 0x908:
              case 0x909:
                goto LABEL_60;
              case 0x90A:
              case 0x90C:
                goto LABEL_46;
              case 0x90B:
              case 0x90D:
                v20 = 16;
                break;
              default:
                if (HIDWORD(flags) != 2369)
                  goto LABEL_60;
                v20 = 48;
                break;
            }
          }
          if (size / v20 >= flags
            && size % flags <= 0xF
            && (flags & 0xFFFFFFFF00000000) == 0x3000000000)
          {
            goto LABEL_79;
          }
          v17 = 1;
        }
        else
        {
          v21 = size - (item->type & 0xF);
          if (size >= (item->type & 0xF)
            && v21 >= flags
            && !(v21 % flags)
            && (flags & 0xFFFFFFFF00000000) == 0x3000000000)
          {
            if (v21 / flags < 0x14)
            {
LABEL_34:
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
                ktrace_address_space_from_stackshot(&v82, v9);
              goto LABEL_214;
            }
LABEL_79:
            v56 = v9;
            v57 = v5;
            v28 = 0;
            do
            {
              if (item->type == 17)
              {
                if (SHIDWORD(flags) <= 2310)
                {
                  switch(HIDWORD(flags))
                  {
                    case 0x30:
                      v29 = 20;
                      break;
                    case 0x31:
                      v29 = 24;
                      break;
                    case 0x81A:
LABEL_88:
                      v29 = 8;
                      break;
                    default:
LABEL_91:
                      v29 = 0;
                      break;
                  }
                }
                else
                {
                  switch(HIDWORD(flags))
                  {
                    case 0x907:
                      v29 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_91;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_88;
                    case 0x90B:
                    case 0x90D:
                      v29 = 16;
                      break;
                    default:
                      if (HIDWORD(flags) != 2369)
                        goto LABEL_91;
                      v29 = 48;
                      break;
                  }
                }
              }
              else
              {
                v29 = (item->size - (item->type & 0xF)) / flags;
              }
              v30 = (const unsigned __int8 *)&item[1] + v29 * v28;
              if (!uuid_is_null(v30 + 4))
              {
                v31 = *(unsigned int *)v30;
                if ((_DWORD)v31)
                {
                  v80 = 0u;
                  v81 = 0u;
                  v79 = 0u;
                  v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  LODWORD(v78[0]) = 1;
                  *(_QWORD *)&v79 = v31;
                  v77 = *(_OWORD *)(v30 + 4);
                  if (!v28 && !optional_uint64::value(v57))
                    BYTE8(v81) |= 2u;
                  v76[2] = v78[1];
                  v76[3] = v79;
                  v76[4] = v80;
                  v76[5] = v81;
                  v76[0] = v77;
                  v76[1] = v78[0];
                  v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  v79 = 0u;
                  v80 = 0u;
                  v81 = 0u;
                  ktrace_address_space_append((uint64_t)v4, (uint64_t)v76);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)v76);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)&v77);
                }
              }
              ++v28;
              flags = item->flags;
            }
            while (v28 < flags);
LABEL_181:
            v5 = v57;
            v9 = v56;
            goto LABEL_214;
          }
        }
      }
      else if (!(_DWORD)size && (flags & 0xFFFFFFFF00000000) == 0x3000000000)
      {
        if (type != 17)
          goto LABEL_34;
        goto LABEL_214;
      }
LABEL_60:
      v24 = item->flags;
      if ((_DWORD)v24)
      {
        if (v17)
        {
          if (SHIDWORD(v24) <= 2310)
          {
            switch(HIDWORD(v24))
            {
              case 0x30:
                v25 = 20;
                break;
              case 0x31:
                v25 = 24;
                break;
              case 0x81A:
LABEL_106:
                v25 = 8;
                break;
              default:
                goto LABEL_117;
            }
          }
          else
          {
            switch(HIDWORD(v24))
            {
              case 0x907:
                v25 = 4;
                break;
              case 0x908:
              case 0x909:
                goto LABEL_117;
              case 0x90A:
              case 0x90C:
                goto LABEL_106;
              case 0x90B:
              case 0x90D:
                v25 = 16;
                break;
              default:
                if (HIDWORD(v24) != 2369)
                  goto LABEL_117;
                v25 = 48;
                break;
            }
          }
          if (size / v25 >= v24
            && size % v24 <= 0xF
            && (v24 & 0xFFFFFFFF00000000) == 0x3100000000)
          {
            goto LABEL_158;
          }
        }
        else
        {
          v26 = size - (item->type & 0xF);
          if (size >= (item->type & 0xF)
            && v26 >= v24
            && !(v26 % v24)
            && (v24 & 0xFFFFFFFF00000000) == 0x3100000000)
          {
            if (v26 / v24 < 0x18)
            {
LABEL_68:
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
                ktrace_address_space_from_stackshot(&v74, v75);
              goto LABEL_214;
            }
LABEL_158:
            v56 = v9;
            v57 = v5;
            v42 = 0;
            do
            {
              if (item->type == 17)
              {
                if (SHIDWORD(v24) <= 2310)
                {
                  switch(HIDWORD(v24))
                  {
                    case 0x30:
                      v43 = 20;
                      break;
                    case 0x31:
                      v43 = 24;
                      break;
                    case 0x81A:
LABEL_167:
                      v43 = 8;
                      break;
                    default:
LABEL_170:
                      v43 = 0;
                      break;
                  }
                }
                else
                {
                  switch(HIDWORD(v24))
                  {
                    case 0x907:
                      v43 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_170;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_167;
                    case 0x90B:
                    case 0x90D:
                      v43 = 16;
                      break;
                    default:
                      if (HIDWORD(v24) != 2369)
                        goto LABEL_170;
                      v43 = 48;
                      break;
                  }
                }
              }
              else
              {
                v43 = (item->size - (item->type & 0xF)) / v24;
              }
              v44 = (uint64_t)&item[1] + v43 * v42;
              if (!uuid_is_null((const unsigned __int8 *)(v44 + 8)))
              {
                v45 = *(_QWORD *)v44;
                if (*(_QWORD *)v44)
                {
                  v80 = 0u;
                  v81 = 0u;
                  v79 = 0u;
                  v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  LODWORD(v78[0]) = 1;
                  *(_QWORD *)&v79 = v45;
                  v77 = *(_OWORD *)(v44 + 8);
                  if (!v42 && !optional_uint64::value(v57))
                    BYTE8(v81) |= 2u;
                  v73[2] = v78[1];
                  v73[3] = v79;
                  v73[4] = v80;
                  v73[5] = v81;
                  v73[0] = v77;
                  v73[1] = v78[0];
                  v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  v79 = 0u;
                  v80 = 0u;
                  v81 = 0u;
                  ktrace_address_space_append((uint64_t)v4, (uint64_t)v73);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)v73);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)&v77);
                }
              }
              ++v42;
              v24 = item->flags;
            }
            while (v42 < v24);
            goto LABEL_181;
          }
        }
      }
      else if (!(_DWORD)size && (v24 & 0xFFFFFFFF00000000) == 0x3100000000)
      {
        if (!v17)
          goto LABEL_68;
        goto LABEL_214;
      }
LABEL_117:
      v33 = item->flags;
      if ((_DWORD)v33)
      {
        if (type != 17)
        {
          v35 = item->type & 0xF;
          v15 = size >= v35;
          v36 = size - v35;
          if (v15
            && v36 >= v33
            && !(v36 % v33)
            && (v33 & 0xFFFFFFFF00000000) == 0x92E00000000)
          {
            if (v36 / v33 < 0x18)
              goto LABEL_212;
            v56 = v9;
            v57 = v5;
            v38 = 0;
            do
            {
              if (item->type == 17)
              {
                if (SHIDWORD(v33) <= 2310)
                {
                  switch(HIDWORD(v33))
                  {
                    case 0x30:
                      v39 = 20;
                      break;
                    case 0x31:
                      v39 = 24;
                      break;
                    case 0x81A:
LABEL_143:
                      v39 = 8;
                      break;
                    default:
LABEL_146:
                      v39 = 0;
                      break;
                  }
                }
                else
                {
                  switch(HIDWORD(v33))
                  {
                    case 0x907:
                      v39 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_146;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_143;
                    case 0x90B:
                    case 0x90D:
                      v39 = 16;
                      break;
                    default:
                      if (HIDWORD(v33) != 2369)
                        goto LABEL_146;
                      v39 = 48;
                      break;
                  }
                }
              }
              else
              {
                v39 = (item->size - (item->type & 0xF)) / v33;
              }
              v40 = (uint64_t)&item[1] + v39 * v38;
              if (!uuid_is_null((const unsigned __int8 *)(v40 + 8)))
              {
                v41 = *(_QWORD *)v40;
                if (*(_QWORD *)v40)
                {
                  v80 = 0u;
                  v81 = 0u;
                  v79 = 0u;
                  v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  LODWORD(v78[0]) = 2;
                  *(_QWORD *)&v79 = v41;
                  v77 = *(_OWORD *)(v40 + 8);
                  strcpy((char *)v78 + 8, "__TEXT_EXEC");
                  if (!v38 && !optional_uint64::value(v57))
                    BYTE8(v81) |= 2u;
                  v70[2] = v78[1];
                  v70[3] = v79;
                  v70[4] = v80;
                  v70[5] = v81;
                  v70[0] = v77;
                  v70[1] = v78[0];
                  v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  v79 = 0u;
                  v80 = 0u;
                  v81 = 0u;
                  ktrace_address_space_append((uint64_t)v4, (uint64_t)v70);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)v70);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)&v77);
                }
              }
              ++v38;
              v33 = item->flags;
            }
            while (v38 < v33);
            goto LABEL_181;
          }
          goto LABEL_196;
        }
        if (SHIDWORD(v33) > 2310)
        {
          switch(HIDWORD(v33))
          {
            case 0x907:
              v34 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_196;
            case 0x90A:
            case 0x90C:
              goto LABEL_185;
            case 0x90B:
            case 0x90D:
              v34 = 16;
              break;
            default:
              if (HIDWORD(v33) != 2369)
                goto LABEL_196;
              v34 = 48;
              break;
          }
LABEL_191:
          if (size / v34 >= v33)
          {
            v46 = size % v33;
            v47 = v33 & 0xFFFFFFFF00000000;
            if (v46 <= 0xF && v47 == 0x92E00000000)
            {
LABEL_212:
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
                ktrace_address_space_from_stackshot(&v71, v72);
              goto LABEL_214;
            }
          }
          goto LABEL_196;
        }
        switch(HIDWORD(v33))
        {
          case 0x30:
            v34 = 20;
            goto LABEL_191;
          case 0x31:
            v34 = 24;
            goto LABEL_191;
          case 0x81A:
LABEL_185:
            v34 = 8;
            goto LABEL_191;
        }
      }
      else if (!(_DWORD)size && (v33 & 0xFFFFFFFF00000000) == 0x92E00000000)
      {
        goto LABEL_212;
      }
LABEL_196:
      if (v13 == 2312)
      {
        v52 = item->flags;
        if ((_DWORD)size == 32 && (v52 & 0x8F) == 0)
          goto LABEL_214;
        v53 = v52 & 0xF;
        v15 = size >= v53;
        v54 = size - v53;
        if (!v15)
          v54 = 0;
        if (v54 < 0x20 || uuid_is_null((const unsigned __int8 *)&item[1].flags))
          goto LABEL_214;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v59 = 0u;
        LODWORD(v59) = 3;
        v55 = item[2].flags;
        *((_QWORD *)&v59 + 1) = *(_QWORD *)&item[1].type + 1;
        *(_QWORD *)&v61 = v55;
        v58 = *(_OWORD *)&item[1].flags;
        ktrace_address_space_append((uint64_t)v4, (uint64_t)&v58);
        v51 = (SymbolOwner *)&v58;
      }
      else
      {
        if (v13 != 2332)
          goto LABEL_214;
        v15 = size >= (item->flags & 0xF);
        v49 = size - (item->flags & 0xF);
        if (!v15)
          v49 = 0;
        if (v49 < 0x18)
          goto LABEL_214;
        if (uuid_is_null((const unsigned __int8 *)&item[1].flags))
          goto LABEL_214;
        v50 = *(_QWORD *)&item[1].type;
        if (!v50)
          goto LABEL_214;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v65 = 0u;
        LODWORD(v65) = 4;
        v67 = v50;
        v64 = *(_OWORD *)&item[1].flags;
        ktrace_address_space_append((uint64_t)v4, (uint64_t)&v64);
        v51 = (SymbolOwner *)&v64;
      }
      SymbolOwner::~SymbolOwner(v51);
LABEL_214:
      item = (kcdata_item_t)((char *)v6 + item->size);
      v6 = item + 1;
    }
    while (&item[1] <= end);
  }
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    ktrace_address_space_from_stackshot();
LABEL_5:
  CFRelease(v4);
  return 0;
}

void sub_1AF36E664(_Unwind_Exception *a1)
{
  uint64_t v1;

  SymbolOwner::~SymbolOwner((SymbolOwner *)(v1 - 192));
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_update_with_stackshot(uint64_t a1, kcdata_iter a2, uint64_t a3)
{
  kcdata_item_t v3;
  kcdata_item *end;
  kcdata_item_t item;
  int v7;
  uint64_t size;
  uint32_t type;
  unsigned int v10;
  int v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  __n128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  SymbolOwner *v22;
  SymbolOwner *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  SymbolOwner *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t flags;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  kcdata_item_t v45;
  _QWORD *i;
  uint64_t v47;
  uint64_t v48;
  kcdata_item_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  CFTypeRef cf[2];
  __int128 v57;
  __int128 v58;
  _BYTE buf[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  CFTypeRef v63[3];
  uint64_t v64;
  kcdata_iter v65;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = a2.item + 1;
  if (&a2.item[1] > a2.end)
    return;
  if (!a1)
    return;
  end = (kcdata_item *)a2.end;
  item = a2.item;
  if ((void *)((unint64_t)v3 + a2.item->size) > a2.end)
    return;
  v49 = 0;
  v7 = 0;
  do
  {
    size = item->size;
    if ((kcdata_item_t)((char *)v3 + size) > end)
      break;
    type = item->type;
    v10 = item->type & 0xFFFFFFF0;
    if (v10 == 32)
      v11 = 17;
    else
      v11 = item->type;
    if (v11 == 19)
    {
      v12 = __CFADD__(v7++, 1);
      v13 = v12;
    }
    else
    {
      v7 -= v11 == 20;
      if (v7)
      {
        v13 = 0;
      }
      else
      {
        if (v11 != 51)
          goto LABEL_21;
        v14 = item->flags & 0xF;
        v12 = size >= v14;
        v15 = size - v14;
        if (!v12)
          v15 = 0;
        if (v15 >= 8)
        {
          v7 = 0;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)&item[1].type;
        }
        else
        {
LABEL_21:
          v7 = 0;
        }
        v13 = 1;
      }
    }
    if (type != 19 || size < 4 || v10 == 32 || item[1].type != 2307)
      goto LABEL_64;
    if (item->flags != -1)
    {
      v65.item = item;
      v65.end = end;
      v16 = ktrace_address_space_from_stackshot(v65);
      if (!v16)
        return;
      v17 = address_space_for_taskid((ktrace_uuid_map *)a1, item->flags);
      if (v17)
        goto LABEL_30;
      v37 = v16[8];
      if ((v37 & 0x80000000) == 0)
      {
        v38 = address_space_for_pid((ktrace_uuid_map *)a1, v37);
        v17 = v38;
        if (v38)
        {
          if (!v38[3])
            goto LABEL_30;
          if (optional_uint64::value((optional_uint64 *)(v38 + 3)) == item->flags)
          {
            v39 = ktrace_log;
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
            {
              v48 = *((int *)v17 + 8);
              v40 = optional_uint64::value((optional_uint64 *)(v17 + 3));
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v48;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v40;
              _os_log_fault_impl(&dword_1AF33A000, v39, OS_LOG_TYPE_FAULT, "found address space for pid %ld with taskid=%llx, but couldn't find by taskid", buf, 0x16u);
            }
LABEL_30:
            v19 = (uint64_t *)v17[2];
            v20 = *v19;
            v21 = v19[1];
            while (v20 != v21)
            {
              v22 = (SymbolOwner *)ktrace_address_space_symbol_owner_for_address((uint64_t)v16, *(_QWORD *)(v20 + 48), v18);
              v23 = v22;
              if (v22)
              {
                if (*((_QWORD *)v22 + 6) > *(_QWORD *)(v20 + 48))
                  ktrace_uuid_map_update_with_stackshot_cold_1();
                *(_QWORD *)&v58 = SymbolOwner::min_range(v22);
                *((_QWORD *)&v58 + 1) = v24;
                *(_QWORD *)&v57 = SymbolOwner::min_range((SymbolOwner *)v20);
                *((_QWORD *)&v57 + 1) = v25;
                if (Range::intersects((unint64_t *)&v58, (unint64_t *)&v57))
                {
                  if (a3)
                  {
                    v26 = *(_QWORD *)(a3 + 304);
                    if (v26)
                      LOBYTE(v26) = *(_BYTE *)(v26 + 288) != 0;
                  }
                  else
                  {
                    LOBYTE(v26) = 0;
                  }
                  goto LABEL_55;
                }
                v58 = *(_OWORD *)v23;
                v57 = *(_OWORD *)v20;
                if ((_QWORD)v58 != (_QWORD)v57 || *((_QWORD *)&v58 + 1) != *((_QWORD *)&v57 + 1))
                {
                  v33 = *(_OWORD *)(v20 + 32);
                  v34 = *(_OWORD *)(v20 + 48);
                  v35 = *(_OWORD *)(v20 + 64);
                  *(_OWORD *)v63 = *(_OWORD *)(v20 + 80);
                  v36 = *(_OWORD *)(v20 + 16);
                  *(_OWORD *)buf = *(_OWORD *)v20;
                  *(_OWORD *)&buf[16] = v36;
                  v61 = v34;
                  v62 = v35;
                  v60 = v33;
                  if (v63[0])
                    CFRetain(v63[0]);
                  ktrace_address_space_append((uint64_t)v16, (uint64_t)buf);
                  v31 = (SymbolOwner *)buf;
                  goto LABEL_48;
                }
                if (a3)
                {
                  v26 = *(_QWORD *)(a3 + 304);
                  if (v26)
                    LOBYTE(v26) = *(_BYTE *)(v26 + 288) != 0;
                }
                else
                {
                  LOBYTE(v26) = 0;
                }
LABEL_55:
                ktrace_address_space_merge_owner((uint64_t)v16, v23, v20, v26);
              }
              else
              {
                v27 = *(_OWORD *)(v20 + 32);
                v28 = *(_OWORD *)(v20 + 48);
                v29 = *(_OWORD *)(v20 + 64);
                *(_OWORD *)cf = *(_OWORD *)(v20 + 80);
                v30 = *(_OWORD *)(v20 + 16);
                v51 = *(_OWORD *)v20;
                v52 = v30;
                v54 = v28;
                v55 = v29;
                v53 = v27;
                if (cf[0])
                  CFRetain(cf[0]);
                ktrace_address_space_append((uint64_t)v16, (uint64_t)&v51);
                v31 = (SymbolOwner *)&v51;
LABEL_48:
                SymbolOwner::~SymbolOwner(v31);
              }
              v20 += 96;
              continue;
            }
          }
        }
      }
      set_address_space_for_taskid(a1, item->flags, v16);
      set_address_space_for_pid(a1, (int)v16[8], v16);
      CFRelease(v16);
LABEL_64:
      if ((v13 & 1) != 0)
      {
        LODWORD(size) = item->size;
        if (item->type == 2312)
        {
          flags = item->flags;
          if ((_DWORD)size != 32 || (flags & 0x8F) != 0)
          {
            v42 = flags & 0xF;
            v12 = size >= v42;
            v43 = size - v42;
            if (!v12)
              v43 = 0;
            v44 = v43 > 0x1F;
            v45 = v49;
            if (v44)
              v45 = item + 1;
            v49 = v45;
          }
          else
          {
            LODWORD(size) = 32;
          }
        }
      }
      else
      {
        LODWORD(size) = item->size;
      }
    }
    item = (kcdata_item_t)((char *)v3 + size);
    v3 = item + 1;
  }
  while (&item[1] <= end);
  if (v49 && !uuid_is_null((const unsigned __int8 *)&v49->flags))
  {
    v55 = 0u;
    *(_OWORD *)cf = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    LODWORD(v52) = 3;
    *((_QWORD *)&v52 + 1) = *(_QWORD *)&v49->type + 1;
    *(_QWORD *)&v54 = v49[1].flags;
    v51 = *(_OWORD *)&v49->flags;
    for (i = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 16); i; i = (_QWORD *)*i)
    {
      v47 = i[3];
      if (*(_DWORD *)(v47 + 32) && (*(_BYTE *)(v47 + 36) & 2) == 0)
      {
        v60 = v53;
        v61 = v54;
        v62 = v55;
        *(_OWORD *)v63 = *(_OWORD *)cf;
        *(_OWORD *)buf = v51;
        *(_OWORD *)&buf[16] = v52;
        if (cf[0])
          CFRetain(cf[0]);
        ktrace_address_space_append(v47, (uint64_t)buf);
        SymbolOwner::~SymbolOwner((SymbolOwner *)buf);
      }
    }
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v51);
  }
}

void sub_1AF36EBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  SymbolOwner::~SymbolOwner((SymbolOwner *)va);
  _Unwind_Resume(a1);
}

_QWORD *address_space_for_taskid(ktrace_uuid_map *a1, unint64_t a2)
{
  _QWORD *result;
  unint64_t v3;

  v3 = a2;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 == -1)
    ktrace_remotetime_update_params_cold_1();
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(*((_QWORD **)a1 + 3), &v3);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

_QWORD *address_space_for_pid(ktrace_uuid_map *a1, unint64_t a2)
{
  _QWORD *result;
  unint64_t v3;

  v3 = a2;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (a2 == -1)
    ktrace_remotetime_update_params_cold_1();
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(*((_QWORD **)a1 + 4), &v3);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

void set_address_space_for_taskid(uint64_t a1, unint64_t a2, CFTypeRef cf)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  unint64_t v8;
  unint64_t *v9;

  v8 = a2;
  if (a2 == -1)
    ktrace_remotetime_update_params_cold_1();
  if (cf)
  {
    v7 = cf;
    CFRetain(cf);
    v4 = *(_QWORD *)(a1 + 24);
    v9 = &v8;
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9);
    v6 = (const void *)v5[3];
    if (v6)
      CFRelease(v6);
    v5[3] = v7;
    v7 = 0;
    CF::TypeRef::~TypeRef(&v7);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>(*(_QWORD **)(a1 + 24), &v8);
  }
}

void sub_1AF36ED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CF::TypeRef::~TypeRef(&a9);
  _Unwind_Resume(a1);
}

void set_address_space_for_pid(uint64_t a1, unint64_t a2, CFTypeRef cf)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  unint64_t v8;
  unint64_t *v9;

  v8 = a2;
  if (a2 == -1)
    ktrace_remotetime_update_params_cold_1();
  if (cf)
  {
    v7 = cf;
    CFRetain(cf);
    v4 = *(_QWORD *)(a1 + 32);
    v9 = &v8;
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9);
    v6 = (const void *)v5[3];
    if (v6)
      CFRelease(v6);
    v5[3] = v7;
    v7 = 0;
    CF::TypeRef::~TypeRef(&v7);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>(*(_QWORD **)(a1 + 32), &v8);
  }
}

void sub_1AF36EE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CF::TypeRef::~TypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t ktrace_address_space_from_dscsym(void *a1)
{
  uint64_t v1;
  __n128 v2;
  _QWORD v4[10];
  int v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x5812000000;
  v4[3] = __Block_byref_object_copy__2;
  v4[4] = __Block_byref_object_dispose__2;
  memset(&v4[5], 0, 40);
  v5 = 1065353216;
  v1 = ktrace_address_space_create(-1);
  dscsym_iterate_buffer();
  ktrace_address_space_sort(v1, v2);
  _Block_object_dispose(v4, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&v4[6]);
  return v1;
}

void sub_1AF36EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 48);
}

uint64_t ___Z32ktrace_address_space_from_dscsymPvm_block_invoke(uint64_t a1, __int128 *a2, char *cStr, const char *a4, unint64_t a5, uint64_t a6)
{
  CFStringRef v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v15[5];
  CFTypeRef v16[2];
  const __CFString *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CFTypeRef cf[3];
  unint64_t v24;

  v24 = a5;
  if (cStr)
    v11 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  else
    v11 = 0;
  v12 = *a2;
  v19 = 0u;
  v20 = 0u;
  v22 = 0u;
  *(_OWORD *)cf = 0u;
  LODWORD(v19) = 2;
  *(_QWORD *)&v21 = a5;
  *((_QWORD *)&v21 + 1) = a6 + 1;
  v18 = v12;
  strlcpy((char *)&v19 + 8, a4, 0x11uLL);
  v17 = v11;
  if (cf[0])
  {
    CFRelease(cf[0]);
    v11 = v17;
  }
  v17 = 0;
  cf[0] = v11;
  CF::TypeRef::~TypeRef((const void **)&v17);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), &v24))
  {
    v13 = *(_QWORD *)(a1 + 40);
    v15[2] = v20;
    v15[3] = v21;
    v15[4] = v22;
    *(_OWORD *)v16 = *(_OWORD *)cf;
    v15[0] = v18;
    v15[1] = v19;
    if (cf[0])
      CFRetain(cf[0]);
    ktrace_address_space_append(v13, (uint64_t)v15);
    SymbolOwner::~SymbolOwner((SymbolOwner *)v15);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, &v24, &v24);
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v18);
  return 0;
}

void sub_1AF36F09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a24);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_sharedcache_with_buffer(ktrace_uuid_map *a1, CFUUIDBytes a2, void *a3)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  const void *v9;
  _QWORD v10[5];
  CFUUIDBytes v11;
  CFUUIDBytes *v12;

  v11 = a2;
  v4 = ktrace_address_space_from_dscsym(a3);
  if (!v4)
    ktrace_remotetime_update_params_cold_1();
  v5 = (const void *)v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___Z45ktrace_uuid_map_learn_sharedcache_with_bufferP15ktrace_uuid_map11CFUUIDBytesPvm_block_invoke;
  v10[3] = &__block_descriptor_40_e244_v24__0__SymbolOwner____CCCCCCCCCCCCCCCC__SymbolOwnerTypeProperty_i_____17c__optional_uint64_Q_____optional_uint64_Q__optional_uint64_Q__optional_uint64_Q___3Q__Q_optional_uint64_Q__fsid__2i___fsobj_id_II_____CFString_b1b1_8_optional_uint64_Q_16l;
  v10[4] = a1;
  ktrace_address_space_deep_iterate_symbol_owners((uint64_t)a1, v4, (uint64_t)v10);
  v9 = v5;
  v6 = *((_QWORD *)a1 + 5);
  v12 = &v11;
  v7 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v6, &v11, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12);
  v8 = (const void *)v7[4];
  if (v8)
    CFRelease(v8);
  v7[4] = v9;
  v9 = 0;
  CF::TypeRef::~TypeRef(&v9);
}

void sub_1AF36F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CF::TypeRef::~TypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t ktrace_address_space_deep_iterate_symbol_owners(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!result)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(uint64_t **)(a2 + 16);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    v7 = result;
    do
    {
      switch(*(_DWORD *)(v4 + 16))
      {
        case 1:
        case 2:
        case 5:
          v16 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, &v16);
          break;
        case 3:
          v20 = 0;
          v21 = 0;
          get_sc_and_slide(v7, v4, &v20, &v21);
          v19 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, &v19);
          if (v21)
          {
            v8 = v20;
            if (v20)
            {
              v9 = *(uint64_t **)(v21 + 16);
              v10 = *v9;
              v11 = v9[1];
              while (v10 != v11)
              {
                v18 = v8;
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v10, &v18);
                v10 += 96;
              }
            }
          }
          break;
        case 4:
          v12 = *(_QWORD *)(v7 + 248);
          if (v12)
          {
            v13 = *(uint64_t **)(v12 + 16);
            v14 = *v13;
            v15 = v13[1];
            while (v14 != v15)
            {
              v17 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v14, &v17);
              v14 += 96;
            }
          }
          break;
        default:
          ktrace_address_space_deep_iterate_symbol_owners();
      }
      v4 += 96;
    }
    while (v4 != v5);
  }
  return result;
}

void ___Z45ktrace_uuid_map_learn_sharedcache_with_bufferP15ktrace_uuid_map11CFUUIDBytesPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), *(CFUUIDBytes *)a2, *(CFUUIDBytes **)(a2 + 80));
}

void ktrace_uuid_map_associate_path_with_uuid(ktrace_uuid_map *a1, CFUUIDBytes a2, CFUUIDBytes *a3)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  CFTypeID v7;
  CFTypeID TypeID;
  __CFSet *v9;
  const void *v10;
  CFTypeID v11;
  __CFSet *Mutable;
  const void *v13;
  CFUUIDBytes v14;
  CFUUIDBytes *v15;

  v14 = a2;
  if (a3)
  {
    v4 = *((_QWORD *)a1 + 27);
    v15 = &v14;
    v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v4, &v14, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    v6 = (const void *)v5[4];
    if (!v6)
    {
      v15 = a3;
      CFRetain(a3);
      v10 = (const void *)v5[4];
      if (v10)
        CFRelease(v10);
      v5[4] = v15;
      goto LABEL_13;
    }
    v7 = CFGetTypeID(v6);
    TypeID = CFSetGetTypeID();
    v9 = (__CFSet *)v5[4];
    if (v7 == TypeID)
    {
      CFSetAddValue(v9, a3);
      return;
    }
    v11 = CFGetTypeID(v9);
    if (v11 != CFStringGetTypeID())
      ktrace_remotetime_update_params_cold_1();
    if (!CFEqual(a3, (CFTypeRef)v5[4]))
    {
      Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
      CFSetAddValue(Mutable, (const void *)v5[4]);
      CFSetAddValue(Mutable, a3);
      v15 = (CFUUIDBytes *)Mutable;
      v13 = (const void *)v5[4];
      if (v13)
      {
        CFRelease(v13);
        Mutable = (__CFSet *)v15;
      }
      v5[4] = Mutable;
LABEL_13:
      v15 = 0;
      CF::TypeRef::~TypeRef((const void **)&v15);
    }
  }
}

void sub_1AF36F440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ktrace_uuid_map_learn_sharedcache_with_chunk(uint64_t result, uint64_t *a2)
{
  ktrace_uuid_map *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  CFUUIDBytes v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (ktrace_uuid_map *)result;
    if (ktrace_chunk_tag((uint64_t)a2) == 32769
      || (result = ktrace_chunk_tag((uint64_t)a2), (_DWORD)result == 36869))
    {
      result = ktrace_chunk_version_major((uint64_t)a2);
      if (!(_DWORD)result)
      {
        v4 = ktrace_chunk_size((uint64_t)a2);
        result = (uint64_t)ktrace_chunk_map_data(a2, 0, v4);
        if (result)
        {
          v5 = (void *)result;
          v7 = 0;
          v8 = &v7;
          v9 = 0x2020000000;
          v10 = 0;
          *(_QWORD *)&v11.byte0 = 0;
          *(_QWORD *)&v11.byte8 = 0;
          dscsym_iterate_buffer();
          v6 = *((unsigned __int8 *)v8 + 24);
          _Block_object_dispose(&v7, 8);
          if (v6)
            ktrace_uuid_map_learn_sharedcache_with_buffer(v3, v11, v5);
          return ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, v4);
        }
      }
    }
  }
  return result;
}

void sub_1AF36F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  CFTypeID v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD context[5];
  unsigned int v17;
  uint64_t valuePtr;

  if (!a1 || ktrace_chunk_tag(a2) != 36871 || ktrace_chunk_version_major(a2))
    return;
  v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
  if (v4)
  {
    v5 = v4;
    CFAutorelease(v4);
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("Pid"));
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFNumberGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
        v7 = 0;
      }
    }
    v9 = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("LoadInfos"));
    if (v9)
    {
      v10 = v9;
      v11 = CFGetTypeID(v9);
      if (v11 == CFDictionaryGetTypeID())
      {
        if (v7)
        {
          valuePtr = 0;
          if (!CFNumberGetValue(v7, kCFNumberLongLongType, &valuePtr))
            ktrace_remotetime_update_params_cold_1();
          v12 = valuePtr;
          if ((valuePtr & 0x80000000) != 0)
          {
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
              ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_4();
          }
          else
          {
            v13 = ktrace_address_space_create(valuePtr);
            v14 = v13;
            if (!v12)
              *(_QWORD *)(v13 + 24) = 1;
            context[0] = MEMORY[0x1E0C809B0];
            context[1] = 3221225472;
            context[2] = __ktrace_uuid_map_learn_tailspin_process_info_with_chunk_block_invoke;
            context[3] = &__block_descriptor_44_e37_v24__0____CFString__8____CFNumber__16l;
            v17 = v12;
            context[4] = v13;
            CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
            set_address_space_for_pid(a1, v12, (CFTypeRef)v14);
            if (*(_QWORD *)(v14 + 24))
            {
              v15 = optional_uint64::value((optional_uint64 *)(v14 + 24));
              set_address_space_for_taskid(a1, v15, (CFTypeRef)v14);
            }
            CFRelease((CFTypeRef)v14);
          }
          return;
        }
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      }
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_2();
  }
  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_1();
  }
}

const void *cfdict_get_dictionary(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  v3 = Value;
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      return 0;
    }
  }
  return v3;
}

void __ktrace_uuid_map_learn_tailspin_process_info_with_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFNumber *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SymbolOwner *v9;
  uint64_t v10;
  _OWORD v11[6];
  _OWORD v12[6];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t valuePtr;
  unsigned __int8 uu[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(uu, 0, 16);
  v5 = utf8(a2);
  if (!uuid_parse(v5, uu))
  {
    if (*(_DWORD *)(a1 + 40))
    {
      valuePtr = 0;
      if (a3)
      {
        if (!CFNumberGetValue(a3, kCFNumberLongLongType, &valuePtr))
          ktrace_remotetime_update_params_cold_1();
        v6 = valuePtr;
      }
      else
      {
        v6 = 0;
      }
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_QWORD *)&v16 = v6;
      v13 = *(_OWORD *)uu;
      v14 = 0u;
      LODWORD(v14) = 2;
      DWORD2(v14) = 1163157343;
      *(_DWORD *)((char *)&v14 + 11) = 5527621;
      BYTE8(v18) = 1;
      v8 = *(_QWORD *)(a1 + 32);
      v11[0] = *(_OWORD *)uu;
      v11[1] = v14;
      v11[4] = 0u;
      v11[5] = v18;
      v11[2] = 0u;
      v11[3] = v16;
      v13 = 0u;
      v14 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      ktrace_address_space_append(v8, (uint64_t)v11);
      v9 = (SymbolOwner *)v11;
    }
    else
    {
      valuePtr = 0;
      if (a3)
      {
        if (!CFNumberGetValue(a3, kCFNumberLongLongType, &valuePtr))
          ktrace_remotetime_update_params_cold_1();
        v7 = valuePtr;
      }
      else
      {
        v7 = 0;
      }
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v13 = *(_OWORD *)uu;
      v14 = 0u;
      LODWORD(v14) = 5;
      *(_QWORD *)&v16 = v7;
      BYTE8(v18) = 1;
      v10 = *(_QWORD *)(a1 + 32);
      v12[2] = 0u;
      v12[3] = v16;
      v12[4] = 0u;
      v12[5] = v18;
      v12[0] = *(_OWORD *)uu;
      v12[1] = v14;
      v13 = 0u;
      v14 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      ktrace_address_space_append(v10, (uint64_t)v12);
      v9 = (SymbolOwner *)v12;
    }
    SymbolOwner::~SymbolOwner(v9);
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v13);
  }
}

void sub_1AF36FA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  SymbolOwner::~SymbolOwner((SymbolOwner *)va);
  SymbolOwner::~SymbolOwner((SymbolOwner *)(v13 - 176));
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  __CFString *Value;
  __CFString *v7;
  CFTypeID v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFString *v12;
  const __CFString *v13;
  CFTypeID v14;
  const __CFBoolean *v15;
  const __CFBoolean *v16;
  CFTypeID v17;
  char *v18;
  int v19;
  const __CFDictionary *dictionary;
  __CFDictionary *Mutable;
  CFNumberRef v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  uint64_t v26;
  _QWORD *v27;
  const void *v28;
  _QWORD *v29;
  const char *v30;
  __int128 **v31;
  __int128 *v32;
  __int128 *v33;
  __int128 v34;
  int v36;
  uint64_t v37;
  _QWORD context[5];
  CFUUIDBytes uu;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  CFUUIDBytes v44;
  __int128 valuePtr;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = 0;
  if (!a1 || ktrace_chunk_tag(a2) != 36870 || ktrace_chunk_version_major(a2))
    goto LABEL_4;
  v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
  v5 = v4;
  if (v4)
  {
    CFAutorelease(v4);
    Value = (__CFString *)CFDictionaryGetValue(v5, CFSTR("Path"));
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 == CFStringGetTypeID())
      {
        if (!CFStringGetLength(v7))
          v7 = 0;
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        v7 = 0;
      }
    }
    v9 = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("Size"));
    v10 = v9;
    if (v9)
    {
      v11 = CFGetTypeID(v9);
      if (v11 != CFNumberGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
        v10 = 0;
      }
    }
    v12 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("UUID_String"));
    v13 = v12;
    if (v12)
    {
      v14 = CFGetTypeID(v12);
      if (v14 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        v13 = 0;
      }
    }
    v15 = (const __CFBoolean *)CFDictionaryGetValue(v5, CFSTR("TEXT_EXEC"));
    v16 = v15;
    if (v15)
    {
      v17 = CFGetTypeID(v15);
      if (v17 != CFBooleanGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5();
        v16 = 0;
      }
    }
    memset(&uu, 0, sizeof(uu));
    v18 = utf8(v13);
    if (!uuid_parse(v18, &uu.byte0) && v10 && v13 && v16)
    {
      *(_QWORD *)&valuePtr = 0;
      if (!CFNumberGetValue(v10, kCFNumberLongLongType, &valuePtr))
      {
        _os_assert_log();
        v37 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v37);
      }
      v41[3] = valuePtr;
      v19 = CFBooleanGetValue(v16);
      if (!v41[3])
      {
        if (!*(_BYTE *)(a1 + 290))
        {
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_3();
          *(_BYTE *)(a1 + 290) = 1;
        }
        dictionary = (const __CFDictionary *)cfdict_get_dictionary(v5, CFSTR("Symbols"));
        if (dictionary)
        {
          context[0] = MEMORY[0x1E0C809B0];
          context[1] = 3221225472;
          context[2] = __ktrace_uuid_map_learn_tailspin_symbols_with_chunk_block_invoke;
          context[3] = &unk_1E5F70CF0;
          context[4] = &v40;
          CFDictionaryApplyFunction(dictionary, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
        }
      }
      if (v7)
        ktrace_uuid_map_associate_path_with_uuid((ktrace_uuid_map *)a1, uu, (CFUUIDBytes *)v7);
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("UUID_String"), v13);
      if (!v19)
      {
        v22 = cfnumber(v41[3]);
        CFDictionarySetValue(Mutable, CFSTR("TextSize"), v22);
      }
      if (v7)
      {
        v23 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(v23, CFSTR("unknown"), Mutable);
        CFRelease(Mutable);
        v24 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(v24, CFSTR("Path"), v7);
        CFDictionarySetValue(v24, CFSTR("Images"), v23);
        CFRelease(v23);
        v25 = *(__CFDictionary **)(a1 + 232);
        if (!v25)
        {
          v25 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(a1 + 232) = v25;
        }
        CFDictionarySetValue(v25, v7, v24);
        CFRelease(v24);
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 240);
        if (!v26)
        {
          v26 = operator new();
          *(_OWORD *)v26 = 0u;
          *(_OWORD *)(v26 + 16) = 0u;
          *(_DWORD *)(v26 + 32) = 1065353216;
          *(_QWORD *)(a1 + 240) = v26;
        }
        *(_QWORD *)&v44.byte0 = Mutable;
        *(_QWORD *)&valuePtr = &uu;
        v27 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v26, &uu, (uint64_t)&std::piecewise_construct, (_OWORD **)&valuePtr);
        v28 = (const void *)v27[4];
        if (v28)
          CFRelease(v28);
        v27[4] = *(_QWORD *)&v44.byte0;
        *(_QWORD *)&v44.byte0 = 0;
        CF::TypeRef::~TypeRef((const void **)&v44);
      }
      v29 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 16);
      if (v29)
      {
        if (v19)
          v30 = "__TEXT_EXEC";
        else
          v30 = "__TEXT";
        do
        {
          v31 = *(__int128 ***)(v29[3] + 16);
          v32 = *v31;
          v33 = v31[1];
          while (v32 != v33)
          {
            v34 = *v32;
            v44 = uu;
            valuePtr = v34;
            if ((_QWORD)v34 == *(_QWORD *)&uu.byte0 && *((_QWORD *)&v34 + 1) == *(_QWORD *)&uu.byte8)
            {
              v36 = *((_DWORD *)v32 + 4);
              if (v36 == 5)
              {
                *((_QWORD *)v32 + 3) = 0;
                *((_QWORD *)v32 + 4) = 0;
                *((_QWORD *)v32 + 5) = 0;
                *((_DWORD *)v32 + 4) = 2;
                strlcpy((char *)v32 + 24, v30, 0x11uLL);
                v36 = *((_DWORD *)v32 + 4);
              }
              if (v36 == 2 && !*((_QWORD *)v32 + 7))
              {
                *((_QWORD *)v32 + 7) = v41[3] + 1;
                if (!v7)
                  goto LABEL_68;
              }
              else if (!v7)
              {
                goto LABEL_68;
              }
              if (!*((_QWORD *)v32 + 10))
                SymbolOwner::set_path((SymbolOwner *)v32, v7);
            }
LABEL_68:
            v32 += 6;
          }
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_4();
    }
  }
  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1();
  }
LABEL_4:
  _Block_object_dispose(&v40, 8);
}

void sub_1AF370094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  CF::TypeRef::~TypeRef((const void **)(v10 - 96));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *cfdict_get_string(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  v3 = Value;
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      return 0;
    }
  }
  return v3;
}

void __ktrace_uuid_map_learn_tailspin_symbols_with_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  char *v5;
  int v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t valuePtr;

  v12 = 0;
  v5 = utf8(a2);
  v6 = sscanf(v5, "%lld", &v12);
  Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("Length"));
  if (Value)
  {
    v8 = Value;
    v9 = CFGetTypeID(Value);
    if (v9 == CFNumberGetTypeID())
    {
      if (v6 == 1)
      {
        v10 = v12;
        valuePtr = 0;
        if (!CFNumberGetValue(v8, kCFNumberLongLongType, &valuePtr))
          ktrace_remotetime_update_params_cold_1();
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        if ((unint64_t)(valuePtr + v10) > *(_QWORD *)(v11 + 24))
          *(_QWORD *)(v11 + 24) = valuePtr + v10;
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
  }
}

CFNumberRef cfnumber(uint64_t a1)
{
  CFNumberRef v1;
  CFNumberRef v2;
  uint64_t valuePtr;

  valuePtr = a1;
  v1 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  if (!v1)
    ktrace_remotetime_update_params_cold_1();
  v2 = v1;
  CFAutorelease(v1);
  return v2;
}

void SymbolOwner::set_path(SymbolOwner *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 10);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 10) = cf;
  if (cf)
    CFRetain(cf);
}

void ktrace_uuid_map_learn_ariadne_process_dict_with_chunk(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  _QWORD context[5];

  if (a1 && ktrace_chunk_tag(a2) == 20530 && !ktrace_chunk_version_major(a2))
  {
    v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
    if (v4)
    {
      v5 = v4;
      context[0] = MEMORY[0x1E0C809B0];
      context[1] = 3221225472;
      context[2] = __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke;
      context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
      context[4] = a1;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
      CFRelease(v5);
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_cold_1();
    }
  }
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  char *v4;
  int v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  CFTypeID v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  CFTypeID v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  const void *v22;
  const void *v23;
  CFTypeID v24;
  const __CFString *v25;
  const __CFString *v26;
  CFTypeID v27;
  char *v28;
  char v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  SymbolOwner *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD v40[5];
  CFTypeRef cf[2];
  _OWORD v42[5];
  CFTypeRef v43[2];
  int v44[2];
  char v45;
  _BYTE v46[15];
  char v47;
  _BYTE v48[15];
  char v49;
  _BYTE v50[15];
  char v51;
  _BYTE v52[15];
  char v53;
  _BYTE v54[7];
  uint64_t valuePtr;
  _BYTE in[48];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uuid_t uu;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v44 = 0;
  v4 = utf8(a2);
  v5 = sscanf(v4, "%ld", v44);
  Value = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("Library"));
  v7 = Value;
  if (!Value)
    goto LABEL_62;
  v8 = CFGetTypeID(Value);
  if (v8 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    goto LABEL_62;
  }
  if (v5 != 1 || *(_QWORD *)v44 >> 31)
  {
LABEL_62:
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_1();
    return;
  }
  v9 = ktrace_address_space_create(v44[0]);
  v10 = v9;
  if (!*(_QWORD *)v44)
    *(_QWORD *)(v9 + 24) = 1;
  Count = CFArrayGetCount(v7);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, i);
      v14 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v15 = CFGetTypeID(ValueAtIndex);
        if (v15 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v45, v46);
          v14 = 0;
        }
      }
      v16 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("Address"));
      v17 = v16;
      if (v16)
      {
        v18 = CFGetTypeID(v16);
        if (v18 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v47, v48);
          v17 = 0;
        }
      }
      v19 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("Length"));
      v20 = v19;
      if (v19)
      {
        v21 = CFGetTypeID(v19);
        if (v21 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v49, v50);
          v20 = 0;
        }
      }
      v22 = CFDictionaryGetValue(v14, CFSTR("Name"));
      v23 = v22;
      if (v22)
      {
        v24 = CFGetTypeID(v22);
        if (v24 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v51, v52);
          v23 = 0;
        }
      }
      v25 = (const __CFString *)CFDictionaryGetValue(v14, CFSTR("UUID"));
      v26 = v25;
      if (v25)
      {
        v27 = CFGetTypeID(v25);
        if (v27 == CFStringGetTypeID())
        {
          memset(uu, 0, sizeof(uu));
          v28 = utf8(v26);
          strcpy(in, "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
          v29 = *v28;
          if (*v28)
          {
            v30 = 0;
            v31 = in;
            do
            {
              do
                v32 = *v31++;
              while (v32 == 45);
              *(v31 - 1) = v29;
              if (v30 > 0x1E)
                break;
              v29 = v28[++v30];
            }
            while (v29);
          }
          v33 = uuid_parse(in, uu);
          if (!v17)
            continue;
LABEL_41:
          if (v20 && v23 && !v33)
          {
            if (*(_QWORD *)v44)
            {
              valuePtr = 0;
              if (!CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr))
                ktrace_remotetime_update_params_cold_1();
              v34 = valuePtr;
              valuePtr = 0;
              if (!CFNumberGetValue(v20, kCFNumberLongLongType, &valuePtr))
                ktrace_remotetime_update_params_cold_1();
              v58 = 0u;
              v59 = 0u;
              memset(&in[16], 0, 32);
              *(_DWORD *)&in[16] = 2;
              *(_QWORD *)&v57 = v34;
              *((_QWORD *)&v57 + 1) = valuePtr + 1;
              *(_OWORD *)in = *(_OWORD *)uu;
              strcpy(&in[24], "__TEXT");
              *(_QWORD *)&v59 = v23;
              CFRetain(v23);
              v40[2] = *(_OWORD *)&in[32];
              v40[3] = v57;
              v40[4] = v58;
              *(_OWORD *)cf = v59;
              v40[0] = *(_OWORD *)in;
              v40[1] = *(_OWORD *)&in[16];
              if ((_QWORD)v59)
                CFRetain((CFTypeRef)v59);
              ktrace_address_space_append(v10, (uint64_t)v40);
              v35 = (SymbolOwner *)v40;
            }
            else
            {
              valuePtr = 0;
              if (!CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr))
                ktrace_remotetime_update_params_cold_1();
              v36 = valuePtr;
              valuePtr = 0;
              if (!CFNumberGetValue(v20, kCFNumberLongLongType, &valuePtr))
                ktrace_remotetime_update_params_cold_1();
              v58 = 0u;
              v59 = 0u;
              memset(&in[16], 0, 32);
              *(_DWORD *)&in[16] = 5;
              *(_QWORD *)&v57 = v36;
              *((_QWORD *)&v57 + 1) = valuePtr + 1;
              *(_OWORD *)in = *(_OWORD *)uu;
              *(_QWORD *)&v59 = v23;
              CFRetain(v23);
              v42[2] = *(_OWORD *)&in[32];
              v42[3] = v57;
              v42[4] = v58;
              *(_OWORD *)v43 = v59;
              v42[0] = *(_OWORD *)in;
              v42[1] = *(_OWORD *)&in[16];
              if ((_QWORD)v59)
                CFRetain((CFTypeRef)v59);
              ktrace_address_space_append(v10, (uint64_t)v42);
              v35 = (SymbolOwner *)v42;
            }
            SymbolOwner::~SymbolOwner(v35);
            SymbolOwner::~SymbolOwner((SymbolOwner *)in);
          }
          continue;
        }
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v53, v54);
      }
      memset(uu, 0, sizeof(uu));
      v33 = 1;
      if (v17)
        goto LABEL_41;
    }
  }
  set_address_space_for_pid(*(_QWORD *)(a1 + 32), *(unint64_t *)v44, (CFTypeRef)v10);
  if (*(_QWORD *)(v10 + 24))
  {
    v37 = *(_QWORD *)(a1 + 32);
    v38 = optional_uint64::value((optional_uint64 *)(v10 + 24));
    set_address_space_for_taskid(v37, v38, (CFTypeRef)v10);
  }
  CFRelease((CFTypeRef)v10);
}

void sub_1AF3709A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  SymbolOwner::~SymbolOwner((SymbolOwner *)&a29);
  SymbolOwner::~SymbolOwner((SymbolOwner *)(v29 - 208));
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_inodes_with_chunk(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v5;
  const __CFData *v6;
  const __CFData *v7;
  const __CFDictionary *v8;
  CFErrorRef v9;
  CFMutableDictionaryRef Mutable;
  _QWORD v11[5];
  CFErrorRef error;
  uint8_t buf[8];
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, const __CFDictionary *);
  void *v16;
  CFMutableDictionaryRef v17;
  uint64_t v18;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 224))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_learn_inodes_with_chunk_cold_4();
      return;
    }
    v5 = (void *)ktrace_chunk_size_t(a2);
    v6 = ktrace_chunk_copy_cfdata(a2, 0, v5);
    if (v6)
    {
      v7 = v6;
      error = 0;
      v8 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v6, 0, 0, &error);
      CFRelease(v7);
      if (v8)
      {
        if (ktrace_chunk_version_major(a2))
        {
          *(_QWORD *)(a1 + 224) = v8;
          if (!*(_QWORD *)(a1 + 232))
          {
            *(_QWORD *)(a1 + 232) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v8 = *(const __CFDictionary **)(a1 + 224);
          }
          v11[0] = MEMORY[0x1E0C809B0];
          v11[1] = 3221225472;
          v11[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke;
          v11[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
          v11[4] = a1;
          CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v11);
          return;
        }
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
          ktrace_remotetime_update_params_cold_1();
        *(_QWORD *)(a1 + 224) = Mutable;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v14 = 3221225472;
        v15 = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke;
        v16 = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
        v17 = Mutable;
        v18 = a1;
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, buf);
        v9 = v8;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_inodes_with_chunk_cold_2(&error);
        v9 = error;
      }
      CFRelease(v9);
      return;
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_uuid_map_learn_inodes_with_chunk_cold_1();
  }
  else
  {
    v3 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AF33A000, v3, OS_LOG_TYPE_INFO, "skipping ktrace_uuid_map_learn_inodes_with_chunk(), uuid map was NULL.", buf, 2u);
    }
  }
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  _QWORD context[5];

  context[0] = MEMORY[0x1E0C809B0];
  context[1] = 3221225472;
  context[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_2;
  context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
  context[4] = *(_QWORD *)(a1 + 32);
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_2(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v6;
  CFTypeID v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  CFTypeID v10;
  _QWORD v11[6];

  Value = CFDictionaryGetValue(theDict, CFSTR("Path"));
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 == CFStringGetTypeID())
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 232), v6, theDict);
      v8 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("Images"));
      if (v8)
      {
        v9 = v8;
        v10 = CFGetTypeID(v8);
        if (v10 == CFDictionaryGetTypeID())
        {
          v11[0] = MEMORY[0x1E0C809B0];
          v11[1] = 3221225472;
          v11[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_3;
          v11[3] = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
          v11[4] = *(_QWORD *)(a1 + 32);
          v11[5] = v6;
          CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v11);
        }
        else
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
    }
  }
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_3(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v5;
  CFTypeID v6;
  char *v7;
  CFUUIDBytes v8;

  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("UUID_String"));
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      *(_QWORD *)&v8.byte0 = 0;
      *(_QWORD *)&v8.byte8 = 0;
      v7 = utf8(v5);
      if (!uuid_parse(v7, &v8.byte0))
        ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), v8, *(CFUUIDBytes **)(a1 + 40));
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
    }
  }
}

const void *ktrace_uuid_map_read_process_info_dict(ktrace_uuid_map *a1, CFDictionaryRef theDict, char a3)
{
  int v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  const void *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFTypeID v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  CFTypeID v15;
  const __CFString *v16;
  const __CFString *v17;
  CFTypeID v18;
  char *v19;
  const void *v20;
  const void *v21;
  CFTypeID v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFTypeID v25;
  CFIndex v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  CFTypeID v29;
  const __CFString *v30;
  const __CFString *v31;
  CFTypeID v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  CFTypeID v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  char *v39;
  CFIndex Count;
  CFIndex v42;
  _OWORD v43[5];
  CFTypeRef cf[2];
  __int128 valuePtr;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[15];
  char v55;
  _BYTE v56[15];
  char v57;
  _BYTE v58[15];
  char v59;
  _BYTE v60[15];
  uuid_t uu;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    v4 = 0;
    goto LABEL_7;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PID"));
  if (!Value)
  {
LABEL_57:
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      ktrace_uuid_map_read_process_info_dict();
    return 0;
  }
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 != CFNumberGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    goto LABEL_57;
  }
  *(_QWORD *)&valuePtr = 0;
  if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr))
    ktrace_remotetime_update_params_cold_1();
  v4 = valuePtr;
LABEL_7:
  v8 = (const void *)ktrace_address_space_create(v4);
  v9 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Binaries"));
  v10 = v9;
  if (!v9)
  {
LABEL_51:
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      ktrace_uuid_map_read_process_info_dict();
    goto LABEL_53;
  }
  v11 = CFGetTypeID(v9);
  if (v11 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    goto LABEL_51;
  }
  if (CFArrayGetCount(v10) < 1)
    return v8;
  v12 = 0;
  while (1)
  {
    v42 = v12;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v12);
    v14 = ValueAtIndex;
    if (ValueAtIndex)
    {
      v15 = CFGetTypeID(ValueAtIndex);
      if (v15 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v53, v54);
        v14 = 0;
      }
    }
    v16 = (const __CFString *)CFDictionaryGetValue(v14, CFSTR("UUID_String"));
    v17 = v16;
    if (!v16)
      goto LABEL_79;
    v18 = CFGetTypeID(v16);
    if (v18 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
LABEL_79:
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_read_process_info_dict();
      goto LABEL_53;
    }
    memset(uu, 0, sizeof(uu));
    v19 = utf8(v17);
    if (uuid_parse(v19, uu))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_read_process_info_dict();
      goto LABEL_53;
    }
    v20 = CFDictionaryGetValue(v14, CFSTR("Path"));
    v21 = v20;
    if (v20)
    {
      v22 = CFGetTypeID(v20);
      if (v22 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v55, v56);
        v21 = 0;
      }
    }
    v23 = (const __CFArray *)CFDictionaryGetValue(v14, CFSTR("Segments"));
    v24 = v23;
    if (v23)
    {
      v25 = CFGetTypeID(v23);
      if (v25 != CFArrayGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_read_process_info_dict(&v57, v58);
        v24 = 0;
      }
    }
    if (CFArrayGetCount(v24) >= 1)
      break;
LABEL_47:
    Count = CFArrayGetCount(v10);
    v12 = v42 + 1;
    if (Count <= v42 + 1)
      return v8;
  }
  v26 = 0;
  while (1)
  {
    v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v26);
    v28 = v27;
    if (v27)
    {
      v29 = CFGetTypeID(v27);
      if (v29 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v59, v60);
        v28 = 0;
      }
    }
    v30 = (const __CFString *)CFDictionaryGetValue(v28, CFSTR("Name"));
    v31 = v30;
    if (!v30)
      goto LABEL_63;
    v32 = CFGetTypeID(v30);
    if (v32 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
LABEL_63:
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_read_process_info_dict();
      goto LABEL_53;
    }
    v33 = (const __CFNumber *)CFDictionaryGetValue(v28, CFSTR("Address"));
    v34 = v33;
    if (!v33)
      goto LABEL_67;
    v35 = CFGetTypeID(v33);
    if (v35 != CFNumberGetTypeID())
      break;
    v52 = 0;
    if (!CFNumberGetValue(v34, kCFNumberLongLongType, &v52))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_read_process_info_dict();
      goto LABEL_53;
    }
    v36 = (const __CFNumber *)CFDictionaryGetValue(v28, CFSTR("Size"));
    v37 = v36;
    if (!v36)
      goto LABEL_73;
    v38 = CFGetTypeID(v36);
    if (v38 != CFNumberGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
LABEL_73:
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_read_process_info_dict();
      goto LABEL_53;
    }
    v51 = 0;
    if (!CFNumberGetValue(v37, kCFNumberLongLongType, &v51))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
        ktrace_uuid_map_read_process_info_dict();
      goto LABEL_53;
    }
    v39 = utf8(v31);
    v46 = 0u;
    v47 = 0u;
    v49 = 0u;
    v50 = 0u;
    LODWORD(v46) = 2;
    *(_QWORD *)&v48 = v52;
    *((_QWORD *)&v48 + 1) = v51 + 1;
    valuePtr = *(_OWORD *)uu;
    strlcpy((char *)&v46 + 8, v39, 0x11uLL);
    SymbolOwner::set_path((SymbolOwner *)&valuePtr, v21);
    v43[2] = v47;
    v43[3] = v48;
    v43[4] = v49;
    *(_OWORD *)cf = v50;
    v43[0] = valuePtr;
    v43[1] = v46;
    if ((_QWORD)v50)
      CFRetain((CFTypeRef)v50);
    ktrace_address_space_append((uint64_t)v8, (uint64_t)v43);
    SymbolOwner::~SymbolOwner((SymbolOwner *)v43);
    SymbolOwner::~SymbolOwner((SymbolOwner *)&valuePtr);
    if (CFArrayGetCount(v24) <= ++v26)
      goto LABEL_47;
  }
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
LABEL_67:
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    ktrace_uuid_map_read_process_info_dict();
LABEL_53:
  if (v8)
  {
    CFRelease(v8);
    return 0;
  }
  return v8;
}

void sub_1AF3715A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a15);
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a27);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_learn_kernelmap_with_chunk(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const __CFDictionary *v5;
  const UInt8 *v6;
  const __CFData *v7;
  ktrace_uuid_map *v8;
  const void *process_info_dict;

  if (a1)
  {
    v4 = ktrace_chunk_size((uint64_t)a2);
    if (ktrace_chunk_tag((uint64_t)a2) == 32773 && !ktrace_chunk_version_major((uint64_t)a2))
    {
      if (*(_QWORD *)(a1 + 248))
        return;
      v6 = ktrace_chunk_map_data(a2, 0, v4);
      if (v6)
      {
        v7 = CFDataCreateWithBytesNoCopy(0, v6, v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        v5 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v7, 0, 0, 0);
        CFRelease(v7);
        if (v5)
        {
          process_info_dict = ktrace_uuid_map_read_process_info_dict(v8, v5, 1);
          *(_QWORD *)(a1 + 248) = process_info_dict;
          if (process_info_dict)
          {
LABEL_8:
            CFRelease(v5);
LABEL_9:
            if (v6)
              ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v4);
            return;
          }
        }
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      ktrace_uuid_map_learn_kernelmap_with_chunk_cold_1();
    *(_QWORD *)(a1 + 248) = 0;
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
}

ktrace_uuid_map *ktrace_uuid_map_learn_live_kernelmap(ktrace_uuid_map *result)
{
  ktrace_uuid_map *v1;

  if (result)
  {
    v1 = result;
    if (!*((_QWORD *)result + 31))
    {
      result = (ktrace_uuid_map *)ktrace_get_live_kernel_map();
      if (result)
      {
        result = (ktrace_uuid_map *)ktrace_uuid_map_read_process_info_dict(result, (CFDictionaryRef)result, 1);
        *((_QWORD *)v1 + 31) = result;
      }
    }
  }
  return result;
}

__CFDictionary *ktrace_get_live_kernel_map()
{
  __CFDictionary *v0;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v2;
  CFMutableArrayRef v3;

  CSSymbolicatorCreateWithMachKernel();
  if ((CSIsNull() & 1) != 0)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    ktrace_remotetime_update_params_cold_1();
  v0 = Mutable;
  v2 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  v3 = v2;
  CSSymbolicatorForeachSymbolOwnerAtTime();
  CFDictionarySetValue(v0, CFSTR("Binaries"), v3);
  CFRelease(v3);
  CFAutorelease(v0);
  CSRelease();
  return v0;
}

void ktrace_uuid_map_learn_process_info_with_chunk(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int *v5;
  const __CFDictionary *v6;
  const UInt8 *v7;
  const __CFData *v8;
  const __CFArray *Value;
  const __CFArray *v10;
  CFTypeID v11;
  CFIndex v12;
  CFTypeID ValueAtIndex;
  const __CFDictionary *v14;
  CFTypeID v15;
  int *process_info_dict;
  unint64_t v17;
  char v18;
  _BYTE v19[15];

  if (a1)
  {
    v4 = ktrace_chunk_size((uint64_t)a2);
    if (ktrace_chunk_tag((uint64_t)a2) == 32784 && !ktrace_chunk_version_major((uint64_t)a2))
    {
      v7 = ktrace_chunk_map_data(a2, 0, v4);
      if (v7)
      {
        v8 = CFDataCreateWithBytesNoCopy(0, v7, v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        v6 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v8, 0, 0, 0);
        CFRelease(v8);
        Value = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("Processes"));
        v10 = Value;
        if (Value)
        {
          v11 = CFGetTypeID(Value);
          if (v11 != CFArrayGetTypeID())
          {
            ktrace_log_init();
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
              __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
            v10 = 0;
          }
        }
        if (CFArrayGetCount(v10) < 1)
        {
LABEL_9:
          ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v7, v4);
LABEL_10:
          if (v6)
            CFRelease(v6);
          return;
        }
        v12 = 0;
        while (1)
        {
          ValueAtIndex = (CFTypeID)CFArrayGetValueAtIndex(v10, v12);
          v14 = (const __CFDictionary *)ValueAtIndex;
          if (ValueAtIndex)
          {
            v15 = CFGetTypeID((CFTypeRef)ValueAtIndex);
            ValueAtIndex = CFDictionaryGetTypeID();
            if (v15 != ValueAtIndex)
            {
              ktrace_log_init();
              ValueAtIndex = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
              if ((_DWORD)ValueAtIndex)
                __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v18, v19);
              v14 = 0;
            }
          }
          process_info_dict = (int *)ktrace_uuid_map_read_process_info_dict((ktrace_uuid_map *)ValueAtIndex, v14, 0);
          v5 = process_info_dict;
          if (!process_info_dict)
            break;
          v17 = process_info_dict[8];
          if (!(_DWORD)v17)
            break;
          set_address_space_for_pid(a1, v17, process_info_dict);
          CFRelease(v5);
          if (CFArrayGetCount(v10) <= ++v12)
            goto LABEL_8;
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
    }
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_process_info_with_chunk_cold_1();
      if (!v5)
      {
LABEL_8:
        if (!v7)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    else if (!v5)
    {
      goto LABEL_8;
    }
    CFRelease(v5);
    goto LABEL_8;
  }
}

BOOL ktrace_uuid_map_learn_sharedcache(ktrace_uuid_map *a1, CFUUIDBytes a2)
{
  int v3;

  v3 = dscsym_mmap_dscsym_for_uuid();
  if (!v3)
  {
    ktrace_uuid_map_learn_sharedcache_with_buffer(a1, a2, 0);
    munmap(0, 0);
  }
  return v3 == 0;
}

_QWORD *ktrace_uuid_map_get_shared_cache(ktrace_uuid_map *a1, CFUUIDBytes a2)
{
  _QWORD *result;
  CFUUIDBytes v4;

  v4 = a2;
  result = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(*((_QWORD **)a1 + 5), &v4);
  if (result)
    return (_QWORD *)result[4];
  ktrace_uuid_map_learn_sharedcache(a1, v4);
  result = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(*((_QWORD **)a1 + 5), &v4);
  if (result)
    return (_QWORD *)result[4];
  return result;
}

uint64_t ktrace_stackshot_chunk_unwrap(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  const UInt8 *v6;
  const UInt8 *v7;
  unint64_t v8;
  const UInt8 *v9;
  uint64_t v10;

  if (!a1)
    return 22;
  v4 = ktrace_chunk_size((uint64_t)a1);
  if (ktrace_chunk_size((uint64_t)a1) != v4)
    return 22;
  v5 = ktrace_chunk_tag((uint64_t)a1);
  if (v5 != 20990)
  {
    if (v5 == 32770)
    {
      if (ktrace_chunk_version_major((uint64_t)a1) > 1)
        return 22;
    }
    else if (v5 != 36864 || ktrace_chunk_version_major((uint64_t)a1))
    {
      return 22;
    }
  }
  v6 = ktrace_chunk_map_data(a1, 0, v4);
  if (v6)
  {
    v7 = v6;
    if (ktrace_chunk_tag((uint64_t)a1) == 20990 || ktrace_chunk_version_major((uint64_t)a1))
    {
      v8 = (unint64_t)&v7[v4];
      v9 = v7;
    }
    else
    {
      if (v4 < 0x10 || *(_QWORD *)v7 > v4 - 16)
        goto LABEL_20;
      v9 = v7 + 16;
      v8 = (unint64_t)&v7[*(_QWORD *)v7 + 16];
    }
    if ((unint64_t)(v9 + 16) <= v8 && (unint64_t)&v9[*((unsigned int *)v9 + 1) + 16] <= v8)
    {
      (*(void (**)(uint64_t))(a2 + 16))(a2);
      v10 = 0;
LABEL_21:
      ktrace_chunk_unmap_data((uint64_t)a1, (unint64_t)v7, v4);
      return v10;
    }
LABEL_20:
    v10 = 22;
    goto LABEL_21;
  }
  return 22;
}

uint64_t ktrace_stackshot_chunk_timestamp(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = -1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __ktrace_stackshot_chunk_timestamp_block_invoke;
  v3[3] = &unk_1E5F70D58;
  v3[4] = &v4;
  ktrace_stackshot_chunk_unwrap(a1, (uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AF371D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_stackshot_chunk_timestamp_block_invoke(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v7;
  BOOL v8;

  v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    do
    {
      v7 = v3 + *(unsigned int *)(a2 + 4);
      if (v7 > a3 || *(_DWORD *)a2 == -242132755)
        break;
      if (*(_DWORD *)a2 == 51)
        goto LABEL_3;
      v3 = v7 + 16;
      a2 = v7;
    }
    while (v7 + 16 <= a3);
  }
  a2 = 0;
  a3 = 0;
LABEL_3:
  if (a2 + 16 <= a3)
  {
    v4 = *(unsigned int *)(a2 + 4);
    if (a2 + 16 + v4 <= a3)
    {
      v5 = *(_DWORD *)a2;
      if ((*(_DWORD *)a2 & 0xFFFFFFF0) == 0x20)
        v5 = 17;
      if (v5 <= 2309)
      {
        if (v5 == 17 || v5 == 19)
        {
LABEL_26:
          if (v4 < 8)
            return result;
          goto LABEL_27;
        }
LABEL_24:
        v8 = v4 >= (*(_DWORD *)(a2 + 8) & 0xFu);
        LODWORD(v4) = v4 - (*(_DWORD *)(a2 + 8) & 0xF);
        if (!v8)
          LODWORD(v4) = 0;
        goto LABEL_26;
      }
      if (v5 == 2312)
      {
        if ((_DWORD)v4 != 32)
          goto LABEL_24;
      }
      else if (v5 != 2310 || (_DWORD)v4 != 112)
      {
        goto LABEL_24;
      }
      if ((*(_BYTE *)(a2 + 8) & 0x8F) == 0)
      {
LABEL_27:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(a2 + 16);
        return result;
      }
      goto LABEL_24;
    }
  }
  return result;
}

void ktrace_address_space_get_offset_for_address(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  optional_uint64 *v13;
  uint64_t v14;
  optional_uint64 *v15;
  uint64_t v16;
  uint64_t v17;
  optional_uint64 *v18;
  uint64_t v19;
  unsigned __int8 src[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uuid_t dst;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  memset(v28, 0, sizeof(v28));
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)dst = 0u;
  v7 = ktrace_address_space_symbol_owner_for_address(a2, a3, (__n128)0);
  if (v7)
  {
    v8 = v7;
    if (!*(_QWORD *)(v7 + 56))
      BYTE4(v28[0]) = 1;
    *(_OWORD *)src = *(_OWORD *)v7;
    uuid_copy(dst, src);
    LODWORD(v28[0]) = *(_DWORD *)(v8 + 16);
    *((_QWORD *)&v28[1] + 1) = *(_QWORD *)(v8 + 80);
    *(_OWORD *)((char *)v28 + 8) = *(_OWORD *)(v8 + 64);
    switch(LODWORD(v28[0]))
    {
      case 1:
        v12 = a3 - *(_QWORD *)(v8 + 48);
        *((_QWORD *)&v27 + 1) = v12;
        if (BYTE4(v28[0]))
        {
          v14 = *(_QWORD *)(v8 + 24);
          v13 = (optional_uint64 *)(v8 + 24);
          if (v14)
            BYTE4(v28[0]) = v12 >= optional_uint64::value(v13);
        }
        goto LABEL_6;
      case 2:
      case 5:
        *((_QWORD *)&v27 + 1) = a3 - *(_QWORD *)(v8 + 48);
        v9 = *(_BYTE *)(v8 + 40);
        v26 = *(_OWORD *)(v8 + 24);
        LOBYTE(v27) = v9;
        goto LABEL_6;
      case 3:
        v18 = 0;
        v19 = 0;
        get_sc_and_slide(a1, v8, &v19, &v18);
        if (!v19)
          goto LABEL_14;
        *((_QWORD *)&v27 + 1) = a3 - optional_uint64::value((optional_uint64 *)&v19);
        v15 = v18;
        if (v18)
        {
          v23 = 0u;
          v24 = 0u;
          v21 = 0u;
          v22 = 0u;
          *(_OWORD *)src = 0u;
          v16 = optional_uint64::value((optional_uint64 *)&v19);
          ktrace_address_space_get_offset_for_address(a1, v15, a3 - v16);
          if ((_DWORD)v23)
          {
            v27 = v22;
            v28[0] = v23;
            v28[1] = v24;
            *(_OWORD *)dst = *(_OWORD *)src;
            v26 = v21;
          }
        }
        goto LABEL_6;
      case 4:
        v17 = *(_QWORD *)(a1 + 248);
        if (v17)
        {
          ktrace_address_space_get_offset_for_address(a1, v17, a3);
        }
        else
        {
          *((_QWORD *)&v27 + 1) = a3;
LABEL_6:
          v10 = v28[0];
          a4[2] = v27;
          a4[3] = v10;
          a4[4] = v28[1];
          v11 = v26;
          *a4 = *(_OWORD *)dst;
          a4[1] = v11;
        }
        break;
      default:
        ktrace_address_space_deep_iterate_symbol_owners();
    }
  }
  else
  {
LABEL_14:
    a4[3] = 0u;
    a4[4] = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    *a4 = 0u;
  }
}

optional_uint64 *get_sc_and_slide(uint64_t a1, uint64_t a2, uint64_t *a3, optional_uint64 **a4)
{
  uint64_t v8;
  optional_uint64 *result;
  optional_uint64 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v19[3];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 24);
  result = (optional_uint64 *)ktrace_uuid_map_get_shared_cache((ktrace_uuid_map *)a1, *(CFUUIDBytes *)a2);
  v10 = result;
  if (!result)
  {
LABEL_5:
    if (v8)
      goto LABEL_17;
    goto LABEL_6;
  }
  if (v8)
    goto LABEL_17;
  result = (optional_uint64 *)((char *)result + 56);
  if (*((_QWORD *)v10 + 7))
  {
    v11 = *(_QWORD *)(a2 + 48);
    result = (optional_uint64 *)optional_uint64::value(result);
    v8 = v11 - (_QWORD)result + 1;
    goto LABEL_5;
  }
LABEL_6:
  v12 = *(_QWORD *)(a2 + 48);
  v19[0] = xmmword_1AF3E9EB0;
  v19[1] = xmmword_1AF3E9EC0;
  v19[2] = xmmword_1AF3E9ED0;
  v13 = *(unint64_t **)(a1 + 280);
  if (!v13)
    v13 = (unint64_t *)v19;
  v14 = *v13;
  if (*v13)
  {
    v15 = v13 + 1;
    v16 = -1;
    do
    {
      v17 = v12 - v14;
      if (v12 - v14 >= v16)
        v17 = v16;
      if (v12 >= v14)
        v16 = v17;
      v18 = *v15++;
      v14 = v18;
    }
    while (v18);
    v8 = v16 + 1;
  }
  else
  {
    v8 = 0;
  }
LABEL_17:
  *a3 = v8;
  *a4 = v10;
  return result;
}

uint64_t ktrace_uuid_map_dump_address_space(ktrace_uuid_map *a1, unint64_t a2, FILE *a3)
{
  _QWORD *v5;

  if (!a1)
    return 22;
  v5 = address_space_for_taskid(a1, a2);
  return ktrace_address_space_dump((uint64_t)a1, (uint64_t)v5, a3);
}

uint64_t ktrace_address_space_dump(uint64_t a1, uint64_t a2, FILE *a3)
{
  FILE *v5;
  _QWORD v7[6];

  if (!a2)
    return 22;
  if (a3)
    v5 = a3;
  else
    v5 = (FILE *)*MEMORY[0x1E0C80C20];
  fprintf(v5, "Address space:  pid=%d task_unique_id=%llx\n", *(_DWORD *)(a2 + 32), *(_QWORD *)(a2 + 24) - 1);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL25ktrace_address_space_dumpP15ktrace_uuid_mapP20ktrace_address_spaceP7__sFILE_block_invoke;
  v7[3] = &__block_descriptor_48_e244_v24__0__SymbolOwner____CCCCCCCCCCCCCCCC__SymbolOwnerTypeProperty_i_____17c__optional_uint64_Q_____optional_uint64_Q__optional_uint64_Q__optional_uint64_Q___3Q__Q_optional_uint64_Q__fsid__2i___fsobj_id_II_____CFString_b1b1_8_optional_uint64_Q_16l;
  v7[4] = v5;
  v7[5] = a1;
  ktrace_address_space_deep_iterate_symbol_owners(a1, a2, (uint64_t)v7);
  return 0;
}

uint64_t ktrace_uuid_map_dump_address_space_pid(ktrace_uuid_map *a1, int a2, FILE *a3)
{
  _QWORD *v5;

  if (!a1)
    return 22;
  v5 = address_space_for_pid(a1, a2);
  return ktrace_address_space_dump((uint64_t)a1, (uint64_t)v5, a3);
}

double ktrace_uuid_map_get_offset_for_address@<D0>(ktrace_uuid_map *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  _QWORD *v8;
  double result;

  if (a1
    && (!a2 && a4 && (v8 = (_QWORD *)*((_QWORD *)a1 + 31)) != 0 || (v8 = address_space_for_taskid(a1, a2)) != 0))
  {
    ktrace_address_space_get_offset_for_address((uint64_t)a1, (uint64_t)v8, a3, a5);
  }
  else
  {
    result = 0.0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

double ktrace_uuid_map_get_offset_for_pid_address@<D0>(ktrace_uuid_map *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  _QWORD *v8;
  double result;

  if (a1 && (!a2 && a4 && (v8 = (_QWORD *)*((_QWORD *)a1 + 31)) != 0 || (v8 = address_space_for_pid(a1, a2)) != 0))
  {
    ktrace_address_space_get_offset_for_address((uint64_t)a1, (uint64_t)v8, a3, a5);
  }
  else
  {
    result = 0.0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

uint64_t ktrace_uuid_map_update_internal(uint64_t result, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  signed int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[8];
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[7];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[7];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[7];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v10 = result;
  if (a4)
  {
    v11 = a3[5];
    v12 = a3 + 6;
    v13 = *(_OWORD *)(a3 + 1);
    v14 = *(_OWORD *)(a3 + 3);
  }
  else
  {
    v11 = *((unsigned int *)a3 + 6);
    v12 = (_DWORD *)a3 + 7;
    v15 = a3[1];
    v16 = a3[2];
    *(_QWORD *)&v17 = v15;
    *((_QWORD *)&v17 + 1) = HIDWORD(v15);
    v13 = v17;
    *(_QWORD *)&v17 = v16;
    *((_QWORD *)&v17 + 1) = HIDWORD(v16);
    v14 = v17;
  }
  v18 = *v12 & 0xFFFFFFFC;
  v19 = *a3;
  v42 = 0;
  v44 = 0u;
  v35 = v19;
  v36 = v13;
  v37 = v14;
  v38 = v11;
  v39 = v18;
  v40 = 0;
  v41 = 0;
  v43 = 0;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  if (!*(_BYTE *)(result + 208))
    std::__throw_bad_optional_access[abi:ne180100]();
  result = (uint64_t)dyldtp_decode_window_update(a4, v11, (DyldDecodeWindow *)(result + 48), (uint64_t)&v35);
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  if (result)
  {
    v20 = *(_OWORD *)(result + 48);
    v22 = *(_OWORD *)result;
    v21 = *(_OWORD *)(result + 16);
    v62 = *(_OWORD *)(result + 32);
    v63 = v20;
    v60 = v22;
    v61 = v21;
    HIDWORD(v24) = v22;
    LODWORD(v24) = v22 - 520421376;
    v23 = v24 >> 2;
    if (v23 > 0xC)
      goto LABEL_11;
    if (((1 << v23) & 5) != 0)
    {
      if ((a5 & 1) != 0)
      {
LABEL_22:
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2;
        v55[3] = &__block_descriptor_120_e5_v8__0l;
        v55[4] = v10;
        v55[5] = a2;
        v55[6] = v11;
        v56 = v60;
        v57 = v61;
        v28 = v55;
        v58 = v62;
        v59 = v63;
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(a6 + 16))(a6, v19, v28);
      }
      goto LABEL_31;
    }
    v25 = 520421416;
    if (((1 << v23) & 0xA0) != 0)
    {
      v27 = 520421396;
      v25 = 520421376;
    }
    else
    {
      v26 = 1 << v23;
      v27 = 520421416;
      if ((v26 & 0x1400) == 0)
LABEL_11:
        abort();
    }
    if (a5)
      v18 = v27;
    else
      v18 = v25;
  }
  if (v18 > 520421395)
  {
    if (v18 != 520421396)
    {
      if (v18 == 520421416)
      {
        if (result)
        {
          result = uuid_is_null((const unsigned __int8 *)((unint64_t)&v60 | 0xC));
          if (!(_DWORD)result)
          {
            v45[1] = 3221225472;
            v46 = v60;
            v47 = v61;
            v48 = v62;
            v45[0] = MEMORY[0x1E0C809B0];
            v45[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58;
            v45[3] = &__block_descriptor_120_e5_v8__0l;
            v45[4] = v10;
            v45[5] = a2;
            v45[6] = v11;
            v28 = v45;
            v49 = v63;
            return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(a6 + 16))(a6, v19, v28);
          }
        }
      }
      return result;
    }
    if (!result)
      return result;
LABEL_31:
    v50[1] = 3221225472;
    v51 = v60;
    v52 = v61;
    v53 = v62;
    v50[0] = MEMORY[0x1E0C809B0];
    v50[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_57;
    v50[3] = &__block_descriptor_120_e5_v8__0l;
    v50[4] = v10;
    v50[5] = a2;
    v50[6] = v11;
    v28 = v50;
    v54 = v63;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(a6 + 16))(a6, v19, v28);
  }
  if (v18 == 117440520)
  {
    if (a4)
      v29 = a3[1];
    else
      v29 = *((unsigned int *)a3 + 2);
    if (v29 == (int)v29)
    {
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke;
      v31[3] = &__block_descriptor_70_e5_v8__0l;
      v32 = v29;
      v31[4] = v10;
      v31[5] = a2;
      v33 = a5;
      v34 = a4;
      v28 = v31;
      v31[6] = v11;
      v31[7] = a3;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(a6 + 16))(a6, v19, v28);
    }
  }
  else if (v18 == 520421376 && result)
  {
    goto LABEL_22;
  }
  return result;
}

__int128 *dyldtp_decode_window_update(int a1, unint64_t a2, DyldDecodeWindow *this, uint64_t a4)
{
  unsigned int v5;
  _QWORD *v8;
  char *v9;
  __int128 *v10;
  _QWORD *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  _QWORD *v30;

  v29 = a2;
  v5 = *(_DWORD *)(a4 + 48);
  if (v5 >> 2 == 29392898)
  {
    DyldDecodeWindow::reset(this);
    return 0;
  }
  if (HIBYTE(v5) != 31)
    return 0;
  if (a2 == -1)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      dyldtp_decode_window_update();
    return 0;
  }
  v8 = (_QWORD *)((char *)this + 104);
  if (*((_QWORD *)this + 13) == a2)
  {
    v9 = (char *)this + 40;
  }
  else
  {
    v12 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(this, &v29);
    if (v12)
    {
      v9 = (char *)(v12 + 3);
    }
    else
    {
      v9 = (char *)this + 40;
      if (*((_DWORD *)this + 12) && !dyldtp_complete((uint64_t)this + 40))
      {
        if (*v8 == -1)
          ktrace_remotetime_update_params_cold_1();
        v30 = (_QWORD *)((char *)this + 104);
        v13 = std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, (unint64_t *)this + 13, (uint64_t)&std::piecewise_construct, &v30);
        v14 = *(_OWORD *)v9;
        v15 = *(_OWORD *)((char *)this + 56);
        v16 = *(_OWORD *)((char *)this + 72);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)((char *)this + 88);
        *(_OWORD *)(v13 + 56) = v16;
        *(_OWORD *)(v13 + 40) = v15;
        *(_OWORD *)(v13 + 24) = v14;
      }
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *v8 = v29;
    }
  }
  v17 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)this + 14, &v29);
  if (!v17)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)this + 112, &v29, &v29);
  v18 = *(_DWORD *)(a4 + 48) & 0xFFFFFFFC;
  if (dyldtp_complete((uint64_t)v9))
  {
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *(_OWORD *)v9 = 0u;
    *((_OWORD *)v9 + 1) = 0u;
  }
  switch((v18 - 520421376) >> 2)
  {
    case 0u:
    case 5u:
    case 0xAu:
      if (!a1)
        goto LABEL_59;
      v19 = *(_QWORD *)(a4 + 8);
      if (!HIDWORD(v19) && !*(_DWORD *)(a4 + 20))
      {
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          dyldtp_decode_window_update();
        v9[56] |= 2u;
        v19 = *(_QWORD *)(a4 + 8);
      }
      *(_QWORD *)(v9 + 12) = v19;
      *(_QWORD *)(v9 + 20) = *(_QWORD *)(a4 + 16);
      *((_QWORD *)v9 + 4) = *(_QWORD *)(a4 + 24);
      *((_QWORD *)v9 + 5) = *(_QWORD *)(a4 + 32);
      goto LABEL_36;
    case 1u:
    case 6u:
    case 0xBu:
      if (!a1 || !v17 && !*((_DWORD *)v9 + 2) || (v9[56] & 2) != 0)
        goto LABEL_59;
      v20 = v18 - 4;
      *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 8);
      break;
    case 2u:
    case 7u:
    case 0xCu:
      *(int32x4_t *)(v9 + 12) = vuzp1q_s32(*(int32x4_t *)(a4 + 8), *(int32x4_t *)(a4 + 24));
LABEL_36:
      v20 = v18;
      break;
    case 3u:
    case 8u:
    case 0xDu:
      if (!v17 && !*((_DWORD *)v9 + 2))
        v9[56] |= 1u;
      v20 = v18 - 4;
      *((_QWORD *)v9 + 4) = *(_QWORD *)(a4 + 8);
      *((int32x2_t *)v9 + 5) = vmovn_s64(*(int64x2_t *)(a4 + 16));
      *((_DWORD *)v9 + 12) = *(_QWORD *)(a4 + 32);
      break;
    case 4u:
    case 9u:
    case 0xEu:
      if ((v9[56] & 1) != 0 || !v17 && !*((_DWORD *)v9 + 2))
        goto LABEL_59;
      v20 = v18 - 8;
      *((_DWORD *)v9 + 13) = *(_QWORD *)(a4 + 8);
      break;
    default:
      if (!*((_DWORD *)v9 + 2))
        return 0;
      goto LABEL_59;
  }
  if ((v9[56] & 1) != 0)
  {
LABEL_59:
    v10 = 0;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *(_OWORD *)v9 = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    return v10;
  }
  if (*(_DWORD *)v9)
  {
    if (v20 != *(_DWORD *)v9)
      goto LABEL_59;
    if (v20 != *((_DWORD *)v9 + 1))
      goto LABEL_59;
    v21 = *((_DWORD *)v9 + 2);
    if (v18 != v20 + 4 * v21)
      goto LABEL_59;
  }
  else
  {
    *(_DWORD *)v9 = v20;
    *((_DWORD *)v9 + 1) = v18;
    v21 = *((_DWORD *)v9 + 2);
  }
  *((_DWORD *)v9 + 2) = v21 + 1;
  if (!dyldtp_complete((uint64_t)v9))
    return 0;
  v10 = (__int128 *)((char *)this + 40);
  if (v9 != (char *)this + 40)
  {
    if (*((_DWORD *)this + 12) && !dyldtp_complete((uint64_t)this + 40))
    {
      v30 = (_QWORD *)((char *)this + 104);
      v22 = std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, (unint64_t *)this + 13, (uint64_t)&std::piecewise_construct, &v30);
      v23 = *v10;
      v24 = *(_OWORD *)((char *)this + 56);
      v25 = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)(v22 + 72) = *(_OWORD *)((char *)this + 88);
      *(_OWORD *)(v22 + 56) = v25;
      *(_OWORD *)(v22 + 40) = v24;
      *(_OWORD *)(v22 + 24) = v23;
    }
    v26 = *(_OWORD *)v9;
    v27 = *((_OWORD *)v9 + 1);
    v28 = *((_OWORD *)v9 + 3);
    *(_OWORD *)((char *)this + 72) = *((_OWORD *)v9 + 2);
    *(_OWORD *)((char *)this + 88) = v28;
    *v10 = v26;
    *(_OWORD *)((char *)this + 56) = v27;
    *((_QWORD *)this + 13) = v29;
    std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__erase_unique<unsigned long long>(this, &v29);
  }
  return v10;
}

_QWORD *ktrace_uuid_map_ensure_address_space_for_tid(ktrace_uuid_map *a1, ktrace_session *a2, const void *a3)
{
  unint64_t task_uniqueid_for_thread;
  _QWORD *v7;
  unsigned int pid_for_thread;
  int v9;
  unint64_t v10;

  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  task_uniqueid_for_thread = ktrace_get_task_uniqueid_for_thread((uint64_t)a2, a3);
  if (task_uniqueid_for_thread == -1 || (v7 = address_space_for_taskid(a1, task_uniqueid_for_thread)) == 0)
  {
    pid_for_thread = ktrace_get_pid_for_thread((uint64_t)a2, a3);
    if ((pid_for_thread & 0x80000000) != 0)
    {
      return 0;
    }
    else
    {
      v9 = pid_for_thread;
      v10 = pid_for_thread;
      v7 = address_space_for_pid(a1, pid_for_thread);
      if (!v7)
      {
        v7 = (_QWORD *)ktrace_address_space_create(v9);
        if (v7)
        {
          set_address_space_for_pid((uint64_t)a1, v10, v7);
          if (task_uniqueid_for_thread != -1)
          {
            v7[3] = task_uniqueid_for_thread + 1;
            set_address_space_for_taskid((uint64_t)a1, task_uniqueid_for_thread, v7);
          }
          CFRelease(v7);
        }
      }
    }
  }
  return v7;
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  optional_uint64 *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v22;
  unint64_t v23;
  NSObject *v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _OWORD v32[5];
  CFTypeRef cf[2];
  unint64_t v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[4];
  _BYTE v45[24];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (v2)
  {
    v3 = (uint64_t)v2;
    if (uuid_is_null((const unsigned __int8 *)(a1 + 68)))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_3();
      return;
    }
    v4 = *(_QWORD *)(a1 + 88);
    v39 = 0u;
    v40 = v4;
    v37 = *(_OWORD *)(a1 + 68);
    v38 = 0u;
    *(_DWORD *)((char *)&v38 + 11) = 5527621;
    LODWORD(v38) = 2;
    DWORD2(v38) = 1163157343;
    v41 = *(_OWORD *)(a1 + 96);
    v42 = 0u;
    v5 = ktrace_address_space_symbol_owner_for_address(v3, v4, (__n128)0);
    v6 = (uint64_t *)v5;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) == 3)
      {
        v7 = (optional_uint64 *)(v5 + 56);
        if (v6[7])
        {
          v8 = v6[6];
          if ((uint64_t)v40 - v8 <= (unint64_t)optional_uint64::value(v7))
          {
LABEL_36:
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v37);
            return;
          }
        }
        else
        {
          v44[0] = 0;
          *(_QWORD *)&v43 = 0;
          get_sc_and_slide(*(_QWORD *)(a1 + 32), (uint64_t)v6, v44, (optional_uint64 **)&v43);
          v10 = v43;
          if ((_QWORD)v43 && v44[0])
          {
            v11 = **(_QWORD **)(v43 + 16);
            v12 = *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8);
            v13 = v12 - v11;
            if (v12 != v11)
            {
              ktrace_address_space_sort(v43, v9);
              v14 = *(_QWORD *)(**(_QWORD **)(v10 + 16) + 48);
              v15 = optional_uint64::value((optional_uint64 *)v44);
              v16 = *(_QWORD *)(**(_QWORD **)(v10 + 16) + 32 * (v13 >> 5) - 48);
              v17 = optional_uint64::value((optional_uint64 *)v44);
              if ((unint64_t)v40 >= v15 + v14 && (unint64_t)v40 <= v17 + v16)
                goto LABEL_36;
            }
          }
          else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          {
            v18 = uuid_string(v37, *((uint64_t *)&v37 + 1));
            v19 = uuid_string(*v6, v6[1]);
            ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_2((uint64_t)v18, (uint64_t)v19, (uint64_t)v45);
          }
        }
      }
      v20 = *(_OWORD *)v6;
      v43 = v37;
      *(_OWORD *)v44 = v20;
      if ((_QWORD)v20 != (_QWORD)v37 || *((_QWORD *)&v20 + 1) != *((_QWORD *)&v37 + 1))
      {
        v35 = SymbolOwner::min_range((SymbolOwner *)v6);
        v36 = v22;
        v34[0] = SymbolOwner::min_range((SymbolOwner *)&v37);
        v34[1] = v23;
        if (!Range::intersects((unint64_t *)&v35, v34))
        {
LABEL_27:
          *(_QWORD *)&v43 = SymbolOwner::min_range((SymbolOwner *)v6);
          *((_QWORD *)&v43 + 1) = v27;
          v35 = SymbolOwner::min_range((SymbolOwner *)&v37);
          v36 = v28;
          if (Range::intersects((unint64_t *)&v43, (unint64_t *)&v35))
          {
            v29 = *(_QWORD *)(a1 + 40);
            if (v29 && (v30 = *(_QWORD *)(v29 + 304)) != 0)
              v31 = *(_BYTE *)(v30 + 288);
            else
              v31 = 0;
            ktrace_address_space_merge_owner(v3, (SymbolOwner *)v6, (uint64_t)&v37, v31);
            goto LABEL_36;
          }
LABEL_31:
          v32[2] = v39;
          v32[3] = v40;
          v32[4] = v41;
          *(_OWORD *)cf = v42;
          v32[0] = v37;
          v32[1] = v38;
          if ((_QWORD)v42)
            CFRetain((CFTypeRef)v42);
          ktrace_address_space_append(v3, (uint64_t)v32);
          SymbolOwner::~SymbolOwner((SymbolOwner *)v32);
          goto LABEL_36;
        }
        v24 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        {
          v25 = uuid_string(*v6, v6[1]);
          ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_1((uint64_t)v25, (uint64_t)v6, (uint64_t)v44, v24);
        }
        ktrace_address_space_delete(v3, *v6, v6[1], v6[6]);
        v6 = (uint64_t *)ktrace_address_space_symbol_owner_for_address(v3, v40, v26);
      }
    }
    if (!v6)
      goto LABEL_31;
    goto LABEL_27;
  }
}

void sub_1AF373008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  SymbolOwner::~SymbolOwner((SymbolOwner *)va);
  _Unwind_Resume(a1);
}

uint64_t SymbolOwner::min_range(SymbolOwner *this)
{
  optional_uint64 *v1;
  uint64_t v2;
  optional_uint64 *v3;

  v1 = (SymbolOwner *)((char *)this + 56);
  if (!*((_QWORD *)this + 7))
  {
    if (*((_DWORD *)this + 4) != 1)
      return *((_QWORD *)this + 6);
    v3 = (SymbolOwner *)((char *)this + 40);
    if (*((_QWORD *)this + 5) && *((_QWORD *)this + 4))
    {
      v2 = *((_QWORD *)this + 6);
      optional_uint64::value((SymbolOwner *)((char *)this + 32));
      optional_uint64::value(v3);
      return v2;
    }
    v1 = (SymbolOwner *)((char *)this + 24);
    if (!*((_QWORD *)this + 3))
      return *((_QWORD *)this + 6);
  }
  v2 = *((_QWORD *)this + 6);
  optional_uint64::value(v1);
  return v2;
}

BOOL Range::intersects(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *a2;
  v3 = *a1;
  if (*a1 <= *a2 && v2 - v3 < a1[1])
    return 1;
  v4 = a2[1];
  v5 = v2 + v4 - 1;
  v7 = v5 >= v3;
  v6 = v5 - v3;
  if (v7 && v6 < a1[1])
    return 1;
  v7 = v3 < v2 || v3 - v2 >= v4;
  if (!v7)
    return 1;
  v8 = v3 + a1[1] - 1;
  v7 = v8 >= v2;
  v9 = v8 - v2;
  return v7 && v9 < v4;
}

void ktrace_address_space_delete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v5 = *(_QWORD **)(a1 + 16);
  v7 = (_OWORD *)*v5;
  v6 = (_OWORD *)v5[1];
  if ((_OWORD *)*v5 != v6)
  {
    v8 = 0;
    while (1)
    {
      v13 = v7[v8];
      v9 = (_QWORD)v13 == a2 && *((_QWORD *)&v13 + 1) == a3;
      if (v9 && *(_QWORD *)&v7[v8 + 3] == a4)
        break;
      v8 += 6;
      if (&v7[v8] == v6)
        return;
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SymbolOwner *,SymbolOwner *,SymbolOwner *,0>(&v7[v8 + 6], v6, (uint64_t)&v7[v8]);
    v11 = v10;
    v12 = v5[1];
    if (v12 != v10)
    {
      do
        SymbolOwner::~SymbolOwner((SymbolOwner *)(v12 - 96));
      while (v12 != v11);
    }
    v5[1] = v11;
  }
}

void ktrace_address_space_merge_owner(uint64_t a1, SymbolOwner *this, uint64_t a3, char a4)
{
  char v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  int v19;

  if (*(_QWORD *)this != *(_QWORD *)a3 || *((_QWORD *)this + 1) != *(_QWORD *)(a3 + 8))
  {
    if (a4 && !*(_DWORD *)(a1 + 32))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_address_space_merge_owner();
    }
    else if ((*((_BYTE *)this + 88) & 1) != 0)
    {
      SymbolOwner::operator=((uint64_t)this, (_OWORD *)a3);
    }
    return;
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
    v8 = *(_BYTE *)(a3 + 88) & 1;
  else
    v8 = 0;
  *((_BYTE *)this + 88) = *((_BYTE *)this + 88) & 0xFE | v8;
  if (!*((_QWORD *)this + 10))
  {
    v9 = *(const void **)(a3 + 80);
    if (v9)
      SymbolOwner::set_path(this, v9);
  }
  if (!*((_QWORD *)this + 8))
  {
    v10 = *(_QWORD *)(a3 + 64);
    if (v10)
      *((_QWORD *)this + 8) = v10;
  }
  if (!*((_QWORD *)this + 9))
  {
    v11 = *(_QWORD *)(a3 + 72);
    if (v11)
      *((_QWORD *)this + 9) = v11;
  }
  v12 = *((_QWORD *)this + 7);
  if (!v12)
  {
    v12 = *(_QWORD *)(a3 + 56);
    if (v12)
    {
      if (*((_DWORD *)this + 4) == *(_DWORD *)(a3 + 16))
        *((_QWORD *)this + 7) = v12;
      else
        v12 = 0;
    }
  }
  v13 = *(_DWORD *)(a3 + 16);
  if (v13 != 1)
  {
    if (v13 == 2 || v13 == 5)
    {
      v14 = *((_DWORD *)this + 4);
      if (v14 == 1)
      {
        v15 = *((_QWORD *)this + 6);
        v16 = *(_QWORD *)(a3 + 48);
        if (v16 == v15 && (v13 == 5 || !strcmp((const char *)(a3 + 24), "__TEXT")) && !*((_QWORD *)this + 3))
          *((_QWORD *)this + 3) = *(_QWORD *)(a3 + 56);
        v17 = v16 >= v15;
        v18 = v16 - v15;
        if (v18 != 0 && v17 && !*(_DWORD *)(a1 + 32) && (v13 == 5 || !strcmp((const char *)(a3 + 24), "__TEXT_EXEC")))
        {
          if (!*((_QWORD *)this + 4))
            *((_QWORD *)this + 4) = v18 + 1;
          if (!*((_QWORD *)this + 5))
            *((_QWORD *)this + 5) = *(_QWORD *)(a3 + 56);
        }
        return;
      }
      v19 = 0;
    }
    else
    {
      v19 = 0;
      v14 = *((_DWORD *)this + 4);
    }
    goto LABEL_55;
  }
  v14 = *((_DWORD *)this + 4);
  if (v14 != 1)
  {
    v19 = 1;
LABEL_55:
    if ((v14 == 5 || v14 == 2)
      && v19
      && *((_QWORD *)this + 6) == *(_QWORD *)(a3 + 48)
      && (v14 == 5 || !strcmp((const char *)this + 24, "__TEXT")))
    {
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 4) = 1;
      if (!v12)
        v12 = *(_QWORD *)(a3 + 24);
      *((_QWORD *)this + 3) = v12;
      *((_QWORD *)this + 7) = *(_QWORD *)(a3 + 56);
    }
    return;
  }
  if (!*((_QWORD *)this + 3))
    *((_QWORD *)this + 3) = *(_QWORD *)(a3 + 24);
  if (!*((_QWORD *)this + 5))
    *((_QWORD *)this + 5) = *(_QWORD *)(a3 + 40);
  if (!*((_QWORD *)this + 4))
    *((_QWORD *)this + 4) = *(_QWORD *)(a3 + 32);
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_57(uint64_t a1)
{
  _QWORD *v2;

  v2 = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (v2)
    ktrace_address_space_delete((uint64_t)v2, *(_QWORD *)(a1 + 68), *(_QWORD *)(a1 + 76), *(_QWORD *)(a1 + 88));
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = ktrace_uuid_map_ensure_address_space_for_tid(*(ktrace_uuid_map **)(a1 + 32), *(ktrace_session **)(a1 + 40), *(const void **)(a1 + 48));
  if (v2)
  {
    v3 = (uint64_t)v2;
    if (uuid_is_null((const unsigned __int8 *)(a1 + 68)))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58_cold_1();
    }
    else if ((*(_BYTE *)(v3 + 36) & 2) == 0)
    {
      v4 = *(_QWORD *)(a1 + 88);
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v10 = 0u;
      v5 = *(_OWORD *)(a1 + 68);
      v6 = 0u;
      LODWORD(v6) = 3;
      *(_QWORD *)&v8 = v4;
      ktrace_address_space_append(v3, (uint64_t)&v5);
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v5);
    }
  }
}

void sub_1AF3735E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ktrace_uuid_map_update(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  return ktrace_uuid_map_update_internal(a1, a2, a3, a4, 1, (uint64_t)&__block_literal_global_9);
}

uint64_t __ktrace_uuid_map_update_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t ktrace_visit_uuid(unint64_t a1, uint64_t *a2)
{
  _OWORD v3[4];

  v3[3] = 0u;
  memset(v3, 0, 32);
  v3[2] = a1;
  return visit_uuid(v3, *a2, a2[1]);
}

uint64_t visit_uuid(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 src[8];
  uint64_t v5;
  uuid_t dst;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*a1)
    ktrace_client_get_file_info();
  memset(dst, 0, sizeof(dst));
  *(_QWORD *)src = a2;
  v5 = a3;
  uuid_copy(dst, src);
  return OSLogLookupPathWithUUID();
}

void ktrace_visit_inode(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[4];

  v3[3] = 0u;
  memset(v3, 0, 32);
  v3[2] = a1;
  visit_inode_while_locked((uint64_t)v3, a2, a3);
}

void visit_inode_while_locked(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  CFStringRef v7;
  CFStringRef v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const void *v11;
  CFMutableDictionaryRef Mutable;
  CFStringRef v13;
  const __CFString *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  fsid_t v22;
  fsid_t *v23;
  uint64_t v24;
  CFMutableDictionaryRef v25;
  char cStr[8];
  uint64_t v27;
  uint64_t (*v28)();
  void *v29;
  fsid_t *v30;
  uint64_t *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 48);
  if (v6)
    dispatch_assert_queue_V2(v6);
  v7 = cfaasprintf("%llx", a2);
  v8 = cfaasprintf("%llx", a3);
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v7);
  if (!Value || !CFDictionaryContainsKey(Value, v8))
  {
    if (!*(_QWORD *)a1)
    {
LABEL_13:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = (fsid_t)a2;
      if (fsgetpath(cStr, 0x400uLL, &v22, a3) < 0)
      {
        if (Mutable)
          CFRelease(Mutable);
      }
      else
      {
        v13 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        v14 = v13;
        if (!v13)
          ktrace_remotetime_update_params_cold_1();
        CFAutorelease(v13);
        CFDictionarySetValue(Mutable, CFSTR("Path"), v14);
        utf8(v14);
        v22 = 0;
        v23 = &v22;
        v24 = 0x2020000000;
        v25 = 0;
        v25 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v15 = (const void *)v23[3];
        if (!v15)
        {
          _os_assert_log();
          v17 = _os_crash();
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v17);
        }
        CFAutorelease(v15);
        v18 = 0;
        v19 = &v18;
        v20 = 0x2020000000;
        v21 = 1;
        *(_QWORD *)cStr = MEMORY[0x1E0C809B0];
        v27 = 3221225472;
        v28 = ___ZL22get_summary_from_machoPKc_block_invoke;
        v29 = &unk_1E5F710F8;
        v30 = &v22;
        v31 = &v18;
        CSSymbolicatorForeachSymbolicatorWithPath();
        if (*((_BYTE *)v19 + 24))
          v16 = 0;
        else
          v16 = (const void *)v23[3];
        _Block_object_dispose(&v18, 8);
        _Block_object_dispose(&v22, 8);
        if (v16)
          CFDictionarySetValue(Mutable, CFSTR("Images"), v16);
        if (Mutable)
        {
          merge_info_while_locked(a1, a2, a3, Mutable);
          CFRelease(Mutable);
        }
      }
      return;
    }
    v10 = *(const __CFDictionary **)(a1 + 24);
    if (!v10)
    {
      v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(a1 + 24) = v10;
    }
    v11 = CFDictionaryGetValue(v10, v7);
    if (!v11)
    {
      v11 = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), v7, v11);
      CFRelease(v11);
    }
    if (!CFSetContainsValue((CFSetRef)v11, v8))
    {
      if (*(_QWORD *)a1)
        ktrace_client_get_file_info();
      goto LABEL_13;
    }
  }
}

void sub_1AF373AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __ktrace_get_live_kernel_map_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *image_summary;

  image_summary = (const void *)make_image_summary(a2);
  if (image_summary)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), image_summary);
}

uint64_t make_image_summary(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t CFUUIDBytes;
  const unsigned __int8 *v8;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  CFStringRef v11;
  CFStringRef v12;
  const char *Path;
  CFStringRef v14;
  CFStringRef v15;
  CFMutableArrayRef v16;
  CFMutableArrayRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  NSObject *v20;
  uint64_t image_summary;
  char out[3079];
  _BYTE v24[2049];
  uint64_t v25;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v25 = *MEMORY[0x1E0C80C00];
  CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes();
  if (!CFUUIDBytes)
  {
    v20 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      make_image_summary(v6, v5, v20);
    return 0;
  }
  v8 = (const unsigned __int8 *)CFUUIDBytes;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    ktrace_remotetime_update_params_cold_1();
  v10 = Mutable;
  memset(out, 0, 37);
  uuid_unparse(v8, out);
  v11 = CFStringCreateWithCString(0, out, 0x8000100u);
  if (!v11)
    ktrace_remotetime_update_params_cold_1();
  v12 = v11;
  CFAutorelease(v11);
  CFDictionarySetValue(v10, CFSTR("UUID_String"), v12);
  if (!v3)
  {
LABEL_7:
    v16 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v16)
      ktrace_remotetime_update_params_cold_1();
    v17 = v16;
    CSSymbolOwnerForeachSegment();
    CFDictionarySetValue(v10, CFSTR("Segments"), v17);
    CFRelease(v17);
    *(_QWORD *)out = CSSymbolOwnerGetFlags();
    v18 = CFNumberCreate(0, kCFNumberLongLongType, out);
    if (!v18)
      ktrace_remotetime_update_params_cold_1();
    v19 = v18;
    CFAutorelease(v18);
    CFDictionarySetValue(v10, CFSTR("Flags"), v19);
    CFAutorelease(v10);
    return (uint64_t)v10;
  }
  Path = (const char *)CSSymbolOwnerGetPath();
  v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Path, 0x8000100u);
  if (v14)
  {
    v15 = v14;
    CFAutorelease(v14);
    CFDictionarySetValue(v10, CFSTR("Path"), v15);
    goto LABEL_7;
  }
  image_summary = make_image_summary(v24, Path, v6, v5, out);
  return ktrace_uuid_map_postprocess_file(image_summary);
}

uint64_t ktrace_uuid_map_postprocess_file(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  char is_64_bit;
  uint64_t v13;
  void *v14;
  uint64_t *v16;
  _QWORD v17[9];
  int v18;
  _QWORD v19[7];
  char v20;
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];
  int v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[14];
  _BYTE v32[32];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _BYTE v43[32];
  int v44;
  int v45;
  _BYTE v46[32];
  int v47;
  _BYTE v48[32];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    ktrace_remotetime_update_params_cold_1();
  v11 = Mutable;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x16012000000;
  v31[3] = __Block_byref_object_copy__62;
  v31[4] = __Block_byref_object_dispose__63;
  v31[5] = "%6";
  v31[6] = a3;
  memset(&v31[7], 0, 24);
  v31[10] = Mutable;
  v31[11] = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v16 = (uint64_t *)a5;
  v31[12] = ktrace_postprocessing_get_processing_queue(a5);
  v31[13] = dispatch_group_create();
  memset(v32, 0, sizeof(v32));
  v33 = 1065353216;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v37 = 0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v41 &= 0xFCu;
  v42 = -1;
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v45 = 1;
  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  v30[0] = 0;
  v30[1] = 0;
  is_64_bit = ktrace_file_is_64_bit(a2);
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v13 = MEMORY[0x1E0C809B0];
  v29 = 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __ktrace_uuid_map_postprocess_file_block_invoke;
  v25[3] = &unk_1E5F70A10;
  v25[4] = &v26;
  ktrace_file_header_iterate(a2, 0, (uint64_t)v25);
  if (!v27[3])
  {
    v27[3] = 64;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      ktrace_uuid_map_postprocess_file_cold_2();
  }
  v23[0] = v13;
  v23[1] = 3221225472;
  v23[2] = __ktrace_uuid_map_postprocess_file_block_invoke_65;
  v23[3] = &unk_1E5F70E28;
  v23[4] = v31;
  v24 = a4;
  ktrace_file_iterate(a2, 0, (uint64_t)v23);
  v14 = malloc_type_calloc(v27[3], 0x18uLL, 0x1000040BD32EBF2uLL);
  v22[0] = v13;
  v22[1] = 3221225472;
  v22[2] = __ktrace_uuid_map_postprocess_file_block_invoke_3;
  v22[3] = &unk_1E5F70E50;
  v22[4] = v31;
  ktrace_events_single(a1, 117440520, v22);
  v21[0] = v13;
  v21[1] = 3221225472;
  v21[2] = __ktrace_uuid_map_postprocess_file_block_invoke_4;
  v21[3] = &unk_1E5F70E50;
  v21[4] = v31;
  ktrace_events_single(a1, 117571592, v21);
  v19[0] = v13;
  v19[1] = 3221225472;
  v19[2] = __ktrace_uuid_map_postprocess_file_block_invoke_5;
  v19[3] = &unk_1E5F70EA0;
  v20 = is_64_bit;
  v19[4] = v31;
  v19[5] = a2;
  v19[6] = v30;
  ktrace_events_range(a1, 520421376, 520486912, v19);
  v17[0] = v13;
  v17[1] = 3221225472;
  v17[2] = __ktrace_uuid_map_postprocess_file_block_invoke_7;
  v17[3] = &unk_1E5F70EF0;
  v18 = a4;
  v17[4] = v31;
  v17[5] = a3;
  v17[6] = a2;
  v17[7] = v11;
  v17[8] = v14;
  ktrace_postprocessing_set_completed_handler(v16, v17);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(v31, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v48);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v46);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v43);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v32);
  return 0;
}

void sub_1AF374190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a57, 8);
  postprocess_data::~postprocess_data((postprocess_data *)&a63);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 112, (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v7 = *(_OWORD *)(a2 + 168);
  v8 = *(_OWORD *)(a2 + 184);
  v9 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 224, (uint64_t *)(a2 + 224));
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 272, (uint64_t *)(a2 + 272));
  return std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(a1 + 312, (uint64_t *)(a2 + 312));
}

uint64_t __Block_byref_object_dispose__63(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 312);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 272);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 224);
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 112);
}

void postprocess_data::~postprocess_data(postprocess_data *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 264);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 224);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64);
}

BOOL __ktrace_uuid_map_postprocess_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = ktrace_machine_create(a2);
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ktrace_machine_max_cpus(v3);
    ktrace_machine_destroy(v4);
  }
  return v4 == 0;
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_65(uint64_t a1, uint64_t *a2)
{
  int v4;
  _QWORD v6[5];
  int v7;

  v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20990)
    goto LABEL_7;
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) <= 1)
    {
LABEL_7:
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __ktrace_uuid_map_postprocess_file_block_invoke_2;
      v6[3] = &unk_1E5F70E00;
      v6[4] = *(_QWORD *)(a1 + 32);
      v7 = *(_DWORD *)(a1 + 40);
      ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v6);
    }
  }
  else if (v4 == 36864 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    goto LABEL_7;
  }
  return 1;
}

void __ktrace_uuid_map_postprocess_file_block_invoke_2(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  char v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *global_queue;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  unsigned int v41;
  const unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  const unsigned __int8 *v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  char *__s1;
  int v51;
  __int128 block;
  void (*v53)(uint64_t);
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  _QWORD v59[4];
  _QWORD v60[6];
  _QWORD v61[5];
  NSObject *v62;

  v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    v5 = a2;
    v6 = 0;
    v51 = 0;
    v7 = 0;
    __s1 = 0;
    v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v46 = (uint64_t)(v8 + 34);
    v47 = v8;
    v9 = (uint64_t)(v8 + 39);
    v10 = *(_DWORD *)(a1 + 40);
    do
    {
      if (v3 + *(unsigned int *)(v5 + 4) > a3)
        return;
      v11 = *(_DWORD *)v5;
      v12 = *(_DWORD *)v5 & 0xFFFFFFF0;
      if (v12 == 32)
        v13 = 17;
      else
        v13 = *(_DWORD *)v5;
      if (v13 == 19)
        ++v7;
      if (v13 == 20 && !--v7)
      {
        if ((v10 & 1) == 0 || (v51 == 0) | v6 & 1)
        {
          __s1 = 0;
          v51 = 0;
          v6 = 0;
        }
        else if (!strcmp(__s1, "watchdogd") || !strcmp(__s1, "notifyd") || !strncmp(__s1, "launchd", 7uLL))
        {
          __s1 = 0;
          v7 = 0;
          v51 = 0;
          v6 = 0;
        }
        else
        {
          if (!v47[6])
          {
            v61[0] = 0;
            v61[1] = v61;
            v61[2] = 0x3052000000;
            v61[3] = __Block_byref_object_copy__154;
            v61[4] = __Block_byref_object_dispose__155;
            v15 = v47[11];
            v14 = v47[12];
            v60[4] = __Block_byref_object_dispose__155;
            v60[5] = v14;
            v62 = v47[13];
            v16 = v62;
            v60[0] = 0;
            v60[1] = v60;
            v60[2] = 0x3052000000;
            v60[3] = __Block_byref_object_copy__154;
            v59[0] = 0;
            v59[1] = v59;
            v59[2] = 0x2020000000;
            v59[3] = v15;
            global_queue = dispatch_get_global_queue(25, 0);
            *(_QWORD *)&block = MEMORY[0x1E0C809B0];
            *((_QWORD *)&block + 1) = 3221225472;
            v53 = ___ZL13visit_processP16operating_systemj_block_invoke;
            v54 = &unk_1E5F71120;
            v58 = v51;
            v55 = v61;
            v56 = v60;
            v57 = v59;
            dispatch_group_async(v16, global_queue, &block);
            _Block_object_dispose(v59, 8);
            _Block_object_dispose(v60, 8);
            _Block_object_dispose(v61, 8);
          }
          __s1 = 0;
          v7 = 0;
          v51 = 0;
          v6 = 0;
          v11 = *(_DWORD *)v5;
          v12 = *(_DWORD *)v5 & 0xFFFFFFF0;
        }
      }
      if (v12 == 32)
        v18 = 17;
      else
        v18 = v11;
      if (v18 == 2312)
      {
        v22 = *(_DWORD *)(v5 + 4);
        v23 = *(_QWORD *)(v5 + 8);
        if (v22 != 32 || (v23 & 0x8F) != 0)
        {
          v24 = v23 & 0xF;
          v36 = v22 >= v24;
          v25 = v22 - v24;
          if (!v36)
            v25 = 0;
          if (v25 >= 0x20 && !uuid_is_null((const unsigned __int8 *)(v5 + 24)))
          {
            block = *(_OWORD *)(v5 + 24);
            std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v46, &block, &block);
          }
        }
      }
      else if (v18 == 2309)
      {
        v19 = *(_DWORD *)(v5 + 4);
        v20 = *(_DWORD *)(v5 + 8) & 0xF;
        v36 = v19 >= v20;
        v21 = v19 - v20;
        if (!v36)
          v21 = 0;
        if (v21 >= 0x78)
        {
          v51 = *(_DWORD *)(v5 + 100);
          __s1 = (char *)(v5 + 104);
        }
      }
      v26 = *(unsigned int *)(v5 + 4);
      v27 = v3 + v26;
      if (v3 + v26 <= a3)
      {
        v28 = *(_DWORD *)v5;
        if (*(_DWORD *)v5 == 17 || (v28 & 0xFFFFFFF0) == 0x20)
        {
          v32 = *(_QWORD *)(v5 + 8);
          if ((_DWORD)v32)
          {
            if (v28 != 17)
            {
              v37 = *(_DWORD *)v5 & 0xF;
              v36 = v26 >= v37;
              v38 = v26 - v37;
              if (!v36 || v38 < v32 || HIDWORD(v32) != 48)
                goto LABEL_41;
              if (v38 % v32 || v38 / v32 <= 0x13)
                goto LABEL_41;
LABEL_127:
              v49 = v10;
              v43 = 0;
              v6 = 1;
              do
              {
                if (*(_DWORD *)v5 == 17)
                {
                  if (SHIDWORD(v32) <= 2310)
                  {
                    switch(HIDWORD(v32))
                    {
                      case 0x30:
                        v44 = 20;
                        break;
                      case 0x31:
                        v44 = 24;
                        break;
                      case 0x81A:
LABEL_136:
                        v44 = 8;
                        break;
                      default:
LABEL_139:
                        v44 = 0;
                        break;
                    }
                  }
                  else
                  {
                    switch(HIDWORD(v32))
                    {
                      case 0x907:
                        v44 = 4;
                        break;
                      case 0x908:
                      case 0x909:
                        goto LABEL_139;
                      case 0x90A:
                      case 0x90C:
                        goto LABEL_136;
                      case 0x90B:
                      case 0x90D:
                        v44 = 16;
                        break;
                      default:
                        if (HIDWORD(v32) != 2369)
                          goto LABEL_139;
                        v44 = 48;
                        break;
                    }
                  }
                }
                else
                {
                  v44 = (*(_DWORD *)(v5 + 4) - (*(_DWORD *)v5 & 0xFu)) / v32;
                }
                v45 = (const unsigned __int8 *)(v44 * v43 + v5 + 16 + 4);
                if (uuid_is_null(v45))
                {
                  v6 = 0;
                }
                else
                {
                  block = *(_OWORD *)v45;
                  std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v9, &block, &block);
                }
                ++v43;
                v32 = *(_QWORD *)(v5 + 8);
              }
              while (v43 < v32);
              v26 = *(unsigned int *)(v5 + 4);
              v27 = v3 + v26;
              v10 = v49;
              goto LABEL_41;
            }
            if (SHIDWORD(v32) <= 2310)
            {
              switch(HIDWORD(v32))
              {
                case 0x30:
                  v33 = 20;
                  break;
                case 0x31:
                  v33 = 24;
                  break;
                case 0x81A:
LABEL_87:
                  v33 = 8;
                  break;
                default:
                  goto LABEL_41;
              }
            }
            else
            {
              switch(HIDWORD(v32))
              {
                case 0x907:
                  v33 = 4;
                  break;
                case 0x908:
                case 0x909:
                  goto LABEL_41;
                case 0x90A:
                case 0x90C:
                  goto LABEL_87;
                case 0x90B:
                case 0x90D:
                  v33 = 16;
                  break;
                default:
                  if (HIDWORD(v32) != 2369)
                    goto LABEL_41;
                  v33 = 48;
                  break;
              }
            }
            if (v26 / v33 >= v32
              && HIDWORD(v32) == 48
              && v26 % v32 < 0x10)
            {
              goto LABEL_127;
            }
          }
          else if (!(_DWORD)v26 && v28 == 17 && (v32 & 0xFFFFFFFF00000000) == 0x3000000000)
          {
            v6 = 1;
          }
        }
      }
LABEL_41:
      if (v27 > a3)
        goto LABEL_120;
      v29 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 != 17 && (v29 & 0xFFFFFFF0) != 0x20)
        goto LABEL_120;
      v30 = *(_QWORD *)(v5 + 8);
      if (!(_DWORD)v30)
      {
        if (!(_DWORD)v26 && (v30 & 0xFFFFFFFF00000000) == 0x3100000000 && v29 == 17)
          v6 = 1;
        goto LABEL_120;
      }
      if (v29 == 17)
      {
        if (SHIDWORD(v30) <= 2310)
        {
          switch(HIDWORD(v30))
          {
            case 0x30:
              v31 = 20;
              break;
            case 0x31:
              v31 = 24;
              break;
            case 0x81A:
LABEL_83:
              v31 = 8;
              break;
            default:
              goto LABEL_120;
          }
        }
        else
        {
          switch(HIDWORD(v30))
          {
            case 0x907:
              v31 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_120;
            case 0x90A:
            case 0x90C:
              goto LABEL_83;
            case 0x90B:
            case 0x90D:
              v31 = 16;
              break;
            default:
              if (HIDWORD(v30) != 2369)
                goto LABEL_120;
              v31 = 48;
              break;
          }
        }
        if (v26 / v31 >= v30
          && HIDWORD(v30) == 49
          && v26 % v30 < 0x10)
        {
          goto LABEL_99;
        }
      }
      else
      {
        v34 = *(_DWORD *)v5 & 0xF;
        v36 = v26 >= v34;
        v35 = v26 - v34;
        if (v36 && v35 >= v30 && HIDWORD(v30) == 49)
        {
          v36 = !(v35 % v30) && v35 / v30 >= 0x18;
          if (v36)
          {
LABEL_99:
            v48 = v10;
            v40 = 0;
            v6 = 1;
            do
            {
              if (*(_DWORD *)v5 == 17)
              {
                if (SHIDWORD(v30) <= 2310)
                {
                  switch(HIDWORD(v30))
                  {
                    case 0x30:
                      v41 = 20;
                      break;
                    case 0x31:
                      v41 = 24;
                      break;
                    case 0x81A:
LABEL_108:
                      v41 = 8;
                      break;
                    default:
LABEL_111:
                      v41 = 0;
                      break;
                  }
                }
                else
                {
                  switch(HIDWORD(v30))
                  {
                    case 0x907:
                      v41 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_111;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_108;
                    case 0x90B:
                    case 0x90D:
                      v41 = 16;
                      break;
                    default:
                      if (HIDWORD(v30) != 2369)
                        goto LABEL_111;
                      v41 = 48;
                      break;
                  }
                }
              }
              else
              {
                v41 = (*(_DWORD *)(v5 + 4) - (*(_DWORD *)v5 & 0xFu)) / v30;
              }
              v42 = (const unsigned __int8 *)(v41 * v40 + v5 + 16 + 8);
              if (uuid_is_null(v42))
              {
                v6 = 0;
              }
              else
              {
                block = *(_OWORD *)v42;
                std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v9, &block, &block);
              }
              ++v40;
              v30 = *(_QWORD *)(v5 + 8);
            }
            while (v40 < v30);
            v27 = v3 + *(unsigned int *)(v5 + 4);
            v10 = v48;
          }
        }
      }
LABEL_120:
      v3 = v27 + 16;
      v5 = v27;
    }
    while (v27 + 16 <= a3);
  }
}

void __ktrace_uuid_map_postprocess_file_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v3 | v4)
    visit_inode_while_locked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, v3, v4);
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_4(uint64_t a1)
{
  return DyldDecodeWindow::reset((DyldDecodeWindow *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112));
}

uint64_t DyldDecodeWindow::reset(DyldDecodeWindow *this)
{
  _OWORD v3[2];
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  *(_QWORD *)&v6 = 0;
  v5 = 0uLL;
  DWORD2(v6) = 0;
  *(_QWORD *)&v8 = 0;
  v7 = 0uLL;
  BYTE8(v8) = 0;
  v9 = -1;
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v12 = 1;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign((uint64_t)this, (uint64_t *)v3);
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 72) = v7;
  *(_OWORD *)((char *)this + 88) = v8;
  *((_QWORD *)this + 13) = v9;
  *(_OWORD *)((char *)this + 40) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign((uint64_t)this + 112, (uint64_t *)v10);
  *((_DWORD *)this + 38) = v12;
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v10);
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v3);
}

void __ktrace_uuid_map_postprocess_file_block_invoke_5(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  int v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  const unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  statfs *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  _QWORD v25[2];
  void (*v26)(uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 valuePtr;

  HIDWORD(v3) = *(_DWORD *)(a2 + 48);
  LODWORD(v3) = HIDWORD(v3) - 520421376;
  v2 = v3 >> 2;
  if (v2 <= 0xC)
  {
    v6 = 1 << v2;
    if ((v6 & 0xA5) == 0)
    {
      if ((v6 & 0x1400) == 0)
        return;
      v13 = dyldtp_decode_window_update(*(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a2 + 40), (DyldDecodeWindow *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112), a2);
      if (!v13)
        return;
      v14 = (const unsigned __int8 *)v13 + 12;
      if (!uuid_compare((const unsigned __int8 *)v13 + 12, *(const unsigned __int8 **)(a1 + 48)))
        return;
      uuid_copy(*(unsigned __int8 **)(a1 + 48), v14);
      if (!uuid_is_null(v14))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 272;
        valuePtr = *(_OWORD *)v14;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v15, &valuePtr, &valuePtr);
      }
    }
    v7 = dyldtp_decode_window_update(*(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a2 + 40), (DyldDecodeWindow *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112), a2);
    if (v7)
    {
      v8 = v7;
      v9 = (__int128 *)((char *)v7 + 12);
      if (!uuid_is_null((const unsigned __int8 *)v7 + 12))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 312;
        valuePtr = *v9;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v10, &valuePtr, &valuePtr);
      }
      if (*((_DWORD *)v8 + 12))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD **)(v11 + 8);
        if (*((_DWORD *)v8 + 10))
        {
          visit_inode_while_locked((uint64_t)(v12 + 6), *((_QWORD *)v8 + 5), *((_QWORD *)v8 + 6));
          return;
        }
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v26 = __ktrace_uuid_map_postprocess_file_block_invoke_6;
        v27 = &unk_1E5F70E78;
        v28 = v11;
        v29 = v8;
        v16 = v12[8];
        if (v16)
          goto LABEL_21;
        if (v12[6])
          ktrace_client_get_mounts();
        v17 = getfsstat(0, 0, 2);
        if (v17 >= 1)
        {
          v18 = v17;
          v19 = v17;
          v20 = 2168 * v17;
          v21 = (statfs *)malloc_type_malloc(2168 * v17, 0x23D31F33uLL);
          v12[7] = v21;
          v12[8] = v19;
          if (!v21)
            ktrace_remotetime_update_params_cold_1();
          if (getfsstat(v21, v20, 2) != v18)
            ktrace_remotetime_update_params_cold_1();
          v16 = v12[8];
LABEL_21:
          if (v16 >= 1)
          {
            v22 = 0;
            for (i = 0; i < v16; ++i)
            {
              v24 = v12[7] + v22;
              if ((*(_BYTE *)(v24 + 65) & 0x10) != 0)
              {
                v26((uint64_t)v25, *(_QWORD *)(v24 + 48));
                v16 = v12[8];
              }
              v22 += 2168;
            }
          }
        }
      }
    }
  }
}

void __ktrace_uuid_map_postprocess_file_block_invoke_6(uint64_t a1, uint64_t a2)
{
  visit_inode_while_locked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48));
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  int v5;
  __CFDictionary *Mutable;
  const __CFData *Data;
  uint64_t v8;
  UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *v11;
  const __CFData *v12;
  uint64_t v13;
  UInt8 *v14;
  CFIndex v15;
  __CFDictionary *live_kernel_map;
  const __CFData *v17;
  const __CFData *v18;
  uint64_t v19;
  UInt8 *v20;
  CFIndex v21;
  _QWORD *v22;
  void *v23;
  const void *v24;
  const void *v25;
  pthread_t v26[2];
  __int128 v27;
  int v28;
  _QWORD v29[5];
  size_t v30;
  uuid_t dst;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(uint64_t **)(*(_QWORD *)(v2 + 8) + 288);
    if (v3)
    {
      do
      {
        memset(dst, 0, sizeof(dst));
        *(_OWORD *)v26 = *((_OWORD *)v3 + 1);
        uuid_copy(dst, (const unsigned __int8 *)v26);
        if (*(_QWORD *)(a1 + 40))
          ktrace_client_get_dscsym();
        v26[0] = 0;
        v30 = 0;
        if (!dscsym_mmap_dscsym_for_uuid())
        {
          ktrace_file_append_chunk(*(_QWORD *)(a1 + 48), 32769, 0, 0, (UInt8 *)v26[0], v30);
          munmap(v26[0], v30);
        }
        v3 = (uint64_t *)*v3;
      }
      while (v3);
      v2 = *(_QWORD *)(a1 + 32);
    }
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __ktrace_uuid_map_postprocess_file_block_invoke_8;
    v29[3] = &unk_1E5F70EC8;
    v29[4] = v2;
    v26[0] = 0;
    if (pthread_create(v26, 0, (void *(__cdecl *)(void *))_block_trampoline, v29))
    {
      v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_5();
      *__error() = v4;
    }
    else if (!pthread_join(v26[0], 0))
    {
      goto LABEL_17;
    }
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_4();
    *__error() = v5;
  }
LABEL_17:
  dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 104), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 104));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 104) = 0;
  if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88)))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("Processes"), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88));
    Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    CFRelease(Mutable);
    if (!Data)
      ktrace_remotetime_update_params_cold_1();
    v8 = *(_QWORD *)(a1 + 48);
    BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
    Length = CFDataGetLength(Data);
    ktrace_file_append_chunk(v8, 32784, 0, 0, BytePtr, Length);
    CFRelease(Data);
  }
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    v11 = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 56), kCFPropertyListBinaryFormat_v1_0, 0, 0);
    v12 = v11;
    if (!v11)
      ktrace_remotetime_update_params_cold_1();
    v13 = *(_QWORD *)(a1 + 48);
    v14 = (UInt8 *)CFDataGetBytePtr(v11);
    v15 = CFDataGetLength(v12);
    ktrace_file_append_chunk(v13, 32772, 1, 0, v14, v15);
    CFRelease(v12);
    if (*(_QWORD *)(a1 + 40))
      ktrace_client_get_live_kernel_map();
    live_kernel_map = ktrace_get_live_kernel_map();
    if (live_kernel_map)
    {
      v17 = CFPropertyListCreateData(0, live_kernel_map, kCFPropertyListXMLFormat_v1_0, 0, 0);
      v18 = v17;
      if (!v17)
        ktrace_remotetime_update_params_cold_1();
      v19 = *(_QWORD *)(a1 + 48);
      v20 = (UInt8 *)CFDataGetBytePtr(v17);
      v21 = CFDataGetLength(v18);
      ktrace_file_append_chunk(v19, 32773, 0, 0, v20, v21);
      CFRelease(v18);
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v23 = (void *)v22[7];
  if (v23)
    free(v23);
  v24 = (const void *)v22[9];
  if (v24)
    CFRelease(v24);
  v25 = (const void *)v22[11];
  if (v25)
    CFRelease(v25);
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 272, (uint64_t *)v26);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v26);
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 312, (uint64_t *)v26);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v26);
  free(*(void **)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_8(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 328);
  if (v1)
  {
    v2 = result;
    do
    {
      result = visit_uuid((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 48), v1[2], v1[3]);
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  return result;
}

uint64_t symbolication_context::symbolication_context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  ktrace_log_init();
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_DWORD *)(v10 + 32) = 1065353216;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 80) = a5;
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_DWORD *)(v11 + 32) = 1065353216;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)a1 = a2;
  return a1;
}

void symbolication_context::~symbolication_context(symbolication_context *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v2);
    MEMORY[0x1AF45D4D0](v3, 0x10A0C408EF24B1CLL);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::~__hash_table(v4);
    MEMORY[0x1AF45D4D0](v5, 0x10A0C408EF24B1CLL);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v7 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v6);
    MEMORY[0x1AF45D4D0](v7, 0x10A0C408EF24B1CLL);
  }
}

uint64_t ktrace_symbolicate_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *global_queue;
  uint64_t v12;
  NSObject *v13;
  uint64_t **v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[5];
  _QWORD block[6];
  _QWORD aBlock[5];
  _QWORD v22[7];

  v6 = operator new();
  symbolication_context::symbolication_context(v6, a1, a2, a3, 0);
  v7 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __ktrace_symbolicate_file_block_invoke;
  v19[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
  v19[4] = v6;
  ktrace_file_iterate(a3, 0, (uint64_t)v19);
  while (!*(_BYTE *)(v6 + 56))
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 24))
      ktrace_remotetime_update_params_cold_1();
    v8 = ktrace_session_create();
    v9 = dispatch_semaphore_create(0);
    v10 = dispatch_queue_create("ktrace_add_symbols_for_some_uuids", 0);
    global_queue = dispatch_get_global_queue(25, 0);
    if (*(int *)(v6 + 40) <= 4999)
      *(_DWORD *)(v6 + 40) = 5000;
    *(_BYTE *)(v6 + 56) = 1;
    v12 = ktrace_set_ktrace_file((uint64_t)v8, *(_QWORD *)(v6 + 48), 0);
    if (!(_DWORD)v12)
    {
      v22[0] = v7;
      v22[1] = 3221225472;
      v22[2] = ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke;
      v22[3] = &__block_descriptor_48_e45_v16__0__trace_point_QQQQQQII_timeval_qi___i_8l;
      v22[4] = v6;
      v22[5] = v8;
      ktrace_events_all((uint64_t)v8, v22);
      aBlock[0] = v7;
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_2;
      aBlock[3] = &unk_1E5F71168;
      aBlock[4] = v9;
      ktrace_set_completion_handler((uint64_t)v8, aBlock);
      v12 = ktrace_start((unint64_t)v8, v10);
      if (!(_DWORD)v12)
      {
        dispatch_semaphore_wait(v9, 0xFFFFFFFFFFFFFFFFLL);
        *(_QWORD *)(v6 + 88) = v10;
        v13 = dispatch_group_create();
        *(_QWORD *)(v6 + 96) = v13;
        v14 = *(uint64_t ***)(*(_QWORD *)(v6 + 24) + 16);
        if (v14)
        {
          do
          {
            if (((_WORD)v14[24] & 1) == 0)
            {
              v15 = *(NSObject **)(v6 + 96);
              block[0] = v7;
              block[1] = 3221225472;
              block[2] = ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_3;
              block[3] = &__block_descriptor_48_e5_v8__0l;
              block[4] = v6;
              block[5] = v14 + 4;
              dispatch_group_async(v15, global_queue, block);
            }
            v14 = (uint64_t **)*v14;
          }
          while (v14);
          v13 = *(NSObject **)(v6 + 96);
        }
        dispatch_group_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(*(dispatch_object_t *)(v6 + 96));
        *(_QWORD *)(v6 + 88) = 0;
        *(_QWORD *)(v6 + 96) = 0;
        v16 = *(_QWORD *)(v6 + 24);
        v17 = *(_QWORD **)(v16 + 16);
        if (v17)
        {
          do
          {
            std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(*(_QWORD *)(v6 + 16), v17 + 2, (_OWORD *)v17 + 1);
            v17 = (_QWORD *)*v17;
          }
          while (v17);
          v16 = *(_QWORD *)(v6 + 24);
        }
        std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::clear(v16);
        v12 = 0;
        if (!v10)
          goto LABEL_10;
LABEL_9:
        dispatch_release(v10);
        goto LABEL_10;
      }
    }
    if (v10)
      goto LABEL_9;
LABEL_10:
    if (v9)
      dispatch_release(v9);
    if (v8)
      ktrace_session_destroy((uint64_t)v8);
    if ((_DWORD)v12)
      goto LABEL_27;
  }
  v12 = 0;
LABEL_27:
  symbolication_context::~symbolication_context((symbolication_context *)v6);
  MEMORY[0x1AF45D4D0]();
  return v12;
}

void sub_1AF3758FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF45D4D0](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_symbolicate_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  const UInt8 *v4;
  const UInt8 *v5;
  uint64_t v6;
  __int128 v8;

  if (ktrace_chunk_tag((uint64_t)a2) == 32771 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) > 0x18)
    {
      v4 = ktrace_chunk_map_data(a2, 0, 0x18uLL);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v8 = *(_OWORD *)v5;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(v6, &v8, &v8);
        ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, 24);
      }
      else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        __ktrace_symbolicate_file_block_invoke_cold_2();
      }
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
  }
  return 1;
}

uint64_t ktrace_symbolicate_path(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = ktrace_file_open(a3, 1);
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = (_QWORD *)v5;
  v7 = ktrace_symbolicate_file(a1, a2, v5);
  ktrace_file_close(v6);
  return v7;
}

double ktrace_symbolicator_create()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 32) = 0;
  *(_DWORD *)(v0 + 40) = 1065353216;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_DWORD *)(v0 + 80) = 1065353216;
  return result;
}

KtraceSymbolicator *ktrace_symbolicator_destroy(KtraceSymbolicator *result)
{
  if (result)
  {
    KtraceSymbolicator::~KtraceSymbolicator(result);
    JUMPOUT(0x1AF45D4D0);
  }
  return result;
}

BOOL KtraceSymbolicator::enable_symbolication(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v5 = *a1;
  if (!*a1)
  {
    v11 = operator new();
    symbolication_context::symbolication_context(v11, a2, a3, a5, a4);
    *a1 = v11;
    *(_DWORD *)(v11 + 40) = 0x7FFFFFFF;
  }
  return v5 == 0;
}

void sub_1AF375B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF45D4D0](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

BOOL ktrace_symbolicator_symbolicate(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  FILE **v13;
  uint64_t *uuid;
  __n128 *v15;
  _BOOL8 v16;
  uint64_t SymbolOwner;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v25;
  __n128 *v26;
  __int128 v27[5];
  __n128 v28[11];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a3)
    *a3 = 0;
  v12 = a1 + 8;
  v28[0] = *(__n128 *)a2;
  if (!std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>((_QWORD *)(a1 + 8), v28))
  {
    v13 = *(FILE ***)a1;
    if (*(_QWORD *)a1)
    {
      UUIDContext::UUIDContext((uint64_t)v28, a2);
      uuid = find_or_create_uuid((uint64_t)v13, (__int128 *)v28);
      UUIDContext::~UUIDContext((UUIDContext *)v28);
      if (uuid)
      {
        if (ktrace_make_symbolicator(*(FILE ***)a1, (UUIDContext *)uuid))
        {
          CS::TypeRef::retain(uuid[11], uuid[12], v28);
          v25 = *(__n128 *)a2;
          v26 = &v25;
          v15 = (__n128 *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes&&>,std::tuple<>>(v12, &v25, (uint64_t)&std::piecewise_construct, (_OWORD **)&v26);
          CS::TypeRef::operator=(v15 + 2, v28);
          CS::TypeRef::~TypeRef((CS::TypeRef *)v28);
        }
      }
    }
  }
  if ((CSIsNull() & 1) != 0)
    return 0;
  SymbolOwner = CSSymbolicatorGetSymbolOwner();
  v19 = v18;
  if (CSIsNull())
    ktrace_remotetime_update_params_cold_1();
  v28[0].n128_u64[0] = 0;
  v20 = *(_OWORD *)(a2 + 48);
  v27[2] = *(_OWORD *)(a2 + 32);
  v27[3] = v20;
  v27[4] = *(_OWORD *)(a2 + 64);
  v21 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v21;
  v16 = translate_offset(SymbolOwner, v19, v27, v28, (uint64_t)a3);
  if (v16)
  {
    if (a4)
    {
      *a4 = SymbolOwner;
      a4[1] = v19;
    }
    if (a5)
    {
      *a5 = CSSymbolicatorGetSymbolWithAddressAtTime();
      a5[1] = v22;
      if (*(_DWORD *)(a2 + 48) != 1 || !CSIsNull())
      {
LABEL_22:
        if (a6)
        {
          *a6 = CSSymbolicatorGetSourceInfoWithAddressAtTime();
          a6[1] = v23;
        }
        return v16;
      }
    }
    else if (*(_DWORD *)(a2 + 48) != 1)
    {
      goto LABEL_22;
    }
    if (a3 && *(_BYTE *)(a2 + 52))
    {
      *a3 = 1;
      CSSymbolOwnerForeachSegment();
    }
    goto LABEL_22;
  }
  return v16;
}

void sub_1AF375E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  CS::TypeRef::~TypeRef((CS::TypeRef *)&a29);
  _Unwind_Resume(a1);
}

_QWORD *find_or_create_uuid(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *result;
  __int128 v8;

  v8 = *a2;
  v4 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(*(_QWORD **)(a1 + 24), &v8);
  if (!v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v5 + 24) >= *(int *)(a1 + 40))
    {
      result = 0;
      *(_BYTE *)(a1 + 56) = 0;
      return result;
    }
    v4 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,UUIDContext>(v5, &v8, &v8, a2);
    if (!v6)
      ktrace_remotetime_update_params_cold_1();
  }
  return v4 + 4;
}

uint64_t ktrace_make_symbolicator(FILE **a1, UUIDContext *a2)
{
  uint64_t v4;
  FILE *v5;
  UInt8 *v6;
  uint64_t result;
  FILE *v8;
  UInt8 *v9;

  if (!CSIsNull())
    return 1;
  if (ktrace_find_executable((symbolication_context *)a1, a2)
    && ktrace_find_arch_with_default((symbolication_context *)a1, (uint64_t)a2, 0))
  {
    *((_QWORD *)a2 + 11) = CSSymbolicatorCreateWithURLAndArchitecture();
    *((_QWORD *)a2 + 12) = v4;
    if (CSIsNull())
    {
      v5 = *a1;
      if (*a1)
      {
        v6 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v5, "failed to create a symbolicator for %s\n", (const char *)v6);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
          ktrace_make_symbolicator((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
    else
    {
      result = CSSymbolicatorGetSymbolOwnerCountAtTime();
      if (result == 1)
        return result;
      v8 = *a1;
      if (*a1)
      {
        v9 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v8, "failed to set up symbolicator for %s: expected 1 symbol owner\n", (const char *)v9);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
          ktrace_make_symbolicator((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }
  result = 0;
  *((_WORD *)a2 + 80) |= 1u;
  return result;
}

uint64_t CS::TypeRef::retain@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return CSRetain();
}

void sub_1AF376064(_Unwind_Exception *a1)
{
  CS::TypeRef *v1;

  CS::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

__n128 CS::TypeRef::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  if ((CSIsNull() & 1) == 0)
    CSRelease();
  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

BOOL translate_offset(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5)
{
  _BOOL8 v8;
  int v9;
  const char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v8 = 0;
  switch(*((_DWORD *)a3 + 12))
  {
    case 0:
    case 3:
    case 4:
      goto LABEL_8;
    case 1:
      *a4 = *((_QWORD *)a3 + 5) + CSSymbolOwnerGetBaseAddress();
      v8 = 1;
      *((_BYTE *)v16 + 24) = 1;
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 5:
      *((_DWORD *)a3 + 12) = 2;
      v24 = 0;
      v25 = &v24;
      v26 = 0x2020000000;
      v27 = 0;
      v19 = MEMORY[0x1E0C809B0];
      v20 = 3221225472;
      v21 = (uint64_t)___ZL18owner_is_text_exec10_CSTypeRef_block_invoke;
      v22 = &unk_1E5F71280;
      v23 = &v24;
      CSSymbolOwnerForeachSegment();
      v9 = *((unsigned __int8 *)v25 + 24);
      _Block_object_dispose(&v24, 8);
      if (v9)
        v10 = "__TEXT_EXEC";
      else
        v10 = "__TEXT";
      strlcpy((char *)a3 + 16, v10, 0x11uLL);
LABEL_7:
      v19 = 0;
      v20 = (uint64_t)&v19;
      v21 = 0x2020000000;
      LOBYTE(v22) = 0;
      v28 = MEMORY[0x1E0C809B0];
      v29 = 3221225472;
      v30 = ___ZL16translate_offset10_CSTypeRef18ktrace_uuid_offsetPyPb_block_invoke;
      v31 = &unk_1E5F71258;
      v11 = a3[3];
      v36 = a3[2];
      v37 = v11;
      v38 = a3[4];
      v12 = a3[1];
      v34 = *a3;
      v35 = v12;
      v32 = &v19;
      v33 = &v15;
      v39 = a4;
      v40 = a5;
      CSSymbolOwnerForeachSegment();
      _Block_object_dispose(&v19, 8);
      v8 = *((_BYTE *)v16 + 24) != 0;
LABEL_8:
      _Block_object_dispose(&v15, 8);
      return v8;
    default:
      v14 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v14);
  }
}

void sub_1AF3762E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t __ktrace_symbolicator_symbolicate_block_invoke(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = CSRegionGetRange();
  if (*(_QWORD *)(a1 + 32) - result < v3)
    **(_BYTE **)(a1 + 40) = 0;
  return result;
}

void free_symbol_callback(const __CFAllocator *a1, _QWORD *a2)
{
  const void *v3;

  v3 = (const void *)a2[2];
  if (v3)
    CFRelease(v3);
  free(a2);
}

void ktrace_symboilcator_learn_ariadne_chunk(KtraceSymbolicator *a1, ktrace_chunk *a2)
{
  char v4;
  unint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  const __CFData *v9;
  const __CFDictionary *v10;
  const __CFArray *Mutable;
  __CFDictionary *v12;
  __CFDictionary *v13;
  _QWORD context[5];
  uuid_t uu;
  _OWORD v16[2];
  char v17;
  char in[40];
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x1E0C80C00];
  if (ktrace_chunk_tag((uint64_t)a2) != 20580 || ktrace_chunk_version_major((uint64_t)a2))
    return;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (ktrace_chunk_copy_data((uint64_t *)a2, 0, v16, 0x20uLL))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_symboilcator_learn_ariadne_chunk();
    return;
  }
  memset(uu, 0, sizeof(uu));
  strcpy(in, "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
  v4 = v16[0];
  if (LOBYTE(v16[0]))
  {
    v5 = 0;
    v6 = in;
    do
    {
      do
        v7 = *v6++;
      while (v7 == 45);
      *(v6 - 1) = v4;
      if (v5 > 0x1E)
        break;
      ++v5;
      v4 = *((_BYTE *)v16 + v5);
    }
    while (v4);
  }
  if (uuid_parse(in, uu))
  {
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_21;
  }
  v8 = ktrace_chunk_size_t(a2);
  v9 = ktrace_chunk_copy_cfdata((uint64_t)a2, 0x20uLL, (void *)(v8 - 32));
  if (!v9)
  {
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      return;
LABEL_21:
    ktrace_symboilcator_learn_ariadne_chunk();
    return;
  }
  v10 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v9, 0, 0, 0);
  CFRelease(v9);
  if (v10)
  {
    Mutable = CFArrayCreateMutable(0, 0, &symbol_array_callbacks);
    context[0] = MEMORY[0x1E0C809B0];
    context[1] = 3221225472;
    context[2] = ___Z39ktrace_symboilcator_learn_ariadne_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke;
    context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
    context[4] = Mutable;
    CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
    CFRelease(v10);
    v20.length = CFArrayGetCount(Mutable);
    v20.location = 0;
    CFArraySortValues(Mutable, v20, (CFComparatorFunction)cmp_symbol, 0);
    v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v12, CFSTR("__TEXT*"), Mutable);
    CFRelease(Mutable);
    *(_OWORD *)in = *(_OWORD *)uu;
    v13 = v12;
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>((uint64_t)a1 + 48, in, in, &v13);
    CF::TypeRef::~TypeRef((const void **)&v13);
    return;
  }
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    goto LABEL_21;
}

void sub_1AF37666C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CF::TypeRef::~TypeRef(&a9);
  _Unwind_Resume(a1);
}

void ___Z39ktrace_symboilcator_learn_ariadne_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  char *v5;
  int v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v5 = utf8(a2);
  v6 = sscanf(v5, "%lld", &v11);
  Value = CFDictionaryGetValue(a3, CFSTR("Name"));
  if (Value)
  {
    v8 = Value;
    v9 = CFGetTypeID(Value);
    if (v9 == CFStringGetTypeID())
    {
      if (v6 == 1)
      {
        v10 = malloc_type_malloc(0x18uLL, 0x1060040EE9316AEuLL);
        v10[2] = v8;
        CFRetain(v8);
        *v10 = v11;
        v10[1] = 1;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v10);
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
    }
  }
}

uint64_t cmp_symbol(_QWORD *a1, _QWORD *a2, void *a3)
{
  if (*a1 < *a2)
    return -1;
  else
    return *a1 != *a2;
}

void ktrace_symboilcator_learn_tailspin_chunk(KtraceSymbolicator *a1, ktrace_chunk *a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;
  const __CFBoolean *v9;
  const __CFBoolean *v10;
  CFTypeID v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  CFTypeID v14;
  char *v15;
  int v16;
  const __CFArray *Mutable;
  __CFDictionary *v18;
  const __CFString *v19;
  __CFDictionary *v20;
  __int128 v21;
  _QWORD context[5];
  unsigned __int8 uu[24];
  uint64_t v24;
  CFRange v25;

  v24 = *MEMORY[0x1E0C80C00];
  if (ktrace_chunk_tag((uint64_t)a2) == 36870 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    v4 = (const __CFDictionary *)ktrace_chunk_copy_plist((uint64_t)a2);
    if (v4)
    {
      v5 = v4;
      CFAutorelease(v4);
      Value = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("UUID_String"));
      v7 = Value;
      if (Value)
      {
        v8 = CFGetTypeID(Value);
        if (v8 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
          v7 = 0;
        }
      }
      v9 = (const __CFBoolean *)CFDictionaryGetValue(v5, CFSTR("TEXT_EXEC"));
      v10 = v9;
      if (v9)
      {
        v11 = CFGetTypeID(v9);
        if (v11 != CFBooleanGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5();
          v10 = 0;
        }
      }
      v12 = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("Symbols"));
      v13 = v12;
      if (v12)
      {
        v14 = CFGetTypeID(v12);
        if (v14 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          v13 = 0;
        }
      }
      memset(uu, 0, 16);
      v15 = utf8(v7);
      v16 = uuid_parse(v15, uu);
      if (v13 && v10 && v7 && !v16)
      {
        Mutable = CFArrayCreateMutable(0, 0, &symbol_array_callbacks);
        context[0] = MEMORY[0x1E0C809B0];
        context[1] = 3221225472;
        context[2] = ___Z40ktrace_symboilcator_learn_tailspin_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke;
        context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
        context[4] = Mutable;
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
        v25.length = CFArrayGetCount(Mutable);
        v25.location = 0;
        CFArraySortValues(Mutable, v25, (CFComparatorFunction)cmp_symbol, 0);
        v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (CFBooleanGetValue(v10))
          v19 = CFSTR("__TEXT_EXEC");
        else
          v19 = CFSTR("__TEXT");
        CFDictionarySetValue(v18, v19, Mutable);
        CFRelease(Mutable);
        v21 = *(_OWORD *)uu;
        v20 = v18;
        std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>((uint64_t)a1 + 48, &v21, &v21, &v20);
        CF::TypeRef::~TypeRef((const void **)&v20);
      }
      else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        ktrace_symboilcator_learn_tailspin_chunk();
      }
    }
    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1();
    }
  }
}

void sub_1AF376AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___Z40ktrace_symboilcator_learn_tailspin_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  char *v5;
  int v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t valuePtr;

  v14 = 0;
  v5 = utf8(a2);
  v6 = sscanf(v5, "%lld", &v14);
  Value = CFDictionaryGetValue(a3, CFSTR("Name"));
  v8 = Value;
  if (Value)
  {
    v9 = CFGetTypeID(Value);
    if (v9 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      v8 = 0;
    }
  }
  v10 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("Length"));
  if (v10)
  {
    v11 = v10;
    v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID())
    {
      if (v6 == 1 && v8)
      {
        v13 = malloc_type_malloc(0x18uLL, 0x1060040EE9316AEuLL);
        v13[2] = v8;
        CFRetain(v8);
        *v13 = v14;
        valuePtr = 0;
        if (!CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr))
          ktrace_remotetime_update_params_cold_1();
        v13[1] = valuePtr;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v13);
      }
    }
    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
  }
}

CFDataRef ktrace_copy_cs_signature_data(uint64_t *a1)
{
  CFDataRef result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (ktrace_chunk_tag((uint64_t)a1) != 32771 || ktrace_chunk_version_major((uint64_t)a1))
    return 0;
  v3 = ktrace_chunk_copy_data(a1, 0, &v5, 0x18uLL);
  result = 0;
  if (!v3)
  {
    v4 = v7 + (unint64_t)v6;
    if (v4 <= ktrace_chunk_size((uint64_t)a1))
      return ktrace_chunk_copy_cfdata((uint64_t)a1, v6, (void *)v7);
    return 0;
  }
  return result;
}

uint64_t ktrace_copy_symbolicator_from_chunk(uint64_t *a1, _OWORD *a2)
{
  unint64_t v4;
  void *v5;
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (ktrace_chunk_tag((uint64_t)a1) != 32771 || ktrace_chunk_version_major((uint64_t)a1))
    return 0;
  if ((unint64_t)ktrace_chunk_size((uint64_t)a1) <= 0x18)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_symbolicate_file_block_invoke_cold_1();
    return 0;
  }
  if (ktrace_chunk_copy_data(a1, 0, &v10, 0x18uLL))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_copy_symbolicator_from_chunk_cold_6();
    return 0;
  }
  v4 = v12 + (unint64_t)v11;
  if (v4 > ktrace_chunk_size((uint64_t)a1))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_symbolicate_file_block_invoke_cold_1();
    return 0;
  }
  v5 = (void *)ktrace_chunk_size((uint64_t)a1);
  v6 = ktrace_chunk_copy_cfdata((uint64_t)a1, 0, v5);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_symbolicate_file_block_invoke_cold_2();
    return 0;
  }
  v7 = v6;
  if (!-[__CFData subdataWithRange:](v6, "subdataWithRange:", v11, v12))
    ktrace_remotetime_update_params_cold_1();
  v8 = CSSymbolicatorCreateWithSignature();

  if (CSIsNull() && os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_copy_symbolicator_from_chunk_cold_5();
    if (!a2)
      return v8;
    goto LABEL_17;
  }
  if (a2)
LABEL_17:
    *a2 = v10;
  return v8;
}

uint64_t ktrace_symbolicator_read_file(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __ktrace_symbolicator_read_file_block_invoke;
  v3[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
  v3[4] = a1;
  return ktrace_file_iterate(a2, 0, (uint64_t)v3);
}

uint64_t __ktrace_symbolicator_read_file_block_invoke(uint64_t a1, ktrace_chunk *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  ktrace_symboilcator_learn_tailspin_chunk(*(KtraceSymbolicator **)(a1 + 32), a2);
  ktrace_symboilcator_learn_ariadne_chunk(*(KtraceSymbolicator **)(a1 + 32), a2);
  v4 = ktrace_copy_symbolicator_from_chunk((uint64_t *)a2, &v10);
  v6 = v5;
  if ((CSIsNull() & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 32) + 8;
    *(_QWORD *)&v9 = v4;
    *((_QWORD *)&v9 + 1) = v6;
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,CS::TypeRef>(v7, &v10, &v10, &v9);
    CS::TypeRef::~TypeRef((CS::TypeRef *)&v9);
  }
  return 1;
}

void sub_1AF376FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CS::TypeRef::~TypeRef((CS::TypeRef *)&a9);
  _Unwind_Resume(a1);
}

UInt8 *ktrace_uuid_offset_get_description_internal(uint64_t a1, unsigned __int8 *uu, char *a3)
{
  const __CFString *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  char **v10;
  UInt8 *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  UInt8 *v15;
  const char *v17;
  int v18;
  uint64_t v19;
  void (*v20[6])(_QWORD, _QWORD);
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char __str[20];
  char v26[1024];
  uuid_string_t out;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)uu + 12))
    return 0;
  uuid_unparse(uu, out);
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v6 = (const __CFString *)*((_QWORD *)uu + 9);
  if (!v6)
  {
    if (!a1)
    {
      v12 = &v21;
      goto LABEL_10;
    }
LABEL_8:
    v20[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v20[1] = (void (*)(_QWORD, _QWORD))3221225472;
    v20[2] = (void (*)(_QWORD, _QWORD))___Z43ktrace_uuid_offset_get_description_internalP15ktrace_uuid_map18ktrace_uuid_offsetPKc_block_invoke;
    v20[3] = (void (*)(_QWORD, _QWORD))&unk_1E5F70F38;
    v20[4] = (void (*)(_QWORD, _QWORD))&v21;
    v20[5] = (void (*)(_QWORD, _QWORD))v26;
    ktrace_uuid_map_iterate_associated_paths(a1, (__int128 *)uu, v20);
    v12 = v22;
LABEL_10:
    v10 = (char **)(v12 + 3);
    goto LABEL_11;
  }
  v7 = utf8(v6);
  v8 = basename_r(v7, v26);
  v9 = v22;
  v22[3] = (uint64_t)v8;
  v10 = (char **)(v9 + 3);
  if (a1 && !v8)
    goto LABEL_8;
LABEL_11:
  if (!*v10)
  {
    *v10 = out;
    if (a3)
      goto LABEL_13;
LABEL_17:
    a3 = __str;
    snprintf(__str, 0x14uLL, "0x%llx", *((_QWORD *)uu + 5));
    goto LABEL_13;
  }
  if (!a3)
    goto LABEL_17;
LABEL_13:
  switch(*((_DWORD *)uu + 12))
  {
    case 1:
    case 5:
      goto LABEL_14;
    case 2:
      v17 = (const char *)(uu + 16);
      if (!strcmp(v17, "__TEXT"))
      {
LABEL_14:
        v14 = v22;
LABEL_15:
        goto LABEL_20;
      }
      v18 = strcmp(v17, "__TEXT_EXEC");
      v14 = v22;
      if (!v18)
        goto LABEL_15;
LABEL_20:
      v11 = v15;
      _Block_object_dispose(&v21, 8);
      return v11;
    case 3:
      goto LABEL_19;
    case 4:
LABEL_19:
      v15 = aasprintf(v13, out, a3);
      goto LABEL_20;
    default:
      v19 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v19);
  }
}

void sub_1AF377220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_iterate_associated_paths(uint64_t a1, __int128 *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  CFTypeID v7;
  CFTypeID TypeID;
  const __CFSet *v9;
  CFTypeID v10;
  __int128 v11;
  __int128 *v12;

  if (a1)
  {
    v11 = *a2;
    v4 = *(_QWORD *)(a1 + 216);
    v12 = &v11;
    v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v4, &v11, (uint64_t)&std::piecewise_construct, &v12);
    v6 = (const void *)v5[4];
    if (v6)
    {
      v7 = CFGetTypeID(v6);
      TypeID = CFSetGetTypeID();
      v9 = (const __CFSet *)v5[4];
      if (v7 == TypeID)
      {
        CFSetApplyFunction(v9, (CFSetApplierFunction)CFSetApplierTrampoline, a3);
      }
      else
      {
        v10 = CFGetTypeID(v9);
        if (v10 != CFStringGetTypeID())
          ktrace_remotetime_update_params_cold_1();
        a3[2](a3, v5[4]);
      }
    }
  }
}

UInt8 *ktrace_uuid_offset_get_description(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2[3];
  v5[2] = a2[2];
  v5[3] = v2;
  v5[4] = a2[4];
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return ktrace_uuid_offset_get_description_internal(a1, (unsigned __int8 *)v5, 0);
}

UInt8 *ktrace_symbolicator_get_description(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v11;
  _QWORD *v12;
  const __CFDictionary *v13;
  int v14;
  CFStringRef v15;
  const __CFString *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFTypeID v19;
  const __CFArray *v20;
  CFTypeID v21;
  unint64_t v22;
  CFIndex Count;
  CFIndex v24;
  CFIndex v25;
  unint64_t v26;
  const void *ValueAtIndex;
  unint64_t v28;
  char *v29;
  __int128 v32;
  __int128 v33;
  __int128 value;
  uint64_t v35;
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  char v39;
  unsigned __int8 uu[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[5];
  uint64_t v46;
  CFRange v47;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v38[0] = 0;
  v38[1] = 0;
  v37[0] = 0;
  v37[1] = 0;
  v36[0] = 0;
  v36[1] = 0;
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[4];
  v45[3] = a3[3];
  v45[4] = v8;
  v9 = a3[2];
  v45[1] = v7;
  v45[2] = v9;
  v45[0] = v6;
  ktrace_symbolicator_symbolicate(a2, (uint64_t)v45, &v39, v36, v37, v38);
  if ((CSIsNull() & 1) != 0)
  {
    if (v39)
      return 0;
    value = *a3;
    v12 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>((_QWORD *)(a2 + 48), &value);
    if (!v12)
      goto LABEL_34;
    v13 = (const __CFDictionary *)v12[4];
    v14 = *((_DWORD *)a3 + 12);
    switch(v14)
    {
      case 1:
        v16 = CFSTR("__TEXT");
        break;
      case 5:
        v16 = CFSTR("__TEXT*");
        break;
      case 2:
        v15 = CFStringCreateWithCString(0, (const char *)a3 + 16, 0x8000100u);
        if (!v15)
          ktrace_remotetime_update_params_cold_1();
        v16 = v15;
        CFAutorelease(v15);
        break;
      default:
        goto LABEL_19;
    }
    v17 = (const __CFArray *)CFDictionaryGetValue(v13, v16);
    if (v17)
    {
      v18 = v17;
      v19 = CFGetTypeID(v17);
      if (v19 == CFArrayGetTypeID())
        goto LABEL_21;
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    }
LABEL_19:
    v20 = (const __CFArray *)CFDictionaryGetValue(v13, CFSTR("__TEXT*"));
    if (!v20)
      goto LABEL_34;
    v18 = v20;
    v21 = CFGetTypeID(v20);
    if (v21 != CFArrayGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      goto LABEL_34;
    }
LABEL_21:
    v22 = *((_QWORD *)a3 + 5);
    v35 = 0;
    value = v22;
    Count = CFArrayGetCount(v18);
    v47.location = 0;
    v47.length = Count;
    v24 = CFArrayBSearchValues(v18, v47, &value, (CFComparatorFunction)cmp_symbol, 0);
    if (v24 >= Count)
      v25 = Count - 1;
    else
      v25 = v24;
    if ((v25 & 0x8000000000000000) == 0)
    {
      v26 = 1;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v18, v25);
        v28 = *((_QWORD *)a3 + 5);
        if (v28 >= *(_QWORD *)ValueAtIndex && v28 < *((_QWORD *)ValueAtIndex + 1) + *(_QWORD *)ValueAtIndex)
          break;
        v29 = 0;
        if (v25-- >= 1 && v26++ < 2)
          continue;
        goto LABEL_35;
      }
      v29 = utf8(*((const __CFString **)ValueAtIndex + 2));
      goto LABEL_35;
    }
LABEL_34:
    v29 = 0;
LABEL_35:
    v32 = a3[3];
    v42 = a3[2];
    v43 = v32;
    v44 = a3[4];
    v33 = a3[1];
    *(_OWORD *)uu = *a3;
    v41 = v33;
    return ktrace_uuid_offset_get_description_internal(a1, uu, v29);
  }
  v11 = CSIsNull();
  CSSymbolOwnerGetName();
  CSSymbolGetName();
  if (v11)
  CSSourceInfoGetFilename();
  CSSourceInfoGetLineNumber();
}

CFStringRef cfstring(const char *cStr)
{
  CFStringRef v1;
  CFStringRef v2;

  v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v1)
    ktrace_remotetime_update_params_cold_1();
  v2 = v1;
  CFAutorelease(v1);
  return v2;
}

uint64_t ktrace_uuid_map_create_cssymbolicator_for_task(ktrace_uuid_map *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  symbolication_context *v8;
  _QWORD *v9;
  uint64_t cssymbolicator;

  if (!a1)
    return 0;
  v8 = (symbolication_context *)operator new();
  symbolication_context::symbolication_context((uint64_t)v8, a2, a3, 0, (uint64_t)a1);
  v9 = address_space_for_taskid(a1, a4);
  if (v9)
    cssymbolicator = ktrace_address_space_create_cssymbolicator((uint64_t)v8, (uint64_t)v9);
  else
    cssymbolicator = 0;
  symbolication_context::~symbolication_context(v8);
  MEMORY[0x1AF45D4D0]();
  return cssymbolicator;
}

void sub_1AF3777D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF45D4D0](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

uint64_t ktrace_address_space_create_cssymbolicator(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD v45[7];
  _QWORD v46[7];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;

  v2 = *(_QWORD **)(a2 + 16);
  if (!v2)
    return 0;
  v52 = 0;
  v53 = &v52;
  v54 = 0x2020000000;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 5);
  v55 = v3;
  if (HIDWORD(v3))
  {
    _os_assert_log();
    v33 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v33);
  }
  v6 = MEMORY[0x1E0C809B0];
  v7 = *(_QWORD *)(a1 + 80);
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 3221225472;
  v51[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke;
  v51[3] = &unk_1E5F712A8;
  v51[4] = &v52;
  ktrace_address_space_deep_iterate_symbol_owners(v7, a2, (uint64_t)v51);
  if (!*(_DWORD *)(a1 + 40))
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v53 + 6);
  v47 = 0;
  v48 = &v47;
  v49 = 0x2020000000;
  v50 = 0;
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x3812000000;
  v46[3] = __Block_byref_object_copy__201;
  v46[4] = __Block_byref_object_dispose__202;
  v46[5] = "";
  v46[6] = 0;
  v8 = *(_QWORD *)(a1 + 80);
  v45[0] = v6;
  v45[1] = 3221225472;
  v45[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_204;
  v45[3] = &unk_1E5F712D0;
  v45[5] = v46;
  v45[6] = a1;
  v45[4] = &v47;
  ktrace_address_space_deep_iterate_symbol_owners(v8, a2, (uint64_t)v45);
  v9 = malloc_type_calloc(0x40uLL, *((unsigned int *)v53 + 6), 0x92232DCAuLL);
  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = v9;
  v10 = malloc_type_calloc(0x28uLL, v48[3], 0x7A418764uLL);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2020000000;
  v40 = v10;
  v11 = *(_QWORD *)(a1 + 80);
  v36[0] = v6;
  v36[1] = 3221225472;
  v36[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2;
  v36[3] = &unk_1E5F712F8;
  v36[4] = &v41;
  v36[5] = &v37;
  v36[6] = v46;
  v36[7] = a1;
  v36[8] = a2;
  ktrace_address_space_deep_iterate_symbol_owners(v11, a2, (uint64_t)v36);
  v12 = v42[3] - (_QWORD)v9;
  if (v12 >> 38)
  {
    _os_assert_log();
    v34 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v34);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v38[3] - (uint64_t)v10) >> 3) > v48[3])
  {
    _os_assert_log();
    v35 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v35);
  }
  if ((v12 >> 6))
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (v13 && (*(_BYTE *)(v13 + 288) || *(_BYTE *)(v13 + 289))
      || (v14 = *(_QWORD *)(a1 + 8)) != 0 && *(_BYTE *)(v14 + 45))
    {
      v15 = 0;
      v16 = 0;
      LODWORD(v17) = 0;
      v18 = 0;
      v19 = (v12 >> 6);
      v20 = -1;
      while (1)
      {
        v21 = (char *)&v9[8 * v15];
        if ((v21[60] & 0x10) != 0)
          break;
        v22 = *((unsigned int *)v21 + 14);
        if ((_DWORD)v22)
        {
          v23 = (unint64_t *)v9[8 * v15 + 6];
          do
          {
            v25 = *v23;
            v23 += 5;
            v24 = v25;
            if (v25 < v20)
            {
              v18 = v15;
              v20 = v24;
            }
            if (v24 > v16)
            {
              LODWORD(v17) = v15;
              v16 = v24;
            }
            --v22;
          }
          while (v22);
        }
        if (++v15 == v19)
        {
          if (HIDWORD(v16))
            v26 = *(_DWORD *)(a2 + 32) == 0;
          else
            v26 = 0;
          if (v26)
            v17 = v17;
          else
            v17 = v18;
          v27 = (char *)&v9[8 * v17];
          v30 = *((_DWORD *)v27 + 15);
          v28 = (int *)(v27 + 60);
          v29 = v30;
          if ((v30 & 0x40) == 0)
            *v28 = v29 | 0x10;
          break;
        }
      }
    }
  }
  else if (*(_QWORD *)a1)
  {
    fwrite("Couldn't find any binary image infos.  Symbolicator will be NULL\n", 0x41uLL, 1uLL, *(FILE **)a1);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      ktrace_address_space_create_cssymbolicator();
  }
  v31 = CSSymbolicatorCreateWithBinaryImageListCountPidFlagsAndNotification();
  free(v10);
  free(v9);
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(v46, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v52, 8);
  return v31;
}

void sub_1AF377BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 184), 8);
  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t ktrace_uuid_map_create_cssymbolicator_for_pid(ktrace_uuid_map *a1, uint64_t a2, uint64_t a3, int a4)
{
  symbolication_context *v8;
  _QWORD *v9;
  uint64_t cssymbolicator;

  if (!a1)
    return 0;
  v8 = (symbolication_context *)operator new();
  symbolication_context::symbolication_context((uint64_t)v8, a2, a3, 0, (uint64_t)a1);
  v9 = address_space_for_pid(a1, a4);
  if (v9)
    cssymbolicator = ktrace_address_space_create_cssymbolicator((uint64_t)v8, (uint64_t)v9);
  else
    cssymbolicator = 0;
  symbolication_context::~symbolication_context(v8);
  MEMORY[0x1AF45D4D0]();
  return cssymbolicator;
}

void sub_1AF377D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF45D4D0](v1, 0x10A0C407A870E32);
  _Unwind_Resume(a1);
}

_QWORD *ktrace_create_dsym_search_configuration(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = malloc_type_calloc(1uLL, 0x30uLL, 0x1060040B0DE3062uLL);
  if (!v2)
    ktrace_remotetime_update_params_cold_1();
  v3 = v2;
  if (a1)
  {
    if (*(_QWORD *)a1)
      *v2 = CFArrayCreateMutableCopy(0, 0, *(CFArrayRef *)a1);
    *((_BYTE *)v3 + 24) = *(_BYTE *)(a1 + 8);
  }
  return v3;
}

void ktrace_dsym_search_configuration_add_dstroot_path(__CFArray **a1, char *cStr)
{
  __CFArray *Mutable;
  CFStringRef v5;
  CFStringRef v6;

  Mutable = *a1;
  if (!*a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *a1 = Mutable;
  }
  v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v5)
    ktrace_remotetime_update_params_cold_1();
  v6 = v5;
  CFAutorelease(v5);
  CFArrayAppendValue(Mutable, v6);
}

void ktrace_dsym_search_configuration_add_recursive_search_path(uint64_t a1, char *cStr)
{
  __CFArray *Mutable;
  CFStringRef v5;
  CFStringRef v6;

  Mutable = *(__CFArray **)(a1 + 8);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 8) = Mutable;
  }
  v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v5)
    ktrace_remotetime_update_params_cold_1();
  v6 = v5;
  CFAutorelease(v5);
  CFArrayAppendValue(Mutable, v6);
}

uint64_t ktrace_dsym_search_configuration_set_use_debugsymbols_defaults(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

CFTypeRef ktrace_dsym_search_configuration_set_dsymForUUID(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = CFRetain(cf);
  *(_QWORD *)(a1 + 16) = cf;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_assume_system_arch(uint64_t result, char a2)
{
  *(_BYTE *)(result + 25) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_allow_arch_unknown(uint64_t result, char a2)
{
  *(_BYTE *)(result + 26) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_allow_image_type_unknown(uint64_t result, char a2)
{
  *(_BYTE *)(result + 27) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_infer_aout_flag_from_addresses(uint64_t result, char a2)
{
  *(_BYTE *)(result + 45) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_infer_dyld_flag_from_filename(uint64_t result, char a2)
{
  *(_BYTE *)(result + 46) = a2;
  return result;
}

size_t ktrace_dsym_search_configuration_set_kernel_text_segment_name(uint64_t a1, const char *a2)
{
  return strlcpy((char *)(a1 + 28), a2, 0x11uLL);
}

_QWORD *ktrace_dsym_search_configuration_create_with_plist(const void *a1)
{
  CFTypeID v2;
  _QWORD *dsym_search_configuration;
  _QWORD context[5];

  v2 = CFGetTypeID(a1);
  if (v2 == CFDictionaryGetTypeID())
  {
    dsym_search_configuration = ktrace_create_dsym_search_configuration(0);
    context[0] = MEMORY[0x1E0C809B0];
    context[1] = 3221225472;
    context[2] = __ktrace_dsym_search_configuration_create_with_plist_block_invoke;
    context[3] = &__block_descriptor_40_e25_v24__0____CFString__8_v16l;
    context[4] = dsym_search_configuration;
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
      ktrace_dsym_search_configuration_create_with_plist_cold_1();
    return 0;
  }
  return dsym_search_configuration;
}

void __ktrace_dsym_search_configuration_create_with_plist_block_invoke(uint64_t a1, const __CFString *a2, const __CFString *cf)
{
  CFTypeID v6;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  CFTypeID v15;
  __CFArray *v16;
  char *v17;
  char *v18;
  CFRange v19;

  v6 = CFGetTypeID(cf);
  if (v6 == CFArrayGetTypeID() && CFStringCompare(a2, CFSTR("dstroots"), 0) == kCFCompareEqualTo)
  {
    v16 = **(__CFArray ***)(a1 + 32);
    if (!v16)
    {
      **(_QWORD **)(a1 + 32) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v16 = **(__CFArray ***)(a1 + 32);
    }
    goto LABEL_27;
  }
  v7 = CFGetTypeID(cf);
  if (v7 == CFArrayGetTypeID() && CFStringCompare(a2, CFSTR("recursive_search_dirs"), 0) == kCFCompareEqualTo)
  {
    v16 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 8);
    if (!v16)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v16 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 8);
    }
LABEL_27:
    v19.length = CFArrayGetCount((CFArrayRef)cf);
    v19.location = 0;
    CFArrayAppendArray(v16, (CFArrayRef)cf, v19);
    return;
  }
  v8 = CFGetTypeID(cf);
  if (v8 == CFStringGetTypeID() && CFStringCompare(a2, CFSTR("dsymForUUID"), 0) == kCFCompareEqualTo)
  {
    CFRetain(cf);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = cf;
  }
  else
  {
    v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID() && CFStringCompare(a2, CFSTR("debugsymbols_defaults"), 0) == kCFCompareEqualTo)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
    }
    else
    {
      v10 = CFGetTypeID(cf);
      if (v10 == CFBooleanGetTypeID() && CFStringCompare(a2, CFSTR("assumeSystemArch"), 0) == kCFCompareEqualTo)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
      }
      else
      {
        v11 = CFGetTypeID(cf);
        if (v11 == CFBooleanGetTypeID() && CFStringCompare(a2, CFSTR("allowArchUnknown"), 0) == kCFCompareEqualTo)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 26) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
        }
        else
        {
          v12 = CFGetTypeID(cf);
          if (v12 == CFBooleanGetTypeID()
            && CFStringCompare(a2, CFSTR("allowImageTypeUnknown"), 0) == kCFCompareEqualTo)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 27) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
          }
          else
          {
            v13 = CFGetTypeID(cf);
            if (v13 == CFBooleanGetTypeID()
              && CFStringCompare(a2, CFSTR("inferAoutFlagFromAddresses"), 0) == kCFCompareEqualTo)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 32) + 45) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
            }
            else
            {
              v14 = CFGetTypeID(cf);
              if (v14 == CFBooleanGetTypeID()
                && CFStringCompare(a2, CFSTR("inferDyldFlagFromFilename"), 0) == kCFCompareEqualTo)
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 32) + 46) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
              }
              else
              {
                v15 = CFGetTypeID(cf);
                if (v15 == CFStringGetTypeID()
                  && CFStringCompare(a2, CFSTR("kernelTextSegmentName"), 0) == kCFCompareEqualTo)
                {
                  v17 = (char *)(*(_QWORD *)(a1 + 32) + 28);
                  v18 = utf8(cf);
                  strlcpy(v17, v18, 0x11uLL);
                }
                else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                {
                  __ktrace_dsym_search_configuration_create_with_plist_block_invoke_cold_1(a2);
                }
              }
            }
          }
        }
      }
    }
  }
}

__CFDictionary *ktrace_dsym_search_configuration_copy_plist(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  const void *v4;
  CFMutableArrayRef v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const char *v15;
  int v16;
  CFStringRef v17;
  CFStringRef v18;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    ktrace_remotetime_update_params_cold_1();
  v3 = Mutable;
  if (*(_QWORD *)a1)
    CFDictionarySetValue(Mutable, CFSTR("dstroots"), *(const void **)a1);
  v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFDictionarySetValue(v3, CFSTR("recursive_search_dirs"), v4);
  }
  else
  {
    v5 = CFArrayCreateMutable(0, 0, 0);
    CFDictionarySetValue(v3, CFSTR("recursive_search_dirs"), v5);
    CFRelease(v5);
  }
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFDictionarySetValue(v3, CFSTR("dsymForUUID"), v6);
  v7 = (const void *)*MEMORY[0x1E0C9AE50];
  v8 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(a1 + 24))
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v3, CFSTR("debugsymbols_defaults"), v9);
  if (*(_BYTE *)(a1 + 25))
    v10 = v7;
  else
    v10 = v8;
  CFDictionarySetValue(v3, CFSTR("assumeSystemArch"), v10);
  if (*(_BYTE *)(a1 + 26))
    v11 = v7;
  else
    v11 = v8;
  CFDictionarySetValue(v3, CFSTR("allowArchUnknown"), v11);
  if (*(_BYTE *)(a1 + 27))
    v12 = v7;
  else
    v12 = v8;
  CFDictionarySetValue(v3, CFSTR("allowImageTypeUnknown"), v12);
  if (*(_BYTE *)(a1 + 45))
    v13 = v7;
  else
    v13 = v8;
  CFDictionarySetValue(v3, CFSTR("inferAoutFlagFromAddresses"), v13);
  if (*(_BYTE *)(a1 + 46))
    v14 = v7;
  else
    v14 = v8;
  CFDictionarySetValue(v3, CFSTR("inferDyldFlagFromFilename"), v14);
  v16 = *(unsigned __int8 *)(a1 + 28);
  v15 = (const char *)(a1 + 28);
  if (v16)
  {
    v17 = CFStringCreateWithCString(0, v15, 0x8000100u);
    if (!v17)
      ktrace_remotetime_update_params_cold_1();
    v18 = v17;
    CFAutorelease(v17);
    CFDictionarySetValue(v3, CFSTR("kernelTextSegmentName"), v18);
  }
  return v3;
}

void ktrace_free_dsym_search_configuration(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t ktrace_uuid_map_event_prepass(uint64_t result, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  _QWORD v5[5];

  v4 = *(_QWORD *)(a2 + 632);
  if (v4)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __ktrace_uuid_map_event_prepass_block_invoke;
    v5[3] = &__block_descriptor_40_e25_v24__0_PrepassOpRef_Q___8l;
    v5[4] = v4;
    return ktrace_uuid_map_update_internal(result, a2, a3, a4, 0, (uint64_t)v5);
  }
  return result;
}

void __ktrace_uuid_map_event_prepass_block_invoke(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[5];

  v3 = a2;
  v4 = *(uint64_t **)(a1 + 32);
  v15 = a2;
  v5 = _Block_copy(aBlock);
  v16 = v5;
  v6 = (_QWORD *)v4[1];
  v7 = v4[2];
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v11 = v7 - *v4;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v17[4] = v4 + 2;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>((uint64_t)(v4 + 2), v12);
      v3 = v15;
      v5 = v16;
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v12];
    *(_QWORD *)v14 = v3;
    *((_QWORD *)v14 + 1) = v5;
    v16 = 0;
    v17[2] = v14 + 16;
    std::vector<PrepassOp>::__swap_out_circular_buffer(v4, v17);
    v8 = (_QWORD *)v4[1];
    std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v6 = v3;
    v6[1] = v5;
    v16 = 0;
    v8 = v6 + 2;
    v4[1] = (uint64_t)(v6 + 2);
  }
  v4[1] = (uint64_t)v8;
  PrepassOp::~PrepassOp((PrepassOp *)&v15);
}

void sub_1AF3786E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)va1);
  PrepassOp::~PrepassOp((PrepassOp *)va);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_chunk_prepass(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];
  _QWORD v21[5];

  v2 = *(uint64_t **)(a1 + 632);
  if (v2)
  {
    v5 = ktrace_chunk_tag((uint64_t)a2);
    if (v5 != 20990)
    {
      if (v5 == 32770)
      {
        if (ktrace_chunk_version_major((uint64_t)a2) > 1)
          return;
      }
      else if (v5 != 36864 || ktrace_chunk_version_major((uint64_t)a2))
      {
        return;
      }
    }
    v6 = ktrace_stackshot_chunk_timestamp(a2);
    if (v6 != -1)
    {
      v7 = v6;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __ktrace_uuid_map_chunk_prepass_block_invoke;
      aBlock[3] = &__block_descriptor_48_e5_v8__0l;
      aBlock[4] = a2;
      aBlock[5] = a1;
      v18 = v6;
      v8 = _Block_copy(aBlock);
      v19 = (uint64_t)v8;
      v9 = v2[2];
      v10 = (uint64_t *)v2[1];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((uint64_t)v10 - *v2) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        v13 = v9 - *v2;
        v14 = v13 >> 3;
        if (v13 >> 3 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v21[4] = v2 + 2;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>((uint64_t)(v2 + 2), v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[16 * v12];
        v21[0] = v16;
        v21[1] = v17;
        v21[3] = &v16[16 * v15];
        *v17 = 0;
        v17[1] = 0;
        *v17 = v18;
        v17[1] = v19;
        v19 = 0;
        v21[2] = v17 + 2;
        std::vector<PrepassOp>::__swap_out_circular_buffer(v2, v21);
        v11 = (_QWORD *)v2[1];
        std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)v21);
      }
      else
      {
        *v10 = v7;
        v10[1] = (uint64_t)v8;
        v19 = 0;
        v11 = v10 + 2;
        v2[1] = (uint64_t)(v10 + 2);
      }
      v2[1] = (uint64_t)v11;
      PrepassOp::~PrepassOp((PrepassOp *)&v18);
    }
  }
}

void sub_1AF3788B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)va1);
  PrepassOp::~PrepassOp((PrepassOp *)va);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_uuid_map_chunk_prepass_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __ktrace_uuid_map_chunk_prepass_block_invoke_2;
  v3[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
  v1 = *(uint64_t **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return ktrace_stackshot_chunk_unwrap(v1, (uint64_t)v3);
}

void __ktrace_uuid_map_chunk_prepass_block_invoke_2(uint64_t a1, kcdata_iter a2)
{
  ktrace_uuid_map_update_with_stackshot(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 304), a2, *(_QWORD *)(a1 + 32));
}

_QWORD *ktrace_prepass_uuid_map_init(uint64_t a1)
{
  _QWORD *result;

  if (*(_QWORD *)(a1 + 632))
    ktrace_remotetime_update_params_cold_1();
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *(_QWORD *)(a1 + 632) = result;
  return result;
}

uint64_t ktrace_prepass_uuid_map_finish(uint64_t result)
{
  unint64_t **v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  char v10;
  void **v11;

  v1 = *(unint64_t ***)(result + 632);
  if (v1)
  {
    v2 = result;
    v3 = v1[1];
    v4 = 126 - 2 * __clz(((char *)v3 - (char *)*v1) >> 4);
    if (v3 == *v1)
      v5 = 0;
    else
      v5 = v4;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(*v1, v3, (uint64_t)&v10, v5, 1);
    v7 = *v1;
    v6 = v1[1];
    if (v6 != *v1)
    {
      do
      {
        v8 = v6 - 2;
        (*(void (**)(void))(*(v6 - 1) + 16))();
        v6 = v8;
      }
      while (v8 != v7);
    }
    v11 = (void **)v1;
    std::vector<PrepassOp>::__destroy_vector::operator()[abi:ne180100](&v11);
    result = MEMORY[0x1AF45D4D0](v1, 0x20C40960023A9);
    *(_QWORD *)(v2 + 632) = 0;
    v9 = *(_QWORD *)(v2 + 304);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 208))
        std::__throw_bad_optional_access[abi:ne180100]();
      return DyldDecodeWindow::reset((DyldDecodeWindow *)(v9 + 48));
    }
  }
  return result;
}

uint64_t ktrace_uuid_map_set_dsc_unslid_base_addresses(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 280) = a2;
  return result;
}

CFStringRef ktrace_symbols_buffer_to_text(const __CFData *a1, int a2)
{
  CFStringRef v4;
  __int128 *v5;
  const UInt8 *v6;
  void **v7;
  CFIndex v8;
  void *v10[2];
  char v11;
  __int128 v12;
  char v13;
  void *__p[2];
  char v15;
  __int128 v16;
  char v17;
  void *v18;
  void *v19[2];
  unsigned __int8 v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  const UInt8 *BytePtr;
  unint64_t Length;
  __int128 v27;
  uint64_t v28;
  char v29;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v27 = xmmword_1AF3E9EE0;
  v28 = 0;
  v29 = 1;
  if (Length >= 0x7FFFFFFF)
    ktrace_symbols_buffer_to_text_cold_1();
  v4 = 0;
  if (flatbuffers::Verifier::VerifyBufferFromStart<FlatbufferSymbols::SymbolsBuffer>((flatbuffers::Verifier *)&BytePtr, "SYMB", 0))
  {
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "\n");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      flatbuffers::ToStringVisitor::ToStringVisitor((uint64_t)&v18, &v16, 1, (__int128 *)__p, 1);
      if (v15 < 0)
        operator delete(__p[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_13;
      v5 = &v16;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, " ");
      std::string::basic_string[abi:ne180100]<0>(v10, "");
      flatbuffers::ToStringVisitor::ToStringVisitor((uint64_t)&v18, &v12, 1, (__int128 *)v10, 1);
      if (v11 < 0)
        operator delete(v10[0]);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_13;
      v5 = &v12;
    }
    operator delete(*(void **)v5);
LABEL_13:
    v6 = CFDataGetBytePtr(a1);
    flatbuffers::IterateObject((int *)&v6[*(unsigned int *)v6], (uint64_t)&FlatbufferSymbols::SymbolsBufferTypeTable(void)::tt, (uint64_t)&v18);
    if ((v20 & 0x80u) == 0)
      v7 = v19;
    else
      v7 = (void **)v19[0];
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = (CFIndex)v19[1];
    v4 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    v18 = &unk_1E5F6F760;
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
    if ((char)v20 < 0)
      operator delete(v19[0]);
  }
  return v4;
}

void sub_1AF378C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::~ToStringVisitor(void **this)
{
  *this = &unk_1E5F6F760;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5F6F760;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF45D4D0);
}

CFDataRef ktrace_dumpbuffer_address_space(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  CFDataRef v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void *__p;
  char *v31;
  char *v32;

  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 304);
  if (!v4)
    return 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  if ((a3 & 2) != 0)
  {
    v8 = *(_QWORD **)(*(_QWORD *)(v4 + 32) + 16);
    if (v8)
    {
      v9 = 0;
      do
      {
        v10 = v8[3];
        if (v9 >= v32)
        {
          v11 = (v9 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
          v12 = (v32 - (_BYTE *)__p) >> 2;
          if (v12 <= v11 + 1)
            v12 = v11 + 1;
          if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v11];
          *(_QWORD *)v15 = v10;
          v9 = v15 + 8;
          v17 = (char *)__p;
          v16 = v31;
          if (v31 != __p)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)__p;
          }
          __p = v15;
          v31 = v9;
          v32 = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          v9 += 8;
        }
        v31 = v9;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
  }
  else
  {
    v6 = address_space_for_taskid((ktrace_uuid_map *)v4, a2);
    if (!v6)
    {
      v7 = 0;
      goto LABEL_44;
    }
    v19 = (v31 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v20 = (v32 - (_BYTE *)__p) >> 2;
    if (v20 <= v19 + 1)
      v20 = v19 + 1;
    if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v21);
    else
      v22 = 0;
    v23 = &v22[8 * v19];
    v24 = &v22[8 * v21];
    *(_QWORD *)v23 = v6;
    v25 = v23 + 8;
    v27 = (char *)__p;
    v26 = v31;
    if (v31 != __p)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v23 - 1) = v28;
        v23 -= 8;
      }
      while (v26 != v27);
      v26 = (char *)__p;
    }
    __p = v23;
    v31 = v25;
    v32 = v24;
    if (v26)
      operator delete(v26);
    v31 = v25;
  }
  v7 = ktrace_dumpbuffer(a1, v4, (uint64_t **)&__p, a3);
LABEL_44:
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_1AF378F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFDataRef ktrace_dumpbuffer(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const char *execname_for_pid;
  const char *v10;
  size_t v11;
  uint64_t *v12;
  flatbuffers::FlatBufferBuilder *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  void *v43;
  unsigned int v44;
  uint64_t *v45;
  flatbuffers::FlatBufferBuilder *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const __CFAllocator *v56;
  CFDataRef v57;
  uint64_t v59;
  CFAllocatorContext context;
  _QWORD v62[6];
  void *__p;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  void (*v73)(uint64_t);
  const char *v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  _BYTE v84[40];
  int v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  symbolication_context::symbolication_context((uint64_t)v84, 0, 0, 0, a2);
  v85 = 0x7FFFFFFF;
  v69 = 0;
  v70 = &v69;
  v71 = 0x9012000000;
  v72 = __Block_byref_object_copy__299;
  v73 = __Block_byref_object_dispose__300;
  v74 = "";
  v75 = 0;
  v76 = 0;
  v77 = xmmword_1AF3E9BF0;
  v78 = 0u;
  v79 = 0u;
  v80 = 0;
  v81 = 1;
  v82 = 256;
  v83 = 0;
  v66 = 0u;
  v67 = 0u;
  v68 = 1065353216;
  __p = 0;
  v64 = 0;
  v65 = 0;
  v7 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
    goto LABEL_47;
  do
  {
    v8 = *v7;
    execname_for_pid = (const char *)ktrace_get_execname_for_pid(a1, *(_DWORD *)(*v7 + 32));
    v10 = execname_for_pid;
    if (execname_for_pid)
    {
      v11 = strlen(execname_for_pid);
      LODWORD(v10) = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(v70 + 6), v10, v11);
    }
    context.version = 0;
    context.info = &context;
    context.retain = (CFAllocatorRetainCallBack)0x3812000000;
    context.release = (CFAllocatorReleaseCallBack)__Block_byref_object_copy__302;
    context.copyDescription = (CFAllocatorCopyDescriptionCallBack)__Block_byref_object_dispose__303;
    context.allocate = (CFAllocatorAllocateCallBack)"";
    LODWORD(context.reallocate) = 0;
    v62[0] = MEMORY[0x1E0C809B0];
    v62[1] = 3221225472;
    v62[2] = ___ZL17ktrace_dumpbufferP14ktrace_sessionP15ktrace_uuid_mapRNSt3__16vectorIP20ktrace_address_spaceNS3_9allocatorIS6_EEEEy_block_invoke;
    v62[3] = &unk_1E5F71980;
    v62[4] = &context;
    v62[5] = &v69;
    ktrace_address_space_iterate_symbol_owners(v86, v8, (uint64_t)v62);
    v12 = v70;
    v13 = (flatbuffers::FlatBufferBuilder *)(v70 + 6);
    flatbuffers::FlatBufferBuilder::NotNested((uint64_t)(v70 + 6));
    *((_BYTE *)v12 + 118) = 1;
    v14 = *((_DWORD *)v12 + 20);
    v15 = *((_DWORD *)v12 + 24);
    v16 = *((_DWORD *)v12 + 22);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)v13, 6, *(int *)(v8 + 32), -1);
    if (*(_QWORD *)(v8 + 24))
    {
      v17 = optional_uint64::value((optional_uint64 *)(v8 + 24));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)v13, 8, v17, -1);
    }
    if ((_DWORD)v10)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(v13, 4, v10);
    v18 = *((_DWORD *)context.info + 12);
    if (v18)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(v13, 10, v18);
    v19 = flatbuffers::FlatBufferBuilder::EndTable(v13, v14 - v15 + v16);
    v20 = ktrace_address_space_buildbuffer(a1, (uint64_t)v84, v8, 1, v19, (flatbuffers::FlatBufferBuilder *)(v70 + 6), (uint64_t)&v66, a4);
    v21 = v20;
    v22 = v64;
    if (v64 >= v65)
    {
      v24 = (char *)__p;
      v25 = (v64 - (_BYTE *)__p) >> 2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      v27 = v65 - (_BYTE *)__p;
      if ((v65 - (_BYTE *)__p) >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)&v65, v28);
        v24 = (char *)__p;
        v22 = v64;
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v25];
      *(_DWORD *)v30 = v21;
      v23 = v30 + 4;
      while (v22 != v24)
      {
        v31 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v30 - 1) = v31;
        v30 -= 4;
      }
      __p = v30;
      v64 = v23;
      v65 = &v29[4 * v28];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v64 = v20;
      v23 = v22 + 4;
    }
    v64 = v23;
    _Block_object_dispose(&context, 8);
    ++v7;
  }
  while (v7 != v6);
  v32 = (uint64_t *)v67;
  if (!(_QWORD)v67)
  {
LABEL_47:
    v34 = v64;
  }
  else
  {
    v33 = v64;
    do
    {
      if (v33 >= v65)
      {
        v35 = (char *)__p;
        v36 = (v33 - (_BYTE *)__p) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        v38 = v65 - (_BYTE *)__p;
        if ((v65 - (_BYTE *)__p) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)&v65, v39);
          v35 = (char *)__p;
          v33 = v64;
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[4 * v36];
        *(_DWORD *)v41 = *((_DWORD *)v32 + 8);
        v34 = v41 + 4;
        while (v33 != v35)
        {
          v42 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }
        __p = v41;
        v64 = v34;
        v65 = &v40[4 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v33 = *((_DWORD *)v32 + 8);
        v34 = v33 + 4;
      }
      v64 = v34;
      v32 = (uint64_t *)*v32;
      v33 = v34;
    }
    while (v32);
  }
  if (v34 == __p)
    v43 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>> const&)::t;
  else
    v43 = __p;
  v44 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>((flatbuffers::FlatBufferBuilder *)(v70 + 6), (uint64_t)v43, (v34 - (_BYTE *)__p) >> 2);
  v45 = v70;
  v46 = (flatbuffers::FlatBufferBuilder *)(v70 + 6);
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)(v70 + 6));
  *((_BYTE *)v45 + 118) = 1;
  v47 = v45[10];
  v50 = v45 + 11;
  v48 = v45[11];
  v49 = v50[1];
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(v46, 4, v44);
  v51 = flatbuffers::FlatBufferBuilder::EndTable(v46, (int)v47 - (int)v49 + (int)v48);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)(v70 + 6), v51, "SYMB", 0);
  v52 = v70;
  if (!*((_BYTE *)v70 + 119))
    __assert_rtn("Finished", "flatbuffers.h", 1321, "finished");
  v54 = v70[10];
  v53 = v70[11];
  v55 = (void *)(v70[12] - v53);
  *((_OWORD *)v70 + 5) = 0u;
  *((_OWORD *)v52 + 6) = 0u;
  context.version = 0;
  memset(&context.retain, 0, 40);
  context.info = v55;
  context.deallocate = (CFAllocatorDeallocateCallBack)callback_deallocate_buffer;
  context.preferredSize = 0;
  v56 = CFAllocatorCreate(0, &context);
  if (!v56)
  {
    _os_assert_log();
    v59 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v59);
  }
  v57 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v55 + v53, v54 - (_QWORD)v55, v56);
  CFRelease(v56);
  if (__p)
  {
    v64 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&v66);
  _Block_object_dispose(&v69, 8);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v75);
  symbolication_context::~symbolication_context((symbolication_context *)v84);
  return v57;
}

void sub_1AF379534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, flatbuffers::FlatBufferBuilder *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&a31);
  _Block_object_dispose(&a36, 8);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(a10);
  symbolication_context::~symbolication_context((symbolication_context *)(v36 - 216));
  _Unwind_Resume(a1);
}

CFDataRef ktrace_dumpbuffer_address_space_pid(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  CFDataRef v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void *__p;
  char *v31;
  char *v32;

  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 304);
  if (!v4)
    return 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  if ((a3 & 2) != 0)
  {
    v8 = *(_QWORD **)(*(_QWORD *)(v4 + 32) + 16);
    if (v8)
    {
      v9 = 0;
      do
      {
        v10 = v8[3];
        if (v9 >= v32)
        {
          v11 = (v9 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
          v12 = (v32 - (_BYTE *)__p) >> 2;
          if (v12 <= v11 + 1)
            v12 = v11 + 1;
          if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v11];
          *(_QWORD *)v15 = v10;
          v9 = v15 + 8;
          v17 = (char *)__p;
          v16 = v31;
          if (v31 != __p)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)__p;
          }
          __p = v15;
          v31 = v9;
          v32 = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          v9 += 8;
        }
        v31 = v9;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
  }
  else
  {
    v6 = address_space_for_pid((ktrace_uuid_map *)v4, a2);
    if (!v6)
    {
      v7 = 0;
      goto LABEL_44;
    }
    v19 = (v31 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
    v20 = (v32 - (_BYTE *)__p) >> 2;
    if (v20 <= v19 + 1)
      v20 = v19 + 1;
    if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v21);
    else
      v22 = 0;
    v23 = &v22[8 * v19];
    v24 = &v22[8 * v21];
    *(_QWORD *)v23 = v6;
    v25 = v23 + 8;
    v27 = (char *)__p;
    v26 = v31;
    if (v31 != __p)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v23 - 1) = v28;
        v23 -= 8;
      }
      while (v26 != v27);
      v26 = (char *)__p;
    }
    __p = v23;
    v31 = v25;
    v32 = v24;
    if (v26)
      operator delete(v26);
    v31 = v25;
  }
  v7 = ktrace_dumpbuffer(a1, v4, (uint64_t **)&__p, a3);
LABEL_44:
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_1AF379810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL21ktrace_register_typesv_block_invoke()
{
  uint64_t result;

  ktrace_uuid_map_typeid = _CFRuntimeRegisterClass();
  result = _CFRuntimeRegisterClass();
  ktrace_address_space_typeid = result;
  return result;
}

void ktrace_uuid_map_dealloc(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;

  if (a1)
  {
    v2 = a1[3];
    if (v2)
    {
      v3 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(v2);
      MEMORY[0x1AF45D4D0](v3, 0x10A0C408EF24B1CLL);
    }
    v4 = a1[4];
    if (v4)
    {
      v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(v4);
      MEMORY[0x1AF45D4D0](v5, 0x10A0C408EF24B1CLL);
    }
    v6 = a1[5];
    if (v6)
    {
      v7 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v6);
      MEMORY[0x1AF45D4D0](v7, 0x10A0C408EF24B1CLL);
    }
    std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100]((uint64_t)(a1 + 6));
    v8 = (const void *)a1[31];
    if (v8)
      CFRelease(v8);
    v9 = a1[27];
    if (v9)
    {
      v10 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v9);
      MEMORY[0x1AF45D4D0](v10, 0x10A0C408EF24B1CLL);
    }
    v11 = (const void *)a1[28];
    if (v11)
      CFRelease(v11);
    v12 = a1[30];
    if (v12)
    {
      v13 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v12);
      MEMORY[0x1AF45D4D0](v13, 0x10A0C408EF24B1CLL);
    }
    v14 = (const void *)a1[29];
    if (v14)
      CFRelease(v14);
  }
}

uint64_t std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 160))
  {
    v1 = result;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(result + 112);
    result = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v1);
    *(_BYTE *)(v1 + 160) = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  const void **v2;
  const void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (const void **)*v2;
      CF::TypeRef::~TypeRef(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t ktrace_address_space_dealloc(uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(void ***)(result + 16);
      std::vector<SymbolOwner>::__destroy_vector::operator()[abi:ne180100](&v2);
      return MEMORY[0x1AF45D4D0](v1, 0x20C40960023A9);
    }
  }
  return result;
}

void std::vector<SymbolOwner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        SymbolOwner::~SymbolOwner((SymbolOwner *)(v4 - 96));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v4;
  _QWORD v6[4];
  __int128 v7;

  v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20990)
    goto LABEL_7;
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) <= 1)
    {
LABEL_7:
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke_2;
      v6[3] = &unk_1E5F70FE0;
      v7 = *(_OWORD *)(a1 + 32);
      ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v6);
    }
  }
  else if (v4 == 36864 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    goto LABEL_7;
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke_2(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  size_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    v4 = a2;
    v5 = result;
    while (1)
    {
      v6 = *(unsigned int *)(v4 + 4);
      v7 = v3 + v6;
      if (v3 + v6 > a3)
        return result;
      if (*(_DWORD *)v4 == 2319)
        break;
      v3 = v7 + 16;
      v4 = v7;
      if (v7 + 16 > a3)
        return result;
    }
    v8 = v6 >= (*(_DWORD *)(v4 + 8) & 0xFu);
    v9 = v6 - (*(_DWORD *)(v4 + 8) & 0xF);
    if (v8)
      v10 = v9;
    else
      v10 = 0;
    if (strnstr((const char *)(v4 + 16), "X86_64", v10))
      goto LABEL_47;
    v11 = *(_DWORD *)v4;
    if ((*(_DWORD *)v4 & 0xFFFFFFF0) == 0x20)
      v11 = 17;
    if (v11 > 2309)
    {
      if (v11 == 2310)
      {
        v13 = *(_DWORD *)(v4 + 4);
        v14 = *(_QWORD *)(v4 + 8);
        if (v13 == 112)
        {
          if ((v14 & 0x8F) == 0)
          {
            v12 = 104;
            goto LABEL_28;
          }
          v13 = 112;
        }
LABEL_26:
        v15 = v14 & 0xF;
        v8 = v13 >= v15;
        v12 = v13 - v15;
        if (!v8)
          v12 = 0;
LABEL_28:
        if (!strnstr((const char *)(v4 + 16), "ARM64", v12))
        {
          v16 = *(_DWORD *)v4;
          if ((*(_DWORD *)v4 & 0xFFFFFFF0) == 0x20)
            v16 = 17;
          if (v16 > 2309)
          {
            if (v16 == 2310)
            {
              v18 = *(_DWORD *)(v4 + 4);
              v19 = *(_QWORD *)(v4 + 8);
              if (v18 == 112)
              {
                if ((v19 & 0x8F) == 0)
                {
                  v17 = 104;
                  goto LABEL_46;
                }
                v18 = 112;
              }
LABEL_44:
              v20 = v19 & 0xF;
              v8 = v18 >= v20;
              v17 = v18 - v20;
              if (!v8)
                v17 = 0;
LABEL_46:
              result = (uint64_t)strnstr((const char *)(v4 + 16), "ARM", v17);
              if (!result)
                return result;
              goto LABEL_47;
            }
            if (v16 == 2312)
            {
              v18 = *(_DWORD *)(v4 + 4);
              v19 = *(_QWORD *)(v4 + 8);
              if (v18 == 32)
              {
                if ((v19 & 0x8F) == 0)
                {
                  v17 = 24;
                  goto LABEL_46;
                }
                v18 = 32;
              }
              goto LABEL_44;
            }
          }
          else if (v16 == 17 || v16 == 19)
          {
            v17 = *(_DWORD *)(v4 + 4);
            goto LABEL_46;
          }
          v18 = *(_DWORD *)(v4 + 4);
          v19 = *(_QWORD *)(v4 + 8);
          goto LABEL_44;
        }
LABEL_47:
        result = CSArchitectureGetArchitectureForName();
        **(_QWORD **)(v5 + 40) = result;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24) = 1;
        return result;
      }
      if (v11 == 2312)
      {
        v13 = *(_DWORD *)(v4 + 4);
        v14 = *(_QWORD *)(v4 + 8);
        if (v13 == 32)
        {
          if ((v14 & 0x8F) == 0)
          {
            v12 = 24;
            goto LABEL_28;
          }
          v13 = 32;
        }
        goto LABEL_26;
      }
    }
    else if (v11 == 17 || v11 == 19)
    {
      v12 = *(_DWORD *)(v4 + 4);
      goto LABEL_28;
    }
    v13 = *(_DWORD *)(v4 + 4);
    v14 = *(_QWORD *)(v4 + 8);
    goto LABEL_26;
  }
  return result;
}

void SymbolOwner::~SymbolOwner(SymbolOwner *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 10);
  if (v1)
    CFRelease(v1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      CF::TypeRef::~TypeRef(v2 + 3);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_1AF37A2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t ___ZL22dscsym_buffer_get_uuidPKvmPA16_h_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  char *v5;
  CFStringRef v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t v9;
  _QWORD context[6];
  uint64_t v11;

  v11 = 0;
  v5 = utf8(a2);
  if (sscanf(v5, "%x:%x", (char *)&v11 + 4, &v11) == 2)
  {
    v6 = cfaasprintf("%llx", HIDWORD(v11) | ((unint64_t)v11 << 32));
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      ktrace_remotetime_update_params_cold_1();
    v8 = Mutable;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v6, Mutable);
    CFRelease(v8);
    context[0] = MEMORY[0x1E0C809B0];
    context[1] = 3221225472;
    context[2] = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_124;
    context[3] = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
    v9 = *(_QWORD *)(a1 + 40);
    context[4] = v8;
    context[5] = v9;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
  }
  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
  {
    ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_cold_2();
  }
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_124(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  const void *Value;
  const void *v9;
  CFTypeID v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  _QWORD v14[6];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    ktrace_remotetime_update_params_cold_1();
  v7 = Mutable;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, Mutable);
  CFRelease(v7);
  Value = CFDictionaryGetValue(a3, CFSTR("path"));
  v9 = Value;
  if (Value)
  {
    v10 = CFGetTypeID(Value);
    if (v10 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      v9 = 0;
    }
  }
  v11 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("uuids"));
  v12 = v11;
  if (v11)
  {
    v13 = CFGetTypeID(v11);
    if (v13 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      v12 = 0;
    }
  }
  if (v9)
  {
    CFDictionarySetValue(v7, CFSTR("Path"), v9);
    if (v12)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_2;
      v14[3] = &__block_descriptor_48_e37_v24__0____CFString__8____CFString__16l;
      v14[4] = *(_QWORD *)(a1 + 40);
      v14[5] = v9;
      CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v14);
    }
  }
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_2(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  char *v4;
  CFUUIDBytes v5;

  *(_QWORD *)&v5.byte0 = 0;
  *(_QWORD *)&v5.byte8 = 0;
  v4 = utf8(a3);
  if (!uuid_parse(v4, &v5.byte0))
    ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), v5, *(CFUUIDBytes **)(a1 + 40));
}

uint64_t ___ZL25ktrace_address_space_dumpP15ktrace_uuid_mapP20ktrace_address_spaceP7__sFILE_block_invoke(uint64_t a1, uint64_t a2, optional_uint64 *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  char *v10;
  FILE *v11;
  const char *v12;
  FILE *v13;
  FILE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  optional_uint64 *v22;

  v6 = uuid_string(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)a3)
    v7 += optional_uint64::value(a3);
  if (*(_QWORD *)(a2 + 56))
    v8 = optional_uint64::value((optional_uint64 *)(a2 + 56)) + v7;
  else
    v8 = -1;
  v9 = *(const __CFString **)(a2 + 80);
  if (v9)
    v10 = utf8(v9);
  else
    v10 = "<unknown>";
  switch(*(_DWORD *)(a2 + 16))
  {
    case 1:
      v11 = *(FILE **)(a1 + 32);
      v18 = v8;
      v19 = (uint64_t)v10;
      v16 = v6;
      v17 = v7;
      v12 = "\t <%s> %16llx-%16llx %s\n";
      goto LABEL_16;
    case 2:
      v11 = *(FILE **)(a1 + 32);
      v19 = a2 + 24;
      v20 = v10;
      v17 = v7;
      v18 = v8;
      v16 = v6;
      v12 = "\t <%s> %16llx-%16llx %s %s\n";
      goto LABEL_16;
    case 3:
      v21 = 0;
      get_sc_and_slide(*(_QWORD *)(a1 + 40), a2, &v21, &v22);
      v13 = *(FILE **)(a1 + 32);
      if (v21)
      {
        v18 = v8;
        v19 = optional_uint64::value((optional_uint64 *)&v21);
        v16 = v6;
        v17 = v7;
        v12 = "\t <%s> %16llx-%16llx SHARED_CACHE slide=%llx\n";
      }
      else
      {
        v17 = v7;
        v18 = v8;
        v16 = v6;
        v12 = "\t <%s> %16llx-%16llx SHARED_CACHE slide=?\n";
      }
      v15 = v13;
      return fprintf(v15, v12, v16, v17, v18, v19, v20);
    case 4:
      return fprintf(*(FILE **)(a1 + 32), "\t <%s> %16llx-%16llx KERNEL_CACHE\n");
    case 5:
      v11 = *(FILE **)(a1 + 32);
      v18 = v8;
      v19 = (uint64_t)v10;
      v16 = v6;
      v17 = v7;
      v12 = "\t <%s> %16llx-%16llx __TEXT* %s\n";
LABEL_16:
      v15 = v11;
      return fprintf(v15, v12, v16, v17, v18, v19, v20);
    default:
      abort();
  }
}

BOOL dyldtp_complete(uint64_t a1)
{
  int v1;

  if ((*(_DWORD *)a1 - 520421376) <= 0x30)
  {
    if (((1 << *(_BYTE *)a1) & 0x10000100001) != 0)
    {
      v1 = 2;
      return *(_DWORD *)(a1 + 8) == v1;
    }
    if (((1 << *(_BYTE *)a1) & 0x1000010000100) != 0)
    {
      v1 = 3;
      return *(_DWORD *)(a1 + 8) == v1;
    }
  }
  if (*(_DWORD *)a1)
    abort();
  return 0;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x58uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AF37AA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SymbolOwner *,SymbolOwner *,SymbolOwner *,0>(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  const void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *(const void **)(a3 + 80);
      if (v6)
        CFRelease(v6);
      v7 = v4[1];
      *(_OWORD *)a3 = *v4;
      *(_OWORD *)(a3 + 16) = v7;
      v8 = v4[2];
      v9 = v4[3];
      v10 = v4[5];
      *(_OWORD *)(a3 + 64) = v4[4];
      *(_OWORD *)(a3 + 80) = v10;
      *(_OWORD *)(a3 + 32) = v8;
      *(_OWORD *)(a3 + 48) = v9;
      v4[2] = 0u;
      v4[3] = 0u;
      v4[4] = 0u;
      v4[5] = 0u;
      *v4 = 0u;
      v4[1] = 0u;
      v4 += 6;
      a3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t SymbolOwner::operator=(uint64_t a1, _OWORD *a2)
{
  const void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const void *v9;

  v4 = *(const void **)(a1 + 80);
  if (v4)
    CFRelease(v4);
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  *(_OWORD *)(a1 + 80) = a2[5];
  v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  v9 = *(const void **)(a1 + 80);
  if (v9)
    CFRetain(v9);
  return a1;
}

void ___ZL10visit_uuidP16operating_system11CFUUIDBytes_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  merge_info_while_locked(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

void merge_info_while_locked(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  NSObject *v8;
  CFStringRef v9;
  CFStringRef v10;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  CFMutableDictionaryRef Mutable;

  if (a4)
  {
    v8 = *(NSObject **)(a1 + 48);
    if (v8)
      dispatch_assert_queue_V2(v8);
    v9 = cfaasprintf("%llx", a2);
    v10 = cfaasprintf("%llx", a3);
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v9);
    if (Value)
    {
      v12 = Value;
      if (CFDictionaryContainsKey(Value, v10))
        return;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        ktrace_remotetime_update_params_cold_1();
      v12 = Mutable;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v9, Mutable);
      CFRelease(v12);
    }
    CFDictionarySetValue(v12, v10, a4);
  }
}

uint64_t ___ZL10visit_uuidP16operating_system11CFUUIDBytes_block_invoke_2(uint64_t a1, char *a2)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[5];
  stat v7;
  stat v8;

  if (a2)
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (*v2)
      ktrace_remotetime_update_params_cold_1();
    if (!stat(a2, &v8))
    {
      v4 = v2[6];
      v3 = v2[7];
      block[1] = 3221225472;
      v7 = v8;
      block[0] = MEMORY[0x1E0C809B0];
      block[2] = ___ZL10visit_pathP16operating_systemPKc_block_invoke;
      block[3] = &__block_descriptor_184_e5_v8__0l;
      block[4] = v2;
      if (v3 && v4)
        dispatch_group_async(v3, v4, block);
      else
        visit_inode_while_locked((uint64_t)v2, v7.st_dev, v7.st_ino);
    }
  }
  return 1;
}

void ___ZL10visit_pathP16operating_systemPKc_block_invoke(uint64_t a1)
{
  visit_inode_while_locked(*(_QWORD *)(a1 + 32), *(int *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void ___ZL24visit_inode_while_lockedP16operating_system4fsid8fsobj_id_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  merge_info_while_locked(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

uint64_t ___ZL22get_summary_from_machoPKc_block_invoke()
{
  const char *FamilyName;
  CFStringRef v1;

  CSSymbolicatorGetArchitecture();
  FamilyName = (const char *)CSArchitectureGetFamilyName();
  v1 = CFStringCreateWithCString(0, FamilyName, 0x8000100u);
  if (!v1)
    ktrace_remotetime_update_params_cold_1();
  CFAutorelease(v1);
  if (CSSymbolicatorGetSymbolOwnerCountAtTime() != 1)
    ktrace_remotetime_update_params_cold_1();
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void ___ZL22get_summary_from_machoPKc_block_invoke_2(uint64_t a1, uint64_t a2)
{
  const void *image_summary;

  image_summary = (const void *)make_image_summary(a2);
  if (image_summary)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(const void **)(a1 + 48), image_summary);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void ___ZL18make_image_summary10_CSTypeRefb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFStringRef v7;
  CFStringRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  uint64_t v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t valuePtr;
  char cStr[17];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  CSRegionGetSegmentName(a2, a3, cStr);
  if (*(_QWORD *)cStr != 0x455A454741505F5FLL || *(_QWORD *)&cStr[3] != 0x4F52455A454741)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      ktrace_remotetime_update_params_cold_1();
    v6 = Mutable;
    v7 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    if (!v7)
      ktrace_remotetime_update_params_cold_1();
    v8 = v7;
    CFAutorelease(v7);
    CFDictionarySetValue(v6, CFSTR("Name"), v8);
    valuePtr = CSRegionGetRange();
    v9 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v9)
      ktrace_remotetime_update_params_cold_1();
    v10 = v9;
    CFAutorelease(v9);
    CFDictionarySetValue(v6, CFSTR("Address"), v10);
    CSRegionGetRange();
    valuePtr = v11;
    v12 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v12)
      ktrace_remotetime_update_params_cold_1();
    v13 = v12;
    CFAutorelease(v12);
    CFDictionarySetValue(v6, CFSTR("Size"), v13);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v6);
    CFRelease(v6);
  }
}

void CSRegionGetSegmentName(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const char *Name;
  const char *v5;
  size_t v6;
  const char *Path;
  NSObject *v8;

  Name = (const char *)CSRegionGetName();
  if (Name)
  {
    v5 = Name;
    if (*Name)
    {
      v6 = strlen(Name) - 8;
      if (v6 <= 0x10 && !strcmp(" SEGMENT", &v5[v6]))
      {
        memcpy(a3, v5, v6);
        a3 += v6;
      }
      else
      {
        CSRegionGetSymbolOwner();
        if ((CSIsNull() & 1) != 0)
        {
          Path = 0;
        }
        else
        {
          Path = (const char *)CSSymbolOwnerGetPath();
          if (!Path)
            Path = (const char *)CSSymbolOwnerGetName();
        }
        v8 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
          CSRegionGetSegmentName(Path, (uint64_t)v5, v8);
      }
    }
  }
  *a3 = 0;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_copy__154(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__155(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZL13visit_processP16operating_systemj_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v3;
  CFMutableArrayRef v4;
  CFMutableArrayRef v5;
  uint64_t v6;
  CFNumberRef v7;
  CFNumberRef v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD v11[11];
  uint64_t valuePtr;

  CSSymbolicatorCreateWithPid();
  if ((CSIsNull() & 1) == 0)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      ktrace_remotetime_update_params_cold_1();
    v3 = Mutable;
    v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v4)
      ktrace_remotetime_update_params_cold_1();
    v5 = v4;
    v6 = MEMORY[0x1E0C809B0];
    v11[6] = MEMORY[0x1E0C809B0];
    v11[7] = 3221225472;
    v11[8] = ___ZL13visit_processP16operating_systemj_block_invoke_2;
    v11[9] = &__block_descriptor_40_e22_v24__0__CSTypeRef_QQ_8l;
    v11[10] = v4;
    CSSymbolicatorForeachSymbolOwnerAtTime();
    CFDictionarySetValue(v3, CFSTR("Binaries"), v5);
    valuePtr = *(unsigned int *)(a1 + 56);
    v7 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v7)
      ktrace_remotetime_update_params_cold_1();
    v8 = v7;
    CFAutorelease(v7);
    CFDictionarySetValue(v3, CFSTR("PID"), v8);
    CFRelease(v5);
    CSRelease();
    v9 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v10 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v11[0] = v6;
    v11[1] = 3221225472;
    v11[2] = ___ZL13visit_processP16operating_systemj_block_invoke_3;
    v11[3] = &unk_1E5F70948;
    v11[4] = *(_QWORD *)(a1 + 48);
    v11[5] = v3;
    dispatch_group_async(v9, v10, v11);
  }
}

void ___ZL13visit_processP16operating_systemj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  const void *image_summary;

  if ((CSSymbolOwnerIsDyldSharedCache() & 1) == 0)
  {
    image_summary = (const void *)make_image_summary(a2);
    if (image_summary)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), image_summary);
  }
}

void ___ZL13visit_processP16operating_systemj_block_invoke_3(uint64_t a1)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(const void **)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t _block_trampoline(void (**a1)(void))
{
  a1[2]();
  return 0;
}

void ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke(uint64_t a1, unint64_t *a2)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304);
  ktrace_collect_address(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)a2, a2[1]);
  ktrace_collect_address(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)a2, a2[2]);
  ktrace_collect_address(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)a2, a2[3]);
  ktrace_collect_address(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)a2, a2[4]);
}

void ktrace_collect_address(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _OWORD v8[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[5];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  ktrace_get_uuid_offset_for_thread_address(a2, *(_QWORD *)(a3 + 40), a4, &v15);
  v14[2] = v17;
  v14[3] = v18;
  v14[4] = v19;
  v14[0] = v15;
  v14[1] = v16;
  ktrace_collect_uuid_offset(a1, (uint64_t)v14);
  if (ktrace_plausible_kernel_address(a2, a4))
  {
    if (ktrace_get_pid_for_thread(a2, *(const void **)(a3 + 40)))
    {
      ktrace_get_uuid_offset_for_pid_address(a2, 0, a4, &v9);
      v18 = v12;
      v19 = v13;
      v16 = v10;
      v17 = v11;
      v15 = v9;
      v8[2] = v11;
      v8[3] = v12;
      v8[4] = v13;
      v8[0] = v9;
      v8[1] = v10;
      ktrace_collect_uuid_offset(a1, (uint64_t)v8);
    }
  }
}

intptr_t ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  FILE **v3;
  uint64_t v4;
  uint64_t SymbolOwner;
  const __CFData *v6;
  const __CFData *v7;
  const __CFSet *v8;
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFData *v15;
  const __CFData *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  __int128 v20;
  void (*v21)(uint64_t, CFStringRef, const __CFSet *);
  void *v22;
  uint64_t v23;
  const __CFData *v24;
  uint64_t v25;
  uint64_t context;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  const __CFData *v31;
  uint64_t v32;
  __int128 v33;
  void (*v34)(uint64_t, CFStringRef, const __CFSet *);
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *(FILE ***)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (CSIsNull())
  {
    *(_QWORD *)(v2 + 16) = CSAddressSetCreate();
    *(_QWORD *)(v2 + 24) = v4;
    if (CSIsNull())
      ktrace_remotetime_update_params_cold_1();
  }
  if (ktrace_make_symbolicator(v3, (UUIDContext *)v2))
  {
    SymbolOwner = CSSymbolicatorGetSymbolOwner();
    v7 = v6;
    if (CSIsNull())
      ktrace_remotetime_update_params_cold_1();
    v8 = *(const __CFSet **)(v2 + 32);
    if (v8)
    {
      context = MEMORY[0x1E0C809B0];
      v27 = 3221225472;
      v28 = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke;
      v29 = &__block_descriptor_56_e8_v16__0Q8l;
      v30 = SymbolOwner;
      v31 = v7;
      v32 = v2;
      CFSetApplyFunction(v8, (CFSetApplierFunction)CFSetApplierTrampoline, &context);
      CFRelease(*(CFTypeRef *)(v2 + 32));
      *(_QWORD *)(v2 + 32) = 0;
    }
    v9 = *(const __CFDictionary **)(v2 + 40);
    if (v9)
    {
      *(_QWORD *)&v20 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v20 + 1) = 3221225472;
      v21 = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_2;
      v22 = &__block_descriptor_56_e34_v24__0____CFString__8____CFSet__16l;
      v23 = SymbolOwner;
      v24 = v7;
      v25 = v2;
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &v20);
      CFRelease(*(CFTypeRef *)(v2 + 40));
      *(_QWORD *)(v2 + 40) = 0;
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (ktrace_make_symbolicator((FILE **)v11, (UUIDContext *)v10))
  {
    v12 = CSSymbolicatorGetSymbolOwner();
    v14 = v13;
    if (CSIsNull())
      ktrace_remotetime_update_params_cold_1();
    v15 = (const __CFData *)MEMORY[0x1AF45D11C](v12, v14, *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
    if (v15)
    {
      v16 = v15;
      v20 = 0uLL;
      LODWORD(v21) = 24;
      HIDWORD(v21) = CFDataGetLength(v15);
      uuid_copy((unsigned __int8 *)&v20, (const unsigned __int8 *)v10);
      v17 = HIDWORD(v21);
      if (CFDataGetLength(v16) != v17)
        ktrace_remotetime_update_params_cold_1();
      v19 = *(NSObject **)(v11 + 88);
      v18 = *(NSObject **)(v11 + 96);
      context = MEMORY[0x1E0C809B0];
      v27 = 3221225472;
      v28 = ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164;
      v29 = &__block_descriptor_80_e5_v8__0l;
      v33 = v20;
      v34 = v21;
      v30 = v11;
      v31 = v16;
      v32 = v10;
    }
    else
    {
      v19 = *(NSObject **)(v11 + 88);
      v18 = *(NSObject **)(v11 + 96);
      context = MEMORY[0x1E0C809B0];
      v27 = 3221225472;
      v28 = ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke;
      v29 = &__block_descriptor_48_e5_v8__0l;
      v30 = v11;
      v31 = (const __CFData *)v10;
    }
    dispatch_group_async(v18, v19, &context);
  }
}

void ktrace_collect_uuid_offset(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  _QWORD *uuid;
  int v9;
  void *Value;
  CFStringRef v11;
  const __CFDictionary *Mutable;
  _OWORD v13[5];
  __int128 v14[10];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a2 + 48);
  if (v2 > 5)
    ktrace_collect_uuid_offset();
  if (((1 << v2) & 0x19) != 0)
    return;
  v5 = *(_QWORD **)(a1 + 16);
  v14[0] = *(_OWORD *)a2;
  if (std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>(v5, v14)|| !uuid_is_null((const unsigned __int8 *)(a1 + 57))&& uuid_compare((const unsigned __int8 *)a2, (const unsigned __int8 *)(a1 + 57)))
  {
    return;
  }
  v6 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v6;
  v13[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  UUIDContext::UUIDContext((uint64_t)v14, (uint64_t)v13);
  uuid = find_or_create_uuid(a1, v14);
  UUIDContext::~UUIDContext((UUIDContext *)v14);
  if (!uuid || (uuid[20] & 1) != 0)
    return;
  v9 = *(_DWORD *)(a2 + 48);
  switch(v9)
  {
    case 5:
      v11 = CFSTR("__TEXT*");
      goto LABEL_17;
    case 2:
      v11 = cfstring((const char *)(a2 + 16));
LABEL_17:
      Mutable = (const __CFDictionary *)uuid[5];
      if (!Mutable)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        uuid[5] = Mutable;
      }
      Value = (void *)CFDictionaryGetValue(Mutable, v11);
      if (!Value)
      {
        Value = CFSetCreateMutable(0, 0, &long_set_callbacks);
        CFDictionarySetValue((CFMutableDictionaryRef)uuid[5], v11, Value);
        CFRelease(Value);
      }
      goto LABEL_21;
    case 1:
      Value = (void *)uuid[4];
      if (!Value)
      {
        Value = CFSetCreateMutable(0, 0, &long_set_callbacks);
        uuid[4] = Value;
      }
LABEL_21:
      CFSetAddValue((CFMutableSetRef)Value, *(const void **)(a2 + 40));
      break;
  }
}

void sub_1AF37BB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  UUIDContext::~UUIDContext((UUIDContext *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1] ^ *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2[1] ^ *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v9 = a2;
  v10 = 1;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  v14 = 0;
  result = translate_offset(v3, v4, v7, &v6, 0);
  if ((_DWORD)result)
    return CSAddressSetAdd();
  return result;
}

void ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_2(uint64_t a1, CFStringRef theString1, const __CFSet *a3)
{
  uint64_t v6;
  int v7;
  _QWORD context[5];
  __int128 v9;
  uint64_t v10;
  int v11;

  v6 = CFStringCompare(theString1, CFSTR("__TEXT*"), 0);
  if (v6)
  {
    v6 = (uint64_t)utf8(theString1);
    v7 = 2;
  }
  else
  {
    v7 = 5;
  }
  context[0] = MEMORY[0x1E0C809B0];
  context[1] = 3221225472;
  context[2] = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_3;
  context[3] = &__block_descriptor_68_e8_v16__0Q8l;
  v11 = v7;
  context[4] = v6;
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  CFSetApplyFunction(a3, (CFSetApplierFunction)CFSetApplierTrampoline, context);
}

uint64_t ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_3(uint64_t a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  *(_QWORD *)&v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v9 = 0u;
  *((_QWORD *)&v11 + 1) = a2;
  LODWORD(v12) = *(_DWORD *)(a1 + 64);
  v3 = *(const char **)(a1 + 32);
  if (v3)
    strlcpy((char *)&v10, v3, 0x11uLL);
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8[2] = v11;
  v8[3] = v12;
  v8[4] = v13;
  v8[0] = v9;
  v8[1] = v10;
  result = translate_offset(v4, v5, v8, &v7, 0);
  if ((_DWORD)result)
    return CSAddressSetAdd();
  return result;
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1)
{
  FILE **v2;
  uint64_t *v3;
  FILE *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  UInt8 *v7;

  v3 = (uint64_t *)(a1 + 32);
  v2 = *(FILE ***)(a1 + 32);
  v4 = *v2;
  if (*v2)
  {
    v6 = *(unsigned __int8 **)(a1 + 40);
    v5 = (unsigned __int8 **)(a1 + 40);
    v7 = describe2((uint64_t)v2, v6);
    fprintf(v4, "failed to create signature for %s\n", (const char *)v7);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_cold_1(v3, v5);
  }
}

UInt8 *describe2(uint64_t a1, unsigned __int8 *uu)
{
  const __CFString *v4;
  char *v5;
  char *v7;
  CFMutableStringRef Mutable;
  uint64_t v9;
  uint64_t v11;
  void (*v12[6])(_QWORD, _QWORD);
  _QWORD v13[3];
  char v14;
  char out[40];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  v4 = (const __CFString *)*((_QWORD *)uu + 17);
  if (!v4)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      Mutable = CFStringCreateMutable(0, 0);
      CFStringAppendCString(Mutable, out, 0x8000100u);
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x2020000000;
      v14 = 1;
      v9 = *(_QWORD *)(a1 + 80);
      v12[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v12[1] = (void (*)(_QWORD, _QWORD))3221225472;
      v12[2] = (void (*)(_QWORD, _QWORD))___ZL9describe2P21symbolication_contextP11UUIDContext_block_invoke;
      v12[3] = (void (*)(_QWORD, _QWORD))&unk_1E5F70F38;
      v12[4] = (void (*)(_QWORD, _QWORD))v13;
      v12[5] = (void (*)(_QWORD, _QWORD))Mutable;
      ktrace_uuid_map_iterate_associated_paths(v9, (__int128 *)uu, v12);
      CFAutorelease(Mutable);
      v7 = utf8(Mutable);
      _Block_object_dispose(v13, 8);
      return (UInt8 *)v7;
    }
    if (*((_QWORD *)uu + 18))
    {
      v11 = *((_QWORD *)uu + 19);
      if (v11)
        return aasprintf("%s /.vol/%lld/%lld", out, *((_QWORD *)uu + 18), v11);
    }
    else if (*((_DWORD *)uu + 38))
    {
      return aasprintf("%s /.vol/?/%lld", out, *((_QWORD *)uu + 19));
    }
    return aasprintf("%s", out);
  }
  v5 = utf8(v4);
  return aasprintf("%s %s", out, v5);
}

void sub_1AF37C0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *appended;
  uint64_t v4;
  uint64_t v5;
  UInt8 *BytePtr;
  CFIndex Length;
  FILE *v8;
  const void *v9;
  FILE *v10;
  UInt8 *v11;

  v2 = (uint64_t *)(a1 + 32);
  appended = ktrace_file_append_start(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 32771, 0, 0);
  if (!appended
    || (v4 = (uint64_t)appended,
        ktrace_file_append_data(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), (uint64_t)appended, (UInt8 *)(a1 + 56), 24))|| (v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40)), Length = CFDataGetLength(*(CFDataRef *)(a1 + 40)), ktrace_file_append_data(v5, v4, BytePtr, Length)))
  {
    v8 = *(FILE **)*v2;
    if (v8)
    {
      fwrite("failed to write symbols chunk\n", 0x1EuLL, 1uLL, v8);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164_cold_1();
    }
  }
  else
  {
    ktrace_file_append_finish(*(_QWORD *)(*v2 + 48), v4);
    v10 = *(FILE **)*v2;
    if (v10)
    {
      v11 = describe2(*v2, *(unsigned __int8 **)(a1 + 48));
      fprintf(v10, "added symbols for %s\n", (const char *)v11);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164_cold_2(v2, (unsigned __int8 **)(a1 + 48));
    }
  }
  v9 = *(const void **)(a1 + 40);
  if (v9)
    CFRelease(v9);
}

void ___ZL9describe2P21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const char *v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v4 + 24))
  {
    *(_BYTE *)(v4 + 24) = 0;
    v5 = " ";
  }
  else
  {
    v5 = ", ";
  }
  CFStringAppendCString(*(CFMutableStringRef *)(a1 + 40), v5, 0x8000100u);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 40), a2);
}

_QWORD *std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2[1] ^ *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2[1] ^ *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *i = *v20;
LABEL_42:
    *v20 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AF37C4A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      UUIDContext::~UUIDContext((UUIDContext *)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void KtraceSymbolicator::~KtraceSymbolicator(KtraceSymbolicator *this)
{
  symbolication_context *v2;

  v2 = *(symbolication_context **)this;
  if (v2)
  {
    symbolication_context::~symbolication_context(v2);
    MEMORY[0x1AF45D4D0]();
  }
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      CS::TypeRef::~TypeRef((CS::TypeRef *)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1] ^ *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2[1] ^ *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,UUIDContext>(uint64_t a1, _QWORD *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v35[2];
  char v36;

  v8 = a2[1] ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0xC8uLL);
  v17 = a4[8];
  v18 = a4[9];
  v19 = a4[6];
  v16[9] = a4[7];
  v16[10] = v17;
  v16[11] = v18;
  v20 = a4[4];
  v21 = a4[5];
  v22 = a4[2];
  v16[5] = a4[3];
  v16[6] = v20;
  v23 = *a3;
  v16[7] = v21;
  v16[8] = v19;
  v24 = *a4;
  v25 = a4[1];
  v16[1] = v23;
  v16[2] = v24;
  v35[0] = (uint64_t)v16;
  v35[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  *((_QWORD *)v16 + 24) = *((_QWORD *)a4 + 20);
  v16[3] = v25;
  v16[4] = v22;
  *((_QWORD *)a4 + 20) = 0;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  v36 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v9 || (float)(v27 * (float)v9) < v26)
  {
    v28 = 1;
    if (v9 >= 3)
      v28 = (v9 & (v9 - 1)) != 0;
    v29 = v28 | (2 * v9);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v31);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v32)
  {
    *(_QWORD *)v35[0] = *v32;
    *v32 = v35[0];
  }
  else
  {
    *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v35[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v35[0])
    {
      v33 = *(_QWORD *)(*(_QWORD *)v35[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v33 >= v9)
          v33 %= v9;
      }
      else
      {
        v33 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v35[0];
    }
  }
  v12 = (_QWORD *)v35[0];
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100](v35, 0);
  return v12;
}

void sub_1AF37C968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      UUIDContext::~UUIDContext((UUIDContext *)(v2 + 32));
    operator delete((void *)v2);
  }
}

uint64_t UUIDContext::UUIDContext(uint64_t a1, uint64_t a2)
{
  const void *v4;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  v4 = *(const void **)(a2 + 72);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 64);
  if (v4)
    CFRetain(v4);
  return a1;
}

void UUIDContext::~UUIDContext(UUIDContext *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);
  if ((CSIsNull() & 1) == 0)
    CSRelease();
  if ((CSIsNull() & 1) == 0)
    CSRelease();
  v4 = (const void *)*((_QWORD *)this + 14);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 13);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 17);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 16);
  if (v7)
    CFRelease(v7);
}

BOOL ktrace_find_executable(symbolication_context *a1, UUIDContext *uu)
{
  _QWORD *v3;
  const __CFString *v5;
  uint64_t v6;
  const __CFArray *v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  FILE *v14;
  int *v15;
  char *v16;
  char ***v17;
  int v18;
  FILE *v19;
  char *v20;
  char v21;
  FILE *v22;
  __CFData *v23;
  const __CFDictionary *v24;
  _BOOL8 result;
  FILE *v26;
  UInt8 *v27;
  FILE *v28;
  CFMutableDataRef Mutable;
  size_t v30;
  size_t v31;
  pid_t v32;
  FILE *v33;
  int v34;
  char *v35;
  NSObject *v36;
  FILE *v37;
  int *v38;
  char *v39;
  NSObject *v40;
  const __CFDictionary *v41;
  CFStringRef v42;
  const __CFDictionary *dictionary;
  const __CFString *string;
  const __CFString *v45;
  FILE *v46;
  char *v47;
  NSObject *v48;
  _BOOL4 v49;
  const __CFString *filePath;
  void (*v51[6])(_QWORD, _QWORD);
  _QWORD v52[6];
  int v53;
  pid_t v54;
  posix_spawn_file_actions_t v55;
  UInt8 __ptr[512];
  char *__argv[4];
  char out[48];
  int v59[2];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)uu + 80) & 2) != 0)
    return 1;
  if ((*((_WORD *)uu + 80) & 0x400) != 0)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (!v3)
    return 0;
  if (*v3)
  {
    v52[0] = MEMORY[0x1E0C809B0];
    v52[1] = 3221225472;
    v52[2] = ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke;
    v52[3] = &__block_descriptor_48_e21_v16__0____CFString__8l;
    v52[4] = v3;
    v52[5] = uu;
    v5 = (const __CFString *)*((_QWORD *)uu + 17);
    if (v5)
    {
      ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke((CFIndex)v52, v5);
    }
    else
    {
      v6 = *((_QWORD *)a1 + 10);
      if (v6)
      {
        v51[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
        v51[1] = (void (*)(_QWORD, _QWORD))3221225472;
        v51[2] = (void (*)(_QWORD, _QWORD))___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_4;
        v51[3] = (void (*)(_QWORD, _QWORD))&unk_1E5F71230;
        v51[4] = (void (*)(_QWORD, _QWORD))v52;
        v51[5] = (void (*)(_QWORD, _QWORD))uu;
        ktrace_uuid_map_iterate_associated_paths(v6, (__int128 *)uu, v51);
      }
    }
    if ((*((_WORD *)uu + 80) & 2) != 0)
      return 1;
  }
  v7 = (const __CFArray *)v3[1];
  if (v7 && CFArrayGetCount(v7))
  {
    v8 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (!v8)
    {
      pthread_mutex_lock(&ktrace_find_executable(symbolication_context *,UUIDContext *)::lock);
      if (!*((_QWORD *)a1 + 4))
        *((_QWORD *)a1 + 4) = calculateRecursiveSearchCache((uint64_t)v3);
      pthread_mutex_unlock(&ktrace_find_executable(symbolication_context *,UUIDContext *)::lock);
      v8 = (_QWORD *)*((_QWORD *)a1 + 4);
    }
    *(_OWORD *)__ptr = *(_OWORD *)uu;
    v9 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(v8, __ptr);
    if (v9)
    {
      v10 = (const void *)v9[4];
      *((_QWORD *)uu + 13) = v10;
      CFRetain(v10);
      *((_WORD *)uu + 80) |= 2u;
      return 1;
    }
  }
  if (v3[2])
  {
    v11 = *((_QWORD *)a1 + 1);
    if (v11)
    {
      *(_QWORD *)v59 = -1;
      v55 = 0;
      posix_spawn_file_actions_init(&v55);
      memset(out, 0, 37);
      uuid_unparse_upper((const unsigned __int8 *)uu, out);
      v12 = utf8(*(const __CFString **)(v11 + 16));
      v13 = (char *)aasprintf("%s %s", v12, out);
      v53 = 0;
      v54 = -1;
      v53 = pipe(v59);
      if (v53)
      {
        v14 = *(FILE **)a1;
        if (*(_QWORD *)a1)
        {
          v15 = __error();
          v16 = strerror(*v15);
          fprintf(v14, "pipe failed: %s\n", v16);
        }
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_find_executable();
      }
      else
      {
        __argv[0] = "sh";
        __argv[1] = "-c";
        __argv[2] = v13;
        __argv[3] = 0;
        posix_spawn_file_actions_addclose(&v55, 1);
        posix_spawn_file_actions_addclose(&v55, v59[0]);
        posix_spawn_file_actions_adddup2(&v55, v59[1], 1);
        v17 = _NSGetEnviron();
        v18 = posix_spawn(&v54, "/bin/sh", &v55, 0, __argv, *v17);
        v53 = v18;
        if (v18)
        {
          v19 = *(FILE **)a1;
          if (*(_QWORD *)a1)
          {
            v20 = strerror(v18);
            fprintf(v19, "posix_spawn failed: %s\n", v20);
          }
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_find_executable(&v53);
        }
        else
        {
          close(v59[1]);
          v59[1] = -1;
          v28 = fdopen(v59[0], "r");
          if (v28)
          {
            v22 = v28;
            Mutable = CFDataCreateMutable(0, 0);
            if (!Mutable)
              ktrace_remotetime_update_params_cold_1();
            v23 = Mutable;
            v30 = fread(__ptr, 1uLL, 0x200uLL, v22);
            if (v30)
            {
              v31 = v30;
              do
              {
                CFDataAppendBytes(v23, __ptr, v31);
                v31 = fread(__ptr, 1uLL, 0x200uLL, v22);
              }
              while (v31);
            }
            if (feof(v22))
            {
              v32 = waitpid(v54, &v53, 0);
              if (v32 == v54)
              {
                if (v53)
                {
                  if (*(_QWORD *)a1)
                    fprintf(*(FILE **)a1, "command failed: %s (exit status %d)\n", v13, v53);
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                    ktrace_find_executable();
                }
                else
                {
                  v41 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v23, 0, 0, 0);
                  if (v41)
                  {
                    v24 = v41;
                    v42 = cfstring(out);
                    dictionary = (const __CFDictionary *)cfdict_get_dictionary(v24, v42);
                    if (dictionary
                      && (string = (const __CFString *)cfdict_get_string(dictionary, CFSTR("DBGSymbolRichExecutable"))) != 0)
                    {
                      v45 = string;
                      v46 = *(FILE **)a1;
                      if (*(_QWORD *)a1)
                      {
                        filePath = string;
                        v47 = utf8(string);
                        fprintf(v46, "found executable: %s\n\tusing command: %s\n", v47, v13);
                        ktrace_log_init();
                        v48 = ktrace_log;
                        v49 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
                        v45 = filePath;
                        if (v49)
                        {
                          ktrace_find_executable(filePath, (uint64_t)v13, v48);
                          v45 = filePath;
                        }
                      }
                      *((_QWORD *)uu + 13) = CFURLCreateWithFileSystemPath(0, v45, kCFURLPOSIXPathStyle, 0);
                      *((_WORD *)uu + 80) |= 2u;
                      v21 = 1;
                    }
                    else
                    {
                      v21 = 0;
                    }
LABEL_32:
                    posix_spawn_file_actions_destroy(&v55);
                    if (v59[0] != -1)
                      close(v59[0]);
                    if (v59[1] != -1)
                      close(v59[1]);
                    if (v22)
                      fclose(v22);
                    if (v23)
                      CFRelease(v23);
                    if (v24)
                      CFRelease(v24);
                    if ((v21 & 1) != 0)
                      return 1;
                    goto LABEL_44;
                  }
                  if (*(_QWORD *)a1)
                    fprintf(*(FILE **)a1, "failed to parse output from command: %s\n", v13);
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                    ktrace_find_executable();
                }
              }
              else
              {
                v37 = *(FILE **)a1;
                if (*(_QWORD *)a1)
                {
                  v38 = __error();
                  v39 = strerror(*v38);
                  fprintf(v37, "waitpid failed! %s\n", v39);
                }
                v40 = ktrace_log;
                if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
                  ktrace_find_executable(v40);
              }
            }
            else
            {
              v33 = *(FILE **)a1;
              if (*(_QWORD *)a1)
              {
                v34 = ferror(v22);
                v35 = strerror(v34);
                fprintf(v33, "error reading from pipe! %s\n", v35);
              }
              v36 = ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
                ktrace_find_executable(v22, v36);
            }
            v21 = 0;
LABEL_31:
            v24 = 0;
            goto LABEL_32;
          }
          if (*(_QWORD *)a1)
            fwrite("fdopen failed!\n", 0xFuLL, 1uLL, *(FILE **)a1);
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
            ktrace_find_executable();
        }
      }
      v21 = 0;
      v22 = 0;
      v23 = 0;
      goto LABEL_31;
    }
  }
LABEL_44:
  *((_WORD *)uu + 80) |= 0x400u;
  v26 = *(FILE **)a1;
  if (*(_QWORD *)a1)
  {
    v27 = describe2((uint64_t)a1, (unsigned __int8 *)uu);
    fprintf(v26, "could not find executable for %s\n", (const char *)v27);
    ktrace_log_init();
    result = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    ktrace_find_executable((uint64_t)a1, (unsigned __int8 *)uu);
  }
  return 0;
}

CFIndex ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke(CFIndex result, CFStringRef theString)
{
  uint64_t v3;
  CFIndex i;
  void *ValueAtIndex;
  void *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFURL *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[15];

  if (theString)
  {
    v3 = result;
    result = CFStringGetLength(theString);
    if (result)
    {
      result = CFArrayGetCount(**(CFArrayRef **)(v3 + 32));
      if (result >= 1)
      {
        for (i = 0; i < result; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(**(CFArrayRef **)(v3 + 32), i);
          if (ValueAtIndex)
          {
            v6 = ValueAtIndex;
            v7 = CFGetTypeID(ValueAtIndex);
            if (v7 != CFStringGetTypeID())
            {
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v12, v13);
            }
            if (objc_msgSend(v6, "length"))
            {
              if (objc_msgSend(v6, "characterAtIndex:", 0) == 47)
              {
                v8 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v6, theString, v11);
              }
              else
              {
                v10 = objc_msgSend(objc_alloc_init(MEMORY[0x1E0CB3620]), "currentDirectoryPath");
                v8 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@/%@"), v10, v6, theString);
              }
              v9 = CFURLCreateWithFileSystemPath(0, v8, kCFURLPOSIXPathStyle, 0);
              if (CFURLResourceIsReachable(v9, 0))
                CSSymbolicatorForeachSymbolicatorWithURL();
              CFRelease(v9);
            }
          }
          result = CFArrayGetCount(**(CFArrayRef **)(v3 + 32));
        }
      }
    }
  }
  return result;
}

uint64_t ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_2()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

const unsigned __int8 *owner_matches_uuid(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  const unsigned __int8 *result;

  result = (const unsigned __int8 *)CSSymbolOwnerGetCFUUIDBytes();
  if (result)
    return (const unsigned __int8 *)(uuid_compare(result, a3) == 0);
  return result;
}

uint64_t ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_4(uint64_t result)
{
  if ((*(_WORD *)(*(_QWORD *)(result + 40) + 160) & 2) == 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

uint64_t calculateRecursiveSearchCache(uint64_t a1)
{
  uint64_t v2;
  CFIndex v3;
  uint64_t v4;
  const void *ValueAtIndex;
  const void *v6;
  CFTypeID v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v13;
  const __CFURL *v14;
  char v15;
  _BYTE v16[15];

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  v13 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 8)) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = a1;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v3);
      v6 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v7 = CFGetTypeID(ValueAtIndex);
        if (v7 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v15, v16);
        }
      }
      v8 = (void *)objc_msgSend(v13, "enumeratorAtPath:", v6);
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "nextObject");
        if (v10)
        {
          v11 = (void *)v10;
          do
          {
            if (objc_msgSend(v11, "hasSuffix:", CFSTR(".dSYM")))
            {
              objc_msgSend(v9, "skipDescendants");
            }
            else
            {
              v14 = CFURLCreateWithFileSystemPath(0, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v6, v11), kCFURLPOSIXPathStyle, 0);
              if (CFURLResourceIsReachable(v14, 0))
                CSSymbolicatorForeachSymbolicatorWithURL();
              CF::TypeRef::~TypeRef((const void **)&v14);
            }
            v11 = (void *)objc_msgSend(v9, "nextObject");
          }
          while (v11);
        }
      }
      ++v3;
      a1 = v4;
    }
    while (v3 < CFArrayGetCount(*(CFArrayRef *)(v4 + 8)));
  }
  return v2;
}

void sub_1AF37D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZL29calculateRecursiveSearchCacheP32ktrace_dsym_search_configuration_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void ___ZL29calculateRecursiveSearchCacheP32ktrace_dsym_search_configuration_block_invoke_2(uint64_t a1)
{
  uint64_t CFUUIDBytes;
  _OWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  _OWORD *v8;

  CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes();
  if (CFUUIDBytes)
  {
    v3 = (_OWORD *)CFUUIDBytes;
    v7 = *(const void **)(a1 + 40);
    CFRetain(v7);
    v4 = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v4, v3, (uint64_t)&std::piecewise_construct, &v8);
    v6 = (const void *)v5[4];
    if (v6)
      CFRelease(v6);
    v5[4] = v7;
    v7 = 0;
    CF::TypeRef::~TypeRef(&v7);
  }
}

void sub_1AF37D788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CF::TypeRef::~TypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ktrace_find_arch_with_default(symbolication_context *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  FILE *v11;
  UInt8 *v12;
  uint64_t v13;
  int v14;

  if ((*(_WORD *)(a2 + 160) & 4) != 0)
    return 1;
  ktrace_find_summary(a1, (UUIDContext *)a2);
  LOWORD(v6) = *(_WORD *)(a2 + 160);
  if ((v6 & 4) != 0)
    return 1;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 25))
    {
      v8 = *((_QWORD *)a1 + 10);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 272);
        if (v9)
        {
          *(_QWORD *)(a2 + 120) = v9;
LABEL_10:
          *(_WORD *)(a2 + 160) = v6 | 4;
          return 1;
        }
      }
    }
  }
  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if (a3)
  {
    *(_QWORD *)(a2 + 120) = a3;
    LOWORD(v6) = *(_WORD *)(a2 + 160);
    goto LABEL_10;
  }
  if ((*(_WORD *)(a2 + 160) & 4) == 0)
  {
    v11 = *(FILE **)a1;
    if (*(_QWORD *)a1)
    {
      v12 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v11, "could not figure out arch for %s\n", (const char *)v12);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ktrace_find_arch_with_default((uint64_t)a1, (unsigned __int8 *)a2);
    }
  }
  v13 = *((_QWORD *)a1 + 1);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 26);
    v6 = *(unsigned __int16 *)(a2 + 160);
    if (v14)
    {
      *(_QWORD *)(a2 + 120) = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 160);
  }
  return (v6 >> 2) & 1;
}

void ktrace_find_summary(symbolication_context *a1, UUIDContext *a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  fsid v8;
  fsobj_id v9;
  const __CFDictionary *v10;
  const void *v11;
  uint64_t v12;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  CFTypeID v15;
  void (*v16[6])(_QWORD, _QWORD);
  __int128 v17;

  v2 = *((_QWORD *)a1 + 10);
  if (v2 && !*((_QWORD *)a2 + 16))
  {
    v5 = *(_QWORD **)(v2 + 240);
    if (v5)
    {
      v17 = *(_OWORD *)a2;
      v6 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>(v5, &v17);
      if (v6)
      {
        v7 = (const void *)v6[4];
        *((_QWORD *)a2 + 16) = v7;
        if (v7)
        {
          CFRetain(v7);
          return;
        }
      }
    }
    v8 = (fsid)*((_QWORD *)a2 + 18);
    v9 = (fsobj_id)*((_QWORD *)a2 + 19);
    v10 = (const __CFDictionary *)lookup_inode(*(const __CFDictionary **)(*((_QWORD *)a1 + 10) + 224), v8, v9);
    ktrace_find_summary_in_fat_summary(a2, v10);
    if (!*((_QWORD *)a2 + 16))
    {
      v11 = (const void *)*((_QWORD *)a2 + 17);
      v12 = *((_QWORD *)a1 + 10);
      if (!v11 || !*(_QWORD *)(v12 + 232))
        goto LABEL_17;
      Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 232), v11);
      v14 = Value;
      if (Value)
      {
        v15 = CFGetTypeID(Value);
        if (v15 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          v14 = 0;
        }
      }
      ktrace_find_summary_in_fat_summary(a2, v14);
      if (!*((_QWORD *)a2 + 16))
      {
        v12 = *((_QWORD *)a1 + 10);
LABEL_17:
        if (*(_QWORD *)(v12 + 232))
        {
          v16[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
          v16[1] = (void (*)(_QWORD, _QWORD))3221225472;
          v16[2] = (void (*)(_QWORD, _QWORD))___ZL19ktrace_find_summaryP21symbolication_contextP11UUIDContext_block_invoke;
          v16[3] = (void (*)(_QWORD, _QWORD))&__block_descriptor_48_e21_v16__0____CFString__8l;
          v16[4] = (void (*)(_QWORD, _QWORD))a2;
          v16[5] = (void (*)(_QWORD, _QWORD))a1;
          ktrace_uuid_map_iterate_associated_paths(v12, (__int128 *)a2, v16);
        }
      }
    }
  }
}

void ktrace_analyze_executable(FILE **a1, CFURLRef *a2)
{
  FILE *v4;
  const __CFString *v5;
  char *v6;
  UInt8 *v7;
  NSObject *v8;
  const __CFString *v9;
  uint8_t buf[4];
  char *v11;
  __int16 v12;
  UInt8 *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (ktrace_find_executable((symbolication_context *)a1, (UUIDContext *)a2))
  {
    CSSymbolicatorForeachSymbolicatorWithURL();
    if (((_WORD)a2[20] & 4) == 0)
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = CFURLGetString(a2[13]);
        v6 = utf8(v5);
        v7 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v4, "failed to analyze executable at %s for %s\n", v6, (const char *)v7);
        ktrace_log_init();
        v8 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        {
          v9 = CFURLGetString(a2[13]);
          *(_DWORD *)buf = 136315394;
          v11 = utf8(v9);
          v12 = 2080;
          v13 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
          _os_log_debug_impl(&dword_1AF33A000, v8, OS_LOG_TYPE_DEBUG, "failed to analyze executable at %s for %s\n", buf, 0x16u);
        }
      }
    }
  }
}

const void *lookup_inode(const __CFDictionary *a1, fsid a2, fsobj_id a3)
{
  CFStringRef v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  CFTypeID v8;
  CFStringRef v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;

  if (!a1)
    return 0;
  v5 = cfaasprintf("%llx", a2);
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, v5);
  if (!Value)
    return 0;
  v7 = Value;
  v8 = CFGetTypeID(Value);
  if (v8 != CFDictionaryGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
LABEL_9:
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
    return 0;
  }
  v9 = cfaasprintf("%llx", a3);
  v10 = CFDictionaryGetValue(v7, v9);
  v11 = v10;
  if (v10)
  {
    v12 = CFGetTypeID(v10);
    if (v12 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        goto LABEL_9;
      return 0;
    }
  }
  return v11;
}

void ktrace_find_summary_in_fat_summary(UUIDContext *a1, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  CFTypeID v5;
  _QWORD context[5];

  if (theDict)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("Images"));
    if (Value)
    {
      v4 = Value;
      v5 = CFGetTypeID(Value);
      if (v5 == CFDictionaryGetTypeID())
      {
        context[0] = MEMORY[0x1E0C809B0];
        context[1] = 3221225472;
        context[2] = ___ZL34ktrace_find_summary_in_fat_summaryP11UUIDContextPK14__CFDictionary_block_invoke;
        context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
        context[4] = a1;
        CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
      }
      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      }
    }
  }
}

void ___ZL19ktrace_find_summaryP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const void *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  CFTypeID v5;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 232), a2);
    v4 = Value;
    if (Value)
    {
      v5 = CFGetTypeID(Value);
      if (v5 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        v4 = 0;
      }
    }
    ktrace_find_summary_in_fat_summary(*(UUIDContext **)(a1 + 32), v4);
  }
}

uint64_t ___ZL34ktrace_find_summary_in_fat_summaryP11UUIDContextPK14__CFDictionary_block_invoke(uint64_t result, const __CFString *a2, CFDictionaryRef theDict)
{
  uint64_t v5;
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;
  char *v9;
  uuid_t uu;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(result + 32) + 128))
  {
    v5 = result;
    memset(uu, 0, sizeof(uu));
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("UUID_String"));
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        v7 = 0;
      }
    }
    v9 = utf8(v7);
    uuid_parse(v9, uu);
    result = uuid_compare(uu, *(const unsigned __int8 **)(v5 + 32));
    if (!(_DWORD)result)
    {
      if ((*(_WORD *)(*(_QWORD *)(v5 + 32) + 160) & 4) == 0)
      {
        utf8(a2);
        *(_QWORD *)(*(_QWORD *)(v5 + 32) + 120) = CSArchitectureGetArchitectureForName();
        *(_WORD *)(*(_QWORD *)(v5 + 32) + 160) = *(_WORD *)(*(_QWORD *)(v5 + 32) + 160) & 0xFFFB | (4 * (*(_QWORD *)(*(_QWORD *)(v5 + 32) + 120) != 0));
      }
      result = (uint64_t)CFRetain(theDict);
      *(_QWORD *)(*(_QWORD *)(v5 + 32) + 128) = theDict;
    }
  }
  return result;
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t BaseAddress;
  uint64_t v6;
  __int16 v7;
  __int16 v8;

  result = (uint64_t)owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 32));
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = CSSymbolOwnerGetArchitecture();
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) |= 4u;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80) = 0;
    CSSymbolOwnerForeachSegment();
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) |= 0x20u;
    BaseAddress = CSSymbolOwnerGetBaseAddress();
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v6 + 48) = BaseAddress;
    *(_WORD *)(v6 + 160) = *(_WORD *)(v6 + 160) & 0xFFBF | ((BaseAddress != -1) << 6);
    if (CSSymbolOwnerIsAOut())
      v7 = 256;
    else
      v7 = 0;
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) = *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) & 0xFEFF | v7;
    result = CSSymbolOwnerIsDyld();
    if ((_DWORD)result)
      v8 = 512;
    else
      v8 = 0;
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) = *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) & 0xFDFF | v8;
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) |= 0x80u;
  }
  return result;
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke_3(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 80);
  result = CSRegionGetName();
  if (result)
  {
    result = strcmp("__TEXT SEGMENT", (const char *)result);
    if (!(_DWORD)result)
    {
      *(_WORD *)(*(_QWORD *)(a1 + 32) + 160) |= 8u;
      result = CSRegionGetRange();
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = v3;
    }
  }
  return result;
}

void CS::TypeRef::~TypeRef(CS::TypeRef *this)
{
  if ((CSIsNull() & 1) == 0)
    CSRelease();
}

uint64_t ___ZL16translate_offset10_CSTypeRef18ktrace_uuid_offsetPyPb_block_invoke(uint64_t a1)
{
  const char *Name;
  size_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;

  Name = (const char *)CSRegionGetName();
  v3 = (int)strnlen((const char *)(a1 + 64), 0x10uLL);
  result = strncmp(Name, (const char *)(a1 + 64), v3);
  if (!(_DWORD)result)
  {
    result = (uint64_t)&Name[v3];
    if (Name[v3] == 32)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_BYTE *)(v5 + 24))
        ktrace_remotetime_update_params_cold_1();
      if (strcmp((const char *)result, " SEGMENT"))
        ktrace_remotetime_update_params_cold_1();
      *(_BYTE *)(v5 + 24) = 1;
      v6 = *(_QWORD *)(a1 + 88);
      result = CSRegionGetRange();
      if (v6 >= v7)
      {
        v8 = *(_BYTE **)(a1 + 136);
        if (v8)
        {
          if (*(_BYTE *)(a1 + 100))
            *v8 = 1;
        }
      }
      else
      {
        result = CSRegionGetRange();
        **(_QWORD **)(a1 + 128) = result + *(_QWORD *)(a1 + 88);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

void ___ZL18owner_is_text_exec10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  CSRegionGetSegmentName(a2, a3, &v5);
  if (v5 == 0x455F545845545F5FLL && v6 == 4408664)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__201(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

_QWORD *find_or_create_uuid(symbolication_context *a1, SymbolOwner *a2)
{
  _QWORD *uuid;
  __int128 v5[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  UUIDContext::UUIDContext((UUIDContext *)v5, a2);
  uuid = find_or_create_uuid((uint64_t)a1, v5);
  UUIDContext::~UUIDContext((UUIDContext *)v5);
  return uuid;
}

void sub_1AF37E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UUIDContext::~UUIDContext((UUIDContext *)&a9);
  _Unwind_Resume(a1);
}

void ktrace_find_segment_count(symbolication_context *a1, const __CFDictionary **a2)
{
  const __CFDictionary *v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  FILE *v8;
  UInt8 *v9;

  if (((_WORD)a2[20] & 0x20) == 0)
  {
    ktrace_find_summary(a1, (UUIDContext *)a2);
    v4 = a2[16];
    if (v4)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v4, CFSTR("Segments"));
      if (Value)
      {
        v6 = Value;
        v7 = CFGetTypeID(Value);
        if (v7 == CFArrayGetTypeID())
        {
          *((_DWORD *)a2 + 20) = CFArrayGetCount(v6);
          *((_WORD *)a2 + 80) |= 0x20u;
          return;
        }
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      }
    }
    ktrace_analyze_executable((FILE **)a1, a2);
    if (!*((_DWORD *)a2 + 20))
    {
      v8 = *(FILE **)a1;
      if (*(_QWORD *)a1)
      {
        v9 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v8, "could not figure segment count for %s\n", (const char *)v9);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
          ktrace_find_segment_count((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }
}

void ktrace_find_text_size(symbolication_context *a1, UUIDContext *a2)
{
  const __CFDictionary *v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  _QWORD v8[5];
  uint64_t valuePtr;

  if ((*((_WORD *)a2 + 80) & 8) != 0)
    return;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL21ktrace_find_text_sizeP21symbolication_contextP11UUIDContext_block_invoke;
  v8[3] = &__block_descriptor_40_e24_v32__0r_8__CSRange_QQ_16l;
  v8[4] = a2;
  ktrace_iterate_segments(a1, a2, (uint64_t)v8);
  if ((*((_WORD *)a2 + 80) & 8) != 0)
    return;
  ktrace_find_summary(a1, a2);
  v4 = (const __CFDictionary *)*((_QWORD *)a2 + 16);
  if (!v4 || (Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("TextSize"))) == 0)
  {
LABEL_10:
    ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
    return;
  }
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 != CFNumberGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    goto LABEL_10;
  }
  valuePtr = 0;
  if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr))
    ktrace_remotetime_update_params_cold_1();
  *((_QWORD *)a2 + 7) = valuePtr;
  *((_WORD *)a2 + 80) |= 8u;
}

uint64_t ktrace_find_image_type(symbolication_context *a1, UUIDContext *a2)
{
  const __CFDictionary *v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  unsigned int v8;
  FILE *v9;
  UInt8 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t valuePtr;

  if ((*((_WORD *)a2 + 80) & 0x80) != 0)
    return 1;
  ktrace_find_summary(a1, a2);
  v4 = (const __CFDictionary *)*((_QWORD *)a2 + 16);
  if (v4)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("Flags"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr))
          ktrace_remotetime_update_params_cold_1();
        v8 = (unsigned __int16)valuePtr;
        goto LABEL_17;
      }
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
    v8 = 0;
LABEL_17:
    *((_WORD *)a2 + 80) = (16 * v8) & 0x100 | (((v8 >> 6) & 1) << 9) | *((_WORD *)a2 + 80) & 0xFCFF | 0x80;
    return 1;
  }
  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if ((*((_WORD *)a2 + 80) & 0x80) == 0)
  {
    v9 = *(FILE **)a1;
    if (*(_QWORD *)a1)
    {
      v10 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v9, "could not figure out image type for %s\n", (const char *)v10);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ktrace_find_image_type((uint64_t)a1, (unsigned __int8 *)a2);
    }
  }
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v11 + 27);
    v13 = *((unsigned __int16 *)a2 + 80);
    if (v12)
    {
      v13 |= 0x80u;
      *((_WORD *)a2 + 80) = v13;
    }
  }
  else
  {
    v13 = *((unsigned __int16 *)a2 + 80);
  }
  return (v13 >> 7) & 1;
}

void ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  symbolication_context *v5;
  unsigned int v6;
  int v7;
  __int128 *v8;
  uint64_t v9;
  int v10;
  int64x2_t *uuid;
  int64x2_t *v12;
  uint64_t v13;
  const char *v14;
  int arch_with_default;
  __int16 v16;
  int64x2_t v17;
  const char *v18;
  uint64_t *v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  const char *v23;
  FILE *v24;
  UInt8 *v25;
  UInt8 *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  const __CFString *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[6];
  _QWORD v45[11];
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int64x2_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t (*v65)();
  const char *v66;
  uint64_t v67;
  void (*v68[8])(_QWORD, _QWORD);

  v68[7] = *(void (**)(_QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1[4] + 8);
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = (symbolication_context *)a1[7];
  v43 = *a3;
  v6 = *((_DWORD *)a2 + 4);
  if (v6 > 5)
    goto LABEL_10;
  v7 = 1 << v6;
  if ((v7 & 0x26) == 0)
  {
    if ((v7 & 0x18) != 0)
      return;
LABEL_10:
    ktrace_address_space_deep_iterate_symbol_owners();
  }
  v8 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48);
  v10 = *(_DWORD *)(a1[8] + 32);
  uuid = (int64x2_t *)find_or_create_uuid(v5, (SymbolOwner *)a2);
  if (uuid)
  {
    v12 = uuid;
    if ((uuid[10].i16[0] & 1) == 0)
    {
      if (*((_DWORD *)v8 + 4) == 5)
      {
        v13 = *((_QWORD *)v5 + 1);
        if (v13 && *(_BYTE *)(v13 + 28))
        {
          *((_QWORD *)v8 + 3) = 0;
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          *((_DWORD *)v8 + 4) = 2;
          strlcpy((char *)v8 + 24, (const char *)(*((_QWORD *)v5 + 1) + 28), 0x11uLL);
        }
        else
        {
          *(_QWORD *)&v47 = 0;
          *((_QWORD *)&v47 + 1) = &v47;
          *(_QWORD *)&v48 = 0x2020000000;
          BYTE8(v48) = 0;
          *(_QWORD *)v61 = MEMORY[0x1E0C809B0];
          v62 = 3221225472;
          v63 = (uint64_t)___ZL23fix_tailspin_kext_ownerP11SymbolOwnerP21symbolication_contextP11UUIDContext_block_invoke;
          v64 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5F713D8;
          v65 = (uint64_t (*)())&v47;
          if (!ktrace_iterate_segments(v5, (UUIDContext *)uuid, (uint64_t)v61))
          {
            v19 = (uint64_t *)&v47;
LABEL_73:
            _Block_object_dispose(v19, 8);
            return;
          }
          if (*((_DWORD *)v8 + 4) != 2)
          {
            *((_QWORD *)v8 + 3) = 0;
            *((_QWORD *)v8 + 4) = 0;
            *((_QWORD *)v8 + 5) = 0;
            *((_DWORD *)v8 + 4) = 2;
          }
          if (*(_BYTE *)(*((_QWORD *)&v47 + 1) + 24))
            v14 = "__TEXT_EXEC";
          else
            v14 = "__TEXT";
          strlcpy((char *)v8 + 24, v14, 0x11uLL);
          _Block_object_dispose(&v47, 8);
        }
      }
      v57 = 0;
      v58 = &v57;
      v59 = 0x2020000000;
      v60 = 0;
      v53 = 0;
      v54 = &v53;
      v55 = 0x2020000000;
      v56 = 0;
      arch_with_default = ktrace_find_arch_with_default(v5, (uint64_t)v12, v9);
      if (!v43)
      {
        if (!arch_with_default)
          goto LABEL_29;
        LOBYTE(arch_with_default) = ktrace_find_image_type(v5, (UUIDContext *)v12);
      }
      if ((arch_with_default & 1) != 0)
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        if (*((_DWORD *)v8 + 4) == 1)
        {
          ktrace_find_segment_count(v5, (const __CFDictionary **)v12);
          if ((v12[10].i16[0] & 0x20) == 0)
          {
            ktrace_find_text_size(v5, (UUIDContext *)v12);
            v16 = v12[10].i16[0];
            if ((v16 & 8) != 0)
            {
              SymbolOwner::operator=((uint64_t)&v47, v8);
              if ((_DWORD)v48 != 2)
              {
                *((_QWORD *)&v48 + 1) = 0;
                v49 = 0uLL;
                LODWORD(v48) = 2;
              }
              v50.i64[1] = v12[3].i64[1] + 1;
              v18 = "__TEXT";
            }
            else
            {
              if ((v16 & 0x10) == 0)
                goto LABEL_35;
              SymbolOwner::operator=((uint64_t)&v47, v8);
              if ((_DWORD)v48 != 2)
              {
                *((_QWORD *)&v48 + 1) = 0;
                v49 = 0uLL;
                LODWORD(v48) = 2;
              }
              v17 = vdupq_n_s64(1uLL);
              v17.i64[0] = v50.i64[0];
              v50 = vaddq_s64(v12[4], v17);
              v18 = "__TEXT_EXEC";
            }
            v8 = &v47;
            strlcpy((char *)&v48 + 8, v18, 0x11uLL);
          }
        }
LABEL_35:
        v20 = *((_DWORD *)v8 + 4);
        if (v20 == 1)
        {
          v21 = v12[10].i16[0];
          if ((v21 & 0x20) == 0)
          {
            v12[10].i16[0] = v21 | 1;
LABEL_71:
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v47);
            goto LABEL_72;
          }
          v58[3] = *(_QWORD *)(v4 + 24);
          *(_QWORD *)(v4 + 24) += 40 * v12[5].i32[0];
          *(_QWORD *)v61 = 0;
          v62 = (uint64_t)v61;
          v63 = 0x2020000000;
          LODWORD(v64) = 0;
          if ((ktrace_find_base_address(v5, (UUIDContext *)v12) & 1) == 0)
            goto LABEL_48;
          v45[0] = MEMORY[0x1E0C809B0];
          v45[1] = 3321888768;
          v45[2] = ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke;
          v45[3] = &unk_1E5F6F8D8;
          v46 = v10;
          v45[4] = &v57;
          v45[5] = v61;
          v45[8] = v5;
          v45[9] = v8;
          v45[10] = v43;
          v45[6] = &v53;
          v45[7] = v12;
          if (!ktrace_iterate_segments(v5, (UUIDContext *)v12, (uint64_t)v45))
          {
LABEL_48:
            v12[10].i16[0] |= 1u;
            _Block_object_dispose(v61, 8);
            goto LABEL_71;
          }
          _Block_object_dispose(v61, 8);
          v20 = *((_DWORD *)v8 + 4);
        }
        if (v20 == 2)
        {
          *(_QWORD *)v61 = 0;
          v62 = (uint64_t)v61;
          v63 = 0x3812000000;
          v64 = __Block_byref_object_copy__212;
          v65 = __Block_byref_object_dispose__213;
          v22 = *((_QWORD *)v8 + 7);
          v66 = "";
          v67 = v22;
          if (!v22)
          {
            v23 = (char *)v8 + 24;
            if (strcmp((const char *)v8 + 24, "__TEXT")
              || ((ktrace_find_text_size(v5, (UUIDContext *)v12), (v12[10].i16[0] & 8) != 0)
                ? (v27 = v12[3].i64[1] + 1, *(_QWORD *)(v62 + 48) = v27)
                : (v27 = *(_QWORD *)(v62 + 48)),
                  !v27))
            {
              v44[0] = MEMORY[0x1E0C809B0];
              v44[1] = 3221225472;
              v44[2] = ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_215;
              v44[3] = &unk_1E5F71390;
              v44[4] = v61;
              v44[5] = v8;
              ktrace_iterate_segments(v5, (UUIDContext *)v12, (uint64_t)v44);
              if (!*(_QWORD *)(v62 + 48))
              {
                v24 = *(FILE **)v5;
                if (*(_QWORD *)v5)
                {
                  v25 = describe2((uint64_t)v5, (unsigned __int8 *)v12);
                  fprintf(v24, "coulnd't figure out segment length for %s of %s\n", v23, (const char *)v25);
                  ktrace_log_init();
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
                  {
                    v26 = describe2((uint64_t)v5, (unsigned __int8 *)v12);
                    ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2_cold_2((uint64_t)v23, (uint64_t)v26, (uint64_t)v68);
                  }
                }
                goto LABEL_48;
              }
            }
          }
          v28 = *(_QWORD **)(v4 + 24);
          v29 = v58;
          *v28 = *((_QWORD *)v8 + 6);
          *(_QWORD *)(v4 + 24) = v28 + 5;
          v29[3] = (uint64_t)v28;
          if (v43)
          {
            v30 = optional_uint64::value((optional_uint64 *)&v43);
            *(_QWORD *)v58[3] += v30;
          }
          v31 = *(_QWORD *)v58[3];
          v32 = optional_uint64::value((optional_uint64 *)(v62 + 48));
          *(_QWORD *)(v58[3] + 8) = v32 + v31;
          v33 = v58[3];
          v34 = *((_BYTE *)v8 + 40);
          *(_OWORD *)(v33 + 16) = *(__int128 *)((char *)v8 + 24);
          *(_BYTE *)(v33 + 32) = v34;
          ++*((_DWORD *)v54 + 6);
          _Block_object_dispose(v61, 8);
        }
        v35 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v35 + 64;
        *(_OWORD *)(v35 + 16) = *v8;
        *(_QWORD *)(v35 + 32) = v12[7].i64[1];
        v36 = (const __CFString *)v12[8].i64[1];
        if (v36)
        {
          v37 = utf8(v36);
        }
        else
        {
          v38 = *((_QWORD *)v5 + 10);
          v68[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
          v68[1] = (void (*)(_QWORD, _QWORD))3221225472;
          v68[2] = (void (*)(_QWORD, _QWORD))___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_217;
          v68[3] = (void (*)(_QWORD, _QWORD))&__block_descriptor_56_e21_v16__0____CFString__8l;
          v68[4] = (void (*)(_QWORD, _QWORD))v35;
          v68[5] = (void (*)(_QWORD, _QWORD))v12;
          v68[6] = (void (*)(_QWORD, _QWORD))v5;
          ktrace_uuid_map_iterate_associated_paths(v38, (__int128 *)v12->i8, v68);
          v37 = *(char **)(v35 + 40);
          if (v37)
            goto LABEL_60;
          v37 = "<unknown>";
        }
        *(_QWORD *)(v35 + 40) = v37;
LABEL_60:
        *(_DWORD *)(v35 + 60) = 0;
        v39 = (v12[10].u16[0] >> 4) & 0x10;
        *(_DWORD *)(v35 + 60) = v39;
        if ((v12[10].i16[0] & 0x200) != 0)
          *(_DWORD *)(v35 + 60) = v39 | 0x40;
        v40 = *((_QWORD *)v5 + 10);
        if (v40 && (*(_BYTE *)(v40 + 288) || *(_BYTE *)(v40 + 289))
          || (v41 = *((_QWORD *)v5 + 1)) != 0 && *(_BYTE *)(v41 + 46))
        {
          if (v37)
          {
            v42 = basename_r(v37, v61);
            if (!strcmp("dyld", v42))
              *(_DWORD *)(v35 + 60) |= 0x40u;
          }
        }
        *(_QWORD *)(v35 + 48) = v58[3];
        *(_DWORD *)(v35 + 56) = *((_DWORD *)v54 + 6);
        goto LABEL_71;
      }
LABEL_29:
      v12[10].i16[0] |= 1u;
LABEL_72:
      _Block_object_dispose(&v53, 8);
      v19 = &v57;
      goto LABEL_73;
    }
  }
}

void sub_1AF37F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a31);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void UUIDContext::UUIDContext(UUIDContext *this, SymbolOwner *a2)
{
  const void *v4;
  optional_uint64 *v5;
  optional_uint64 *v6;
  uint64_t v7;
  __int128 v8;

  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v8 = *(_OWORD *)a2;
  uuid_copy((unsigned __int8 *)this, (const unsigned __int8 *)&v8);
  v4 = (const void *)*((_QWORD *)a2 + 10);
  *((_QWORD *)this + 17) = v4;
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 9);
  if (v4)
    CFRetain(v4);
  if (*((_DWORD *)a2 + 4) == 1)
  {
    if (*((_QWORD *)a2 + 3))
    {
      *((_QWORD *)this + 7) = optional_uint64::value((SymbolOwner *)((char *)a2 + 24));
      *((_WORD *)this + 80) |= 8u;
    }
    v5 = (SymbolOwner *)((char *)a2 + 32);
    if (*((_QWORD *)a2 + 4))
    {
      v7 = *((_QWORD *)a2 + 5);
      v6 = (SymbolOwner *)((char *)a2 + 40);
      if (v7)
      {
        *((_QWORD *)this + 9) = optional_uint64::value(v6);
        *((_QWORD *)this + 8) = optional_uint64::value(v5);
        *((_WORD *)this + 80) |= 0x10u;
      }
    }
  }
}

BOOL ktrace_iterate_segments(symbolication_context *a1, UUIDContext *a2, uint64_t a3)
{
  const __CFDictionary *v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  CFIndex Count;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  const __CFString *v14;
  const __CFString *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  CFTypeID v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BOOL8 v26;
  _BOOL4 executable;
  uint64_t *v28;
  NSObject *v29;
  UInt8 *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _BYTE v41[15];
  char v42;
  _BYTE v43[15];
  char v44;
  _BYTE v45[15];
  char v46;
  _BYTE v47[15];
  _QWORD valuePtr[4];

  valuePtr[2] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = &v35;
  v37 = 0x2020000000;
  v38 = 0;
  ktrace_find_summary(a1, a2);
  v5 = (const __CFDictionary *)*((_QWORD *)a2 + 16);
  if (!v5 || (Value = (const __CFArray *)CFDictionaryGetValue(v5, CFSTR("Segments")), (v7 = Value) == 0))
  {
LABEL_36:
    *((_BYTE *)v36 + 24) = 0;
    executable = ktrace_find_executable(a1, a2);
    v28 = v36;
    *((_BYTE *)v36 + 24) = executable;
    if (executable)
    {
      *((_BYTE *)v28 + 24) = 0;
      CSSymbolicatorForeachSymbolicatorWithURL();
      v26 = *((_BYTE *)v36 + 24) != 0;
    }
    else
    {
      v26 = 0;
    }
    goto LABEL_43;
  }
  v8 = CFGetTypeID(Value);
  if (v8 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    goto LABEL_36;
  }
  Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
LABEL_33:
    v26 = 1;
  }
  else
  {
    v10 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v10);
      v12 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v13 = CFGetTypeID(ValueAtIndex);
        if (v13 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v40, v41);
          v12 = 0;
        }
      }
      v14 = (const __CFString *)CFDictionaryGetValue(v12, CFSTR("Name"));
      v15 = v14;
      if (v14)
      {
        v16 = CFGetTypeID(v14);
        if (v16 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v42, v43);
          v15 = 0;
        }
      }
      v17 = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("Address"));
      v18 = v17;
      if (v17)
      {
        v19 = CFGetTypeID(v17);
        if (v19 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v44, v45);
          v18 = 0;
        }
      }
      v20 = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("Size"));
      v21 = v20;
      if (v20)
      {
        v22 = CFGetTypeID(v20);
        if (v22 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v46, v47);
          v21 = 0;
        }
      }
      if (!v12 || !v15 || !v18 || !v21)
        break;
      valuePtr[0] = 0;
      v39 = 0;
      if (!CFNumberGetValue(v18, kCFNumberLongLongType, valuePtr))
      {
        _os_assert_log();
        v32 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v32);
      }
      if (!CFNumberGetValue(v21, kCFNumberLongLongType, &v39))
      {
        _os_assert_log();
        v33 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v33);
      }
      v23 = valuePtr[0];
      v24 = v39;
      v25 = utf8(v15);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 16))(a3, v25, v23, v24);
      if (Count == ++v10)
        goto LABEL_33;
    }
    v29 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      v30 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      ktrace_iterate_segments((uint64_t)v30, (uint64_t)valuePtr, v29);
    }
    v26 = 0;
  }
  *((_BYTE *)v36 + 24) = v26;
LABEL_43:
  _Block_object_dispose(&v35, 8);
  return v26;
}

void sub_1AF37F5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL21ktrace_find_text_sizeP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = strcmp("__TEXT", a2);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v7 + 56) = a4;
    *(_WORD *)(v7 + 160) |= 8u;
  }
  return result;
}

uint64_t ___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

uint64_t ___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Range;
  uint64_t v6;
  _BYTE v8[17];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CSRegionGetSegmentName(a2, a3, v8);
  v4 = *(_QWORD *)(a1 + 32);
  Range = CSRegionGetRange();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(v4 + 16))(v4, v8, Range, v6);
}

uint64_t ktrace_find_base_address(symbolication_context *a1, UUIDContext *a2)
{
  uint64_t v4;
  FILE *v6;
  UInt8 *v7;
  _QWORD v8[5];

  if ((*((_WORD *)a2 + 80) & 0x40) != 0)
    return 1;
  ktrace_find_summary(a1, a2);
  if (*((_QWORD *)a2 + 16))
  {
    v4 = MEMORY[0x1E0C809B0];
    *((_QWORD *)a2 + 6) = -1;
    v8[0] = v4;
    v8[1] = 3221225472;
    v8[2] = ___ZL24ktrace_find_base_addressP21symbolication_contextP11UUIDContext_block_invoke;
    v8[3] = &__block_descriptor_40_e24_v32__0r_8__CSRange_QQ_16l;
    v8[4] = a2;
    if (ktrace_iterate_segments(a1, a2, (uint64_t)v8) && *((_QWORD *)a2 + 6) != -1)
    {
      *((_WORD *)a2 + 80) |= 0x40u;
      return 1;
    }
  }
  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if ((*((_WORD *)a2 + 80) & 0x40) == 0)
  {
    v6 = *(FILE **)a1;
    if (*(_QWORD *)a1)
    {
      v7 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v6, "could not figure out base address for %s\n", (const char *)v7);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        ktrace_find_base_address((uint64_t)a1, (unsigned __int8 *)a2);
    }
  }
  return (*((unsigned __int16 *)a2 + 80) >> 6) & 1;
}

void ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke(uint64_t a1, char *__source, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  FILE **v12;
  FILE *v13;
  UInt8 *v14;
  NSObject *v15;
  UInt8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  char *v25;
  __int16 v26;
  UInt8 *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 88) || strcmp(__source, "__LINKEDIT"))
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 48);
    v10 = a3 >= v9;
    v11 = a3 - v9;
    if (v10)
    {
      v17 = *(_QWORD *)(a1 + 80);
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v20 = *(_DWORD *)(v19 + 24);
      v21 = (uint64_t *)(v18 + 40 * v20);
      *(_DWORD *)(v19 + 24) = v20 + 1;
      v22 = v11 + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 48);
      *v21 = v22;
      if (v17)
      {
        v22 = *v21 + optional_uint64::value((optional_uint64 *)(a1 + 80));
        *v21 = v22;
      }
      v23 = v18 + 40 * v20;
      *(_QWORD *)(v23 + 8) = v22 + a4;
      strlcpy((char *)(v23 + 16), __source, 0x11uLL);
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    }
    else if (strcmp(__source, "__PAGEZERO"))
    {
      v12 = *(FILE ***)(a1 + 64);
      v13 = *v12;
      if (*v12)
      {
        v14 = describe2((uint64_t)v12, (unsigned __int8 *)v8);
        fprintf(v13, "WARNING: ignoring segment %s below base address for %s\n", __source, (const char *)v14);
        ktrace_log_init();
        v15 = ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        {
          v16 = describe2(*(_QWORD *)(a1 + 64), *(unsigned __int8 **)(a1 + 56));
          *(_DWORD *)buf = 136315394;
          v25 = __source;
          v26 = 2080;
          v27 = v16;
          _os_log_debug_impl(&dword_1AF33A000, v15, OS_LOG_TYPE_DEBUG, "WARNING: ignoring segment %s below base address for %s\n", buf, 0x16u);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_80c21_ZTS15optional_uint64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

uint64_t __Block_byref_object_copy__212(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_215(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = strncmp(__s1, (const char *)(*(_QWORD *)(a1 + 40) + 24), 0x10uLL);
  if (!(_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = a4 + 1;
  return result;
}

void ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_217(uint64_t a1, const __CFString *a2)
{
  FILE *v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  char *v14;
  char out[40];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    memset(out, 0, 37);
    uuid_unparse(*(const unsigned __int8 **)(a1 + 40), out);
    v4 = **(FILE ***)(a1 + 48);
    if (v4)
    {
      v5 = *(const char **)(*(_QWORD *)(a1 + 32) + 40);
      v6 = utf8(a2);
      fprintf(v4, "WARNING: %s associated with multiple locations: %s AND %s\n", out, v5, v6);
      ktrace_log_init();
      v7 = ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
        *(_DWORD *)buf = 136315650;
        v10 = out;
        v11 = 2080;
        v12 = v8;
        v13 = 2080;
        v14 = utf8(a2);
        _os_log_debug_impl(&dword_1AF33A000, v7, OS_LOG_TYPE_DEBUG, "WARNING: %s associated with multiple locations: %s AND %s\n", buf, 0x20u);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = utf8(a2);
  }
}

uint64_t ___ZL23fix_tailspin_kext_ownerP11SymbolOwnerP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, char *__s1)
{
  uint64_t result;

  result = strcmp(__s1, "__TEXT_EXEC");
  if (!(_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t ___ZL24ktrace_find_base_addressP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, char *__s1, unint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = strcmp(__s1, "__PAGEZERO");
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (a3 < *(_QWORD *)(v6 + 48))
      *(_QWORD *)(v6 + 48) = a3;
  }
  return result;
}

void PrepassOp::~PrepassOp(PrepassOp *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    _Block_release(v1);
}

BOOL flatbuffers::Verifier::VerifyBufferFromStart<FlatbufferSymbols::SymbolsBuffer>(flatbuffers::Verifier *this, const char *a2, unint64_t a3)
{
  unsigned int v5;

  return (!a2 || *((_QWORD *)this + 1) >= 8uLL && !strncmp((const char *)(*(_QWORD *)this + a3 + 4), a2, 4uLL))
      && (v5 = flatbuffers::Verifier::VerifyOffset(this, a3)) != 0
      && FlatbufferSymbols::SymbolsBuffer::Verify((FlatbufferSymbols::SymbolsBuffer *)(*(_QWORD *)this + a3 + v5), this);
}

uint64_t flatbuffers::Verifier::VerifyOffset(flatbuffers::Verifier *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  if ((a2 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (v2 < 5 || v2 - 4 < a2)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)this + a2);
  if ((int)v4 < 1)
    return 0;
  if (v2 - 1 >= v4 + a2)
    return v4;
  return 0;
}

BOOL FlatbufferSymbols::SymbolsBuffer::Verify(FlatbufferSymbols::SymbolsBuffer *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  _DWORD *v18;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      v5 = *(int *)this;
      v6 = -v5;
      v7 = (unsigned __int16 *)((char *)this - v5);
      if (*v7 >= 5u)
      {
        v8 = v7[2];
        if (v8)
        {
          result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v8 + *(unsigned int *)((char *)this + v8), 4uLL, 0);
          if (!result)
            return result;
          v6 = -(uint64_t)*(int *)this;
        }
      }
      v9 = (unsigned __int16 *)((char *)this + v6);
      if (*v9 >= 5u && (v10 = v9[2]) != 0)
        v11 = (_DWORD *)((char *)this + v10 + *(unsigned int *)((char *)this + v10));
      else
        v11 = 0;
      result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbolicator>(a2, v11);
      if (result)
      {
        result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          v12 = *(int *)this;
          v13 = -v12;
          v14 = (unsigned __int16 *)((char *)this - v12);
          if (*v14 >= 7u)
          {
            v15 = v14[3];
            if (v15)
            {
              result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v15 + *(unsigned int *)((char *)this + v15), 4uLL, 0);
              if (!result)
                return result;
              v13 = -(uint64_t)*(int *)this;
            }
          }
          v16 = (unsigned __int16 *)((char *)this + v13);
          if (*v16 >= 7u && (v17 = v16[3]) != 0)
            v18 = (_DWORD *)((char *)this + v17 + *(unsigned int *)((char *)this + v17));
          else
            v18 = 0;
          result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::StringEntry>(a2, v18);
          if (result)
          {
            --*((_DWORD *)a2 + 4);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyOffset(flatbuffers::Table *this, const flatbuffers::Verifier *a2, unsigned int a3)
{
  unsigned __int16 *v3;
  uint64_t v4;

  v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v3 <= a3
      || (v4 = *(unsigned __int16 *)((char *)v3 + a3)) == 0
      || flatbuffers::Verifier::VerifyOffset(a2, (unint64_t)this + v4 - *(_QWORD *)a2) != 0;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbolicator>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::Symbolicator::Verify((FlatbufferSymbols::Symbolicator *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::StringEntry>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::StringEntry::Verify((FlatbufferSymbols::StringEntry *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyTableStart(flatbuffers::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v2 = *(_QWORD *)this;
  v3 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v3 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5)
    return 0;
  v6 = *(int *)a2;
  v7 = *((_DWORD *)this + 5);
  v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7))
    return 0;
  v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    if (*((_BYTE *)this + 40) || v4 - 2 < v10)
      return v11;
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = v4 >= v12;
  v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL flatbuffers::Verifier::VerifyVectorOrString(flatbuffers::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v4 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 < 5 || v5 - 4 < v4)
    return 0;
  v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7)
    return 0;
  v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    v5 = *((_QWORD *)this + 1);
  }
  v9 = v5 > v8;
  v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL FlatbufferSymbols::Symbolicator::Verify(FlatbufferSymbols::Symbolicator *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  FlatbufferSymbols::DyldSharedCacheMetadata *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  _DWORD *v27;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (!result)
    return result;
  v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v5 >= 5u)
  {
    v6 = v5[2];
    if (v6)
    {
      result = 0;
      v7 = *((_QWORD *)a2 + 1);
      if (v7 < 2 || v7 - 1 < (unint64_t)this + v6 - *(_QWORD *)a2)
        return result;
    }
  }
  result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
  if (!result)
    return result;
  v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  v9 = *v8;
  if (v9 >= 7)
  {
    if (v8[3])
    {
      v10 = (FlatbufferSymbols::Symbolicator *)((char *)this + v8[3] + *(unsigned int *)((char *)this + v8[3]));
      goto LABEL_12;
    }
LABEL_11:
    v10 = 0;
LABEL_12:
    v11 = v8[2];
    if (v11)
    {
      v12 = *((unsigned __int8 *)this + v11);
      if (v12 == 3)
      {
        if (v10)
        {
          result = FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v10, a2);
          if (!result)
            return result;
        }
      }
      else if (v12 == 2)
      {
        if (v10 && !FlatbufferSymbols::MachoMetadata::Verify(v10, a2))
          return 0;
      }
      else
      {
        v13 = v12 != 1 || v10 == 0;
        if (!v13 && !FlatbufferSymbols::ProcessMetadata::Verify(v10, a2))
          return 0;
      }
    }
    goto LABEL_26;
  }
  if (v9 >= 5)
    goto LABEL_11;
LABEL_26:
  result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
  if (!result)
    return result;
  v14 = *(int *)this;
  v15 = -v14;
  v16 = (unsigned __int16 *)((char *)this - v14);
  if (*v16 >= 9u)
  {
    v17 = v16[4];
    if (v17)
    {
      result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v17 + *(unsigned int *)((char *)this + v17), 4uLL, 0);
      if (!result)
        return result;
      v15 = -(uint64_t)*(int *)this;
    }
  }
  v18 = (unsigned __int16 *)((char *)this + v15);
  if (*v18 >= 9u && (v19 = v18[4]) != 0)
    v20 = (_DWORD *)((char *)this + v19 + *(unsigned int *)((char *)this + v19));
  else
    v20 = 0;
  result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolOwner>(a2, v20);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
    if (result)
    {
      v21 = *(int *)this;
      v22 = -v21;
      v23 = (unsigned __int16 *)((char *)this - v21);
      if (*v23 >= 0xBu)
      {
        v24 = v23[5];
        if (v24)
        {
          result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v24 + *(unsigned int *)((char *)this + v24), 4uLL, 0);
          if (!result)
            return result;
          v22 = -(uint64_t)*(int *)this;
        }
      }
      v25 = (unsigned __int16 *)((char *)this + v22);
      if (*v25 >= 0xBu && (v26 = v25[5]) != 0)
        v27 = (_DWORD *)((char *)this + v26 + *(unsigned int *)((char *)this + v26));
      else
        v27 = 0;
      result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SharedCache>(a2, v27);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolOwner>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::SymbolOwner::Verify((FlatbufferSymbols::SymbolOwner *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SharedCache>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::SharedCache::Verify((FlatbufferSymbols::SharedCache *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::ProcessMetadata::Verify(FlatbufferSymbols::ProcessMetadata *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  const unsigned __int8 *v15;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (v6 = v5[2]) != 0)
        v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      else
        v7 = 0;
      result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        v9 = *v8;
        if (v9 < 7
          || (!v8[3]
           || (result = 0, v10 = *((_QWORD *)a2 + 1), v10 >= 9)
           && v10 - 8 >= (unint64_t)this + v8[3] - *(_QWORD *)a2)
          && (v9 < 9
           || (v11 = v8[4]) == 0
           || (result = 0, v12 = *((_QWORD *)a2 + 1), v12 >= 9)
           && v12 - 8 >= (unint64_t)this + v11 - *(_QWORD *)a2))
        {
          result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            v13 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v13 >= 0xBu && (v14 = v13[5]) != 0)
              v15 = (const unsigned __int8 *)this + v14 + *(unsigned int *)((char *)this + v14);
            else
              v15 = 0;
            result = flatbuffers::Verifier::VerifyString(a2, v15);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyString(flatbuffers::Verifier *a1, const unsigned __int8 *a2)
{
  _BOOL8 result;
  unint64_t v4;
  unint64_t v6;

  if (!a2)
    return 1;
  v6 = 0;
  result = flatbuffers::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    v4 = *((_QWORD *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(_BYTE *)(*(_QWORD *)a1 + v6) == 0;
  }
  return result;
}

BOOL FlatbufferSymbols::MachoMetadata::Verify(FlatbufferSymbols::MachoMetadata *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  const unsigned __int8 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  const unsigned __int8 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  const unsigned __int8 *v29;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (v6 = v5[2]) != 0)
        v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      else
        v7 = 0;
      result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (v9 = v8[3]) != 0)
            v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          else
            v10 = 0;
          result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (result = 0, v13 = *((_QWORD *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(_QWORD *)a2)
              && (v12 < 0xB
               || (v14 = v11[5]) == 0
               || (result = 0, v15 = *((_QWORD *)a2 + 1), v15 >= 9)
               && v15 - 8 >= (unint64_t)this + v14 - *(_QWORD *)a2))
            {
              result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                if (*v16 < 0xDu
                  || (v17 = v16[6]) == 0
                  || (result = FlatbufferSymbols::CPUArchitecture::Verify((FlatbufferSymbols::MachoMetadata *)((char *)this+ v17+ *(unsigned int *)((char *)this + v17)), a2)))
                {
                  result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v18 >= 0xFu && (v19 = v18[7]) != 0)
                      v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                    else
                      v20 = 0;
                    result = flatbuffers::Verifier::VerifyString(a2, v20);
                    if (result)
                    {
                      result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if (result)
                      {
                        v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                        if (*v21 >= 0x11u && (v22 = v21[8]) != 0)
                          v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                        else
                          v23 = 0;
                        result = flatbuffers::Verifier::VerifyString(a2, v23);
                        if (result)
                        {
                          result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                          if (result)
                          {
                            v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 >= 0x13u && (v25 = v24[9]) != 0)
                              v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                            else
                              v26 = 0;
                            result = flatbuffers::Verifier::VerifyString(a2, v26);
                            if (result)
                            {
                              result = flatbuffers::Table::VerifyOffset(this, a2, 0x14u);
                              if (result)
                              {
                                v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                                if (*v27 >= 0x15u && (v28 = v27[10]) != 0)
                                  v29 = (const unsigned __int8 *)this + v28 + *(unsigned int *)((char *)this + v28);
                                else
                                  v29 = 0;
                                result = flatbuffers::Verifier::VerifyString(a2, v29);
                                if (result)
                                {
                                  --*((_DWORD *)a2 + 4);
                                  return 1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::CPUArchitecture::Verify(FlatbufferSymbols::CPUArchitecture *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (result = 0, v7 = *((_QWORD *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v5[2] - *(_QWORD *)a2)
      && (v6 < 7
       || (!v5[3]
        || (result = 0, v8 = *((_QWORD *)a2 + 1), v8 >= 5) && v8 - 4 >= (unint64_t)this + v5[3] - *(_QWORD *)a2)
       && (v6 < 9
        || (v9 = v5[4]) == 0
        || (result = 0, v10 = *((_QWORD *)a2 + 1), v10 >= 5) && v10 - 4 >= (unint64_t)this + v9 - *(_QWORD *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1;
    }
  }
  return result;
}

BOOL FlatbufferSymbols::DyldSharedCacheMetadata::Verify(FlatbufferSymbols::DyldSharedCacheMetadata *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  const unsigned __int8 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  const unsigned __int8 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unint64_t v29;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (v6 = v5[2]) != 0)
        v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      else
        v7 = 0;
      result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (v9 = v8[3]) != 0)
            v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          else
            v10 = 0;
          result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (result = 0, v13 = *((_QWORD *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(_QWORD *)a2)
              && (v12 < 0xB
               || (v14 = v11[5]) == 0
               || (result = 0, v15 = *((_QWORD *)a2 + 1), v15 >= 9)
               && v15 - 8 >= (unint64_t)this + v14 - *(_QWORD *)a2))
            {
              result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                if (*v16 < 0xDu
                  || (v17 = v16[6]) == 0
                  || (result = FlatbufferSymbols::CPUArchitecture::Verify((FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)this+ v17+ *(unsigned int *)((char *)this + v17)), a2)))
                {
                  result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v18 >= 0xFu && (v19 = v18[7]) != 0)
                      v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                    else
                      v20 = 0;
                    result = flatbuffers::Verifier::VerifyString(a2, v20);
                    if (result)
                    {
                      result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if (result)
                      {
                        v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                        if (*v21 >= 0x11u && (v22 = v21[8]) != 0)
                          v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                        else
                          v23 = 0;
                        result = flatbuffers::Verifier::VerifyString(a2, v23);
                        if (result)
                        {
                          result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                          if (result)
                          {
                            v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 >= 0x13u && (v25 = v24[9]) != 0)
                              v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                            else
                              v26 = 0;
                            result = flatbuffers::Verifier::VerifyString(a2, v26);
                            if (result)
                            {
                              v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                              if (*v27 < 0x15u
                                || (v28 = v27[10]) == 0
                                || (result = 0, v29 = *((_QWORD *)a2 + 1), v29 >= 9)
                                && v29 - 8 >= (unint64_t)this + v28 - *(_QWORD *)a2)
                              {
                                --*((_DWORD *)a2 + 4);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::SymbolOwner::Verify(FlatbufferSymbols::SymbolOwner *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  FlatbufferSymbols::MachoMetadata *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (!result)
    return result;
  v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v5 >= 5u)
  {
    v6 = v5[2];
    if (v6)
    {
      result = 0;
      v7 = *((_QWORD *)a2 + 1);
      if (v7 < 2 || v7 - 1 < (unint64_t)this + v6 - *(_QWORD *)a2)
        return result;
    }
  }
  result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
  if (!result)
    return result;
  v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  v9 = *v8;
  if (v9 >= 7)
  {
    if (v8[3])
    {
      v10 = (FlatbufferSymbols::SymbolOwner *)((char *)this + v8[3] + *(unsigned int *)((char *)this + v8[3]));
LABEL_12:
      v11 = v8[2];
      if (v11)
      {
        if (v10)
        {
          if (*((_BYTE *)this + v11) == 1)
          {
            result = FlatbufferSymbols::MachoMetadata::Verify(v10, a2);
            if (!result)
              return result;
          }
        }
      }
      goto LABEL_16;
    }
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
  if (v9 >= 5)
    goto LABEL_11;
LABEL_16:
  result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
  if (!result)
    return result;
  v12 = *(int *)this;
  v13 = -v12;
  v14 = (unsigned __int16 *)((char *)this - v12);
  if (*v14 >= 9u)
  {
    v15 = v14[4];
    if (v15)
    {
      result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v15 + *(unsigned int *)((char *)this + v15), 4uLL, 0);
      if (!result)
        return result;
      v13 = -(uint64_t)*(int *)this;
    }
  }
  v16 = (unsigned __int16 *)((char *)this + v13);
  if (*v16 >= 9u && (v17 = v16[4]) != 0)
    v18 = (_DWORD *)((char *)this + v17 + *(unsigned int *)((char *)this + v17));
  else
    v18 = 0;
  result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Segment>(a2, v18);
  if (result)
  {
    v19 = (unsigned __int16 *)((char *)this - *(int *)this);
    v20 = *v19;
    if (v20 < 0xB
      || (!v19[5]
       || (result = 0, v21 = *((_QWORD *)a2 + 1), v21 >= 9)
       && v21 - 8 >= (unint64_t)this + v19[5] - *(_QWORD *)a2)
      && (v20 < 0xD
       || (!v19[6]
        || (result = 0, v22 = *((_QWORD *)a2 + 1), v22 >= 2)
        && v22 - 1 >= (unint64_t)this + v19[6] - *(_QWORD *)a2)
       && (v20 < 0xF
        || (v23 = v19[7]) == 0
        || (result = 0, v24 = *((_QWORD *)a2 + 1), v24 >= 2)
        && v24 - 1 >= (unint64_t)this + v23 - *(_QWORD *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1;
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Segment>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::Segment::Verify((FlatbufferSymbols::Segment *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::Segment::Verify(FlatbufferSymbols::Segment *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (v6 = v5[2]) != 0)
        v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      else
        v7 = 0;
      result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        v9 = *v8;
        if (v9 < 7
          || (!v8[3]
           || (result = 0, v10 = *((_QWORD *)a2 + 1), v10 >= 9)
           && v10 - 8 >= (unint64_t)this + v8[3] - *(_QWORD *)a2)
          && (v9 < 9
           || (v11 = v8[4]) == 0
           || (result = 0, v12 = *((_QWORD *)a2 + 1), v12 >= 9)
           && v12 - 8 >= (unint64_t)this + v11 - *(_QWORD *)a2))
        {
          result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            v13 = *(int *)this;
            v14 = -v13;
            v15 = (unsigned __int16 *)((char *)this - v13);
            if (*v15 >= 0xBu)
            {
              v16 = v15[5];
              if (v16)
              {
                result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v16 + *(unsigned int *)((char *)this + v16), 4uLL, 0);
                if (!result)
                  return result;
                v14 = -(uint64_t)*(int *)this;
              }
            }
            v17 = (unsigned __int16 *)((char *)this + v14);
            if (*v17 >= 0xBu && (v18 = v17[5]) != 0)
              v19 = (_DWORD *)((char *)this + v18 + *(unsigned int *)((char *)this + v18));
            else
              v19 = 0;
            result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbol>(a2, v19);
            if (result)
            {
              result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                v20 = *(int *)this;
                v21 = -v20;
                v22 = (unsigned __int16 *)((char *)this - v20);
                if (*v22 >= 0xDu)
                {
                  v23 = v22[6];
                  if (v23)
                  {
                    result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v23 + *(unsigned int *)((char *)this + v23), 1uLL, 0);
                    if (!result)
                      return result;
                    v21 = -(uint64_t)*(int *)this;
                  }
                }
                v24 = (unsigned __int16 *)((char *)this + v21);
                v25 = *v24;
                if (v25 < 0xF)
                  goto LABEL_47;
                if (!v24[7]
                  || (result = 0, v26 = *((_QWORD *)a2 + 1), v26 >= 9)
                  && v26 - 8 >= (unint64_t)this + v24[7] - *(_QWORD *)a2)
                {
                  if (v25 < 0x11
                    || (!v24[8]
                     || (result = 0, v27 = *((_QWORD *)a2 + 1), v27 >= 2)
                     && v27 - 1 >= (unint64_t)this + v24[8] - *(_QWORD *)a2)
                    && (v25 < 0x13
                     || (!v24[9]
                      || (result = 0, v28 = *((_QWORD *)a2 + 1), v28 >= 2)
                      && v28 - 1 >= (unint64_t)this + v24[9] - *(_QWORD *)a2)
                     && (v25 < 0x15
                      || (v29 = v24[10]) == 0
                      || (result = 0, v30 = *((_QWORD *)a2 + 1), v30 >= 2)
                      && v30 - 1 >= (unint64_t)this + v29 - *(_QWORD *)a2)))
                  {
LABEL_47:
                    --*((_DWORD *)a2 + 4);
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbol>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::Symbol::Verify((FlatbufferSymbols::Symbol *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::Symbol::Verify(FlatbufferSymbols::Symbol *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  const unsigned __int8 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  const unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int16 *v23;
  uint64_t v24;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (result = 0, v7 = *((_QWORD *)a2 + 1), v7 >= 9) && v7 - 8 >= (unint64_t)this + v5[2] - *(_QWORD *)a2)
      && (v6 < 7
       || (v8 = v5[3]) == 0
       || (result = 0, v9 = *((_QWORD *)a2 + 1), v9 >= 9) && v9 - 8 >= (unint64_t)this + v8 - *(_QWORD *)a2))
    {
      result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
      if (result)
      {
        v10 = (unsigned __int16 *)((char *)this - *(int *)this);
        if (*v10 >= 9u && (v11 = v10[4]) != 0)
          v12 = (const unsigned __int8 *)this + v11 + *(unsigned int *)((char *)this + v11);
        else
          v12 = 0;
        result = flatbuffers::Verifier::VerifyString(a2, v12);
        if (result)
        {
          result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            v13 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v13 >= 0xBu && (v14 = v13[5]) != 0)
              v15 = (const unsigned __int8 *)this + v14 + *(unsigned int *)((char *)this + v14);
            else
              v15 = 0;
            result = flatbuffers::Verifier::VerifyString(a2, v15);
            if (result)
            {
              result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                v16 = *(int *)this;
                v17 = -v16;
                v18 = (unsigned __int16 *)((char *)this - v16);
                if (*v18 >= 0xDu)
                {
                  v19 = v18[6];
                  if (v19)
                  {
                    result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19), 4uLL, 0);
                    if (!result)
                      return result;
                    v17 = -(uint64_t)*(int *)this;
                  }
                }
                v20 = (unsigned __int16 *)((char *)this + v17);
                if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
                  v22 = (_DWORD *)((char *)this + v21 + *(unsigned int *)((char *)this + v21));
                else
                  v22 = 0;
                result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>(a2, v22);
                if (result)
                {
                  result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    v23 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v23 < 0xFu
                      || (v24 = v23[7]) == 0
                      || (result = flatbuffers::Verifier::VerifyVectorOrString(a2, (const unsigned __int8 *)this + v24 + *(unsigned int *)((char *)this + v24), 1uLL, 0)))
                    {
                      --*((_DWORD *)a2 + 4);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>(flatbuffers::Verifier *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*a2)
    return 1;
  v4 = 0;
  v5 = a2 + 1;
  do
  {
    result = FlatbufferSymbols::SourceInfo::Verify((FlatbufferSymbols::SourceInfo *)((char *)v5 + *v5), a1);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::SourceInfo::Verify(FlatbufferSymbols::SourceInfo *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (v6 = v5[2]) != 0)
        v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      else
        v7 = 0;
      result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        v9 = *v8;
        if (v9 < 7)
          goto LABEL_28;
        if (!v8[3]
          || (result = 0, v10 = *((_QWORD *)a2 + 1), v10 >= 5)
          && v10 - 4 >= (unint64_t)this + v8[3] - *(_QWORD *)a2)
        {
          if (v9 < 9)
            goto LABEL_28;
          if (!v8[4]
            || (result = 0, v11 = *((_QWORD *)a2 + 1), v11 >= 5)
            && v11 - 4 >= (unint64_t)this + v8[4] - *(_QWORD *)a2)
          {
            if (v9 < 0xB
              || (!v8[5]
               || (result = 0, v12 = *((_QWORD *)a2 + 1), v12 >= 5)
               && v12 - 4 >= (unint64_t)this + v8[5] - *(_QWORD *)a2)
              && (v9 < 0xD
               || (!v8[6]
                || (result = 0, v13 = *((_QWORD *)a2 + 1), v13 >= 9)
                && v13 - 8 >= (unint64_t)this + v8[6] - *(_QWORD *)a2)
               && (v9 < 0xF
                || (v14 = v8[7]) == 0
                || (result = 0, v15 = *((_QWORD *)a2 + 1), v15 >= 5)
                && v15 - 4 >= (unint64_t)this + v14 - *(_QWORD *)a2)))
            {
LABEL_28:
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::SharedCache::Verify(FlatbufferSymbols::SharedCache *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  FlatbufferSymbols::DyldSharedCacheMetadata *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    if (*v5 < 5u
      || (v6 = v5[2]) == 0
      || (result = 0, v7 = *((_QWORD *)a2 + 1), v7 >= 2) && v7 - 1 >= (unint64_t)this + v6 - *(_QWORD *)a2)
    {
      result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
      if (result)
      {
        v8 = *(int *)this;
        v9 = -v8;
        v10 = (unsigned __int16 *)((char *)this - v8);
        v11 = *v10;
        if (v11 < 7)
        {
          if (v11 < 5)
          {
LABEL_17:
            v14 = (unsigned __int16 *)((char *)this + v9);
            if (*v14 < 9u
              || (v15 = v14[4]) == 0
              || (result = 0, v16 = *((_QWORD *)a2 + 1), v16 >= 9)
              && v16 - 8 >= (unint64_t)this + v15 - *(_QWORD *)a2)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
            return result;
          }
        }
        else if (v10[3])
        {
          v12 = (FlatbufferSymbols::SharedCache *)((char *)this + v10[3] + *(unsigned int *)((char *)this + v10[3]));
LABEL_12:
          v13 = v10[2];
          if (v13 && v12 && *((_BYTE *)this + v13) == 1)
          {
            result = FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v12, a2);
            if (!result)
              return result;
            v9 = -(uint64_t)*(int *)this;
          }
          goto LABEL_17;
        }
        v12 = 0;
        goto LABEL_12;
      }
    }
  }
  return result;
}

BOOL FlatbufferSymbols::StringEntry::Verify(FlatbufferSymbols::StringEntry *this, flatbuffers::Verifier *a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  const unsigned __int8 *v10;

  result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    if (*v5 < 5u
      || (v6 = v5[2]) == 0
      || (result = 0, v7 = *((_QWORD *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v6 - *(_QWORD *)a2)
    {
      result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
      if (result)
      {
        v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        if (*v8 >= 7u && (v9 = v8[3]) != 0)
          v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
        else
          v10 = 0;
        result = flatbuffers::Verifier::VerifyString(a2, v10);
        if (result)
        {
          --*((_DWORD *)a2 + 4);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t flatbuffers::ToStringVisitor::ToStringVisitor(uint64_t a1, __int128 *a2, char a3, __int128 *a4, char a5)
{
  __int128 v9;
  std::string *v10;
  __int128 v11;

  *(_QWORD *)a1 = &unk_1E5F6F760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_BYTE *)(a1 + 56) = a3;
  v10 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = a5;
  return a1;
}

void sub_1AF381AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

std::string *flatbuffers::ToStringVisitor::StartSequence(flatbuffers::ToStringVisitor *this)
{
  std::string *v2;
  const std::string::value_type *v3;
  char *v4;
  const std::string::value_type *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *result;

  v2 = (std::string *)((char *)this + 8);
  std::string::append((std::string *)((char *)this + 8), "{");
  v5 = (const std::string::value_type *)*((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v3 = v5;
  v6 = v4[23];
  if (v6 >= 0)
    v7 = v4;
  else
    v7 = v3;
  if (v6 >= 0)
    v8 = v4[23];
  else
    v8 = *((_QWORD *)v4 + 1);
  result = std::string::append(v2, v7, v8);
  ++*((_QWORD *)v4 + 7);
  return result;
}

std::string *flatbuffers::ToStringVisitor::EndSequence(std::string *this)
{
  std::string *v2;
  int v3;
  const std::string::value_type *size;
  std::string::size_type v5;

  v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  v3 = this[2].__r_.__value_.__s.__data_[7];
  if (v3 >= 0)
    size = &this[1].__r_.__value_.__s.__data_[8];
  else
    size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
  if (v3 >= 0)
    v5 = this[2].__r_.__value_.__s.__data_[7];
  else
    v5 = this[1].__r_.__value_.__r.__words[2];
  std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], size, v5);
  --this[3].__r_.__value_.__r.__words[2];
  flatbuffers::ToStringVisitor::append_indent(this);
  return std::string::append(v2, "}");
}

std::string *flatbuffers::ToStringVisitor::Field(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const std::string::value_type *a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;

  if (a8)
  {
    v9 = (uint64_t)this;
    if (a3)
    {
      std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], ",");
      v10 = *(char *)(v9 + 55);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)(v9 + 32);
      else
        v11 = *(const std::string::value_type **)(v9 + 32);
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v9 + 55);
      else
        v12 = *(_QWORD *)(v9 + 40);
      std::string::append((std::string *)(v9 + 8), v11, v12);
    }
    this = flatbuffers::ToStringVisitor::append_indent((std::string *)v9);
    if (a7)
    {
      if (*(_BYTE *)(v9 + 56))
        std::string::append((std::string *)(v9 + 8), "\"");
      std::string::append((std::string *)(v9 + 8), a7);
      if (*(_BYTE *)(v9 + 56))
        std::string::append((std::string *)(v9 + 8), "\"");
      return std::string::append((std::string *)(v9 + 8), ": ");
    }
  }
  return this;
}

std::string *flatbuffers::ToStringVisitor::Bool(flatbuffers::ToStringVisitor *this, int a2)
{
  const std::string::value_type *v2;

  if (a2)
    v2 = "true";
  else
    v2 = "false";
  return std::string::append((std::string *)((char *)this + 8), v2);
}

void flatbuffers::ToStringVisitor::Long(flatbuffers::ToStringVisitor *this)
{
  void **v2;
  std::string::size_type v3;
  void *__p[2];
  unsigned __int8 v5;

  flatbuffers::NumToString<long long>();
  if ((v5 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v5 & 0x80u) == 0)
    v3 = v5;
  else
    v3 = (std::string::size_type)__p[1];
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)v2, v3);
  if ((char)v5 < 0)
    operator delete(__p[0]);
}

void sub_1AF381D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::ULong(flatbuffers::ToStringVisitor *this)
{
  void **v2;
  std::string::size_type v3;
  void *__p[2];
  unsigned __int8 v5;

  flatbuffers::NumToString<unsigned long long>();
  if ((v5 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v5 & 0x80u) == 0)
    v3 = v5;
  else
    v3 = (std::string::size_type)__p[1];
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)v2, v3);
  if ((char)v5 < 0)
    operator delete(__p[0]);
}

void sub_1AF381DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Float(flatbuffers::ToStringVisitor *this, float a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  flatbuffers::FloatToString<float>(6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AF381E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Double(flatbuffers::ToStringVisitor *this, double a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  flatbuffers::FloatToString<double>(12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AF381EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::ToStringVisitor::String(uint64_t a1, unsigned int *a2)
{
  return flatbuffers::EscapeString((uint64_t)(a2 + 1), *a2, (std::string *)(a1 + 8), 1, 0);
}

std::string *flatbuffers::ToStringVisitor::Unknown(flatbuffers::ToStringVisitor *this, const unsigned __int8 *a2)
{
  return std::string::append((std::string *)((char *)this + 8), "(?)");
}

std::string *flatbuffers::ToStringVisitor::StartVector(std::string *this)
{
  std::string *v2;
  int v3;
  const std::string::value_type *size;
  std::string::size_type v5;

  v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], "[");
  if (!this[4].__r_.__value_.__s.__data_[0])
    return std::string::append(v2, " ");
  v3 = this[2].__r_.__value_.__s.__data_[7];
  if (v3 >= 0)
    size = &this[1].__r_.__value_.__s.__data_[8];
  else
    size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
  if (v3 >= 0)
    v5 = this[2].__r_.__value_.__s.__data_[7];
  else
    v5 = this[1].__r_.__value_.__r.__words[2];
  std::string::append(v2, size, v5);
  ++this[3].__r_.__value_.__r.__words[2];
  return flatbuffers::ToStringVisitor::append_indent(this);
}

std::string *flatbuffers::ToStringVisitor::EndVector(std::string *this)
{
  std::string *v2;
  int v3;
  const std::string::value_type *size;
  std::string::size_type v5;

  if (this[4].__r_.__value_.__s.__data_[0])
  {
    v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
    v3 = this[2].__r_.__value_.__s.__data_[7];
    if (v3 >= 0)
      size = &this[1].__r_.__value_.__s.__data_[8];
    else
      size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
    if (v3 >= 0)
      v5 = this[2].__r_.__value_.__s.__data_[7];
    else
      v5 = this[1].__r_.__value_.__r.__words[2];
    std::string::append(v2, size, v5);
    --this[3].__r_.__value_.__r.__words[2];
    flatbuffers::ToStringVisitor::append_indent(this);
  }
  else
  {
    std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], " ");
  }
  return std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], "]");
}

std::string *flatbuffers::ToStringVisitor::Element(std::string *result, uint64_t a2)
{
  std::string *v2;
  std::string *v3;
  int v4;
  const std::string::value_type *size;
  std::string::size_type v6;

  if (a2)
  {
    v2 = result;
    v3 = (std::string *)&result->__r_.__value_.__r.__words[1];
    std::string::append((std::string *)&result->__r_.__value_.__r.__words[1], ",");
    if (v2[4].__r_.__value_.__s.__data_[0])
    {
      v4 = v2[2].__r_.__value_.__s.__data_[7];
      if (v4 >= 0)
        size = &v2[1].__r_.__value_.__s.__data_[8];
      else
        size = (const std::string::value_type *)v2[1].__r_.__value_.__l.__size_;
      if (v4 >= 0)
        v6 = v2[2].__r_.__value_.__s.__data_[7];
      else
        v6 = v2[1].__r_.__value_.__r.__words[2];
      std::string::append(v3, size, v6);
      return flatbuffers::ToStringVisitor::append_indent(v2);
    }
    else
    {
      return std::string::append(v3, " ");
    }
  }
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

std::string *flatbuffers::ToStringVisitor::append_indent(std::string *this)
{
  uint64_t v1;
  unint64_t v2;
  const std::string::value_type *v3;
  std::string *v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;

  if (this[3].__r_.__value_.__r.__words[2])
  {
    v1 = (uint64_t)this;
    v2 = 0;
    v3 = &this[2].__r_.__value_.__s.__data_[16];
    v4 = (std::string *)&this->__r_.__value_.__r.__words[1];
    do
    {
      v5 = *(char *)(v1 + 87);
      if (v5 >= 0)
        v6 = v3;
      else
        v6 = *(const std::string::value_type **)(v1 + 64);
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(v1 + 87);
      else
        v7 = *(_QWORD *)(v1 + 72);
      this = std::string::append(v4, v6, v7);
      ++v2;
    }
    while (v2 < *(_QWORD *)(v1 + 88));
  }
  return this;
}

void flatbuffers::ToStringVisitor::Named<unsigned char>(uint64_t a1, int a2, std::string::value_type *__s)
{
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  if (__s)
  {
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
  }
  else
  {
    flatbuffers::NumToString<int>();
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AF3822B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<int>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v4);
}

void sub_1AF382388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1AF3824A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1AF45D4A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF45D4A0](a1 + 128);
  return a1;
}

void flatbuffers::ToStringVisitor::Named<signed char>(uint64_t a1, int a2, std::string::value_type *__s)
{
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  if (__s)
  {
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
  }
  else
  {
    flatbuffers::NumToString<int>();
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AF382614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Named<short>(uint64_t a1, int a2, std::string::value_type *__s)
{
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  if (__s)
  {
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
  }
  else
  {
    flatbuffers::NumToString<short>();
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AF3826F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<short>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v4);
}

void sub_1AF3827C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void flatbuffers::ToStringVisitor::Named<unsigned short>(uint64_t a1, int a2, std::string::value_type *__s)
{
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  if (__s)
  {
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
  }
  else
  {
    flatbuffers::NumToString<unsigned short>();
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AF38289C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<unsigned short>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v4);
}

void sub_1AF38296C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void flatbuffers::ToStringVisitor::Named<int>(uint64_t a1, int a2, std::string::value_type *__s)
{
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  if (__s)
  {
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
  }
  else
  {
    flatbuffers::NumToString<int>();
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AF382A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Named<unsigned int>(uint64_t a1, int a2, std::string::value_type *__s)
{
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v8;

  if (__s)
  {
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56))
      std::string::append((std::string *)(a1 + 8), "\"");
  }
  else
  {
    flatbuffers::NumToString<unsigned int>();
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AF382B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<unsigned int>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v4);
}

void sub_1AF382BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::NumToString<long long>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v4);
}

void sub_1AF382CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::NumToString<unsigned long long>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v4);
}

void sub_1AF382D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FloatToString<float>@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string::size_type size;
  std::string *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v4 = v13[0];
  *(_DWORD *)((char *)&v13[1] + *(_QWORD *)(v13[0] - 24)) = *(_DWORD *)((_BYTE *)&v13[1] + *(_QWORD *)(v13[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v13[2] + *(_QWORD *)(v4 - 24)) = a1;
  std::ostream::operator<<();
  std::stringbuf::str();
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v6 = a2;
  else
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  while (size)
  {
    v7 = v6->__r_.__value_.__s.__data_[--size];
    if (v7 != 48)
    {
      if (size != -1)
      {
        v8 = v6->__r_.__value_.__s.__data_[size] == 46;
        v9 = 1;
        if (v8)
          v9 = 2;
        std::string::resize(a2, v9 + size, 0);
      }
      break;
    }
  }
  v12[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v15);
}

void sub_1AF382EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FloatToString<double>@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string::size_type size;
  std::string *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v4 = v13[0];
  *(_DWORD *)((char *)&v13[1] + *(_QWORD *)(v13[0] - 24)) = *(_DWORD *)((_BYTE *)&v13[1] + *(_QWORD *)(v13[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v13[2] + *(_QWORD *)(v4 - 24)) = a1;
  std::ostream::operator<<();
  std::stringbuf::str();
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v6 = a2;
  else
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  while (size)
  {
    v7 = v6->__r_.__value_.__s.__data_[--size];
    if (v7 != 48)
    {
      if (size != -1)
      {
        v8 = v6->__r_.__value_.__s.__data_[size] == 46;
        v9 = 1;
        if (v8)
          v9 = 2;
        std::string::resize(a2, v9 + size, 0);
      }
      break;
    }
  }
  v12[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v15);
}

void sub_1AF38304C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::EscapeString(uint64_t a1, unint64_t a2, std::string *this, int a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  const std::string::value_type *v12;
  unint64_t v13;
  std::string *v14;
  const std::string::value_type *v15;
  const char *v16;
  const char *v17;
  unsigned int v18;
  flatbuffers *v19;
  unsigned int v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  char *v24;
  char v25;
  uint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  const std::string::value_type *p_p;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  void *__p;
  std::string::size_type v37;
  unsigned __int8 v38;

  std::string::append(this, "\"");
  if (!a2)
  {
LABEL_78:
    std::string::append(this, "\"");
    return 1;
  }
  v8 = 0;
  v9 = 0;
  v10 = "\\b";
  v11 = "\\f";
  while (2)
  {
    v12 = (const std::string::value_type *)(a1 + v8);
    v13 = *(char *)(a1 + v8);
    switch(*(_BYTE *)(a1 + v8))
    {
      case 8:
        v14 = this;
        v15 = v10;
        goto LABEL_15;
      case 9:
        v14 = this;
        v15 = "\\t";
        goto LABEL_15;
      case 0xA:
        v14 = this;
        v15 = "\\n";
        goto LABEL_15;
      case 0xB:
        goto LABEL_8;
      case 0xC:
        v14 = this;
        v15 = v11;
        goto LABEL_15;
      case 0xD:
        v14 = this;
        v15 = "\\r";
        goto LABEL_15;
      default:
        if ((_DWORD)v13 == 34)
        {
          v14 = this;
          v15 = "\\\"";
          goto LABEL_15;
        }
        if ((_DWORD)v13 == 92)
        {
          v14 = this;
          v15 = "\\\\";
LABEL_15:
          std::string::append(v14, v15);
          goto LABEL_16;
        }
LABEL_8:
        if ((v13 - 32) <= 0x5E)
        {
          std::string::push_back(this, *(_BYTE *)(a1 + v8));
LABEL_16:
          v8 = ++v9;
          if (v9 >= a2)
            goto LABEL_78;
          continue;
        }
        v16 = v11;
        v17 = v10;
        v18 = 0;
        v19 = (flatbuffers *)*(unsigned __int8 *)(a1 + v8);
        v20 = 128;
        v21 = -1;
        while ((v20 & v19) != 0)
        {
          ++v18;
          v20 >>= 1;
          ++v21;
          if (v18 == 6)
            goto LABEL_23;
        }
        if ((((_DWORD)v19 << v18) & 0x80) == 0)
        {
          if (v18)
          {
            if (v18 == 1 || v18 > 4)
              goto LABEL_23;
            v24 = (char *)(v12 + 1);
            LODWORD(v13) = v13 & ~(-1 << (7 - v18));
            do
            {
              v25 = *v24;
              if ((*v24 & 0xC0) != 0x80)
                goto LABEL_23;
              ++v24;
              v13 = v25 & 0x3Fu | ((_DWORD)v13 << 6);
              --v21;
            }
            while (v21);
            v26 = a1 + 2 + v8 + v18 - 2;
            if (v13 >> 11 == 27)
              goto LABEL_23;
            if (v18 == 4)
            {
              if ((v13 - 1114112) < 0xFFF00000)
                goto LABEL_23;
            }
            else if (v18 == 3)
            {
              if ((v13 - 0x10000) < 0xFFFF0800)
                goto LABEL_23;
            }
            else if ((v13 - 2048) < 0xFFFFF880)
            {
              goto LABEL_23;
            }
          }
          else
          {
            v26 = (uint64_t)(v12 + 1);
            if ((v13 & 0x80000000) != 0)
              goto LABEL_23;
          }
          if (a5)
          {
            std::string::append(this, v12, v26 - (v8 + a1));
            v11 = v16;
          }
          else
          {
            v11 = v16;
            if (WORD1(v13))
            {
              if (WORD1(v13) > 0x10u)
                goto LABEL_73;
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)(((v13 - 0x10000) >> 10) + 55296), 4);
              if ((v38 & 0x80u) == 0)
                p_p = (const std::string::value_type *)&__p;
              else
                p_p = (const std::string::value_type *)__p;
              if ((v38 & 0x80u) == 0)
                v30 = v38;
              else
                v30 = v37;
              std::string::append(this, p_p, v30);
              if ((char)v38 < 0)
                operator delete(__p);
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)(v13 & 0x3FF | 0xDC00), 4);
              v31 = (v38 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
              v32 = (v38 & 0x80u) == 0 ? v38 : v37;
              std::string::append(this, v31, v32);
              v11 = v16;
              if (((char)v38 & 0x80000000) == 0)
                goto LABEL_73;
            }
            else
            {
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)v13, 4);
              if ((v38 & 0x80u) == 0)
                v27 = (const std::string::value_type *)&__p;
              else
                v27 = (const std::string::value_type *)__p;
              if ((v38 & 0x80u) == 0)
                v28 = v38;
              else
                v28 = v37;
              std::string::append(this, v27, v28);
              if (((char)v38 & 0x80000000) == 0)
                goto LABEL_73;
            }
            operator delete(__p);
          }
LABEL_73:
          v9 = v26 + ~(_DWORD)a1;
          v10 = v17;
          goto LABEL_16;
        }
LABEL_23:
        if (a4)
        {
          std::string::append(this, "\\x");
          flatbuffers::IntToStringHex(v19, 2);
          if ((v38 & 0x80u) == 0)
            v22 = (const std::string::value_type *)&__p;
          else
            v22 = (const std::string::value_type *)__p;
          if ((v38 & 0x80u) == 0)
            v23 = v38;
          else
            v23 = v37;
          std::string::append(this, v22, v23);
          v10 = v17;
          v11 = v16;
          if ((char)v38 < 0)
            operator delete(__p);
          goto LABEL_16;
        }
        return 0;
    }
  }
}

void sub_1AF3834D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::IntToStringHex(flatbuffers *this, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  if ((this & 0x80000000) != 0)
    flatbuffers::IntToStringHex();
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  *(_QWORD *)((char *)&v9[3] + *(_QWORD *)(v9[0] - 24)) = a2;
  v7 = 48;
  v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, &v7);
  v4 = *v3;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v4 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<();
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF45D4A0](&v11);
}

void sub_1AF383620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1AF3836C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::IterateObject(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v5 = (**(uint64_t (***)(uint64_t))a3)(a3);
  if (*(_QWORD *)(a2 + 8))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v23 = 0;
    do
    {
      v9 = *(__int16 *)(*(_QWORD *)(a2 + 16) + 2 * v8);
      if (v9 < 0)
        v10 = 0;
      else
        v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 24)
                                                           + (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 2 * v8) >> 2) & 0x3FF8)))(v5);
      v11 = *(_QWORD *)(a2 + 48);
      if (v11)
        v12 = *(_QWORD *)(v11 + 8 * v8);
      else
        v12 = 0;
      if (*(_DWORD *)a2)
      {
        v13 = (int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v8));
      }
      else
      {
        v14 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v14 > ((2 * (_WORD)v8 + 4) & 0xFFFEu)
          && *(unsigned __int16 *)((char *)v14 + (unsigned __int16)(2 * v8 + 4)))
        {
          v13 = (int *)((char *)a1 + *(unsigned __int16 *)((char *)v14 + (unsigned __int16)(2 * v8 + 4)));
        }
        else
        {
          v13 = 0;
        }
      }
      v15 = v9 & 0xF;
      v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD *, uint64_t, int *))(*(_QWORD *)a3 + 16))(a3, v8, v7, v15, ((unsigned __int16)v9 >> 4) & 1, v10, v12, v13);
      if (v13)
      {
        ++v7;
        if ((v9 & 0x10) != 0)
        {
          v24 = v7;
          if (*(_DWORD *)a2)
          {
            v16 = *(__int16 *)(*(_QWORD *)(a2 + 32) + 2 * v23++);
            v17 = v13;
          }
          else
          {
            v13 = (int *)((char *)v13 + *v13);
            v17 = v13 + 1;
            v16 = *v13;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)a3 + 136))(a3);
          if (v16)
          {
            v18 = 0;
            while (2)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, int *))(*(_QWORD *)a3 + 152))(a3, v18, v15, v10, v17);
              flatbuffers::IterateValue(v15, v17, v10, v6, v18, a3);
              v19 = 1;
              switch((int)v15)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                  goto LABEL_27;
                case 4:
                case 5:
                  v19 = 2;
                  goto LABEL_27;
                case 6:
                case 7:
                case 10:
                case 12:
                  goto LABEL_24;
                case 8:
                case 9:
                case 11:
                  v19 = 8;
                  goto LABEL_27;
                case 13:
                  v20 = *(_DWORD *)v10;
                  if (*(_DWORD *)v10)
                    v21 = v20 == 2;
                  else
                    v21 = 1;
                  if (v21)
                  {
LABEL_24:
                    v19 = 4;
                  }
                  else
                  {
                    if (v20 != 1)
                      flatbuffers::IterateObject();
                    v19 = *(_QWORD *)(v10[5] + 8 * v10[1]);
                  }
LABEL_27:
                  v17 = (int *)((char *)v17 + v19);
                  if (v16 == ++v18)
                    break;
                  continue;
                default:
                  flatbuffers::IterateObject();
              }
              break;
            }
          }
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 144))(a3);
          v7 = v24;
        }
        else
        {
          v5 = flatbuffers::IterateValue(v9 & 0xF, v13, v10, v6, 0xFFFFFFFF, a3);
        }
      }
      ++v8;
      v6 = (unsigned int *)v13;
    }
    while (v8 < *(_QWORD *)(a2 + 8));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
}

uint64_t flatbuffers::IterateValue(uint64_t result, int *a2, _QWORD *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t, int *);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  switch((int)result)
  {
    case 0:
      v7 = *(unsigned __int8 *)a2;
      v8 = flatbuffers::EnumName<unsigned char>(*(unsigned __int8 *)a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 24);
      return v9(a6, v7, v8);
    case 1:
      return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a6 + 32))(a6, *(_BYTE *)a2 != 0);
    case 2:
      v7 = *(char *)a2;
      v8 = flatbuffers::EnumName<signed char>(*(char *)a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 40);
      return v9(a6, v7, v8);
    case 3:
      v7 = *(unsigned __int8 *)a2;
      v8 = flatbuffers::EnumName<unsigned char>(*(unsigned __int8 *)a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 48);
      return v9(a6, v7, v8);
    case 4:
      v7 = *(__int16 *)a2;
      v8 = flatbuffers::EnumName<signed char>(*(__int16 *)a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 56);
      return v9(a6, v7, v8);
    case 5:
      v7 = *(unsigned __int16 *)a2;
      v8 = flatbuffers::EnumName<unsigned char>(*(unsigned __int16 *)a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 64);
      return v9(a6, v7, v8);
    case 6:
      v7 = *a2;
      v8 = flatbuffers::EnumName<signed char>(*a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 72);
      return v9(a6, v7, v8);
    case 7:
      v7 = *a2;
      v8 = flatbuffers::EnumName<unsigned char>(*a2, a3);
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 80);
      return v9(a6, v7, v8);
    case 8:
      a2 = *(int **)a2;
      v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a6 + 88);
      goto LABEL_19;
    case 9:
      a2 = *(int **)a2;
      v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a6 + 96);
      goto LABEL_19;
    case 10:
      return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a6 + 104))(a6, *(float *)a2);
    case 11:
      return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a6 + 112))(a6, *(double *)a2);
    case 12:
      a2 = (int *)((char *)a2 + *a2);
      v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a6 + 120);
      goto LABEL_19;
    case 13:
      switch(*(_DWORD *)a3)
      {
        case 0:
          v11 = (int *)((char *)a2 + *a2);
          goto LABEL_22;
        case 1:
          v11 = a2;
LABEL_22:
          v13 = (uint64_t)a3;
          return flatbuffers::IterateObject(v11, v13, a6);
        case 2:
          if (!a4)
            flatbuffers::IterateValue();
          if ((a5 & 0x80000000) == 0)
          {
            if (*a4 <= a5)
              flatbuffers::IterateValue();
            a4 = (unsigned int *)((char *)a4 + a5 + 4);
          }
          v14 = (int *)((char *)a2 + *a2);
          v15 = a3[5];
          v16 = a3[1];
          if (v15)
          {
            if (!v16)
              goto LABEL_40;
            v17 = 0;
            while (*(_QWORD *)(v15 + 8 * v17) != *(unsigned __int8 *)a4)
            {
              if (v16 == ++v17)
                goto LABEL_40;
            }
            if (v17 < 0)
              goto LABEL_40;
          }
          else
          {
            v17 = *(unsigned __int8 *)a4;
          }
          if (v17 >= (int)v16)
            goto LABEL_40;
          v18 = *(_WORD *)(a3[2] + 2 * v17);
          if ((v18 & 0xF) == 0xC)
          {
            v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a6 + 120);
            goto LABEL_41;
          }
          if ((v18 & 0xF) != 0xD)
          {
LABEL_40:
            v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a6 + 128);
LABEL_41:
            v12 = a6;
            a2 = (int *)((char *)a2 + *a2);
            return v10(v12, a2);
          }
          v13 = (*(uint64_t (**)(void))(a3[3] + 8 * (v18 >> 5)))();
          v11 = v14;
          return flatbuffers::IterateObject(v11, v13, a6);
        case 3:
          flatbuffers::IterateValue();
        default:
          return result;
      }
    default:
      v10 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a6 + 128);
LABEL_19:
      v12 = a6;
      return v10(v12, a2);
  }
}

uint64_t flatbuffers::EnumName<unsigned char>(unsigned int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2[6];
    if (v2)
    {
      v3 = a2[5];
      v4 = a2[1];
      if (v3)
      {
        if (!v4)
          return 0;
        v5 = 0;
        while (*(_QWORD *)(v3 + 8 * v5) != a1)
        {
          if (v4 == ++v5)
            return 0;
        }
        if (v5 < 0)
          return 0;
      }
      else
      {
        v5 = a1;
      }
      if (v5 < v4)
        return *(_QWORD *)(v2 + 8 * v5);
    }
  }
  return 0;
}

uint64_t flatbuffers::EnumName<signed char>(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 0;
  v2 = a2[6];
  if (!v2)
    return 0;
  v3 = a2[5];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = 0;
      while (*(_QWORD *)(v3 + 8 * v5) != a1)
      {
        if (v4 == ++v5)
          return 0;
      }
      goto LABEL_11;
    }
    return 0;
  }
  v5 = a1;
LABEL_11:
  result = 0;
  if ((v5 & 0x8000000000000000) == 0 && v5 < v4)
    return *(_QWORD *)(v2 + 8 * v5);
  return result;
}

void *FlatbufferSymbols::SymbolicatorTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolicatorTypeTable(void)::tt;
}

void *FlatbufferSymbols::StringEntryTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::StringEntryTypeTable(void)::tt;
}

void *FlatbufferSymbols::AddressSpaceMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::AddressSpaceMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolOwnerTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolOwnerTypeTable(void)::tt;
}

void *FlatbufferSymbols::SharedCacheTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SharedCacheTypeTable(void)::tt;
}

void *FlatbufferSymbols::ProcessMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::ProcessMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::MachoMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::MachoMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::DyldSharedCacheMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::DyldSharedCacheMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::CPUArchitectureTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::CPUArchitectureTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolOwnerMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolOwnerMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::SegmentTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SegmentTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolTypeTable(void)::tt;
}

void *FlatbufferSymbols::SourceInfoTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SourceInfoTypeTable(void)::tt;
}

void *FlatbufferSymbols::SharedCacheMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SharedCacheMetadataTypeTable(void)::tt;
}

uint64_t __Block_byref_object_copy__299(uint64_t a1, uint64_t a2)
{
  return flatbuffers::FlatBufferBuilder::FlatBufferBuilder(a1 + 48, (flatbuffers::FlatBufferBuilder *)(a2 + 48));
}

void __Block_byref_object_dispose__300(uint64_t a1)
{
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__302(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t ktrace_address_space_iterate_symbol_owners(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!result)
    ktrace_remotetime_update_params_cold_1();
  v3 = *(uint64_t **)(a2 + 16);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    v7 = result;
    do
    {
      switch(*(_DWORD *)(v4 + 16))
      {
        case 1:
        case 2:
        case 5:
          v13 = 0;
          v8 = &v13;
          goto LABEL_7;
        case 3:
          v15 = 0;
          v8 = &v15;
LABEL_7:
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, v8);
          break;
        case 4:
          v9 = *(_QWORD *)(v7 + 248);
          if (v9)
          {
            v10 = *(uint64_t **)(v9 + 16);
            v11 = *v10;
            v12 = v10[1];
            while (v11 != v12)
            {
              v14 = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v11, &v14);
              v11 += 96;
            }
          }
          break;
        default:
          ktrace_address_space_deep_iterate_symbol_owners();
      }
      v4 += 96;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t ___ZL17ktrace_dumpbufferP14ktrace_sessionP15ktrace_uuid_mapRNSt3__16vectorIP20ktrace_address_spaceNS3_9allocatorIS6_EEEEy_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  flatbuffers::FlatBufferBuilder *v4;
  char *v5;

  if ((*(_BYTE *)(a2 + 88) & 2) != 0)
  {
    v2 = result;
    result = *(_QWORD *)a2;
    v3 = *(_QWORD *)(a2 + 8);
    if (result | v3)
    {
      v4 = (flatbuffers::FlatBufferBuilder *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 48);
      v5 = uuid_string(result, v3);
      result = flatbuffers::FlatBufferBuilder::CreateString(v4, v5, 0x24uLL);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 48) = result;
    }
  }
  return result;
}

uint64_t ktrace_address_space_buildbuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, flatbuffers::FlatBufferBuilder *this, uint64_t a7, uint64_t a8)
{
  int String;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD v28[11];
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t (*v34)();
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __n128 (*v40)(__n128 *, __n128 *);
  void (*v41)(uint64_t);
  const char *v42;
  void *__p;
  void *v44;
  uint64_t v45;

  String = flatbuffers::FlatBufferBuilder::CreateString(this, "__TEXT", 6uLL);
  v37 = 0;
  v38 = &v37;
  v39 = 0x4812000000;
  v40 = __Block_byref_object_copy__317;
  v41 = __Block_byref_object_dispose__318;
  v42 = "";
  __p = 0;
  v44 = 0;
  v45 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3812000000;
  v33 = __Block_byref_object_copy__320;
  v34 = __Block_byref_object_dispose__321;
  v35 = "";
  v17 = ktrace_address_space_deep_iterate_symbol_owners;
  v36 = 0;
  if ((a8 & 1) != 0)
    v17 = ktrace_address_space_iterate_symbol_owners;
  v18 = *(_QWORD *)(a2 + 80);
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke;
  v28[3] = &unk_1E5F719D0;
  v28[6] = a2;
  v28[7] = this;
  v28[8] = a8;
  v28[9] = a7;
  v28[10] = a1;
  v29 = String;
  v28[4] = &v30;
  v28[5] = &v37;
  v17(v18, a3, (uint64_t)v28);
  v19 = v38[7] - v38[6];
  if (v19)
    v20 = (void *)v38[6];
  else
    v20 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>> const&)::t;
  v21 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(this, (uint64_t)v20, v19 >> 2);
  if (*((_DWORD *)v31 + 12))
    v22 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(this, (uint64_t)(v31 + 6), 1);
  else
    v22 = 0;
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_BYTE *)this + 70) = 1;
  v23 = *((_DWORD *)this + 8);
  v24 = *((_DWORD *)this + 12);
  v25 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((unint64_t)this, 4, a4, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 6, a5);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 8, v21);
  if (v22)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 10, v22);
  v26 = flatbuffers::FlatBufferBuilder::EndTable(this, v23 - v24 + v25);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v37, 8);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  return v26;
}

void sub_1AF38419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t callback_deallocate_buffer(uint64_t result, void *a2)
{
  if (result)
    JUMPOUT(0x1AF45D4B8);
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::FlatBufferBuilder(uint64_t a1, flatbuffers::FlatBufferBuilder *a2)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1AF3E9BF0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 80) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  flatbuffers::FlatBufferBuilder::Swap((flatbuffers::FlatBufferBuilder *)a1, a2);
  return a1;
}

void sub_1AF384250(_Unwind_Exception *a1)
{
  flatbuffers::vector_downward *v1;

  flatbuffers::vector_downward::~vector_downward(v1);
  _Unwind_Resume(a1);
}

uint64_t *flatbuffers::FlatBufferBuilder::Swap(flatbuffers::FlatBufferBuilder *this, flatbuffers::FlatBufferBuilder *a2)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = flatbuffers::vector_downward::swap((uint64_t *)this, a2);
  v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LOWORD(v5) = *((_WORD *)this + 34);
  *((_WORD *)this + 34) = *((_WORD *)a2 + 34);
  *((_WORD *)a2 + 34) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 70);
  *((_BYTE *)this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 71);
  *((_BYTE *)this + 71) = *((_BYTE *)a2 + 71);
  *((_BYTE *)a2 + 71) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 81);
  *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 81) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  return result;
}

uint64_t *flatbuffers::vector_downward::swap(uint64_t *this, flatbuffers::vector_downward *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  LOBYTE(v2) = *((_BYTE *)this + 8);
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v2;
  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[4];
  v6 = this[5];
  v7 = *((_QWORD *)a2 + 5);
  this[4] = *((_QWORD *)a2 + 4);
  this[5] = v7;
  *((_QWORD *)a2 + 4) = v5;
  *((_QWORD *)a2 + 5) = v6;
  v8 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  return this;
}

__n128 __Block_byref_object_copy__317(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__318(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__320(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke(uint64_t a1, uint64_t a2, optional_uint64 *a3)
{
  UUIDContext *uuid;
  uint64_t v7;
  symbolication_context *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  flatbuffers::FlatBufferBuilder *v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  size_t v34;
  unsigned int String;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  int v61;
  unint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  int v73;
  flatbuffers::FlatBufferBuilder *v74;
  char *v75;
  unsigned int v76;
  const __CFString *v77;
  flatbuffers::FlatBufferBuilder *v78;
  char *v79;
  size_t v80;
  int v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  unint64_t v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  _QWORD *v96;
  int v97;
  int v98;
  unint64_t v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  fsid v108;
  fsobj_id v109;
  const __CFDictionary *v110;
  const __CFString *Value;
  const __CFString *v112;
  CFTypeID v113;
  flatbuffers::FlatBufferBuilder *v114;
  char *v115;
  size_t v116;
  char *v117;
  char *v118;
  int v119;
  void (*v120)(_QWORD, _QWORD);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124[6])(_QWORD, _QWORD);
  __int128 v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t);
  uint64_t (*v128)();
  const char *v129;
  int v130;
  _QWORD v131[8];
  optional_uint64 *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  __n128 (*v136)(__n128 *, __n128 *);
  void (*v137)(uint64_t);
  const char *v138;
  void *__p;
  void *v140;
  uint64_t v141;

  v123 = MEMORY[0x1AF45DCBC]();
  uuid = (UUIDContext *)find_or_create_uuid(*(symbolication_context **)(a1 + 48), (SymbolOwner *)a2);
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)a3)
    v7 += optional_uint64::value(a3);
  v133 = 0;
  v134 = &v133;
  v135 = 0x4812000000;
  v136 = __Block_byref_object_copy__323;
  v137 = __Block_byref_object_dispose__324;
  v138 = "";
  __p = 0;
  v140 = 0;
  v141 = 0;
  switch(*(_DWORD *)(a2 + 16))
  {
    case 1:
      if (ktrace_find_base_address(*(symbolication_context **)(a1 + 48), uuid))
      {
        v131[0] = MEMORY[0x1E0C809B0];
        v131[1] = 3221225472;
        v131[2] = ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_326;
        v131[3] = &unk_1E5F719A8;
        v8 = *(symbolication_context **)(a1 + 48);
        v9 = *(_QWORD *)(a1 + 56);
        v131[6] = uuid;
        v131[7] = a2;
        v131[4] = &v133;
        v131[5] = v9;
        if (ktrace_iterate_segments(v8, uuid, (uint64_t)v131))
          goto LABEL_73;
      }
      v10 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v10);
      *(_BYTE *)(v10 + 70) = 1;
      v11 = *(_DWORD *)(v10 + 32);
      v12 = *(_DWORD *)(v10 + 48);
      v13 = *(_DWORD *)(v10 + 40);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 4, *(_DWORD *)(a1 + 88));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 6, v7, -1);
      if (*(_QWORD *)(a2 + 56))
      {
        v14 = optional_uint64::value((optional_uint64 *)(a2 + 56));
      }
      else
      {
        ktrace_find_text_size(*(symbolication_context **)(a1 + 48), uuid);
        if ((*((_WORD *)uuid + 80) & 8) == 0)
          goto LABEL_48;
        v14 = *((_QWORD *)uuid + 7);
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 8, v14, 0);
LABEL_48:
      v61 = v11 - v12 + v13;
      v24 = v134;
      v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v61);
      v62 = v24[8];
      v27 = (char *)v24[7];
      if ((unint64_t)v27 < v62)
        goto LABEL_49;
      v28 = (char *)v24[6];
      v64 = (v27 - v28) >> 2;
      if ((unint64_t)(v64 + 1) >> 62)
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      v65 = v62 - (_QWORD)v28;
      v66 = (uint64_t)(v62 - (_QWORD)v28) >> 1;
      if (v66 <= v64 + 1)
        v66 = v64 + 1;
      if (v65 >= 0x7FFFFFFFFFFFFFFCLL)
        v67 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
      {
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v24 + 8), v67);
        v28 = (char *)v24[6];
        v27 = (char *)v24[7];
      }
      else
      {
        v68 = 0;
      }
      v69 = &v68[4 * v64];
      v70 = &v68[4 * v67];
      *(_DWORD *)v69 = v25;
      v63 = v69 + 4;
      while (v27 != v28)
      {
        v73 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v69 - 1) = v73;
        v69 -= 4;
      }
      goto LABEL_70;
    case 2:
      v34 = strlen((const char *)(a2 + 24));
      String = flatbuffers::FlatBufferBuilder::CreateString(*(flatbuffers::FlatBufferBuilder **)(a1 + 56), (const char *)(a2 + 24), v34);
      v36 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v36);
      *(_BYTE *)(v36 + 70) = 1;
      v37 = *(_DWORD *)(v36 + 32);
      v38 = *(_DWORD *)(v36 + 48);
      v39 = *(_DWORD *)(v36 + 40);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v36, 4, String);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v36, 6, v7, -1);
      if (*(_QWORD *)(a2 + 56))
      {
        v40 = optional_uint64::value((optional_uint64 *)(a2 + 56));
LABEL_23:
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v36, 8, v40, 0);
        goto LABEL_36;
      }
      if (!strcmp((const char *)(a2 + 24), "__TEXT"))
      {
        ktrace_find_text_size(*(symbolication_context **)(a1 + 48), uuid);
        if ((*((_WORD *)uuid + 80) & 8) != 0)
        {
          v40 = *((_QWORD *)uuid + 7);
          goto LABEL_23;
        }
      }
LABEL_36:
      v24 = v134;
      v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v36, v37 - v38 + v39);
      v55 = v24[8];
      v27 = (char *)v24[7];
      if ((unint64_t)v27 < v55)
      {
LABEL_49:
        *(_DWORD *)v27 = v25;
        v63 = v27 + 4;
      }
      else
      {
        v28 = (char *)v24[6];
        v56 = (v27 - v28) >> 2;
        if ((unint64_t)(v56 + 1) >> 62)
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        v57 = v55 - (_QWORD)v28;
        v58 = (uint64_t)(v55 - (_QWORD)v28) >> 1;
        if (v58 <= v56 + 1)
          v58 = v56 + 1;
        if (v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v24 + 8), v59);
          v28 = (char *)v24[6];
          v27 = (char *)v24[7];
        }
        else
        {
          v60 = 0;
        }
        v69 = &v60[4 * v56];
        v70 = &v60[4 * v59];
        *(_DWORD *)v69 = v25;
        v63 = v69 + 4;
        while (v27 != v28)
        {
          v72 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v69 - 1) = v72;
          v69 -= 4;
        }
LABEL_70:
        v24[6] = (uint64_t)v69;
        v24[7] = (uint64_t)v63;
        v24[8] = (uint64_t)v70;
        if (v28)
          operator delete(v28);
      }
      v24[7] = (uint64_t)v63;
LABEL_73:
      *(_QWORD *)&v125 = 0;
      *((_QWORD *)&v125 + 1) = &v125;
      v126 = 0x3812000000;
      v127 = __Block_byref_object_copy__302;
      v128 = __Block_byref_object_dispose__303;
      v129 = "";
      v130 = 0;
      if (*(_OWORD *)a2 == 0)
      {
        v76 = 0;
      }
      else
      {
        v74 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        v75 = uuid_string(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        v76 = flatbuffers::FlatBufferBuilder::CreateString(v74, v75, 0x24uLL);
      }
      v77 = *(const __CFString **)(a2 + 80);
      if (v77)
      {
        v78 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        v79 = utf8(v77);
        v80 = strlen(v79);
        v81 = flatbuffers::FlatBufferBuilder::CreateString(v78, v79, v80);
LABEL_78:
        *(_DWORD *)(*((_QWORD *)&v125 + 1) + 48) = v81;
        goto LABEL_79;
      }
      v108 = (fsid)*((_QWORD *)uuid + 18);
      v109 = (fsobj_id)*((_QWORD *)uuid + 19);
      v110 = (const __CFDictionary *)lookup_inode(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 80) + 224), v108, v109);
      if (v110)
      {
        Value = (const __CFString *)CFDictionaryGetValue(v110, CFSTR("Path"));
        v112 = Value;
        if (Value)
        {
          v113 = CFGetTypeID(Value);
          if (v113 == CFStringGetTypeID())
          {
            v114 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
            v115 = utf8(v112);
            v116 = strlen(v115);
            v81 = flatbuffers::FlatBufferBuilder::CreateString(v114, v115, v116);
            goto LABEL_78;
          }
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
      }
      else
      {
        v120 = *(void (**)(_QWORD, _QWORD))(a1 + 56);
        v121 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80);
        v124[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
        v124[1] = (void (*)(_QWORD, _QWORD))3221225472;
        v124[2] = (void (*)(_QWORD, _QWORD))___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_2;
        v124[3] = (void (*)(_QWORD, _QWORD))&unk_1E5F70F38;
        v124[4] = (void (*)(_QWORD, _QWORD))&v125;
        v124[5] = v120;
        ktrace_uuid_map_iterate_associated_paths(v121, (__int128 *)a2, v124);
      }
LABEL_79:
      v82 = v134[7] - v134[6];
      if (v82)
        v83 = (void *)v134[6];
      else
        v83 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Segment>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Segment>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const&)::t;
      v84 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(*(flatbuffers::FlatBufferBuilder **)(a1 + 56), (uint64_t)v83, v82 >> 2);
      v85 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v85);
      *(_BYTE *)(v85 + 70) = 1;
      v86 = *(_DWORD *)(v85 + 32);
      v87 = *(_DWORD *)(v85 + 48);
      v88 = *(_DWORD *)(v85 + 40);
      if (v76)
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v85, 4, v76);
      v89 = *(_DWORD *)(*((_QWORD *)&v125 + 1) + 48);
      if (v89)
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v85, 6, v89);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v85, 8, *(_QWORD *)(a2 + 64), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v85, 10, *(_QWORD *)(a2 + 72), 0);
      v90 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v85, v86 - v87 + v88);
      v91 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v91);
      *(_BYTE *)(v91 + 70) = 1;
      v92 = *(_DWORD *)(v91 + 32);
      v93 = *(_DWORD *)(v91 + 48);
      v94 = *(_DWORD *)(v91 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v91, 4, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v91, 6, v90);
      v95 = *(_DWORD *)(a2 + 16);
      if (v95 == 5)
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v91, 10, v7, -1);
        v95 = *(_DWORD *)(a2 + 16);
      }
      if (v95 == 1)
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v91, 12, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v91, 8, v84);
      v96 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
      v97 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v91, v92 - v93 + v94);
      v98 = v97;
      v99 = v96[8];
      v100 = (char *)v96[7];
      if ((unint64_t)v100 >= v99)
      {
        v102 = (char *)v96[6];
        v103 = (v100 - v102) >> 2;
        if ((unint64_t)(v103 + 1) >> 62)
          std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
        v104 = v99 - (_QWORD)v102;
        v105 = (uint64_t)(v99 - (_QWORD)v102) >> 1;
        if (v105 <= v103 + 1)
          v105 = v103 + 1;
        if (v104 >= 0x7FFFFFFFFFFFFFFCLL)
          v106 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v106 = v105;
        if (v106)
        {
          v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v96 + 8), v106);
          v102 = (char *)v96[6];
          v100 = (char *)v96[7];
        }
        else
        {
          v107 = 0;
        }
        v117 = &v107[4 * v103];
        v118 = &v107[4 * v106];
        *(_DWORD *)v117 = v98;
        v101 = v117 + 4;
        if (v100 == v102)
        {
          v54 = (void *)v123;
        }
        else
        {
          v54 = (void *)v123;
          do
          {
            v119 = *((_DWORD *)v100 - 1);
            v100 -= 4;
            *((_DWORD *)v117 - 1) = v119;
            v117 -= 4;
          }
          while (v100 != v102);
        }
        v96[6] = v117;
        v96[7] = v101;
        v96[8] = v118;
        if (v102)
          operator delete(v102);
      }
      else
      {
        *(_DWORD *)v100 = v97;
        v101 = v100 + 4;
        v54 = (void *)v123;
      }
      v96[7] = v101;
      _Block_object_dispose(&v125, 8);
LABEL_113:
      _Block_object_dispose(&v133, 8);
      if (__p)
      {
        v140 = __p;
        operator delete(__p);
      }
      objc_autoreleasePoolPop(v54);
      return;
    case 3:
      v132 = 0;
      get_sc_and_slide(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 80), a2, (uint64_t *)a3, &v132);
      if (*(_OWORD *)a2 == 0)
      {
        v17 = 0;
      }
      else
      {
        v15 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        v16 = uuid_string(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        v17 = flatbuffers::FlatBufferBuilder::CreateString(v15, v16, 0x24uLL);
      }
      v41 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v41);
      *(_BYTE *)(v41 + 70) = 1;
      v42 = *(_DWORD *)(v41 + 32);
      v43 = *(_DWORD *)(v41 + 48);
      v44 = *(_DWORD *)(v41 + 40);
      v125 = *(_OWORD *)a2;
      if (v125 != 0)
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v41, 4, v17);
      v45 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v41, v42 - v43 + v44);
      v46 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v46);
      *(_BYTE *)(v46 + 70) = 1;
      v47 = *(_DWORD *)(v46 + 32);
      v48 = *(_DWORD *)(v46 + 48);
      v49 = *(_DWORD *)(v46 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v46, 4, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v46, 6, v45);
      if (*(_QWORD *)a3)
      {
        v50 = optional_uint64::value(a3);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v46, 8, v50, -1);
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v46, v47 - v48 + v49);
      if ((*(_BYTE *)(a1 + 64) & 1) != 0)
      {
        v51 = (int)v132;
        if (v132)
        {
          if (!std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>(*(_QWORD **)(a1 + 72), (_QWORD *)a2))
          {
            v52 = ktrace_address_space_buildbuffer(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), v51, 3, v45, *(flatbuffers::FlatBufferBuilder **)(a1 + 56));
            v53 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)&v125 = a2;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(v53, (_QWORD *)a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v125)+ 8) = v52;
          }
        }
      }
      v54 = (void *)v123;
      goto LABEL_113;
    case 5:
      v18 = *(_QWORD *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v18);
      *(_BYTE *)(v18 + 70) = 1;
      v19 = *(_DWORD *)(v18 + 32);
      v20 = *(_DWORD *)(v18 + 48);
      v21 = *(_DWORD *)(v18 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v18, 6, v7, -1);
      if (*(_QWORD *)(a2 + 56))
      {
        v22 = optional_uint64::value((optional_uint64 *)(a2 + 56));
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v18, 8, v22, 0);
      }
      v23 = v19 - v20 + v21;
      v24 = v134;
      v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v18, v23);
      v26 = v24[8];
      v27 = (char *)v24[7];
      if ((unint64_t)v27 < v26)
        goto LABEL_49;
      v28 = (char *)v24[6];
      v29 = (v27 - v28) >> 2;
      if ((unint64_t)(v29 + 1) >> 62)
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      v30 = v26 - (_QWORD)v28;
      v31 = (uint64_t)(v26 - (_QWORD)v28) >> 1;
      if (v31 <= v29 + 1)
        v31 = v29 + 1;
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v24 + 8), v32);
        v28 = (char *)v24[6];
        v27 = (char *)v24[7];
      }
      else
      {
        v33 = 0;
      }
      v69 = &v33[4 * v29];
      v70 = &v33[4 * v32];
      *(_DWORD *)v69 = v25;
      v63 = v69 + 4;
      while (v27 != v28)
      {
        v71 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v69 - 1) = v71;
        v69 -= 4;
      }
      goto LABEL_70;
    default:
      v122 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v122);
  }
}

void sub_1AF384E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  _Block_object_dispose(&a34, 8);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__323(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__324(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_326(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  size_t v8;
  unsigned int String;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;

  if (strcmp(__s1, "__LINKEDIT") && strcmp(__s1, "__PAGEZERO"))
  {
    v8 = strlen(__s1);
    String = flatbuffers::FlatBufferBuilder::CreateString(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), __s1, v8);
    v10 = *(_QWORD *)(a1 + 40);
    flatbuffers::FlatBufferBuilder::NotNested(v10);
    *(_BYTE *)(v10 + 70) = 1;
    v11 = *(_DWORD *)(v10 + 32) - *(_DWORD *)(v10 + 48) + *(_DWORD *)(v10 + 40);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 4, String);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 6, a3 - *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48) + *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48), -1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 8, a4, 0);
    v12 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v11);
    v14 = v13;
    v15 = (char *)v12[7];
    v16 = v12[8];
    if ((unint64_t)v15 >= v16)
    {
      v18 = (char *)v12[6];
      v19 = (v15 - v18) >> 2;
      if ((unint64_t)(v19 + 1) >> 62)
        std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
      v20 = v16 - (_QWORD)v18;
      v21 = (uint64_t)(v16 - (_QWORD)v18) >> 1;
      if (v21 <= v19 + 1)
        v21 = v19 + 1;
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>((uint64_t)(v12 + 8), v22);
        v18 = (char *)v12[6];
        v15 = (char *)v12[7];
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[4 * v19];
      v25 = &v23[4 * v22];
      *(_DWORD *)v24 = v14;
      v17 = v24 + 4;
      while (v15 != v18)
      {
        v26 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v24 - 1) = v26;
        v24 -= 4;
      }
      v12[6] = v24;
      v12[7] = v17;
      v12[8] = v25;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_DWORD *)v15 = v13;
      v17 = v15 + 4;
    }
    v12[7] = v17;
  }
}

uint64_t ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_2(uint64_t result, const __CFString *a2)
{
  uint64_t v2;
  flatbuffers::FlatBufferBuilder *v3;
  char *v4;
  size_t v5;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 48))
  {
    v2 = result;
    v3 = *(flatbuffers::FlatBufferBuilder **)(result + 40);
    v4 = utf8(a2);
    v5 = strlen(v4);
    result = flatbuffers::FlatBufferBuilder::CreateString(v3, v4, v5);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 48) = result;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = a2[1] ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = **a4;
  *((_DWORD *)v11 + 8) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_42:
    *v21 = v11;
    goto LABEL_43;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AF385370(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  const void **v2;
  const void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (const void **)*v2;
      CF::TypeRef::~TypeRef(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v7 = a2[1] ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x28uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + 1) = **a4;
  v15[4] = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v11 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v11;
}

void sub_1AF3856F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      CF::TypeRef::~TypeRef(v2 + 4);
    operator delete(v2);
  }
}

CFTypeRef std::vector<SymbolOwner>::__construct_one_at_end[abi:ne180100]<SymbolOwner const&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CFTypeRef result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  v5 = a2[2];
  v4 = a2[3];
  v6 = a2[5];
  *(_OWORD *)(v3 + 64) = a2[4];
  *(_OWORD *)(v3 + 80) = v6;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v4;
  v7 = a2[1];
  *(_OWORD *)v3 = *a2;
  *(_OWORD *)(v3 + 16) = v7;
  result = *(CFTypeRef *)(v3 + 80);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 8) = v3 + 96;
  return result;
}

void sub_1AF3857A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolOwner>::__push_back_slow_path<SymbolOwner const&>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  _QWORD v20[2];
  char *v21;
  char *v22;
  uint64_t *v23;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v23 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolOwner>>(v7, v9);
  v11 = &v10[96 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v21 = v11;
  v22 = &v10[96 * v12];
  *((_DWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 7) = 0;
  v14 = a2[2];
  v13 = a2[3];
  v15 = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  v16 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v16;
  *((_OWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v14;
  v17 = (const void *)*((_QWORD *)v11 + 10);
  if (v17)
  {
    CFRetain(v17);
    v11 = v21;
  }
  v21 = v11 + 96;
  std::vector<SymbolOwner>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<SymbolOwner>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1AF3858B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SymbolOwner>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolOwner>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolOwner>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolOwner>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolOwner>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_DWORD *)(v12 - 80) = 0;
      *(_QWORD *)(v12 - 40) = 0;
      v13 = *(_OWORD *)(a3 + v11 - 64);
      v14 = *(_OWORD *)(a3 + v11 - 48);
      v15 = *(_OWORD *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 16) = *(_OWORD *)(a3 + v11 - 16);
      v16 = *(_OWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 80) = v16;
      *(_OWORD *)(v12 - 48) = v14;
      *(_OWORD *)(v12 - 32) = v15;
      *(_OWORD *)(v12 - 64) = v13;
      v17 = *(const void **)(a7 + v11 - 16);
      if (v17)
        CFRetain(v17);
      v11 -= 96;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1AF385A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 96)
    SymbolOwner::~SymbolOwner((SymbolOwner *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SymbolOwner>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    SymbolOwner::~SymbolOwner((SymbolOwner *)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

LABEL_1:
  v10 = a2 - 6;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 5);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 6, v11))
        {
          v37 = v11[1];
          v49 = *v11;
          v50 = v37;
          v38 = v11[2];
          v39 = v11[3];
          v40 = v11[5];
          v53 = v11[4];
          v54 = v40;
          v51 = v38;
          v52 = v39;
          v11[2] = 0u;
          v11[3] = 0u;
          v11[4] = 0u;
          v11[5] = 0u;
          *v11 = 0u;
          v11[1] = 0u;
          v41 = *(a2 - 5);
          *v11 = *v10;
          v11[1] = v41;
          v42 = *(a2 - 4);
          v43 = *(a2 - 3);
          v44 = *(a2 - 1);
          v11[4] = *(a2 - 2);
          v11[5] = v44;
          v11[2] = v42;
          v11[3] = v43;
          v45 = v54;
          v47 = v51;
          v46 = v52;
          *(a2 - 2) = v53;
          *(a2 - 1) = v45;
          *(a2 - 4) = v47;
          *(a2 - 3) = v46;
          v48 = v50;
          *v10 = v49;
          *(a2 - 5) = v48;
          v51 = 0u;
          v52 = 0u;
          v53 = 0u;
          v54 = 0u;
          v49 = 0u;
          v50 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v49);
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11, v11 + 6, a2 - 6, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11, v11 + 6, v11 + 12, a2 - 6, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11, v11 + 6, v11 + 12, v11 + 18, a2 - 6, a3);
        return;
      default:
        if (v14 <= 2303)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[6 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x3000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(&v11[6 * v16], v11, a2 - 6, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11, &v11[6 * v16], a2 - 6, a3);
            v18 = 3 * v16;
            v19 = &v11[6 * v16 - 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v11 + 6, v19, a2 - 12, a3);
            v20 = v11 + 12;
            v21 = &v11[2 * v18 + 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v20, v21, a2 - 18, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v19, v17, v21, a3);
            v22 = a1[1];
            v49 = *a1;
            v50 = v22;
            v23 = a1[2];
            v24 = a1[3];
            v25 = a1[5];
            v53 = a1[4];
            v54 = v25;
            v51 = v23;
            v52 = v24;
            a1[2] = 0u;
            a1[3] = 0u;
            a1[4] = 0u;
            a1[5] = 0u;
            *a1 = 0u;
            a1[1] = 0u;
            v26 = v17[1];
            *a1 = *v17;
            a1[1] = v26;
            v27 = v17[2];
            v28 = v17[3];
            v29 = v17[5];
            a1[4] = v17[4];
            a1[5] = v29;
            a1[2] = v27;
            a1[3] = v28;
            v30 = v54;
            v32 = v51;
            v31 = v52;
            v17[4] = v53;
            v17[5] = v30;
            v17[2] = v32;
            v17[3] = v31;
            v33 = v50;
            *v17 = v49;
            v17[1] = v33;
            v51 = 0u;
            v52 = 0u;
            v53 = 0u;
            v54 = 0u;
            v49 = 0u;
            v50 = 0u;
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v49);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(a1 - 6, a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v34 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(a1, a2, a3);
          if ((v35 & 1) == 0)
            goto LABEL_14;
          v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, v34, a3);
          v11 = v34 + 6;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(v34 + 6, a2, a3))
          {
            v12 = v13 + 1;
            if ((v36 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>(a1, v34, a3, -v13, a5 & 1);
            v11 = v34 + 6;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v34;
          if ((v36 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,SymbolOwner*>((char *)v11, (char *)a2, (char *)a2, (unsigned int (**)(uint64_t, __int128 *))a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 2) < *v9)
        {
          v22 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v22;
          v23 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, v9 + 2, v9 + 4, a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v17 = *v9;
            v16 = v9[1];
            v18 = v15[1];
            *v9 = *v15;
            v9[1] = v18;
            *v15 = v17;
            v15[1] = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 2) >= *v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v19 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, v19);
          v9 = v19 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v19 + 2, a2))
          {
            v10 = v11 + 1;
            if ((v21 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if ((v21 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,PrepassOp *>(v9, a2, a2, a3);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  _OWORD *v5;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  const void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  const void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (a1 != a2)
  {
    v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = v5;
        if ((*a3)(v5, (uint64_t)v9))
        {
          v10 = v8[3];
          v27 = v8[2];
          v28 = v10;
          v11 = v8[5];
          v29 = v8[4];
          v30 = v11;
          v12 = v8[1];
          v25 = *v8;
          v26 = v12;
          *v8 = 0u;
          v8[1] = 0u;
          v8[2] = 0u;
          v8[3] = 0u;
          v13 = v7;
          v8[4] = 0u;
          v8[5] = 0u;
          while (1)
          {
            v14 = (_OWORD *)((char *)a1 + v13);
            v15 = *(const void **)((char *)a1 + v13 + 176);
            if (v15)
              CFRelease(v15);
            v16 = v14[3];
            v14[8] = v14[2];
            v14[9] = v16;
            v17 = v14[5];
            v14[10] = v14[4];
            v14[11] = v17;
            v18 = v14[1];
            v14[6] = *v14;
            v14[7] = v18;
            *v14 = 0u;
            v14[1] = 0u;
            v14[2] = 0u;
            v14[3] = 0u;
            v14[4] = 0u;
            v14[5] = 0u;
            if (!v13)
              break;
            v19 = (*a3)(&v25, (uint64_t)a1 + v13 - 96);
            v13 -= 96;
            if ((v19 & 1) == 0)
            {
              v20 = (uint64_t)a1 + v13 + 96;
              goto LABEL_12;
            }
          }
          v20 = (uint64_t)a1;
LABEL_12:
          v21 = *(const void **)(v20 + 80);
          if (v21)
            CFRelease(v21);
          v22 = v28;
          *(_OWORD *)(v20 + 32) = v27;
          *(_OWORD *)(v20 + 48) = v22;
          v23 = v30;
          *(_OWORD *)(v20 + 64) = v29;
          *(_OWORD *)(v20 + 80) = v23;
          v24 = v26;
          *(_OWORD *)v20 = v25;
          *(_OWORD *)(v20 + 16) = v24;
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v25);
        }
        v5 = v8 + 6;
        v7 += 96;
      }
      while (v8 + 6 != a2);
    }
  }
}

void sub_1AF385F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  const void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      v7 = a1 - 6;
      do
      {
        v8 = v4;
        v4 = v5;
        if ((*a3)(v5, v8))
        {
          v9 = v4[3];
          v24 = v4[2];
          v25 = v9;
          v10 = v4[5];
          v26 = v4[4];
          v27 = v10;
          v11 = v4[1];
          v22 = *v4;
          v23 = v11;
          *v4 = 0u;
          v4[1] = 0u;
          v4[2] = 0u;
          v4[3] = 0u;
          v12 = v7;
          v4[4] = 0u;
          v4[5] = 0u;
          do
          {
            v13 = (const void *)*((_QWORD *)v12 + 34);
            if (v13)
              CFRelease(v13);
            v14 = v12[9];
            v12[14] = v12[8];
            v12[15] = v14;
            v15 = v12[11];
            v12[16] = v12[10];
            v12[17] = v15;
            v16 = v12[7];
            v12[12] = v12[6];
            v12[13] = v16;
            v12[6] = 0u;
            v12[7] = 0u;
            v12[8] = 0u;
            v12[9] = 0u;
            v12[10] = 0u;
            v12[11] = 0u;
            v17 = (*a3)(&v22, v12);
            v12 -= 6;
          }
          while ((v17 & 1) != 0);
          v18 = (const void *)*((_QWORD *)v12 + 34);
          if (v18)
            CFRelease(v18);
          v19 = v25;
          v12[14] = v24;
          v12[15] = v19;
          v20 = v27;
          v12[16] = v26;
          v12[17] = v20;
          v21 = v23;
          v12[12] = v22;
          v12[13] = v21;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v22);
        }
        v5 = v4 + 6;
        v7 += 6;
      }
      while (v4 + 6 != a2);
    }
  }
}

void sub_1AF3860C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v20 = a2[3];
    v63 = a2[2];
    v64 = v20;
    v21 = a2[5];
    v65 = a2[4];
    v66 = v21;
    v22 = a2[1];
    v61 = *a2;
    v62 = v22;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    v23 = a3[2];
    v24 = a3[3];
    v25 = a3[5];
    a2[4] = a3[4];
    a2[5] = v25;
    a2[2] = v23;
    a2[3] = v24;
    v26 = a3[1];
    *a2 = *a3;
    a2[1] = v26;
    v27 = v64;
    a3[2] = v63;
    a3[3] = v27;
    v28 = v66;
    a3[4] = v65;
    a3[5] = v28;
    v29 = v62;
    *a3 = v61;
    a3[1] = v29;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    if (!(*a4)(a2, a1))
      return 1;
    v30 = a1[3];
    v63 = a1[2];
    v64 = v30;
    v31 = a1[5];
    v65 = a1[4];
    v66 = v31;
    v32 = a1[1];
    v61 = *a1;
    v62 = v32;
    v33 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    v34 = a2[2];
    v35 = a2[3];
    v36 = a2[5];
    a1[4] = a2[4];
    a1[5] = v36;
    a1[2] = v34;
    a1[3] = v35;
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    v38 = v64;
    a2[2] = v63;
    a2[3] = v38;
    v39 = v66;
    a2[4] = v65;
    a2[5] = v39;
    v40 = v62;
    *a2 = v61;
    a2[1] = v40;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    v41 = a1[3];
    v63 = a1[2];
    v64 = v41;
    v42 = a1[5];
    v65 = a1[4];
    v66 = v42;
    v43 = a1[1];
    v61 = *a1;
    v62 = v43;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    v44 = a2[2];
    v45 = a2[3];
    v46 = a2[5];
    a1[4] = a2[4];
    a1[5] = v46;
    a1[2] = v44;
    a1[3] = v45;
    v47 = a2[1];
    *a1 = *a2;
    a1[1] = v47;
    v48 = v64;
    a2[2] = v63;
    a2[3] = v48;
    v49 = v66;
    a2[4] = v65;
    a2[5] = v49;
    v50 = v62;
    *a2 = v61;
    a2[1] = v50;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    if (!(*a4)(a3, a2))
      return 1;
    v51 = a2[3];
    v63 = a2[2];
    v64 = v51;
    v52 = a2[5];
    v65 = a2[4];
    v66 = v52;
    v53 = a2[1];
    v61 = *a2;
    v62 = v53;
    v33 = 0uLL;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    v54 = a3[2];
    v55 = a3[3];
    v56 = a3[5];
    a2[4] = a3[4];
    a2[5] = v56;
    a2[2] = v54;
    a2[3] = v55;
    v57 = a3[1];
    *a2 = *a3;
    a2[1] = v57;
    v58 = v64;
    a3[2] = v63;
    a3[3] = v58;
    v59 = v66;
    a3[4] = v65;
    a3[5] = v59;
    v60 = v62;
    *a3 = v61;
    a3[1] = v60;
LABEL_9:
    v65 = v33;
    v66 = v33;
    v63 = v33;
    v64 = v33;
    v61 = v33;
    v62 = v33;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    return 2;
  }
  v10 = a1[3];
  v63 = a1[2];
  v64 = v10;
  v11 = a1[5];
  v65 = a1[4];
  v66 = v11;
  v12 = a1[1];
  v61 = *a1;
  v62 = v12;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  v13 = a3[2];
  v14 = a3[3];
  v15 = a3[5];
  a1[4] = a3[4];
  a1[5] = v15;
  a1[2] = v13;
  a1[3] = v14;
  v16 = a3[1];
  *a1 = *a3;
  a1[1] = v16;
  v17 = v64;
  a3[2] = v63;
  a3[3] = v17;
  v18 = v66;
  a3[4] = v65;
  a3[5] = v18;
  v19 = v62;
  *a3 = v61;
  a3[1] = v19;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
  return 1;
}

_OWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  const void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v4 = a2;
  v6 = a1[3];
  v38 = a1[2];
  v39 = v6;
  v7 = a1[5];
  v40 = a1[4];
  v41 = v7;
  v8 = a1[1];
  v36 = *a1;
  v37 = v8;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  if (((*a3)(&v36, a2 - 6) & 1) != 0)
  {
    v9 = a1;
    do
      v9 += 6;
    while (((*a3)(&v36, v9) & 1) == 0);
  }
  else
  {
    v10 = a1 + 6;
    do
    {
      v9 = v10;
      if (v10 >= v4)
        break;
      v11 = (*a3)(&v36, v10);
      v10 = v9 + 6;
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 6;
    while (((*a3)(&v36, v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    v12 = v9[1];
    v42 = *v9;
    v43 = v12;
    v13 = v9[2];
    v14 = v9[3];
    v15 = v9[5];
    v46 = v9[4];
    v47 = v15;
    v44 = v13;
    v45 = v14;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[5] = 0u;
    *v9 = 0u;
    v9[1] = 0u;
    v16 = v4[1];
    *v9 = *v4;
    v9[1] = v16;
    v17 = v4[2];
    v18 = v4[3];
    v19 = v4[5];
    v9[4] = v4[4];
    v9[5] = v19;
    v9[2] = v17;
    v9[3] = v18;
    v20 = v47;
    v22 = v44;
    v21 = v45;
    v4[4] = v46;
    v4[5] = v20;
    v4[2] = v22;
    v4[3] = v21;
    v23 = v43;
    *v4 = v42;
    v4[1] = v23;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v42 = 0u;
    v43 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v42);
    do
      v9 += 6;
    while (!(*a3)(&v36, v9));
    do
      v4 -= 6;
    while (((*a3)(&v36, v4) & 1) != 0);
  }
  v24 = v9 - 6;
  if (v9 - 6 == a1)
  {
    v30 = (const void *)*((_QWORD *)v9 - 2);
    if (v30)
      CFRelease(v30);
  }
  else
  {
    v25 = (const void *)*((_QWORD *)a1 + 10);
    if (v25)
      CFRelease(v25);
    v26 = *(v9 - 5);
    *a1 = *v24;
    a1[1] = v26;
    v27 = *(v9 - 4);
    v28 = *(v9 - 3);
    v29 = *(v9 - 1);
    a1[4] = *(v9 - 2);
    a1[5] = v29;
    a1[2] = v27;
    a1[3] = v28;
    *(v9 - 4) = 0u;
    *(v9 - 3) = 0u;
    *(v9 - 2) = 0u;
    *(v9 - 1) = 0u;
    *v24 = 0u;
    *(v9 - 5) = 0u;
  }
  v31 = v37;
  *v24 = v36;
  *(v9 - 5) = v31;
  v32 = v38;
  v33 = v39;
  v34 = v41;
  *(v9 - 2) = v40;
  *(v9 - 1) = v34;
  *(v9 - 4) = v32;
  *(v9 - 3) = v33;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v36 = 0u;
  v37 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v36);
  return v9;
}

void sub_1AF386590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

_OWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(_OWORD *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  const void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  const void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v6 = 0;
  v7 = a1[3];
  v39 = a1[2];
  v40 = v7;
  v8 = a1[5];
  v41 = a1[4];
  v42 = v8;
  v9 = a1[1];
  v37 = *a1;
  v38 = v9;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  do
  {
    v10 = (*a3)(&a1[v6 + 6], &v37);
    v6 += 6;
  }
  while ((v10 & 1) != 0);
  v11 = &a1[v6];
  if (v6 == 6)
  {
    do
    {
      if (v11 >= a2)
        break;
      a2 -= 6;
    }
    while (((*a3)(a2, &v37) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!(*a3)(a2, &v37));
  }
  v12 = &a1[v6];
  if (v11 < a2)
  {
    v13 = a2;
    do
    {
      v14 = v12[3];
      v45 = v12[2];
      v46 = v14;
      v15 = v12[5];
      v47 = v12[4];
      v48 = v15;
      v16 = v12[1];
      v43 = *v12;
      v44 = v16;
      *v12 = 0u;
      v12[1] = 0u;
      v12[2] = 0u;
      v12[3] = 0u;
      v12[4] = 0u;
      v12[5] = 0u;
      v17 = v13[1];
      *v12 = *v13;
      v12[1] = v17;
      v18 = v13[2];
      v19 = v13[3];
      v20 = v13[5];
      v12[4] = v13[4];
      v12[5] = v20;
      v12[2] = v18;
      v12[3] = v19;
      v21 = v44;
      *v13 = v43;
      v13[1] = v21;
      v22 = v45;
      v23 = v46;
      v24 = v48;
      v13[4] = v47;
      v13[5] = v24;
      v13[2] = v22;
      v13[3] = v23;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v43 = 0u;
      v44 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v43);
      do
        v12 += 6;
      while (((*a3)(v12, &v37) & 1) != 0);
      do
        v13 -= 6;
      while (!(*a3)(v13, &v37));
    }
    while (v12 < v13);
  }
  v25 = v12 - 6;
  if (v12 - 6 == a1)
  {
    v31 = (const void *)*((_QWORD *)v12 - 2);
    if (v31)
      CFRelease(v31);
  }
  else
  {
    v26 = (const void *)*((_QWORD *)a1 + 10);
    if (v26)
      CFRelease(v26);
    v27 = *(v12 - 5);
    *a1 = *v25;
    a1[1] = v27;
    v28 = *(v12 - 4);
    v29 = *(v12 - 3);
    v30 = *(v12 - 1);
    a1[4] = *(v12 - 2);
    a1[5] = v30;
    a1[2] = v28;
    a1[3] = v29;
    *(v12 - 4) = 0u;
    *(v12 - 3) = 0u;
    *(v12 - 2) = 0u;
    *(v12 - 1) = 0u;
    *v25 = 0u;
    *(v12 - 5) = 0u;
  }
  v32 = v38;
  *v25 = v37;
  *(v12 - 5) = v32;
  v33 = v39;
  v34 = v40;
  v35 = v42;
  *(v12 - 2) = v41;
  *(v12 - 1) = v35;
  *(v12 - 4) = v33;
  *(v12 - 3) = v34;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v37 = 0u;
  v38 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v37);
  return v12 - 6;
}

void sub_1AF3867D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  _BOOL8 v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  const void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  const void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      v7 = a2 - 6;
      if ((*a3)(a2 - 6, a1))
      {
        v8 = a1[3];
        v40 = a1[2];
        v41 = v8;
        v9 = a1[5];
        v42 = a1[4];
        v43 = v9;
        v10 = a1[1];
        v38 = *a1;
        v39 = v10;
        *a1 = 0u;
        a1[1] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        v11 = *(a2 - 4);
        v12 = *(a2 - 3);
        v13 = *(a2 - 1);
        a1[4] = *(a2 - 2);
        a1[5] = v13;
        a1[2] = v11;
        a1[3] = v12;
        v14 = *(a2 - 5);
        *a1 = *v7;
        a1[1] = v14;
        v15 = v41;
        *(a2 - 4) = v40;
        *(a2 - 3) = v15;
        v16 = v43;
        *(a2 - 2) = v42;
        *(a2 - 1) = v16;
        v17 = v39;
        *v7 = v38;
        *(a2 - 5) = v17;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        goto LABEL_24;
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a2 - 6, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a1 + 12, a2 - 6, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a1 + 12, a1 + 18, a2 - 6, a3);
      return v6;
    default:
      v18 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a1 + 6, a1 + 12, a3);
      v19 = a1 + 18;
      if (a1 + 18 == a2)
        return 1;
      v20 = 0;
      v21 = 0;
      break;
  }
  while (!(*a3)(v19, v18))
  {
LABEL_18:
    v18 = v19;
    v20 += 96;
    v19 += 6;
    if (v19 == a2)
      return 1;
  }
  v22 = v19[3];
  v40 = v19[2];
  v41 = v22;
  v23 = v19[5];
  v42 = v19[4];
  v43 = v23;
  v24 = v19[1];
  v38 = *v19;
  v39 = v24;
  *v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  v19[3] = 0u;
  v25 = v20;
  v19[4] = 0u;
  v19[5] = 0u;
  while (1)
  {
    v26 = (__int128 *)((char *)a1 + v25);
    v27 = *(const void **)((char *)a1 + v25 + 368);
    if (v27)
      CFRelease(v27);
    v28 = v26[15];
    v26[20] = v26[14];
    v26[21] = v28;
    v29 = v26[17];
    v26[22] = v26[16];
    v26[23] = v29;
    v30 = v26[13];
    v26[18] = v26[12];
    v26[19] = v30;
    v26[12] = 0u;
    v26[13] = 0u;
    v26[14] = 0u;
    v26[15] = 0u;
    v26[16] = 0u;
    v26[17] = 0u;
    if (v25 == -192)
      break;
    v31 = (*a3)(&v38, (__int128 *)((char *)a1 + v25 + 96));
    v25 -= 96;
    if ((v31 & 1) == 0)
    {
      v32 = (uint64_t)a1 + v25 + 288;
      goto LABEL_14;
    }
  }
  v32 = (uint64_t)a1;
LABEL_14:
  v33 = *(const void **)(v32 + 80);
  if (v33)
    CFRelease(v33);
  v34 = v41;
  *(_OWORD *)(v32 + 32) = v40;
  *(_OWORD *)(v32 + 48) = v34;
  v35 = v43;
  *(_OWORD *)(v32 + 64) = v42;
  *(_OWORD *)(v32 + 80) = v35;
  v36 = v39;
  *(_OWORD *)v32 = v38;
  *(_OWORD *)(v32 + 16) = v36;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  ++v21;
  v42 = 0u;
  v43 = 0u;
  if (v21 != 8)
  {
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v38);
    goto LABEL_18;
  }
  v6 = v19 + 6 == a2;
LABEL_24:
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v38);
  return v6;
}

void sub_1AF386AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v10 = a3[3];
    v42 = a3[2];
    v43 = v10;
    v11 = a3[5];
    v44 = a3[4];
    v45 = v11;
    v12 = a3[1];
    v40 = *a3;
    v41 = v12;
    *a3 = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[5] = 0u;
    v13 = a4[2];
    v14 = a4[3];
    v15 = a4[5];
    a3[4] = a4[4];
    a3[5] = v15;
    a3[2] = v13;
    a3[3] = v14;
    v16 = a4[1];
    *a3 = *a4;
    a3[1] = v16;
    v17 = v43;
    a4[2] = v42;
    a4[3] = v17;
    v18 = v45;
    a4[4] = v44;
    a4[5] = v18;
    v19 = v41;
    *a4 = v40;
    a4[1] = v19;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
    if ((*a5)(a3, a2))
    {
      v20 = a2[3];
      v42 = a2[2];
      v43 = v20;
      v21 = a2[5];
      v44 = a2[4];
      v45 = v21;
      v22 = a2[1];
      v40 = *a2;
      v41 = v22;
      *a2 = 0u;
      a2[1] = 0u;
      a2[2] = 0u;
      a2[3] = 0u;
      a2[4] = 0u;
      a2[5] = 0u;
      v23 = a3[2];
      v24 = a3[3];
      v25 = a3[5];
      a2[4] = a3[4];
      a2[5] = v25;
      a2[2] = v23;
      a2[3] = v24;
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      v27 = v43;
      a3[2] = v42;
      a3[3] = v27;
      v28 = v45;
      a3[4] = v44;
      a3[5] = v28;
      v29 = v41;
      *a3 = v40;
      a3[1] = v29;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
      if ((*a5)(a2, a1))
      {
        v30 = a1[3];
        v42 = a1[2];
        v43 = v30;
        v31 = a1[5];
        v44 = a1[4];
        v45 = v31;
        v32 = a1[1];
        v40 = *a1;
        v41 = v32;
        *a1 = 0u;
        a1[1] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        v33 = a2[2];
        v34 = a2[3];
        v35 = a2[5];
        a1[4] = a2[4];
        a1[5] = v35;
        a1[2] = v33;
        a1[3] = v34;
        v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        v37 = v43;
        a2[2] = v42;
        a2[3] = v37;
        v38 = v45;
        a2[4] = v44;
        a2[5] = v38;
        v39 = v41;
        *a2 = v40;
        a2[1] = v39;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
      }
    }
  }
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    v13 = a4[3];
    v55 = a4[2];
    v56 = v13;
    v14 = a4[5];
    v57 = a4[4];
    v58 = v14;
    v15 = a4[1];
    v53 = *a4;
    v54 = v15;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    v16 = a5[2];
    v17 = a5[3];
    v18 = a5[5];
    a4[4] = a5[4];
    a4[5] = v18;
    a4[2] = v16;
    a4[3] = v17;
    v19 = a5[1];
    *a4 = *a5;
    a4[1] = v19;
    v20 = v56;
    a5[2] = v55;
    a5[3] = v20;
    v21 = v58;
    a5[4] = v57;
    a5[5] = v21;
    v22 = v54;
    *a5 = v53;
    a5[1] = v22;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
    if ((*a6)(a4, a3))
    {
      v23 = a3[3];
      v55 = a3[2];
      v56 = v23;
      v24 = a3[5];
      v57 = a3[4];
      v58 = v24;
      v25 = a3[1];
      v53 = *a3;
      v54 = v25;
      *a3 = 0u;
      a3[1] = 0u;
      a3[2] = 0u;
      a3[3] = 0u;
      a3[4] = 0u;
      a3[5] = 0u;
      v26 = a4[2];
      v27 = a4[3];
      v28 = a4[5];
      a3[4] = a4[4];
      a3[5] = v28;
      a3[2] = v26;
      a3[3] = v27;
      v29 = a4[1];
      *a3 = *a4;
      a3[1] = v29;
      v30 = v56;
      a4[2] = v55;
      a4[3] = v30;
      v31 = v58;
      a4[4] = v57;
      a4[5] = v31;
      v32 = v54;
      *a4 = v53;
      a4[1] = v32;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
      if ((*a6)(a3, a2))
      {
        v33 = a2[3];
        v55 = a2[2];
        v56 = v33;
        v34 = a2[5];
        v57 = a2[4];
        v58 = v34;
        v35 = a2[1];
        v53 = *a2;
        v54 = v35;
        *a2 = 0u;
        a2[1] = 0u;
        a2[2] = 0u;
        a2[3] = 0u;
        a2[4] = 0u;
        a2[5] = 0u;
        v36 = a3[2];
        v37 = a3[3];
        v38 = a3[5];
        a2[4] = a3[4];
        a2[5] = v38;
        a2[2] = v36;
        a2[3] = v37;
        v39 = a3[1];
        *a2 = *a3;
        a2[1] = v39;
        v40 = v56;
        a3[2] = v55;
        a3[3] = v40;
        v41 = v58;
        a3[4] = v57;
        a3[5] = v41;
        v42 = v54;
        *a3 = v53;
        a3[1] = v42;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
        if ((*a6)(a2, a1))
        {
          v43 = a1[3];
          v55 = a1[2];
          v56 = v43;
          v44 = a1[5];
          v57 = a1[4];
          v58 = v44;
          v45 = a1[1];
          v53 = *a1;
          v54 = v45;
          *a1 = 0u;
          a1[1] = 0u;
          a1[2] = 0u;
          a1[3] = 0u;
          a1[4] = 0u;
          a1[5] = 0u;
          v46 = a2[2];
          v47 = a2[3];
          v48 = a2[5];
          a1[4] = a2[4];
          a1[5] = v48;
          a1[2] = v46;
          a1[3] = v47;
          v49 = a2[1];
          *a1 = *a2;
          a1[1] = v49;
          v50 = v56;
          a2[2] = v55;
          a2[3] = v50;
          v51 = v58;
          a2[4] = v57;
          a2[5] = v51;
          v52 = v54;
          *a2 = v53;
          a2[1] = v52;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,SymbolOwner*>(char *a1, char *a2, char *a3, unsigned int (**a4)(uint64_t, __int128 *), __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  const void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  if (a1 != a2)
  {
    v9 = a2 - a1;
    v10 = (a2 - a1) / 96;
    if (a2 - a1 >= 97)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = &a1[96 * v11];
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>((uint64_t)a1, a4, v10, v13);
        v13 -= 96;
        --v12;
      }
      while (v12);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v15 = a2;
      do
      {
        if (((unsigned int (*)(char *, char *, __n128))*a4)(v15, a1, a5))
        {
          v16 = *((_OWORD *)v15 + 3);
          v48 = *((_OWORD *)v15 + 2);
          v49 = v16;
          v17 = *((_OWORD *)v15 + 5);
          v50 = *((_OWORD *)v15 + 4);
          v51 = v17;
          v18 = *((_OWORD *)v15 + 1);
          v46 = *(_OWORD *)v15;
          v47 = v18;
          *(_OWORD *)v15 = 0u;
          *((_OWORD *)v15 + 1) = 0u;
          *((_OWORD *)v15 + 2) = 0u;
          *((_OWORD *)v15 + 3) = 0u;
          *((_OWORD *)v15 + 4) = 0u;
          *((_OWORD *)v15 + 5) = 0u;
          v19 = *((_OWORD *)a1 + 2);
          v20 = *((_OWORD *)a1 + 3);
          v21 = *((_OWORD *)a1 + 5);
          *((_OWORD *)v15 + 4) = *((_OWORD *)a1 + 4);
          *((_OWORD *)v15 + 5) = v21;
          *((_OWORD *)v15 + 2) = v19;
          *((_OWORD *)v15 + 3) = v20;
          v22 = *((_OWORD *)a1 + 1);
          *(_OWORD *)v15 = *(_OWORD *)a1;
          *((_OWORD *)v15 + 1) = v22;
          v23 = v49;
          *((_OWORD *)a1 + 2) = v48;
          *((_OWORD *)a1 + 3) = v23;
          v24 = v51;
          *((_OWORD *)a1 + 4) = v50;
          *((_OWORD *)a1 + 5) = v24;
          v25 = v47;
          *(_OWORD *)a1 = v46;
          *((_OWORD *)a1 + 1) = v25;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>((uint64_t)a1, a4, v10, a1);
        }
        v15 += 96;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 97)
    {
      v26 = v9 / 0x60uLL;
      v27 = a2 - 96;
      do
      {
        v28 = *((_OWORD *)a1 + 3);
        v48 = *((_OWORD *)a1 + 2);
        v49 = v28;
        v29 = *((_OWORD *)a1 + 5);
        v50 = *((_OWORD *)a1 + 4);
        v51 = v29;
        v30 = *((_OWORD *)a1 + 1);
        v46 = *(_OWORD *)a1;
        v47 = v30;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + 1) = 0u;
        *((_OWORD *)a1 + 2) = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        v31 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(a1, (unsigned int (**)(_OWORD *, uint64_t))a4, v26);
        v32 = (const void *)*((_QWORD *)v31 + 10);
        if (v27 == v31)
        {
          if (v32)
            CFRelease(v32);
          v40 = v47;
          *(_OWORD *)v31 = v46;
          *((_OWORD *)v31 + 1) = v40;
          v41 = v48;
          v42 = v49;
          v43 = v51;
          *((_OWORD *)v31 + 4) = v50;
          *((_OWORD *)v31 + 5) = v43;
          *((_OWORD *)v31 + 2) = v41;
          *((_OWORD *)v31 + 3) = v42;
          v48 = 0u;
          v49 = 0u;
          v50 = 0u;
          v51 = 0u;
          v46 = 0u;
          v47 = 0u;
        }
        else
        {
          if (v32)
            CFRelease(v32);
          v33 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v31 = *(_OWORD *)v27;
          *((_OWORD *)v31 + 1) = v33;
          v34 = *((_OWORD *)v27 + 2);
          v35 = *((_OWORD *)v27 + 3);
          v36 = *((_OWORD *)v27 + 5);
          *((_OWORD *)v31 + 4) = *((_OWORD *)v27 + 4);
          *((_OWORD *)v31 + 5) = v36;
          *((_OWORD *)v31 + 2) = v34;
          *((_OWORD *)v31 + 3) = v35;
          v37 = v49;
          *((_OWORD *)v27 + 2) = v48;
          *((_OWORD *)v27 + 3) = v37;
          v38 = v51;
          *((_OWORD *)v27 + 4) = v50;
          *((_OWORD *)v27 + 5) = v38;
          v39 = v47;
          *(_OWORD *)v27 = v46;
          *((_OWORD *)v27 + 1) = v39;
          v48 = 0u;
          v49 = 0u;
          v50 = 0u;
          v51 = 0u;
          v46 = 0u;
          v47 = 0u;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>((uint64_t)a1, (uint64_t)(v31 + 96), (uint64_t (**)(_OWORD *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v31 + 96 - a1) >> 5));
        }
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
        v27 -= 96;
      }
      while (v26-- > 2);
    }
    return v14;
  }
  return a3;
}

void sub_1AF38715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int128 *), uint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  _OWORD *v5;
  uint64_t v7;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  const void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      v10 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
      v11 = (_OWORD *)(a1 + 96 * v10);
      v12 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v12 < a3 && (*a2)(a1 + 96 * v10, v11 + 6))
      {
        v11 += 6;
        v10 = v12;
      }
      if ((((uint64_t (*)(_OWORD *, _OWORD *))*a2)(v11, v5) & 1) == 0)
      {
        v14 = v5[3];
        v31 = v5[2];
        v32 = v14;
        v15 = v5[5];
        v33 = v5[4];
        v34 = v15;
        v16 = v5[1];
        v29 = *v5;
        v30 = v16;
        *v5 = 0u;
        v5[1] = 0u;
        v5[2] = 0u;
        v5[3] = 0u;
        v5[4] = 0u;
        v5[5] = 0u;
        while (1)
        {
          v17 = v11;
          v18 = (const void *)*((_QWORD *)v5 + 10);
          if (v18)
            CFRelease(v18);
          v19 = v11[1];
          *v5 = *v11;
          v5[1] = v19;
          v20 = v11[2];
          v21 = v11[3];
          v22 = v11[5];
          v5[4] = v11[4];
          v5[5] = v22;
          v5[2] = v20;
          v5[3] = v21;
          v11[2] = 0u;
          v11[3] = 0u;
          v11[4] = 0u;
          v11[5] = 0u;
          *v11 = 0u;
          v11[1] = 0u;
          if (v7 < v10)
            break;
          v23 = (2 * v10) | 1;
          v11 = (_OWORD *)(a1 + 96 * v23);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v23;
          }
          else if ((*a2)(a1 + 96 * v23, v11 + 6))
          {
            v11 += 6;
          }
          else
          {
            v10 = v23;
          }
          v5 = v17;
          if ((*a2)((uint64_t)v11, &v29))
          {
            v24 = (const void *)*((_QWORD *)v17 + 10);
            if (v24)
              CFRelease(v24);
            break;
          }
        }
        v25 = v30;
        *v17 = v29;
        v17[1] = v25;
        v26 = v31;
        v27 = v32;
        v28 = v34;
        v17[4] = v33;
        v17[5] = v28;
        v17[2] = v26;
        v17[3] = v27;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v29 = 0u;
        v30 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v29);
      }
    }
  }
  return result;
}

void sub_1AF387340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(_OWORD *a1, unsigned int (**a2)(_OWORD *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[6 * v6 + 6];
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, (uint64_t)(v9 + 6)))
    {
      v9 += 6;
      v6 = v11;
    }
    v12 = (const void *)*((_QWORD *)a1 + 10);
    if (v12)
      CFRelease(v12);
    v13 = v9[1];
    *a1 = *v9;
    a1[1] = v13;
    v14 = v9[2];
    v15 = v9[3];
    v16 = v9[5];
    a1[4] = v9[4];
    a1[5] = v16;
    a1[2] = v14;
    a1[3] = v15;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[5] = 0u;
    *v9 = 0u;
    v9[1] = 0u;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(_OWORD *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  const void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (_OWORD *)(a1 + 96 * (v4 >> 1));
    v9 = (_OWORD *)(a2 - 96);
    if ((*a3)(v8, (__int128 *)(a2 - 96)))
    {
      v10 = v9[3];
      v25 = v9[2];
      v26 = v10;
      v11 = v9[5];
      v27 = v9[4];
      v28 = v11;
      v12 = v9[1];
      v23 = *v9;
      v24 = v12;
      *v9 = 0u;
      v9[1] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      v9[4] = 0u;
      v9[5] = 0u;
      while (1)
      {
        v13 = v8;
        v14 = (const void *)*((_QWORD *)v9 + 10);
        if (v14)
          CFRelease(v14);
        v15 = v8[1];
        *v9 = *v8;
        v9[1] = v15;
        v16 = v8[2];
        v17 = v8[3];
        v18 = v8[5];
        v9[4] = v8[4];
        v9[5] = v18;
        v9[2] = v16;
        v9[3] = v17;
        v8[2] = 0u;
        v8[3] = 0u;
        v8[4] = 0u;
        v8[5] = 0u;
        *v8 = 0u;
        v8[1] = 0u;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_OWORD *)(a1 + 96 * v7);
        v9 = v13;
        if (((*a3)(v8, &v23) & 1) == 0)
        {
          v19 = (const void *)*((_QWORD *)v13 + 10);
          if (v19)
            CFRelease(v19);
          break;
        }
      }
      v20 = v26;
      v13[2] = v25;
      v13[3] = v20;
      v21 = v28;
      v13[4] = v27;
      v13[5] = v21;
      v22 = v24;
      *v13 = v23;
      v13[1] = v22;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v23);
    }
  }
}

void sub_1AF387570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SymbolOwner::~SymbolOwner((SymbolOwner *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AF387840(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v25[2];
  char v26;

  v7 = a2[1] ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x30uLL);
  v25[0] = (uint64_t)v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + 1) = **a4;
  v15[4] = 0;
  v15[5] = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v11 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100](v25, 0);
  return v11;
}

void sub_1AF387ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      CS::TypeRef::~TypeRef((CS::TypeRef *)(v2 + 32));
    operator delete((void *)v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>(uint64_t a1, _QWORD *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v8 = a2[1] ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = *a3;
  v16[4] = *a4;
  *a4 = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_1AF387D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,CS::TypeRef>(uint64_t a1, _QWORD *a2, _OWORD *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v27[2];
  char v28;

  v8 = a2[1] ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x30uLL);
  v27[0] = (uint64_t)v16;
  v27[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = *a4;
  *((_OWORD *)v16 + 1) = *a3;
  *((_OWORD *)v16 + 2) = v17;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9)
          v25 %= v9;
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v12 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100](v27, 0);
  return v12;
}

void sub_1AF38800C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<PrepassOp>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = (_QWORD *)a2[1];
  while (v2 != v3)
  {
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    v4 -= 2;
    v5 = *(_QWORD *)(v2 - 16);
    v6 = *(_QWORD *)(v2 - 8);
    v2 -= 16;
    *v4 = v5;
    v4[1] = v6;
    *(_QWORD *)(v2 + 8) = 0;
  }
  a2[1] = v4;
  v7 = *result;
  *result = (uint64_t)v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<PrepassOp>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    PrepassOp::~PrepassOp((PrepassOp *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (a1 != a2)
  {
    v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v4;
        if (v6[2] < *v6)
        {
          v8 = v6[3];
          v15 = v6[2];
          v16 = v8;
          v6[3] = 0;
          v9 = *v6;
          v10 = (const void *)v4[1];
          v11 = v5;
          while (1)
          {
            v12 = (char *)a1 + v11;
            *(unint64_t *)((char *)a1 + v11 + 16) = v9;
            if (v10)
              _Block_release(v10);
            *((_QWORD *)v12 + 3) = *((_QWORD *)v12 + 1);
            *((_QWORD *)v12 + 1) = 0;
            if (!v11)
              break;
            v10 = 0;
            v9 = *(unint64_t *)((char *)a1 + v11 - 16);
            v11 -= 16;
            if (v15 >= v9)
            {
              v13 = (unint64_t *)((char *)a1 + v11 + 16);
              goto LABEL_12;
            }
          }
          v13 = a1;
LABEL_12:
          v14 = v16;
          *v13 = v15;
          v13[1] = v14;
          v16 = 0;
          PrepassOp::~PrepassOp((PrepassOp *)&v15);
        }
        v4 = v7 + 2;
        v5 += 16;
        v6 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
}

void sub_1AF388544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PrepassOp::~PrepassOp((PrepassOp *)&a9);
  _Unwind_Resume(a1);
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (result != a2)
  {
    v3 = result + 2;
    if (result + 2 != a2)
    {
      v4 = result + 3;
      do
      {
        v5 = v3;
        if (result[2] < *result)
        {
          v6 = result[3];
          v11 = result[2];
          v12 = v6;
          result[3] = 0;
          v7 = *result;
          v8 = (const void *)v5[1];
          v9 = v4;
          do
          {
            *(v9 - 1) = v7;
            if (v8)
              _Block_release(v8);
            v8 = 0;
            *v9 = *(v9 - 2);
            *(v9 - 2) = 0;
            v7 = *(v9 - 5);
            v9 -= 2;
          }
          while (v11 < v7);
          v10 = v12;
          *(v9 - 1) = v11;
          *v9 = v10;
          v12 = 0;
          PrepassOp::~PrepassOp((PrepassOp *)&v11);
        }
        v3 = v5 + 2;
        v4 += 2;
        result = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

void sub_1AF388624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PrepassOp::~PrepassOp((PrepassOp *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    v5 = a1[1];
    if (v4 < v3)
    {
      a1[1] = a3[1];
      a3[1] = v5;
      v6 = 1;
LABEL_9:
      a2 = a3;
      goto LABEL_10;
    }
    a1[1] = a2[1];
    a2[1] = v5;
    v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    if (*a3 < v10)
    {
      v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      v6 = 2;
      a1 = a2;
      goto LABEL_9;
    }
    return 1;
  }
  if (v4 >= v3)
    return 0;
  v7 = a2[1];
  a2[1] = a3[1];
  a3[1] = v7;
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  if (*a2 >= *a1)
    return 1;
  v9 = a1[1];
  a1[1] = a2[1];
  a2[1] = v9;
  v6 = 2;
LABEL_10:
  v12 = *a1;
  *a1 = *a2;
  *a2 = v12;
  return v6;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  unint64_t v16;
  unint64_t v17;

  v4 = a1[1];
  v16 = *a1;
  v3 = v16;
  v17 = v4;
  a1[1] = 0;
  if (v3 >= *(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v3 >= *v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v3 >= v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v8);
  }
  while (v5 < a2)
  {
    v9 = v5[1];
    v5[1] = a2[1];
    a2[1] = v9;
    v10 = *v5;
    *v5 = *a2;
    *a2 = v10;
    v3 = v16;
    do
    {
      v11 = v5[2];
      v5 += 2;
    }
    while (v16 >= v11);
    do
    {
      v12 = *(a2 - 2);
      a2 -= 2;
    }
    while (v16 < v12);
  }
  if (v5 - 2 == a1)
  {
    v14 = (const void *)*(v5 - 1);
    *(v5 - 2) = v3;
    if (v14)
      _Block_release(v14);
  }
  else
  {
    *a1 = *(v5 - 2);
    v13 = (const void *)a1[1];
    if (v13)
    {
      _Block_release(v13);
      v3 = v16;
    }
    a1[1] = *(v5 - 1);
    *(v5 - 2) = v3;
    *(v5 - 1) = 0;
  }
  *(v5 - 1) = v17;
  v17 = 0;
  PrepassOp::~PrepassOp((PrepassOp *)&v16);
  return v5;
}

void sub_1AF388850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PrepassOp::~PrepassOp((PrepassOp *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  unint64_t v20;
  unint64_t v21;

  v4 = 0;
  v5 = *a1;
  v6 = a1[1];
  v20 = *a1;
  v21 = v6;
  a1[1] = 0;
  do
  {
    v7 = a1[v4 + 2];
    v4 += 2;
  }
  while (v7 < v5);
  v8 = &a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v8 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 >= v5);
  }
  v11 = (uint64_t *)&a1[v4];
  if (v8 < a2)
  {
    v12 = (uint64_t *)a2;
    do
    {
      v13 = v11[1];
      v11[1] = v12[1];
      v12[1] = v13;
      v14 = *v11;
      *v11 = *v12;
      *v12 = v14;
      v5 = v20;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (v15 < v20);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (v16 >= v20);
    }
    while (v11 < v12);
  }
  if (v11 - 2 == (uint64_t *)a1)
  {
    v18 = (const void *)*(v11 - 1);
    *(v11 - 2) = v5;
    if (v18)
      _Block_release(v18);
  }
  else
  {
    *a1 = *(v11 - 2);
    v17 = (const void *)a1[1];
    if (v17)
    {
      _Block_release(v17);
      v5 = v20;
    }
    a1[1] = *(v11 - 1);
    *(v11 - 2) = v5;
    *(v11 - 1) = 0;
  }
  *(v11 - 1) = v21;
  v21 = 0;
  PrepassOp::~PrepassOp((PrepassOp *)&v20);
  return v11 - 2;
}

void sub_1AF3889AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PrepassOp::~PrepassOp((PrepassOp *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;

  v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(a2 - 2) < *a1)
      {
        v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return v4;
    default:
      v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4);
      v8 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (*v8 >= *v7)
  {
LABEL_14:
    v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
  v11 = v8[1];
  v20 = *v8;
  v21 = v11;
  v8[1] = 0;
  v12 = *v7;
  v13 = v9;
  while (1)
  {
    v14 = (unint64_t *)((char *)a1 + v13);
    v15 = v20;
    v16 = *(unint64_t *)((char *)a1 + v13 + 40);
    v14[6] = v12;
    v14[7] = v16;
    v14[5] = 0;
    if (v13 == -32)
      break;
    v12 = v14[2];
    v13 -= 16;
    if (v15 >= v12)
    {
      v17 = (unint64_t *)((char *)a1 + v13 + 48);
      goto LABEL_12;
    }
  }
  v17 = a1;
LABEL_12:
  v18 = v21;
  *v17 = v15;
  v17[1] = v18;
  v21 = 0;
  if (++v10 != 8)
  {
    PrepassOp::~PrepassOp((PrepassOp *)&v20);
    goto LABEL_14;
  }
  v4 = v8 + 2 == a2;
  PrepassOp::~PrepassOp((PrepassOp *)&v20);
  return v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    v9 = a3[1];
    a3[1] = a4[1];
    a4[1] = v9;
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (*a3 < *a2)
    {
      v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (*a2 < *a1)
      {
        v13 = a1[1];
        a1[1] = a2[1];
        a2[1] = v13;
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    v11 = a4[1];
    a4[1] = a5[1];
    a5[1] = v11;
    v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    if (*a4 < *a3)
    {
      v13 = a3[1];
      a3[1] = a4[1];
      a4[1] = v13;
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (*a3 < *a2)
      {
        v15 = a2[1];
        a2[1] = a3[1];
        a3[1] = v15;
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if (*a2 < *a1)
        {
          v17 = a1[1];
          a1[1] = a2[1];
          a2[1] = v17;
          v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,PrepassOp *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((unint64_t *)v6 != a3)
    {
      v14 = (unint64_t *)v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = v14[1];
          v14[1] = a1[1];
          a1[1] = v15;
          v16 = *v14;
          *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,PrepassOp *>(a1, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (unint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3 >= 2)
  {
    v6 = (uint64_t)a4 - a1;
    v7 = (unint64_t)(a3 - 2) >> 1;
    if (v7 >= ((uint64_t)a4 - a1) >> 4)
    {
      v21 = v4;
      v22 = v5;
      v8 = v6 >> 3;
      v9 = (v6 >> 3) + 1;
      v10 = (unint64_t *)(a1 + 16 * v9);
      v11 = v8 + 2;
      if (v8 + 2 >= a3)
      {
        v12 = *v10;
      }
      else
      {
        v12 = *v10;
        v13 = v10[2];
        if (*v10 <= v13)
          v12 = v10[2];
        if (*v10 < v13)
        {
          v10 += 2;
          v9 = v11;
        }
      }
      if (v12 >= *a4)
      {
        v14 = a4[1];
        v19 = *a4;
        v20 = v14;
        a4[1] = 0;
        while (1)
        {
          v15 = v10;
          *a4 = v12;
          a4[1] = v10[1];
          v10[1] = 0;
          if (v7 < v9)
            break;
          v16 = (2 * v9) | 1;
          v10 = (unint64_t *)(a1 + 16 * v16);
          v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            v12 = *v10;
            v9 = v16;
          }
          else
          {
            v12 = *v10;
            v17 = v10[2];
            if (*v10 <= v17)
              v12 = v10[2];
            if (*v10 >= v17)
              v9 = v16;
            else
              v10 += 2;
          }
          v18 = v19;
          a4 = v15;
          if (v12 < v19)
            goto LABEL_23;
        }
        v18 = v19;
LABEL_23:
        *v15 = v18;
        v15[1] = v20;
        v20 = 0;
        PrepassOp::~PrepassOp((PrepassOp *)&v19);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,PrepassOp *>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  const void *v10;
  unint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;

  if (a4 >= 2)
  {
    v7 = a1[1];
    v13 = *a1;
    v14 = v7;
    a1[1] = 0;
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a3, a4);
    v9 = v8;
    if (v8 == (unint64_t *)(a2 - 16))
    {
      *v8 = v13;
      v12 = (const void *)v8[1];
      if (v12)
        _Block_release(v12);
      v9[1] = v14;
      v14 = 0;
    }
    else
    {
      *v8 = *(_QWORD *)(a2 - 16);
      v10 = (const void *)v8[1];
      if (v10)
        _Block_release(v10);
      v9[1] = *(_QWORD *)(a2 - 8);
      v11 = v14;
      *(_QWORD *)(a2 - 16) = v13;
      *(_QWORD *)(a2 - 8) = v11;
      v14 = 0;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>((uint64_t)a1, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)a1) >> 4);
    }
    PrepassOp::~PrepassOp((PrepassOp *)&v13);
  }
}

void sub_1AF389068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PrepassOp::~PrepassOp((PrepassOp *)&a9);
  _Unwind_Resume(a1);
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[2 * v5 + 2];
    if (2 * v5 + 2 >= a3)
    {
      v9 = *v8;
      v5 = (2 * v5) | 1;
    }
    else
    {
      v9 = *v8;
      v10 = a1[2 * v5 + 4];
      if (*v8 <= v10)
        v9 = a1[2 * v5 + 4];
      if (*v8 >= v10)
      {
        v5 = (2 * v5) | 1;
      }
      else
      {
        v8 = &a1[2 * v5 + 4];
        v5 = 2 * v5 + 2;
      }
    }
    *a1 = v9;
    v11 = (const void *)a1[1];
    if (v11)
      _Block_release(v11);
    a1[1] = v8[1];
    v8[1] = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v6 = (unint64_t)(a4 - 2) >> 1;
    v7 = (unint64_t *)(a1 + 16 * v6);
    v8 = (unint64_t *)(a2 - 16);
    v9 = *v7;
    if (*v7 < *(_QWORD *)(a2 - 16))
    {
      v10 = *(_QWORD *)(a2 - 8);
      v14 = *(_QWORD *)(a2 - 16);
      v15 = v10;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v11 = v7;
        *v8 = v9;
        v12 = v14;
        v8[1] = v7[1];
        v7[1] = 0;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (unint64_t *)(a1 + 16 * v6);
        v9 = *v7;
        v8 = v11;
      }
      while (*v7 < v12);
      v13 = v15;
      *v11 = v12;
      v11[1] = v13;
      v15 = 0;
      PrepassOp::~PrepassOp((PrepassOp *)&v14);
    }
  }
}

void std::vector<PrepassOp>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        PrepassOp::~PrepassOp((PrepassOp *)(v4 - 16));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void OUTLINED_FUNCTION_5_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_6_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

void OUTLINED_FUNCTION_8_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_11_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_13_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_14_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

UInt8 *OUTLINED_FUNCTION_16_0(uint64_t a1, unsigned __int8 *uu)
{
  return describe2(a1, uu);
}

void OUTLINED_FUNCTION_17(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_19_0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_21(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

UInt8 *OUTLINED_FUNCTION_22(uint64_t *a1, unsigned __int8 **a2)
{
  return describe2(*a1, *a2);
}

void OUTLINED_FUNCTION_23(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

char *OUTLINED_FUNCTION_25(int *a1)
{
  return strerror(*a1);
}

uint64_t trace_set_enable(int a1)
{
  int v2;
  unsigned int v3;
  int v4[2];
  int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v4 = 0x1800000001;
  v5 = 3;
  v6 = a1;
  if ((sysctl(v4, 4u, 0, 0, 0, 0) & 0x80000000) == 0)
    return 0;
  v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    trace_set_enable_cold_1();
  *__error() = v2;
  v3 = *__error();
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

uint64_t trace_get_bufinfo(void *a1)
{
  int v2;
  unsigned int v3;
  size_t v4;
  int v5[2];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 5;
  *(_QWORD *)v5 = 0x1800000001;
  v4 = 20;
  if ((sysctl(v5, 3u, a1, &v4, 0, 0) & 0x80000000) == 0)
    return 0;
  v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    trace_get_bufinfo_cold_1();
  *__error() = v2;
  v3 = *__error();
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

uint64_t trace_readtrace(void *a1, size_t *a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6[2];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 10;
  *(_QWORD *)v6 = 0x1800000001;
  if (sysctl(v6, 3u, a1, a2, 0, 0) < 0)
  {
    v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      trace_readtrace_cold_1();
    *__error() = v4;
    v5 = *__error();
    if (v5 <= 1)
      return 1;
    else
      return v5;
  }
  else
  {
    result = 0;
    *a2 <<= 6;
  }
  return result;
}

uint64_t trace_set_filter(void *a1)
{
  int v2;
  unsigned int v3;
  size_t v4;
  int v5[2];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 22;
  *(_QWORD *)v5 = 0x1800000001;
  v4 = 0x2000;
  if ((sysctl(v5, 3u, a1, &v4, 0, 0) & 0x80000000) == 0)
    return 0;
  v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    trace_set_filter_cold_1();
  *__error() = v2;
  v3 = *__error();
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

uint64_t trace_parse_filter(const char *a1, void *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int i;
  int v11;
  char *v13;
  char *__stringp;

  if (!strcmp(a1, "ALL"))
  {
    memset(a2, 255, 0x2000uLL);
    return 0;
  }
  bzero(a2, 0x2000uLL);
  v4 = strdup(a1);
  if (!v4)
    return 12;
  v5 = v4;
  __stringp = v4;
  v6 = (uint64_t)strsep(&__stringp, ",");
  if (!v6)
    goto LABEL_37;
  while (1)
  {
    v13 = (char *)v6;
    v7 = *(char *)v6;
    if (v7 != 67)
    {
      if (v7 != 83)
      {
        if (*(_BYTE *)v6)
        {
          *__error() = 22;
          v11 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            trace_parse_filter_cold_1();
        }
        else
        {
          *__error() = 22;
          v11 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            trace_parse_filter_cold_8();
        }
        goto LABEL_36;
      }
      v8 = strtoul((const char *)(v6 + 1), &v13, 16);
      if ((char *)(v6 + 1) == v13)
      {
        *__error() = 22;
        v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          trace_parse_filter_cold_5();
        goto LABEL_36;
      }
      if (*v13)
      {
        *__error() = 22;
        v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          trace_parse_filter_cold_7();
        goto LABEL_36;
      }
      if (v8 >= 0x10000)
      {
        *__error() = 34;
        v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          trace_parse_filter_cold_6();
        goto LABEL_36;
      }
      *((_BYTE *)a2 + (v8 >> 3)) |= 1 << (v8 & 7);
      goto LABEL_15;
    }
    v9 = strtoul((const char *)(v6 + 1), &v13, 0);
    if ((char *)(v6 + 1) == v13)
      break;
    if (*v13)
    {
      *__error() = 22;
      v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        trace_parse_filter_cold_4();
      goto LABEL_36;
    }
    if (v9 > 0xFF)
    {
      *__error() = 34;
      v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        trace_parse_filter_cold_3();
      goto LABEL_36;
    }
    for (i = 0; i != 256; ++i)
      *((_BYTE *)a2 + ((unint64_t)(i & 0xF8 | (v9 << 8)) >> 3)) |= 1 << (i & 7);
LABEL_15:
    v6 = (uint64_t)strsep(&__stringp, ",");
    if (!v6)
      goto LABEL_37;
  }
  *__error() = 22;
  v11 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    trace_parse_filter_cold_2();
LABEL_36:
  *__error() = v11;
  v6 = 1;
LABEL_37:
  free(v5);
  return v6;
}

uint64_t trace_set_pid_filter(int a1, int a2)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  size_t v7;
  _DWORD v8[2];
  uint64_t v9;
  int v10;
  int v11[2];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v11 = 0x1800000001;
  if (a1)
    v2 = 11;
  else
    v2 = 14;
  v12 = v2;
  v8[0] = 0x80000;
  v8[1] = a2;
  v9 = 1;
  v10 = 0;
  v7 = 20;
  v3 = sysctl(v11, 3u, v8, &v7, 0, 0);
  result = 0;
  if (v3 < 0)
  {
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      trace_set_pid_filter_cold_1();
    *__error() = v5;
    v6 = *__error();
    if (v6 <= 1)
      return 1;
    else
      return v6;
  }
  return result;
}

uint64_t trace_readcpumap(_QWORD *a1)
{
  uint64_t v2;

  if (trace_readcpumap_onceToken[0] != -1)
    dispatch_once(trace_readcpumap_onceToken, &__block_literal_global_10);
  v2 = trace_readcpumap_cpumap_header;
  if (!trace_readcpumap_cpumap_header)
    return 0;
  *a1 = trace_readcpumap_cpumap_header + 8;
  return *(unsigned int *)(v2 + 4);
}

void __trace_readcpumap_block_invoke()
{
  size_t v0;
  int v1[2];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  trace_readcpumap_cpumap_header = (uint64_t)malloc_type_malloc(0x1000uLL, 0xB66A7BDCuLL);
  v2 = 24;
  v0 = 4096;
  *(_QWORD *)v1 = 0x1800000001;
  if (sysctl(v1, 3u, (void *)trace_readcpumap_cpumap_header, &v0, 0, 0)
    || v0 > 0x1000
    || *(_DWORD *)trace_readcpumap_cpumap_header != 1437204737)
  {
    free((void *)trace_readcpumap_cpumap_header);
    trace_readcpumap_cpumap_header = 0;
  }
}

uint64_t trace_initialize(int a1)
{
  return trace_initialize_bufs(a1 << 14);
}

uint64_t trace_initialize_bufs(int a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  int v5[2];
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = trace_remove_internal();
  if (!(_DWORD)result)
  {
    *(_QWORD *)v5 = 0x1800000001;
    v6 = 4;
    v7 = a1;
    if (sysctl(v5, 4u, 0, 0, 0, 0) < 0)
    {
      v3 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        trace_initialize_bufs_cold_1();
    }
    else
    {
      v6 = 6;
      if ((sysctl(v5, 3u, 0, 0, 0, 0) & 0x80000000) == 0)
        return 0;
      v3 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        trace_initialize_bufs_cold_2();
    }
    *__error() = v3;
    v4 = *__error();
    if (v4 <= 1)
      return 1;
    else
      return v4;
  }
  return result;
}

uint64_t trace_remove_internal()
{
  unsigned int v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = xmmword_1AF3E9EF8;
  v3 = 0;
  if ((sysctl((int *)&v2, 3u, 0, 0, 0, 0) & 0x80000000) == 0)
    return 0;
  v1 = *__error();
  if (v1 <= 1)
    return 1;
  else
    return v1;
}

uint64_t trace_set_flags(int a1)
{
  int v2;
  unsigned int v3;
  size_t v4;
  int v5[2];
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v5 = 0x1800000001;
  v6 = 1;
  v7 = a1;
  v4 = 0;
  if ((sysctl(v5, 4u, 0, &v4, 0, 0) & 0x80000000) == 0)
    return 0;
  v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    trace_set_flags_cold_1();
  *__error() = v2;
  v3 = *__error();
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

uint64_t trace_set_event_match_disable(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  size_t v7;
  int v8[2];
  int v9;
  _BYTE v10[40];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 32);
  *(_OWORD *)&v10[8] = *(_OWORD *)(a1 + 8);
  v2 = *(_OWORD *)(a1 + 24);
  v3 = *(_OWORD *)(a2 + 8);
  v11 = 0;
  v12 = v3;
  *(_OWORD *)&v10[24] = v2;
  *(_DWORD *)v10 = *(_DWORD *)a1;
  LODWORD(v11) = *(_DWORD *)a2;
  v13 = *(_OWORD *)(a2 + 24);
  v7 = 80;
  *(_QWORD *)v8 = 0x1800000001;
  v9 = 26;
  result = sysctl(v8, 3u, v10, &v7, 0, 0);
  if ((_DWORD)result)
  {
    v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      trace_set_event_match_disable_cold_1();
    *__error() = v5;
    v6 = *__error();
    if (v6 <= 1)
      return 1;
    else
      return v6;
  }
  return result;
}

uint64_t trace_wait(size_t a1)
{
  size_t v2;
  int v3[2];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 23;
  v2 = a1;
  *(_QWORD *)v3 = 0x1800000001;
  return sysctl(v3, 3u, 0, &v2, 0, 0);
}

uint64_t trace_free(void *a1)
{
  uint64_t v2;
  uint64_t result;

  if (pthread_mutex_lock(&trace_buffer_mutex))
    ktrace_remotetime_update_params_cold_1();
  v2 = 0;
  while (trace_buffer_cache[v2])
  {
    if (++v2 == 16)
      ktrace_remotetime_update_params_cold_1();
  }
  trace_buffer_cache[v2] = (uint64_t)a1;
  if (v2 * 8)
  {
    madvise(a1, trace_buffer_size, 7);
  }
  else if (pthread_cond_signal(&trace_buffer_cond))
  {
    ktrace_remotetime_update_params_cold_1();
  }
  result = pthread_mutex_unlock(&trace_buffer_mutex);
  if ((_DWORD)result)
    ktrace_remotetime_update_params_cold_1();
  return result;
}

uint64_t trace_collect(_QWORD *a1, size_t *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  if (!a3)
    ktrace_remotetime_update_params_cold_1();
  result = trace_get_bufinfo(&v14);
  if ((_DWORD)result)
    return result;
  result = 55;
  if ((v15 & 0x80000000) == 0)
    return result;
  v7 = v14;
  if (!(_DWORD)v14)
    return result;
  *a3 = v15;
  v8 = (uint64_t)v7 << 6;
  if (trace_buffer_size)
  {
    if (v8 > trace_buffer_size)
      return 37;
  }
  else
  {
    trace_buffer_size = (uint64_t)v7 << 6;
  }
  *a2 = v8;
  if (pthread_mutex_lock(&trace_buffer_mutex))
    ktrace_remotetime_update_params_cold_1();
  v9 = 0;
  while (1)
  {
    while (!trace_buffer_cache[v9])
    {
      if (++v9 == 16)
        goto LABEL_18;
    }
    if ((_DWORD)v9 != 16)
      break;
LABEL_18:
    if (trace_buffer_count == 16)
    {
      v10 = pthread_cond_wait(&trace_buffer_cond, &trace_buffer_mutex);
      v9 = 0;
      if (v10)
        ktrace_remotetime_update_params_cold_1();
    }
    else
    {
      trace_buffer_cache[0] = (uint64_t)malloc_type_malloc(trace_buffer_size, 0x6526605DuLL);
      if (trace_buffer_cache[0])
      {
        v12 = 0;
        ++trace_buffer_count;
        goto LABEL_28;
      }
      v11 = pthread_cond_wait(&trace_buffer_cond, &trace_buffer_mutex);
      v9 = 0;
      if (v11)
        ktrace_remotetime_update_params_cold_1();
    }
  }
  if ((_DWORD)v9)
  {
    v12 = v9;
    madvise((void *)trace_buffer_cache[v9], trace_buffer_size, 8);
  }
  else
  {
    v12 = 0;
  }
LABEL_28:
  v13 = (void *)trace_buffer_cache[v12];
  trace_buffer_cache[v12] = 0;
  if (pthread_mutex_unlock(&trace_buffer_mutex))
    ktrace_remotetime_update_params_cold_1();
  if (!v13)
    ktrace_remotetime_update_params_cold_1();
  *a1 = v13;
  return trace_readtrace(v13, a2);
}

BOOL trace_enumerate(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  char v4;
  unint64_t v5;
  unint64_t v8;

  if (a3)
    v4 = 6;
  else
    v4 = 5;
  v5 = a2 >> v4;
  if (a2 >> v4)
  {
    v8 = 0;
    while (!(*(unsigned int (**)(uint64_t, unint64_t))(a4 + 16))(a4, a1 + (v8 << v4)))
    {
      if (v5 == ++v8)
      {
        v8 = v5;
        return v8 == v5;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 == v5;
}

uint64_t trace_last_trace_point(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  v3 = 32;
  if (a3)
    v3 = 64;
  v4 = 5;
  if (a3)
    v4 = 6;
  v5 = a1 + (((a2 >> v4) - 1) << v4);
  if (v3 <= a2)
    return v5;
  else
    return 0;
}

void trace_readcurthreadmap(void **a1, _DWORD *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  size_t v7;
  int v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (!a2)
    ktrace_remotetime_update_params_cold_1();
  v7 = 263168;
  v4 = malloc_type_malloc(0x40400uLL, 0x526E2A4CuLL);
  *a1 = v4;
  if (!v4)
    ktrace_remotetime_update_params_cold_1();
  *(_QWORD *)v8 = 0x1800000001;
  v9 = 21;
  if (sysctl(v8, 3u, v4, &v7, 0, 0) < 0)
  {
    v6 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      trace_readcurthreadmap_cold_4();
    *__error() = v6;
    free(*a1);
    LODWORD(v5) = 0;
    *a1 = 0;
  }
  else
  {
    v5 = (unint64_t)(int)v7 >> 5;
  }
  *a2 = v5;
}

int *vfs_trace_paths()
{
  int *result;
  int v1;

  result = (int *)sysctlbyname("vfs.generic.trace_paths", 0, 0, 0, 0);
  if ((_DWORD)result)
  {
    v1 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      vfs_trace_paths_cold_1();
    result = __error();
    *result = v1;
  }
  return result;
}

void vnode_path_map_update(CFDictionaryRef *a1, int a2, uint64_t a3, int a4)
{
  char *v5;
  uint64_t v6;
  const void *v7;
  char *v8;
  unint64_t v9;
  int *v10;
  size_t v11;
  const void *v12;
  const void *v13;
  int v14;
  char *v15;
  char *v16;
  const char *Value;
  __CFDictionary *v18;
  char *v19;
  __CFDictionary *v20;
  const void *v21;
  char *v22;
  size_t v23;
  unint64_t v24;

  if ((a2 & 0xFFFFFFFC) == 0x3010094)
  {
    if (a4)
    {
      v12 = *(const void **)(a3 + 8);
      v13 = *(const void **)(a3 + 16);
    }
    else
    {
      v12 = (const void *)*(unsigned int *)(a3 + 8);
      v13 = (const void *)*(unsigned int *)(a3 + 12);
    }
    Value = (const char *)CFDictionaryGetValue(a1[1], v12);
    v18 = a1[1];
    if (!Value)
    {
      CFDictionaryRemoveValue(v18, v13);
      return;
    }
    v19 = strdup(Value);
    v20 = v18;
    v21 = v13;
LABEL_25:
    CFDictionarySetValue(v20, v21, v19);
    return;
  }
  if ((a2 & 0xFFFFFFFC) != 0x3010090)
    abort();
  if (a4)
  {
    v5 = (char *)(a3 + 8);
    v6 = *(_QWORD *)(a3 + 8);
    v7 = *(const void **)(a3 + 40);
    v8 = (char *)(a3 + 16);
    v9 = a3 + 32;
    v10 = (int *)(a3 + 48);
    v11 = 8;
  }
  else
  {
    v5 = (char *)(a3 + 8);
    v6 = *(unsigned int *)(a3 + 8);
    v7 = (const void *)*(unsigned int *)(a3 + 24);
    v8 = (char *)(a3 + 12);
    v9 = a3 + 20;
    v10 = (int *)(a3 + 28);
    v11 = 4;
  }
  v14 = *v10;
  v15 = (char *)CFDictionaryGetValue(*a1, v7);
  v16 = v15;
  if ((v14 & 1) != 0)
  {
    if (v15)
      free(v15);
    v22 = (char *)malloc_type_calloc(1uLL, 0x410uLL, 0x1000040580BD41FuLL);
    if (!v22)
      ktrace_remotetime_update_params_cold_1();
    v16 = v22;
    CFDictionarySetValue(*a1, v7, v22);
    *((_QWORD *)v16 + 129) = v6;
    v5 = v8;
  }
  else if (!v15)
  {
    return;
  }
  if ((unint64_t)v5 <= v9)
  {
    v23 = strlen(v16);
    v24 = v11 - v23 + 1024;
    do
    {
      if (v23 + 1 >= 0x402)
        ktrace_remotetime_update_params_cold_1();
      v24 -= v11;
      if (v24 < v11)
        break;
      memcpy(&v16[v23], v5, v11);
      v23 += v11;
      v5 += 8;
    }
    while ((unint64_t)v5 <= v9);
  }
  if ((v14 & 2) != 0)
  {
    CFDictionaryRemoveValue(*a1, v7);
    v20 = a1[1];
    v21 = (const void *)*((_QWORD *)v16 + 129);
    v19 = v16;
    goto LABEL_25;
  }
}

void vnode_path_map_destroy(CFDictionaryRef *a1)
{
  const __CFDictionary *v2;
  CFIndex Count;
  uint64_t v4;
  const void **v5;
  void **v6;
  void *v7;
  CFDictionaryRef v8;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      Count = CFDictionaryGetCount(v2);
      if (Count)
      {
        v4 = Count;
        v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(*a1, 0, v5);
        if (v4 >= 1)
        {
          v6 = (void **)v5;
          do
          {
            v7 = *v6++;
            free(v7);
            --v4;
          }
          while (v4);
        }
        free(v5);
      }
      CFRelease(*a1);
    }
    v8 = a1[1];
    if (v8)
      CFRelease(v8);
    free(a1);
  }
}

CFMutableDictionaryRef ktrace_set_vnode_paths_enabled(CFMutableDictionaryRef result, int a2)
{
  CFMutableDictionaryRef v2;
  BOOL v3;
  _QWORD *v4;

  if (!result)
    ktrace_remotetime_update_params_cold_1();
  v2 = result;
  if ((*((_WORD *)result + 112) & 3) != 0)
    ktrace_set_thread_cputime_enabled_cold_4();
  if (*((_DWORD *)result + 67))
    v3 = 1;
  else
    v3 = a2 == 0;
  if (!v3)
  {
    *((_DWORD *)result + 67) = 1;
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *((_QWORD *)v2 + 50) = v4;
    *v4 = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, 0);
    result = CFDictionaryCreateMutable(0, 0, &int_key_callbacks, &str_value_callbacks);
    v4[1] = result;
    if (!*v4 || !result)
      ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

uint64_t ktrace_get_vnode_paths_enabled(uint64_t a1)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  return *(unsigned int *)(a1 + 268);
}

const void *ktrace_get_path_for_vp(uint64_t a1, const void *a2)
{
  if (!a1)
    ktrace_remotetime_update_params_cold_1();
  if (*(_DWORD *)(a1 + 268))
    return CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 400) + 8), a2);
  else
    return 0;
}

BOOL sub_1AF38A9A0(char *a1, char *a2)
{
  return byte_1AF3EAFE6[*a1] == byte_1AF3EAFE6[*a2];
}

uint64_t sub_1AF38A9C4()
{
  sub_1AF3E80D8();
  sub_1AF3E80F0();
  return sub_1AF3E8114();
}

uint64_t sub_1AF38AA10()
{
  return sub_1AF3E80F0();
}

uint64_t sub_1AF38AA44()
{
  sub_1AF3E80D8();
  sub_1AF3E80F0();
  return sub_1AF3E8114();
}

uint64_t sub_1AF38AA8C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1AF38CBEC(*a1);
  *a2 = result;
  return result;
}

void sub_1AF38AAB4(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_1AF3EAFE6[*v1];
}

uint64_t sub_1AF38AAD0(unsigned __int8 *a1)
{
  return ((uint64_t (*)())((char *)sub_1AF38AAF4 + 4 * word_1AF3E9F1C[*a1]))();
}

uint64_t sub_1AF38AAF4()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_1AF38AFB4 + 4 * word_1AF3EA048[v0]))();
}

BOOL sub_1AF38AFB4@<W0>(int a1@<W8>)
{
  return a1 == 259;
}

void sub_1AF38B464()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1AF3E80D8();
  __asm { BR              X9 }
}

uint64_t sub_1AF38B4A0()
{
  sub_1AF3E80FC();
  return sub_1AF3E8114();
}

void sub_1AF38B964()
{
  __asm { BR              X11 }
}

uint64_t sub_1AF38B994()
{
  return sub_1AF3E80FC();
}

void sub_1AF38BE4C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1AF3E80D8();
  __asm { BR              X9 }
}

uint64_t sub_1AF38BE84()
{
  sub_1AF3E80FC();
  return sub_1AF3E8114();
}

uint64_t sub_1AF38C348@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1AF38CD90(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1AF38C370()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1AF38C390 + 4 * word_1AF3EA4F8[*v0]))();
}

void sub_1AF38C390(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void sub_1AF38C39C(_WORD *a1@<X8>)
{
  *a1 = 260;
}

void sub_1AF38C3A8(_WORD *a1@<X8>)
{
  *a1 = 261;
}

void sub_1AF38C3B4(_WORD *a1@<X8>)
{
  *a1 = 262;
}

void sub_1AF38C3C0(_WORD *a1@<X8>)
{
  *a1 = 263;
}

void sub_1AF38C3CC(_WORD *a1@<X8>)
{
  *a1 = 264;
}

void sub_1AF38C3D8(_WORD *a1@<X8>)
{
  *a1 = 265;
}

void sub_1AF38C3E4(_WORD *a1@<X8>)
{
  *a1 = 266;
}

void sub_1AF38C3F0(_WORD *a1@<X8>)
{
  *a1 = 268;
}

void sub_1AF38C3FC(_WORD *a1@<X8>)
{
  *a1 = 269;
}

void sub_1AF38C408(_WORD *a1@<X8>)
{
  *a1 = 270;
}

void sub_1AF38C414(_WORD *a1@<X8>)
{
  *a1 = 272;
}

void sub_1AF38C420(_WORD *a1@<X8>)
{
  *a1 = 288;
}

void sub_1AF38C42C(_WORD *a1@<X8>)
{
  *a1 = 293;
}

void sub_1AF38C438(_WORD *a1@<X8>)
{
  *a1 = 304;
}

void sub_1AF38C444(_WORD *a1@<X8>)
{
  *a1 = 305;
}

void sub_1AF38C450(_WORD *a1@<X8>)
{
  *a1 = 306;
}

void sub_1AF38C45C(_WORD *a1@<X8>)
{
  *a1 = 320;
}

void sub_1AF38C468(_WORD *a1@<X8>)
{
  *a1 = 336;
}

void sub_1AF38C474(_WORD *a1@<X8>)
{
  *a1 = 352;
}

void sub_1AF38C480(_WORD *a1@<X8>)
{
  *a1 = 368;
}

void sub_1AF38C48C(_WORD *a1@<X8>)
{
  *a1 = 384;
}

void sub_1AF38C498(_WORD *a1@<X8>)
{
  *a1 = 400;
}

void sub_1AF38C4A4(_WORD *a1@<X8>)
{
  *a1 = 416;
}

void sub_1AF38C4B0(_WORD *a1@<X8>)
{
  *a1 = 417;
}

void sub_1AF38C4BC(_WORD *a1@<X8>)
{
  *a1 = 418;
}

void sub_1AF38C4C8(_WORD *a1@<X8>)
{
  *a1 = 419;
}

void sub_1AF38C4D4(_WORD *a1@<X8>)
{
  *a1 = 420;
}

void sub_1AF38C4E0(_WORD *a1@<X8>)
{
  *a1 = 421;
}

void sub_1AF38C4EC(_WORD *a1@<X8>)
{
  *a1 = 422;
}

void sub_1AF38C4F8(_WORD *a1@<X8>)
{
  *a1 = 423;
}

void sub_1AF38C504(_WORD *a1@<X8>)
{
  *a1 = 424;
}

void sub_1AF38C510(_WORD *a1@<X8>)
{
  *a1 = 425;
}

void sub_1AF38C51C(_WORD *a1@<X8>)
{
  *a1 = 426;
}

void sub_1AF38C528(_WORD *a1@<X8>)
{
  *a1 = 427;
}

void sub_1AF38C534(_WORD *a1@<X8>)
{
  *a1 = 428;
}

void sub_1AF38C540(_WORD *a1@<X8>)
{
  *a1 = 429;
}

void sub_1AF38C54C(_WORD *a1@<X8>)
{
  *a1 = 430;
}

void sub_1AF38C558(_WORD *a1@<X8>)
{
  *a1 = 431;
}

void sub_1AF38C564(_WORD *a1@<X8>)
{
  *a1 = 1537;
}

void sub_1AF38C570(_WORD *a1@<X8>)
{
  *a1 = 1538;
}

void sub_1AF38C57C(_WORD *a1@<X8>)
{
  *a1 = 1539;
}

void sub_1AF38C588(_WORD *a1@<X8>)
{
  *a1 = 1540;
}

void sub_1AF38C594(_WORD *a1@<X8>)
{
  *a1 = 1541;
}

void sub_1AF38C5A0(_WORD *a1@<X8>)
{
  *a1 = 1543;
}

void sub_1AF38C5AC(_WORD *a1@<X8>)
{
  *a1 = 1544;
}

void sub_1AF38C5B8(_WORD *a1@<X8>)
{
  *a1 = 1545;
}

void sub_1AF38C5C4(_WORD *a1@<X8>)
{
  *a1 = 1546;
}

void sub_1AF38C5D0(_WORD *a1@<X8>)
{
  *a1 = 1547;
}

void sub_1AF38C5DC(_WORD *a1@<X8>)
{
  *a1 = 1548;
}

void sub_1AF38C5E8(_WORD *a1@<X8>)
{
  *a1 = 1549;
}

void sub_1AF38C5F4(_WORD *a1@<X8>)
{
  *a1 = 1550;
}

void sub_1AF38C600(_WORD *a1@<X8>)
{
  *a1 = 1551;
}

void sub_1AF38C60C(_WORD *a1@<X8>)
{
  *a1 = 1552;
}

void sub_1AF38C618(_WORD *a1@<X8>)
{
  *a1 = 1553;
}

void sub_1AF38C624(_WORD *a1@<X8>)
{
  *a1 = 1554;
}

void sub_1AF38C630(_WORD *a1@<X8>)
{
  *a1 = 1555;
}

void sub_1AF38C63C(_WORD *a1@<X8>)
{
  *a1 = 1556;
}

void sub_1AF38C648(_WORD *a1@<X8>)
{
  *a1 = 1557;
}

void sub_1AF38C654(_WORD *a1@<X8>)
{
  *a1 = 1558;
}

void sub_1AF38C660(_WORD *a1@<X8>)
{
  *a1 = 1559;
}

void sub_1AF38C66C(_WORD *a1@<X8>)
{
  *a1 = 1560;
}

void sub_1AF38C678(_WORD *a1@<X8>)
{
  *a1 = 1561;
}

void sub_1AF38C684(_WORD *a1@<X8>)
{
  *a1 = 1562;
}

void sub_1AF38C690(_WORD *a1@<X8>)
{
  *a1 = 1563;
}

void sub_1AF38C69C(_WORD *a1@<X8>)
{
  *a1 = 1564;
}

void sub_1AF38C6A8(_WORD *a1@<X8>)
{
  *a1 = 1565;
}

void sub_1AF38C6B4(_WORD *a1@<X8>)
{
  *a1 = 1566;
}

void sub_1AF38C6C0(_WORD *a1@<X8>)
{
  *a1 = 1567;
}

void sub_1AF38C6CC(_WORD *a1@<X8>)
{
  *a1 = 1568;
}

void sub_1AF38C6D8(_WORD *a1@<X8>)
{
  *a1 = 1569;
}

void sub_1AF38C6E4(_WORD *a1@<X8>)
{
  *a1 = 769;
}

void sub_1AF38C6F0(_WORD *a1@<X8>)
{
  *a1 = 770;
}

void sub_1AF38C6FC(_WORD *a1@<X8>)
{
  *a1 = 771;
}

void sub_1AF38C708(_WORD *a1@<X8>)
{
  *a1 = 772;
}

void sub_1AF38C714(_WORD *a1@<X8>)
{
  *a1 = 773;
}

void sub_1AF38C720(_WORD *a1@<X8>)
{
  *a1 = 774;
}

void sub_1AF38C72C(_WORD *a1@<X8>)
{
  *a1 = 775;
}

void sub_1AF38C738(_WORD *a1@<X8>)
{
  *a1 = 776;
}

void sub_1AF38C744(_WORD *a1@<X8>)
{
  *a1 = 777;
}

void sub_1AF38C750(_WORD *a1@<X8>)
{
  *a1 = 778;
}

void sub_1AF38C75C(_WORD *a1@<X8>)
{
  *a1 = 779;
}

void sub_1AF38C768(_WORD *a1@<X8>)
{
  *a1 = 782;
}

void sub_1AF38C774(_WORD *a1@<X8>)
{
  *a1 = 783;
}

void sub_1AF38C780(_WORD *a1@<X8>)
{
  *a1 = 784;
}

void sub_1AF38C78C(_WORD *a1@<X8>)
{
  *a1 = 785;
}

void sub_1AF38C798(_WORD *a1@<X8>)
{
  *a1 = 786;
}

void sub_1AF38C7A4(_WORD *a1@<X8>)
{
  *a1 = 787;
}

void sub_1AF38C7B0(_WORD *a1@<X8>)
{
  *a1 = 788;
}

void sub_1AF38C7BC(_WORD *a1@<X8>)
{
  *a1 = 789;
}

void sub_1AF38C7C8(_WORD *a1@<X8>)
{
  *a1 = 975;
}

void sub_1AF38C7D4(_WORD *a1@<X8>)
{
  *a1 = 1025;
}

void sub_1AF38C7E0(_WORD *a1@<X8>)
{
  *a1 = 1026;
}

void sub_1AF38C7EC(_WORD *a1@<X8>)
{
  *a1 = 1027;
}

void sub_1AF38C7F8(_WORD *a1@<X8>)
{
  *a1 = 1036;
}

void sub_1AF38C804(_WORD *a1@<X8>)
{
  *a1 = 1037;
}

void sub_1AF38C810(_WORD *a1@<X8>)
{
  *a1 = 1038;
}

void sub_1AF38C81C(_WORD *a1@<X8>)
{
  *a1 = 1039;
}

void sub_1AF38C828(_WORD *a1@<X8>)
{
  *a1 = 1279;
}

void sub_1AF38C834(_WORD *a1@<X8>)
{
  *a1 = 1792;
}

void sub_1AF38C840(_WORD *a1@<X8>)
{
  *a1 = 1793;
}

void sub_1AF38C84C(_WORD *a1@<X8>)
{
  *a1 = 1794;
}

void sub_1AF38C858(_WORD *a1@<X8>)
{
  *a1 = 9472;
}

void sub_1AF38C864(_WORD *a1@<X8>)
{
  *a1 = 9473;
}

void sub_1AF38C870(_WORD *a1@<X8>)
{
  *a1 = 9474;
}

void sub_1AF38C87C(_WORD *a1@<X8>)
{
  *a1 = 9475;
}

void sub_1AF38C888(_WORD *a1@<X8>)
{
  *a1 = 9476;
}

void sub_1AF38C894(_WORD *a1@<X8>)
{
  *a1 = 9477;
}

void sub_1AF38C8A0(_WORD *a1@<X8>)
{
  *a1 = 9478;
}

void sub_1AF38C8AC(_WORD *a1@<X8>)
{
  *a1 = 9479;
}

void sub_1AF38C8B8(_WORD *a1@<X8>)
{
  *a1 = 9480;
}

void sub_1AF38C8C4(_WORD *a1@<X8>)
{
  *a1 = 9481;
}

void sub_1AF38C8D0(_WORD *a1@<X8>)
{
  *a1 = 9482;
}

void sub_1AF38C8DC(_WORD *a1@<X8>)
{
  *a1 = 5121;
}

void sub_1AF38C8E8(_WORD *a1@<X8>)
{
  *a1 = 5122;
}

void sub_1AF38C8F4(_WORD *a1@<X8>)
{
  *a1 = 5136;
}

void sub_1AF38C900(_WORD *a1@<X8>)
{
  *a1 = 5137;
}

void sub_1AF38C90C(_WORD *a1@<X8>)
{
  *a1 = 5138;
}

void sub_1AF38C918(_WORD *a1@<X8>)
{
  *a1 = 5139;
}

void sub_1AF38C924(_WORD *a1@<X8>)
{
  *a1 = 5140;
}

void sub_1AF38C930(_WORD *a1@<X8>)
{
  *a1 = 5146;
}

void sub_1AF38C93C(_WORD *a1@<X8>)
{
  *a1 = 5152;
}

void sub_1AF38C948(_WORD *a1@<X8>)
{
  *a1 = 8451;
}

void sub_1AF38C954(_WORD *a1@<X8>)
{
  *a1 = 8452;
}

void sub_1AF38C960(_WORD *a1@<X8>)
{
  *a1 = 8453;
}

void sub_1AF38C96C(_WORD *a1@<X8>)
{
  *a1 = 8458;
}

void sub_1AF38C978(_WORD *a1@<X8>)
{
  *a1 = 8459;
}

void sub_1AF38C984(_WORD *a1@<X8>)
{
  *a1 = 8460;
}

void sub_1AF38C990(_WORD *a1@<X8>)
{
  *a1 = 8461;
}

void sub_1AF38C99C(_WORD *a1@<X8>)
{
  *a1 = 8462;
}

void sub_1AF38C9A8(_WORD *a1@<X8>)
{
  *a1 = 8463;
}

void sub_1AF38C9B4(_WORD *a1@<X8>)
{
  *a1 = 8464;
}

void sub_1AF38C9C0(_WORD *a1@<X8>)
{
  *a1 = 8465;
}

void sub_1AF38C9CC(_WORD *a1@<X8>)
{
  *a1 = 8466;
}

void sub_1AF38C9D8(_WORD *a1@<X8>)
{
  *a1 = 8576;
}

void sub_1AF38C9E4(_WORD *a1@<X8>)
{
  *a1 = 8577;
}

void sub_1AF38C9F0(_WORD *a1@<X8>)
{
  *a1 = 8578;
}

void sub_1AF38C9FC(_WORD *a1@<X8>)
{
  *a1 = 8579;
}

void sub_1AF38CA08(_WORD *a1@<X8>)
{
  *a1 = 9744;
}

void sub_1AF38CA14(_WORD *a1@<X8>)
{
  *a1 = 9745;
}

void sub_1AF38CA20(_WORD *a1@<X8>)
{
  *a1 = 9746;
}

void sub_1AF38CA2C(_WORD *a1@<X8>)
{
  *a1 = 9747;
}

void sub_1AF38CA38(_WORD *a1@<X8>)
{
  *a1 = 9751;
}

void sub_1AF38CA44(_WORD *a1@<X8>)
{
  *a1 = 9752;
}

void sub_1AF38CA50(_WORD *a1@<X8>)
{
  *a1 = 9753;
}

void sub_1AF38CA5C(_WORD *a1@<X8>)
{
  *a1 = 9754;
}

void sub_1AF38CA68(_WORD *a1@<X8>)
{
  *a1 = 9755;
}

void sub_1AF38CA74(_WORD *a1@<X8>)
{
  *a1 = 9756;
}

void sub_1AF38CA80(_WORD *a1@<X8>)
{
  *a1 = 9757;
}

uint64_t sub_1AF38CA8C(unsigned __int16 a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sub_1AF38CD90(a1) != 150)
    return sub_1AF3E78F8();
  if (sub_1AF38CBEC(HIBYTE(a1)) == 47)
    v2 = 0x6E776F6E6B6E55;
  else
    v2 = sub_1AF3E78F8();
  sub_1AF3E7DE4();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B458);
  v4 = swift_allocObject();
  v5 = MEMORY[0x1E0DEE068];
  *(_OWORD *)(v4 + 16) = xmmword_1AF3EB020;
  v6 = MEMORY[0x1E0DEE0D0];
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = v6;
  *(_WORD *)(v4 + 32) = a1;
  sub_1AF3E78D4();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  return v2;
}

uint64_t sub_1AF38CBEC(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 6;
      break;
    case 7:
      result = 7;
      break;
    case 8:
      result = 8;
      break;
    case 9:
      result = 9;
      break;
    case 10:
      result = 10;
      break;
    case 11:
      result = 11;
      break;
    case 19:
      result = 12;
      break;
    case 29:
      result = 13;
      break;
    case 30:
      result = 14;
      break;
    case 31:
      result = 15;
      break;
    case 32:
      result = 16;
      break;
    case 33:
      result = 17;
      break;
    case 34:
      result = 18;
      break;
    case 35:
      result = 33;
      break;
    case 36:
      result = 19;
      break;
    case 37:
      result = 20;
      break;
    case 38:
      result = 34;
      break;
    case 39:
      result = 21;
      break;
    case 40:
      result = 22;
      break;
    case 41:
      result = 23;
      break;
    case 42:
      result = 24;
      break;
    case 43:
      result = 25;
      break;
    case 44:
      result = 26;
      break;
    case 45:
      result = 27;
      break;
    case 48:
      result = 28;
      break;
    case 49:
      result = 35;
      break;
    case 50:
      result = 29;
      break;
    case 51:
      result = 36;
      break;
    case 52:
      result = 30;
      break;
    case 53:
      result = 31;
      break;
    case 127:
      result = 37;
      break;
    case 128:
      result = 38;
      break;
    case 129:
      result = 39;
      break;
    case 130:
      result = 40;
      break;
    case 131:
      result = 41;
      break;
    case 132:
      result = 42;
      break;
    case 133:
      result = 43;
      break;
    case 134:
      result = 44;
      break;
    case 135:
      result = 45;
      break;
    case 136:
      result = 46;
      break;
    case 254:
      result = 32;
      break;
    default:
      result = 47;
      break;
  }
  return result;
}

uint64_t sub_1AF38CD90(unsigned __int16 a1)
{
  int v2;
  uint64_t result;

  v2 = a1;
  if (a1 > 0x600u)
  {
    if (a1 > 0x1400u)
    {
      switch(a1)
      {
        case 0x2500u:
          result = 103;
          break;
        case 0x2501u:
          result = 104;
          break;
        case 0x2502u:
          result = 105;
          break;
        case 0x2503u:
          result = 106;
          break;
        case 0x2504u:
          result = 107;
          break;
        case 0x2505u:
          result = 108;
          break;
        case 0x2506u:
          result = 109;
          break;
        case 0x2507u:
          result = 110;
          break;
        case 0x2508u:
          result = 111;
          break;
        case 0x2509u:
          result = 112;
          break;
        case 0x250Au:
          result = 113;
          break;
        default:
          switch(a1)
          {
            case 0x1401u:
              result = 114;
              break;
            case 0x1402u:
              result = 115;
              break;
            case 0x1403u:
            case 0x1404u:
            case 0x1405u:
            case 0x1406u:
            case 0x1407u:
            case 0x1408u:
            case 0x1409u:
            case 0x140Au:
            case 0x140Bu:
            case 0x140Cu:
            case 0x140Du:
            case 0x140Eu:
            case 0x140Fu:
            case 0x1415u:
            case 0x1416u:
            case 0x1417u:
            case 0x1418u:
            case 0x1419u:
            case 0x141Bu:
            case 0x141Cu:
            case 0x141Du:
            case 0x141Eu:
            case 0x141Fu:
LABEL_139:
              switch(a1)
              {
                case 0x2610u:
                  result = 139;
                  break;
                case 0x2611u:
                  result = 140;
                  break;
                case 0x2612u:
                  result = 141;
                  break;
                case 0x2613u:
                  result = 142;
                  break;
                case 0x2614u:
                case 0x2615u:
                case 0x2616u:
LABEL_143:
                  result = 150;
                  break;
                case 0x2617u:
                  result = 143;
                  break;
                case 0x2618u:
                  result = 144;
                  break;
                case 0x2619u:
                  result = 145;
                  break;
                case 0x261Au:
                  result = 146;
                  break;
                case 0x261Bu:
                  result = 147;
                  break;
                case 0x261Cu:
                  result = 148;
                  break;
                case 0x261Du:
                  result = 149;
                  break;
                default:
                  result = 128;
                  switch(a1)
                  {
                    case 0x210Cu:
                      return result;
                    case 0x210Du:
                      result = 129;
                      break;
                    case 0x210Eu:
                      result = 130;
                      break;
                    case 0x210Fu:
                      result = 131;
                      break;
                    case 0x2110u:
                      result = 132;
                      break;
                    case 0x2111u:
                      result = 133;
                      break;
                    case 0x2112u:
                      result = 134;
                      break;
                    default:
                      switch(a1)
                      {
                        case 0x2180u:
                          result = 135;
                          break;
                        case 0x2181u:
                          result = 136;
                          break;
                        case 0x2182u:
                          result = 137;
                          break;
                        case 0x2183u:
                          result = 138;
                          break;
                        default:
                          goto LABEL_143;
                      }
                      break;
                  }
                  break;
              }
              break;
            case 0x1410u:
              result = 116;
              break;
            case 0x1411u:
              result = 117;
              break;
            case 0x1412u:
              result = 118;
              break;
            case 0x1413u:
              result = 119;
              break;
            case 0x1414u:
              result = 120;
              break;
            case 0x141Au:
              result = 121;
              break;
            case 0x1420u:
              result = 122;
              break;
            default:
              switch(a1)
              {
                case 0x2103u:
                  result = 123;
                  break;
                case 0x2104u:
                  result = 124;
                  break;
                case 0x2105u:
                  result = 125;
                  break;
                case 0x210Au:
                  result = 126;
                  break;
                case 0x210Bu:
                  result = 127;
                  break;
                default:
                  goto LABEL_139;
              }
              break;
          }
          break;
      }
    }
    else
    {
      result = 54;
      switch(v2)
      {
        case 1537:
          result = 40;
          break;
        case 1538:
          result = 41;
          break;
        case 1539:
          result = 42;
          break;
        case 1540:
          result = 43;
          break;
        case 1541:
          result = 44;
          break;
        case 1543:
          result = 45;
          break;
        case 1544:
          result = 46;
          break;
        case 1545:
          result = 47;
          break;
        case 1546:
          result = 48;
          break;
        case 1547:
          result = 49;
          break;
        case 1548:
          result = 50;
          break;
        case 1549:
          result = 51;
          break;
        case 1550:
          result = 52;
          break;
        case 1551:
          result = 53;
          break;
        case 1552:
          return result;
        case 1553:
          result = 55;
          break;
        case 1554:
          result = 56;
          break;
        case 1555:
          result = 57;
          break;
        case 1556:
          result = 58;
          break;
        case 1557:
          result = 59;
          break;
        case 1558:
          result = 60;
          break;
        case 1559:
          result = 61;
          break;
        case 1560:
          result = 62;
          break;
        case 1561:
          result = 63;
          break;
        case 1562:
          result = 64;
          break;
        case 1563:
          result = 65;
          break;
        case 1564:
          result = 66;
          break;
        case 1565:
          result = 67;
          break;
        case 1566:
          result = 68;
          break;
        case 1567:
          result = 69;
          break;
        case 1568:
          result = 70;
          break;
        case 1569:
          result = 71;
          break;
        case 1792:
          result = 100;
          break;
        case 1793:
          result = 101;
          break;
        case 1794:
          result = 102;
          break;
        default:
          goto LABEL_139;
      }
    }
  }
  else
  {
    result = 0;
    switch(v2)
    {
      case 258:
        return result;
      case 259:
        result = 1;
        break;
      case 260:
        result = 2;
        break;
      case 261:
        result = 3;
        break;
      case 262:
        result = 4;
        break;
      case 263:
        result = 5;
        break;
      case 264:
        result = 6;
        break;
      case 265:
        result = 7;
        break;
      case 266:
        result = 8;
        break;
      case 267:
      case 271:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 289:
      case 290:
      case 291:
      case 292:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 401:
      case 402:
      case 403:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
      case 451:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 697:
      case 698:
      case 699:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 705:
      case 706:
      case 707:
      case 708:
      case 709:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 780:
      case 781:
        goto LABEL_139;
      case 268:
        result = 9;
        break;
      case 269:
        result = 10;
        break;
      case 270:
        result = 11;
        break;
      case 272:
        result = 12;
        break;
      case 288:
        result = 13;
        break;
      case 293:
        result = 14;
        break;
      case 304:
        result = 15;
        break;
      case 305:
        result = 16;
        break;
      case 306:
        result = 17;
        break;
      case 320:
        result = 18;
        break;
      case 336:
        result = 19;
        break;
      case 352:
        result = 20;
        break;
      case 368:
        result = 21;
        break;
      case 384:
        result = 22;
        break;
      case 400:
        result = 23;
        break;
      case 416:
        result = 24;
        break;
      case 417:
        result = 25;
        break;
      case 418:
        result = 26;
        break;
      case 419:
        result = 27;
        break;
      case 420:
        result = 28;
        break;
      case 421:
        result = 29;
        break;
      case 422:
        result = 30;
        break;
      case 423:
        result = 31;
        break;
      case 424:
        result = 32;
        break;
      case 425:
        result = 33;
        break;
      case 426:
        result = 34;
        break;
      case 427:
        result = 35;
        break;
      case 428:
        result = 36;
        break;
      case 429:
        result = 37;
        break;
      case 430:
        result = 38;
        break;
      case 431:
        result = 39;
        break;
      case 769:
        result = 72;
        break;
      case 770:
        result = 73;
        break;
      case 771:
        result = 74;
        break;
      case 772:
        result = 75;
        break;
      case 773:
        result = 76;
        break;
      case 774:
        result = 77;
        break;
      case 775:
        result = 78;
        break;
      case 776:
        result = 79;
        break;
      case 777:
        result = 80;
        break;
      case 778:
        result = 81;
        break;
      case 779:
        result = 82;
        break;
      case 782:
        result = 83;
        break;
      case 783:
        result = 84;
        break;
      case 784:
        result = 85;
        break;
      case 785:
        result = 86;
        break;
      case 786:
        result = 87;
        break;
      case 787:
        result = 88;
        break;
      case 788:
        result = 89;
        break;
      case 789:
        result = 90;
        break;
      default:
        switch(v2)
        {
          case 975:
            result = 91;
            break;
          case 976:
          case 977:
          case 978:
          case 979:
          case 980:
          case 981:
          case 982:
          case 983:
          case 984:
          case 985:
          case 986:
          case 987:
          case 988:
          case 989:
          case 990:
          case 991:
          case 992:
          case 993:
          case 994:
          case 995:
          case 996:
          case 997:
          case 998:
          case 999:
          case 1000:
          case 1001:
          case 1002:
          case 1003:
          case 1004:
          case 1005:
          case 1006:
          case 1007:
          case 1008:
          case 1009:
          case 1010:
          case 1011:
          case 1012:
          case 1013:
          case 1014:
          case 1015:
          case 1016:
          case 1017:
          case 1018:
          case 1019:
          case 1020:
          case 1021:
          case 1022:
          case 1023:
          case 1024:
          case 1028:
          case 1029:
          case 1030:
          case 1031:
          case 1032:
          case 1033:
          case 1034:
          case 1035:
            goto LABEL_139;
          case 1025:
            result = 92;
            break;
          case 1026:
            result = 93;
            break;
          case 1027:
            result = 94;
            break;
          case 1036:
            result = 95;
            break;
          case 1037:
            result = 96;
            break;
          case 1038:
            result = 97;
            break;
          case 1039:
            result = 98;
            break;
          default:
            if (v2 != 1279)
              goto LABEL_139;
            result = 99;
            break;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_1AF38D3C8()
{
  unint64_t result;

  result = qword_1EEE3B460;
  if (!qword_1EEE3B460)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EAE54, &type metadata for KnownKdebugClass);
    atomic_store(result, (unint64_t *)&qword_1EEE3B460);
  }
  return result;
}

unint64_t sub_1AF38D410()
{
  unint64_t result;

  result = qword_1EEE3B468;
  if (!qword_1EEE3B468)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EAEF4, &type metadata for KnownKdebugSubclass);
    atomic_store(result, (unint64_t *)&qword_1EEE3B468);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KnownKdebugClass(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD2)
    goto LABEL_17;
  if (a2 + 46 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 46) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 46;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 46;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 46;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2F;
  v8 = v6 - 47;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KnownKdebugClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 46 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 46) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD1)
    return ((uint64_t (*)(void))((char *)&loc_1AF38D530 + 4 * byte_1AF3EAE44[v4]))();
  *a1 = a2 + 46;
  return ((uint64_t (*)(void))((char *)sub_1AF38D564 + 4 * byte_1AF3EAE3F[v4]))();
}

uint64_t sub_1AF38D564(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF38D56C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF38D574);
  return result;
}

uint64_t sub_1AF38D580(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF38D588);
  *(_BYTE *)result = a2 + 46;
  return result;
}

uint64_t sub_1AF38D58C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF38D594(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF38D5A0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1AF38D5A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KnownKdebugClass()
{
  return &type metadata for KnownKdebugClass;
}

ValueMetadata *type metadata accessor for KdebugClass()
{
  return &type metadata for KdebugClass;
}

uint64_t getEnumTagSinglePayload for KnownKdebugSubclass(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x6B)
    goto LABEL_17;
  if (a2 + 149 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 149) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 149;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 149;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 149;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x96;
  v8 = v6 - 150;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KnownKdebugSubclass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 149 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 149) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x6B)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x6A)
    return ((uint64_t (*)(void))((char *)&loc_1AF38D6AC + 4 * byte_1AF3EAE4E[v4]))();
  *a1 = a2 - 107;
  return ((uint64_t (*)(void))((char *)sub_1AF38D6E0 + 4 * byte_1AF3EAE49[v4]))();
}

uint64_t sub_1AF38D6E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF38D6E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF38D6F0);
  return result;
}

uint64_t sub_1AF38D6FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF38D704);
  *(_BYTE *)result = a2 - 107;
  return result;
}

uint64_t sub_1AF38D708(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF38D710(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KnownKdebugSubclass()
{
  return &type metadata for KnownKdebugSubclass;
}

ValueMetadata *type metadata accessor for KdebugSubclass()
{
  return &type metadata for KdebugSubclass;
}

uint64_t sub_1AF38D744()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 2);
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  if ((v1 & 1) != 0)
    sub_1AF3E80FC();
  else
    sub_1AF3E80F0();
  return sub_1AF3E8114();
}

uint64_t sub_1AF38D7B8()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 2) & 1) != 0)
  {
    sub_1AF3E80E4();
    return sub_1AF3E80FC();
  }
  else
  {
    sub_1AF3E80E4();
    return sub_1AF3E80F0();
  }
}

uint64_t sub_1AF38D808()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 2);
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  if ((v1 & 1) != 0)
    sub_1AF3E80FC();
  else
    sub_1AF3E80F0();
  return sub_1AF3E8114();
}

uint64_t sub_1AF38D878(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v2 = *a2;
  if (*a1 == v2)
    v3 = *((unsigned __int8 *)a2 + 2);
  else
    v3 = 0;
  v4 = *a1 == v2;
  if ((a2[1] & 1) != 0)
    v4 = 0;
  if ((a1[1] & 1) != 0)
    return v3;
  else
    return v4;
}

uint64_t sub_1AF38D8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v5;
  unint64_t v6;
  _QWORD v8[4];
  _QWORD v9[2];

  v9[0] = 44;
  v9[1] = 0xE100000000000000;
  v8[2] = v9;
  swift_bridgeObjectRetain();
  v5 = sub_1AF38ECFC(0x7FFFFFFFFFFFFFFFLL, 1, sub_1AF390784, (uint64_t)v8, a1, a2);
  swift_bridgeObjectRetain();
  v6 = sub_1AF39079C((uint64_t)v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v2)
  {
    a2 = sub_1AF390A9C(v6);
    swift_bridgeObjectRelease();
  }
  return a2;
}

BOOL sub_1AF38D974(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;

  v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    sub_1AF3E7988();
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = v14 == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        v7 = sub_1AF3E7C4C();
        v9 = v8;
        v10 = sub_1AF3E7C34();
        v11 = sub_1AF3E7988();
        if (!v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15 = 1;
          goto LABEL_13;
        }
        if (v7 != v11 || v12 != v9)
          break;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      v6 = sub_1AF3E8030();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        break;
      if (v5 == v10 >> 14)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    v15 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1AF38DB08()
{
  sub_1AF3E75B0();
  swift_allocObject();
  sub_1AF3E758C();
  return 0x200000000000;
}

uint64_t sub_1AF38DB48(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  int64_t v12;

  v11 = (_QWORD *)(a1 + 56);
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v12 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_18;
  }
  if (v12 > 1)
  {
    v7 = v11[1];
    v8 = 1;
    if (v7)
      goto LABEL_17;
    v8 = 2;
    if (v12 <= 2)
      return swift_release();
    v7 = v11[2];
    if (v7)
      goto LABEL_17;
    v8 = 3;
    if (v12 <= 3)
      return swift_release();
    v7 = v11[3];
    if (v7)
    {
LABEL_17:
      v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_18:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 48) + 4 * v6 + 2) & 1) != 0)
        __asm { BR              X10 }
      __asm { BR              X10 }
    }
    v9 = 4;
    if (v12 > 4)
    {
      v7 = v11[4];
      if (v7)
      {
        v8 = 4;
        goto LABEL_17;
      }
      while (1)
      {
        v8 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          JUMPOUT(0x1AF38E354);
        }
        if (v8 >= v12)
          break;
        v7 = v11[v8];
        ++v9;
        if (v7)
          goto LABEL_17;
      }
    }
  }
  return swift_release();
}

void sub_1AF38E3A8(int a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x10000) == 0)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

BOOL sub_1AF38E4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _BOOL8 result;
  uint64_t v20;

  a10 = v15;
  a11 = v16;
  a12 = BYTE2(v16);
  a13 = BYTE3(v16);
  a14 = BYTE4(v16);
  a15 = BYTE5(v16);
  result = (*((_BYTE *)&a10 + v18) & v17) != 0;
  if (*MEMORY[0x1E0C80C00] != v20)
    JUMPOUT(0x1AF38E814);
  return result;
}

void sub_1AF38E83C(uint64_t a1, unint64_t a2)
{
  sub_1AF38EC98(a1, a2);
}

void sub_1AF38E848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

#error "1AF38E8A0: local variable allocation failed (funcsize=163)"

void sub_1AF38EC98(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1AF34738C(a1, a2);
  sub_1AF38FFCC(v2);
}

void sub_1AF38ECE8(uint64_t *a1)
{
  sub_1AF390C68(*a1, a1[1]);
}

char *sub_1AF38ECFC(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  _QWORD v46[4];

  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v11 = a5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9D8];
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = 15;
  v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(a6) & 0xF) : (v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_1AF38FB94(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  v38 = a1;
  v39 = v14;
  v44 = 4 * v16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v9 = 15;
  v8 = 15;
  v17 = 15;
  while (1)
  {
    v46[0] = sub_1AF3E7A18();
    v46[1] = v18;
    v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    v6 = v19;
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      break;
    v9 = sub_1AF3E7958();
LABEL_9:
    if (v44 == v9 >> 14)
      goto LABEL_29;
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    v9 = sub_1AF3E7958();
    *(_QWORD *)(v43 + 16) = v9;
    v8 = v9;
    v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  v20 = sub_1AF3E7A30();
  v40 = v21;
  v41 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_1AF38FCA0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v27 = *((_QWORD *)v10 + 2);
  v26 = *((_QWORD *)v10 + 3);
  v6 = v27 + 1;
  if (v27 >= v26 >> 1)
    v10 = sub_1AF38FCA0((char *)(v26 > 1), v27 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v6;
  v28 = &v10[32 * v27];
  *((_QWORD *)v28 + 4) = v41;
  *((_QWORD *)v28 + 5) = v23;
  *((_QWORD *)v28 + 6) = v25;
  *((_QWORD *)v28 + 7) = v40;
  *(_QWORD *)(v39 + 16) = v10;
  v29 = sub_1AF3E7958();
  v9 = v29;
  *(_QWORD *)(v43 + 16) = v29;
  if (*((_QWORD *)v10 + 2) != v38)
  {
    v8 = v29;
    v17 = v29;
    goto LABEL_9;
  }
  v17 = v29;
  v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    v6 = sub_1AF3E7A30();
    v8 = v31;
    v9 = v32;
    v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_43;
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  v10 = sub_1AF38FCA0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
LABEL_34:
  v35 = *((_QWORD *)v10 + 2);
  v34 = *((_QWORD *)v10 + 3);
  if (v35 >= v34 >> 1)
    v10 = sub_1AF38FCA0((char *)(v34 > 1), v35 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v35 + 1;
  v36 = &v10[32 * v35];
  *((_QWORD *)v36 + 4) = v6;
  *((_QWORD *)v36 + 5) = v8;
  *((_QWORD *)v36 + 6) = v9;
  *((_QWORD *)v36 + 7) = v11;
  *(_QWORD *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

uint64_t sub_1AF38F114(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v5 = *v2;
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  if ((a2 & 0x10000) != 0)
    sub_1AF3E80FC();
  else
    sub_1AF3E80F0();
  v6 = sub_1AF3E8114();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_14:
    v13 = HIWORD(a2) & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v2;
    *v2 = 0x8000000000000000;
    sub_1AF38F588(a2 & 0x1FFFF, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_15;
  }
  v9 = ~v7;
  while (1)
  {
    v10 = (unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 4 * v8);
    if ((v10[1] & 1) == 0)
      break;
    if ((a2 & 0x10000) != 0 && *v10 == (unsigned __int16)a2)
      goto LABEL_13;
LABEL_6:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_14;
  }
  if ((a2 & 0x10000) != 0 || *v10 != a2)
    goto LABEL_6;
LABEL_13:
  result = 0;
  v12 = *(_QWORD *)(*v2 + 48) + 4 * v8;
  LOWORD(a2) = *(_WORD *)v12;
  LOBYTE(v13) = *(_BYTE *)(v12 + 2);
LABEL_15:
  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = v13;
  return result;
}

uint64_t sub_1AF38F28C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B498);
  result = sub_1AF3E7DC0();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v29 = (_QWORD *)(v2 + 56);
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v9)
          goto LABEL_36;
        v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v9)
            goto LABEL_36;
          v16 = v29[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v9)
              goto LABEL_36;
            v16 = v29[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v5 >= v9)
                    goto LABEL_36;
                  v16 = v29[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 4 * v14;
      v19 = *(_WORD *)v18;
      v20 = *(_BYTE *)(v18 + 2);
      sub_1AF3E80D8();
      sub_1AF3E80E4();
      if ((v20 & 1) != 0)
        sub_1AF3E80FC();
      else
        sub_1AF3E80F0();
      result = sub_1AF3E8114();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 4 * v11;
      *(_WORD *)v12 = v19;
      *(_BYTE *)(v12 + 2) = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1AF38F588(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_21;
  if ((a3 & 1) != 0)
  {
    sub_1AF38F28C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1AF38F728();
      goto LABEL_21;
    }
    sub_1AF38F8CC();
  }
  v8 = *v3;
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  if ((v5 & 0x10000) != 0)
    sub_1AF3E80FC();
  else
    sub_1AF3E80F0();
  result = sub_1AF3E8114();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    do
    {
      v11 = (unsigned __int16 *)(*(_QWORD *)(v8 + 48) + 4 * a2);
      if ((v11[1] & 1) != 0)
      {
        if ((v5 & 0x10000) != 0 && *v11 == (unsigned __int16)v5)
          goto LABEL_20;
      }
      else if ((v5 & 0x10000) == 0 && *v11 == v5)
      {
LABEL_20:
        result = sub_1AF3E8060();
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_21:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v13 = *(_QWORD *)(v12 + 48) + 4 * a2;
  *(_WORD *)v13 = v5;
  *(_BYTE *)(v13 + 2) = BYTE2(v5) & 1;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v16;
  return result;
}

void *sub_1AF38F728()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B498);
  v2 = *v0;
  v3 = sub_1AF3E7DB4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_WORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 2);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_WORD *)v19 = v18;
    *(_BYTE *)(v19 + 2) = v17;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1AF38F8CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B498);
  result = sub_1AF3E7DC0();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v28)
      goto LABEL_36;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_36;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_36;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 4 * v14;
    v19 = *(_WORD *)v18;
    v20 = *(_BYTE *)(v18 + 2);
    sub_1AF3E80D8();
    sub_1AF3E80E4();
    if ((v20 & 1) != 0)
      sub_1AF3E80FC();
    else
      sub_1AF3E80F0();
    result = sub_1AF3E8114();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 4 * v11;
    *(_WORD *)v12 = v19;
    *(_BYTE *)(v12 + 2) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_36:
    result = swift_release();
    v1 = v0;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v28)
      goto LABEL_36;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1AF38FB94(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v10 = *(_QWORD *)(a2 + 16) >> 14;
  v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1)
    return v11 ^ 1u;
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = a4;
  v5 = sub_1AF3E7A30();
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = *(char **)(v4 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    v9 = sub_1AF38FCA0(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    *(_QWORD *)(v4 + 16) = v9;
  }
  v17 = *((_QWORD *)v9 + 2);
  v16 = *((_QWORD *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    v9 = sub_1AF38FCA0((char *)(v16 > 1), v17 + 1, 1, v9);
    *(_QWORD *)(v4 + 16) = v9;
  }
  *((_QWORD *)v9 + 2) = v17 + 1;
  v18 = &v9[32 * v17];
  *((_QWORD *)v18 + 4) = v5;
  *((_QWORD *)v18 + 5) = v6;
  *((_QWORD *)v18 + 6) = v7;
  *((_QWORD *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_1AF38FCA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4B0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AF38FDA0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1AF38FDD8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1AF38FDBC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1AF38FECC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1AF38FDD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 4 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

char *sub_1AF38FECC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B488);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_1AF38FFCC(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1AF390034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(uint64_t *, uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;

  v12 = v1;
  LOWORD(v13) = a1;
  BYTE2(v13) = BYTE2(a1);
  HIBYTE(v13) = BYTE3(a1);
  v14 = BYTE4(a1);
  v15 = BYTE5(a1);
  v16 = BYTE6(a1);
  v5(&v12, v3, v2);
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  result = sub_1AF33C310(v3, v2);
  *v4 = v6;
  v4[1] = v7 | (v8 << 32) | (v9 << 40) | (v10 << 48);
  return result;
}

uint64_t sub_1AF39024C(int *a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  result = sub_1AF3E76B8();
  v9 = *a1;
  if (a1[1] < (int)v9)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = sub_1AF3E7580();
  if (result)
  {
    v10 = result;
    result = sub_1AF3E75A4();
    v11 = __OFSUB__(v9, result);
    v12 = v9 - result;
    if (!v11)
    {
      sub_1AF3E7598();
      a4(v10 + v12, a2, a3);
      return sub_1AF33C310(a2, a3);
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1AF3902F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1AF390358(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1AF39053CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_1AF390560(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1AF3905BC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_1AF3902F8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_1AF33C310(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1AF390784(_QWORD *a1)
{
  return sub_1AF390B60(a1) & 1;
}

unint64_t sub_1AF39079C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t result;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return v4;
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDA0(0, v3, 0);
  v4 = v27;
  for (i = a1 + 56; ; i += 32)
  {
    v7 = *(_QWORD *)(i - 24);
    v8 = *(_QWORD *)(i - 16);
    swift_bridgeObjectRetain();
    v9 = sub_1AF38D974(83, 0xE100000000000000, v7, v8);
    if (v9)
      break;
    if (!sub_1AF38D974(67, 0xE100000000000000, v7, v8))
      goto LABEL_21;
    swift_bridgeObjectRetain();
    result = sub_1AF3E7C40();
    if ((v16 & 1) != 0)
      result = v8;
    if (v8 >> 14 < result >> 14)
      goto LABEL_25;
    sub_1AF3E7C64();
    swift_bridgeObjectRelease();
    v17 = sub_1AF391134();
    v13 = sub_1AF3BC4D0(MEMORY[0x1E0DEBAF0], v17);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0 || v13 >= 0x100)
    {
LABEL_21:
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      *v23 = a2;
      v23[1] = a3;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
LABEL_22:
      swift_release();
      swift_bridgeObjectRelease();
      return v4;
    }
LABEL_16:
    if (v26)
      goto LABEL_22;
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v27 + 16);
    v20 = *(_QWORD *)(v27 + 24);
    if (v21 >= v20 >> 1)
      sub_1AF38FDA0((char *)(v20 > 1), v21 + 1, 1);
    *(_QWORD *)(v27 + 16) = v21 + 1;
    v22 = v27 + 4 * v21;
    *(_WORD *)(v22 + 32) = v13;
    *(_BYTE *)(v22 + 34) = v9;
    if (!--v3)
      return v4;
  }
  swift_bridgeObjectRetain();
  result = sub_1AF3E7C40();
  if ((v11 & 1) != 0)
    result = v8;
  if (v8 >> 14 >= result >> 14)
  {
    sub_1AF3E7C64();
    swift_bridgeObjectRelease();
    v12 = sub_1AF391134();
    v13 = sub_1AF3BC4D0(MEMORY[0x1E0DEBAF0], v12);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0 || v13 >> 16)
      goto LABEL_21;
    goto LABEL_16;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1AF390A9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;
  int v6;
  _BYTE v7[4];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1AF3910A8();
  result = sub_1AF3E7B14();
  v8 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 34);
    do
    {
      v5 = *((unsigned __int16 *)v4 - 1);
      v6 = *v4;
      v4 += 4;
      sub_1AF38F114((uint64_t)v7, v5 | (v6 << 16));
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1AF390B14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEE3B478;
  if (!qword_1EEE3B478)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEE3B470);
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EEE3B478);
  }
  return result;
}

uint64_t sub_1AF390B60(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_1AF3E8030() & 1;
}

uint64_t sub_1AF390BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1AF3E7580();
  v11 = result;
  if (result)
  {
    result = sub_1AF3E75A4();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1AF3E7598();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1AF3902F8(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1AF390C68(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1AF390CAC()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1AF390CE0 + dword_1AF390D94[v0 >> 62]))();
}

BOOL sub_1AF390CF0@<W0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BOOL8 result;

  result = 0;
  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
      return 1;
    sub_1AF34738C(v2, v1);
    sub_1AF390560(v4, v3);
    if ((v5 & 1) != 0)
      return 1;
  }
  return result;
}

unint64_t sub_1AF390DA8()
{
  unint64_t result;

  result = qword_1EEE3B480;
  if (!qword_1EEE3B480)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB080, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_1EEE3B480);
  }
  return result;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Filter(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 1)
    v5 = -1;
  else
    v5 = v4 ^ 0xFF;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Filter(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = -(char)a2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

uint64_t sub_1AF390F00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_1AF390F08(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Filter()
{
  return &type metadata for Filter;
}

ValueMetadata *type metadata accessor for SubclassFilter()
{
  return &type metadata for SubclassFilter;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubclassBitmap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1AF34738C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for SubclassBitmap(uint64_t a1)
{
  return sub_1AF33C310(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for SubclassBitmap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1AF34738C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1AF33C310(v5, v6);
  return a1;
}

uint64_t *assignWithTake for SubclassBitmap(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1AF33C310(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubclassBitmap(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SubclassBitmap(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubclassBitmap()
{
  return &type metadata for SubclassBitmap;
}

unint64_t sub_1AF3910A8()
{
  unint64_t result;

  result = qword_1EEE3B490;
  if (!qword_1EEE3B490)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB040, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_1EEE3B490);
  }
  return result;
}

unint64_t sub_1AF3910EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEE3B750;
  if (!qword_1EEE3B750)
  {
    v1 = type metadata accessor for KTraceRecordError();
    result = MEMORY[0x1AF45E31C](&unk_1AF3ED104, v1);
    atomic_store(result, (unint64_t *)&qword_1EEE3B750);
  }
  return result;
}

unint64_t sub_1AF391134()
{
  unint64_t result;

  result = qword_1EEE3B4A8;
  if (!qword_1EEE3B4A8)
  {
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EEE3B4A8);
  }
  return result;
}

uint64_t sub_1AF391178()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AF39119C()
{
  return swift_deallocObject();
}

uint64_t sub_1AF3911B0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_1AF3911C8()
{
  __int128 *v0;
  _BYTE v1[40];

  sub_1AF3911B0(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1AF391208()
{
  uint64_t v1;

  sub_1AF3E7DE4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  return v1;
}

void sub_1AF391458()
{
  __int128 *v0;
  _BYTE v1[40];

  sub_1AF3911B0(v0, (uint64_t)v1);
  sub_1AF3911C8();
}

_QWORD *sub_1AF3914A8(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)(a3 + 40);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v10 = *v7;
    v26[0] = *(v7 - 1);
    v26[1] = v10;
    swift_bridgeObjectRetain();
    a1(&v20, v26);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    v11 = v21;
    if (v21)
    {
      v12 = v20;
      v13 = v22;
      v18 = v24;
      v19 = v23;
      v27 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1AF3964F8(0, v8[2] + 1, 1, v8);
      v15 = v8[2];
      v14 = v8[3];
      if (v15 >= v14 >> 1)
        v8 = sub_1AF3964F8((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
      v8[2] = v15 + 1;
      v9 = &v8[8 * v15];
      v9[4] = v12;
      v9[5] = v11;
      *((_BYTE *)v9 + 48) = v13 & 1;
      *(_OWORD *)(v9 + 7) = v19;
      *(_OWORD *)(v9 + 9) = v18;
      v9[11] = v27;
    }
    v7 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

double sub_1AF391640@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD v37[8];
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = sub_1AF3E7604();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1AF3E7694();
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v38 = *a1;
  v39 = v11;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0CAFD78], v4);
  sub_1AF347C60();
  sub_1AF3E7688();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  v13 = (void *)sub_1AF3E7628();
  v14 = objc_msgSend(v12, sel_initWithURL_, v13);

  v15 = sub_1AF3E78BC();
  v16 = objc_msgSend((id)v15, sel_stringByDeletingPathExtension);

  v17 = sub_1AF3E78C8();
  v19 = v18;

  v38 = sub_1AF3E7670();
  v39 = v20;
  strcpy((char *)v37, "AppleInternal");
  v37[7] = -4864;
  LOBYTE(v15) = sub_1AF3E7CB8();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    v38 = v17;
    v39 = v19;
    sub_1AF3E7970();
    v17 = v38;
    v19 = v39;
  }
  if (!v14)
    goto LABEL_8;
  v21 = objc_msgSend(v14, sel_infoDictionary);
  if (!v21)
  {

LABEL_8:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v22 = v21;
  v23 = sub_1AF3E7874();

  sub_1AF397910(v17, v19, v23, (uint64_t)&v38);
  v24 = v38;
  v25 = v39;
  v26 = v40;
  v27 = v41;
  v28 = v42;
  v29 = v43;
  v30 = v44;
  v34 = v45;

  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  if ((v40 & 1) != 0)
  {
    sub_1AF399CE0((uint64_t)&v38);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
  }
  else
  {
    *(_QWORD *)a2 = v24;
    *(_QWORD *)(a2 + 8) = v25;
    *(_QWORD *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 24) = v27;
    *(_QWORD *)(a2 + 32) = v28;
    *(_QWORD *)(a2 + 40) = v29;
    v32 = v34;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v32;
  }
  return result;
}

uint64_t sub_1AF391950(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1AF3964F8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[8 * v9 + 4];
  if (a1 + 32 < v10 + (v8 << 6) && v10 < a1 + 32 + (v8 << 6))
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

uint64_t sub_1AF391AA4(uint64_t a1)
{
  return sub_1AF391ADC(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], qword_1EEE41228, (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t))MEMORY[0x1E0DF2248]);
}

uint64_t sub_1AF391AC0(uint64_t a1)
{
  return sub_1AF391ADC(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], qword_1EEE41240, MEMORY[0x1E0DF2158]);
}

uint64_t sub_1AF391ADC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(unint64_t, unint64_t, uint64_t, unint64_t))
{
  uint64_t v6;

  v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  return a4(0xD000000000000010, 0x80000001AF3F1010, 0x72656469766F7250, 0xE900000000000073);
}

uint64_t sub_1AF391B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(_BYTE *);
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v29)(char *, _BYTE *, uint64_t);
  _BYTE *v30;
  void (*v31)(_BYTE *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  unsigned int v38;
  id v39;
  void *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t *v55;
  _BYTE v56[4];
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  unint64_t v60;
  uint64_t *v61;
  void (*v62)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v63)(char *, _BYTE *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  void (*v69)(_BYTE *);
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;

  v61 = a4;
  v7 = sub_1AF3E7694();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v58 = &v56[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v9);
  v59 = &v56[-v12];
  v13 = MEMORY[0x1E0C80A78](v11);
  v70 = &v56[-v14];
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v56[-v16];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v56[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4B8);
  MEMORY[0x1E0C80A78](v20);
  v22 = &v56[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = os_variant_has_internal_content() & a3;
  v24 = sub_1AF3980C8(v23);
  v25 = *(_QWORD *)(v24 + 16);
  v60 = v24;
  if (v25)
  {
    v57 = v23;
    v26 = v24 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v65 = *(_QWORD *)(v8 + 72);
    v66 = v22;
    v27 = *(void (**)(_BYTE *))(v8 + 16);
    v68 = v17;
    v69 = v27;
    v67 = v19;
    v64 = v8;
    while (1)
    {
      v72 = v26;
      v69(v22);
      v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v28(v22, 0, 1, v7);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v22, 1, v7) == 1)
        break;
      v71 = v25;
      v29 = *(void (**)(char *, _BYTE *, uint64_t))(v8 + 32);
      v62 = v28;
      v63 = v29;
      v29(v19, v22, v7);
      v30 = v70;
      sub_1AF3E7640();
      sub_1AF3E764C();
      v31 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v32 = v7;
      v31(v30, v7);
      v33 = a2;
      v34 = a1;
      v35 = (void *)objc_opt_self();
      v36 = objc_msgSend(v35, sel_defaultManager);
      sub_1AF3E767C();
      v37 = (void *)sub_1AF3E78BC();
      swift_bridgeObjectRelease();
      v38 = objc_msgSend(v36, sel_fileExistsAtPath_, v37);

      if (v38)
      {
        v31(v67, v32);
        swift_bridgeObjectRelease();
        v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C8);
        v45 = v61;
        v46 = (char *)v61 + *(int *)(v44 + 48);
        *v61 = v34;
        v45[1] = v33;
        v63(v46, v68, v32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C0);
        swift_storeEnumTagMultiPayload();
        return swift_bridgeObjectRetain();
      }
      v39 = objc_msgSend(v35, sel_defaultManager);
      v40 = (void *)sub_1AF3E78BC();
      v41 = objc_msgSend(v39, sel_fileExistsAtPath_, v40);

      a2 = v33;
      a1 = v34;
      if (v41)
      {
        swift_bridgeObjectRelease();
        if ((v57 & 1) != 0)
        {
          v47 = v59;
          sub_1AF3E7610();
          v48 = v58;
          sub_1AF3E7634();
          v49 = sub_1AF3E761C();
          v51 = v50;
          v31(v48, v32);
          v31(v68, v32);
          v31(v67, v32);
          v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C8);
          v53 = v61;
          v54 = (char *)v61 + *(int *)(v52 + 48);
          *v61 = v49;
          v53[1] = v51;
          v63(v54, v47, v32);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C0);
          return swift_storeEnumTagMultiPayload();
        }
        v31(v68, v32);
        v31(v67, v32);
        v55 = v61;
        *v61 = v34;
        v55[1] = v33;
        v55[2] = 0;
        v55[3] = 0;
        *((_BYTE *)v55 + 32) = 0;
        goto LABEL_10;
      }
      v7 = v32;
      v31(v68, v32);
      v19 = v67;
      v31(v67, v32);
      v8 = v64;
      v26 = v72 + v65;
      v25 = v71 - 1;
      v22 = v66;
      if (v71 == 1)
      {
        v62(v66, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v22, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  v42 = v61;
  *v61 = a1;
  v42[1] = a2;
  v42[2] = 0;
  v42[3] = 0;
  *((_BYTE *)v42 + 32) = 1;
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

void sub_1AF392030(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, char *);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  void *v48;
  id v49;
  uint64_t ObjCClassMetadata;
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  unsigned int v80;
  id v81;
  id v82;
  char *v83;
  char *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  id v95;
  uint64_t v96;
  os_log_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  id v107;
  id v108;
  unint64_t v109;
  char *v110;
  void *v111;
  uint64_t v112[4];
  char v113;
  uint64_t v114;

  v103 = a7;
  LODWORD(v106) = a6;
  v107 = a4;
  v108 = a5;
  v101 = a3;
  v114 = *MEMORY[0x1E0C80C00];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4C8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1AF3E7694();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v105 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v97 - v19;
  v21 = v106 & 1;
  v106 = a1;
  v109 = a2;
  sub_1AF391B5C(a1, a2, v21, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = v11[1];
    v24 = v11[2];
    v25 = v11[3];
    v26 = *((_BYTE *)v11 + 32);
    v112[0] = *v11;
    v22 = v112[0];
    v112[1] = v23;
    v112[2] = v24;
    v112[3] = v25;
    v113 = v26;
    sub_1AF3988A0();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_allocError();
    *(_QWORD *)v27 = v22;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v24;
    *(_QWORD *)(v27 + 24) = v25;
    *(_BYTE *)(v27 + 32) = v26;
    swift_unknownObjectRelease();
    return;
  }
  sub_1AF3478BC((uint64_t)v11, (uint64_t)v14, &qword_1EEE3B4C8);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, &v14[*(int *)(v12 + 48)], v15);
  v28 = (char *)v15;
  v29 = v16;
  if (qword_1EEE3C480 != -1)
    swift_once();
  v30 = sub_1AF3E7778();
  v31 = __swift_project_value_buffer(v30, (uint64_t)qword_1EEE41228);
  v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v33 = v105;
  v32(v105, v20, v15);
  swift_bridgeObjectRetain_n();
  v100 = v31;
  v34 = sub_1AF3E7760();
  v35 = sub_1AF3E7B5C();
  v36 = os_log_type_enabled(v34, v35);
  v102 = v20;
  if (v36)
  {
    v37 = swift_slowAlloc();
    v98 = v29;
    v38 = v33;
    v39 = v37;
    v99 = swift_slowAlloc();
    v112[0] = v99;
    *(_DWORD *)v39 = 136446466;
    v97 = v34;
    v40 = v109;
    swift_bridgeObjectRetain();
    v110 = (char *)sub_1AF346C80(v106, v40, v112);
    sub_1AF3E7C7C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v39 + 12) = 2082;
    v41 = sub_1AF3E767C();
    v110 = (char *)sub_1AF346C80(v41, v42, v112);
    v20 = v102;
    sub_1AF3E7C7C();
    swift_bridgeObjectRelease();
    v43 = *(void (**)(char *, char *))(v98 + 8);
    v43(v38, v28);
    v34 = v97;
    _os_log_impl(&dword_1AF33A000, v97, v35, "loading provider %{public}s's bundle at %{public}s", (uint8_t *)v39, 0x16u);
    v44 = v99;
    swift_arrayDestroy();
    MEMORY[0x1AF45E3DC](v44, -1, -1);
    MEMORY[0x1AF45E3DC](v39, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v43 = *(void (**)(char *, char *))(v29 + 8);
    v43(v33, v28);
  }

  v45 = (uint64_t)v107;
  sub_1AF3E767C();
  v46 = v20;
  v47 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  v48 = (void *)sub_1AF3E78BC();
  swift_bridgeObjectRelease();
  v49 = objc_msgSend(v47, sel_initWithPath_, v48);

  if (v49)
  {
    if ((objc_msgSend(v49, sel_load) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      v63 = sub_1AF3E7760();
      v64 = sub_1AF3E7B5C();
      if (os_log_type_enabled(v63, v64))
      {
        v105 = v28;
        v65 = (uint8_t *)swift_slowAlloc();
        v66 = swift_slowAlloc();
        v107 = v49;
        v67 = v109;
        v68 = v66;
        v112[0] = v66;
        *(_DWORD *)v65 = 136315138;
        swift_bridgeObjectRetain();
        v110 = (char *)sub_1AF346C80(v106, v67, v112);
        v28 = v105;
        sub_1AF3E7C7C();
        v49 = v107;
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v63, v64, "failed to load %s's bundle", v65, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v68, -1, -1);
        MEMORY[0x1AF45E3DC](v65, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v112[0] = 0;
      v112[1] = 0xE000000000000000;
      sub_1AF3E7DE4();
      swift_bridgeObjectRelease();
      strcpy((char *)v112, "cannot load ");
      BYTE5(v112[1]) = 0;
      HIWORD(v112[1]) = -5120;
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      sub_1AF3E7970();
      v69 = (void *)sub_1AF3E78BC();
      swift_bridgeObjectRelease();
      objc_msgSend(v108, sel_warnWithMessage_, v69);
      swift_unknownObjectRelease();

      v43(v102, v28);
      goto LABEL_19;
    }
    if (objc_msgSend(v49, sel_principalClass))
    {
      ObjCClassMetadata = swift_getObjCClassMetadata();
      v111 = &unk_1EEE43E08;
      if (swift_dynamicCastTypeToObjCProtocolConditional())
      {
        v51 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v52 = objc_msgSend(v51, sel_init);
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        v53 = sub_1AF3E7760();
        v54 = sub_1AF3E7B5C();
        if (os_log_type_enabled(v53, v54))
        {
          v105 = v28;
          v55 = (uint8_t *)swift_slowAlloc();
          v56 = swift_slowAlloc();
          v107 = v49;
          v57 = v109;
          v99 = (uint64_t)v52;
          v58 = v56;
          v112[0] = v56;
          *(_DWORD *)v55 = 136446210;
          swift_bridgeObjectRetain();
          v110 = (char *)sub_1AF346C80(v106, v57, v112);
          v28 = v105;
          sub_1AF3E7C7C();
          v49 = v107;
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v53, v54, "calling provider %{public}s's shouldInitialize", v55, 0xCu);
          swift_arrayDestroy();
          v59 = v58;
          v52 = (id)v99;
          MEMORY[0x1AF45E3DC](v59, -1, -1);
          MEMORY[0x1AF45E3DC](v55, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_unknownObjectRetain();
        v79 = (void *)sub_1AF3E7868();
        v112[0] = 0;
        v80 = objc_msgSend(v52, sel_shouldInitializeWithLogger_machine_options_error_, v108, v101, v79, v112);
        swift_unknownObjectRelease();

        if (v80)
        {
          v81 = (id)v112[0];
          v43(v102, v28);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          v70 = v106;
          goto LABEL_20;
        }
        v82 = (id)v112[0];
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v83 = (char *)sub_1AF3E75EC();

        swift_willThrow();
        v84 = v83;
        swift_bridgeObjectRetain();
        v85 = v83;
        v86 = sub_1AF3E7760();
        v87 = sub_1AF3E7B50();
        v88 = v87;
        if (os_log_type_enabled(v86, v87))
        {
          v89 = swift_slowAlloc();
          LODWORD(v101) = v88;
          v90 = v89;
          v104 = swift_slowAlloc();
          v112[0] = v104;
          *(_DWORD *)v90 = 136446466;
          v105 = v83;
          v107 = v49;
          v91 = v109;
          swift_bridgeObjectRetain();
          v110 = (char *)sub_1AF346C80(v106, v91, v112);
          sub_1AF3E7C7C();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v90 + 12) = 2082;
          v110 = v105;
          v92 = v105;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B540);
          v99 = (uint64_t)v52;
          v93 = sub_1AF3E78F8();
          v110 = (char *)sub_1AF346C80(v93, v94, v112);
          sub_1AF3E7C7C();
          swift_bridgeObjectRelease();
          v95 = v105;

          _os_log_impl(&dword_1AF33A000, v86, (os_log_type_t)v101, "\tprovider %{public}s should not initialize: %{public}s", (uint8_t *)v90, 0x16u);
          v96 = v104;
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v96, -1, -1);
          MEMORY[0x1AF45E3DC](v90, -1, -1);

          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();

        }
        v43(v102, v28);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_19:
        v70 = 0;
        v108 = 0;
        v109 = 0;
        v52 = 0;
        v45 = 0;
LABEL_20:
        v71 = v103;
        *v103 = v70;
        v71[1] = v109;
        v71[2] = (uint64_t)v52;
        v71[3] = (uint64_t)v108;
        v71[4] = v45;
        return;
      }
      swift_bridgeObjectRelease();
      v112[0] = ObjCClassMetadata;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B538);
      v75 = sub_1AF3E78F8();
      v77 = v76;
      sub_1AF3988A0();
      swift_allocError();
      v78 = v109;
      *(_QWORD *)v72 = v106;
      *(_QWORD *)(v72 + 8) = v78;
      *(_QWORD *)(v72 + 16) = v75;
      *(_QWORD *)(v72 + 24) = v77;
      v74 = 4;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1AF3988A0();
      swift_allocError();
      v73 = v109;
      *(_QWORD *)v72 = v106;
      *(_QWORD *)(v72 + 8) = v73;
      *(_QWORD *)(v72 + 16) = 0;
      *(_QWORD *)(v72 + 24) = 0;
      v74 = 3;
    }
    *(_BYTE *)(v72 + 32) = v74;
    swift_willThrow();
    swift_unknownObjectRelease();

    v62 = v102;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1AF3988A0();
    swift_allocError();
    v60 = v109;
    *(_QWORD *)v61 = v106;
    *(_QWORD *)(v61 + 8) = v60;
    *(_QWORD *)(v61 + 16) = 0;
    *(_QWORD *)(v61 + 24) = 0;
    *(_BYTE *)(v61 + 32) = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    v62 = v46;
  }
  v43(v62, v28);
}

id ProviderList.__allocating_init(machine:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC6ktrace12ProviderList_providers] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC6ktrace12ProviderList_machine] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ProviderList.init(machine:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC6ktrace12ProviderList_providers] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC6ktrace12ProviderList_machine] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Bool __swiftcall ProviderList.contains(name:)(Swift::String name)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  BOOL v8;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 40); ; i += 5)
  {
    v8 = *(i - 1) == countAndFlagsBits && *i == (_QWORD)object;
    if (v8 || (sub_1AF3E8030() & 1) != 0)
      break;
    if (!--v6)
      return 0;
  }
  return 1;
}

void sub_1AF392ED4(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26[5];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC6ktrace12ProviderList_machine);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1AF392030(a1, a2, v12, a3, a4, a5, v26);
  if (!v6)
  {
    sub_1AF3478BC((uint64_t)v26, (uint64_t)&v27, &qword_1EEE3B560);
    if (*((_QWORD *)&v27 + 1))
    {
      v31 = v27;
      v32 = v27;
      v14 = v28;
      v13 = v29;
      v15 = v30;
      v33 = v30;
      v16 = (_QWORD **)(v5 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
      swift_beginAccess();
      v17 = *v16;
      sub_1AF398978((uint64_t)&v32);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1AF398928((uint64_t)&v33);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v16 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v17 = sub_1AF396604(0, v17[2] + 1, 1, v17);
        *v16 = v17;
      }
      v19 = v17[2];
      v20 = v17[3];
      v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        v23 = v17;
        v24 = v17[2];
        v25 = sub_1AF396604((_QWORD *)(v20 > 1), v19 + 1, 1, v23);
        v19 = v24;
        v17 = v25;
        *v16 = v25;
      }
      v17[2] = v21;
      v22 = &v17[5 * v19];
      *((_OWORD *)v22 + 2) = v31;
      v22[6] = v14;
      v22[7] = v13;
      v22[8] = v15;
      swift_endAccess();
      sub_1AF3989A0((uint64_t)&v32);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1AF398950((uint64_t)&v33);
    }
  }
}

uint64_t ProviderList.shouldStartTracing(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_signpost_type_t v44;
  os_signpost_type_t v45;
  os_signpost_id_t v46;
  id v47;
  os_signpost_type_t v48;
  os_signpost_id_t v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;

  v3 = v2;
  v76 = a1;
  v88 = *MEMORY[0x1E0C80C00];
  v4 = sub_1AF3E773C();
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AF3E7754();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  result = *v11;
  v13 = *(_QWORD *)(*v11 + 16);
  if (v13)
  {
    v73 = v6;
    v65[1] = v3;
    v66 = swift_bridgeObjectRetain();
    v14 = (uint64_t *)(v66 + 64);
    *(_QWORD *)&v15 = 136446210;
    v68 = v15;
    v67 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v15 = 136315138;
    v72 = v15;
    v77 = v7;
    v71 = v10;
    v70 = v8;
    while (1)
    {
      v78 = (uint64_t)v14;
      v79 = v13;
      v17 = *(v14 - 4);
      v16 = *(v14 - 3);
      v18 = (void *)*(v14 - 2);
      v19 = (void *)*(v14 - 1);
      v20 = *v14;
      v21 = qword_1EEE3C480;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v21 != -1)
        swift_once();
      v22 = sub_1AF3E7778();
      v23 = __swift_project_value_buffer(v22, (uint64_t)qword_1EEE41228);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v69 = v23;
      v24 = sub_1AF3E7760();
      v25 = sub_1AF3E7B5C();
      v26 = os_log_type_enabled(v24, v25);
      v82 = v17;
      if (v26)
      {
        v27 = v20;
        v28 = swift_slowAlloc();
        v29 = v17;
        v30 = v8;
        v31 = swift_slowAlloc();
        v86 = v31;
        *(_DWORD *)v28 = v68;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v28 + 4) = sub_1AF346C80(v29, v16, &v86);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v24, v25, "calling provider %{public}s's shouldStartTracing", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        v32 = v31;
        v8 = v30;
        MEMORY[0x1AF45E3DC](v32, -1, -1);
        v33 = v28;
        v20 = v27;
        v7 = v77;
        MEMORY[0x1AF45E3DC](v33, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      if (qword_1EEE3C488 != -1)
        swift_once();
      v34 = __swift_project_value_buffer(v7, (uint64_t)qword_1EEE41240);
      v35 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v71, v34, v7);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v36 = v16;
      v37 = v73;
      sub_1AF3E7730();
      v38 = v18;
      v39 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v86 = v40;
      *(_DWORD *)v39 = v72;
      swift_bridgeObjectRetain();
      v41 = v82;
      *(_QWORD *)(v39 + 4) = sub_1AF346C80(v82, v36, &v86);
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      v80 = v36;
      swift_bridgeObjectRelease_n();
      v42 = sub_1AF3E7748();
      v84 = v20;
      v43 = v42;
      v44 = sub_1AF3E7BE0();
      v83 = v19;
      v45 = v44;
      v46 = sub_1AF3E7724();
      _os_signpost_emit_with_name_impl(&dword_1AF33A000, v43, v45, v46, "01: shouldStartTracing", "%s", (uint8_t *)v39, 0xCu);
      v85 = 0;
      v81 = v38;
      if (!objc_msgSend(v38, sel_shouldStartTracingWithConfiguration_error_, v76, &v85))
        break;
      v47 = v85;
      v48 = sub_1AF3E7BD4();
      v49 = sub_1AF3E7724();
      _os_signpost_emit_with_name_impl(&dword_1AF33A000, v43, v48, v49, "01: shouldStartTracing", "%s", (uint8_t *)v39, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x1AF45E3DC](v40, -1, -1);
      MEMORY[0x1AF45E3DC](v39, -1, -1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v75);
      v8 = v70;
      v7 = v77;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v35, v77);
      v14 = (uint64_t *)(v78 + 40);
      v13 = v79 - 1;
      if (v79 == 1)
        return swift_bridgeObjectRelease();
    }
    v50 = v85;
    v51 = (void *)sub_1AF3E75EC();

    swift_willThrow();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v75);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v35, v77);
    v86 = (uint64_t)v51;
    v52 = v51;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B540);
    v53 = sub_1AF3E78F8();
    v55 = v54;
    v56 = v80;
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    v57 = v83;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v58 = sub_1AF3E7760();
    v59 = sub_1AF3E7B50();
    v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      v61 = swift_slowAlloc();
      LODWORD(v79) = v60;
      v62 = v61;
      v78 = swift_slowAlloc();
      v86 = v78;
      *(_DWORD *)v62 = 136446466;
      swift_bridgeObjectRetain();
      v85 = (id)sub_1AF346C80(v41, v56, &v86);
      sub_1AF3E7C7C();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v62 + 12) = 2082;
      swift_bridgeObjectRetain();
      v85 = (id)sub_1AF346C80(v53, v55, &v86);
      v57 = v83;
      sub_1AF3E7C7C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1AF33A000, v58, (os_log_type_t)v79, "provider %{public}s disallowing tracing: %{public}s", (uint8_t *)v62, 0x16u);
      v63 = v78;
      swift_arrayDestroy();
      MEMORY[0x1AF45E3DC](v63, -1, -1);
      MEMORY[0x1AF45E3DC](v62, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v86 = 0;
    v87 = 0xE000000000000000;
    swift_unknownObjectRetain();
    sub_1AF3E7DE4();
    swift_bridgeObjectRelease();
    v86 = 0xD00000000000001ELL;
    v87 = 0x80000001AF3F1050;
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    v64 = (void *)sub_1AF3E78BC();
    swift_bridgeObjectRelease();
    objc_msgSend(v57, sel_failWithReason_, v64);
    swift_unknownObjectRelease();

    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1AF393A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  void *v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_signpost_type_t v35;
  os_signpost_id_t v36;
  uint64_t v37;
  os_signpost_type_t v38;
  char *v39;
  os_signpost_id_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, void **);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68[6];
  id v69;

  v52 = a1;
  v51 = sub_1AF3E773C();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v63 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1AF3E7754();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers;
  swift_beginAccess();
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  if (v8)
  {
    v9 = sel_shouldAmendWithFile_error_;
    v46 = &v67;
    v49 = &v66;
    v43 = swift_bridgeObjectRetain();
    v10 = (uint64_t *)(v43 + 64);
    *(_QWORD *)&v11 = 136446210;
    v45 = v11;
    v44 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v11 = 136315138;
    v48 = v11;
    v58 = sel_shouldAmendWithFile_error_;
    v53 = v4;
    v47 = v6;
    v59 = v3;
    while (1)
    {
      v12 = *(v10 - 3);
      v13 = *(v10 - 2);
      v14 = *(v10 - 1);
      v15 = *v10;
      v62 = *(v10 - 4);
      v68[0] = v62;
      v68[1] = v12;
      v68[2] = v13;
      v68[3] = v14;
      v68[4] = v15;
      objc_opt_self();
      v16 = swift_dynamicCastObjCClass();
      if (!v16)
        break;
      v17 = (void *)v16;
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      v64 = v14;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (!objc_msgSend(v17, sel_respondsToSelector_, v9, v43, v44))
      {
        swift_unknownObjectRelease();
        goto LABEL_17;
      }
      v54 = v10;
      v55 = v8;
      v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void **))objc_msgSend(v17, sel_methodForSelector_, v9);
      if (qword_1EEE3C480 != -1)
        swift_once();
      v18 = sub_1AF3E7778();
      __swift_project_value_buffer(v18, (uint64_t)qword_1EEE41228);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v19 = sub_1AF3E7760();
      v20 = sub_1AF3E7B5C();
      v21 = os_log_type_enabled(v19, v20);
      v61 = v13;
      v22 = v59;
      v57 = v15;
      if (v21)
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = (void *)swift_slowAlloc();
        v69 = v24;
        *(_DWORD *)v23 = v45;
        swift_bridgeObjectRetain();
        v66 = sub_1AF346C80(v62, v12, (uint64_t *)&v69);
        v4 = v53;
        sub_1AF3E7C7C();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v19, v20, "calling provider %{public}s's shouldAmend", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v24, -1, -1);
        MEMORY[0x1AF45E3DC](v23, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      v25 = v12;
      v26 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
      v27 = (void *)sub_1AF3E78BC();
      v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 1, 0);

      v69 = v28;
      if (qword_1EEE3C488 != -1)
        swift_once();
      v29 = __swift_project_value_buffer(v22, (uint64_t)qword_1EEE41240);
      v30 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v47, v29, v22);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1AF3E7730();
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v66 = v32;
      *(_DWORD *)v31 = v48;
      swift_bridgeObjectRetain();
      v65 = sub_1AF346C80(v62, v25, &v66);
      sub_1AF3E7C7C();
      v33 = v30;
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v34 = sub_1AF3E7748();
      v35 = sub_1AF3E7BE0();
      v36 = sub_1AF3E7724();
      _os_signpost_emit_with_name_impl(&dword_1AF33A000, v34, v35, v36, "01: shouldAmend", "%s", v31, 0xCu);
      v37 = v60;
      sub_1AF394230(v56, v68, (uint64_t)v58, v52, (uint64_t *)&v69);
      v60 = v37;
      if (v37)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v50 + 8))(v63, v51);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v59);

        return;
      }
      v38 = sub_1AF3E7BD4();
      v39 = v63;
      v40 = sub_1AF3E7724();
      _os_signpost_emit_with_name_impl(&dword_1AF33A000, v34, v38, v40, "01: shouldAmend", "%s", v31, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x1AF45E3DC](v32, -1, -1);
      MEMORY[0x1AF45E3DC](v31, -1, -1);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
      v4 = v53;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v59);

      v10 = v54 + 5;
      v8 = v55 - 1;
      v9 = v58;
      if (v55 == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1AF3988A0();
    v41 = swift_allocError();
    *(_QWORD *)v42 = v62;
    *(_QWORD *)(v42 + 8) = v12;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_BYTE *)(v42 + 32) = 5;
    v60 = v41;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1AF394230(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, void **), uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t ErrorValue;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = a2[2];
  v44 = (void *)*a5;
  v9 = a1(v8, a3, a4, &v44);
  v10 = v44;
  v11 = (void *)*a5;
  *a5 = (uint64_t)v44;
  v12 = v10;

  result = sub_1AF347DB8(a4);
  if ((v9 & 1) == 0)
  {
    v14 = *a2;
    v15 = a2[1];
    sub_1AF3988A0();
    v16 = (void *)swift_allocError();
    v40 = v14;
    *(_QWORD *)v17 = v14;
    *(_QWORD *)(v17 + 8) = v15;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_BYTE *)(v17 + 32) = 6;
    v18 = (void *)*a5;
    if (*a5)
    {
      swift_bridgeObjectRetain();
      v19 = v18;

      v16 = v19;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v39 = v16;
    ErrorValue = swift_getErrorValue();
    v21 = v42;
    v22 = *(_QWORD *)(v42 - 8);
    MEMORY[0x1E0C80A78](ErrorValue);
    v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v24);
    v38 = sub_1AF3E8078();
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    if (qword_1EEE3C480 != -1)
      swift_once();
    v27 = sub_1AF3E7778();
    __swift_project_value_buffer(v27, (uint64_t)qword_1EEE41228);
    v28 = (void *)a2[3];
    v43 = a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1AF398928((uint64_t)&v43);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1AF398928((uint64_t)&v43);
    swift_bridgeObjectRetain();
    v29 = sub_1AF3E7760();
    v30 = sub_1AF3E7B50();
    v31 = os_log_type_enabled(v29, v30);
    v32 = v40;
    if (v31)
    {
      v33 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v44 = (void *)v37;
      *(_DWORD *)v33 = 136446466;
      swift_bridgeObjectRetain();
      v41 = sub_1AF346C80(v32, v15, (uint64_t *)&v44);
      sub_1AF3E7C7C();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_1AF398950((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF398950((uint64_t)&v43);
      *(_WORD *)(v33 + 12) = 2082;
      swift_bridgeObjectRetain();
      v41 = sub_1AF346C80(v38, v26, (uint64_t *)&v44);
      v32 = v40;
      sub_1AF3E7C7C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1AF33A000, v29, v30, "provider %{public}s cannot amend: %{public}s", (uint8_t *)v33, 0x16u);
      v34 = v37;
      swift_arrayDestroy();
      MEMORY[0x1AF45E3DC](v34, -1, -1);
      MEMORY[0x1AF45E3DC](v33, -1, -1);

    }
    else
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF398950((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF398950((uint64_t)&v43);

      swift_bridgeObjectRelease_n();
    }
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_1AF3E7DE4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v44 = (void *)v32;
    v45 = v15;
    sub_1AF3E7970();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    v35 = (void *)sub_1AF3E78BC();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_failWithReason_, v35);

    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall ProviderList.configure(session:)(Swift::OpaquePointer session)
{
  sub_1AF394E08((uint64_t)session._rawValue, (SEL *)&selRef_configureWithSession_, "calling provider %{public}s's configure", "02: configure");
}

uint64_t ProviderList.willStartTracing(file:)(uint64_t a1)
{
  return sub_1AF394810(a1, (SEL *)&selRef_willStartTracingToFile_, "calling provider %{public}s's willStartTracing", "03: willStartTracing");
}

uint64_t ProviderList.didEndTracing(file:)(uint64_t a1)
{
  return sub_1AF394810(a1, (SEL *)&selRef_didStopTracingToFile_, "calling provider %{public}s's didEndTracing", "06: didEndTracing");
}

uint64_t sub_1AF394810(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  char **v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  os_signpost_id_t v20;
  const char *v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  const char *v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  SEL *v52;
  uint64_t v53[10];

  v45 = a4;
  v39 = a3;
  v52 = a2;
  v44 = a1;
  v5 = sub_1AF3E773C();
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AF3E7754();
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  MEMORY[0x1E0C80A78](v7);
  v48 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  result = *v9;
  v11 = *(_QWORD *)(*v9 + 16);
  if (v11)
  {
    v36 = swift_bridgeObjectRetain();
    v12 = (uint64_t *)(v36 + 64);
    v13 = &selRef_init;
    *(_QWORD *)&v14 = 136446210;
    v38 = v14;
    v37 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v14 = 136315138;
    v40 = v14;
    do
    {
      v24 = *(v12 - 4);
      v25 = *(v12 - 3);
      v27 = (void *)*(v12 - 2);
      v26 = *(v12 - 1);
      v28 = *v12;
      v53[4] = v24;
      v53[5] = v25;
      v53[6] = (uint64_t)v27;
      v53[7] = v26;
      v53[8] = v28;
      if ((objc_msgSend(v27, v13[9], *v52, v36, v37) & 1) != 0)
      {
        v29 = qword_1EEE3C480;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v29 != -1)
          swift_once();
        v30 = sub_1AF3E7778();
        __swift_project_value_buffer(v30, (uint64_t)qword_1EEE41228);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v31 = sub_1AF3E7760();
        v32 = sub_1AF3E7B5C();
        v33 = os_log_type_enabled(v31, v32);
        v51 = v28;
        if (v33)
        {
          v34 = swift_slowAlloc();
          v35 = swift_slowAlloc();
          v53[0] = v35;
          *(_DWORD *)v34 = v38;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v34 + 4) = sub_1AF346C80(v24, v25, v53);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v31, v32, v39, (uint8_t *)v34, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v35, -1, -1);
          MEMORY[0x1AF45E3DC](v34, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        v47 = v11;
        if (qword_1EEE3C488 != -1)
          swift_once();
        __swift_project_value_buffer(v50, (uint64_t)qword_1EEE41240);
        (*(void (**)(void))(v49 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v15 = v41;
        sub_1AF3E7730();
        v16 = swift_slowAlloc();
        v17 = swift_slowAlloc();
        v53[0] = v17;
        *(_DWORD *)v16 = v40;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v16 + 4) = sub_1AF346C80(v24, v25, v53);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v18 = sub_1AF3E7748();
        v19 = sub_1AF3E7BE0();
        v20 = sub_1AF3E7724();
        v46 = v26;
        v21 = v45;
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v18, v19, v20, v45, "%s", (uint8_t *)v16, 0xCu);
        v22 = v44;
        objc_msgSend(v27, *v52, v44);
        sub_1AF347DB8(v22);
        LOBYTE(v22) = sub_1AF3E7BD4();
        v23 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v18, (os_signpost_type_t)v22, v23, v21, "%s", (uint8_t *)v16, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v17, -1, -1);
        MEMORY[0x1AF45E3DC](v16, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v43);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
        v11 = v47;
        v13 = &selRef_init;
      }
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ProviderList.configurePostprocessing(session:)(Swift::OpaquePointer session)
{
  sub_1AF394E08((uint64_t)session._rawValue, (SEL *)&selRef_configurePostprocessingWithSession_, "calling provider %{public}s's configurePostprocessing", "07: configurePostprocessing");
}

uint64_t sub_1AF394E08(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  char **v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  os_signpost_id_t v21;
  void *v22;
  const char *v23;
  os_signpost_type_t v24;
  os_signpost_id_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  const char *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  SEL *v55;
  uint64_t v56;

  v46 = a1;
  v47 = a4;
  v41 = a3;
  v55 = a2;
  v5 = sub_1AF3E773C();
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  MEMORY[0x1E0C80A78](v5);
  v43 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1AF3E7754();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  result = *v9;
  v11 = *(_QWORD *)(*v9 + 16);
  if (v11)
  {
    v38 = swift_bridgeObjectRetain();
    v12 = (uint64_t *)(v38 + 64);
    v13 = &selRef_init;
    *(_QWORD *)&v14 = 136446210;
    v40 = v14;
    v39 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v14 = 136315138;
    v42 = v14;
    do
    {
      v26 = *(v12 - 4);
      v27 = *(v12 - 3);
      v28 = (void *)*(v12 - 2);
      v29 = *(v12 - 1);
      v30 = *v12;
      if ((objc_msgSend(v28, v13[9], *v55, v38, v39) & 1) != 0)
      {
        v51 = v11;
        v31 = qword_1EEE3C480;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 != -1)
          swift_once();
        v32 = sub_1AF3E7778();
        __swift_project_value_buffer(v32, (uint64_t)qword_1EEE41228);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v33 = sub_1AF3E7760();
        v34 = sub_1AF3E7B5C();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = v30;
          v36 = swift_slowAlloc();
          v37 = swift_slowAlloc();
          v56 = v37;
          *(_DWORD *)v36 = v40;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v36 + 4) = sub_1AF346C80(v26, v27, &v56);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v33, v34, v41, (uint8_t *)v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v37, -1, -1);
          v30 = v35;
          MEMORY[0x1AF45E3DC](v36, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1EEE3C488 != -1)
          swift_once();
        __swift_project_value_buffer(v54, (uint64_t)qword_1EEE41240);
        (*(void (**)(void))(v53 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v15 = v43;
        sub_1AF3E7730();
        v16 = swift_slowAlloc();
        v50 = v30;
        v17 = v16;
        v18 = swift_slowAlloc();
        v56 = v18;
        *(_DWORD *)v17 = v42;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v17 + 4) = sub_1AF346C80(v26, v27, &v56);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v19 = sub_1AF3E7748();
        v20 = sub_1AF3E7BE0();
        v21 = sub_1AF3E7724();
        v49 = v29;
        v22 = v28;
        v23 = v47;
        v48 = v27;
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v19, v20, v21, v47, "%s", (uint8_t *)v17, 0xCu);
        objc_msgSend(v22, *v55, v46);
        v24 = sub_1AF3E7BD4();
        v25 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v19, v24, v25, v23, "%s", (uint8_t *)v17, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v18, -1, -1);
        MEMORY[0x1AF45E3DC](v17, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
        v11 = v51;
        v13 = &selRef_init;
      }
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ProviderList.postprocessingComplete(file:)(Swift::OpaquePointer file)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char **v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_signpost_type_t v15;
  os_signpost_id_t v16;
  uint64_t v17;
  os_signpost_id_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *rawValue;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[10];

  rawValue = file._rawValue;
  v2 = sub_1AF3E773C();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x1E0C80A78](v2);
  v34 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1AF3E7754();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x1E0C80A78](v4);
  v41 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers;
  swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v7)
  {
    v30 = swift_bridgeObjectRetain();
    v8 = (uint64_t *)(v30 + 64);
    v9 = &selRef_init;
    *(_QWORD *)&v10 = 136446210;
    v32 = v10;
    v31 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v10 = 136315138;
    v33 = v10;
    do
    {
      v19 = *(v8 - 4);
      v20 = *(v8 - 3);
      v21 = (void *)*(v8 - 2);
      v22 = *(v8 - 1);
      v23 = *v8;
      v44[4] = v19;
      v44[5] = v20;
      v44[6] = (uint64_t)v21;
      v44[7] = v22;
      v44[8] = v23;
      if ((objc_msgSend(v21, v9[9], sel_postprocessingCompleteWithFile_, v30, v31) & 1) != 0)
      {
        v40 = v7;
        v24 = qword_1EEE3C480;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v24 != -1)
          swift_once();
        v25 = sub_1AF3E7778();
        __swift_project_value_buffer(v25, (uint64_t)qword_1EEE41228);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v26 = sub_1AF3E7760();
        v27 = sub_1AF3E7B5C();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = swift_slowAlloc();
          v29 = swift_slowAlloc();
          v44[0] = v29;
          *(_DWORD *)v28 = v32;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v28 + 4) = sub_1AF346C80(v19, v20, v44);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1AF33A000, v26, v27, "calling provider %{public}s's postprocessingComplete", (uint8_t *)v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF45E3DC](v29, -1, -1);
          MEMORY[0x1AF45E3DC](v28, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        if (qword_1EEE3C488 != -1)
          swift_once();
        __swift_project_value_buffer(v43, (uint64_t)qword_1EEE41240);
        (*(void (**)(void))(v42 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v39 = v23;
        v11 = v34;
        sub_1AF3E7730();
        v12 = swift_slowAlloc();
        v13 = swift_slowAlloc();
        v44[0] = v13;
        *(_DWORD *)v12 = v33;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v12 + 4) = sub_1AF346C80(v19, v20, v44);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v14 = sub_1AF3E7748();
        v15 = sub_1AF3E7BE0();
        v16 = sub_1AF3E7724();
        v38 = v22;
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v14, v15, v16, "08: postprocessingComplete", "%s", (uint8_t *)v12, 0xCu);
        v17 = (uint64_t)rawValue;
        objc_msgSend(v21, sel_postprocessingCompleteWithFile_, rawValue);
        sub_1AF347DB8(v17);
        LOBYTE(v17) = sub_1AF3E7BD4();
        v18 = sub_1AF3E7724();
        _os_signpost_emit_with_name_impl(&dword_1AF33A000, v14, (os_signpost_type_t)v17, v18, "08: postprocessingComplete", "%s", (uint8_t *)v12, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v13, -1, -1);
        MEMORY[0x1AF45E3DC](v12, -1, -1);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v43);
        v7 = v40;
        v9 = &selRef_init;
      }
      v8 += 5;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t ProviderList.willFinish(catalog:file:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_signpost_type_t v28;
  os_signpost_id_t v29;
  uint64_t v30;
  os_signpost_id_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[10];

  v39 = a1;
  v40 = a2;
  v3 = sub_1AF3E773C();
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1AF3E7754();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  result = *v7;
  v9 = *(_QWORD *)(*v7 + 16);
  if (v9)
  {
    v32 = swift_bridgeObjectRetain();
    v10 = (uint64_t *)(v32 + 64);
    *(_QWORD *)&v11 = 136446210;
    v34 = v11;
    v33 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v11 = 136315138;
    v35 = v11;
    v12 = v36;
    do
    {
      v43 = v10;
      v44 = v9;
      v14 = *(v10 - 4);
      v13 = *(v10 - 3);
      v15 = (void *)*(v10 - 2);
      v16 = *(v10 - 1);
      v17 = *v10;
      v48[4] = v14;
      v48[5] = v13;
      v48[6] = (uint64_t)v15;
      v48[7] = v16;
      v48[8] = v17;
      v18 = qword_1EEE3C480;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 != -1)
        swift_once();
      v19 = sub_1AF3E7778();
      __swift_project_value_buffer(v19, (uint64_t)qword_1EEE41228);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v20 = sub_1AF3E7760();
      v21 = sub_1AF3E7B5C();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc();
        v23 = swift_slowAlloc();
        v48[0] = v23;
        *(_DWORD *)v22 = v34;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v22 + 4) = sub_1AF346C80(v14, v13, v48);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1AF33A000, v20, v21, "calling provider %{public}s's willFinish", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF45E3DC](v23, -1, -1);
        MEMORY[0x1AF45E3DC](v22, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      if (qword_1EEE3C488 != -1)
        swift_once();
      v24 = __swift_project_value_buffer(v47, (uint64_t)qword_1EEE41240);
      (*(void (**)(char *, uint64_t))(v46 + 16))(v45, v24);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1AF3E7730();
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v48[0] = v26;
      *(_DWORD *)v25 = v35;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v25 + 4) = sub_1AF346C80(v14, v13, v48);
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v27 = sub_1AF3E7748();
      v28 = sub_1AF3E7BE0();
      v29 = sub_1AF3E7724();
      v42 = v17;
      v41 = v16;
      _os_signpost_emit_with_name_impl(&dword_1AF33A000, v27, v28, v29, "09: willFinish", "%s", (uint8_t *)v25, 0xCu);
      v30 = v40;
      objc_msgSend(v15, sel_willFinishWithCatalog_file_, v39, v40, v32, v33);
      sub_1AF347DB8(v30);
      LOBYTE(v30) = sub_1AF3E7BD4();
      v31 = sub_1AF3E7724();
      _os_signpost_emit_with_name_impl(&dword_1AF33A000, v27, (os_signpost_type_t)v30, v31, "09: willFinish", "%s", (uint8_t *)v25, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x1AF45E3DC](v26, -1, -1);
      MEMORY[0x1AF45E3DC](v25, -1, -1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
      v10 = v43 + 5;
      v9 = v44 - 1;
    }
    while (v44 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id ProviderList.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ProviderList.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ProviderList.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ktrace_session_provide(_TtC6ktrace12ProviderList *a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)sub_1AF3E7874();
  swift_unknownObjectRetain();
  v10 = ktrace_session_provide(_:_:_:_:_:)(a1, a2, v9, a4, a5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t ktrace_session_provide(_:_:_:_:_:)(_TtC6ktrace12ProviderList *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;

  _session_ensure_providers(a1);
  v9 = (id)_session_providers((uint64_t)a1);
  v10 = sub_1AF3E797C();
  sub_1AF392ED4(v10, v11, a3, a4, a5);
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t ktrace_list_providers(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1AF398AF4(a1, a3);
}

uint64_t ktrace_list_providers(_:_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1AF398AF4(a1, a3);
}

_QWORD *sub_1AF3961D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B628);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1AF39781C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AF3962F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B608);
  v10 = *(_QWORD *)(sub_1AF3E7694() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1AF3E7ED4();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1AF3E7694() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1AF397FB0(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_1AF3964F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5F0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1AF397EC0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AF396604(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5F8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1AF398A00(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AF396724(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B600);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

unint64_t sub_1AF396870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1AF3E80D8();
  sub_1AF3E7940();
  v4 = sub_1AF3E8114();
  return sub_1AF3968D4(a1, a2, v4);
}

unint64_t sub_1AF3968D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1AF3E8030() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1AF3E8030() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1AF3969B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

uint64_t sub_1AF396B1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1AF397808(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1AF396B84(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1AF396B84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  BOOL v48;
  __int128 v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *__dst;

  v3 = a1[1];
  result = sub_1AF3E8000();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_1AF3972AC(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v118 = result;
  v115 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v106 = v11;
      v117 = v8;
      if (v12 >= 2)
      {
        v107 = *v115;
        do
        {
          v108 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v107)
            goto LABEL_159;
          v109 = v106;
          v110 = *(_QWORD *)&v106[16 * v108 + 32];
          v111 = *(_QWORD *)&v106[16 * v12 + 24];
          sub_1AF39739C((char *)(v107 + (v110 << 6)), (char *)(v107 + (*(_QWORD *)&v106[16 * v12 + 16] << 6)), v107 + (v111 << 6), __dst);
          if (v1)
            break;
          if (v111 < v110)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v109 = sub_1AF3977F4((uint64_t)v109);
          if (v108 >= *((_QWORD *)v109 + 2))
            goto LABEL_149;
          v112 = &v109[16 * v108 + 32];
          *(_QWORD *)v112 = v110;
          *((_QWORD *)v112 + 1) = v111;
          v113 = *((_QWORD *)v109 + 2);
          if (v12 > v113)
            goto LABEL_150;
          memmove(&v109[16 * v12 + 16], &v109[16 * v12 + 32], 16 * (v113 - v12));
          v106 = v109;
          *((_QWORD *)v109 + 2) = v113 - 1;
          v12 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v117 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v117 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1AF3E7AE4();
    *(_QWORD *)(v7 + 16) = v6;
    v117 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v116 = *a1 + 8;
  v114 = *a1 + 56;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v119 = v3;
  v120 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + (v9 << 6));
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + (v13 << 6));
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_1AF3E8030();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v116 + (v20 << 6));
    do
    {
      v23 = (_QWORD *)(v10 + (v9 << 6));
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_1AF3E8030()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 8;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = v20 << 6;
        v26 = v13 << 6;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = (_OWORD *)(v10 + v26);
            v30 = v10 + v25;
            v31 = *(_QWORD *)(v10 + v26);
            v32 = *(_QWORD *)(v10 + v26 + 8);
            v33 = *(_BYTE *)(v10 + v26 + 16);
            v34 = *(_QWORD *)(v10 + v26 + 56);
            v35 = *(_OWORD *)(v10 + v26 + 24);
            v36 = *(_OWORD *)(v10 + v26 + 40);
            v37 = *(_OWORD *)(v10 + v25 - 16);
            v39 = *(_OWORD *)(v10 + v25 - 64);
            v38 = *(_OWORD *)(v10 + v25 - 48);
            v29[2] = *(_OWORD *)(v10 + v25 - 32);
            v29[3] = v37;
            *v29 = v39;
            v29[1] = v38;
            *(_QWORD *)(v30 - 64) = v31;
            *(_QWORD *)(v30 - 56) = v32;
            *(_BYTE *)(v30 - 48) = v33;
            *(_OWORD *)(v30 - 40) = v35;
            *(_OWORD *)(v30 - 24) = v36;
            *(_QWORD *)(v30 - 8) = v34;
          }
          ++v28;
          v25 -= 64;
          v26 += 64;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v118)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1AF397654(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v56 = *((_QWORD *)v11 + 2);
    v55 = *((_QWORD *)v11 + 3);
    v12 = v56 + 1;
    if (v56 >= v55 >> 1)
      v11 = sub_1AF397654((char *)(v55 > 1), v56 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v57 = v11 + 32;
    v58 = &v11[16 * v56 + 32];
    *(_QWORD *)v58 = v13;
    *((_QWORD *)v58 + 1) = v9;
    if (v56)
    {
      v10 = v120;
      while (1)
      {
        v59 = v12 - 1;
        if (v12 >= 4)
        {
          v64 = &v57[16 * v12];
          v65 = *((_QWORD *)v64 - 8);
          v66 = *((_QWORD *)v64 - 7);
          v70 = __OFSUB__(v66, v65);
          v67 = v66 - v65;
          if (v70)
            goto LABEL_135;
          v69 = *((_QWORD *)v64 - 6);
          v68 = *((_QWORD *)v64 - 5);
          v70 = __OFSUB__(v68, v69);
          v62 = v68 - v69;
          v63 = v70;
          if (v70)
            goto LABEL_136;
          v71 = v12 - 2;
          v72 = &v57[16 * v12 - 32];
          v74 = *(_QWORD *)v72;
          v73 = *((_QWORD *)v72 + 1);
          v70 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v70)
            goto LABEL_138;
          v70 = __OFADD__(v62, v75);
          v76 = v62 + v75;
          if (v70)
            goto LABEL_141;
          if (v76 >= v67)
          {
            v94 = &v57[16 * v59];
            v96 = *(_QWORD *)v94;
            v95 = *((_QWORD *)v94 + 1);
            v70 = __OFSUB__(v95, v96);
            v97 = v95 - v96;
            if (v70)
              goto LABEL_145;
            v87 = v62 < v97;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v88 = *((_QWORD *)v11 + 4);
            v89 = *((_QWORD *)v11 + 5);
            v70 = __OFSUB__(v89, v88);
            v81 = v89 - v88;
            v82 = v70;
            goto LABEL_99;
          }
          v61 = *((_QWORD *)v11 + 4);
          v60 = *((_QWORD *)v11 + 5);
          v70 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          v63 = v70;
        }
        if ((v63 & 1) != 0)
          goto LABEL_137;
        v71 = v12 - 2;
        v77 = &v57[16 * v12 - 32];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v80 = __OFSUB__(v78, v79);
        v81 = v78 - v79;
        v82 = v80;
        if (v80)
          goto LABEL_140;
        v83 = &v57[16 * v59];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v70 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v70)
          goto LABEL_143;
        if (__OFADD__(v81, v86))
          goto LABEL_144;
        if (v81 + v86 >= v62)
        {
          v87 = v62 < v86;
LABEL_105:
          if (v87)
            v59 = v71;
          goto LABEL_107;
        }
LABEL_99:
        if ((v82 & 1) != 0)
          goto LABEL_139;
        v90 = &v57[16 * v59];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v70 = __OFSUB__(v91, v92);
        v93 = v91 - v92;
        if (v70)
          goto LABEL_142;
        if (v93 < v81)
          goto LABEL_15;
LABEL_107:
        v98 = v59 - 1;
        if (v59 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v99 = v11;
        v100 = v10;
        v101 = &v57[16 * v98];
        v102 = *(_QWORD *)v101;
        v103 = &v57[16 * v59];
        v104 = *((_QWORD *)v103 + 1);
        sub_1AF39739C((char *)(v100 + (*(_QWORD *)v101 << 6)), (char *)(v100 + (*(_QWORD *)v103 << 6)), v100 + (v104 << 6), __dst);
        if (v1)
          goto LABEL_115;
        if (v104 < v102)
          goto LABEL_132;
        if (v59 > *((_QWORD *)v99 + 2))
          goto LABEL_133;
        *(_QWORD *)v101 = v102;
        *(_QWORD *)&v57[16 * v98 + 8] = v104;
        v105 = *((_QWORD *)v99 + 2);
        if (v59 >= v105)
          goto LABEL_134;
        v11 = v99;
        v12 = v105 - 1;
        memmove(&v57[16 * v59], v103 + 16, 16 * (v105 - 1 - v59));
        *((_QWORD *)v99 + 2) = v105 - 1;
        v87 = v105 > 2;
        v10 = v120;
        if (!v87)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v120;
LABEL_15:
    v3 = v119;
    if (v9 >= v119)
    {
      v8 = v117;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v118))
    goto LABEL_153;
  if (v13 + v118 >= v3)
    v40 = v3;
  else
    v40 = v13 + v118;
  if (v40 >= v13)
  {
    if (v9 != v40)
    {
      v41 = v114 + (v9 << 6);
      do
      {
        v42 = (uint64_t *)(v10 + (v9 << 6));
        v43 = *v42;
        v44 = v42[1];
        v45 = v13;
        v46 = v41;
        do
        {
          v47 = (_OWORD *)(v46 - 120);
          v48 = v43 == *(_QWORD *)(v46 - 120) && v44 == *(_QWORD *)(v46 - 112);
          if (v48 || (sub_1AF3E8030() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v50 = *(_OWORD *)(v46 - 88);
          v49 = *(_OWORD *)(v46 - 72);
          *(_QWORD *)(v46 - 64) = *(_QWORD *)v46;
          v46 -= 64;
          v43 = *(_QWORD *)(v46 + 8);
          v44 = *(_QWORD *)(v46 + 16);
          v51 = *(_BYTE *)(v46 + 24);
          v52 = *(_OWORD *)(v46 + 32);
          v53 = *(_OWORD *)(v46 + 48);
          v54 = v47[1];
          v47[4] = *v47;
          v47[5] = v54;
          v47[6] = v50;
          v47[7] = v49;
          *(_QWORD *)(v46 - 56) = v43;
          *(_QWORD *)(v46 - 48) = v44;
          *(_BYTE *)(v46 - 40) = v51;
          *(_OWORD *)(v46 - 32) = v52;
          *(_OWORD *)(v46 - 16) = v53;
          ++v45;
        }
        while (v9 != v45);
        ++v9;
        v41 += 64;
      }
      while (v9 != v40);
      v9 = v40;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_1AF3E7ED4();
  __break(1u);
  return result;
}

uint64_t sub_1AF3972AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + (a3 << 6) + 56;
LABEL_5:
    v9 = (uint64_t *)(v7 + (v4 << 6));
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = (_OWORD *)(v12 - 120);
      v14 = result == *(_QWORD *)(v12 - 120) && v10 == *(_QWORD *)(v12 - 112);
      if (v14 || (result = sub_1AF3E8030(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 64;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = *(_OWORD *)(v12 - 88);
      v15 = *(_OWORD *)(v12 - 72);
      *(_QWORD *)(v12 - 64) = *(_QWORD *)v12;
      v12 -= 64;
      result = *(_QWORD *)(v12 + 8);
      v10 = *(_QWORD *)(v12 + 16);
      v17 = *(_BYTE *)(v12 + 24);
      v18 = *(_OWORD *)(v12 + 32);
      v19 = *(_OWORD *)(v12 + 48);
      v20 = v13[1];
      v13[4] = *v13;
      v13[5] = v20;
      v13[6] = v16;
      v13[7] = v15;
      *(_QWORD *)(v12 - 56) = result;
      *(_QWORD *)(v12 - 48) = v10;
      *(_BYTE *)(v12 - 40) = v17;
      *(_OWORD *)(v12 - 32) = v18;
      *(_OWORD *)(v12 - 16) = v19;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1AF39739C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  char *v37;
  char *v38;
  char *v39;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 63;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 6;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 63;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 6;
  v39 = __src;
  v38 = __dst;
  if (v10 >= v12 >> 6)
  {
    if (v11 >= -63)
    {
      if (__dst != a2 || &a2[64 * v13] <= __dst)
        memmove(__dst, a2, v13 << 6);
      v23 = &v4[64 * v13];
      v37 = v23;
      v39 = v6;
      if (v7 < v6 && v11 >= 64)
      {
        v24 = (char *)(a3 - 64);
        v25 = v6;
        while (1)
        {
          v26 = v24 + 64;
          v27 = *((_QWORD *)v25 - 8);
          v28 = *((_QWORD *)v25 - 7);
          v25 -= 64;
          v29 = *((_QWORD *)v23 - 8) == v27 && *((_QWORD *)v23 - 7) == v28;
          if (v29 || (sub_1AF3E8030() & 1) == 0)
          {
            v37 = v23 - 64;
            if (v26 < v23 || v24 >= v23 || v26 != v23)
            {
              v33 = *((_OWORD *)v23 - 4);
              v34 = *((_OWORD *)v23 - 3);
              v35 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v24 + 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v24 + 3) = v35;
              *(_OWORD *)v24 = v33;
              *((_OWORD *)v24 + 1) = v34;
            }
            v25 = v6;
            v23 -= 64;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v26 != v6 || v24 >= v6)
            {
              v30 = *(_OWORD *)v25;
              v31 = *((_OWORD *)v25 + 1);
              v32 = *((_OWORD *)v25 + 3);
              *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
              *((_OWORD *)v24 + 3) = v32;
              *(_OWORD *)v24 = v30;
              *((_OWORD *)v24 + 1) = v31;
            }
            v39 = v25;
            if (v25 <= v7)
              goto LABEL_50;
          }
          v24 -= 64;
          v6 = v25;
          if (v23 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -63)
  {
    if (__dst != __src || &__src[64 * v10] <= __dst)
      memmove(__dst, __src, v10 << 6);
    v14 = &v4[64 * v10];
    v37 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 64)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_1AF3E8030() & 1) == 0)
        {
          if (v7 != v4)
          {
            v20 = *(_OWORD *)v4;
            v21 = *((_OWORD *)v4 + 1);
            v22 = *((_OWORD *)v4 + 3);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 3) = v22;
            *(_OWORD *)v7 = v20;
            *((_OWORD *)v7 + 1) = v21;
          }
          v4 += 64;
          v38 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 64;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *(_OWORD *)v6;
            v18 = *((_OWORD *)v6 + 1);
            v19 = *((_OWORD *)v6 + 3);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 3) = v19;
            *(_OWORD *)v7 = v17;
            *((_OWORD *)v7 + 1) = v18;
          }
        }
        v7 += 64;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v39 = v7;
    }
LABEL_50:
    sub_1AF39774C((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

char *sub_1AF397654(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AF39774C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 63;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -64)
  {
    result = (char *)sub_1AF3E7F1C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 6;
    if (result != v3 || result >= &v3[64 * v7])
      return (char *)memmove(result, v3, v7 << 6);
  }
  return result;
}

char *sub_1AF3977F4(uint64_t a1)
{
  return sub_1AF397654(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1AF397808(uint64_t a1)
{
  return sub_1AF3969B4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1AF39781C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

uint64_t sub_1AF397910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  uint64_t result;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;

  if (!*(_QWORD *)(a3 + 16) || (v8 = sub_1AF396870(0x746E656D75636F44, 0xED00006E6F697461), (v9 & 1) == 0))
  {
    v48 = 0u;
    v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  sub_1AF346D50(*(_QWORD *)(a3 + 56) + 32 * v8, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v49 + 1))
  {
LABEL_16:
    result = sub_1AF399D30((uint64_t)&v48);
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B618);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_17:
    v16 = 0;
    v14 = 0;
    v15 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_18;
  }
  if (*(_QWORD *)(v46 + 16) && (v11 = sub_1AF396870(0x736973706F6E7953, 0xE800000000000000), (v12 & 1) != 0))
  {
    sub_1AF346D50(*(_QWORD *)(v46 + 56) + 32 * v11, (uint64_t)&v48);
    v13 = swift_dynamicCast();
    if (v13)
      v14 = v46;
    else
      v14 = 0;
    if (v13)
      v15 = v47;
    else
      v15 = 0;
    if (!*(_QWORD *)(v46 + 16))
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    if (!*(_QWORD *)(v46 + 16))
      goto LABEL_30;
  }
  v20 = sub_1AF396870(0x7470697263736544, 0xEB000000006E6F69);
  if ((v21 & 1) != 0)
  {
    sub_1AF346D50(*(_QWORD *)(v46 + 56) + 32 * v20, (uint64_t)&v48);
    v22 = swift_dynamicCast();
    if (v22)
      v17 = v46;
    else
      v17 = 0;
    if (v22)
      v18 = v47;
    else
      v18 = 0;
    if (!*(_QWORD *)(v46 + 16))
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_30:
  v17 = 0;
  v18 = 0;
  if (!*(_QWORD *)(v46 + 16))
  {
LABEL_34:
    v16 = 0;
    goto LABEL_35;
  }
LABEL_31:
  v23 = sub_1AF396870(0x6E6564646948, 0xE600000000000000);
  if ((v24 & 1) == 0)
    goto LABEL_34;
  sub_1AF346D50(*(_QWORD *)(v46 + 56) + 32 * v23, (uint64_t)&v48);
  if (!swift_dynamicCast())
    goto LABEL_34;
  v16 = v46;
LABEL_35:
  v45 = v16;
  if (*(_QWORD *)(v46 + 16) && (v25 = sub_1AF396870(0x736E6F6974704FLL, 0xE700000000000000), (v26 & 1) != 0))
  {
    sub_1AF346D50(*(_QWORD *)(v46 + 56) + 32 * v25, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v49 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B620);
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v44 = *(_QWORD *)(v46 + 16);
      if (!v44)
      {
        result = swift_bridgeObjectRelease();
        v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_19;
      }
      swift_bridgeObjectRetain();
      v27 = v46;
      v28 = 0;
      v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v29 = *(_QWORD *)(v27 + 8 * v28 + 32);
        if (*(_QWORD *)(v29 + 16))
        {
          v30 = sub_1AF396870(0x6E6F6974704FLL, 0xE600000000000000);
          v27 = v46;
          if ((v31 & 1) != 0)
          {
            sub_1AF346D50(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)&v48);
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (*(_QWORD *)(v29 + 16)
                && (v32 = sub_1AF396870(0x7470697263736544, 0xEB000000006E6F69), (v33 & 1) != 0)
                && (sub_1AF346D50(*(_QWORD *)(v29 + 56) + 32 * v32, (uint64_t)&v48), (swift_dynamicCast() & 1) != 0))
              {
                if (*(_QWORD *)(v29 + 16))
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v34 = sub_1AF396870(0xD000000000000011, 0x80000001AF3F1760);
                  if ((v35 & 1) != 0
                    && (sub_1AF346D50(*(_QWORD *)(v29 + 56) + 32 * v34, (uint64_t)&v48),
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470),
                        (swift_dynamicCast() & 1) != 0))
                  {
                    v36 = v47;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v37 = v46;
                  }
                  else
                  {
                    v36 = v47;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v37 = MEMORY[0x1E0DEE9D8];
                  }
                }
                else
                {
                  v37 = MEMORY[0x1E0DEE9D8];
                  v36 = v47;
                }
                if (v36)
                {
                  v43 = v37;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v19 = sub_1AF3961D0(0, v19[2] + 1, 1, v19);
                  v39 = v19[2];
                  v38 = v19[3];
                  v40 = v39 + 1;
                  v27 = v46;
                  if (v39 >= v38 >> 1)
                  {
                    v42 = sub_1AF3961D0((_QWORD *)(v38 > 1), v39 + 1, 1, v19);
                    v40 = v39 + 1;
                    v27 = v46;
                    v19 = v42;
                  }
                  v19[2] = v40;
                  v41 = &v19[5 * v39];
                  v41[4] = v46;
                  v41[5] = v47;
                  v41[6] = v46;
                  v41[7] = v47;
                  v41[8] = v43;
                  goto LABEL_45;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            v27 = v46;
          }
        }
LABEL_45:
        if (v44 == ++v28)
        {
          result = swift_bridgeObjectRelease_n();
          v16 = v45;
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    result = sub_1AF399D30((uint64_t)&v48);
  }
LABEL_18:
  v19 = 0;
LABEL_19:
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 24) = v14;
  *(_QWORD *)(a4 + 32) = v15;
  *(_QWORD *)(a4 + 40) = v17;
  *(_QWORD *)(a4 + 48) = v18;
  *(_QWORD *)(a4 + 56) = v19;
  return result;
}

uint64_t sub_1AF397EC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

uint64_t sub_1AF397FB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_1AF3E7694() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

unint64_t sub_1AF3980C8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v33;
  char *v34;

  v2 = sub_1AF3E7694();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v33 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v33 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v33 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v33 - v15;
  if ((a1 & 1) != 0 && getenv("KTRACE_PROVIDER_PATH"))
  {
    sub_1AF3E797C();
    sub_1AF3E7610();
    swift_bridgeObjectRelease();
    v17 = sub_1AF3962F0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    if (v19 >= v18 >> 1)
      v17 = sub_1AF3962F0(v18 > 1, v19 + 1, 1, v17);
    *(_QWORD *)(v17 + 16) = v19 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v17+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v19, v16, v2);
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9D8];
  }
  if (os_variant_has_internal_content())
  {
    sub_1AF3E7610();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_1AF3962F0(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v21 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    v33 = v6;
    if (v21 >= v20 >> 1)
      v17 = sub_1AF3962F0(v20 > 1, v21 + 1, 1, v17);
    *(_QWORD *)(v17 + 16) = v21 + 1;
    v22 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v23 = *(_QWORD *)(v3 + 72);
    v24 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v24(v17 + v22 + v23 * v21, v14, v2);
    sub_1AF3E7610();
    v26 = *(_QWORD *)(v17 + 16);
    v25 = *(_QWORD *)(v17 + 24);
    if (v26 >= v25 >> 1)
      v17 = sub_1AF3962F0(v25 > 1, v26 + 1, 1, v17);
    *(_QWORD *)(v17 + 16) = v26 + 1;
    v24(v17 + v22 + v26 * v23, v11, v2);
    v27 = v34;
    sub_1AF3E7610();
    v29 = *(_QWORD *)(v17 + 16);
    v28 = *(_QWORD *)(v17 + 24);
    if (v29 >= v28 >> 1)
      v17 = sub_1AF3962F0(v28 > 1, v29 + 1, 1, v17);
    *(_QWORD *)(v17 + 16) = v29 + 1;
    v24(v17 + v22 + v29 * v23, v27, v2);
    v6 = v33;
  }
  sub_1AF3E7610();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_1AF3962F0(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
  v31 = *(_QWORD *)(v17 + 16);
  v30 = *(_QWORD *)(v17 + 24);
  if (v31 >= v30 >> 1)
    v17 = sub_1AF3962F0(v30 > 1, v31 + 1, 1, v17);
  *(_QWORD *)(v17 + 16) = v31 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v17+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v31, v6, v2);
  return v17;
}

uint64_t sub_1AF3984A4(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = sub_1AF3E7694();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B4B8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v9 = sub_1AF3980C8(a1);
  v10 = v9;
  v44 = MEMORY[0x1E0DEE9D8];
  v41 = *(_QWORD *)(v9 + 16);
  if (v41)
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v39 = v2;
    v40 = v9 + ((v12 + 32) & ~v12);
    v37 = v5;
    v38 = v3;
    v35 = v9;
    v36 = v8;
    while (1)
    {
      if (v11 >= *(_QWORD *)(v10 + 16))
        __break(1u);
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, v40 + *(_QWORD *)(v3 + 72) * v11, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v8, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
        goto LABEL_22;
      v34 = v16;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      sub_1AF3E7670();
      v17 = (void *)sub_1AF3E78BC();
      swift_bridgeObjectRelease();
      v43 = 0;
      v18 = objc_msgSend(v42, sel_contentsOfDirectoryAtPath_error_, v17, &v43);

      v19 = v43;
      if (v18)
      {
        v20 = sub_1AF3E7AB4();
        v21 = v19;

        v22 = *(_QWORD *)(v20 + 16);
        if (v22)
          goto LABEL_11;
      }
      else
      {
        v23 = v43;
        v24 = (void *)sub_1AF3E75EC();

        swift_willThrow();
        v20 = MEMORY[0x1E0DEE9D8];
        v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        if (v22)
        {
LABEL_11:
          v25 = (uint64_t *)(v20 + 40);
          v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          do
          {
            v26 = *(v25 - 1);
            v27 = *v25;
            swift_bridgeObjectRetain();
            if ((sub_1AF3E79F4() & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v43 = v13;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1AF38FDBC(0, v13[2] + 1, 1);
                v13 = v43;
              }
              v30 = v13[2];
              v29 = v13[3];
              if (v30 >= v29 >> 1)
              {
                sub_1AF38FDBC((char *)(v29 > 1), v30 + 1, 1);
                v13 = v43;
              }
              v13[2] = v30 + 1;
              v31 = &v13[2 * v30];
              v31[4] = v26;
              v31[5] = v27;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v25 += 2;
            --v22;
          }
          while (v22);
          goto LABEL_4;
        }
      }
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_4:
      ++v11;
      v14 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v14);
      v5 = v37;
      *(&v33 - 2) = (uint64_t)v37;
      v15 = sub_1AF3914A8((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1AF399CB8, (uint64_t)(&v33 - 4), (uint64_t)v13);
      swift_release();
      sub_1AF391950((uint64_t)v15);
      v3 = v38;
      v2 = v39;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v39);
      v10 = v35;
      v8 = v36;
      if (v11 == v41)
      {
        v34(v36, 1, 1, v2);
        goto LABEL_22;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
LABEL_22:

  swift_bridgeObjectRelease();
  return v44;
}

unint64_t sub_1AF3988A0()
{
  unint64_t result;

  result = qword_1EEE3B4D0;
  if (!qword_1EEE3B4D0)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB150, &type metadata for KTraceProvideError);
    atomic_store(result, (unint64_t *)&qword_1EEE3B4D0);
  }
  return result;
}

unint64_t sub_1AF3988E4()
{
  unint64_t result;

  result = qword_1EEE3B548;
  if (!qword_1EEE3B548)
  {
    result = MEMORY[0x1AF45E31C](MEMORY[0x1E0DEE138], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&qword_1EEE3B548);
  }
  return result;
}

uint64_t sub_1AF398928(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AF398950(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AF398978(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AF3989A0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void deprecatedWillEndTracingToFile(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "willEndTracingToFile:", a2);

}

uint64_t sub_1AF398A00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1AF3E7F1C();
  __break(1u);
  return result;
}

uint64_t sub_1AF398AF4(uint64_t a1, char a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;

  nullsub_1();
  v60 = sub_1AF3984A4(a2 & 1);
  swift_bridgeObjectRetain();
  sub_1AF396B1C(&v60);
  swift_bridgeObjectRelease();
  v3 = v60;
  v4 = *(_QWORD *)(v60 + 16);
  if (!v4)
  {
    swift_release();
    v6 = MEMORY[0x1E0DEE9D8];
LABEL_46:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5D8);
    v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_1AF3EB020;
    v60 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
    sub_1AF390B14();
    v44 = sub_1AF3E7898();
    v46 = v45;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v43 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v46;
    sub_1AF345E6C();
    sub_1AF3E80B4();
    swift_bridgeObjectRelease();
    return 0;
  }
  v58 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v4, 0);
  v5 = 0;
  v6 = v58;
  v48 = v4;
  v51 = v3 + 32;
  while (1)
  {
    v7 = (uint64_t *)(v51 + (v5 << 6));
    v8 = v7[1];
    v9 = v7[6];
    v52 = (_QWORD *)v7[7];
    if (v7[4])
    {
      v60 = *v7;
      v61 = v8;
      swift_bridgeObjectRetain();
      sub_1AF3E7970();
      sub_1AF3E7970();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    if (v9)
    {
      sub_1AF3E7970();
      v60 = 538976288;
      v61 = 0xE400000000000000;
      sub_1AF3E7970();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
    }
    v10 = v52;
    if (v52)
      break;
LABEL_41:
    v41 = *(_QWORD *)(v6 + 16);
    v40 = *(_QWORD *)(v6 + 24);
    if (v41 >= v40 >> 1)
      sub_1AF38FDBC((char *)(v40 > 1), v41 + 1, 1);
    ++v5;
    *(_QWORD *)(v6 + 16) = v41 + 1;
    v42 = v6 + 16 * v41;
    *(_QWORD *)(v42 + 32) = 0;
    *(_QWORD *)(v42 + 40) = 0xE000000000000000;
    if (v5 == v4)
    {
      swift_release();
      goto LABEL_46;
    }
  }
  sub_1AF3E7970();
  v11 = v52[2];
  if (!v11)
    goto LABEL_39;
  sub_1AF3E7970();
  v12 = v52[2];
  if (!v12)
    goto LABEL_50;
  v56 = v52[4];
  v13 = v11 - 1;
  v49 = v5;
  v50 = v6;
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v12 < 2)
      goto LABEL_51;
    if (v11 > v12)
      goto LABEL_52;
    v15 = v52[7];
    v14 = v52[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = v15;
    swift_bridgeObjectRetain();
    v55 = v14;
    swift_bridgeObjectRetain();
    v16 = v52 + 13;
    do
    {
      v17 = *(v16 - 4);
      v18 = *(v16 - 1);
      v19 = *v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = v56;
      v21 = sub_1AF3E794C();
      v22 = v21 < sub_1AF3E794C();
      v23 = v55;
      v24 = v13;
      v25 = v53;
      if (v22)
        v23 = v19;
      if (v22)
        v25 = v18;
      v53 = v25;
      if (v22)
        v20 = v17;
      v55 = v23;
      v56 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 += 5;
      --v13;
    }
    while (v24 != 1);
    v10 = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v49;
    v6 = v50;
    v4 = v48;
  }
  v54 = sub_1AF3E794C();
  swift_bridgeObjectRelease();
  v26 = v10[2];
  if (!v26)
  {
LABEL_39:
    v28 = MEMORY[0x1E0DEE9D8];
LABEL_40:
    v60 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
    sub_1AF390B14();
    sub_1AF3E7898();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v59 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v26, 0);
  v27 = 0;
  v28 = v59;
  v29 = v10 + 8;
  while (!__OFADD__(v27, 1))
  {
    v30 = sub_1AF3E794C();
    v31 = v54 - v30;
    if (__OFSUB__(v54, v30))
      goto LABEL_48;
    v57 = v28;
    v32 = v26;
    v33 = v31 + 8;
    if (__OFADD__(v31, 8))
      goto LABEL_49;
    v60 = 0x2020202020202020;
    v61 = 0xE800000000000000;
    swift_bridgeObjectRetain();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    MEMORY[0x1AF45C5AC](32, 0xE100000000000000, v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
    sub_1AF390B14();
    sub_1AF3E7898();
    swift_bridgeObjectRelease();
    if (sub_1AF3E794C() < 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AF3E7DE4();
      swift_bridgeObjectRelease();
      sub_1AF3E7970();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      sub_1AF3E7970();
    }
    v26 = v32;
    v34 = v27 + 1;
    swift_bridgeObjectRelease();
    v35 = v60;
    v36 = v61;
    v28 = v57;
    v38 = *(_QWORD *)(v57 + 16);
    v37 = *(_QWORD *)(v57 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_1AF38FDBC((char *)(v37 > 1), v38 + 1, 1);
      v34 = v27 + 1;
      v28 = v57;
    }
    *(_QWORD *)(v28 + 16) = v38 + 1;
    v39 = v28 + 16 * v38;
    *(_QWORD *)(v39 + 32) = v35;
    *(_QWORD *)(v39 + 40) = v36;
    v29 += 5;
    ++v27;
    if (v34 == v26)
    {
      v5 = v49;
      v6 = v50;
      v4 = v48;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1AF3991FC()
{
  unint64_t result;

  result = qword_1EEE3B568;
  if (!qword_1EEE3B568)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB1D8, &type metadata for KTraceProvideErrorKind);
    atomic_store(result, (unint64_t *)&qword_1EEE3B568);
  }
  return result;
}

uint64_t sub_1AF399240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 <= 6u)
  {
    if (a5 == 4)
      swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1AF39928C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 <= 6u)
  {
    if (a5 == 4)
      swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KTraceProvideError()
{
  return &type metadata for KTraceProvideError;
}

uint64_t destroy for ProviderOption()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ProviderOption(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ProviderOption(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProviderOption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProviderOption()
{
  return &type metadata for ProviderOption;
}

uint64_t destroy for ProviderDocumentation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ProviderDocumentation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProviderDocumentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProviderDocumentation()
{
  return &type metadata for ProviderDocumentation;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwxx_0(uint64_t a1)
{
  return sub_1AF39928C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1AF399240(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1AF399240(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1AF39928C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1AF39928C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AF3998C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1AF3998D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KTraceProvideErrorKind()
{
  return &type metadata for KTraceProvideErrorKind;
}

uint64_t destroy for Provider()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Provider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Provider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Provider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Trimming(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Trimming(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Provider()
{
  return &type metadata for Provider;
}

uint64_t type metadata accessor for ProviderList()
{
  return objc_opt_self();
}

uint64_t method lookup function for ProviderList()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProviderList.__allocating_init(machine:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t sub_1AF399B7C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 224))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 216);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1AF399BD8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 224) = 0;
    if (a2)
      *(_QWORD *)(result + 216) = a2;
  }
  return result;
}

void type metadata accessor for ktrace_machine(uint64_t a1)
{
  sub_1AF399D84(a1, &qword_1EEE3B5D0);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

double sub_1AF399CB8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AF391640(a1, a2);
}

uint64_t sub_1AF399CE0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AF399D30(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B610);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
  sub_1AF399D84(a1, &qword_1EEE3B630);
}

void sub_1AF399D84(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1AF399DCC()
{
  sub_1AF3E80D8();
  sub_1AF3E80F0();
  return sub_1AF3E8114();
}

uint64_t sub_1AF399E10()
{
  return sub_1AF3E80F0();
}

uint64_t sub_1AF399E38()
{
  sub_1AF3E80D8();
  sub_1AF3E80F0();
  return sub_1AF3E8114();
}

uint64_t sub_1AF399E78@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1AF39A928(*a1);
  *a2 = result;
  return result;
}

_BYTE *sub_1AF399EA0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1AF399EAC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_1AF399EB4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_1AF399EC8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_1AF399EDC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1AF399EF0(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_1AF399F20@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_1AF399F4C@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_1AF399F70(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_1AF399F84(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_1AF399F98(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_1AF399FAC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1AF399FC0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1AF399FD4(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1AF399FE8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1AF399FFC()
{
  _BYTE *v0;

  return *v0 == 0;
}

uint64_t sub_1AF39A00C()
{
  return sub_1AF3E7D6C();
}

_BYTE *sub_1AF39A024(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_1AF39A038(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AF39A04C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  uint64_t result;

  v3 = sub_1AF39A93C(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1AF39A088()
{
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  return sub_1AF3E8114();
}

uint64_t sub_1AF39A0C8()
{
  return sub_1AF3E80E4();
}

uint64_t sub_1AF39A0EC()
{
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  return sub_1AF3E8114();
}

uint64_t sub_1AF39A12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  swift_beginAccess();
  v4 = sub_1AF3E7778();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_1AF39A198())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1AF39A1DC(FILE *a1, FILE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  sub_1AF39A258(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_1AF39A258(FILE *a1, FILE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  FILE *v16;
  FILE *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  FILE *v25;
  uint64_t v26;

  v25 = a2;
  v8 = sub_1AF3E76E8();
  v23 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1AF3E7778();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AF3E776C();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_logger, v14, v11);
  if ((a5 & 1) == 0)
  {
    v17 = v25;
    goto LABEL_9;
  }
  v15 = v26;
  v16 = sub_1AF3BAFEC(a1);
  if (!v15)
  {
    a1 = v16;
    if (!v16 || (v17 = sub_1AF3BAFEC(v25)) == 0)
    {
      sub_1AF39A9D4();
      swift_allocError();
      swift_willThrow();
      goto LABEL_7;
    }
LABEL_9:
    v19 = v23;
    v18 = v24;
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = v17;
    sub_1AF3E76DC();
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_creationDate, v10, v18);
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36A8]), sel_init);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC6ktrace8Reporter_initialFormatter) = v20;
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
    objc_msgSend(v21, sel_setUnitsStyle_, 1);
    objc_msgSend(v21, sel_setZeroFormattingBehavior_, 14);
    objc_msgSend(v21, sel_setAllowedUnits_, 192);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC6ktrace8Reporter_updateFormatter) = v21;
    return v5;
  }
LABEL_7:
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_logger, v11);
  type metadata accessor for Reporter();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t sub_1AF39A4A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];

  v5 = sub_1AF3E7778();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5D8);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1AF3EB020;
  v10 = sub_1AF345D44();
  *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v11;
  swift_beginAccess();
  sub_1AF345E6C();
  sub_1AF3E80B4();
  swift_endAccess();
  v12 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v12);
  swift_bridgeObjectRetain_n();
  v13 = sub_1AF3E7760();
  v14 = sub_1AF3E7B50();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v20 = v5;
    v17 = v16;
    v22[0] = v16;
    *(_DWORD *)v15 = 136446210;
    swift_bridgeObjectRetain();
    v21 = sub_1AF346C80(a1, a2, v22);
    sub_1AF3E7C7C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1AF33A000, v13, v14, "%{public}s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF45E3DC](v17, -1, -1);
    MEMORY[0x1AF45E3DC](v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1AF39A710()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t sub_1AF39A778()
{
  uint64_t v0;

  sub_1AF3E7970();
  (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v0 + 216))(0x3A676E696E726177, 0xE900000000000020, 1, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF39A890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC6ktrace8Reporter_creationDate;
  v2 = sub_1AF3E76E8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  v4 = sub_1AF3E7778();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t sub_1AF39A928(uint64_t result)
{
  if ((result & 0xF8) != 0)
    return 8;
  else
    return result;
}

uint64_t sub_1AF39A93C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1AF39A974()
{
  return 0x6620676E69646968;
}

uint64_t type metadata accessor for Reporter()
{
  uint64_t result;

  result = qword_1EEE3BF60;
  if (!qword_1EEE3BF60)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1AF39A9D4()
{
  unint64_t result;

  result = qword_1EEE3B648;
  if (!qword_1EEE3B648)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB610, &type metadata for ReporterError);
    atomic_store(result, (unint64_t *)&qword_1EEE3B648);
  }
  return result;
}

unint64_t sub_1AF39AA1C()
{
  unint64_t result;

  result = qword_1EEE3B650;
  if (!qword_1EEE3B650)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB330, &type metadata for ANSIColor);
    atomic_store(result, (unint64_t *)&qword_1EEE3B650);
  }
  return result;
}

unint64_t sub_1AF39AA64()
{
  unint64_t result;

  result = qword_1EEE3B678;
  if (!qword_1EEE3B678)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB560, &type metadata for ReporterError);
    atomic_store(result, (unint64_t *)&qword_1EEE3B678);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ANSIColor(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ANSIColor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1AF39AB88 + 4 * byte_1AF3EB31D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1AF39ABBC + 4 * byte_1AF3EB318[v4]))();
}

uint64_t sub_1AF39ABBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF39ABC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AF39ABCCLL);
  return result;
}

uint64_t sub_1AF39ABD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AF39ABE0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1AF39ABE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AF39ABEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ANSIColor()
{
  return &type metadata for ANSIColor;
}

ValueMetadata *type metadata accessor for ANSIAttributes()
{
  return &type metadata for ANSIAttributes;
}

uint64_t storeEnumTagSinglePayload for ReporterError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AF39AC58 + 4 * byte_1AF3EB322[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AF39AC78 + 4 * byte_1AF3EB327[v4]))();
}

_BYTE *sub_1AF39AC58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AF39AC78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AF39AC80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AF39AC88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AF39AC90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AF39AC98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReporterError()
{
  return &type metadata for ReporterError;
}

uint64_t sub_1AF39ACB4()
{
  return type metadata accessor for Reporter();
}

uint64_t sub_1AF39ACBC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1AF3E76E8();
  if (v1 <= 0x3F)
  {
    result = sub_1AF3E7778();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void sub_1AF39AD70(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1AF39ADC4()
{
  uint64_t v0;

  sub_1AF3E7DE4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  return v0;
}

void sub_1AF39AF60()
{
  uint64_t v0;

  sub_1AF39AD70(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

char *sub_1AF39AF6C()
{
  return aUnsafe;
}

uint64_t sub_1AF39AF78()
{
  return swift_retain();
}

uint64_t sub_1AF39AF80(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1AF39AF90(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1AF39AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(_QWORD **)(v2 + 128);
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AF39D930(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)sub_1AF39D930((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v6[2] = v9 + 1;
  v10 = &v6[2 * v9];
  v10[4] = sub_1AF39B090;
  v10[5] = v5;
  *(_QWORD *)(v2 + 128) = v6;
  return result;
}

uint64_t sub_1AF39B06C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AF39B090(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1AF39B0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v15 = *(_QWORD *)(v9 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AF39D820(0, *(_QWORD *)(v15 + 16) + 1, 1, (char *)v15);
    v15 = result;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    result = (uint64_t)sub_1AF39D820((char *)(v17 > 1), v18 + 1, 1, (char *)v15);
    v15 = result;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  v19 = v15 + 80 * v18;
  *(_QWORD *)(v19 + 32) = a1;
  *(_QWORD *)(v19 + 40) = a2;
  *(_QWORD *)(v19 + 48) = a5;
  *(_QWORD *)(v19 + 56) = a6;
  *(_QWORD *)(v19 + 64) = a3;
  *(_QWORD *)(v19 + 72) = a4;
  *(_BYTE *)(v19 + 80) = a7 & 1;
  *(_QWORD *)(v19 + 88) = a8;
  *(_QWORD *)(v19 + 96) = a9;
  *(_BYTE *)(v19 + 104) = 1;
  *(_QWORD *)(v9 + 112) = v15;
  return result;
}

uint64_t sub_1AF39B1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v15 = *(_QWORD *)(v9 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AF39D820(0, *(_QWORD *)(v15 + 16) + 1, 1, (char *)v15);
    v15 = result;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    result = (uint64_t)sub_1AF39D820((char *)(v17 > 1), v18 + 1, 1, (char *)v15);
    v15 = result;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  v19 = v15 + 80 * v18;
  *(_QWORD *)(v19 + 32) = a1;
  *(_QWORD *)(v19 + 40) = a2;
  *(_QWORD *)(v19 + 48) = a5;
  *(_QWORD *)(v19 + 56) = a6;
  *(_QWORD *)(v19 + 64) = a3;
  *(_QWORD *)(v19 + 72) = a4;
  *(_BYTE *)(v19 + 80) = a7 & 1;
  *(_QWORD *)(v19 + 88) = a8;
  *(_QWORD *)(v19 + 96) = a9;
  *(_BYTE *)(v19 + 104) = 0;
  *(_QWORD *)(v9 + 112) = v15;
  return result;
}

uint64_t sub_1AF39B2F4(char a1)
{
  __int128 *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;

  v74 = *v1;
  v72 = v74;
  sub_1AF398978((uint64_t)&v74);
  sub_1AF3E7970();
  swift_bridgeObjectRetain();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  v60 = *((_QWORD *)&v72 + 1);
  v2 = v72;
  v61 = v1;
  v3 = (void (*)(uint64_t))*((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = swift_retain();
    v3(v4);
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    sub_1AF39AF90((uint64_t)v3);
    swift_bridgeObjectRelease();
    v60 = *((_QWORD *)&v72 + 1);
    v2 = v72;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B488);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1AF3EB020;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v60;
  v71 = v5;
  v6 = *((_QWORD *)v1 + 14);
  v73 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  v62 = v7;
  if (v7)
  {
    swift_bridgeObjectRetain();
    sub_1AF398928((uint64_t)&v73);
    v8 = (_BYTE *)(v6 + 104);
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((*(v8 - 24) & 1) == 0)
      {
        v13 = *((_QWORD *)v8 - 8);
        v64 = *((_QWORD *)v8 - 7);
        v65 = *((_QWORD *)v8 - 9);
        v14 = *((_QWORD *)v8 - 4);
        v15 = *((_QWORD *)v8 - 2);
        v16 = *((_QWORD *)v8 - 1);
        v17 = *v8;
        v67 = *((_OWORD *)v8 - 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1AF39AF78();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1AF39DB88(0, v9[2] + 1, 1);
        v11 = v9[2];
        v10 = v9[3];
        if (v11 >= v10 >> 1)
          sub_1AF39DB88((char *)(v10 > 1), v11 + 1, 1);
        v9[2] = v11 + 1;
        v12 = &v9[10 * v11];
        v12[4] = v65;
        v12[5] = v13;
        v12[6] = v64;
        *(_OWORD *)(v12 + 7) = v67;
        v12[9] = v14;
        *((_BYTE *)v12 + 80) = 0;
        v12[11] = v15;
        v12[12] = v16;
        *((_BYTE *)v12 + 104) = v17;
      }
      v8 += 80;
      --v7;
    }
    while (v7);
    sub_1AF398950((uint64_t)&v73);
    v18 = v9[2];
    if (v18)
      goto LABEL_13;
LABEL_21:
    swift_release();
    v19 = MEMORY[0x1E0DEE9D8];
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v18)
    goto LABEL_21;
LABEL_13:
  v69 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v18, 0);
  v19 = v69;
  v20 = v9 + 7;
  do
  {
    v21 = *v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_1AF39AF78();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    if (v21)
    {
      sub_1AF3E7970();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AF39DBA4();
    v23 = *(_QWORD *)(v69 + 16);
    v22 = *(_QWORD *)(v69 + 24);
    if (v23 >= v22 >> 1)
      sub_1AF38FDBC((char *)(v22 > 1), v23 + 1, 1);
    *(_QWORD *)(v69 + 16) = v23 + 1;
    v24 = v69 + 16 * v23;
    *(_QWORD *)(v24 + 32) = 11565;
    *(_QWORD *)(v24 + 40) = 0xE200000000000000;
    v20 += 10;
    --v18;
  }
  while (v18);
  swift_release();
LABEL_22:
  v25 = sub_1AF3BC24C(v19, 58, 0xE100000000000000);
  swift_bridgeObjectRelease();
  sub_1AF39BC88(v25);
  v26 = v62;
  if ((a1 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v27 = MEMORY[0x1E0DEE9D8];
  if (v62)
  {
    v28 = (_BYTE *)(swift_bridgeObjectRetain() + 104);
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if (*(v28 - 24) == 1)
      {
        v63 = v26;
        v34 = *((_QWORD *)v28 - 9);
        v33 = *((_QWORD *)v28 - 8);
        v66 = *((_QWORD *)v28 - 7);
        v35 = *((_QWORD *)v28 - 4);
        v36 = *((_QWORD *)v28 - 2);
        v37 = *((_QWORD *)v28 - 1);
        v38 = *v28;
        v68 = *((_OWORD *)v28 - 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1AF39AF78();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1AF39DB88(0, v29[2] + 1, 1);
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
          sub_1AF39DB88((char *)(v30 > 1), v31 + 1, 1);
        v29[2] = v31 + 1;
        v32 = &v29[10 * v31];
        v32[4] = v34;
        v32[5] = v33;
        v32[6] = v66;
        *(_OWORD *)(v32 + 7) = v68;
        v32[9] = v35;
        *((_BYTE *)v32 + 80) = 1;
        v32[11] = v36;
        v32[12] = v37;
        *((_BYTE *)v32 + 104) = v38;
        v26 = v63;
      }
      v28 += 80;
      --v26;
    }
    while (v26);
    sub_1AF398950((uint64_t)&v73);
    v27 = MEMORY[0x1E0DEE9D8];
    v39 = v29[2];
    if (v39)
      goto LABEL_34;
  }
  else
  {
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v39 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v39)
    {
LABEL_34:
      v70 = v27;
      sub_1AF38FDBC(0, v39, 0);
      v40 = v70;
      v41 = v29 + 7;
      do
      {
        v42 = *v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_1AF39AF78();
        sub_1AF3E7970();
        swift_bridgeObjectRelease();
        if (v42)
        {
          sub_1AF3E7970();
          sub_1AF3E7970();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        sub_1AF3E7970();
        swift_bridgeObjectRelease();
        sub_1AF3E7970();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AF39DBA4();
        v44 = *(_QWORD *)(v70 + 16);
        v43 = *(_QWORD *)(v70 + 24);
        if (v44 >= v43 >> 1)
          sub_1AF38FDBC((char *)(v43 > 1), v44 + 1, 1);
        *(_QWORD *)(v70 + 16) = v44 + 1;
        v45 = v70 + 16 * v44;
        *(_QWORD *)(v45 + 32) = 11565;
        *(_QWORD *)(v45 + 40) = 0xE200000000000000;
        v41 += 10;
        --v39;
      }
      while (v39);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  v40 = MEMORY[0x1E0DEE9D8];
LABEL_43:
  swift_bridgeObjectRetain();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  v46 = (char *)v71;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v46 = sub_1AF3413B8(0, *(_QWORD *)(v71 + 16) + 1, 1, (char *)v71);
  v48 = *((_QWORD *)v46 + 2);
  v47 = *((_QWORD *)v46 + 3);
  if (v48 >= v47 >> 1)
    v46 = sub_1AF3413B8((char *)(v47 > 1), v48 + 1, 1, v46);
  *((_QWORD *)v46 + 2) = v48 + 1;
  v49 = &v46[16 * v48];
  *((_QWORD *)v49 + 4) = 0x202020200ALL;
  *((_QWORD *)v49 + 5) = 0xE500000000000000;
  v71 = (uint64_t)v46;
  v50 = sub_1AF3BC24C(v40, 58, 0xE100000000000000);
  swift_bridgeObjectRelease();
  sub_1AF39BC88(v50);
LABEL_48:
  v51 = *((_QWORD *)v61 + 7);
  v52 = (char *)v71;
  if (v51)
  {
    v53 = *((_QWORD *)v61 + 6);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v52 = sub_1AF3413B8(0, *(_QWORD *)(v71 + 16) + 1, 1, (char *)v71);
    v55 = *((_QWORD *)v52 + 2);
    v54 = *((_QWORD *)v52 + 3);
    if (v55 >= v54 >> 1)
      v52 = sub_1AF3413B8((char *)(v54 > 1), v55 + 1, 1, v52);
    *((_QWORD *)v52 + 2) = v55 + 1;
    v56 = &v52[16 * v55];
    *((_QWORD *)v56 + 4) = v53;
    *((_QWORD *)v56 + 5) = v51;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
  sub_1AF390B14();
  v57 = sub_1AF3E7898();
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t sub_1AF39BC88(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1AF3413B8((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1AF39BD70(uint64_t a1, unint64_t a2)
{
  char **v2;
  int64_t v3;
  char *v6;
  unint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t (*v20)();
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t (*v29)();
  uint64_t *v30;
  unint64_t v31;
  _BYTE v32[32];
  uint64_t v33;
  unint64_t v34;

  v6 = *v2;
  v7 = *((_QWORD *)*v2 + 2);
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v6 + 3) >> 1, v9 < v7))
  {
    v6 = sub_1AF3413B8(isUniquelyReferenced_nonNull_native, v7, 1, v6);
    v9 = *((_QWORD *)v6 + 3) >> 1;
  }
  v10 = *((_QWORD *)v6 + 2);
  v11 = (_QWORD *)(v9 - v10);
  v12 = (unint64_t)sub_1AF39DEDC(&v33, &v6[16 * v10 + 32], v9 - v10, a1, a2);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v12)
    {
      v13 = *((_QWORD *)v6 + 2);
      v14 = __OFADD__(v13, v12);
      v15 = (char *)(v13 + v12);
      if (v14)
      {
        __break(1u);
        goto LABEL_28;
      }
      *((_QWORD *)v6 + 2) = v15;
    }
    if ((_QWORD *)v12 != v11)
    {
LABEL_9:
      result = swift_bridgeObjectRelease();
      *v2 = v6;
      return result;
    }
  }
  v17 = v33;
  v18 = v34;
  if (v34 == *(_QWORD *)(v33 + 16))
    goto LABEL_9;
  v19 = *((_QWORD *)v6 + 2);
  v20 = sub_1AF39DE10((uint64_t (*)())v32, v34, v33);
  v23 = *v21;
  v22 = v21[1];
  swift_bridgeObjectRetain();
  ((void (*)(_BYTE *, _QWORD))v20)(v32, 0);
  v14 = __OFADD__(v18, 1);
  v24 = v18 + 1;
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  while (1)
  {
    v25 = *((_QWORD *)v6 + 3);
    v26 = v25 >> 1;
    v3 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1)
      break;
    if (v19 < v26)
      goto LABEL_18;
LABEL_15:
    *((_QWORD *)v6 + 2) = v19;
  }
  v6 = sub_1AF3413B8((char *)(v25 > 1), v19 + 1, 1, v6);
  v26 = *((_QWORD *)v6 + 3) >> 1;
  if (v19 >= v26)
    goto LABEL_15;
LABEL_18:
  v27 = &v6[16 * v19];
  *((_QWORD *)v27 + 4) = v23;
  *((_QWORD *)v27 + 5) = v22;
  if (v24 == *(_QWORD *)(v17 + 16))
  {
LABEL_28:
    *((_QWORD *)v6 + 2) = v3;
    goto LABEL_9;
  }
  v28 = v27 + 56;
  while (1)
  {
    v29 = sub_1AF39DE10((uint64_t (*)())v32, v24, v17);
    v23 = *v30;
    v22 = v30[1];
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(_BYTE *, _QWORD))v29)(v32, 0);
    v31 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v26 == v3)
    {
      ++v24;
      v19 = v26;
      *((_QWORD *)v6 + 2) = v26;
      goto LABEL_16;
    }
    *(v28 - 1) = v23;
    *v28 = v22;
    ++v3;
    ++v24;
    v28 += 2;
    if (v31 == *(_QWORD *)(v17 + 16))
      goto LABEL_28;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AF39BF84(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = result[2];
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = sub_1AF39DA50(result, v10, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6A0);
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v7 = v3[2];
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

unint64_t sub_1AF39C080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  int64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD *);
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  BOOL v134;
  void (*v135)(uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t);
  uint64_t v153;
  char v154;
  void (*v155)(uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unsigned __int8 v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  char v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD v210[3];
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;

  v3 = v2;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v212 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v213 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    swift_bridgeObjectRetain();
    v184 = 0;
    v185 = 0;
    LOBYTE(v8) = -1;
    v180 = (uint64_t)v4;
    v167 = (char *)v4;
    goto LABEL_81;
  }
  v186 = *(_QWORD *)(v1 + 112);
  v174 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v184 = 0;
  v185 = 0;
  v7 = 0;
  v8 = 255;
  v167 = (char *)v4;
  v180 = (uint64_t)v4;
  v173 = v5;
  while (1)
  {
    if (v7 >= v5)
    {
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      return result;
    }
    v187 = v8;
    v9 = (uint64_t *)(v174 + 16 * v7);
    v10 = *v9;
    v11 = v9[1];
    v181 = v7 + 1;
    v12 = *v9 == 11565 && v11 == 0xE200000000000000;
    if (v12 || (sub_1AF3E8030() & 1) != 0)
    {
      v115 = swift_bridgeObjectRetain();
      sub_1AF39BD70(v115, v181);
      LOBYTE(v8) = v187;
      goto LABEL_81;
    }
    swift_bridgeObjectRetain();
    if ((sub_1AF3E79E8() & 1) == 0)
    {
      if ((sub_1AF3E79E8() & 1) == 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (unint64_t)sub_1AF3413B8(0, *(_QWORD *)(v180 + 16) + 1, 1, (char *)v180);
          v180 = result;
        }
        v32 = *(_QWORD *)(v180 + 16);
        v31 = *(_QWORD *)(v180 + 24);
        v8 = v187;
        if (v32 >= v31 >> 1)
        {
          result = (unint64_t)sub_1AF3413B8((char *)(v31 > 1), v32 + 1, 1, (char *)v180);
          v180 = result;
          v8 = v187;
        }
        *(_QWORD *)(v180 + 16) = v32 + 1;
        v33 = v180 + 16 * v32;
        *(_QWORD *)(v33 + 32) = v10;
        *(_QWORD *)(v33 + 40) = v11;
        goto LABEL_5;
      }
      swift_bridgeObjectRetain();
      v27 = sub_1AF39E4E8(1uLL, v10, v11);
      v29 = v28;
      swift_bridgeObjectRelease();
      v192 = v29 >> 14;
      if (v29 >> 14 == v27 >> 14)
      {
        swift_bridgeObjectRelease();
        v30 = 0;
        v183 = 0;
        v191 = (char *)MEMORY[0x1E0DEE9D8];
        goto LABEL_59;
      }
      v175 = v10;
      v177 = v4;
      v169 = v7;
      v171 = v11;
      v191 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v61 = sub_1AF3E7C4C();
        v63 = v62;
        swift_bridgeObjectRetain();
        v64 = sub_1AF3E7C34();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v65 = v3;
        v66 = sub_1AF39E230(v186, v61, v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v66 + 16))
        {
          v67 = *(_QWORD *)(v66 + 40);
          v68 = *(_QWORD *)(v66 + 56);
          v205 = *(_QWORD *)(v66 + 48);
          v207 = *(_QWORD *)(v66 + 32);
          v69 = *(_QWORD *)(v66 + 72);
          v202 = *(_QWORD *)(v66 + 64);
          v199 = *(_BYTE *)(v66 + 80);
          v71 = *(_QWORD *)(v66 + 88);
          v70 = *(_QWORD *)(v66 + 96);
          v72 = *(_BYTE *)(v66 + 104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1AF39AF78();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1AF39AF78();
          v73 = v191;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v73 = sub_1AF39D820(0, *((_QWORD *)v191 + 2) + 1, 1, v191);
          v75 = *((_QWORD *)v73 + 2);
          v74 = *((_QWORD *)v73 + 3);
          v76 = v73;
          if (v75 >= v74 >> 1)
            v76 = sub_1AF39D820((char *)(v74 > 1), v75 + 1, 1, v73);
          *((_QWORD *)v76 + 2) = v75 + 1;
          v60 = v76;
          v77 = &v76[80 * v75];
          *((_QWORD *)v77 + 4) = v207;
          *((_QWORD *)v77 + 5) = v67;
          *((_QWORD *)v77 + 6) = v205;
          *((_QWORD *)v77 + 7) = v68;
          *((_QWORD *)v77 + 8) = v202;
          *((_QWORD *)v77 + 9) = v69;
          v77[80] = v199;
          *((_QWORD *)v77 + 11) = v71;
          *((_QWORD *)v77 + 12) = v70;
          v77[104] = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1AF39DBA4();
          v3 = v65;
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1AF39DE6C(v184, v185, v187);
          v187 = 1;
          v184 = v61;
          v185 = v63;
          v60 = v191;
        }
        v191 = v60;
      }
      while (v192 != v64 >> 14);
      swift_bridgeObjectRelease();
      v30 = 0;
      v183 = 0;
      goto LABEL_53;
    }
    v169 = v7;
    v177 = v4;
    v13 = v3;
    v14 = sub_1AF39D6F0(61, 0xE100000000000000, v10, v11);
    v16 = v15;
    swift_bridgeObjectRetain();
    v175 = v10;
    v17 = sub_1AF39E4E8(2uLL, v10, v11);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    result = swift_bridgeObjectRelease();
    v24 = v14;
    if ((v16 & 1) != 0)
    {
      v25 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0)
        v25 = v175;
      v26 = v25 << 16;
      if ((v11 & 0x1000000000000000) == 0 || (v175 & 0x800000000000000) != 0)
        v24 = v26 | 7;
      else
        v24 = v26 | 0xB;
    }
    if (v24 >> 14 < v17 >> 14)
      goto LABEL_165;
    v206 = v16;
    v194 = v14;
    v171 = v11;
    v34 = sub_1AF3E7C64();
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v41 = swift_bridgeObjectRetain();
    v42 = sub_1AF39E01C(v41, v34, v36, v38, v40);
    v189 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v42 + 16))
    {
      swift_bridgeObjectRelease();
      if (v161[10])
      {
        swift_bridgeObjectRelease();
        v54 = MEMORY[0x1AF45C4C8](v17, v19, v21, v23);
        v56 = v55;
        swift_bridgeObjectRelease();
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (unint64_t)sub_1AF3413B8(0, *((_QWORD *)v167 + 2) + 1, 1, v167);
          v167 = (char *)result;
        }
        v3 = v13;
        v58 = *((_QWORD *)v167 + 2);
        v57 = *((_QWORD *)v167 + 3);
        v8 = v187;
        if (v58 >= v57 >> 1)
        {
          result = (unint64_t)sub_1AF3413B8((char *)(v57 > 1), v58 + 1, 1, v167);
          v167 = (char *)result;
          v8 = v187;
        }
        *((_QWORD *)v167 + 2) = v58 + 1;
        v59 = &v167[16 * v58];
        *((_QWORD *)v59 + 4) = v54;
        *((_QWORD *)v59 + 5) = v56;
      }
      else
      {
        swift_bridgeObjectRelease();
        result = sub_1AF39DE6C(v184, v185, v187);
        v8 = 0;
        v184 = v175;
        v185 = v171;
        v3 = v13;
      }
      v4 = v177;
      goto LABEL_5;
    }
    v43 = *(_QWORD *)(v42 + 40);
    v44 = *(_QWORD *)(v42 + 56);
    v198 = *(_QWORD *)(v42 + 48);
    v202 = *(_QWORD *)(v42 + 32);
    v46 = *(_QWORD *)(v42 + 64);
    v45 = *(_QWORD *)(v42 + 72);
    v196 = *(_BYTE *)(v42 + 80);
    v48 = *(_QWORD *)(v42 + 88);
    v47 = *(_QWORD *)(v42 + 96);
    v49 = *(_BYTE *)(v42 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AF39AF78();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v205 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AF39AF78();
    v50 = sub_1AF39D820(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v52 = *((_QWORD *)v50 + 2);
    v51 = *((_QWORD *)v50 + 3);
    if (v52 >= v51 >> 1)
      v50 = sub_1AF39D820((char *)(v51 > 1), v52 + 1, 1, v50);
    *((_QWORD *)v50 + 2) = v52 + 1;
    v53 = &v50[80 * v52];
    *((_QWORD *)v53 + 4) = v202;
    *((_QWORD *)v53 + 5) = v43;
    *((_QWORD *)v53 + 6) = v198;
    *((_QWORD *)v53 + 7) = v44;
    *((_QWORD *)v53 + 8) = v46;
    *((_QWORD *)v53 + 9) = v45;
    v53[80] = v196;
    *((_QWORD *)v53 + 11) = v48;
    *((_QWORD *)v53 + 12) = v47;
    v53[104] = v49;
    v191 = v50;
    if ((v206 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF39DBA4();
      v30 = 0;
      v183 = 0;
      v3 = v189;
LABEL_53:
      v10 = v175;
      v4 = v177;
      v11 = v171;
      v5 = v173;
      v7 = v169;
      goto LABEL_59;
    }
    v11 = v171;
    v10 = v175;
    if ((v49 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF39DBA4();
      v30 = 0;
      v183 = 0;
      v3 = v189;
      v4 = v177;
      v5 = v173;
      v7 = v169;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1AF39E584(v194, v175, v171);
      v79 = v78;
      swift_bridgeObjectRelease();
      result = sub_1AF3E7C40();
      if ((v80 & 1) != 0)
        result = v79;
      if (v79 >> 14 < result >> 14)
        goto LABEL_167;
      v81 = sub_1AF3E7C64();
      v83 = v82;
      v85 = v84;
      v87 = v86;
      swift_bridgeObjectRelease();
      v88 = MEMORY[0x1AF45C4C8](v81, v83, v85, v87);
      v90 = v89;
      swift_bridgeObjectRelease();
      v91 = v88;
      v183 = v90;
      if (!sub_1AF3E794C())
        goto LABEL_155;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF39DBA4();
      v3 = v189;
      v10 = v175;
      v4 = v177;
      v5 = v173;
      v7 = v169;
      v30 = v91;
    }
LABEL_59:
    v92 = *((_QWORD *)v191 + 2);
    if (!v92)
    {
      sub_1AF39DE6C(v184, v185, v187);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v8 = 3;
      v184 = v10;
      v185 = v11;
      goto LABEL_6;
    }
    v168 = v30;
    v93 = &v191[80 * v92];
    v94 = *((_QWORD *)v93 - 5);
    v165 = *((_QWORD *)v93 - 4);
    v166 = *((_QWORD *)v93 - 6);
    v95 = *((_QWORD *)v93 - 1);
    v164 = *((_QWORD *)v93 - 2);
    v163 = *v93;
    v96 = *((_QWORD *)v93 + 1);
    v97 = *((_QWORD *)v93 + 2);
    v98 = v93[24];
    v176 = *((_QWORD *)v93 - 3);
    swift_bridgeObjectRetain();
    v172 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v182 = v96;
    v178 = v97;
    sub_1AF39AF78();
    result = swift_bridgeObjectRelease();
    v170 = v98;
    if ((v98 & 1) == 0 && !v183)
      break;
LABEL_65:
    v162 = v94;
    v190 = v3;
    v99 = *((_QWORD *)v191 + 2);
    v100 = v99 - 1;
    if (v99 <= 1)
    {
      swift_bridgeObjectRelease();
      v101 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_74;
    }
    v211 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1AF39DBAC(0, v100, 0);
    v101 = v211;
    v102 = v191 + 56;
    do
    {
      if (!v100)
      {
        __break(1u);
LABEL_155:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AF39DE6C(v184, v185, v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1AF39DE98();
        swift_allocError();
        *(_QWORD *)v158 = v202;
        *(_QWORD *)(v158 + 8) = v205;
        *(_BYTE *)(v158 + 16) = 2;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_157:
        sub_1AF39DBA4();
        return swift_bridgeObjectRelease();
      }
      v103 = *((_QWORD *)v102 - 2);
      v197 = *((_QWORD *)v102 - 1);
      v200 = *((_QWORD *)v102 - 3);
      v104 = *((_QWORD *)v102 + 2);
      v195 = *((_QWORD *)v102 + 1);
      v193 = v102[24];
      v105 = *((_QWORD *)v102 + 4);
      v106 = *((_QWORD *)v102 + 5);
      v107 = v102[48];
      v208 = *(_QWORD *)v102;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v202 = v106;
      v205 = v105;
      sub_1AF39AF78();
      v211 = v101;
      v109 = v101[2];
      v108 = v101[3];
      if (v109 >= v108 >> 1)
      {
        sub_1AF39DBAC((_QWORD *)(v108 > 1), v109 + 1, 1);
        v101 = v211;
      }
      v101[2] = v109 + 1;
      v110 = &v101[12 * v109];
      v110[4] = v200;
      v110[5] = v103;
      v110[6] = v197;
      v110[7] = v208;
      v110[8] = v195;
      v110[9] = v104;
      *((_BYTE *)v110 + 80) = v193;
      v110[11] = v105;
      v110[12] = v106;
      *((_BYTE *)v110 + 104) = v107;
      v102 += 80;
      v110[14] = 0;
      v110[15] = 0;
      --v100;
    }
    while (v100);
    swift_bridgeObjectRelease_n();
LABEL_74:
    sub_1AF39BF84(v101);
    v4 = v212;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AF39AF78();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_1AF39DA50(0, v212[2] + 1, 1, v212);
    v3 = v190;
    v112 = v4[2];
    v111 = v4[3];
    v113 = v168;
    if (v112 >= v111 >> 1)
    {
      v4 = sub_1AF39DA50((_QWORD *)(v111 > 1), v112 + 1, 1, v4);
      v113 = v168;
    }
    v4[2] = v112 + 1;
    v114 = &v4[12 * v112];
    v114[4] = v166;
    v114[5] = v162;
    v114[6] = v165;
    v114[7] = v176;
    v114[8] = v164;
    v114[9] = v172;
    *((_BYTE *)v114 + 80) = v163;
    v114[11] = v182;
    v114[12] = v178;
    *((_BYTE *)v114 + 104) = v170;
    v114[14] = v113;
    v114[15] = v183;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_1AF39DBA4();
    v212 = v4;
    v8 = v187;
LABEL_5:
    v5 = v173;
LABEL_6:
    v7 = v181;
    if (v181 == v5)
      goto LABEL_81;
  }
  if (v181 != v5)
  {
    if (v181 >= v5)
      goto LABEL_166;
    v168 = *(_QWORD *)(v174 + 16 * v181);
    v183 = *(_QWORD *)(v174 + 16 * v181 + 8);
    swift_bridgeObjectRetain();
    v181 = v7 + 2;
    goto LABEL_65;
  }
  sub_1AF39DE6C(v184, v185, v187);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AF39DBA4();
  LOBYTE(v8) = 2;
  v184 = v166;
  v185 = v94;
LABEL_81:
  v188 = v8;
  v116 = v4[2];
  if (v116)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v117 = v4 + 5;
    while (1)
    {
      v118 = *(v117 - 1) == *(_QWORD *)aUnsafe && *v117 == unk_1EEE3B688;
      if (v118 || (sub_1AF3E8030() & 1) != 0)
        break;
      v117 += 12;
      if (!--v116)
      {
        v209 = 0;
        goto LABEL_91;
      }
    }
    v209 = 1;
LABEL_91:
    swift_bridgeObjectRelease();
  }
  else
  {
    v209 = 0;
  }
  v119 = v3;
  v120 = v161[16];
  v214 = v120;
  v121 = *(_QWORD *)(v120 + 16);
  if (v121)
  {
    v179 = v4;
    v122 = *(_QWORD *)(v180 + 16);
    swift_bridgeObjectRetain();
    result = sub_1AF398928((uint64_t)&v214);
    v123 = 0;
    v124 = v120 + 40;
    while (1)
    {
      v125 = *(void (**)(_QWORD *))(v124 - 8);
      if (v123 == v122)
      {
        v126 = 0;
        v127 = 0;
        v123 = v122;
      }
      else
      {
        if (v123 >= *(_QWORD *)(v180 + 16))
          goto LABEL_164;
        v128 = v123++;
        v129 = (uint64_t *)(v180 + 32 + 16 * v128);
        v126 = *v129;
        v127 = v129[1];
        swift_bridgeObjectRetain();
      }
      v210[0] = v126;
      v210[1] = v127;
      swift_retain();
      v125(v210);
      if (v3)
        break;
      swift_release();
      result = swift_bridgeObjectRelease();
      v124 += 16;
      if (!--v121)
      {
        sub_1AF398950((uint64_t)&v214);
        v4 = v179;
        v130 = v179[2];
        if (!v130)
          goto LABEL_102;
LABEL_104:
        v132 = v4 + 5;
        v133 = v130;
        do
        {
          v134 = *(v132 - 1) == 1886152040 && *v132 == 0xE400000000000000;
          if (v134 || (sub_1AF3E8030() & 1) != 0)
          {
            sub_1AF39DE6C(v184, v185, v188);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v135 = (void (*)(uint64_t))v161[12];
            if (v135)
            {
              swift_retain();
              v136 = sub_1AF39B2F4(v209);
              v135(v136);
              swift_bridgeObjectRelease();
              sub_1AF39AF90((uint64_t)v135);
            }
            goto LABEL_119;
          }
          v132 += 12;
          --v133;
        }
        while (v133);
        if (v130 == 1)
        {
          swift_bridgeObjectRetain();
          swift_beginAccess();
          v131 = v167;
          if (v4[4] == *(_QWORD *)aUnsafe && v4[5] == unk_1EEE3B688)
          {
            swift_bridgeObjectRelease();
LABEL_147:
            sub_1AF39DE6C(v184, v185, v188);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v155 = (void (*)(uint64_t))v161[12];
            if (v155)
            {
              swift_retain();
              v156 = sub_1AF39B2F4(1);
              v155(v156);
              swift_bridgeObjectRelease();
              sub_1AF39AF90((uint64_t)v155);
            }
LABEL_119:
            swift_bridgeObjectRelease();
            return 0;
          }
          v154 = sub_1AF3E8030();
          swift_bridgeObjectRelease();
          if ((v154 & 1) != 0)
            goto LABEL_147;
        }
        else
        {
          v131 = v167;
        }
        goto LABEL_121;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    sub_1AF39DE6C(v184, v185, v188);
    sub_1AF398950((uint64_t)&v214);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_116:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v123 = 0;
  v130 = v4[2];
  if (v130)
    goto LABEL_104;
LABEL_102:
  v131 = v167;
LABEL_121:
  if (v188 != 0xFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1AF39DE98();
    swift_allocError();
    *(_QWORD *)v137 = v184;
    *(_QWORD *)(v137 + 8) = v185;
    *(_BYTE *)(v137 + 16) = v188;
    goto LABEL_123;
  }
  v138 = v119;
  v139 = *((_QWORD *)v131 + 2);
  if (!v139)
    goto LABEL_131;
  v203 = v123;
  v140 = v4;
  v141 = (void (*)(uint64_t, uint64_t))v161[10];
  swift_bridgeObjectRetain();
  v142 = (uint64_t *)(v131 + 40);
  do
  {
    v144 = *(v142 - 1);
    v143 = *v142;
    swift_bridgeObjectRetain();
    if (!v141)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_1AF39DE98();
      swift_allocError();
      *(_QWORD *)v157 = v144;
      *(_QWORD *)(v157 + 8) = v143;
      *(_BYTE *)(v157 + 16) = 0;
      goto LABEL_123;
    }
    sub_1AF39AF80((uint64_t)v141);
    v141(v144, v143);
    if (v138)
    {
      sub_1AF39AF90((uint64_t)v141);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_116;
    }
    v138 = 0;
    v142 += 2;
    sub_1AF39AF90((uint64_t)v141);
    swift_bridgeObjectRelease();
    --v139;
  }
  while (v139);
  swift_bridgeObjectRelease();
  v4 = v140;
  v123 = v203;
LABEL_131:
  v145 = v4[2];
  if (v209)
  {
    if (v145)
    {
      v146 = v4 + 10;
      v147 = v4[2];
      while ((*v146 & 1) == 0)
      {
        v146 += 96;
        if (!--v147)
          goto LABEL_136;
      }
      goto LABEL_137;
    }
LABEL_136:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AF39DE98();
    swift_allocError();
    *(_QWORD *)v148 = 0;
    *(_QWORD *)(v148 + 8) = 0;
    *(_BYTE *)(v148 + 16) = 6;
LABEL_123:
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
LABEL_137:
  if (!v145)
  {
    swift_bridgeObjectRelease();
LABEL_159:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AF39BD70(v180, v123);
    swift_bridgeObjectRelease();
    return v213;
  }
  swift_bridgeObjectRetain();
  v149 = v4 + 9;
  v204 = v123;
  while (2)
  {
    v151 = *(v149 - 4);
    result = *(v149 - 2);
    v152 = (void (*)(uint64_t))v149[2];
    if (!(v209 & 1 | ((v149[1] & 1) == 0)))
    {
      v159 = *(v149 - 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AF39AF78();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF39DE98();
      swift_allocError();
      *(_QWORD *)v160 = v159;
      *(_QWORD *)(v160 + 8) = v151;
      *(_BYTE *)(v160 + 16) = 5;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_157;
    }
    v153 = v149[6];
    if ((v149[4] & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AF39AF78();
      swift_bridgeObjectRetain();
      sub_1AF39AF78();
      v150 = swift_bridgeObjectRelease();
      v152(v150);
      if (v138)
      {
        sub_1AF39DBA4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_162;
      }
      goto LABEL_140;
    }
    if (!v153)
      goto LABEL_168;
    v201 = v149[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AF39AF78();
    swift_bridgeObjectRetain();
    sub_1AF39AF78();
    ((void (*)(uint64_t, uint64_t))v152)(v201, v153);
    if (!v138)
    {
      swift_bridgeObjectRelease();
LABEL_140:
      v149 += 12;
      sub_1AF39DBA4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF39DBA4();
      --v145;
      v123 = v204;
      if (!v145)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_159;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  sub_1AF39DBA4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_162:
  sub_1AF39DBA4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1AF39D6F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_1AF3E7A18() != a1 || v9 != a2)
  {
    v10 = sub_1AF3E8030();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_1AF3E7958();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_1AF39D7DC()
{
  return &unk_1E5F6C978;
}

uint64_t sub_1AF39D7E8()
{
  return MEMORY[0x1E0DEE9D8];
}

__n128 sub_1AF39D7F4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __n128 a13, uint64_t a14)
{
  __n128 result;

  result = a13;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(__n128 *)(a9 + 112) = a13;
  *(_QWORD *)(a9 + 128) = a14;
  return result;
}

char *sub_1AF39D820(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1AF39D930(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6B0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6B8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1AF39DA50(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B698);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[12 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6A0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1AF39DB88(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1AF39DBC8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_1AF39DBA4()
{
  return swift_release();
}

_QWORD *sub_1AF39DBAC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1AF39DCD8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1AF39DBC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1AF39DCD8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B698);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[12 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6A0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t (*sub_1AF39DE10(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v3 = result;
    v4 = a3 + 16 * a2;
    v5 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)v3 = *(_QWORD *)(v4 + 32);
    *((_QWORD *)v3 + 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for NotificationWaiter;
  }
  __break(1u);
  return result;
}

uint64_t destroy for NotificationWaiter()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF39DE6C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1AF39DE80(a1, a2, a3);
  return a1;
}

uint64_t sub_1AF39DE80(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1AF39DE98()
{
  unint64_t result;

  result = qword_1EEE3B690;
  if (!qword_1EEE3B690)
  {
    result = MEMORY[0x1AF45E31C](&unk_1AF3EB6EC, &type metadata for OptionParser.ParseError);
    atomic_store(result, (unint64_t *)&qword_1EEE3B690);
  }
  return result;
}

_QWORD *sub_1AF39DEDC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v7 = result;
  if (!a2)
    goto LABEL_5;
  v8 = a3;
  if (!a3)
  {
LABEL_22:
    *v7 = a4;
    v7[1] = a5;
    return (_QWORD *)v8;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9 == a5)
    {
LABEL_5:
      v8 = 0;
      goto LABEL_22;
    }
    if (v9 > a5)
    {
      v11 = a4 + 16 * a5;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *(_QWORD *)(v11 + 40);
      v14 = a5 + 1;
      *a2 = v12;
      a2[1] = v13;
      if (a3 == 1)
      {
        v9 = a5 + 1;
      }
      else if (v14 == v9)
      {
        v8 = 1;
      }
      else
      {
        v21 = v9 - a5;
        if (v14 >= *(_QWORD *)(a4 + 16))
        {
LABEL_17:
          __break(1u);
        }
        else
        {
          v15 = 0;
          v16 = a3 - 2;
          v5 = a5 + 2;
          v22 = a4 + 16 * a5;
          while (1)
          {
            v17 = &a2[v15];
            v18 = *(_QWORD *)(v22 + v15 * 8 + 56);
            v17[2] = *(_QWORD *)(v22 + v15 * 8 + 48);
            v17[3] = v18;
            if (!v16)
              break;
            if (v9 == v5)
            {
              v8 = v21;
              goto LABEL_20;
            }
            v19 = *(_QWORD *)(a4 + 16);
            swift_bridgeObjectRetain();
            --v16;
            v15 += 2;
            if (v5++ >= v19)
              goto LABEL_17;
          }
        }
        v9 = v5;
LABEL_20:
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      a5 = v9;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1AF39E01C(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;

  v5 = 0;
  v6 = *(_QWORD *)(result + 16);
  v29 = a3 >> 16;
  v30 = a2 >> 16;
  v7 = result + 104;
  v27 = result + 104;
  v28 = MEMORY[0x1E0DEE9D8];
  v35 = v6;
LABEL_2:
  if (v5 <= v6)
    v8 = v6;
  else
    v8 = v5;
  v36 = v8 + 1;
  v9 = (_BYTE *)(v7 + 80 * v5);
  while (1)
  {
    if (v6 == v5)
      return v28;
    v10 = v5++;
    if (v36 == v5)
      break;
    v12 = *((_QWORD *)v9 - 9);
    v11 = *((_QWORD *)v9 - 8);
    v34 = *((_QWORD *)v9 - 7);
    v38 = *((_OWORD *)v9 - 3);
    v13 = *((_QWORD *)v9 - 4);
    v33 = *(v9 - 24);
    v14 = *((_QWORD *)v9 - 2);
    v15 = *((_QWORD *)v9 - 1);
    v16 = *v9;
    if ((v11 & 0x2000000000000000) != 0)
      v17 = HIBYTE(v11) & 0xF;
    else
      v17 = v12 & 0xFFFFFFFFFFFFLL;
    if (v12 == a4 && v11 == a5 && v30 == 0 && v17 == v29)
    {
      v12 = a4;
      v11 = a5;
LABEL_24:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AF39AF78();
      v21 = v28;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1AF39DB88(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v21 = v28;
      }
      v23 = *(_QWORD *)(v21 + 16);
      v22 = *(_QWORD *)(v21 + 24);
      v24 = v23 + 1;
      v6 = v35;
      if (v23 >= v22 >> 1)
      {
        v26 = v23 + 1;
        v37 = *(_QWORD *)(v21 + 16);
        result = (uint64_t)sub_1AF39DB88((char *)(v22 > 1), v23 + 1, 1);
        v24 = v26;
        v6 = v35;
        v23 = v37;
        v21 = v28;
      }
      v5 = v10 + 1;
      *(_QWORD *)(v21 + 16) = v24;
      v28 = v21;
      v25 = v21 + 80 * v23;
      *(_QWORD *)(v25 + 32) = v12;
      *(_QWORD *)(v25 + 40) = v11;
      *(_QWORD *)(v25 + 48) = v34;
      *(_OWORD *)(v25 + 56) = v38;
      *(_QWORD *)(v25 + 72) = v13;
      *(_BYTE *)(v25 + 80) = v33;
      *(_QWORD *)(v25 + 88) = v14;
      *(_QWORD *)(v25 + 96) = v15;
      *(_BYTE *)(v25 + 104) = v16;
      v7 = v27;
      goto LABEL_2;
    }
    v9 += 80;
    result = sub_1AF3E800C();
    v6 = v35;
    if ((result & 1) != 0)
      goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AF39E230(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v5 = a2;
  v6 = 0;
  v7 = result + 104;
  v30 = v3 - 1;
  v8 = MEMORY[0x1E0DEE9D8];
  v35 = a3;
  v33 = *(_QWORD *)(result + 16);
  v31 = result + 104;
  do
  {
    v32 = v8;
    if (v6 <= v3)
      v9 = v3;
    else
      v9 = v6;
    v40 = v9;
    v10 = (_BYTE *)(v7 + 80 * v6);
    v11 = v6;
    while (1)
    {
      if (v40 == v11)
      {
        __break(1u);
        return result;
      }
      v41 = v11;
      v12 = *((_QWORD *)v10 - 8);
      v13 = *((_OWORD *)v10 - 3);
      v14 = *((_QWORD *)v10 - 4);
      v36 = *(v10 - 24);
      v16 = *((_QWORD *)v10 - 2);
      v15 = *((_QWORD *)v10 - 1);
      v17 = *v10;
      v39 = v13;
      v37 = *((_QWORD *)v10 - 7);
      v38 = *((_QWORD *)v10 - 9);
      v18 = (_QWORD)v13 ? *((_QWORD *)v10 - 7) : 0;
      v19 = (_QWORD)v13 ? *((_QWORD *)v10 - 6) : 0xE000000000000000;
      if (v18 == v5 && v19 == a3)
        break;
      v21 = sub_1AF3E8030();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AF39AF78();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_22;
      v11 = v41 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_1AF39DBA4();
      v10 += 80;
      v5 = a2;
      a3 = v35;
      if (v33 == v41 + 1)
        return v32;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AF39AF78();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_22:
    result = swift_isUniquelyReferenced_nonNull_native();
    v8 = v32;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1AF39DB88(0, *(_QWORD *)(v32 + 16) + 1, 1);
      v8 = v32;
    }
    v22 = v17;
    v23 = v15;
    v24 = v16;
    v25 = v14;
    v26 = v41;
    v28 = *(_QWORD *)(v8 + 16);
    v27 = *(_QWORD *)(v8 + 24);
    if (v28 >= v27 >> 1)
    {
      result = (uint64_t)sub_1AF39DB88((char *)(v27 > 1), v28 + 1, 1);
      v26 = v41;
      v25 = v14;
      v24 = v16;
      v23 = v15;
      v22 = v17;
      v8 = v32;
    }
    v6 = v26 + 1;
    *(_QWORD *)(v8 + 16) = v28 + 1;
    v29 = v8 + 80 * v28;
    *(_QWORD *)(v29 + 32) = v38;
    *(_QWORD *)(v29 + 40) = v12;
    *(_QWORD *)(v29 + 48) = v37;
    *(_OWORD *)(v29 + 56) = v39;
    *(_QWORD *)(v29 + 72) = v25;
    *(_BYTE *)(v29 + 80) = v36;
    *(_QWORD *)(v29 + 88) = v24;
    *(_QWORD *)(v29 + 96) = v23;
    *(_BYTE *)(v29 + 104) = v22;
    v7 = v31;
    v5 = a2;
    a3 = v35;
    v3 = v33;
  }
  while (v30 != v26);
  return v8;
}

unint64_t sub_1AF39E4E8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_1AF3E7964();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_1AF3E7A30();
  }
  __break(1u);
  return result;
}

unint64_t sub_1AF39E584(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_1AF3E7A30();
  __break(1u);
  return result;
}

uint64_t destroy for OptionParser(_QWORD *a1)
{
  swift_bridgeObjectRelease();
  if (a1[2])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[10])
    swift_release();
  if (a1[12])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for OptionParser(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2 + 2;
  v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = a2[3];
    a1[2] = v5;
    a1[3] = v7;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v6;
  }
  v8 = a2[10];
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  v11 = a2[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    v12 = a2[11];
    a1[10] = v8;
    a1[11] = v12;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  }
  v13 = a2[12];
  if (v13)
  {
    v14 = a2[13];
    a1[12] = v13;
    a1[13] = v14;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  }
  v15 = a2[15];
  a1[14] = a2[14];
  a1[15] = v15;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OptionParser(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      v5 = a2[3];
      a1[2] = v4;
      a1[3] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[3];
    a1[2] = v4;
    a1[3] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_8:
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a2[10];
  if (a1[10])
  {
    if (v7)
    {
      v8 = a2[11];
      a1[10] = v7;
      a1[11] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[11];
    a1[10] = v7;
    a1[11] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
LABEL_15:
  v10 = a2[12];
  if (!a1[12])
  {
    if (v10)
    {
      v12 = a2[13];
      a1[12] = v10;
      a1[13] = v12;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    goto LABEL_22;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  v11 = a2[13];
  a1[12] = v10;
  a1[13] = v11;
  swift_retain();
  swift_release();
LABEL_22:
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for OptionParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
LABEL_8:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 88) = v12;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v11)
  {
    v13 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v13;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_15:
  v14 = *(_QWORD *)(a2 + 96);
  if (!*(_QWORD *)(a1 + 96))
  {
    if (v14)
    {
      v16 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v14;
      *(_QWORD *)(a1 + 104) = v16;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  swift_release();
LABEL_22:
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionParser()
{
  return &type metadata for OptionParser;
}

uint64_t destroy for OptionParser.Handler()
{
  return sub_1AF39DBA4();
}

uint64_t _s6ktrace12OptionParserV7HandlerOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1AF39AF78();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OptionParser.Handler(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1AF39AF78();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AF39DBA4();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OptionParser.Handler(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1AF39DBA4();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.Handler(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.Handler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AF39ED50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1AF39ED58(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.Handler()
{
  return &type metadata for OptionParser.Handler;
}

uint64_t destroy for OptionParser.Option()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1AF39DBA4();
}

uint64_t initializeWithCopy for OptionParser.Option(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AF39AF78();
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  return a1;
}

uint64_t assignWithCopy for OptionParser.Option(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_QWORD *)(a1 + 40) = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)v2 + 48);
  v4 = v2[7];
  v5 = v2[8];
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  sub_1AF39AF78();
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = (_BYTE)v2;
  sub_1AF39DBA4();
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for OptionParser.Option(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v7;
  sub_1AF39DBA4();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.Option(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.Option(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.Option()
{
  return &type metadata for OptionParser.Option;
}

uint64_t sub_1AF39F040(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for OptionParser.ParseError(uint64_t a1)
{
  return sub_1AF39DE80(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s6ktrace12OptionParserV10ParseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AF39F040(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OptionParser.ParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AF39F040(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AF39DE80(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for OptionParser.ParseError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1AF39DE80(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.ParseError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.ParseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AF39F1D4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_1AF39F1EC(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.ParseError()
{
  return &type metadata for OptionParser.ParseError;
}

uint64_t sub_1AF39F214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;

  v6 = (float)((float)a3 / (float)a5) * 100.0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B458);
  v7 = swift_allocObject();
  v8 = MEMORY[0x1E0DEB188];
  *(_OWORD *)(v7 + 16) = xmmword_1AF3EB020;
  v9 = MEMORY[0x1E0DEB1E8];
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = v9;
  *(float *)(v7 + 32) = v6;
  result = sub_1AF3E78D4();
  if ((unint64_t)(a3 - 0x200000000000000) >> 58 == 63)
  {
    v11 = result;
    v12 = objc_msgSend((id)objc_opt_self(), sel_stringFromByteCount_countStyle_, a3 << 6, 1);
    sub_1AF3E78C8();

    sub_1AF3E7DE4();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    sub_1AF3E7970();
    sub_1AF3E7970();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1AF39F3B8(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  _QWORD *v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v4 = HIWORD(*(_DWORD *)(a1 + 48));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v1;
  v24 = v6;
  *v3 = 0x8000000000000000;
  v8 = sub_1AF39F538(v4);
  v9 = *(_QWORD *)(v6 + 16);
  v10 = (v7 & 1) == 0;
  v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_13;
  }
  v2 = v7;
  if (*(_QWORD *)(v6 + 24) < v11)
  {
    sub_1AF39F60C(v11, isUniquelyReferenced_nonNull_native);
    v12 = sub_1AF39F538(v4);
    if ((v2 & 1) == (v13 & 1))
    {
      v8 = v12;
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_15;
  while (1)
  {
LABEL_6:
    *v3 = v6;
    result = swift_bridgeObjectRelease();
    v15 = (_QWORD *)*v3;
    if ((v2 & 1) != 0)
      goto LABEL_9;
    v15[(v8 >> 6) + 8] |= 1 << v8;
    *(_WORD *)(v15[6] + 2 * v8) = v4;
    *(_QWORD *)(v15[7] + 8 * v8) = 1;
    v16 = v15[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      break;
    v15[2] = v18;
LABEL_9:
    v19 = v15[7];
    v20 = *(_QWORD *)(v19 + 8 * v8);
    v17 = __OFADD__(v20, 1);
    v21 = v20 + 1;
    if (v17)
    {
LABEL_13:
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v19 + 8 * v8) = v21;
      v22 = v3[1];
      v17 = __OFADD__(v22, 1);
      v23 = v22 + 1;
      if (!v17)
      {
        v3[1] = v23;
        return result;
      }
    }
    __break(1u);
LABEL_15:
    sub_1AF39F8AC();
    v6 = v24;
  }
  __break(1u);
LABEL_17:
  result = sub_1AF3E806C();
  __break(1u);
  return result;
}

unint64_t sub_1AF39F518()
{
  return sub_1AF39FA3C(MEMORY[0x1E0DEE9D8]);
}

unint64_t sub_1AF39F538(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1AF45CC78](*(_QWORD *)(v1 + 40), a1, 2);
  return sub_1AF39F56C(a1, v3);
}

unint64_t sub_1AF39F56C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1AF39F60C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEE3B6C0);
  result = sub_1AF3E7F04();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    v31 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_WORD *)(*(_QWORD *)(v5 + 48) + 2 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      result = MEMORY[0x1AF45CC78](*(_QWORD *)(v7 + 40), v21, 2);
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_WORD *)(*(_QWORD *)(v7 + 48) + 2 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

void *sub_1AF39F8AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEE3B6C0);
  v2 = *v0;
  v3 = sub_1AF3E7EF8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1AF39FA3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int16 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EEE3B6C0);
    v3 = (_QWORD *)sub_1AF3E7F10();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_WORD *)i - 4);
      v6 = *i;
      result = sub_1AF39F538(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_WORD *)(v3[6] + 2 * result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

ValueMetadata *type metadata accessor for Prevalence()
{
  return &type metadata for Prevalence;
}

_QWORD *initializeBufferWithCopyOfBuffer for KdebugStatistics(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for KdebugStatistics()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for KdebugStatistics(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for KdebugStatistics(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for KdebugStatistics(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KdebugStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KdebugStatistics()
{
  return &type metadata for KdebugStatistics;
}

uint64_t sub_1AF39FC74(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF39FCB8(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t sub_1AF39FCF0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1AF39FD1C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = sub_1AF3A0930(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1AF39FD94()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

void sub_1AF39FDD0(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint32_t v14;
  uint32_t *v15;
  _QWORD v16[6];
  int out_token;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  out_token = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a2;
  v16[4] = sub_1AF3A0FB4;
  v16[5] = v10;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1107296256;
  v16[2] = sub_1AF347B30;
  v16[3] = &block_descriptor_7;
  v11 = _Block_copy(v16);
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = a2;
  swift_release();
  v13 = sub_1AF3E7910();
  v14 = notify_register_dispatch((const char *)(v13 + 32), &out_token, a1, v11);
  swift_release();
  _Block_release(v11);
  if (v14)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF344878((unint64_t *)&qword_1EEE3B750, (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError, (uint64_t)&unk_1AF3ED104);
    swift_allocError();
    *v15 = v14;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void sub_1AF39FF6C(NSObject *a1, void *a2, uint64_t a3)
{
  uint64_t *v3;

  sub_1AF39FDD0(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1AF39FF84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = &type metadata for NotificationWaiter;
  a3[4] = &off_1E5F6E0B8;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AF39FFA4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v29 = a1;
  v7 = sub_1AF3E7820();
  v28 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1AF3E7838();
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1AF3E7850();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v25 - v18;
  sub_1AF3E7844();
  MEMORY[0x1AF45C408](v17, (double)a4 / 1000000000.0);
  v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v17, v13);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a3;
  *(double *)(v21 + 24) = (double)a4 / 1000000000.0;
  *(_QWORD *)(v21 + 32) = a2;
  aBlock[4] = sub_1AF3A10C8;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AF347CA4;
  aBlock[3] = &block_descriptor_13;
  v22 = _Block_copy(aBlock);
  swift_retain();
  v23 = a2;
  sub_1AF3E782C();
  v30 = MEMORY[0x1E0DEE9D8];
  sub_1AF344878(&qword_1EEE3B6D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6D8);
  sub_1AF34482C();
  sub_1AF3E7D78();
  MEMORY[0x1AF45C72C](v19, v12, v9, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v27);
  v20(v19, v13);
  return swift_release();
}

uint64_t sub_1AF3A0230(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t *v3;

  return sub_1AF39FFA4(a1, a2, a3, *v3);
}

uint64_t sub_1AF3A0258(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  void (__cdecl *v13)(int);
  uint64_t result;
  _QWORD *v15;
  void *v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v4 = v3;
  v22 = a2;
  v21 = sub_1AF3E7820();
  v6 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1AF3E7838();
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v3 + 16);
  v13 = (void (__cdecl *)(int))sub_1AF3E77A8();
  signal(v12, v13);
  sub_1AF3A11AC();
  *(_QWORD *)(v4 + 24) = sub_1AF3E7BA4();
  result = swift_unknownObjectRelease();
  if (*(_QWORD *)(v4 + 24))
  {
    swift_getObjectType();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v4;
    v15[3] = a3;
    v16 = v22;
    v15[4] = v22;
    aBlock[4] = sub_1AF3414F8;
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1AF347CA4;
    aBlock[3] = &block_descriptor_19;
    v17 = _Block_copy(aBlock);
    v20 = v6;
    v18 = v17;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v19 = v16;
    sub_1AF3E782C();
    sub_1AF344798();
    sub_1AF3E7BB0();
    _Block_release(v18);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v21);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
    result = swift_release();
    if (*(_QWORD *)(v4 + 24))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1AF3E7BC8();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1AF3A0490()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1AF3A04B4(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1AF3A0258(a1, a2, a3);
}

uint64_t sub_1AF3A04D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  int v4;
  uint64_t v6;

  v4 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      a4[3] = (uint64_t)&type metadata for TimeWaiter;
      a4[4] = (uint64_t)&off_1E5F6C7F8;
      *a4 = result;
    }
    else
    {
      a4[3] = (uint64_t)&type metadata for NotificationWaiter;
      a4[4] = (uint64_t)&off_1E5F6E0B8;
      *a4 = result;
      a4[1] = a2;
      return swift_bridgeObjectRetain();
    }
  }
  else
  {
    v6 = type metadata accessor for SignalWaiter();
    result = swift_allocObject();
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 16) = v4;
    a4[3] = v6;
    a4[4] = (uint64_t)&off_1E5F6D6E0;
    *a4 = result;
  }
  return result;
}

unint64_t sub_1AF3A0580()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t sub_1AF3A05C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_DWORD *)(v1 + 24) = a1;
  *(_BYTE *)(v1 + 28) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*sub_1AF3A0604())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1AF3A0640(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[8];

  v18 = a1;
  v6 = sub_1AF3E7820();
  v17 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1AF3E7838();
  v9 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(*(dispatch_group_t *)(v3 + 16));
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v3;
  v12[3] = a3;
  v12[4] = a2;
  aBlock[4] = sub_1AF3A0ADC;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1AF347CA4;
  aBlock[3] = &block_descriptor;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v14 = a2;
  sub_1AF3E782C();
  aBlock[7] = MEMORY[0x1E0DEE9D8];
  sub_1AF344878(&qword_1EEE3B6D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B6D8);
  sub_1AF34482C();
  sub_1AF3E7D78();
  sub_1AF3E7B68();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  return swift_release();
}

void sub_1AF3A0838(unsigned int a1)
{
  dispatch_group_t *v1;

  ((void (*)(_QWORD))(*v1)[13].isa)(a1);
  dispatch_group_leave(v1[2]);
}

uint64_t sub_1AF3A0870()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1AF3A0894()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = dispatch_group_create();
  *(_DWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 28) = 1;
  return v0;
}

uint64_t sub_1AF3A08D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

_DWORD *sub_1AF3A0900@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1AF3A0910(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1AF3A091C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1AF3A0930(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_semaphore_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(id, id, uint64_t, uint64_t, uint64_t);
  id v18;
  id v19;
  id v20;
  id v22;
  void *v23;
  uint64_t v24;

  v5 = v4;
  v9 = dispatch_semaphore_create(0);
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = v9;
  *(_BYTE *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  type metadata accessor for WakeListener();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 24) = a3;
  *(_QWORD *)(v3 + 40) = v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    v23 = a2;
    v22 = a2;
    swift_retain();
    while (1)
    {
      v24 = v5;
      v14 = v12[3];
      v13 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v14);
      v15 = *(void **)(v3 + 32);
      v16 = *(_QWORD *)(v3 + 40);
      v17 = *(void (**)(id, id, uint64_t, uint64_t, uint64_t))(v13 + 8);
      v18 = *(id *)(v3 + 24);
      v19 = v15;
      swift_retain();
      v17(v18, v19, v16, v14, v13);
      v5 = v24;
      if (v24)
        break;

      swift_release();
      v12 += 5;
      if (!--v11)
      {
        swift_release();

        return v3;
      }
    }
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    v20 = a2;

  }
  return v3;
}

uint64_t type metadata accessor for SignalWaiter()
{
  return objc_opt_self();
}

uint64_t sub_1AF3A0ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  result = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 96))();
  if ((result & 0x100000000) == 0)
  {
    switch((_DWORD)result)
    {
      case 6:
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v1 + 120))(0xD000000000000013, 0x80000001AF3F1A90);
        break;
      case 5:
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v1 + 120))(0xD00000000000001ALL, 0x80000001AF3F1AB0);
        break;
      case 4:
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v1 + 120))(0xD00000000000001FLL, 0x80000001AF3F1AD0);
        break;
      default:
        return result;
    }
    return sub_1AF3E7BF8();
  }
  return result;
}

uint64_t type metadata accessor for WakeListener()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for WaitGroup()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for StartWait()
{
  return &type metadata for StartWait;
}

uint64_t sub_1AF3A0C08(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for EndWait(uint64_t a1)
{
  return sub_1AF3A0C30(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1AF3A0C30(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s6ktrace7EndWaitOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AF3A0C08(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EndWait(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AF3A0C08(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AF3A0C30(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EndWait(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1AF3A0C30(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EndWait(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EndWait(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AF3A0DB4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EndWait()
{
  return &type metadata for EndWait;
}

uint64_t type metadata accessor for KernelDisableWaiter()
{
  return objc_opt_self();
}

void type metadata accessor for ktrace_end_reason()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EEE3B748)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EEE3B748);
  }
}

ValueMetadata *type metadata accessor for TimeWaiter()
{
  return &type metadata for TimeWaiter;
}

_QWORD *initializeBufferWithCopyOfBuffer for NotificationWaiter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TraceFileProvenance(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for NotificationWaiter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TraceFileProvenance(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TraceFileProvenance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationWaiter()
{
  return &type metadata for NotificationWaiter;
}

uint64_t sub_1AF3A0F80()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1AF3A0FB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v1 = *(_QWORD *)(v0 + 16);
  sub_1AF3E7DE4();
  swift_bridgeObjectRelease();
  HIBYTE(v3[1]) = -18;
  swift_bridgeObjectRetain();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 120))(v3[0], v3[1]);
  swift_bridgeObjectRelease();
  return sub_1AF3E7BF8();
}

uint64_t sub_1AF3A109C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1AF3A10C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1AF3E7DE4();
  sub_1AF3E7970();
  sub_1AF3E7AFC();
  sub_1AF3E7970();
  (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v1 + 120))(0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  return sub_1AF3E7BF8();
}

unint64_t sub_1AF3A11AC()
{
  unint64_t result;

  result = qword_1EEE3B758;
  if (!qword_1EEE3B758)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEE3B758);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

BOOL static PlanSource.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PlanSource.hash(into:)()
{
  return sub_1AF3E80E4();
}

uint64_t PlanSource.hashValue.getter()
{
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A12C4()
{
  return sub_1AF3E80E4();
}

uint64_t sub_1AF3A12F0(uint64_t a1, double a2)
{
  uint64_t result;
  double v5;
  uint64_t v6;

  result = sub_1AF3BCA04();
  v5 = (double)result * a2;
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = sub_1AF3BCA98();
  v6 = result * a1;
  if ((unsigned __int128)(result * (__int128)a1) >> 64 != (result * a1) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)v5 + v6;
  if (__OFADD__((uint64_t)v5, v6))
LABEL_11:
    __break(1u);
  return result;
}

uint64_t sub_1AF3A138C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B4588(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AF3A13B0()
{
  return 0;
}

void sub_1AF3A13BC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1AF3A13C8()
{
  sub_1AF3481A4();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A13F0()
{
  sub_1AF3481A4();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A1418@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1AF3B4698(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_1AF3A1444(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AF3A5508(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1AF33C784);
}

uint64_t sub_1AF3A1450(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x696577746867696CLL;
  else
    v3 = 0x6C616E696769726FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEB00000000746867;
  if ((a2 & 1) != 0)
    v5 = 0x696577746867696CLL;
  else
    v5 = 0x6C616E696769726FLL;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000746867;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1AF3E8030();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1AF3A14FC(uint64_t a1, uint64_t a2)
{
  return sub_1AF3A55A0(a1, a2, (void (*)(uint64_t))sub_1AF33C784);
}

uint64_t sub_1AF3A1508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AF3A5610(a1, a2, a3, (void (*)(_QWORD))sub_1AF33C784);
}

uint64_t sub_1AF3A1514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AF3A565C(a1, a2, a3, (void (*)(uint64_t))sub_1AF33C784);
}

uint64_t sub_1AF3A1520@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AF3B6A44();
  *a1 = result;
  return result;
}

uint64_t sub_1AF3A1554()
{
  sub_1AF340A10();
  return sub_1AF3E7A9C();
}

uint64_t sub_1AF3A15B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int32 v10;
  unint64_t v11;
  uint64_t v12;
  __int32 v13;
  int8x16_t *v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x8_t v19;
  unint64_t v20;
  __int32 *v21;
  int v22;
  int v23;
  char *v24;
  int8x16_t *v25;

  if (result < 1)
  {
    __break(1u);
    goto LABEL_22;
  }
  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (int8x16_t *)MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v25 = (int8x16_t *)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1AF3AB088(0, v4, 0);
    v6 = 0;
    v5 = v25;
    v7 = v25[1].u64[0];
    do
    {
      v8 = *(char *)(a2 + v6 + 32);
      v9 = v25[1].u64[1];
      if (v7 >= v9 >> 1)
        sub_1AF3AB088((char *)(v9 > 1), v7 + 1, 1);
      ++v6;
      v10 = dword_1AF3ECC0C[v8];
      v25[1].i64[0] = v7 + 1;
      v25[2].i32[v7++] = v10;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
  }
  v11 = v5[1].u64[0];
  if (v11)
  {
    if (v11 < 8)
    {
      v12 = 0;
      v13 = 0;
LABEL_15:
      v20 = v11 - v12;
      v21 = &v5[2].i32[v12];
      do
      {
        v22 = *v21++;
        v13 |= v22;
        --v20;
      }
      while (v20);
      goto LABEL_17;
    }
    v12 = v11 & 0x7FFFFFFFFFFFFFF8;
    v14 = v5 + 3;
    v15 = 0uLL;
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    v17 = 0uLL;
    do
    {
      v15 = vorrq_s8(v14[-1], v15);
      v17 = vorrq_s8(*v14, v17);
      v14 += 2;
      v16 -= 8;
    }
    while (v16);
    v18 = vorrq_s8(v17, v15);
    v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    v13 = v19.i32[0] | v19.i32[1];
    if (v11 != v12)
      goto LABEL_15;
  }
LABEL_17:
  result = swift_bridgeObjectRelease();
  if (v3 > 0xFFFFFFFFLL)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  result = kperf_action_samplers_set();
  if ((result & 0x80000000) != 0)
  {
    v23 = MEMORY[0x1AF45C330]();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    strcpy(v24, "set samplers");
    v24[13] = 0;
    *((_WORD *)v24 + 7) = -5120;
    *((_DWORD *)v24 + 4) = v23;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1AF3A17E0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v1, 0);
  v2 = v27;
  result = sub_1AF3B3B3C(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v21 = v1;
  v22 = v5;
  v23 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v24 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v25 = *v12;
    v26 = v12[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1AF3E7970();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v27 + 16);
    v14 = *(_QWORD *)(v27 + 24);
    if (v13 >= v14 >> 1)
      result = (uint64_t)sub_1AF38FDBC((char *)(v14 > 1), v13 + 1, 1);
    *(_QWORD *)(v27 + 16) = v13 + 1;
    v15 = v27 + 16 * v13;
    *(_QWORD *)(v15 + 32) = v25;
    *(_QWORD *)(v15 + 40) = v26;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v16 = *(_QWORD *)(v23 + 8 * v11);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v22;
    if (*(_DWORD *)(a1 + 36) != v22)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v9 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v21;
    }
    else
    {
      v18 = v11 + 1;
      v19 = (unint64_t)(v9 + 63) >> 6;
      v10 = v21;
      if (v11 + 1 < v19)
      {
        v20 = *(_QWORD *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v9 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v11)
          {
            v20 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v20)
            {
              v18 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v24 + 1;
    v6 = v9;
    if (v24 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A1A44(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v67 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v1, 0);
  v2 = v67;
  result = sub_1AF3B3B3C(v3);
  if (result < 0)
    goto LABEL_31;
  v6 = result;
  if (result >= 1 << *(_BYTE *)(v3 + 32))
    goto LABEL_31;
  v7 = v3 + 64;
  v34 = v3 + 80;
  v35 = v1;
  v8 = 1;
  v36 = v5;
  v37 = v3 + 64;
  while (1)
  {
    v9 = v6 >> 6;
    if ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
      break;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_27;
    v38 = v8;
    v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    v13 = *(_QWORD *)(v3 + 56) + 200 * v6;
    v40 = *(_OWORD *)v13;
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_OWORD *)(v13 + 32);
    v16 = *(_OWORD *)(v13 + 64);
    v43 = *(_OWORD *)(v13 + 48);
    v44 = v16;
    v41 = v14;
    v42 = v15;
    v17 = *(_OWORD *)(v13 + 80);
    v18 = *(_OWORD *)(v13 + 96);
    v19 = *(_OWORD *)(v13 + 128);
    v47 = *(_OWORD *)(v13 + 112);
    v48 = v19;
    v45 = v17;
    v46 = v18;
    v20 = *(_OWORD *)(v13 + 144);
    v21 = *(_OWORD *)(v13 + 160);
    v22 = *(_OWORD *)(v13 + 176);
    v52 = *(_QWORD *)(v13 + 192);
    v50 = v21;
    v51 = v22;
    v49 = v20;
    v39 = v11;
    v53[0] = v11;
    v53[1] = v12;
    v54 = v40;
    v55 = v41;
    v56 = v42;
    v57 = v43;
    v58 = v44;
    v59 = v45;
    v60 = v46;
    v61 = v47;
    v62 = v19;
    v63 = v20;
    v64 = v21;
    v65 = v22;
    v66 = v52;
    swift_bridgeObjectRetain_n();
    sub_1AF3B7E08((uint64_t)&v40);
    result = sub_1AF3BA530((uint64_t)v53);
    v67 = v2;
    v23 = v3;
    v25 = *(_QWORD *)(v2 + 16);
    v24 = *(_QWORD *)(v2 + 24);
    if (v25 >= v24 >> 1)
    {
      result = (uint64_t)sub_1AF38FDBC((char *)(v24 > 1), v25 + 1, 1);
      v2 = v67;
    }
    *(_QWORD *)(v2 + 16) = v25 + 1;
    v26 = v2 + 16 * v25;
    *(_QWORD *)(v26 + 32) = v39;
    *(_QWORD *)(v26 + 40) = v12;
    v27 = *(_BYTE *)(v23 + 32);
    if ((uint64_t)v6 >= 1 << v27)
      goto LABEL_28;
    v7 = v37;
    v28 = *(_QWORD *)(v37 + 8 * v9);
    if ((v28 & (1 << v6)) == 0)
      goto LABEL_29;
    v3 = v23;
    v5 = v36;
    if (*(_DWORD *)(v23 + 36) != v36)
      goto LABEL_30;
    v29 = v28 & (-2 << (v6 & 0x3F));
    if (v29)
    {
      v6 = __clz(__rbit64(v29)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v30 = v35;
    }
    else
    {
      v31 = v9 + 1;
      v32 = (unint64_t)((1 << v27) + 63) >> 6;
      v30 = v35;
      if (v9 + 1 >= v32)
        goto LABEL_20;
      v33 = *(_QWORD *)(v37 + 8 * v31);
      if (!v33)
      {
        while (v32 - 2 != v9)
        {
          v33 = *(_QWORD *)(v34 + 8 * v9++);
          if (v33)
          {
            v31 = v9 + 1;
            goto LABEL_19;
          }
        }
LABEL_20:
        v6 = 1 << v27;
        goto LABEL_21;
      }
LABEL_19:
      v6 = __clz(__rbit64(v33)) + (v31 << 6);
    }
LABEL_21:
    if (v38 == v30)
      return v2;
    if ((v6 & 0x8000000000000000) == 0)
    {
      v8 = v38 + 1;
      if ((uint64_t)v6 < 1 << v27)
        continue;
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A1D14(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v67 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v1, 0);
  v2 = v67;
  result = sub_1AF3B3B3C(v3);
  if (result < 0)
    goto LABEL_31;
  v6 = result;
  if (result >= 1 << *(_BYTE *)(v3 + 32))
    goto LABEL_31;
  v7 = v3 + 64;
  v34 = v3 + 80;
  v35 = v1;
  v8 = 1;
  v36 = v5;
  v37 = v3 + 64;
  while (1)
  {
    v9 = v6 >> 6;
    if ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
      break;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_27;
    v38 = v8;
    v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    v13 = *(_QWORD *)(v3 + 56) + 200 * v6;
    v40 = *(_OWORD *)v13;
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_OWORD *)(v13 + 32);
    v16 = *(_OWORD *)(v13 + 64);
    v43 = *(_OWORD *)(v13 + 48);
    v44 = v16;
    v41 = v14;
    v42 = v15;
    v17 = *(_OWORD *)(v13 + 80);
    v18 = *(_OWORD *)(v13 + 96);
    v19 = *(_OWORD *)(v13 + 128);
    v47 = *(_OWORD *)(v13 + 112);
    v48 = v19;
    v45 = v17;
    v46 = v18;
    v20 = *(_OWORD *)(v13 + 144);
    v21 = *(_OWORD *)(v13 + 160);
    v22 = *(_OWORD *)(v13 + 176);
    v52 = *(_QWORD *)(v13 + 192);
    v50 = v21;
    v51 = v22;
    v49 = v20;
    v39 = v11;
    v53[0] = v11;
    v53[1] = v12;
    v54 = v40;
    v55 = v41;
    v56 = v42;
    v57 = v43;
    v58 = v44;
    v59 = v45;
    v60 = v46;
    v61 = v47;
    v62 = v19;
    v63 = v20;
    v64 = v21;
    v65 = v22;
    v66 = v52;
    swift_bridgeObjectRetain();
    sub_1AF3B7E08((uint64_t)&v40);
    swift_bridgeObjectRetain();
    sub_1AF3B7E08((uint64_t)&v40);
    sub_1AF3BA530((uint64_t)v53);
    swift_bridgeObjectRetain();
    result = sub_1AF3BA530((uint64_t)v53);
    v67 = v2;
    v23 = v3;
    v25 = *(_QWORD *)(v2 + 16);
    v24 = *(_QWORD *)(v2 + 24);
    if (v25 >= v24 >> 1)
    {
      result = (uint64_t)sub_1AF38FDBC((char *)(v24 > 1), v25 + 1, 1);
      v2 = v67;
    }
    *(_QWORD *)(v2 + 16) = v25 + 1;
    v26 = v2 + 16 * v25;
    *(_QWORD *)(v26 + 32) = v39;
    *(_QWORD *)(v26 + 40) = v12;
    v27 = *(_BYTE *)(v23 + 32);
    if ((uint64_t)v6 >= 1 << v27)
      goto LABEL_28;
    v7 = v37;
    v28 = *(_QWORD *)(v37 + 8 * v9);
    if ((v28 & (1 << v6)) == 0)
      goto LABEL_29;
    v3 = v23;
    v5 = v36;
    if (*(_DWORD *)(v23 + 36) != v36)
      goto LABEL_30;
    v29 = v28 & (-2 << (v6 & 0x3F));
    if (v29)
    {
      v6 = __clz(__rbit64(v29)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v30 = v35;
    }
    else
    {
      v31 = v9 + 1;
      v32 = (unint64_t)((1 << v27) + 63) >> 6;
      v30 = v35;
      if (v9 + 1 >= v32)
        goto LABEL_20;
      v33 = *(_QWORD *)(v37 + 8 * v31);
      if (!v33)
      {
        while (v32 - 2 != v9)
        {
          v33 = *(_QWORD *)(v34 + 8 * v9++);
          if (v33)
          {
            v31 = v9 + 1;
            goto LABEL_19;
          }
        }
LABEL_20:
        v6 = 1 << v27;
        goto LABEL_21;
      }
LABEL_19:
      v6 = __clz(__rbit64(v33)) + (v31 << 6);
    }
LABEL_21:
    if (v38 == v30)
      return v2;
    if ((v6 & 0x8000000000000000) == 0)
    {
      v8 = v38 + 1;
      if ((uint64_t)v6 < 1 << v27)
        continue;
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A2000(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v69 = MEMORY[0x1E0DEE9D8];
  sub_1AF38FDBC(0, v1, 0);
  v2 = v69;
  result = sub_1AF3B3B3C(v3);
  if (result < 0)
    goto LABEL_31;
  v6 = result;
  if (result >= 1 << *(_BYTE *)(v3 + 32))
    goto LABEL_31;
  v7 = v3 + 64;
  v35 = v3 + 80;
  v36 = v1;
  v8 = 1;
  v37 = v5;
  v38 = v3 + 64;
  v39 = v3;
  while (1)
  {
    v9 = v6 >> 6;
    if ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
      break;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_27;
    v40 = v8;
    v10 = *(_QWORD *)(v3 + 56);
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v12 = v2;
    v14 = *v11;
    v13 = v11[1];
    v15 = (__int128 *)(v10 + 200 * v6);
    v42 = *v15;
    v16 = v15[1];
    v17 = v15[2];
    v18 = v15[4];
    v45 = v15[3];
    v46 = v18;
    v43 = v16;
    v44 = v17;
    v19 = v15[5];
    v20 = v15[6];
    v21 = v15[8];
    v49 = v15[7];
    v50 = v21;
    v47 = v19;
    v48 = v20;
    v22 = v15[9];
    v23 = v15[10];
    v24 = v15[11];
    v54 = *((_QWORD *)v15 + 24);
    v52 = v23;
    v53 = v24;
    v51 = v22;
    v55[0] = v14;
    v55[1] = v13;
    v56 = v42;
    v57 = v43;
    v58 = v44;
    v59 = v45;
    v60 = v46;
    v61 = v47;
    v62 = v48;
    v63 = v49;
    v64 = v21;
    v65 = v22;
    v66 = v23;
    v67 = v24;
    v68 = v54;
    swift_bridgeObjectRetain();
    sub_1AF3B7E08((uint64_t)&v42);
    swift_bridgeObjectRetain();
    sub_1AF3B7E08((uint64_t)&v42);
    sub_1AF3BA530((uint64_t)v55);
    v41 = v13;
    swift_bridgeObjectRetain();
    sub_1AF3E7970();
    swift_bridgeObjectRetain();
    sub_1AF3E7970();
    v2 = v12;
    swift_bridgeObjectRelease();
    result = sub_1AF3BA530((uint64_t)v55);
    v69 = v12;
    v25 = *(_QWORD *)(v12 + 16);
    v26 = *(_QWORD *)(v2 + 24);
    if (v25 >= v26 >> 1)
    {
      result = (uint64_t)sub_1AF38FDBC((char *)(v26 > 1), v25 + 1, 1);
      v2 = v69;
    }
    *(_QWORD *)(v2 + 16) = v25 + 1;
    v27 = v2 + 16 * v25;
    *(_QWORD *)(v27 + 32) = v14;
    *(_QWORD *)(v27 + 40) = v41;
    v3 = v39;
    v28 = *(_BYTE *)(v39 + 32);
    if ((uint64_t)v6 >= 1 << v28)
      goto LABEL_28;
    v7 = v38;
    v29 = *(_QWORD *)(v38 + 8 * v9);
    if ((v29 & (1 << v6)) == 0)
      goto LABEL_29;
    v5 = v37;
    if (*(_DWORD *)(v39 + 36) != v37)
      goto LABEL_30;
    v30 = v29 & (-2 << (v6 & 0x3F));
    if (v30)
    {
      v6 = __clz(__rbit64(v30)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v31 = v36;
    }
    else
    {
      v32 = v9 + 1;
      v33 = (unint64_t)((1 << v28) + 63) >> 6;
      v31 = v36;
      if (v9 + 1 >= v33)
        goto LABEL_20;
      v34 = *(_QWORD *)(v38 + 8 * v32);
      if (!v34)
      {
        while (v33 - 2 != v9)
        {
          v34 = *(_QWORD *)(v35 + 8 * v9++);
          if (v34)
          {
            v32 = v9 + 1;
            goto LABEL_19;
          }
        }
LABEL_20:
        v6 = 1 << v28;
        goto LABEL_21;
      }
LABEL_19:
      v6 = __clz(__rbit64(v34)) + (v32 << 6);
    }
LABEL_21:
    if (v40 == v31)
      return v2;
    if ((v6 & 0x8000000000000000) == 0)
    {
      v8 = v40 + 1;
      if ((uint64_t)v6 < 1 << v28)
        continue;
    }
    goto LABEL_31;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A232C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7372656C706D6173 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1AF3E8030();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1AF3A23C0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1AF3A23CC()
{
  sub_1AF348620();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A23F4()
{
  sub_1AF348620();
  return sub_1AF3E8150();
}

_QWORD *sub_1AF3A241C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1AF3B4B18(a1);
  if (!v2)
    *a2 = result;
  return result;
}

BOOL sub_1AF3A2444(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1AF3A245C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B4C64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AF3A2480()
{
  sub_1AF3486E8();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A24A8()
{
  sub_1AF3486E8();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A24D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AF3A30FC(a1, &qword_1EEE3BBB8, (void (*)(void))sub_1AF3486E8, a2);
}

unint64_t sub_1AF3A24FC(uint64_t a1)
{
  BOOL v1;
  unint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v1 = __OFADD__(a1, 1);
  result = a1 + 1;
  if (v1)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!HIDWORD(result))
  {
    if ((kperf_kdebug_action_set() & 0x80000000) != 0)
    {
      v8 = MEMORY[0x1AF45C330]();
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      *(_QWORD *)v9 = 0xD000000000000019;
      *(_QWORD *)(v9 + 8) = 0x80000001AF3F1D50;
      *(_DWORD *)(v9 + 16) = v8;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
    v3 = kperf_kdebug_filter_create();
    sub_1AF3E7910();
    v4 = kperf_kdebug_filter_add_desc();
    v5 = swift_release();
    if (v4 < 0)
    {
      v6 = MEMORY[0x1AF45C330](v5);
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      *(_QWORD *)v7 = 0xD00000000000001BLL;
      *(_QWORD *)(v7 + 8) = 0x80000001AF3F1D70;
    }
    else
    {
      if ((kperf_kdebug_filter_set() & 0x80000000) == 0)
        return MEMORY[0x1AF45DA40](v3);
      v6 = MEMORY[0x1AF45C330]();
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      *(_QWORD *)v7 = 0xD000000000000019;
      *(_QWORD *)(v7 + 8) = 0x80000001AF3F1D90;
    }
    *(_DWORD *)(v7 + 16) = v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return MEMORY[0x1AF45DA40](v3);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A26C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B4D68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AF3A26EC()
{
  sub_1AF340D2C();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A2714()
{
  sub_1AF340D2C();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A273C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1AF3B4E94(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1AF3A2768(char a1, unint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  if ((a1 & 1) == 0)
    sub_1AF3E8030();
  swift_bridgeObjectRelease();
  result = kperf_timer_lightweight_pet_set();
  if ((result & 0x80000000) != 0)
  {
    v4 = MEMORY[0x1AF45C330]();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000018;
    *(_QWORD *)(v5 + 8) = 0x80000001AF3F1DB0;
    goto LABEL_9;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (HIDWORD(a2))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  result = kperf_timer_pet_set();
  if ((result & 0x80000000) == 0)
    return result;
  v4 = MEMORY[0x1AF45C330]();
  type metadata accessor for KTraceRecordError();
  sub_1AF3910EC();
  swift_allocError();
  strcpy((char *)v5, "set PET timer");
  *(_WORD *)(v5 + 14) = -4864;
LABEL_9:
  *(_DWORD *)(v5 + 16) = v4;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_1AF3A28E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x646E4972656D6974;
  else
    return 1701080941;
}

uint64_t sub_1AF3A291C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B5070(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AF3A2940()
{
  sub_1AF3B4FE8();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A2968()
{
  sub_1AF3B4FE8();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A2990(_QWORD *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = a2 & 1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B868);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1AF3B4FE8();
  sub_1AF3E812C();
  v13 = v4;
  v12 = 0;
  sub_1AF3B502C();
  sub_1AF3E7FF4();
  if (!v2)
  {
    v11 = 1;
    sub_1AF3E7FE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1AF3A2AC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1AF3B515C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1AF3A2AF0(_QWORD *a1)
{
  char *v1;

  return sub_1AF3A2990(a1, *v1);
}

uint64_t sub_1AF3A2B0C(char *a1, char *a2)
{
  return sub_1AF3A1450(*a1, *a2);
}

uint64_t sub_1AF3A2B18()
{
  sub_1AF3E80D8();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A2BA0()
{
  sub_1AF3E7940();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF3A2C04()
{
  sub_1AF3E80D8();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A2C88@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1AF3E7F34();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1AF3A2CE4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6C616E696769726FLL;
  if (*v1)
    v2 = 0x696577746867696CLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEB00000000746867;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1AF3A2D2C()
{
  sub_1AF3BA4B8();
  return sub_1AF3E7A9C();
}

uint64_t sub_1AF3A2D88()
{
  sub_1AF3BA4B8();
  return sub_1AF3E7A90();
}

uint64_t sub_1AF3A2DD4(uint64_t result, uint64_t a2, unint64_t a3)
{
  char v3;
  int v4;
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  const char *v8;

  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((_DWORD)a2 == -1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (((a3 | a2) & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (!is_mul_ok(a3, 0x3E8uLL))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v3 = result;
  kperf_ns_to_ticks();
  if ((v3 & 1) != 0)
  {
    if ((kperf_lazy_wait_action_set() & 0x80000000) == 0)
    {
      result = kperf_lazy_wait_time_threshold_set();
      if ((result & 0x80000000) == 0)
        return result;
      v4 = MEMORY[0x1AF45C330]();
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      v7 = 0xD00000000000001FLL;
      v8 = "set up lazy wait action";
      goto LABEL_15;
    }
    v4 = MEMORY[0x1AF45C330]();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v6 = "set up lazy wait action";
    v7 = 0xD000000000000017;
LABEL_14:
    v8 = v6 - 32;
LABEL_15:
    *(_QWORD *)v5 = v7;
    *(_QWORD *)(v5 + 8) = (unint64_t)v8 | 0x8000000000000000;
    goto LABEL_16;
  }
  if ((kperf_lazy_cpu_action_set() & 0x80000000) == 0)
  {
    result = kperf_lazy_cpu_time_threshold_set();
    if ((result & 0x80000000) == 0)
      return result;
    v4 = MEMORY[0x1AF45C330]();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v6 = "set up lazy CPU time threshold";
    v7 = 0xD00000000000001ELL;
    goto LABEL_14;
  }
  v4 = MEMORY[0x1AF45C330]();
  type metadata accessor for KTraceRecordError();
  sub_1AF3910EC();
  swift_allocError();
  *(_QWORD *)v5 = 0xD000000000000016;
  *(_QWORD *)(v5 + 8) = 0x80000001AF3F1E10;
LABEL_16:
  *(_DWORD *)(v5 + 16) = v4;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_1AF3A2FD8()
{
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A301C()
{
  sub_1AF3E80D8();
  sub_1AF3E80E4();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A305C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B52C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AF3A3080()
{
  sub_1AF340EC0();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A30A8()
{
  sub_1AF340EC0();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A30D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1AF3A30FC(a1, &qword_1EEE3BB98, (void (*)(void))sub_1AF340EC0, a2);
}

uint64_t sub_1AF3A30FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = sub_1AF3B53C8(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t sub_1AF3A3130(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v27)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_1AF396870(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = sub_1AF3E8030();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A334C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B5528(a1, a2);
  *a3 = result;
  return result;
}

void sub_1AF3A3370(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1AF3A337C()
{
  sub_1AF342FD4();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A33A4()
{
  sub_1AF342FD4();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A33CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1AF3B566C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_1AF3A3400(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v6 || (v7 = sub_1AF3E8030(), result = 0, (v7 & 1) != 0))
  {
    if ((sub_1AF3A3130(v2, v4) & 1) != 0)
      return v3 ^ v5 ^ 1u;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1AF3A347C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1AF3A34B8 + 4 * byte_1AF3EB97F[a1]))(0xD000000000000010, 0x80000001AF3F1BE0);
}

uint64_t sub_1AF3A34B8()
{
  return 0x694667756265646BLL;
}

unint64_t sub_1AF3A34D8()
{
  return 0xD000000000000013;
}

uint64_t sub_1AF3A3570()
{
  return 0x7A614C667265706BLL;
}

uint64_t sub_1AF3A35C0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AF3A5508(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1AF3A347C);
}

uint64_t sub_1AF3A35CC(uint64_t a1, uint64_t a2)
{
  return sub_1AF3A55A0(a1, a2, (void (*)(uint64_t))sub_1AF3A347C);
}

uint64_t sub_1AF3A35D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AF3A5610(a1, a2, a3, (void (*)(_QWORD))sub_1AF3A347C);
}

uint64_t sub_1AF3A35E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AF3A565C(a1, a2, a3, (void (*)(uint64_t))sub_1AF3A347C);
}

uint64_t sub_1AF3A35F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AF3B6A44();
  *a1 = result;
  return result;
}

uint64_t sub_1AF3A3624@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1AF3A347C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1AF3A364C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AF3B6A44();
  *a1 = result;
  return result;
}

void sub_1AF3A3678(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1AF3A3684()
{
  sub_1AF347A30();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A36AC()
{
  sub_1AF347A30();
  return sub_1AF3E8150();
}

uint64_t sub_1AF3A36D4(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;

  v4 = v3;
  v5 = v2;
  v6 = v2[4];
  if (v6)
  {
    v7 = v2[3];
    swift_bridgeObjectRetain();
    result = sub_1AF38D8B0(v7, v6);
    if (!v4)
    {
      sub_1AF38DB48(result);
      result = swift_bridgeObjectRelease();
      v8 = v5[6];
      if (v8)
      {
        v9 = v5[5];
        swift_bridgeObjectRetain();
        v10 = sub_1AF38D8B0(v9, v8);
        sub_1AF38DB48(v10);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (v2[6])
  {
    v12 = result;
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v13 = v12;
    v13[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1AF3A37E4(_TtC6ktrace12ProviderList *a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC6ktrace12ProviderList *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t i;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  _TtC6ktrace12ProviderList *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE v67[24];
  _BYTE v68[16];
  char v69[8];
  _BYTE v70[24];
  double v71[2];
  char v72;
  char v73[8];
  unint64_t v74;
  uint64_t v75[2];
  char v76;
  uint64_t v77[2];
  char v78;
  uint64_t v79;

  v5 = v4;
  v6 = v3;
  sub_1AF3478BC(v6, (uint64_t)v70, &qword_1EEE3B898);
  result = sub_1AF3478BC((uint64_t)v70, (uint64_t)v71, &qword_1EEE3B898);
  if ((v72 & 1) != 0)
    return result;
  v11 = sub_1AF3A12F0(*(uint64_t *)&v71[1], v71[0]);
  ktrace_set_buffer_size((uint64_t)a1, v11);
  ktrace_set_coprocessor_tracing_enabled((uint64_t)a1, (*(_BYTE *)(v6 + 56) == 2) | *(_BYTE *)(v6 + 56) & 1);
  v12 = *(_QWORD *)(v6 + 64);
  if (!v12)
    goto LABEL_42;
  result = kperf_reset();
  v13 = *(_QWORD *)(v12 + 16);
  if (HIDWORD(v13))
    goto LABEL_85;
  result = kperf_action_count_set();
  if (v13)
  {
    v14 = a1;
    swift_bridgeObjectRetain();
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v12 + 8 * v15++ + 32);
      swift_bridgeObjectRetain();
      sub_1AF3A15B0(v15, v16);
      swift_bridgeObjectRelease();
      if (v4)
        return swift_bridgeObjectRelease();
    }
    while (v13 != v15);
    result = swift_bridgeObjectRelease();
    a1 = v14;
  }
  v17 = *(_QWORD **)(v6 + 72);
  if (v17)
  {
    v18 = v17[2];
    if (HIDWORD(v18))
      goto LABEL_86;
    result = kperf_timer_count_set();
    if (v18)
    {
      v19 = v17[5];
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_87;
      v61 = a2;
      if (is_mul_ok(v19, 0x3E8uLL))
      {
        v20 = v17[4];
        swift_bridgeObjectRetain();
        kperf_ns_to_ticks();
        result = kperf_timer_period_set();
        if ((result & 0x80000000) != 0)
        {
LABEL_29:
          v26 = MEMORY[0x1AF45C330]();
          type metadata accessor for KTraceRecordError();
          sub_1AF3910EC();
          swift_allocError();
          *(_QWORD *)v27 = 0x6972657020746573;
          *(_QWORD *)(v27 + 8) = 0xEA0000000000646FLL;
          goto LABEL_30;
        }
        v21 = v20 + 1;
        if (!__OFADD__(v20, 1))
        {
          if ((v21 & 0x8000000000000000) == 0)
          {
            if (!HIDWORD(v21))
            {
              result = kperf_timer_action_set();
              if ((result & 0x80000000) == 0)
              {
                v22 = v17 + 7;
                v23 = 1;
                while (v18 != v23)
                {
                  if ((*v22 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
                    goto LABEL_88;
                  }
                  if (!is_mul_ok(*v22, 0x3E8uLL))
                    goto LABEL_81;
                  v24 = *(v22 - 1);
                  kperf_ns_to_ticks();
                  result = kperf_timer_period_set();
                  if ((result & 0x80000000) != 0)
                    goto LABEL_29;
                  v25 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_82;
                  if ((v25 & 0x8000000000000000) != 0)
                    goto LABEL_83;
                  if (HIDWORD(v25))
                    goto LABEL_84;
                  result = kperf_timer_action_set();
                  v22 += 2;
                  ++v23;
                  if ((result & 0x80000000) != 0)
                    goto LABEL_28;
                }
                swift_bridgeObjectRelease();
                a2 = v61;
                goto LABEL_32;
              }
LABEL_28:
              v26 = MEMORY[0x1AF45C330]();
              type metadata accessor for KTraceRecordError();
              sub_1AF3910EC();
              swift_allocError();
              *(_QWORD *)v27 = 0xD000000000000010;
              *(_QWORD *)(v27 + 8) = 0x80000001AF3F1D30;
LABEL_30:
              *(_DWORD *)(v27 + 16) = v26;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }
LABEL_91:
            __break(1u);
            return result;
          }
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
      }
      else
      {
LABEL_88:
        __break(1u);
      }
      __break(1u);
      goto LABEL_90;
    }
  }
LABEL_32:
  sub_1AF3478BC(v6 + 96, (uint64_t)v69, &qword_1EEE3B8A0);
  sub_1AF3478BC((uint64_t)v69, (uint64_t)&v79, &qword_1EEE3B8A0);
  if (v79)
  {
    if (*(_QWORD *)(v79 + 16))
    {
      v28 = *(_QWORD *)(v79 + 32);
      swift_bridgeObjectRetain();
      sub_1AF3A24FC(v28);
      result = swift_bridgeObjectRelease();
      if (v5)
        return result;
    }
  }
  sub_1AF3478BC(v6 + 80, (uint64_t)v68, &qword_1EEE3B8A8);
  sub_1AF3478BC((uint64_t)v68, (uint64_t)v73, &qword_1EEE3B8A8);
  if (v73[0] != 2)
  {
    result = sub_1AF3A2768(v73[0] & 1, v74);
    if (v5)
      return result;
  }
  sub_1AF3478BC(v6 + 104, (uint64_t)v67, &qword_1EEE3B8B0);
  sub_1AF3478BC((uint64_t)v67, (uint64_t)v75, &qword_1EEE3B8B0);
  if ((v76 & 1) == 0)
  {
    result = sub_1AF3A2DD4(0, v75[0], v75[1]);
    if (v5)
      return result;
  }
  sub_1AF3478BC(v6 + 128, (uint64_t)v66, &qword_1EEE3B8B0);
  sub_1AF3478BC((uint64_t)v66, (uint64_t)v77, &qword_1EEE3B8B0);
  if ((v78 & 1) == 0)
  {
    result = sub_1AF3A2DD4(1, v77[0], v77[1]);
    if (v5)
      return result;
  }
  if ((kperf_sample_set() & 0x80000000) != 0)
  {
    v56 = MEMORY[0x1AF45C330]();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *(_QWORD *)v57 = 0xD000000000000014;
    *(_QWORD *)(v57 + 8) = 0x80000001AF3F1E50;
    *(_DWORD *)(v57 + 16) = v56;
    goto LABEL_44;
  }
LABEL_42:
  v29 = sub_1AF3E7910() + 32;
  swift_bridgeObjectRetain();
  v30 = ktrace_session_provide(_:_:_:_:_:)(a1, v29, MEMORY[0x1E0DEE9E0], a2, 2);
  swift_release();
  if (v30)
  {
    swift_arrayDestroy();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v31 = 0x6465726975716552;
    v31[1] = 0xE800000000000000;
LABEL_44:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  swift_bridgeObjectRelease();
  v32 = sub_1AF3B58BC((uint64_t)&unk_1E5F6D4F8);
  swift_arrayDestroy();
  v33 = *(_QWORD *)(v6 + 152);
  if (v33)
  {
    v65 = *(_QWORD *)(v33 + 16);
    if (v65)
    {
      v60 = a1;
      v62 = a2;
      v59 = a3 & 1;
      v63 = v32 + 56;
      v64 = v33 + 32;
      swift_bridgeObjectRetain();
      v34 = 0;
      while (1)
      {
        v35 = (uint64_t *)(v64 + 32 * v34);
        v36 = *v35;
        v37 = v35[1];
        v38 = (void *)v35[2];
        if (*(_QWORD *)(v32 + 16))
        {
          sub_1AF3E80D8();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          sub_1AF3E7940();
          v39 = sub_1AF3E8114();
          v40 = -1 << *(_BYTE *)(v32 + 32);
          v41 = v39 & ~v40;
          if (((*(_QWORD *)(v63 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
          {
            v42 = *(_QWORD *)(v32 + 48);
            v43 = (_QWORD *)(v42 + 16 * v41);
            v44 = *v43 == v36 && v43[1] == v37;
            if (v44 || (sub_1AF3E8030() & 1) != 0)
            {
LABEL_50:
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }
            v45 = ~v40;
            v46 = (v41 + 1) & v45;
            if (((*(_QWORD *)(v63 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
            {
              v47 = (_QWORD *)(v42 + 16 * v46);
              v48 = *v47 == v36 && v47[1] == v37;
              if (v48 || (sub_1AF3E8030() & 1) != 0)
                goto LABEL_50;
              v49 = v46 + 1;
              v50 = v45;
              for (i = v49 & v45; ((*(_QWORD *)(v63 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v50)
              {
                v52 = (_QWORD *)(v42 + 16 * i);
                v53 = *v52 == v36 && v52[1] == v37;
                if (v53 || (sub_1AF3E8030() & 1) != 0)
                  goto LABEL_50;
              }
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v54 = sub_1AF3E7910();
        v55 = ktrace_session_provide(_:_:_:_:_:)(v60, v54 + 32, v38, v62, v59);
        swift_release();
        if (v55)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for KTraceRecordError();
          sub_1AF3910EC();
          swift_allocError();
          *v58 = v36;
          v58[1] = v37;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
LABEL_51:
        ++v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v34 == v65)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1AF3A4030(uint64_t a1)
{
  _QWORD *result;
  int v3;
  char v4;
  uint64_t v5;

  result = (_QWORD *)sub_1AF3B3B3C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_QWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_1AF3B3BC4(&v5, (uint64_t)result, v3, 0, a1);
}

uint64_t sub_1AF3A40B8(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_1AF3B420C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_1AF3B5950(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

unint64_t sub_1AF3A4134(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAB8);
  v2 = (_QWORD *)sub_1AF3E7F10();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1AF396870(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1AF3A4254(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64[8];
  _BYTE v65[24];
  _BYTE v66[16];
  char v67[8];
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  char v71[16];
  _BYTE v72[32];
  uint64_t v73;

  v6 = v5;
  v7 = (char *)v4;
  v8 = a1;
  if ((a4 & 1) == 0)
  {
    sub_1AF3478BC(a1 + 64, (uint64_t)v68, &qword_1EEE3B8B8);
    sub_1AF3478BC((uint64_t)v68, (uint64_t)&v69, &qword_1EEE3B8B8);
    if (v69 && *(_QWORD *)(v69 + 16)
      || (sub_1AF3478BC(v8 + 72, (uint64_t)v67, &qword_1EEE3B8C0),
          sub_1AF3478BC((uint64_t)v67, (uint64_t)&v70, &qword_1EEE3B8C0),
          v70)
      && *(_QWORD *)(v70 + 16)
      || (sub_1AF3478BC(v8 + 80, (uint64_t)v66, &qword_1EEE3B8A8),
          sub_1AF3478BC((uint64_t)v66, (uint64_t)v71, &qword_1EEE3B8A8),
          v71[0] != 2)
      || (sub_1AF3478BC(v8, (uint64_t)v65, &qword_1EEE3B898),
          sub_1AF3478BC((uint64_t)v65, (uint64_t)v72, &qword_1EEE3B898),
          (v72[16] & 1) == 0))
    {
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      v23 = v22;
      v62 = 0;
      v63 = 0xE000000000000000;
      sub_1AF3E7DE4();
      sub_1AF3E7970();
      goto LABEL_78;
    }
    goto LABEL_35;
  }
  v9 = *(char **)(v4 + 64);
  if (!v9)
  {
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v4 + 64) = MEMORY[0x1E0DEE9D8];
    v6 = *(char **)(v4 + 72);
    if (v6)
      goto LABEL_4;
LABEL_32:
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v4 + 72) = MEMORY[0x1E0DEE9D8];
    goto LABEL_4;
  }
  v6 = *(char **)(v4 + 72);
  if (!v6)
    goto LABEL_32;
LABEL_4:
  v10 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(a1 + 72))
    v10 = *(_QWORD *)(a1 + 72);
  v54 = a1;
  v55 = v10;
  v59 = *(_QWORD *)(v10 + 16);
  if (v59)
  {
    v11 = *(char **)(a1 + 64);
    swift_bridgeObjectRetain();
    v8 = 0;
    v12 = (uint64_t *)(v55 + 40);
    while (1)
    {
      v13 = *(v12 - 1);
      if (!v11)
        break;
      if ((int64_t)v13 >= *((_QWORD *)v11 + 2))
      {
        swift_bridgeObjectRelease();
LABEL_95:
        type metadata accessor for KTraceRecordError();
        sub_1AF3910EC();
        swift_allocError();
        v42 = v41;
        sub_1AF3E7DE4();
        swift_bridgeObjectRelease();
        v62 = 0x2072656D6974;
        v63 = 0xE600000000000000;
        sub_1AF3E8018();
        sub_1AF3E7970();
        swift_bridgeObjectRelease();
        sub_1AF3E7970();
        sub_1AF3E7970();
        sub_1AF3E7970();
        v61 = v13;
        sub_1AF3E8018();
        sub_1AF3E7970();
        swift_bridgeObjectRelease();
        *v42 = 0x2072656D6974;
        v42[1] = 0xE600000000000000;
        goto LABEL_79;
      }
      if ((v13 & 0x8000000000000000) != 0)
        goto LABEL_119;
      if (*((_QWORD *)v9 + 2) > 0x1EuLL)
        goto LABEL_77;
      if (!v6)
        goto LABEL_133;
      if (*((_QWORD *)v6 + 2) > 7uLL)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1AF3910EC();
        swift_allocError();
        v23 = v36;
        sub_1AF3E7DE4();
        swift_bridgeObjectRelease();
        v62 = 0x2072656D6974;
        v63 = 0xE600000000000000;
        v61 = v8;
        sub_1AF3E8018();
        sub_1AF3E7970();
        swift_bridgeObjectRelease();
        sub_1AF3E7970();
        sub_1AF3E7970();
LABEL_78:
        sub_1AF3E7970();
        v37 = v63;
        *v23 = v62;
        v23[1] = v37;
LABEL_79:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return;
      }
      v14 = *v12;
      v15 = *(_QWORD *)&v11[8 * v13 + 32];
      v9 = (char *)*((_QWORD *)v7 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_1AF3AF6B0(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v17 = *((_QWORD *)v9 + 2);
      v16 = *((_QWORD *)v9 + 3);
      if (v17 >= v16 >> 1)
        v9 = sub_1AF3AF6B0((char *)(v16 > 1), v17 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v17 + 1;
      *(_QWORD *)&v9[8 * v17 + 32] = v15;
      *((_QWORD *)v7 + 8) = v9;
      v18 = *((_QWORD *)v9 + 2);
      v6 = (char *)*((_QWORD *)v7 + 9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1AF3AF8B0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v20 = *((_QWORD *)v6 + 2);
      v19 = *((_QWORD *)v6 + 3);
      if (v20 >= v19 >> 1)
        v6 = sub_1AF3AF8B0((char *)(v19 > 1), v20 + 1, 1, v6);
      ++v8;
      v12 += 2;
      *((_QWORD *)v6 + 2) = v20 + 1;
      v21 = &v6[16 * v20];
      *((_QWORD *)v21 + 4) = v18;
      *((_QWORD *)v21 + 5) = v14;
      v7 = (char *)v58;
      *(_QWORD *)(v58 + 72) = v6;
      if (v59 == v8)
        goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_123;
    goto LABEL_95;
  }
  swift_bridgeObjectRetain();
LABEL_34:
  swift_bridgeObjectRelease();
  v6 = v5;
  v8 = v54;
LABEL_35:
  v12 = &qword_1EEE3B8C8;
  sub_1AF3478BC(v8 + 152, (uint64_t)v64, &qword_1EEE3B8C8);
  sub_1AF3478BC((uint64_t)v64, (uint64_t)&v73, &qword_1EEE3B8C8);
  if (v73)
  {
    v12 = (uint64_t *)*((_QWORD *)v7 + 19);
    if (v12)
      v11 = (char *)*((_QWORD *)v7 + 19);
    else
      v11 = (char *)MEMORY[0x1E0DEE9D8];
    v57 = *(_QWORD *)(v73 + 16);
    if (v57)
    {
      v54 = v8;
      v56 = v73 + 32;
      sub_1AF398928((uint64_t)v64);
      swift_bridgeObjectRetain();
      v8 = 0;
      while (1)
      {
        v25 = v56 + 32 * v8;
        v12 = *(uint64_t **)v25;
        v26 = *(_QWORD *)(v25 + 8);
        v27 = *(_QWORD *)(v25 + 16);
        v13 = *((_QWORD *)v11 + 2);
        v60 = *(_BYTE *)(v25 + 24);
        if (v13)
        {
          if (*((uint64_t **)v11 + 4) == v12 && *((_QWORD *)v11 + 5) == v26)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            v29 = 0;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              goto LABEL_75;
            goto LABEL_70;
          }
          if ((sub_1AF3E8030() & 1) != 0)
          {
            v29 = 0;
            goto LABEL_68;
          }
          v7 = v6;
          if (v13 != 1)
          {
            v6 = v11 + 72;
            v29 = 1;
            while (1)
            {
              v32 = *((uint64_t **)v6 - 1) == v12 && *(_QWORD *)v6 == v26;
              if (v32 || (sub_1AF3E8030() & 1) != 0)
                break;
              v33 = v29 + 1;
              if (__OFADD__(v29, 1))
              {
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                __break(1u);
                goto LABEL_124;
              }
              v6 += 32;
              ++v29;
              if (v33 == v13)
                goto LABEL_51;
            }
            v6 = v7;
            v7 = (char *)v58;
LABEL_68:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v29 & 0x8000000000000000) != 0)
                goto LABEL_120;
            }
            else
            {
LABEL_75:
              v11 = sub_1AF3AF548((uint64_t)v11);
              if ((v29 & 0x8000000000000000) != 0)
                goto LABEL_120;
            }
LABEL_70:
            if (v29 >= *((_QWORD *)v11 + 2))
              goto LABEL_121;
            v34 = &v11[32 * v29];
            v13 = (unint64_t)(v34 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v62 = *((_QWORD *)v34 + 6);
            *((_QWORD *)v34 + 6) = 0x8000000000000000;
            v12 = &v62;
            sub_1AF3ADF2C(v27, (uint64_t)sub_1AF3B4390, 0, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t *__return_ptr, id *, _QWORD *))sub_1AF3A4FF4);
            if (v6)
              goto LABEL_135;
            v6 = 0;
            *(_QWORD *)(v13 + 16) = v62;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v60 & 1) != 0)
            {
              if (v29 >= *((_QWORD *)v11 + 2))
                goto LABEL_122;
              *(_BYTE *)(v13 + 24) = 1;
            }
            goto LABEL_42;
          }
        }
        else
        {
          v7 = v6;
        }
LABEL_51:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_1AF3AF7B0(0, v13 + 1, 1, v11);
        v6 = v7;
        v31 = *((_QWORD *)v11 + 2);
        v30 = *((_QWORD *)v11 + 3);
        v7 = (char *)v58;
        if (v31 >= v30 >> 1)
          v11 = sub_1AF3AF7B0((char *)(v30 > 1), v31 + 1, 1, v11);
        *((_QWORD *)v11 + 2) = v31 + 1;
        v24 = &v11[32 * v31];
        *((_QWORD *)v24 + 4) = v12;
        *((_QWORD *)v24 + 5) = v26;
        *((_QWORD *)v24 + 6) = v27;
        v24[56] = v60;
LABEL_42:
        if (++v8 == v57)
        {
          sub_1AF398950((uint64_t)v64);
          v12 = (uint64_t *)*((_QWORD *)v7 + 19);
          v8 = v54;
          goto LABEL_82;
        }
      }
    }
    swift_bridgeObjectRetain();
LABEL_82:
    swift_bridgeObjectRelease();
    *((_QWORD *)v7 + 19) = v11;
  }
  v11 = *(char **)(v8 + 96);
  if (!v11)
  {
LABEL_117:
    sub_1AF38E83C(*(_QWORD *)(v8 + 160), *(_QWORD *)(v8 + 168));
    return;
  }
  if (!*((_QWORD *)v11 + 2))
  {
    v40 = *((_QWORD *)v7 + 12);
    if (v40)
    {
LABEL_116:
      v62 = v40;
      v52 = swift_bridgeObjectRetain();
      sub_1AF3A4E20(v52);
      *((_QWORD *)v7 + 12) = v62;
      goto LABEL_117;
    }
    goto LABEL_91;
  }
  v13 = *((_QWORD *)v11 + 4);
  v38 = *((_QWORD *)v11 + 5);
  v39 = *((_QWORD *)v11 + 6);
  v6 = (char *)*((_QWORD *)v7 + 12);
  if (!v6 || !*((_QWORD *)v6 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B8D0);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1AF3EB020;
    *(_QWORD *)(v40 + 32) = v13;
    *(_QWORD *)(v40 + 40) = v38;
    *(_QWORD *)(v40 + 48) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v7 + 12) = v40;
LABEL_115:
    if (v40)
      goto LABEL_116;
LABEL_91:
    *((_QWORD *)v7 + 12) = v11;
    swift_bridgeObjectRetain();
    goto LABEL_117;
  }
  v54 = v8;
  v8 = *((_QWORD *)v6 + 4);
  if (v8 != v13)
  {
    if ((a4 & 1) != 0)
    {
      v43 = *((_QWORD *)v7 + 8);
      if (v43)
      {
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_128;
        v44 = *(_QWORD *)(v43 + 16);
        if (v13 >= v44)
          goto LABEL_129;
        if (v8 >= v44)
          goto LABEL_130;
        v45 = *(_QWORD *)(v43 + 32 + 8 * v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v46 = swift_bridgeObjectRetain();
        v47 = sub_1AF3B59A8(v46);
        swift_bridgeObjectRelease();
        v62 = v47;
        v13 = *(_QWORD *)(v45 + 16);
        if (v13)
        {
          for (i = 0; i != v13; ++i)
          {
            v49 = v45 + i;
            sub_1AF3AB6B8(&v61, *(unsigned __int8 *)(v49 + 32));
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v51 = swift_bridgeObjectRetain();
        v12 = (uint64_t *)sub_1AF3B10B4(v51);
        swift_bridgeObjectRelease_n();
        v7 = (char *)v58;
        v6 = *(char **)(v58 + 64);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_131;
        goto LABEL_108;
      }
      goto LABEL_134;
    }
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v50 = 0xD000000000000048;
    v50[1] = 0x80000001AF3F1E70;
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    v8 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (!*((_QWORD *)v6 + 2))
        goto LABEL_125;
    }
    else
    {
LABEL_124:
      v6 = sub_1AF3AF520((uint64_t)v6);
      if (!*((_QWORD *)v6 + 2))
      {
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
    }
    v12 = (uint64_t *)(v6 + 40);
    sub_1AF3E7970();
    *((_QWORD *)v7 + 12) = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (*((_QWORD *)v6 + 2))
        goto LABEL_114;
      goto LABEL_127;
    }
LABEL_126:
    v6 = sub_1AF3AF520((uint64_t)v6);
    if (*((_QWORD *)v6 + 2))
    {
LABEL_114:
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      *((_QWORD *)v7 + 12) = v6;
      v40 = (uint64_t)v6;
      goto LABEL_115;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    v6 = sub_1AF3AF534((uint64_t)v6);
LABEL_108:
    if (v8 >= *((_QWORD *)v6 + 2))
      break;
    *(_QWORD *)&v6[8 * v8 + 32] = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((_QWORD *)v7 + 8) = v6;
    v6 = (char *)*((_QWORD *)v7 + 12);
  }
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  *(_QWORD *)(v13 + 16) = v62;
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_1AF3A4E20(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1AF3AF598((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A4F0C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)sub_1AF3AF7B0((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A4FF4@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AF3A5010(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _BYTE __src[328];
  _BYTE v14[328];
  uint64_t __dst[41];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    memcpy(__dst, (const void *)(*(_QWORD *)(v1 + 48) + 328 * v9), 0x141uLL);
    sub_1AF3B6C90((uint64_t)__dst);
    sub_1AF3ABB68(__src, __dst);
    memcpy(v14, __src, 0x141uLL);
    result = sub_1AF3B6DB0((uint64_t)v14);
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A5198(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD **)(v1 + 72);
  if (v2 && v2[2])
  {
    v4 = v2[4];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v2[2])
      {
LABEL_5:
        v2[4] = v4;
        v2[5] = a1;
        *(_QWORD *)(v1 + 72) = v2;
        return result;
      }
    }
    else
    {
      result = (uint64_t)sub_1AF3AF55C((uint64_t)v2);
      v2 = (_QWORD *)result;
      if (*(_QWORD *)(result + 16))
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

__n128 sub_1AF3A5258@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[11];

  sub_1AF3B5A18(a1, v9);
  if (!v2)
  {
    v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v9[10];
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1AF3A52B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AF3B6558(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AF3A52DC()
{
  sub_1AF34529C();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A5304()
{
  sub_1AF34529C();
  return sub_1AF3E8150();
}

__n128 sub_1AF3A532C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[12];
  uint64_t v11;

  sub_1AF3B66AC(a1, (uint64_t)v10);
  if (!v2)
  {
    v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_QWORD *)(a2 + 192) = v11;
    v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1AF3A53AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AF3A53D8 + 4 * byte_1AF3EB995[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1AF3A53D8()
{
  return 0x6E6F6973726576;
}

unint64_t sub_1AF3A53F0()
{
  return 0xD000000000000010;
}

uint64_t sub_1AF3A540C()
{
  return 0x4E70756F7247646FLL;
}

uint64_t sub_1AF3A542C()
{
  return 0x6168436B63616C73;
}

unint64_t sub_1AF3A544C()
{
  return 0xD000000000000015;
}

uint64_t sub_1AF3A5470()
{
  return 0x736973706F6E7973;
}

uint64_t sub_1AF3A5488()
{
  return 0x746E656D75636F64;
}

uint64_t sub_1AF3A54AC()
{
  return 0x4C746C7561666564;
}

uint64_t sub_1AF3A54D0()
{
  return 0x73726579616CLL;
}

uint64_t sub_1AF3A54E4()
{
  return 0x73676E6974746573;
}

uint64_t sub_1AF3A54FC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AF3A5508(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1AF3A53AC);
}

uint64_t sub_1AF3A5508(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = sub_1AF3E8030();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1AF3A5594(uint64_t a1, uint64_t a2)
{
  return sub_1AF3A55A0(a1, a2, (void (*)(uint64_t))sub_1AF3A53AC);
}

uint64_t sub_1AF3A55A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  sub_1AF3E80D8();
  a3(v5);
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A5604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AF3A5610(a1, a2, a3, (void (*)(_QWORD))sub_1AF3A53AC);
}

uint64_t sub_1AF3A5610(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  sub_1AF3E7940();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF3A5650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1AF3A565C(a1, a2, a3, (void (*)(uint64_t))sub_1AF3A53AC);
}

uint64_t sub_1AF3A565C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  sub_1AF3E80D8();
  a4(v6);
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A56BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AF3B6A44();
  *a1 = result;
  return result;
}

uint64_t sub_1AF3A56F0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1AF3A53AC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1AF3A5718@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AF3B6A44();
  *a1 = result;
  return result;
}

uint64_t sub_1AF3A5744()
{
  sub_1AF348130();
  return sub_1AF3E8144();
}

uint64_t sub_1AF3A576C()
{
  sub_1AF348130();
  return sub_1AF3E8150();
}

_QWORD *sub_1AF3A5794()
{
  const void *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD __dst[41];

  memcpy(__dst, v0, 0x141uLL);
  sub_1AF3B6C90((uint64_t)__dst);
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1AF3B6A88(v1, (uint64_t)__dst);
  sub_1AF3B6DB0((uint64_t)__dst);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1AF3A5804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v0 = sub_1AF3E7568();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v13 - v6;
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v13 - v9;
  __swift_allocate_value_buffer(v8, qword_1EEE41258);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEE41258);
  sub_1AF3E7538();
  sub_1AF3E7550();
  sub_1AF3E755C();
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v7, v0);
  sub_1AF3E7544();
  sub_1AF3E755C();
  v11(v7, v0);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v0);
}

uint64_t sub_1AF3A593C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = *v0;
  v1 = v0[1];
  v3 = *((_BYTE *)v0 + 128);
  v4 = v0[22];
  v5 = v0[23];
  v6 = v0[26];
  if (qword_1EEE3CE90 != -1)
    swift_once();
  v7 = sub_1AF3E7568();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EEE41258);
  sub_1AF347C60();
  sub_1AF3E7CA0();
  if ((v8 & 1) == 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v9 = 1701667182;
    v9[1] = 0xE400000000000000;
    v9[2] = v2;
    v9[3] = v1;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  if ((v3 & 1) != 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v10 = 0xD00000000000002FLL;
    v10[1] = 0x80000001AF3F1F50;
LABEL_21:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  if (v4 && *(_QWORD *)(v4 + 16) >= 0x20uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v12 = 0x63615F667265706BLL;
    v13 = 0xED0000736E6F6974;
LABEL_13:
    *v11 = v12;
    v11[1] = v13;
    v14 = 31;
LABEL_17:
    v11[2] = v14;
    goto LABEL_21;
  }
  if (v5 && *(_QWORD *)(v5 + 16) >= 9uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v12 = 0x69745F667265706BLL;
    v13 = 0xEC0000007372656DLL;
    goto LABEL_13;
  }
  if (v6 && *(_QWORD *)(v6 + 16) >= 2uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v11 = 0xD000000000000015;
    v11[1] = 0x80000001AF3F1F80;
    v14 = 1;
    goto LABEL_17;
  }
  if (sub_1AF3E794C() > 79 || (result = sub_1AF3E794C()) == 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v17 = v16;
    swift_bridgeObjectRetain();
    v18 = sub_1AF3E794C();
    *v17 = v2;
    v17[1] = v1;
    v17[2] = v18;
    goto LABEL_21;
  }
  return result;
}

void *sub_1AF3A5C84@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[321];
  _BYTE v12[328];
  _BYTE v13[321];
  void *v14;

  v3 = sub_1AF3E74C0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = (void *)sub_1AF3E76AC();
  if (!v1)
  {
    v9 = (uint64_t)result;
    v10 = v8;
    v14 = a1;
    sub_1AF3E74F0();
    swift_allocObject();
    sub_1AF3E74E4();
    sub_1AF3E74B4();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0CADFF8], v3);
    sub_1AF3E74CC();
    sub_1AF3B6ECC();
    sub_1AF3E74D8();
    memcpy(v12, v13, 0x141uLL);
    memcpy(v11, v13, sizeof(v11));
    sub_1AF3B6C90((uint64_t)v12);
    sub_1AF3A593C();
    sub_1AF3B6DB0((uint64_t)v12);
    sub_1AF3A5E8C();
    swift_release();
    sub_1AF33C310(v9, v10);
    return memcpy(v14, v13, 0x141uLL);
  }
  return result;
}

uint64_t sub_1AF3A5E8C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD v31[4];
  _BYTE v32[200];
  _BYTE v33[208];
  uint64_t v34;

  v2 = *v0;
  v3 = v0[1];
  swift_bridgeObjectRetain();
  sub_1AF3A36D4(v2, v3);
  result = swift_bridgeObjectRelease();
  if (v1)
    return result;
  v5 = v0[37];
  v6 = *(_QWORD *)(v5 + 64);
  v29 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v30 = (unint64_t)(v7 + 63) >> 6;
  v34 = v0[37];
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v10 >= v30)
      return swift_release();
    v14 = *(_QWORD *)(v29 + 8 * v10);
    if (!v14)
      break;
LABEL_23:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_24:
    v16 = (uint64_t *)(*(_QWORD *)(v34 + 48) + 16 * v12);
    v18 = *v16;
    v17 = v16[1];
    swift_bridgeObjectRetain_n();
    v19 = sub_1AF3AFE98(v31, v18, v17);
    v21 = (_QWORD *)v20;
    sub_1AF3478BC(v20, (uint64_t)v32, &qword_1EEE3B988);
    sub_1AF3478BC((uint64_t)v32, (uint64_t)v33, &qword_1EEE3B988);
    result = sub_1AF3B6F10((uint64_t)v33);
    if ((_DWORD)result == 1)
      goto LABEL_38;
    v22 = v21[7];
    if (v22)
    {
      v23 = v21[6];
      swift_bridgeObjectRetain();
      v24 = sub_1AF38D8B0(v23, v22);
      sub_1AF38DB48(v24);
      swift_bridgeObjectRelease();
      v25 = v21[9];
      if (v25)
      {
        v26 = v21[8];
        swift_bridgeObjectRetain();
        v27 = sub_1AF38D8B0(v26, v25);
        sub_1AF38DB48(v27);
        swift_bridgeObjectRelease();
      }
    }
    else if (v21[9])
    {
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      *v28 = v18;
      v28[1] = v17;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      ((void (*)(_QWORD *, _QWORD))v19)(v31, 0);
      swift_release();
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    ((void (*)(_QWORD *, _QWORD))v19)(v31, 0);
    result = swift_bridgeObjectRelease_n();
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v30)
    return swift_release();
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_22;
  v15 = v10 + 2;
  if (v10 + 2 >= v30)
    return swift_release();
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_22;
  v15 = v10 + 3;
  if (v10 + 3 >= v30)
    return swift_release();
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_22;
  v15 = v10 + 4;
  if (v10 + 4 >= v30)
    return swift_release();
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_22;
  v15 = v10 + 5;
  if (v10 + 5 >= v30)
    return swift_release();
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
  {
LABEL_22:
    v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v30)
      return swift_release();
    v14 = *(_QWORD *)(v29 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A620C(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = sub_1AF3B754C(a1, a2, a3, a4);
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1AF3A6230(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t i;
  BOOL v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  int v70;
  int v71;
  char v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64_t j;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  int64_t v108;
  unint64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  char v124;
  unint64_t v125;
  char v126;
  uint64_t *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  _QWORD *v135;
  BOOL v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int64_t v157;
  uint64_t k;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  int64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  int64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  uint64_t v193;
  uint64_t *v194;
  int64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v208;
  int64_t v209;
  _QWORD *v210;
  int64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v232;
  int64_t v233;
  uint64_t v234;
  int64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  int64_t v243;
  uint64_t v244;
  __int128 v245;
  _BYTE v246[184];
  _OWORD v247[12];

  v8 = *(_QWORD *)(v4 + 296);
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1AF3A1A44(v9);
  swift_bridgeObjectRelease();
  v224 = sub_1AF3B58BC(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1AF3B7BEC(v8, a1, a2);
  swift_bridgeObjectRelease();
  v218 = a1;
  swift_bridgeObjectRelease();
  v214 = a2;
  swift_bridgeObjectRelease();
  v12 = 0;
  v13 = *(_QWORD *)(v11 + 64);
  v227 = v11 + 64;
  v240 = v4;
  v241 = v11;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v233 = (unint64_t)(v14 + 63) >> 6;
  v237 = (_QWORD *)(v4 + 112);
  if ((v15 & v13) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v18 = (v16 - 1) & v16;
  for (i = v17 | (v12 << 6); ; i = __clz(__rbit64(v21)) + (v12 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v241 + 48) + 16 * i);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v241 + 56) + 200 * i;
    v27 = *(_OWORD *)(v26 + 16);
    v28 = *(_OWORD *)(v26 + 32);
    v29 = *(_OWORD *)(v26 + 64);
    *(_OWORD *)&v246[32] = *(_OWORD *)(v26 + 48);
    *(_OWORD *)&v246[48] = v29;
    *(_OWORD *)v246 = v27;
    *(_OWORD *)&v246[16] = v28;
    v30 = *(_OWORD *)(v26 + 80);
    v31 = *(_OWORD *)(v26 + 96);
    v32 = *(_OWORD *)(v26 + 128);
    *(_OWORD *)&v246[96] = *(_OWORD *)(v26 + 112);
    *(_OWORD *)&v246[112] = v32;
    *(_OWORD *)&v246[64] = v30;
    *(_OWORD *)&v246[80] = v31;
    v33 = *(_OWORD *)(v26 + 144);
    v34 = *(_OWORD *)(v26 + 160);
    v35 = *(_OWORD *)(v26 + 176);
    *(_QWORD *)&v246[176] = *(_QWORD *)(v26 + 192);
    *(_OWORD *)&v246[144] = v34;
    *(_OWORD *)&v246[160] = v35;
    *(_OWORD *)&v246[128] = v33;
    v245 = *(_OWORD *)v26;
    v247[8] = *(_OWORD *)&v246[136];
    v247[9] = *(_OWORD *)&v246[152];
    v247[10] = *(_OWORD *)&v246[168];
    v247[4] = *(_OWORD *)&v246[72];
    v247[5] = *(_OWORD *)&v246[88];
    v247[6] = *(_OWORD *)&v246[104];
    v247[7] = *(_OWORD *)&v246[120];
    v247[0] = *(_OWORD *)&v246[8];
    v247[1] = *(_OWORD *)&v246[24];
    v247[2] = *(_OWORD *)&v246[40];
    v247[3] = *(_OWORD *)&v246[56];
    swift_bridgeObjectRetain();
    sub_1AF3B7E08((uint64_t)&v245);
    v36 = v237;
    sub_1AF3A4254((uint64_t)v247, v25, v24, a3 & 1);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AF3B7EB0((uint64_t)&v245);
      swift_release();
      return (uint64_t)v36;
    }
    v37 = v18;
    v38 = *(char **)(v240 + 312);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = sub_1AF3413B8(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
    v40 = *((_QWORD *)v38 + 2);
    v39 = *((_QWORD *)v38 + 3);
    if (v40 >= v39 >> 1)
      v38 = sub_1AF3413B8((char *)(v39 > 1), v40 + 1, 1, v38);
    *((_QWORD *)v38 + 2) = v40 + 1;
    v41 = &v38[16 * v40];
    *((_QWORD *)v41 + 4) = v25;
    *((_QWORD *)v41 + 5) = v24;
    sub_1AF3B7EB0((uint64_t)&v245);
    *(_QWORD *)(v240 + 312) = v38;
    v16 = v37;
    if (v37)
      goto LABEL_4;
LABEL_5:
    v20 = __OFADD__(v12++, 1);
    if (v20)
    {
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
      goto LABEL_233;
    }
    if (v12 >= v233)
      goto LABEL_28;
    v21 = *(_QWORD *)(v227 + 8 * v12);
    if (!v21)
      break;
LABEL_15:
    v18 = (v21 - 1) & v21;
  }
  v22 = v12 + 1;
  if (v12 + 1 >= v233)
    goto LABEL_28;
  v21 = *(_QWORD *)(v227 + 8 * v22);
  if (v21)
    goto LABEL_14;
  v22 = v12 + 2;
  if (v12 + 2 >= v233)
    goto LABEL_28;
  v21 = *(_QWORD *)(v227 + 8 * v22);
  if (v21)
  {
LABEL_14:
    v12 = v22;
    goto LABEL_15;
  }
  v22 = v12 + 3;
  if (v12 + 3 < v233)
  {
    v21 = *(_QWORD *)(v227 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        v12 = v22 + 1;
        if (__OFADD__(v22, 1))
          break;
        if (v12 >= v233)
          goto LABEL_28;
        v21 = *(_QWORD *)(v227 + 8 * v12);
        ++v22;
        if (v21)
          goto LABEL_15;
      }
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    goto LABEL_14;
  }
LABEL_28:
  v222 = v5;
  swift_release();
  v42 = *(_QWORD *)(v240 + 264);
  if (v42)
  {
    v43 = *(_QWORD *)(v42 + 16);
    v44 = MEMORY[0x1E0DEE9D8];
    if (v43)
    {
      *(_QWORD *)&v245 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1AF38FDBC(0, v43, 0);
      v44 = v245;
      v45 = v42;
      v46 = (uint64_t *)(v42 + 40);
      do
      {
        v48 = *(v46 - 1);
        v47 = *v46;
        *(_QWORD *)&v245 = v44;
        v50 = *(_QWORD *)(v44 + 16);
        v49 = *(_QWORD *)(v44 + 24);
        swift_bridgeObjectRetain();
        if (v50 >= v49 >> 1)
        {
          sub_1AF38FDBC((char *)(v49 > 1), v50 + 1, 1);
          v44 = v245;
        }
        v46 += 4;
        *(_QWORD *)(v44 + 16) = v50 + 1;
        v51 = v44 + 16 * v50;
        *(_QWORD *)(v51 + 32) = v48;
        *(_QWORD *)(v51 + 40) = v47;
        --v43;
      }
      while (v43);
      v42 = v45;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v44 = MEMORY[0x1E0DEE9D8];
  }
  v52 = sub_1AF3B58BC(v44);
  swift_bridgeObjectRelease();
  v53 = v214;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = swift_bridgeObjectRetain();
  v55 = sub_1AF3A76F8(v54, v224);
  if (*(_QWORD *)(v55 + 16) <= *(_QWORD *)(v214 + 16) >> 3)
  {
    *(_QWORD *)&v245 = v214;
    sub_1AF3B07AC(v55);
    v53 = v214;
    swift_bridgeObjectRelease();
    v56 = v245;
    if (!*(_QWORD *)(v245 + 16))
      goto LABEL_42;
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v58 = v57;
    *(_QWORD *)&v245 = v56;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B990);
    sub_1AF3B82B0((unint64_t *)&qword_1EEE3B998, &qword_1EEE3B990, MEMORY[0x1E0DEB3D0]);
    sub_1AF347C60();
    v36 = (_QWORD *)sub_1AF3E7A6C();
    v60 = v59;
    swift_bridgeObjectRelease();
    *v58 = v36;
    v58[1] = v60;
    swift_storeEnumTagMultiPayload();
LABEL_39:
    swift_willThrow();
    return (uint64_t)v36;
  }
  v56 = sub_1AF3B0940(v55, v214);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v56 + 16))
    goto LABEL_38;
LABEL_42:
  swift_bridgeObjectRelease();
  v62 = MEMORY[0x1E0DEE9D8];
  if (v42)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63 = swift_bridgeObjectRetain();
    v62 = sub_1AF3B7F58(v63, v218, v53);
    v64 = v222;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v64 = v222;
  }
  swift_bridgeObjectRetain();
  v65 = sub_1AF3A76F8(v224, v52);
  v228 = v62;
  if (*(_QWORD *)(v65 + 16) <= *(_QWORD *)(v218 + 16) >> 3)
  {
    *(_QWORD *)&v245 = v218;
    sub_1AF3B07AC(v65);
    swift_bridgeObjectRelease();
    v66 = v245;
    v67 = *(_QWORD *)(v245 + 16);
    if (v67)
      goto LABEL_47;
    goto LABEL_57;
  }
  v66 = sub_1AF3B0940(v65, v218);
  swift_bridgeObjectRelease();
  v67 = *(_QWORD *)(v66 + 16);
  if (!v67)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    v68 = MEMORY[0x1E0DEE9D8];
    goto LABEL_58;
  }
LABEL_47:
  v219 = v42;
  v223 = v64;
  *(_QWORD *)&v245 = MEMORY[0x1E0DEE9D8];
  v225 = v66;
  sub_1AF3AB0C0(0, v67, 0);
  v68 = v245;
  v69 = sub_1AF3B420C(v66);
  v71 = v70;
  v73 = v72 & 1;
  v234 = v66 + 56;
  do
  {
    if (v69 < 0 || v69 >= 1 << *(_BYTE *)(v66 + 32))
      goto LABEL_230;
    if (((*(_QWORD *)(v234 + (((unint64_t)v69 >> 3) & 0xFFFFFFFFFFFFF8)) >> v69) & 1) == 0)
      goto LABEL_231;
    if (*(_DWORD *)(v66 + 36) != v71)
      goto LABEL_232;
    v242 = v73;
    v74 = (uint64_t *)(*(_QWORD *)(v66 + 48) + 16 * v69);
    v75 = v74[1];
    v238 = *v74;
    swift_bridgeObjectRetain();
    v76 = sub_1AF3A4134(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)&v245 = v68;
    v78 = *(_QWORD *)(v68 + 16);
    v77 = *(_QWORD *)(v68 + 24);
    if (v78 >= v77 >> 1)
    {
      sub_1AF3AB0C0((char *)(v77 > 1), v78 + 1, 1);
      v66 = v225;
      v68 = v245;
    }
    *(_QWORD *)(v68 + 16) = v78 + 1;
    v79 = v68 + 32 * v78;
    *(_QWORD *)(v79 + 32) = v238;
    *(_QWORD *)(v79 + 40) = v75;
    *(_QWORD *)(v79 + 48) = v76;
    *(_BYTE *)(v79 + 56) = 0;
    v80 = sub_1AF3B42AC(v69, v71, v242 & 1, v66);
    v69 = v80;
    v71 = v81;
    v73 = v82 & 1;
    --v67;
  }
  while (v67);
  sub_1AF3B82A4(v80, v81, v73);
  swift_bridgeObjectRelease();
  v42 = v219;
  v64 = v223;
LABEL_58:
  v83 = MEMORY[0x1E0DEE9D8];
  if (v42)
    v83 = v42;
  v220 = v83;
  *(_QWORD *)&v245 = v228;
  swift_bridgeObjectRetain();
  sub_1AF3A4F0C(v68);
  v84 = v245;
  v203 = *(_QWORD *)(v245 + 16);
  if (v203)
  {
    v85 = 0;
    v204 = v245 + 32;
    v202 = v245;
    while (1)
    {
      if (v85 >= *(_QWORD *)(v84 + 16))
        goto LABEL_241;
      v87 = (uint64_t *)(v204 + 32 * v85);
      v89 = *v87;
      v88 = v87[1];
      v36 = (_QWORD *)v87[2];
      swift_bridgeObjectRetain();
      v210 = v36;
      swift_bridgeObjectRetain();
      v212 = v89;
      v226 = v88;
      v90 = sub_1AF3B754C(v89, v88, a3 & 1, a4);
      v239 = v93;
      if (v64)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_215:
        swift_bridgeObjectRelease();
        return (uint64_t)v36;
      }
      if (!v91)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_1AF3910EC();
        swift_allocError();
        *v194 = v89;
        v194[1] = v88;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_215;
      }
      v94 = v92;
      v206 = v90;
      v95 = v91;
      v96 = *(char **)(v240 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v215 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v96 = sub_1AF3413B8(0, *((_QWORD *)v96 + 2) + 1, 1, v96);
      v98 = *((_QWORD *)v96 + 2);
      v97 = *((_QWORD *)v96 + 3);
      if (v98 >= v97 >> 1)
        v96 = sub_1AF3413B8((char *)(v97 > 1), v98 + 1, 1, v96);
      v216 = v215 + 1;
      v205 = v94 & 1;
      *((_QWORD *)v96 + 2) = v98 + 1;
      v99 = &v96[16 * v98];
      v36 = v210;
      *((_QWORD *)v99 + 4) = v89;
      *((_QWORD *)v99 + 5) = v226;
      *(_QWORD *)(v240 + 312) = v96;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v245 = v210;
      v229 = v239 + 64;
      v101 = 1 << *(_BYTE *)(v239 + 32);
      v102 = v101 < 64 ? ~(-1 << v101) : -1;
      v103 = v102 & *(_QWORD *)(v239 + 64);
      v235 = (unint64_t)(v101 + 63) >> 6;
      swift_bridgeObjectRetain();
      for (j = 0; ; j = v243)
      {
        if (v103)
        {
          v106 = __clz(__rbit64(v103));
          v103 &= v103 - 1;
          v243 = j;
          v107 = v106 | (j << 6);
          goto LABEL_95;
        }
        v108 = j + 1;
        if (__OFADD__(j, 1))
        {
          __break(1u);
          goto LABEL_227;
        }
        if (v108 >= v235)
          goto LABEL_106;
        v109 = *(_QWORD *)(v229 + 8 * v108);
        v110 = j + 1;
        if (!v109)
        {
          v110 = j + 2;
          if (j + 2 >= v235)
            goto LABEL_106;
          v109 = *(_QWORD *)(v229 + 8 * v110);
          if (!v109)
          {
            v110 = j + 3;
            if (j + 3 >= v235)
              goto LABEL_106;
            v109 = *(_QWORD *)(v229 + 8 * v110);
            if (!v109)
            {
              v110 = j + 4;
              if (j + 4 >= v235)
                goto LABEL_106;
              v109 = *(_QWORD *)(v229 + 8 * v110);
              if (!v109)
                break;
            }
          }
        }
LABEL_94:
        v103 = (v109 - 1) & v109;
        v243 = v110;
        v107 = __clz(__rbit64(v109)) + (v110 << 6);
LABEL_95:
        v112 = 16 * v107;
        v113 = (uint64_t *)(*(_QWORD *)(v239 + 48) + v112);
        v115 = *v113;
        v114 = v113[1];
        v116 = (uint64_t *)(*(_QWORD *)(v239 + 56) + v112);
        v118 = *v116;
        v117 = v116[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v120 = sub_1AF396870(v115, v114);
        v121 = v36[2];
        v122 = (v119 & 1) == 0;
        v123 = v121 + v122;
        if (__OFADD__(v121, v122))
        {
          __break(1u);
          goto LABEL_223;
        }
        v124 = v119;
        if (v36[3] >= v123)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v36 = (_QWORD *)v245;
            if ((v119 & 1) != 0)
              goto LABEL_75;
          }
          else
          {
            sub_1AF3AEF6C();
            v36 = (_QWORD *)v245;
            if ((v124 & 1) != 0)
              goto LABEL_75;
          }
        }
        else
        {
          sub_1AF3AE6FC(v123, isUniquelyReferenced_nonNull_native & 1);
          v125 = sub_1AF396870(v115, v114);
          if ((v124 & 1) != (v126 & 1))
            goto LABEL_250;
          v120 = v125;
          v36 = (_QWORD *)v245;
          if ((v124 & 1) != 0)
          {
LABEL_75:
            swift_bridgeObjectRelease();
            v105 = (_QWORD *)(v36[7] + 16 * v120);
            swift_bridgeObjectRelease();
            *v105 = v118;
            v105[1] = v117;
            goto LABEL_76;
          }
        }
        v36[(v120 >> 6) + 8] |= 1 << v120;
        v127 = (uint64_t *)(v36[6] + 16 * v120);
        *v127 = v115;
        v127[1] = v114;
        v128 = (_QWORD *)(v36[7] + 16 * v120);
        *v128 = v118;
        v128[1] = v117;
        v129 = v36[2];
        v20 = __OFADD__(v129, 1);
        v130 = v129 + 1;
        if (v20)
        {
          __break(1u);
LABEL_225:
          swift_bridgeObjectRelease();
          return MEMORY[0x1E0DEE9D8];
        }
        v36[2] = v130;
LABEL_76:
        isUniquelyReferenced_nonNull_native = 1;
      }
      v111 = j + 5;
      if (j + 5 < v235)
        break;
LABEL_106:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v131 = *(_QWORD *)(v220 + 16);
      if (!v131)
        goto LABEL_124;
      if (*(_QWORD *)(v220 + 32) == v212 && *(_QWORD *)(v220 + 40) == v226 || (sub_1AF3E8030() & 1) != 0)
      {
        v132 = 0;
        goto LABEL_111;
      }
      if (v131 == 1)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v138 = (char *)v220;
          v64 = 0;
        }
        else
        {
          v138 = sub_1AF3AF7B0(0, *(_QWORD *)(v220 + 16) + 1, 1, (char *)v220);
          v64 = 0;
        }
        v140 = *((_QWORD *)v138 + 2);
        v139 = *((_QWORD *)v138 + 3);
        if (v140 >= v139 >> 1)
          v138 = sub_1AF3AF7B0((char *)(v139 > 1), v140 + 1, 1, v138);
        *((_QWORD *)v138 + 2) = v140 + 1;
        v220 = (uint64_t)v138;
        v86 = &v138[32 * v140];
        *((_QWORD *)v86 + 4) = v206;
        *((_QWORD *)v86 + 5) = v95;
        *((_QWORD *)v86 + 6) = v36;
        v86[56] = v205;
      }
      else
      {
        v135 = (_QWORD *)(v220 + 72);
        v132 = 1;
        while (1)
        {
          v136 = *(v135 - 1) == v212 && *v135 == v226;
          if (v136 || (sub_1AF3E8030() & 1) != 0)
            break;
          v137 = v132 + 1;
          if (__OFADD__(v132, 1))
            goto LABEL_243;
          v135 += 4;
          ++v132;
          if (v137 == v131)
            goto LABEL_124;
        }
LABEL_111:
        v64 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v133 = (char *)v220;
          if ((v132 & 0x8000000000000000) != 0)
            goto LABEL_246;
        }
        else
        {
          v133 = sub_1AF3AF548(v220);
          if ((v132 & 0x8000000000000000) != 0)
            goto LABEL_246;
        }
        if (v132 >= *((_QWORD *)v133 + 2))
        {
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          result = sub_1AF3E806C();
          __break(1u);
          return result;
        }
        v220 = (uint64_t)v133;
        v134 = &v133[32 * v132];
        *((_QWORD *)v134 + 4) = v206;
        *((_QWORD *)v134 + 5) = v95;
        *((_QWORD *)v134 + 6) = v36;
        v134[56] = v205;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v84 = v202;
      v85 = v216;
      if (v216 == v203)
        goto LABEL_131;
    }
    v109 = *(_QWORD *)(v229 + 8 * v111);
    if (!v109)
    {
      while (1)
      {
        v110 = v111 + 1;
        if (__OFADD__(v111, 1))
          break;
        if (v110 >= v235)
          goto LABEL_106;
        v109 = *(_QWORD *)(v229 + 8 * v110);
        ++v111;
        if (v109)
          goto LABEL_94;
      }
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
      goto LABEL_247;
    }
    v110 = j + 5;
    goto LABEL_94;
  }
LABEL_131:
  swift_bridgeObjectRelease();
  v141 = sub_1AF3A4030(*a4);
  if (v142)
  {
    v36 = v141;
    v144 = v142;
    v145 = v143;
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    v147 = v146;
    v148 = sub_1AF3A40B8(v145);
    v150 = v149;
    swift_bridgeObjectRelease();
    v151 = 4144959;
    if (v150)
      v151 = v148;
    v152 = 0xE300000000000000;
    *v147 = v36;
    v147[1] = v144;
    if (v150)
      v152 = v150;
    v147[2] = v151;
    v147[3] = v152;
    swift_storeEnumTagMultiPayload();
    goto LABEL_39;
  }
  v208 = v214 + 56;
  v153 = 1 << *(_BYTE *)(v214 + 32);
  v154 = -1;
  if (v153 < 64)
    v154 = ~(-1 << v153);
  v155 = v154 & *(_QWORD *)(v214 + 56);
  v209 = (unint64_t)(v153 + 63) >> 6;
  v156 = swift_bridgeObjectRetain();
  v157 = 0;
  for (k = v220; ; k = (uint64_t)v177)
  {
    v159 = k;
    if (v155)
    {
      v213 = (v155 - 1) & v155;
      v160 = __clz(__rbit64(v155)) | (v157 << 6);
      goto LABEL_154;
    }
    v20 = __OFADD__(v157++, 1);
    if (v20)
      goto LABEL_248;
    if (v157 >= v209)
      break;
    v161 = *(_QWORD *)(v208 + 8 * v157);
    if (!v161)
    {
      v162 = v157 + 1;
      if (v157 + 1 >= v209)
        break;
      v161 = *(_QWORD *)(v208 + 8 * v162);
      if (!v161)
      {
        v162 = v157 + 2;
        if (v157 + 2 >= v209)
          break;
        v161 = *(_QWORD *)(v208 + 8 * v162);
        if (!v161)
        {
          v162 = v157 + 3;
          if (v157 + 3 >= v209)
            break;
          v161 = *(_QWORD *)(v208 + 8 * v162);
          if (!v161)
          {
            while (1)
            {
              v157 = v162 + 1;
              if (__OFADD__(v162, 1))
                goto LABEL_249;
              if (v157 >= v209)
                goto LABEL_216;
              v161 = *(_QWORD *)(v208 + 8 * v157);
              ++v162;
              if (v161)
                goto LABEL_153;
            }
          }
        }
      }
      v157 = v162;
    }
LABEL_153:
    v213 = (v161 - 1) & v161;
    v160 = __clz(__rbit64(v161)) + (v157 << 6);
LABEL_154:
    v163 = (uint64_t *)(*(_QWORD *)(v156 + 48) + 16 * v160);
    v164 = *(_QWORD *)(k + 16);
    if (!v164)
    {
      swift_bridgeObjectRetain();
      v167 = 0;
      v168 = 0;
      goto LABEL_168;
    }
    v165 = *v163;
    v166 = *(_QWORD *)(k + 32) == *v163 && *(_QWORD *)(k + 40) == v163[1];
    v244 = v163[1];
    if (v166)
    {
      v211 = v157;
      v167 = 0;
    }
    else if ((sub_1AF3E8030() & 1) != 0)
    {
      v211 = v157;
      v167 = 0;
    }
    else
    {
      if (v164 == 1)
      {
        v168 = *(_QWORD *)(k + 16);
        swift_bridgeObjectRetain();
        if (!v168)
          goto LABEL_238;
        v167 = 1;
        goto LABEL_168;
      }
      v191 = (_QWORD *)(k + 72);
      v167 = 1;
      v211 = v157;
      while (*(v191 - 1) != v165 || *v191 != v244)
      {
        if ((sub_1AF3E8030() & 1) != 0)
        {
          k = v159;
          break;
        }
        v193 = v167 + 1;
        if (__OFADD__(v167, 1))
          goto LABEL_242;
        k = v159;
        v191 += 4;
        ++v167;
        if (v193 == v164)
        {
          v167 = v164;
          goto LABEL_165;
        }
      }
    }
    v169 = v167 + 1;
    v170 = v244;
    if (__OFADD__(v167, 1))
      goto LABEL_244;
    if (v169 != v164)
    {
      swift_bridgeObjectRetain();
      v180 = 32 * v167 + 64;
      v181 = v167 + 1;
      while ((v169 & 0x8000000000000000) == 0)
      {
        v182 = *(_QWORD *)(k + 16);
        if (v181 >= v182)
          goto LABEL_229;
        if (*(_QWORD *)(k + v180) != v165 || *(_QWORD *)(k + v180 + 8) != v170)
        {
          v184 = (char *)k;
          if ((sub_1AF3E8030() & 1) == 0)
          {
            if (v181 != v167)
            {
              if (v167 >= v182)
                goto LABEL_236;
              v185 = k + 32 + 32 * v167;
              v221 = *(_QWORD *)v185;
              v186 = *(_QWORD *)(v185 + 16);
              v217 = *(_BYTE *)(v185 + 24);
              v236 = *(_QWORD *)(k + v180);
              v187 = *(_QWORD *)(k + v180 + 8);
              v188 = *(_QWORD *)(k + v180 + 16);
              v232 = *(_BYTE *)(k + v180 + 24);
              v230 = *(_QWORD *)(v185 + 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v184 = sub_1AF3AF548(k);
              v189 = &v184[32 * v167];
              *((_QWORD *)v189 + 4) = v236;
              *((_QWORD *)v189 + 5) = v187;
              *((_QWORD *)v189 + 6) = v188;
              v189[56] = v232;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v181 >= *((_QWORD *)v184 + 2))
                goto LABEL_237;
              v190 = &v184[v180];
              *(_QWORD *)v190 = v221;
              *((_QWORD *)v190 + 1) = v230;
              *((_QWORD *)v190 + 2) = v186;
              v190[24] = v217;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v170 = v244;
            }
            v20 = __OFADD__(v167++, 1);
            if (v20)
              goto LABEL_234;
          }
          k = (uint64_t)v184;
        }
        ++v181;
        v180 += 32;
        if (v181 == *(_QWORD *)(k + 16))
          goto LABEL_166;
      }
      goto LABEL_228;
    }
LABEL_165:
    swift_bridgeObjectRetain();
LABEL_166:
    v168 = *(_QWORD *)(k + 16);
    v157 = v211;
    if (v168 < v167)
      goto LABEL_238;
    if (v167 < 0)
      goto LABEL_239;
LABEL_168:
    v171 = v167 - v168;
    if (__OFADD__(v168, v167 - v168))
      goto LABEL_240;
    v172 = (char *)swift_isUniquelyReferenced_nonNull_native();
    v173 = (char *)k;
    if (!(_DWORD)v172 || v167 > *(_QWORD *)(k + 24) >> 1)
    {
      if (v168 <= v167)
        v174 = v167;
      else
        v174 = v168;
      v173 = sub_1AF3AF7B0(v172, v174, 1, (char *)k);
    }
    v175 = v173 + 32;
    v176 = &v173[32 * v167 + 32];
    v177 = v173;
    swift_arrayDestroy();
    if (v168 != v167)
    {
      memmove(v176, &v175[32 * v168], 32 * (*((_QWORD *)v177 + 2) - v168));
      v178 = *((_QWORD *)v177 + 2);
      v20 = __OFADD__(v178, v171);
      v179 = v178 + v171;
      if (v20)
        goto LABEL_245;
      *((_QWORD *)v177 + 2) = v179;
    }
    swift_bridgeObjectRelease();
    v155 = v213;
    v156 = v214;
  }
LABEL_216:
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v240 + 264) = k;
  v195 = *(_QWORD *)(k + 16);
  if (!v195)
    goto LABEL_225;
  *(_QWORD *)&v245 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_1AF38FDBC(0, v195, 0);
  v36 = (_QWORD *)v245;
  v196 = (uint64_t *)(k + 40);
  do
  {
    v198 = *(v196 - 1);
    v197 = *v196;
    *(_QWORD *)&v245 = v36;
    v200 = v36[2];
    v199 = v36[3];
    swift_bridgeObjectRetain();
    if (v200 >= v199 >> 1)
    {
      sub_1AF38FDBC((char *)(v199 > 1), v200 + 1, 1);
      v36 = (_QWORD *)v245;
    }
    v196 += 4;
    v36[2] = v200 + 1;
    v201 = &v36[2 * v200];
    v201[4] = v198;
    v201[5] = v197;
    --v195;
  }
  while (v195);
LABEL_223:
  swift_bridgeObjectRelease_n();
  return (uint64_t)v36;
}

uint64_t sub_1AF3A76F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1AF3AB50C(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1AF3A7874(_TtC6ktrace12ProviderList *a1, void *a2, char a3)
{
  return sub_1AF3A37E4(a1, a2, a3);
}

uint64_t sub_1AF3A78CC(uint64_t a1, uint64_t a2)
{
  const void *v2;
  const void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t inited;
  char *v14;
  uint64_t v15;
  char *v17;
  _QWORD __dst[41];

  v3 = v2;
  memcpy(__dst, v3, 0x141uLL);
  v17 = (char *)__dst[36];
  swift_bridgeObjectRetain_n();
  sub_1AF3B2188((uint64_t *)&v17, (uint64_t (*)(uint64_t))sub_1AF3B4560, sub_1AF3B2200);
  swift_bridgeObjectRelease();
  v6 = (uint64_t)v17;
  sub_1AF3B6C90((uint64_t)__dst);
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1AF3A1D14(v7);
  swift_bridgeObjectRelease();
  sub_1AF3B6DB0((uint64_t)__dst);
  v9 = sub_1AF3B58BC(v8);
  swift_bridgeObjectRelease();
  v10 = sub_1AF3B0DA8(v6, v9);
  v11 = (char *)sub_1AF3B1188(v10);
  swift_release();
  v17 = v11;
  swift_retain();
  sub_1AF3B2188((uint64_t *)&v17, (uint64_t (*)(uint64_t))sub_1AF3B4560, sub_1AF3B2200);
  swift_release();
  v12 = (uint64_t)v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B9A0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_OWORD *)(inited + 16) = xmmword_1AF3ECC50;
  *(_QWORD *)(inited + 40) = 0x80000001AF3F1FA0;
  *(_QWORD *)(inited + 48) = v6;
  strcpy((char *)(inited + 56), "Extra layers: ");
  *(_BYTE *)(inited + 71) = -18;
  *(_QWORD *)(inited + 72) = v12;
  swift_bridgeObjectRetain();
  v14 = sub_1AF3B7304(inited, a1, a2);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B9A8);
  swift_arrayDestroy();
  v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
  sub_1AF3B82B0((unint64_t *)&qword_1EEE3B478, &qword_1EEE3B470, MEMORY[0x1E0DEAF20]);
  v15 = sub_1AF3E7898();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1AF3A7B20()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(unsigned __int8 *)(v0 + 304);
  if (v5 != 1 && v5 != 4)
  {
    v27 = 10272;
    v28 = 0xE200000000000000;
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
  }
  v28 = v1;
  swift_bridgeObjectRetain();
  sub_1AF3E7970();
  sub_1AF3E8018();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  swift_bridgeObjectRetain();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  v7 = v2;
  v8 = v1;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1AF3A2000(v9);
  swift_bridgeObjectRelease();
  v27 = v10;
  swift_bridgeObjectRetain();
  sub_1AF3B2188(&v27, (uint64_t (*)(uint64_t))sub_1AF3B4560, sub_1AF3B2200);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 16))
  {
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_1AF3E7DE4();
    swift_bridgeObjectRelease();
    v27 = 0xD000000000000017;
    v28 = 0x80000001AF3F1FC0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
    sub_1AF3B82B0((unint64_t *)&qword_1EEE3B478, &qword_1EEE3B470, MEMORY[0x1E0DEAF20]);
    sub_1AF3E7898();
    swift_release();
    sub_1AF3E7970();
    swift_bridgeObjectRelease();
    sub_1AF3E7970();
    if (!v3)
      goto LABEL_16;
  }
  else
  {
    swift_release();
    if (!v3)
      goto LABEL_16;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v24 = v8;
    v25 = v7;
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1AF38FDBC(0, v11, 0);
    v12 = v26;
    v13 = v3 + 48;
    v14 = MEMORY[0x1E0DEA968];
    do
    {
      v15 = *(_QWORD *)(v13 - 8);
      v27 = *(_QWORD *)(v13 - 16);
      v28 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1AF3E7970();
      v16 = swift_bridgeObjectRetain();
      v17 = sub_1AF3A17E0(v16);
      swift_bridgeObjectRelease();
      MEMORY[0x1AF45C66C](v17, v14);
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = v27;
      v19 = v28;
      v21 = *(_QWORD *)(v26 + 16);
      v20 = *(_QWORD *)(v26 + 24);
      if (v21 >= v20 >> 1)
        sub_1AF38FDBC((char *)(v20 > 1), v21 + 1, 1);
      v13 += 32;
      *(_QWORD *)(v26 + 16) = v21 + 1;
      v22 = v26 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v18;
      *(_QWORD *)(v22 + 40) = v19;
      --v11;
    }
    while (v11);
    v8 = v24;
    v7 = v25;
  }
  v27 = v12;
  swift_bridgeObjectRetain();
  sub_1AF3B2188(&v27, (uint64_t (*)(uint64_t))sub_1AF3B4560, sub_1AF3B2200);
  swift_bridgeObjectRelease();
  v27 = 0;
  v28 = 0xE000000000000000;
  sub_1AF3E7DE4();
  swift_bridgeObjectRelease();
  v27 = 0xD00000000000001ALL;
  v28 = 0x80000001AF3F1FE0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
  sub_1AF3B82B0((unint64_t *)&qword_1EEE3B478, &qword_1EEE3B470, MEMORY[0x1E0DEAF20]);
  sub_1AF3E7898();
  swift_release();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
LABEL_16:
  v27 = v7;
  v28 = v8;
  sub_1AF3E7970();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  sub_1AF3E7970();
  swift_bridgeObjectRetain();
  sub_1AF3E7970();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_1AF3A8100@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[321];
  _QWORD v62[14];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _BYTE v77[7];
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[7];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _QWORD *v117;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B9E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v117 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1AF348130();
  sub_1AF3E8120();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v117);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v6;
    v59 = a2;
    LOBYTE(v62[0]) = 0;
    v11 = sub_1AF3E7F64();
    v13 = v12;
    LOBYTE(v62[0]) = 1;
    swift_bridgeObjectRetain();
    v14 = sub_1AF3E7F88();
    LOBYTE(v62[0]) = 2;
    v57 = sub_1AF3E7F40();
    v58 = v14;
    LOBYTE(v62[0]) = 3;
    v16 = v15;
    swift_bridgeObjectRetain();
    v17 = sub_1AF3E7F40();
    v60 = v16;
    v55 = v17;
    LOBYTE(v62[0]) = 4;
    v19 = v18;
    swift_bridgeObjectRetain();
    v20 = sub_1AF3E7F40();
    v22 = v21;
    v52 = v20;
    v54 = v19;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B470);
    v61[0] = 5;
    v24 = sub_1AF34523C(&qword_1EEE3B9E8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    v53 = v24;
    v56 = v22;
    sub_1AF3E7F58();
    v47 = v23;
    v25 = v62[0];
    LOBYTE(v62[0]) = 6;
    swift_bridgeObjectRetain();
    v50 = 0;
    v26 = sub_1AF3E7F64();
    v51 = v25;
    v46 = v26;
    LOBYTE(v62[0]) = 7;
    v28 = v27;
    swift_bridgeObjectRetain();
    v29 = sub_1AF3E7F64();
    v49 = v28;
    v45 = v29;
    v93 = 8;
    v31 = v30;
    sub_1AF3B8378();
    swift_bridgeObjectRetain();
    sub_1AF3E7F94();
    v48 = v31;
    v90 = v102;
    v91 = v103;
    v92 = v104;
    v86 = v98;
    v87 = v99;
    v88 = v100;
    v89 = v101;
    v82 = v94;
    v83 = v95;
    v84 = v96;
    v85 = v97;
    v113 = v101;
    v114 = v102;
    v115 = v103;
    v116 = v104;
    v109 = v97;
    v110 = v98;
    v111 = v99;
    v112 = v100;
    v106 = v94;
    v107 = v95;
    v108 = v96;
    v61[0] = 9;
    sub_1AF3B83BC((uint64_t)&v82);
    sub_1AF3E7F94();
    v32 = v62[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B9C8);
    v80 = 10;
    sub_1AF347BEC(&qword_1EEE3B9F8, (uint64_t (*)(void))sub_1AF3B8444, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    swift_bridgeObjectRetain();
    sub_1AF3E7F94();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
    v53 = v81;
    v43 = v13;
    v44 = v11;
    *(_QWORD *)v61 = v11;
    *(_QWORD *)&v61[8] = v13;
    v33 = v56;
    *(_QWORD *)&v61[16] = v58;
    *(_QWORD *)&v61[24] = v57;
    v34 = v54;
    *(_QWORD *)&v61[32] = v60;
    *(_QWORD *)&v61[40] = v55;
    v35 = v51;
    *(_QWORD *)&v61[48] = v54;
    *(_QWORD *)&v61[56] = v52;
    *(_QWORD *)&v61[64] = v56;
    *(_QWORD *)&v61[72] = v51;
    *(_QWORD *)&v61[80] = v46;
    *(_QWORD *)&v61[88] = v49;
    *(_QWORD *)&v61[96] = v45;
    *(_QWORD *)&v61[104] = v48;
    *(_OWORD *)&v61[112] = v82;
    *(_OWORD *)&v61[128] = v83;
    *(_OWORD *)&v61[192] = v87;
    *(_OWORD *)&v61[176] = v86;
    *(_OWORD *)&v61[144] = v84;
    *(_OWORD *)&v61[160] = v85;
    *(_OWORD *)&v61[272] = v92;
    *(_OWORD *)&v61[256] = v91;
    *(_OWORD *)&v61[240] = v90;
    *(_OWORD *)&v61[208] = v88;
    *(_OWORD *)&v61[224] = v89;
    *(_QWORD *)&v61[288] = v32;
    *(_QWORD *)&v61[296] = v81;
    v61[304] = 4;
    *(_QWORD *)&v61[312] = MEMORY[0x1E0DEE9D8];
    v61[320] = 0;
    sub_1AF3B6C90((uint64_t)v61);
    swift_bridgeObjectRelease();
    sub_1AF3B82F0((uint64_t)&v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = v34;
    swift_bridgeObjectRelease();
    v37 = v33;
    swift_bridgeObjectRelease();
    v38 = v35;
    swift_bridgeObjectRelease();
    v39 = v49;
    swift_bridgeObjectRelease();
    v40 = v48;
    swift_bridgeObjectRelease();
    memcpy(v59, v61, 0x141uLL);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v117);
    v62[0] = v44;
    v62[1] = v43;
    v62[2] = v58;
    v62[3] = v57;
    v62[4] = v60;
    v62[5] = v55;
    v62[6] = v36;
    v62[7] = v52;
    v62[8] = v37;
    v62[9] = v38;
    v62[10] = v46;
    v62[11] = v39;
    v62[12] = v45;
    v62[13] = v40;
    v71 = v114;
    v72 = v115;
    v73 = v116;
    v67 = v110;
    v68 = v111;
    v69 = v112;
    v70 = v113;
    v63 = v106;
    v64 = v107;
    v65 = v108;
    v66 = v109;
    v74 = v32;
    v75 = v53;
    v76 = 4;
    *(_DWORD *)v77 = *(_DWORD *)v105;
    *(_DWORD *)&v77[3] = *(_DWORD *)&v105[3];
    v78 = MEMORY[0x1E0DEE9D8];
    v79 = 0;
    return sub_1AF3B6DB0((uint64_t)v62);
  }
}

uint64_t sub_1AF3A8C1C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return sub_1AF3A8100(a1, a2);
}

uint64_t sub_1AF3A8C30()
{
  sub_1AF3E80D8();
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A8C88()
{
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AF3A8CCC()
{
  sub_1AF3E80D8();
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  return sub_1AF3E8114();
}

uint64_t sub_1AF3A8D20(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1AF3E8030();
}

_QWORD *sub_1AF3A8D50(char a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v60 = a3;
  v64 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA08);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v62 = (char *)&v58 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v61 = (uint64_t)&v58 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v58 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v58 - v17;
  v19 = sub_1AF3E7694();
  v67 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  v59 = (char *)&v58 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v58 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v58 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v58 - v29;
  v65 = v31;
  v66 = v6;
  if ((a1 & 1) == 0 || !getenv("TRACE_PLAN_PATH"))
  {
    v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!a4)
      goto LABEL_13;
    goto LABEL_8;
  }
  sub_1AF3E797C();
  sub_1AF3E7610();
  swift_bridgeObjectRelease();
  v32 = *(int *)(v6 + 48);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v18, v30, v19);
  v18[v32] = 3;
  v33 = (_QWORD *)sub_1AF3AFC04(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v35 = v33[2];
  v34 = v33[3];
  if (v35 >= v34 >> 1)
    v33 = (_QWORD *)sub_1AF3AFC04(v34 > 1, v35 + 1, 1, v33);
  v33[2] = v35 + 1;
  sub_1AF3478BC((uint64_t)v18, (uint64_t)v33+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v35, &qword_1EEE3BA08);
  v6 = v66;
  if (a4)
  {
LABEL_8:
    sub_1AF3E7610();
    v36 = *(int *)(v6 + 48);
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v16, v28, v19);
    v16[v36] = 2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v33 = (_QWORD *)sub_1AF3AFC04(0, v33[2] + 1, 1, v33);
    v38 = v33[2];
    v37 = v33[3];
    if (v38 >= v37 >> 1)
      v33 = (_QWORD *)sub_1AF3AFC04(v37 > 1, v38 + 1, 1, v33);
    v33[2] = v38 + 1;
    sub_1AF3478BC((uint64_t)v16, (uint64_t)v33+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v38, &qword_1EEE3BA08);
    v6 = v66;
  }
LABEL_13:
  if ((v64 & 1) != 0)
  {
    sub_1AF3E7610();
    v39 = *(int *)(v6 + 48);
    v40 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 32);
    v41 = v61;
    v40(v61, v25, v19);
    *(_BYTE *)(v41 + v39) = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v33 = (_QWORD *)sub_1AF3AFC04(0, v33[2] + 1, 1, v33);
    v43 = v33[2];
    v42 = v33[3];
    if (v43 >= v42 >> 1)
      v33 = (_QWORD *)sub_1AF3AFC04(v42 > 1, v43 + 1, 1, v33);
    v33[2] = v43 + 1;
    v44 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v45 = *(_QWORD *)(v7 + 72);
    sub_1AF3478BC(v61, (uint64_t)v33 + v44 + v45 * v43, &qword_1EEE3BA08);
    v46 = v59;
    sub_1AF3E7610();
    v47 = *(int *)(v66 + 48);
    v48 = v62;
    v40((uint64_t)v62, v46, v19);
    v48[v47] = 0;
    v50 = v33[2];
    v49 = v33[3];
    if (v50 >= v49 >> 1)
      v33 = (_QWORD *)sub_1AF3AFC04(v49 > 1, v50 + 1, 1, v33);
    v51 = (uint64_t)v62;
    v52 = (uint64_t)v63;
    v33[2] = v50 + 1;
    sub_1AF3478BC(v51, (uint64_t)v33 + v44 + v50 * v45, &qword_1EEE3BA08);
    v6 = v66;
  }
  else
  {
    v52 = (uint64_t)v63;
  }
  v53 = v65;
  sub_1AF3E7610();
  v54 = *(int *)(v6 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v52, v53, v19);
  *(_BYTE *)(v52 + v54) = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v33 = (_QWORD *)sub_1AF3AFC04(0, v33[2] + 1, 1, v33);
  v56 = v33[2];
  v55 = v33[3];
  if (v56 >= v55 >> 1)
    v33 = (_QWORD *)sub_1AF3AFC04(v55 > 1, v56 + 1, 1, v33);
  v33[2] = v56 + 1;
  sub_1AF3478BC(v52, (uint64_t)v33+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v56, &qword_1EEE3BA08);
  return v33;
}

uint64_t sub_1AF3A92F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, void (*a6)(_BYTE *, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, _BYTE *, uint64_t);
  _BYTE *v31;
  id v32;
  id v33;
  void *v34;
  unsigned int v35;
  id v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  void (*v40)(_BYTE *, uint64_t);
  _QWORD *v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t (*v46)(_BYTE *, uint64_t);
  _BYTE v47[4];
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t);

  v62 = a6;
  v59 = sub_1AF3E7694();
  v56 = *(_QWORD *)(v59 - 8);
  v14 = MEMORY[0x1E0C80A78](v59);
  v55 = &v47[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v14);
  v58 = &v47[-v17];
  MEMORY[0x1E0C80A78](v16);
  v57 = &v47[-v18];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA08);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v54 = &v47[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = a4 & a3;
  v23 = sub_1AF3A8D50(a4 & a3 & 1, a4, a5, (uint64_t)v62);
  if (v23[2])
  {
    v61 = v23[2];
    v48 = v22;
    v49 = a7;
    v50 = v7;
    v53 = (id)objc_opt_self();
    v24 = (uint64_t)v23 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v25 = *(_QWORD *)(v20 + 72);
    v51 = v23;
    v52 = v25;
    v26 = v59;
    v27 = v57;
    while (1)
    {
      v60 = v24;
      v28 = v54;
      sub_1AF3B8488(v24, (uint64_t)v54);
      v29 = v56;
      v30 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v56 + 32);
      v30((uint64_t)v27, v28, v26);
      v31 = v55;
      sub_1AF3E7640();
      sub_1AF3E764C();
      v62 = *(void (**)(_BYTE *, uint64_t))(v29 + 8);
      v62(v31, v26);
      v32 = v53;
      v33 = objc_msgSend(v53, sel_defaultManager);
      sub_1AF3E767C();
      v34 = (void *)sub_1AF3E78BC();
      swift_bridgeObjectRelease();
      v35 = objc_msgSend(v33, sel_fileExistsAtPath_, v34);

      if (v35)
      {
        v43 = v59;
        v62(v57, v59);
        swift_bridgeObjectRelease();
        return v30(v49, v58, v43);
      }
      v36 = objc_msgSend(v32, sel_defaultManager);
      v37 = a1;
      v38 = (void *)sub_1AF3E78BC();
      v39 = objc_msgSend(v36, sel_fileExistsAtPath_, v38);

      if (v39)
        break;
      v26 = v59;
      v40 = v62;
      v62(v58, v59);
      v27 = v57;
      v40(v57, v26);
      v24 = v60 + v52;
      --v61;
      a1 = v37;
      if (!v61)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
    {
      sub_1AF3E7610();
    }
    else
    {
      type metadata accessor for KTraceRecordError();
      sub_1AF3910EC();
      swift_allocError();
      *v44 = a1;
      v44[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    v45 = v59;
    v46 = (uint64_t (*)(_BYTE *, uint64_t))v62;
    v62(v58, v59);
    return v46(v57, v45);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_1AF3910EC();
    swift_allocError();
    *v41 = a1;
    v41[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
}

id sub_1AF3A96F4(char a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  void **v58;
  void *v59;
  void (*v60)(_QWORD, _QWORD);
  uint64_t v61;
  unint64_t v62;
  void *v63;
  void (*v64)(_QWORD, _QWORD);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  id v86;
  id v87;
  void (*v88)(_QWORD, _QWORD);
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  id v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t i;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  id v128;
  id v129;
  id v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char v140;
  __int128 v141;
  _OWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _DWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  BOOL v174;
  id result;
  _DWORD *v176;
  _OWORD *v177;
  _QWORD *v178;
  _DWORD *v179;
  _QWORD *v180;
  id v181;
  id *v182;
  uint64_t *v183;
  int v184;
  char *v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  uint64_t *v193;
  _QWORD *v194;
  uint64_t v195;
  char *v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  id v202;
  id v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  id v207;
  unint64_t v208;
  uint64_t *v209;
  _QWORD *v210;
  uint64_t v211;
  unsigned int v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(_QWORD, _QWORD);
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  id v233;
  char *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE v238[7];
  _BYTE v239[328];
  _QWORD v240[41];
  _QWORD v241[41];
  _QWORD v242[41];
  id v243[41];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255[41];
  uint64_t v256[41];
  uint64_t v257[14];
  _QWORD v258[24];
  char v259;
  _BYTE v260[23];
  uint64_t v261;

  v261 = *MEMORY[0x1E0C80C00];
  v219 = type metadata accessor for KTraceRecordError();
  v4 = MEMORY[0x1E0C80A78](v219);
  v218 = (uint64_t)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v225 = (_DWORD **)((char *)&v176 - v6);
  v7 = sub_1AF3E7E2C();
  v224 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v223 = (char *)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v176 - v10;
  v12 = sub_1AF3E74C0();
  v214 = *(_QWORD *)(v12 - 8);
  v215 = v12;
  MEMORY[0x1E0C80A78](v12);
  v213 = (char *)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1AF3E7694();
  v231 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v185 = (char *)&v176 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v230 = (char *)&v176 - v18;
  MEMORY[0x1E0C80A78](v17);
  v232 = (char *)&v176 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA08);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v200 = (uint64_t)&v176 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = MEMORY[0x1E0DEE9E8];
  v23 = sub_1AF3A8D50(a1, a2, 0, 0);
  v199 = v23[2];
  if (v199)
  {
    v198 = *(int *)(v20 + 48);
    v24 = (void *)objc_opt_self();
    v25 = 0;
    v196 = (char *)v23 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v197 = v24;
    v212 = *MEMORY[0x1E0CADFF8];
    v193 = &v255[34];
    v209 = &v255[37];
    v182 = &v243[40];
    v183 = &v255[14];
    v179 = v260;
    v180 = v258;
    v177 = &v242[14];
    v178 = &v240[14];
    v176 = (_DWORD *)((char *)&v242[38] + 1);
    v26 = (char *)MEMORY[0x1E0DEE9D8];
    v216 = 0x80000001AF3F2090;
    v217 = 0x80000001AF3F20B0;
    v221 = v11;
    v222 = v7;
    v229 = v14;
    v194 = v23;
    v195 = v21;
    do
    {
      if (v25 >= v23[2])
        goto LABEL_111;
      v27 = *(_QWORD *)(v21 + 72);
      v204 = v25;
      v28 = (uint64_t)&v196[v27 * v25];
      v29 = v200;
      sub_1AF3B8488(v28, v200);
      v201 = *(unsigned __int8 *)(v29 + v198);
      (*(void (**)(char *, uint64_t, uint64_t))(v231 + 32))(v232, v29, v14);
      v236 = MEMORY[0x1E0DEE9E8];
      v30 = objc_msgSend(v197, sel_defaultManager);
      sub_1AF3E767C();
      v31 = (void *)sub_1AF3E78BC();
      swift_bridgeObjectRelease();
      v255[0] = 0;
      v32 = objc_msgSend(v30, sel_contentsOfDirectoryAtPath_error_, v31, v255);

      v33 = (void *)v255[0];
      if (v32)
      {
        v34 = sub_1AF3E7AB4();
        v35 = v33;

      }
      else
      {
        v36 = (id)v255[0];
        v37 = (void *)sub_1AF3E75EC();

        swift_willThrow();
        v235 = 0;
        v34 = MEMORY[0x1E0DEE9D8];
      }
      v234 = v26;
      v38 = *(_QWORD *)(v34 + 16);
      if (v38)
      {
        v39 = (uint64_t *)(v34 + 40);
        v40 = MEMORY[0x1E0DEE9D8];
        do
        {
          v42 = *(v39 - 1);
          v41 = *v39;
          swift_bridgeObjectRetain();
          if ((sub_1AF3E79F4() & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v255[0] = v40;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1AF38FDBC(0, *(_QWORD *)(v40 + 16) + 1, 1);
              v40 = v255[0];
            }
            v45 = *(_QWORD *)(v40 + 16);
            v44 = *(_QWORD *)(v40 + 24);
            if (v45 >= v44 >> 1)
            {
              sub_1AF38FDBC((char *)(v44 > 1), v45 + 1, 1);
              v40 = v255[0];
            }
            *(_QWORD *)(v40 + 16) = v45 + 1;
            v46 = v40 + 16 * v45;
            *(_QWORD *)(v46 + 32) = v42;
            *(_QWORD *)(v46 + 40) = v41;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v39 += 2;
          --v38;
        }
        while (v38);
      }
      else
      {
        v40 = MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      v228 = *(_QWORD *)(v40 + 16);
      if (v228)
      {
        v47 = 0;
        v226 = v40;
        v227 = v40 + 32;
        v26 = v234;
        v48 = v235;
        while (v47 < *(_QWORD *)(v40 + 16))
        {
          v234 = v26;
          v58 = (void **)(v227 + 16 * v47);
          v59 = *v58;
          v60 = (void (*)(_QWORD, _QWORD))v58[1];
          swift_bridgeObjectRetain();
          sub_1AF3E7640();
          v61 = sub_1AF3E76AC();
          v63 = v48;
          v233 = v59;
          if (v48)
          {
            v64 = v60;
          }
          else
          {
            v65 = v61;
            v66 = v62;
            v220 = v60;
            sub_1AF3E74F0();
            swift_allocObject();
            v67 = sub_1AF3E74E4();
            sub_1AF3E74B4();
            (*(void (**)(char *, _QWORD, uint64_t))(v214 + 104))(v213, v212, v215);
            sub_1AF3E74CC();
            sub_1AF3B6ECC();
            sub_1AF3E74D8();
            v211 = v67;
            memcpy(v243, v255, 0x141uLL);
            memcpy(v242, v255, 0x141uLL);
            sub_1AF3B6C90((uint64_t)v243);
            sub_1AF3A593C();
            v208 = v66;
            v235 = 0;
            sub_1AF3B6DB0((uint64_t)v243);
            v203 = v243[0];
            v86 = v243[18];
            v87 = v243[20];
            v205 = v65;
            v88 = v220;
            if (v243[18])
            {
              v89 = v243[17];
              v90 = v243[19];
              v91 = v243[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v92 = (uint64_t)v86;
              v93 = v235;
              v94 = sub_1AF38D8B0((uint64_t)v89, v92);
              if (v93)
              {
                swift_bridgeObjectRelease();
                v63 = v93;
              }
              else
              {
                v202 = v91;
                v235 = 0;
                sub_1AF38DB48(v94);
                swift_bridgeObjectRelease();
                if (!v87)
                  goto LABEL_51;
                swift_bridgeObjectRetain();
                v97 = v235;
                v98 = sub_1AF38D8B0((uint64_t)v90, (uint64_t)v87);
                v63 = v97;
                if (!v97)
                {
                  v235 = 0;
                  sub_1AF38DB48(v98);
                  swift_bridgeObjectRelease();
LABEL_51:
                  swift_bridgeObjectRelease();
LABEL_52:
                  v99 = *(_QWORD *)(v255[37] + 64);
                  v206 = (_QWORD *)(v255[37] + 64);
                  v100 = 1 << *(_BYTE *)(v255[37] + 32);
                  if (v100 < 64)
                    v101 = ~(-1 << v100);
                  else
                    v101 = -1;
                  v102 = v101 & v99;
                  v207 = (id)((unint64_t)(v100 + 63) >> 6);
                  v210 = (_QWORD *)v255[37];
                  swift_bridgeObjectRetain();
                  for (i = 0; ; i = v105)
                  {
                    if (v102)
                    {
                      v104 = __clz(__rbit64(v102));
                      v102 &= v102 - 1;
                      v105 = i;
                      v106 = v104 | (i << 6);
                    }
                    else
                    {
                      v107 = __OFADD__(i, 1);
                      v108 = i + 1;
                      v109 = v208;
                      if (v107)
                        goto LABEL_110;
                      if (v108 >= (uint64_t)v207)
                      {
LABEL_89:
                        swift_release();
                        swift_release();
                        v190 = v243[2];
                        v191 = v243[3];
                        v192 = v243[4];
                        v206 = v243[5];
                        v207 = v243[6];
                        v128 = v243[7];
                        v186 = v243[8];
                        v187 = v243[9];
                        v129 = v243[10];
                        v188 = v243[11];
                        v189 = v243[12];
                        v210 = v243[13];
                        v233 = v243[36];
                        v130 = v243[39];
                        v184 = *(unsigned __int8 *)v182;
                        sub_1AF33C310(v205, v109);
                        v131 = *((_OWORD *)v183 + 9);
                        v252 = *((_OWORD *)v183 + 8);
                        v253 = v131;
                        v254 = *((_OWORD *)v183 + 10);
                        v132 = *((_OWORD *)v183 + 5);
                        v248 = *((_OWORD *)v183 + 4);
                        v249 = v132;
                        v133 = *((_OWORD *)v183 + 6);
                        v251 = *((_OWORD *)v183 + 7);
                        v250 = v133;
                        v134 = *((_OWORD *)v183 + 1);
                        v244 = *(_OWORD *)v183;
                        v245 = v134;
                        v135 = *((_OWORD *)v183 + 2);
                        v247 = *((_OWORD *)v183 + 3);
                        v246 = v135;
                        v211 = v255[37];
                        swift_bridgeObjectRelease();
                        v136 = v185;
                        v137 = v230;
                        sub_1AF3E7634();
                        sub_1AF3E761C();
                        v138 = v136;
                        v139 = v229;
                        v220 = *(void (**)(_QWORD, _QWORD))(v231 + 8);
                        v220(v138, v229);
                        v140 = sub_1AF3E79F4();
                        swift_bridgeObjectRelease();
                        if ((v140 & 1) != 0)
                        {
                          v141 = v253;
                          v142 = v178;
                          *((_OWORD *)v178 + 8) = v252;
                          v142[9] = v141;
                          v142[10] = v254;
                          v143 = v249;
                          v142[4] = v248;
                          v142[5] = v143;
                          v144 = v251;
                          v142[6] = v250;
                          v142[7] = v144;
                          v145 = v245;
                          *v142 = v244;
                          v142[1] = v145;
                          v146 = v247;
                          v142[2] = v246;
                          v142[3] = v146;
                          v147 = v130;
                          v181 = v130;
                          v149 = v202;
                          v148 = v203;
                          v240[0] = v203;
                          v240[1] = v202;
                          v150 = v189;
                          v240[2] = v190;
                          v240[3] = v191;
                          v240[4] = v192;
                          v240[5] = v206;
                          v240[6] = v207;
                          v240[7] = v128;
                          v205 = (uint64_t)v128;
                          v152 = v186;
                          v151 = v187;
                          v240[8] = v186;
                          v240[9] = v187;
                          v240[10] = v129;
                          v208 = (unint64_t)v129;
                          v153 = v188;
                          v240[11] = v188;
                          v240[12] = v189;
                          v240[13] = v210;
                          v240[36] = v233;
                          v240[37] = v211;
                          LOBYTE(v240[38]) = v201;
                          v240[39] = v147;
                          LOBYTE(v240[40]) = 1;
                          memcpy(v256, v240, 0x141uLL);
                          sub_1AF3B6C90((uint64_t)v240);
                          v154 = v236;
                          v155 = swift_isUniquelyReferenced_nonNull_native();
                          v241[0] = v154;
                          sub_1AF3B3778(v256, v155, v239);
                          v236 = v241[0];
                          swift_bridgeObjectRelease();
                          sub_1AF3478BC((uint64_t)v239, (uint64_t)v241, &qword_1EEE3BA18);
                          sub_1AF3B8550((uint64_t)v241);
                          v242[0] = v148;
                          v242[1] = v149;
                          v242[2] = v190;
                          v242[3] = v191;
                          v242[4] = v192;
                          v242[5] = v206;
                          v242[6] = v207;
                          v242[7] = v205;
                          v242[8] = v152;
                          v242[9] = v151;
                          v242[10] = v208;
                          v242[11] = v153;
                          v242[12] = v150;
                          v242[13] = v210;
                          v156 = v245;
                          v157 = v177;
                          *v177 = v244;
                          v157[1] = v156;
                          v158 = v246;
                          v159 = v247;
                          v160 = v249;
                          v157[4] = v248;
                          v157[5] = v160;
                          v157[2] = v158;
                          v157[3] = v159;
                          v161 = v250;
                          v162 = v251;
                          v163 = v254;
                          v164 = v252;
                          v157[9] = v253;
                          v157[10] = v163;
                          v157[7] = v162;
                          v157[8] = v164;
                          v157[6] = v161;
                          v242[36] = v233;
                          v242[37] = v211;
                          LOBYTE(v242[38]) = v201;
                          v165 = v176;
                          *v176 = *(_DWORD *)v238;
                          *(_DWORD *)((char *)v165 + 3) = *(_DWORD *)&v238[3];
                          v242[39] = v181;
                          LOBYTE(v242[40]) = 1;
                          sub_1AF3B6DB0((uint64_t)v242);
                          v57 = v229;
                          v56 = v230;
                        }
                        else
                        {
                          v257[0] = (uint64_t)v203;
                          v257[1] = (uint64_t)v202;
                          v257[2] = (uint64_t)v190;
                          v257[3] = (uint64_t)v191;
                          v257[4] = (uint64_t)v192;
                          v257[5] = (uint64_t)v206;
                          v257[6] = (uint64_t)v207;
                          v257[7] = (uint64_t)v128;
                          v257[8] = (uint64_t)v186;
                          v257[9] = (uint64_t)v187;
                          v257[10] = (uint64_t)v129;
                          v257[11] = (uint64_t)v188;
                          v257[12] = (uint64_t)v189;
                          v257[13] = (uint64_t)v210;
                          v49 = v253;
                          v50 = v180;
                          *((_OWORD *)v180 + 8) = v252;
                          v50[9] = v49;
                          v50[10] = v254;
                          v51 = v249;
                          v50[4] = v248;
                          v50[5] = v51;
                          v52 = v251;
                          v50[6] = v250;
                          v50[7] = v52;
                          v53 = v245;
                          *v50 = v244;
                          v50[1] = v53;
                          v54 = v247;
                          v50[2] = v246;
                          v50[3] = v54;
                          v258[22] = v233;
                          v258[23] = v211;
                          v259 = v201;
                          v55 = v179;
                          *v179 = *(_DWORD *)v238;
                          *(_DWORD *)((char *)v55 + 3) = *(_DWORD *)&v238[3];
                          *(_QWORD *)&v260[7] = v130;
                          v260[15] = v184;
                          sub_1AF3B6C90((uint64_t)v257);
                          sub_1AF3ABB68(v241, v257);
                          memcpy(v242, v241, 0x141uLL);
                          sub_1AF3B6DB0((uint64_t)v242);
                          sub_1AF3B6DB0((uint64_t)v257);
                          v56 = v137;
                          v57 = v139;
                        }
                        v220(v56, v57);
                        v26 = v234;
                        v48 = v235;
                        goto LABEL_25;
                      }
                      v110 = v206[v108];
                      if (!v110)
                      {
                        v111 = v108 + 1;
                        if (v108 + 1 >= (uint64_t)v207)
                          goto LABEL_89;
                        v110 = v206[v111];
                        if (!v110)
                        {
                          v111 = v108 + 2;
                          if (v108 + 2 >= (uint64_t)v207)
                            goto LABEL_89;
                          v110 = v206[v111];
                          if (!v110)
                          {
                            v111 = v108 + 3;
                            if (v108 + 3 >= (uint64_t)v207)
                              goto LABEL_89;
                            v110 = v206[v111];
                            if (!v110)
                            {
                              v111 = v108 + 4;
                              if (v108 + 4 >= (uint64_t)v207)
                                goto LABEL_89;
                              v110 = v206[v111];
                              if (!v110)
                              {
                                v111 = v108 + 5;
                                if (v108 + 5 >= (uint64_t)v207)
                                  goto LABEL_89;
                                v110 = v206[v111];
                                if (!v110)
                                {
                                  v111 = v108 + 6;
                                  if (v108 + 6 >= (uint64_t)v207)
                                    goto LABEL_89;
                                  v110 = v206[v111];
                                  if (!v110)
                                  {
                                    while (1)
                                    {
                                      v108 = v111 + 1;
                                      if (__OFADD__(v111, 1))
                                        goto LABEL_112;
                                      if (v108 >= (uint64_t)v207)
                                        goto LABEL_89;
                                      v110 = v206[v108];
                                      ++v111;
                                      if (v110)
                                        goto LABEL_76;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        v108 = v111;
                      }
LABEL_76:
                      v102 = (v110 - 1) & v110;
                      v105 = v108;
                      v106 = __clz(__rbit64(v110)) + (v108 << 6);
                    }
                    v112 = (uint64_t *)(v210[6] + 16 * v106);
                    v113 = *v112;
                    v114 = v112[1];
                    swift_bridgeObjectRetain_n();
                    v115 = sub_1AF3AFE98(v240, v113, v114);
                    v117 = (_QWORD *)v116;
                    sub_1AF3478BC(v116, (uint64_t)v241, &qword_1EEE3B988);
                    sub_1AF3478BC((uint64_t)v241, (uint64_t)v242, &qword_1EEE3B988);
                    if (sub_1AF3B6F10((uint64_t)v242) == 1)
                      goto LABEL_113;
                    v118 = v117[7];
                    if (v118)
                    {
                      v119 = v117[6];
                      swift_bridgeObjectRetain();
                      v120 = v118;
                      v121 = v235;
                      v122 = sub_1AF38D8B0(v119, v120);
                      v235 = v121;
                      if (v121)
                        goto LABEL_88;
                      sub_1AF38DB48(v122);
                      swift_bridgeObjectRelease();
                      v123 = v117[9];
                      if (v123)
                      {
                        v124 = v117[8];
                        swift_bridgeObjectRetain();
                        v125 = v123;
                        v126 = v235;
                        v127 = sub_1AF38D8B0(v124, v125);
                        v235 = v126;
                        if (v126)
                        {
LABEL_88:
                          swift_bridgeObjectRelease();
                          v63 = v235;
LABEL_92:
                          ((void (*)(_QWORD *, _QWORD))v115)(v240, 0);
                          swift_release();
                          swift_bridgeObjectRelease_n();
                          v88 = v220;
                          goto LABEL_93;
                        }
                        sub_1AF38DB48(v127);
                        swift_bridgeObjectRelease();
                      }
                    }
                    else if (v117[9])
                    {
                      sub_1AF3910EC();
                      v63 = (void *)swift_allocError();
                      *v166 = v113;
                      v166[1] = v114;
                      swift_storeEnumTagMultiPayload();
                      swift_willThrow();
                      goto LABEL_92;
                    }
                    swift_bridgeObjectRelease();
                    ((void (*)(_QWORD *, _QWORD))v115)(v240, 0);
                    swift_bridgeObjectRelease_n();
                  }
                }
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              v202 = v243[1];
              if (!v243[20])
                goto LABEL_52;
              sub_1AF3910EC();
              v63 = (void *)swift_allocError();
              v95 = v202;
              *v96 = v203;
              v96[1] = v95;
              swift_storeEnumTagMultiPayload();
              swift_bridgeObjectRetain();
              swift_willThrow();
            }
LABEL_93:
            v64 = v88;
            memcpy(v242, v255, 0x141uLL);
            sub_1AF3B6DB0((uint64_t)v242);
            swift_release();
            sub_1AF33C310(v205, v208);
          }
          v235 = 0;
          v243[0] = v63;
          v68 = v63;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B540);
          v69 = v221;
          v70 = v222;
          if ((swift_dynamicCast() & 1) != 0)
          {

            v72 = v223;
            v71 = v224;
            (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v223, v69, v70);
            v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA10);
            v74 = v225;
            v75 = (char *)v225 + *(int *)(v73 + 48);
            *v225 = v233;
            v74[1] = v64;
            (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v72, v70);
            swift_storeEnumTagMultiPayload();
            v255[0] = 0;
            v255[1] = 0xE000000000000000;
            sub_1AF3E7DE4();
            swift_bridgeObjectRelease();
            v255[0] = 0x203A726F727265;
            v255[1] = 0xE700000000000000;
            sub_1AF3E767C();
            sub_1AF3E7970();
            swift_bridgeObjectRelease();
            sub_1AF3E7970();
            sub_1AF3B84D0((uint64_t)v74, v218);
            sub_1AF3E78F8();
            sub_1AF3E7970();
            swift_bridgeObjectRelease();
            v76 = v255[0];
            v77 = v255[1];
            v26 = v234;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v26 = sub_1AF3413B8(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
            v79 = *((_QWORD *)v26 + 2);
            v78 = *((_QWORD *)v26 + 3);
            if (v79 >= v78 >> 1)
              v26 = sub_1AF3413B8((char *)(v78 > 1), v79 + 1, 1, v26);
            *((_QWORD *)v26 + 2) = v79 + 1;
            v80 = &v26[16 * v79];
            *((_QWORD *)v80 + 4) = v76;
            *((_QWORD *)v80 + 5) = v77;
            sub_1AF3B8514((uint64_t)v225);
            (*(void (**)(char *, uint64_t))(v224 + 8))(v223, v70);
            (*(void (**)(char *, uint64_t))(v231 + 8))(v230, v229);

            v48 = v235;
          }
          else
          {
            swift_bridgeObjectRelease();

            v255[0] = 0;
            v255[1] = 0xE000000000000000;
            sub_1AF3E7DE4();
            swift_bridgeObjectRelease();
            v255[0] = 0x203A726F727265;
            v255[1] = 0xE700000000000000;
            sub_1AF3E767C();
            sub_1AF3E7970();
            swift_bridgeObjectRelease();
            sub_1AF3E7970();
            v81 = v255[0];
            v82 = v255[1];
            v26 = v234;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v26 = sub_1AF3413B8(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
            v84 = *((_QWORD *)v26 + 2);
            v83 = *((_QWORD *)v26 + 3);
            if (v84 >= v83 >> 1)
              v26 = sub_1AF3413B8((char *)(v83 > 1), v84 + 1, 1, v26);
            *((_QWORD *)v26 + 2) = v84 + 1;
            v85 = &v26[16 * v84];
            *((_QWORD *)v85 + 4) = v81;
            *((_QWORD *)v85 + 5) = v82;

            (*(void (**)(char *, uint64_t))(v231 + 8))(v230, v229);
            v48 = v235;
          }
LABEL_25:
          v40 = v226;
          if (++v47 == v228)
          {
            v235 = v48;
            swift_release();
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
      }
      swift_release();
      v26 = v234;
LABEL_4:
      v25 = v204 + 1;
      sub_1AF3A5010(v236);
      v14 = v229;
      (*(void (**)(char *, uint64_t))(v231 + 8))(v232, v229);
      v23 = v194;
      v21 = v195;
    }
    while (v25 != v199);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v167 = swift_bridgeObjectRetain();
  v168 = sub_1AF3B126C(v167);
  swift_bridgeObjectRelease();
  v255[0] = v168;
  swift_retain();
  v169 = v235;
  sub_1AF3B2188(v255, (uint64_t (*)(uint64_t))sub_1AF3B4574, sub_1AF3B28A4);
  if (v169)
  {
    result = (id)swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    v170 = v255[0];
    v243[0] = (id)v255[0];
    v171 = *(_QWORD *)(v255[0] + 16);
    if (v171)
    {
      v234 = v26;
      v172 = 0;
      v173 = (_QWORD *)(v255[0] + 40);
      while (1)
      {
        v174 = *(v173 - 1) == 0x746C7561666564 && *v173 == 0xE700000000000000;
        if (v174 || (sub_1AF3E8030() & 1) != 0)
          break;
        v173 += 41;
        if (v171 == ++v172)
          goto LABEL_107;
      }
      swift_bridgeObjectRelease();
      sub_1AF3AABD4(v172, v255);
      sub_1AF3B3638(0, 0, v255);
      return v243[0];
    }
    else
    {
LABEL_107:
      swift_bridgeObjectRelease();
    }
    return (id)v170;
  }
  return result;
}

uint64_t sub_1AF3AABD4@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AF3AF584(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = v5 + 328 * a1;
    memcpy(a2, (const void *)(v9 + 32), 0x141uLL);
    result = (uint64_t)memmove((void *)(v9 + 32), (const void *)(v9 + 360), 328 * (v8 - a1));
    *(_QWORD *)(v5 + 16) = v8;
    *v2 = v5;
  }
  return result;
}

uint64_t ktrace_list_plans(_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[41];
  _QWORD __dst[49];

  __dst[47] = nullsub_1(a1);
  __dst[46] = nullsub_1(a2);
  v6 = sub_1AF3A96F4((a3 & 2) != 0, (a3 >> 2) & 1);
  v7 = v5;
  v8 = v6[2];
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v7 + 16);
    if (!v16)
      goto LABEL_15;
    goto LABEL_11;
  }
  v23 = v5;
  v9 = v8 - 1;
  v10 = 4;
  v11 = MEMORY[0x1E0DEA968];
  while (1)
  {
    memcpy(__dst, &v6[v10], 0x141uLL);
    sub_1AF3B6C90((uint64_t)__dst);
    if (v10 != 4)
      sub_1AF3E80C0();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5D8);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1AF3EB020;
    memcpy(v24, __dst, 0x141uLL);
    if ((a3 & 1) != 0)
    {
      v14 = sub_1AF3A7B20();
    }
    else
    {
      sub_1AF3A78CC(538976288, 0xE400000000000000);
      v24[0] = __dst[0];
      v24[1] = __dst[1];
      swift_bridgeObjectRetain();
      sub_1AF3E7970();
      swift_bridgeObjectRetain();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      v24[3] = v11;
      v13 = (unsigned __int8 *)sub_1AF345EB0();
      sub_1AF3459F8((uint64_t)v24, *v13);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
      sub_1AF3E7970();
      sub_1AF3E7970();
      swift_bridgeObjectRelease();
      v14 = 0;
      v15 = 0xE000000000000000;
    }
    *(_QWORD *)(v12 + 56) = v11;
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v15;
    sub_1AF345E6C();
    sub_1AF3E80B4();
    sub_1AF3B6DB0((uint64_t)__dst);
    swift_bridgeObjectRelease();
    if (!v9)
      break;
    v10 += 41;
    --v9;
  }
  swift_bridgeObjectRelease();
  v7 = v23;
  v16 = *(_QWORD *)(v23 + 16);
  if (v16)
  {
LABEL_11:
    v17 = (uint64_t *)(v7 + 40);
    v18 = MEMORY[0x1E0DEA968];
    do
    {
      v20 = *(v17 - 1);
      v19 = *v17;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3B5D8);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1AF3EB020;
      *(_QWORD *)(v21 + 56) = v18;
      *(_QWORD *)(v21 + 32) = v20;
      *(_QWORD *)(v21 + 40) = v19;
      sub_1AF345E6C();
      swift_bridgeObjectRetain();
      sub_1AF3E80B4();
      swift_bridgeObjectRelease();
      v17 += 2;
      --v16;
    }
    while (v16);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

char *sub_1AF3AB088(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1AF3AB0DC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1AF3AB0A4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1AF3AB1D4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1AF3AB0C0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1AF3AB2F4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1AF3AB0DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BBD8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

_QWORD *sub_1AF3AB1D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAD0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAD8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1AF3AB2F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAC0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1AF3AB3F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA90);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 328);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[328 * v8])
      memmove(v12, v13, 328 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1AF3AB50C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1AF3E80D8();
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  v8 = sub_1AF3E8114();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1AF3E8030() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1AF3E8030() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1AF3AC7D8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1AF3AB6B8(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v8;
  uint64_t v10;

  v4 = *v2;
  sub_1AF3E80D8();
  sub_1AF33C784(a2);
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  v5 = sub_1AF3E8114() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v8;
  *v8 = 0x8000000000000000;
  sub_1AF3AC970(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10;
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_1AF3ABB68(void *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  const void *v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD __dst[42];

  v3 = v2;
  v5 = *v2;
  sub_1AF3E80D8();
  v6 = *a2;
  v7 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  v8 = sub_1AF3E8114();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v12 = 328 * v10;
    v13 = (_QWORD *)(v11 + 328 * v10);
    v14 = *v13 == v6 && v13[1] == v7;
    if (v14 || (sub_1AF3E8030() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      sub_1AF3B6DB0((uint64_t)a2);
      v15 = (const void *)(*(_QWORD *)(*v2 + 48) + v12);
      memcpy(__dst, (const void *)(*(_QWORD *)(*v3 + 48) + v12), 0x141uLL);
      memcpy(a1, v15, 0x141uLL);
      sub_1AF3B6C90((uint64_t)__dst);
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v12 = 328 * v10;
      v18 = (_QWORD *)(v11 + 328 * v10);
      v19 = *v18 == v6 && v18[1] == v7;
      if (v19 || (sub_1AF3E8030() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __dst[0] = *v2;
  *v2 = 0x8000000000000000;
  sub_1AF3B6C90((uint64_t)a2);
  sub_1AF3ACE6C(a2, v10, isUniquelyReferenced_nonNull_native);
  *v2 = __dst[0];
  swift_bridgeObjectRelease();
  memcpy(a1, a2, 0x141uLL);
  return 1;
}

uint64_t sub_1AF3ABD5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAA0);
  v3 = sub_1AF3E7DC0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1AF3E80D8();
      sub_1AF3E7940();
      result = sub_1AF3E8114();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1AF3AC038()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BB78);
  v3 = sub_1AF3E7DC0();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1AF3AC484);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1AF3E80D8();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1AF3AC4B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  _BYTE __src[305];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA88);
  v3 = sub_1AF3E7DC0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v29 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v29)
          goto LABEL_33;
        v16 = v30[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v29)
            goto LABEL_33;
          v16 = v30[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v29)
              goto LABEL_33;
            v16 = v30[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v29)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v29)
                    goto LABEL_33;
                  v16 = v30[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 328 * v14);
      v19 = *v18;
      v20 = v18[1];
      memcpy(__src, v18 + 2, sizeof(__src));
      sub_1AF3E80D8();
      swift_bridgeObjectRetain();
      sub_1AF3E7940();
      swift_bridgeObjectRelease();
      result = sub_1AF3E8114();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v8 + 8 * (v22 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v8 + 8 * v23);
        }
        while (v27 == -1);
        v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 328 * v11);
      *v12 = v19;
      v12[1] = v20;
      result = (uint64_t)memcpy(v12 + 2, __src, 0x131uLL);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1AF3AC7D8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1AF3ABD5C();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1AF3AD04C();
      goto LABEL_22;
    }
    sub_1AF3AD568();
  }
  v11 = *v4;
  sub_1AF3E80D8();
  sub_1AF3E7940();
  result = sub_1AF3E8114();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1AF3E8030(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1AF3E8060();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1AF3E8030();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1AF3AC970(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1AF3AC038();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_1AF3AD1FC();
        goto LABEL_10;
      }
      sub_1AF3AD814();
    }
    v8 = *v3;
    sub_1AF3E80D8();
    sub_1AF33C784(v5);
    sub_1AF3E7940();
    swift_bridgeObjectRelease();
    result = sub_1AF3E8114();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1AF3ACDF8);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

uint64_t sub_1AF3ACE6C(uint64_t *__src, unint64_t i, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_21;
  if ((a3 & 1) != 0)
  {
    sub_1AF3AC4B0();
  }
  else
  {
    if (v8 > v7)
    {
      sub_1AF3AD38C();
      goto LABEL_21;
    }
    sub_1AF3ADC58();
  }
  v9 = *v3;
  sub_1AF3E80D8();
  v10 = *__src;
  v11 = __src[1];
  swift_bridgeObjectRetain();
  sub_1AF3E7940();
  swift_bridgeObjectRelease();
  v12 = sub_1AF3E8114();
  v13 = -1 << *(_BYTE *)(v9 + 32);
  i = v12 & ~v13;
  v14 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v15 = *(_QWORD *)(v9 + 48);
    v16 = (_QWORD *)(v15 + 328 * i);
    v17 = *v16 == v10 && v16[1] == v11;
    if (v17 || (sub_1AF3E8030() & 1) != 0)
      goto LABEL_24;
    v18 = ~v13;
    for (i = (i + 1) & v18; ((*(_QWORD *)(v14 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v18)
    {
      v19 = (_QWORD *)(v15 + 328 * i);
      v20 = *v19 == v10 && v19[1] == v11;
      if (v20 || (sub_1AF3E8030() & 1) != 0)
        goto LABEL_24;
    }
  }
LABEL_21:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (i >> 6) + 56) |= 1 << i;
  result = (uint64_t)memcpy((void *)(*(_QWORD *)(v21 + 48) + 328 * i), __src, 0x141uLL);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_24:
  result = sub_1AF3E8060();
  __break(1u);
  return result;
}

void *sub_1AF3AD04C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAA0);
  v2 = *v0;
  v3 = sub_1AF3E7DB4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1AF3AD1FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BB78);
  v2 = *v0;
  v3 = sub_1AF3E7DB4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1AF3AD38C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _BYTE v21[336];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BA88);
  v2 = *v0;
  v3 = sub_1AF3E7DB4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 328 * v15;
    v17 = (const void *)(*(_QWORD *)(v2 + 48) + 328 * v15);
    memcpy(v21, v17, 0x141uLL);
    memmove((void *)(*(_QWORD *)(v4 + 48) + v16), v17, 0x141uLL);
    result = (void *)sub_1AF3B6C90((uint64_t)v21);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1AF3AD568()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BAA0);
  v3 = sub_1AF3E7DC0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1AF3E80D8();
    swift_bridgeObjectRetain();
    sub_1AF3E7940();
    result = sub_1AF3E8114();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1AF3AD814()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEE3BB78);
  v3 = sub_1AF3E7DC0();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1AF3ADC2CLL);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1AF3E80D8();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

