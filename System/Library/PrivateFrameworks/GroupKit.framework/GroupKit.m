uint64_t GPKProfileInformationResponse.ProfilePicture.imageData.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_retain();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

double GPKProfileInformationResponse.ProfilePicture.cropRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

_QWORD *GPKProfileInformationResponse.ProfilePicture.init(imageData:cropRect:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  _QWORD *result;
  _QWORD __b[6];

  memset(__b, 0, sizeof(__b));
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  __b[0] = a1;
  __b[1] = a2;
  *(double *)&__b[2] = a4;
  *(double *)&__b[3] = a5;
  *(double *)&__b[4] = a6;
  *(double *)&__b[5] = a7;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  outlined consume of Data._Representation(a1, a2);
  result = __b;
  outlined destroy of GPKProfileInformationResponse.ProfilePicture((uint64_t)__b);
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_release();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKProfileInformationResponse.ProfilePicture(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

BOOL static GPKProfileInformationResponse.ProfilePicture.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKProfileInformationResponse.ProfilePicture.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKProfileInformationResponse.ProfilePicture.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("imageData", 9uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cropRect", 8uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKProfileInformationResponse.ProfilePicture.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKProfileInformationResponse.ProfilePicture.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture.CodingKeys, &type metadata for GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture.CodingKeys, &type metadata for GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture.CodingKeys, &type metadata for GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture.CodingKeys, &type metadata for GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture.CodingKeys, &type metadata for GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKProfileInformationResponse.ProfilePicture.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKProfileInformationResponse.ProfilePicture.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cropRect", 8uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("imageData", 9uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKProfileInformationResponse.ProfilePicture.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return GPKProfileInformationResponse.ProfilePicture.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return GPKProfileInformationResponse.ProfilePicture.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  _BYTE *v0;

  return GPKProfileInformationResponse.ProfilePicture.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKProfileInformationResponse.ProfilePicture.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return GPKProfileInformationResponse.ProfilePicture.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKProfileInformationResponse.ProfilePicture.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKProfileInformationResponse.ProfilePicture.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[4];
  char v27;
  _QWORD v28[2];
  uint64_t *v29;
  _QWORD *v30;

  v7 = a1;
  v30 = 0;
  v29 = 0;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKProfileInformationResponse.ProfilePicture.CodingKeys>);
  v8 = *(_QWORD *)(v20 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (char *)v5 - v9;
  v30 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v17 = *v1;
  v18 = v1[1];
  v10 = v1[2];
  v11 = v1[3];
  v12 = v1[4];
  v13 = v1[5];
  v29 = v1;
  v14 = v30[3];
  v15 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v14);
  lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined copy of Data._Representation(v17, v18);
  v22 = v28;
  v28[0] = v17;
  v28[1] = v18;
  v19 = &v27;
  v27 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  v2 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v5[1] = v24;
    outlined destroy of Data((uint64_t)v28);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v20);
  }
  else
  {
    outlined destroy of Data((uint64_t)v28);
    v5[5] = v26;
    v26[0] = v10;
    v26[1] = v11;
    v26[2] = v12;
    v26[3] = v13;
    v5[3] = &v25;
    v25 = 1;
    v5[4] = type metadata accessor for CGRect();
    lazy protocol witness table accessor for type CGRect and conformance CGRect();
    v3 = v23;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v5[6] = v3;
    v6 = v3;
    if (v3)
      v5[0] = v6;
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v20);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x2426331B4]((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCDE08], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCDE48], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCDE60], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCDE28], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Data(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t type metadata accessor for CGRect()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CGRect;
  if (!lazy cache variable for type metadata for CGRect)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CGRect);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CGRect and conformance CGRect()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CGRect and conformance CGRect;
  if (!lazy protocol witness table cache variable for type CGRect and conformance CGRect)
  {
    v0 = type metadata accessor for CGRect();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDBD828], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CGRect and conformance CGRect;
  if (!lazy protocol witness table cache variable for type CGRect and conformance CGRect)
  {
    v0 = type metadata accessor for CGRect();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDBD838], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect);
    return v1;
  }
  return v3;
}

_QWORD *GPKProfileInformationResponse.ProfilePicture.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD v52[6];
  char v53;

  v32 = a2;
  v33 = a1;
  v51 = 0;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKProfileInformationResponse.ProfilePicture.CodingKeys>);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v37 = (char *)&v13 - v36;
  v53 = 0;
  v51 = (_QWORD *)MEMORY[0x24BDAC7A8](v33);
  v39 = v51[3];
  v40 = v51[4];
  __swift_project_boxed_opaque_existential_1(v51, v39);
  lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
  v2 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v41 = v2;
  v42 = v2;
  if (v2)
  {
    v16 = v42;
  }
  else
  {
    v29 = &v48;
    v48 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    v3 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30 = v3;
    v31 = v3;
    if (v3)
    {
      v15 = v31;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      v16 = v15;
    }
    else
    {
      v22 = v49;
      v23 = v50;
      v24 = 1;
      v53 = 1;
      outlined copy of Data._Representation(v49, v50);
      v52[0] = v22;
      v52[1] = v23;
      v26 = type metadata accessor for CGRect();
      v25 = &v43;
      v43 = v24;
      lazy protocol witness table accessor for type CGRect and conformance CGRect();
      v4 = v30;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v27 = v4;
      v28 = v4;
      if (!v4)
      {
        v17 = v44;
        v18 = v45;
        v19 = v46;
        v20 = v47;
        v21 = v52;
        v52[2] = v44;
        v52[3] = v45;
        v52[4] = v46;
        v52[5] = v47;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
        v5 = v23;
        v6 = v17;
        v7 = v18;
        v8 = v19;
        v9 = v32;
        v10 = v20;
        v11 = v33;
        *v32 = v22;
        v9[1] = v5;
        v9[2] = v6;
        v9[3] = v7;
        v9[4] = v8;
        v9[5] = v10;
        __swift_destroy_boxed_opaque_existential_1(v11);
        result = v21;
        outlined destroy of GPKProfileInformationResponse.ProfilePicture((uint64_t)v21);
        return result;
      }
      v14 = v28;
      outlined consume of Data._Representation(v22, v23);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      v16 = v14;
    }
  }
  v13 = v16;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v33);
  if ((v53 & 1) != 0)
  {
    result = v52;
    outlined destroy of Data((uint64_t)v52);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance GPKProfileInformationResponse.ProfilePicture@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return GPKProfileInformationResponse.ProfilePicture.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKProfileInformationResponse.ProfilePicture(uint64_t a1)
{
  return GPKProfileInformationResponse.ProfilePicture.encode(to:)(a1);
}

uint64_t key path getter for GPKProfileInformationResponse.name : GPKProfileInformationResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  v5 = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v4 - v6;
  v7 = *(_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v2 = swift_retain();
  v11 = v7;
  v10 = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v2);
  outlined init with take of PersonNameComponents?(v8, v9);
  return swift_release();
}

uint64_t key path setter for GPKProfileInformationResponse.name : GPKProfileInformationResponse(uint64_t a1, uint64_t *a2)
{
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1;
  v7 = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (const void *)MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t)&v4 - v6;
  outlined init with copy of PersonNameComponents?(v2, (char *)&v4 - v6);
  v9 = *v7;
  swift_retain();
  v11 = v9;
  v10 = v9;
  GPKProfileInformationResponse.name.setter(v8);
  return swift_release();
}

uint64_t GPKProfileInformationResponse.name.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;

  v3 = (const void *)(v1 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_name);
  swift_beginAccess();
  outlined init with copy of PersonNameComponents?(v3, a1);
  return swift_endAccess();
}

void *outlined init with copy of PersonNameComponents?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for PersonNameComponents();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t GPKProfileInformationResponse.name.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  const void *v10;

  v7 = a1;
  v10 = 0;
  v9 = 0;
  v3 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (char *)&v3 - v3;
  v10 = (const void *)MEMORY[0x24BDAC7A8](v7);
  v9 = v1;
  outlined init with copy of PersonNameComponents?(v10, (char *)&v3 - v3);
  v5 = (void *)(v1 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_name);
  v6 = &v8;
  swift_beginAccess();
  outlined assign with take of PersonNameComponents?(v4, v5);
  swift_endAccess();
  return outlined destroy of PersonNameComponents?(v7);
}

void *outlined assign with take of PersonNameComponents?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for PersonNameComponents();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for PersonNameComponents();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t (*GPKProfileInformationResponse.name.modify())()
{
  swift_beginAccess();
  return GPKProfileInformationResponse.name.modify;
}

uint64_t GPKProfileInformationResponse.name.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKProfileInformationResponse.profilePicture : GPKProfileInformationResponse@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v11[7];

  v9 = *a1;
  v2 = swift_retain();
  v11[6] = v9;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 120))(v11, v2);
  v3 = v11[1];
  v4 = v11[2];
  v5 = v11[3];
  v6 = v11[4];
  v7 = v11[5];
  *a2 = v11[0];
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  return swift_release();
}

uint64_t key path setter for GPKProfileInformationResponse.profilePicture : GPKProfileInformationResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[7];
  _QWORD v12[6];

  outlined init with copy of GPKProfileInformationResponse.ProfilePicture?(a1, v12);
  v5 = v12[0];
  v6 = v12[1];
  v7 = v12[2];
  v8 = v12[3];
  v9 = v12[4];
  v10 = v12[5];
  v4 = *a2;
  swift_retain();
  v11[6] = v4;
  v11[0] = v5;
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v11[4] = v9;
  v11[5] = v10;
  GPKProfileInformationResponse.profilePicture.setter(v11);
  return swift_release();
}

uint64_t GPKProfileInformationResponse.profilePicture.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_profilePicture);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v10 = v3[5];
  outlined copy of GPKProfileInformationResponse.ProfilePicture?(*v3, v5);
  result = swift_endAccess();
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v10;
  return result;
}

uint64_t outlined copy of GPKProfileInformationResponse.ProfilePicture?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

uint64_t GPKProfileInformationResponse.profilePicture.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD __b[6];

  memset(__b, 0, sizeof(__b));
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v12 = a1[5];
  __b[0] = v7;
  __b[1] = v8;
  __b[2] = v9;
  __b[3] = v10;
  __b[4] = v11;
  __b[5] = v12;
  outlined copy of GPKProfileInformationResponse.ProfilePicture?(v7, v8);
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_profilePicture);
  swift_beginAccess();
  v2 = *v6;
  v3 = v6[1];
  *v6 = v7;
  v6[1] = v8;
  v6[2] = v9;
  v6[3] = v10;
  v6[4] = v11;
  v6[5] = v12;
  outlined consume of GPKProfileInformationResponse.ProfilePicture?(v2, v3);
  swift_endAccess();
  return outlined consume of GPKProfileInformationResponse.ProfilePicture?(v7, v8);
}

uint64_t outlined consume of GPKProfileInformationResponse.ProfilePicture?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(result, a2);
  return result;
}

uint64_t (*GPKProfileInformationResponse.profilePicture.modify())()
{
  swift_beginAccess();
  return GPKProfileInformationResponse.profilePicture.modify;
}

uint64_t GPKProfileInformationResponse.profilePicture.modify()
{
  return swift_endAccess();
}

uint64_t GPKProfileInformationResponse.__allocating_init()()
{
  swift_allocObject();
  return GPKProfileInformationResponse.init()();
}

uint64_t GPKProfileInformationResponse.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_name;
  v1 = type metadata accessor for PersonNameComponents();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0 + v4, 1);
  result = v5;
  v3 = (_QWORD *)(v5 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_profilePicture);
  *v3 = 0;
  v3[1] = 0xF000000000000000;
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  return result;
}

uint64_t GPKProfileInformationResponse.setName(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  v4 = a1;
  v8 = 0;
  v7 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (uint64_t)&v3 - v5;
  v8 = (const void *)MEMORY[0x24BDAC7A8](v4);
  v7 = v1;
  outlined init with copy of PersonNameComponents?(v8, (char *)&v3 - v5);
  return GPKProfileInformationResponse.name.setter(v6);
}

uint64_t GPKProfileInformationResponse.setProfilePicture(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[6];
  uint64_t v11;
  _QWORD __b[6];

  memset(__b, 0, sizeof(__b));
  v11 = 0;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  __b[0] = v4;
  __b[1] = v5;
  __b[2] = v6;
  __b[3] = v7;
  __b[4] = v8;
  __b[5] = v9;
  v11 = v1;
  outlined copy of GPKProfileInformationResponse.ProfilePicture?(v4, v5);
  v10[0] = v4;
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  v10[5] = v9;
  return GPKProfileInformationResponse.profilePicture.setter(v10);
}

BOOL static GPKProfileInformationResponse.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKProfileInformationResponse.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKProfileInformationResponse.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("profilePicture", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKProfileInformationResponse.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKProfileInformationResponse.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.CodingKeys, &type metadata for GPKProfileInformationResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.CodingKeys, &type metadata for GPKProfileInformationResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.CodingKeys, &type metadata for GPKProfileInformationResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.CodingKeys, &type metadata for GPKProfileInformationResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.CodingKeys, &type metadata for GPKProfileInformationResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKProfileInformationResponse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKProfileInformationResponse.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("profilePicture", 0xEuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKProfileInformationResponse.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKProfileInformationResponse.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKProfileInformationResponse.CodingKeys()
{
  return GPKProfileInformationResponse.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKProfileInformationResponse.CodingKeys()
{
  return GPKProfileInformationResponse.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKProfileInformationResponse.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKProfileInformationResponse.CodingKeys()
{
  _BYTE *v0;

  return GPKProfileInformationResponse.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKProfileInformationResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKProfileInformationResponse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKProfileInformationResponse.CodingKeys()
{
  return GPKProfileInformationResponse.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKProfileInformationResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKProfileInformationResponse.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKProfileInformationResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKProfileInformationResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKProfileInformationResponse.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of PersonNameComponents?(v0 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_name);
  outlined destroy of GPKProfileInformationResponse.ProfilePicture?(v0 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_profilePicture);
  return v2;
}

uint64_t outlined destroy of GPKProfileInformationResponse.ProfilePicture?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t GPKProfileInformationResponse.__deallocating_deinit()
{
  GPKProfileInformationResponse.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKProfileInformationResponse.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[6];
  _QWORD v29[6];
  char v30;
  uint64_t v31;
  _QWORD *v32;

  v13 = a1;
  v32 = 0;
  v31 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v12 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v24 = (uint64_t)v10 - v12;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKProfileInformationResponse.CodingKeys>);
  v14 = *(_QWORD *)(v21 - 8);
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)v10 - v15;
  v32 = v3;
  v31 = v1;
  v16 = v3[3];
  v17 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v16);
  lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
  v4 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 96))(v4);
  v20 = &v30;
  v30 = 0;
  v22 = type metadata accessor for PersonNameComponents();
  lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  v5 = v23;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v25 = v5;
  v26 = v5;
  if (v5)
  {
    v10[1] = v26;
    outlined destroy of PersonNameComponents?(v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v21);
  }
  else
  {
    v6 = v18;
    v7 = outlined destroy of PersonNameComponents?(v24);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v6 + 120))(v29, v7);
    v10[4] = v28;
    v28[0] = v29[0];
    v28[1] = v29[1];
    v28[2] = v29[2];
    v28[3] = v29[3];
    v28[4] = v29[4];
    v28[5] = v29[5];
    v10[3] = &v27;
    v27 = 1;
    lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture();
    v8 = v25;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v10[5] = v8;
    v11 = v8;
    if (v8)
      v10[0] = v11;
    outlined destroy of GPKProfileInformationResponse.ProfilePicture?((uint64_t)v28);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v21);
  }
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    v0 = type metadata accessor for PersonNameComponents();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCCC20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    v0 = type metadata accessor for PersonNameComponents();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCCC38], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture, &type metadata for GPKProfileInformationResponse.ProfilePicture);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse.ProfilePicture, &type metadata for GPKProfileInformationResponse.ProfilePicture);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture);
    return v0;
  }
  return v2;
}

uint64_t GPKProfileInformationResponse.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKProfileInformationResponse.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKProfileInformationResponse.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  v46 = (_QWORD *)a1;
  v64 = 0;
  v63 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v39 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v40 = (char *)v18 - v39;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKProfileInformationResponse.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v46);
  v47 = (char *)v18 - v43;
  v64 = v3;
  v63 = v1;
  v44 = OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_name;
  v45 = type metadata accessor for PersonNameComponents();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v1 + v44, 1);
  v4 = v46;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_profilePicture);
  *v5 = 0;
  v5[1] = 0xF000000000000000;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v49 = v4[3];
  v50 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v49);
  lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
  v6 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v51 = v6;
  v52 = v6;
  if (v6)
  {
    v21 = v52;
  }
  else
  {
    v35 = &v62;
    v62 = 0;
    lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
    v7 = v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v36 = v7;
    v37 = v7;
    if (v7)
    {
      v20 = v37;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v41);
      v21 = v20;
    }
    else
    {
      v30 = (void *)(v38 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_name);
      v31 = &v61;
      swift_beginAccess();
      outlined assign with take of PersonNameComponents?(v40, v30);
      swift_endAccess();
      v32 = &v54;
      v54 = 1;
      lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture and conformance GPKProfileInformationResponse.ProfilePicture();
      v8 = v36;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v33 = v8;
      v34 = v8;
      if (!v8)
      {
        v22 = v55;
        v23 = v56;
        v24 = v57;
        v25 = v58;
        v26 = v59;
        v28 = v60;
        v27 = (uint64_t *)(v38 + OBJC_IVAR____TtC8GroupKit29GPKProfileInformationResponse_profilePicture);
        v29 = &v53;
        swift_beginAccess();
        v9 = v23;
        v10 = v24;
        v11 = v25;
        v12 = v26;
        v13 = v27;
        v14 = v28;
        v15 = *v27;
        v16 = v27[1];
        *v27 = v22;
        v13[1] = v9;
        v13[2] = v10;
        v13[3] = v11;
        v13[4] = v12;
        v13[5] = v14;
        outlined consume of GPKProfileInformationResponse.ProfilePicture?(v15, v16);
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v41);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
        return v38;
      }
      v19 = v34;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v41);
      v21 = v19;
    }
  }
  v18[0] = v21;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v18[1];
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKProfileInformationResponse@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 176))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKProfileInformationResponse()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t ObjC metadata update function for GPKProfileInformationResponse()
{
  return type metadata accessor for GPKProfileInformationResponse();
}

uint64_t type metadata accessor for GPKProfileInformationResponse()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKProfileInformationResponse;
  if (!type metadata singleton initialization cache for GPKProfileInformationResponse)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for GPKProfileInformationResponse()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for PersonNameComponents?();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t method lookup function for GPKProfileInformationResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.profilePicture.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.setName(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.setProfilePicture(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of GPKProfileInformationResponse.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata accessor for PersonNameComponents?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for PersonNameComponents?;
  if (!lazy cache variable for type metadata for PersonNameComponents?)
  {
    type metadata accessor for PersonNameComponents();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for PersonNameComponents?);
      return v1;
    }
  }
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for GPKProfileInformationResponse.ProfilePicture(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GPKProfileInformationResponse.ProfilePicture(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

__n128 initializeWithCopy for GPKProfileInformationResponse.ProfilePicture(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

double assignWithCopy for GPKProfileInformationResponse.ProfilePicture(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double result;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  outlined consume of Data._Representation(v2, v3);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x30uLL);
}

double assignWithTake for GPKProfileInformationResponse.ProfilePicture(uint64_t a1, double *a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double result;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(double *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  outlined consume of Data._Representation(v5, v6);
  *(double *)(a1 + 16) = a2[2];
  *(double *)(a1 + 24) = a2[3];
  *(double *)(a1 + 32) = a2[4];
  result = a2[5];
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GPKProfileInformationResponse.ProfilePicture(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = ~(((*(_QWORD *)(a1 + 8) >> 60) >> 2) | (4 * (*(_QWORD *)(a1 + 8) >> 60))) & 0xF;
      if (v2 >= 0xC)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKProfileInformationResponse.ProfilePicture(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0xC;
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GPKProfileInformationResponse.ProfilePicture()
{
  return &type metadata for GPKProfileInformationResponse.ProfilePicture;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GPKProfileInformationResponse.ProfilePicture.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKProfileInformationResponse.ProfilePicture.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKProfileInformationResponse.ProfilePicture.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKProfileInformationResponse.ProfilePicture.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return &type metadata for GPKProfileInformationResponse.ProfilePicture.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKProfileInformationResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKProfileInformationResponse.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKProfileInformationResponse.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKProfileInformationResponse.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKProfileInformationResponse.CodingKeys()
{
  return &type metadata for GPKProfileInformationResponse.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for CGRect(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 32))
      v3 = *(_QWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 32) = 0;
    else
      __break(1u);
  }
  return result;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKProfileInformationResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKProfileInformationResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKProfileInformationResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse.CodingKeys and conformance GPKProfileInformationResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKProfileInformationResponse.ProfilePicture.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse.ProfilePicture.CodingKeys and conformance GPKProfileInformationResponse.ProfilePicture.CodingKeys();
}

_QWORD *outlined init with copy of GPKProfileInformationResponse.ProfilePicture?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    memcpy(a2, a1, 0x30uLL);
  }
  else
  {
    v3 = *a1;
    v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *a2 = v3;
    a2[1] = v4;
    *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
    *((_OWORD *)a2 + 2) = *((_OWORD *)a1 + 2);
  }
  return a2;
}

void *outlined init with take of PersonNameComponents?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for PersonNameComponents();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 16))
      v3 = *(_OWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)result = (a2 - 1);
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 16) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CGSize()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CGSize;
  if (!lazy cache variable for type metadata for CGSize)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CGSize);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for CGPoint(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 16))
      v3 = *(_OWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CGPoint(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)result = (a2 - 1);
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 16) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CGPoint()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CGPoint;
  if (!lazy cache variable for type metadata for CGPoint)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CGPoint);
      return v1;
    }
  }
  return v4;
}

uint64_t GPKUserID.rawValue.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t *GPKUserID.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = a1;
  v9 = a2;
  if (Data.count.getter() == 20)
  {
    outlined copy of Data._Representation(a1, a2);
    outlined copy of Data._Representation(a1, a2);
    v10 = a1;
    v11 = a2;
    *a3 = a1;
    a3[1] = a2;
    outlined consume of Data._Representation(a1, a2);
    result = &v10;
    outlined destroy of GPKUserID((uint64_t)&v10);
  }
  else
  {
    type metadata accessor for InternalError();
    v7 = 92;
    InternalError.__allocating_init(_:internalInfo:)(&v7, 0);
    swift_willThrow();
    return (uint64_t *)outlined consume of Data._Representation(a1, a2);
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKUserID(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t GPKUserID.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v12 = 0;
  v13 = 0;
  v7 = v0[1];
  v15 = *v0;
  v6 = v15;
  v16 = v7;
  v1 = _allocateUninitializedArray<A>(_:)();
  *v2 = 6;
  v2[1] = 8;
  v2[2] = 16;
  v2[3] = 20;
  v2[4] = 24;
  v2[5] = 28;
  _finalizeUninitializedArray<A>(_:)();
  v14 = v1;
  outlined copy of Data._Representation(v6, v7);
  v11[0] = v6;
  v11[1] = v7;
  v8 = GPKUserID.hexString.getter();
  v9 = v3;
  outlined destroy of GPKUserID((uint64_t)v11);
  v12 = v8;
  v13 = v9;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.reversed()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[Int]>);
  ReversedCollection.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[Int]>.Iterator);
    ReversedCollection.Iterator.next()();
    if ((v10 & 1) != 0)
      break;
    Character.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.startIndex.getter();
    swift_bridgeObjectRelease();
    String.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    String.insert(_:at:)();
    swift_bridgeObjectRelease();
  }
  outlined destroy of ReversedCollection<[Int]>.Iterator();
  v5 = v12;
  swift_bridgeObjectRetain();
  outlined destroy of String();
  swift_bridgeObjectRelease();
  return v5;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  type metadata accessor for Array();
  Array._endMutation()();
}

uint64_t GPKUserID.hexString.getter()
{
  uint64_t *v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *v0;
  v3 = v0[1];
  outlined copy of Data._Representation(*v0, v3);
  v4 = Data.hexString.getter();
  outlined consume of Data._Representation(v2, v3);
  return v4;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ReversedCollection<[Int]>.Iterator()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String()
{
  swift_bridgeObjectRelease();
}

_QWORD *GPKUserID.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v23 = 0;
  v24 = 0;
  v15 = 0;
  v16 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a1;
  v20 = a2;
  v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  lazy protocol witness table accessor for type String and conformance String();
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v9 = v3;
  outlined destroy of String();
  outlined destroy of String();
  v11 = Data.init(hexString:)(v10, v9);
  v12 = v4;
  if ((v4 & 0xF000000000000000) != 0xF000000000000000)
  {
    v15 = v11;
    v16 = v4;
    outlined copy of Data._Representation(v11, v4);
    GPKUserID.init(_:)(v11, v12, &v13);
    v6 = v13;
    v7 = v14;
    if ((v14 & 0xF000000000000000) != 0xF000000000000000)
    {
      outlined copy of Data._Representation(v13, v14);
      v23 = v6;
      v24 = v7;
      outlined consume of Data._Representation(v11, v12);
      *a3 = v6;
      a3[1] = v7;
      swift_bridgeObjectRelease();
      result = &v23;
      outlined destroy of GPKUserID((uint64_t)&v23);
      return result;
    }
    outlined consume of GPKUserID?(v13, v14);
    outlined consume of Data._Representation(v11, v12);
  }
  result = (_QWORD *)swift_bridgeObjectRelease();
  *a3 = 0;
  a3[1] = 0xF000000000000000;
  return result;
}

uint64_t default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

uint64_t outlined consume of GPKUserID?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(result, a2);
  return result;
}

uint64_t *GPKUserID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v18)
  {
    __swift_project_boxed_opaque_existential_1(v19, v20);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    lazy protocol witness table accessor for type String and conformance String();
    default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v13 = v2;
    outlined destroy of String();
    outlined destroy of String();
    outlined destroy of String();
    swift_bridgeObjectRetain();
    v14 = Data.init(hexString:)(v12, v13);
    v15 = v3;
    if ((v3 & 0xF000000000000000) != 0xF000000000000000)
    {
      outlined copy of Data._Representation(v14, v3);
      outlined copy of Data._Representation(v14, v15);
      v23 = v14;
      v24 = v15;
      outlined consume of Data._Representation(v14, v15);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      *a2 = v14;
      a2[1] = v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      result = &v23;
      outlined destroy of GPKUserID((uint64_t)&v23);
      return result;
    }
    v11 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v4;
    v9 = v20;
    v8 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    MEMORY[0x242632D70](v9, v8);
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Could not decode GPKUserID from ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v11 - 8) + 104))(v10, *MEMORY[0x24BEE26D8]);
    swift_willThrow();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  return (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultStringInterpolation()
{
  swift_bridgeObjectRelease();
}

uint64_t GPKUserID.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v8 = 0;
  v9 = 0;
  v10 = a1;
  v4 = v1[1];
  v8 = *v1;
  v3 = v8;
  v9 = v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  outlined copy of Data._Representation(v3, v4);
  v5[0] = v3;
  v5[1] = v4;
  GPKUserID.hexString.getter();
  outlined destroy of GPKUserID((uint64_t)v5);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

_QWORD *GPKUserID.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[2];
  uint64_t *v6;
  uint64_t v7;

  v6 = 0;
  v7 = a1;
  v3 = *v1;
  v4 = v1[1];
  v6 = v1;
  outlined copy of Data._Representation(v3, v4);
  v5[0] = v3;
  v5[1] = v4;
  lazy protocol witness table accessor for type Data and conformance Data();
  Hasher.combine<A>(_:)();
  result = v5;
  outlined destroy of Data((uint64_t)v5);
  return result;
}

BOOL static GPKUserID.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v5 = *a1;
  v6 = a1[1];
  v4 = *a2;
  v3 = a2[1];
  outlined copy of Data._Representation(*a1, v6);
  outlined copy of Data._Representation(v4, v3);
  v7 = MEMORY[0x2426320A4](v5, v6, v4, v3);
  outlined consume of Data._Representation(v4, v3);
  outlined consume of Data._Representation(v5, v6);
  return (v7 & 1) != 0;
}

uint64_t GPKUserID.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUserID, &type metadata for GPKUserID);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUserID, &type metadata for GPKUserID);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUserID, &type metadata for GPKUserID);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUserID, &type metadata for GPKUserID);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v0;
  }
  return v2;
}

uint64_t *protocol witness for Decodable.init(from:) in conformance GPKUserID@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GPKUserID.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKUserID(_QWORD *a1)
{
  return GPKUserID.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKUserID()
{
  return GPKUserID.hashValue.getter();
}

_QWORD *protocol witness for Hashable.hash(into:) in conformance GPKUserID(uint64_t a1)
{
  return GPKUserID.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKUserID(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKUserID()
{
  return GPKUserID.description.getter();
}

unint64_t base witness table accessor for Equatable in GPKUserID()
{
  return lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKUserID(uint64_t *a1, uint64_t *a2)
{
  return static GPKUserID.== infix(_:_:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for GPKUserID(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  result = a1;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t destroy for GPKUserID(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *initializeWithCopy for GPKUserID(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  result = a1;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t *assignWithCopy for GPKUserID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  v2 = *a1;
  v3 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  outlined consume of Data._Representation(v2, v3);
  return a1;
}

uint64_t *assignWithTake for GPKUserID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKUserID(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v5;

  if (a2)
  {
    if (a2 > 0xC && *(_BYTE *)(a1 + 16))
    {
      v5 = *(_OWORD *)a1 + 12;
    }
    else
    {
      v2 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
      v3 = 15 - (((4 * v2) | (v2 >> 2)) & 0xF);
      if (v3 >= 0xC)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKUserID(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0xC;
  if (a2 > 0xC)
  {
    *(_OWORD *)result = a2 - 13;
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GPKUserID()
{
  return &type metadata for GPKUserID;
}

Swift::Void __swiftcall Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

void GPKGroup.JoinState.description.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D204248()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pending", 7uLL, 1)._countAndFlagsBits;
}

GroupKit::GPKGroup::JoinState_optional __swiftcall GPKGroup.JoinState.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v3;

  switch(rawValue)
  {
    case 0:
      v3 = 0;
LABEL_14:
      *v1 = v3;
      return (GroupKit::GPKGroup::JoinState_optional)rawValue;
    case 1:
      v3 = 1;
      goto LABEL_14;
    case 2:
      v3 = 2;
      goto LABEL_14;
    case 3:
      v3 = 3;
      goto LABEL_14;
    case 4:
      v3 = 4;
      goto LABEL_14;
    case 5:
      v3 = 5;
      goto LABEL_14;
  }
  *v1 = 6;
  return (GroupKit::GPKGroup::JoinState_optional)rawValue;
}

void GPKGroup.JoinState.rawValue.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D2044AC()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroup.JoinState()
{
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.JoinState, &type metadata for GPKGroup.JoinState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.JoinState, &type metadata for GPKGroup.JoinState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.JoinState, &type metadata for GPKGroup.JoinState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.JoinState, &type metadata for GPKGroup.JoinState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.JoinState, &type metadata for GPKGroup.JoinState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.JoinState, &type metadata for GPKGroup.JoinState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroup.JoinState()
{
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroup.JoinState()
{
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroup.JoinState()
{
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::GPKGroup::JoinState_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GPKGroup.JoinState(Swift::Int64 *a1)
{
  return GPKGroup.JoinState.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GPKGroup.JoinState(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GPKGroup.JoinState.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroup.JoinState()
{
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroup.JoinState()
{
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for CustomStringConvertible.description.getter in conformance GPKGroup.JoinState()
{
  GPKGroup.JoinState.description.getter();
}

BOOL GPKGroup.Mode.init(rawValue:)(uint64_t a1)
{
  if (!a1)
    return 0;
  return a1 == 1;
}

uint64_t GPKGroup.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::Int v7;
  unsigned __int8 v8;

  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "id";
  *(_QWORD *)(v3 + 8) = 2;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "members";
  *(_QWORD *)(v3 + 32) = 7;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "creationDate";
  *(_QWORD *)(v3 + 56) = 12;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "lastModified";
  *(_QWORD *)(v3 + 80) = 12;
  *(_BYTE *)(v3 + 88) = 2;
  *(_QWORD *)(v3 + 96) = "photoData";
  *(_QWORD *)(v3 + 104) = 9;
  *(_BYTE *)(v3 + 112) = 2;
  *(_QWORD *)(v3 + 120) = "displayName";
  *(_QWORD *)(v3 + 128) = 11;
  *(_BYTE *)(v3 + 136) = 2;
  *(_QWORD *)(v3 + 144) = "version";
  *(_QWORD *)(v3 + 152) = 7;
  *(_BYTE *)(v3 + 160) = 2;
  *(_QWORD *)(v3 + 168) = "groupDomain";
  *(_QWORD *)(v3 + 176) = 11;
  *(_BYTE *)(v3 + 184) = 2;
  *(_QWORD *)(v3 + 192) = "objectID";
  *(_QWORD *)(v3 + 200) = 8;
  *(_BYTE *)(v3 + 208) = 2;
  *(_QWORD *)(v3 + 216) = "joinState";
  *(_QWORD *)(v3 + 224) = 9;
  *(_BYTE *)(v3 + 232) = 2;
  *(_QWORD *)(v3 + 240) = "invitationID";
  *(_QWORD *)(v3 + 248) = 12;
  *(_BYTE *)(v3 + 256) = 2;
  *(_QWORD *)(v3 + 264) = "invitationBlob";
  *(_QWORD *)(v3 + 272) = 14;
  *(_BYTE *)(v3 + 280) = 2;
  *(_QWORD *)(v3 + 288) = "invitationSenderHandle";
  *(_QWORD *)(v3 + 296) = 22;
  *(_BYTE *)(v3 + 304) = 2;
  *(_QWORD *)(v3 + 312) = "lastKnownRSVPQueueSeqNumber";
  *(_QWORD *)(v3 + 320) = 27;
  *(_BYTE *)(v3 + 328) = 2;
  *(_QWORD *)(v3 + 336) = "groupMode";
  *(_QWORD *)(v3 + 344) = 9;
  *(_BYTE *)(v3 + 352) = 2;
  *(_QWORD *)(v3 + 360) = "metaData";
  *(_QWORD *)(v3 + 368) = 8;
  *(_BYTE *)(v3 + 376) = 2;
  *(_QWORD *)(v3 + 384) = "metaDataHashAtInitialization";
  *(_QWORD *)(v3 + 392) = 28;
  *(_BYTE *)(v3 + 400) = 2;
  *(_QWORD *)(v3 + 408) = "hasUnsavedGroupPropertyChanges";
  *(_QWORD *)(v3 + 416) = 30;
  *(_BYTE *)(v3 + 424) = 2;
  *(_QWORD *)(v3 + 432) = "groupBlob";
  *(_QWORD *)(v3 + 440) = 9;
  *(_BYTE *)(v3 + 448) = 2;
  *(_QWORD *)(v3 + 456) = "invitationGroupVersion";
  *(_QWORD *)(v3 + 464) = 22;
  *(_BYTE *)(v3 + 472) = 2;
  *(_QWORD *)(v3 + 480) = "managedMembers";
  *(_QWORD *)(v3 + 488) = 14;
  *(_BYTE *)(v3 + 496) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_44:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_44;
    case 2:
      v8 = 2;
      goto LABEL_44;
    case 3:
      v8 = 3;
      goto LABEL_44;
    case 4:
      v8 = 4;
      goto LABEL_44;
    case 5:
      v8 = 5;
      goto LABEL_44;
    case 6:
      v8 = 6;
      goto LABEL_44;
    case 7:
      v8 = 7;
      goto LABEL_44;
    case 8:
      v8 = 8;
      goto LABEL_44;
    case 9:
      v8 = 9;
      goto LABEL_44;
    case 10:
      v8 = 10;
      goto LABEL_44;
    case 11:
      v8 = 11;
      goto LABEL_44;
    case 12:
      v8 = 12;
      goto LABEL_44;
    case 13:
      v8 = 13;
      goto LABEL_44;
    case 14:
      v8 = 14;
      goto LABEL_44;
    case 15:
      v8 = 15;
      goto LABEL_44;
    case 16:
      v8 = 16;
      goto LABEL_44;
    case 17:
      v8 = 17;
      goto LABEL_44;
    case 18:
      v8 = 18;
      goto LABEL_44;
    case 19:
      v8 = 19;
      goto LABEL_44;
    case 20:
      v8 = 20;
      goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  return 21;
}

uint64_t GPKGroup.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GPKGroup.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 21)
    return 21;
  else
    return v6;
}

uint64_t GPKGroup.CodingKeys.init(intValue:)()
{
  return 21;
}

uint64_t GPKGroup.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKGroup.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D204F8C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("id", 2uLL, 1)._countAndFlagsBits;
}

void GPKGroup.CodingKeys.stringValue.getter(char a1)
{
  GPKGroup.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroup.Mode()
{
  lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroup.Mode()
{
  lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroup.Mode()
{
  lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroup.Mode()
{
  lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance GPKGroup.Mode@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  char v3;

  result = GPKGroup.Mode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GPKGroup.Mode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GPKGroup.Mode.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroup.Mode()
{
  lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroup.Mode()
{
  lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroup.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.CodingKeys, &type metadata for GPKGroup.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.CodingKeys, &type metadata for GPKGroup.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.CodingKeys, &type metadata for GPKGroup.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.CodingKeys, &type metadata for GPKGroup.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.CodingKeys, &type metadata for GPKGroup.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroup.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroup.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroup.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GPKGroup.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GPKGroup.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GPKGroup.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  GPKGroup.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKGroup.CodingKeys()
{
  char *v0;

  GPKGroup.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroup.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GPKGroup.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroup.CodingKeys()
{
  return GPKGroup.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroup.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroup.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroup.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroup.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t key path getter for GPKGroup.photoData : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 240))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKGroup.photoData : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of Data?(a1, (uint64_t)v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(v4, v6);
  return swift_release();
}

uint64_t GPKGroup.photoData.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data?(v2, *(_QWORD *)(v0 + 24));
  swift_endAccess();
  return v2;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

uint64_t GPKGroup.photoData.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data?(a1, a2);
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data?(v3, v4);
  swift_endAccess();
  return outlined consume of Data?(a1, a2);
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(result, a2);
  return result;
}

uint64_t (*GPKGroup.photoData.modify())()
{
  swift_beginAccess();
  return GPKGroup.photoData.modify;
}

uint64_t GPKGroup.photoData.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.displayName : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 264))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKGroup.displayName : GPKGroup(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 272))(v4, v6);
  return swift_release();
}

uint64_t GPKGroup.displayName.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKGroup.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKGroup.displayName.modify())()
{
  swift_beginAccess();
  return GPKGroup.displayName.modify;
}

uint64_t GPKGroup.displayName.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.groupDomain : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 288))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKGroup.groupDomain : GPKGroup(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 296))(v4, v6);
  return swift_release();
}

uint64_t GPKGroup.groupDomain.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKGroup.groupDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKGroup.groupDomain.modify())()
{
  swift_beginAccess();
  return GPKGroup.groupDomain.modify;
}

uint64_t GPKGroup.groupDomain.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.groupID : GPKGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  v5 = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (uint64_t)&v4 - v6;
  v7 = *(_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v2 = swift_retain();
  v11 = v7;
  v10 = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 312))(v2);
  outlined init with take of GPKGroupID(v8, v9);
  return swift_release();
}

uint64_t key path setter for GPKGroup.groupID : GPKGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1;
  v7 = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v4 - v6;
  outlined init with copy of GPKGroupID(v2, (uint64_t)&v4 - v6);
  v9 = *v7;
  swift_retain();
  v11 = v9;
  v10 = v9;
  (*(void (**)(char *))(*(_QWORD *)v9 + 320))(v8);
  return swift_release();
}

uint64_t GPKGroup.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID;
  swift_beginAccess();
  outlined init with copy of GPKGroupID(v3, a1);
  return swift_endAccess();
}

uint64_t outlined init with copy of GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t GPKGroup.groupID.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a1;
  v10 = 0;
  v9 = 0;
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (uint64_t)&v3 - v3;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v9 = v1;
  outlined init with copy of GPKGroupID(v10, (uint64_t)&v3 - v3);
  v5 = v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID;
  v6 = &v8;
  swift_beginAccess();
  outlined assign with take of GPKGroupID(v4, v5);
  swift_endAccess();
  return outlined destroy of GPKGroupID(v7);
}

uint64_t outlined assign with take of GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a2, a1);
  return a2;
}

uint64_t outlined destroy of GPKGroupID(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t (*GPKGroup.groupID.modify())()
{
  swift_beginAccess();
  return GPKGroup.groupID.modify;
}

uint64_t GPKGroup.groupID.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.members : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 336))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.members : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [GPKMember](a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 344))(v4);
  return swift_release();
}

uint64_t GPKGroup.members.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_members);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.members.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_members);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKGroup.members.modify())()
{
  swift_beginAccess();
  return GPKGroup.members.modify;
}

uint64_t GPKGroup.members.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.creationDate : GPKGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a2;
  v5 = a1;
  v11 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v2 = swift_retain();
  v13 = v7;
  v12 = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 360))(v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);
  return swift_release();
}

uint64_t key path setter for GPKGroup.creationDate : GPKGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[1] = a1;
  v7 = a2;
  v2 = type metadata accessor for Date();
  v6 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v8 = (char *)v5 - v6;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v7;
  swift_retain();
  v11 = v9;
  v10 = v9;
  (*(void (**)(char *))(*(_QWORD *)v9 + 368))(v8);
  return swift_release();
}

uint64_t GPKGroup.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_creationDate;
  swift_beginAccess();
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v4);
  return swift_endAccess();
}

uint64_t GPKGroup.creationDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v11 - 8);
  v5 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v7 = (char *)&v5 - v5;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v6 = v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_creationDate;
  v8 = &v12;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v6, v7, v11);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t (*GPKGroup.creationDate.modify())()
{
  swift_beginAccess();
  return GPKGroup.creationDate.modify;
}

uint64_t GPKGroup.creationDate.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.lastModified : GPKGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a2;
  v5 = a1;
  v11 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v2 = swift_retain();
  v13 = v7;
  v12 = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 384))(v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);
  return swift_release();
}

uint64_t key path setter for GPKGroup.lastModified : GPKGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[1] = a1;
  v7 = a2;
  v2 = type metadata accessor for Date();
  v6 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v8 = (char *)v5 - v6;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v7;
  swift_retain();
  v11 = v9;
  v10 = v9;
  (*(void (**)(char *))(*(_QWORD *)v9 + 392))(v8);
  return swift_release();
}

uint64_t GPKGroup.lastModified.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastModified;
  swift_beginAccess();
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v4);
  return swift_endAccess();
}

uint64_t GPKGroup.lastModified.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v11 - 8);
  v5 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v7 = (char *)&v5 - v5;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v6 = v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastModified;
  v8 = &v12;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v6, v7, v11);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t (*GPKGroup.lastModified.modify())()
{
  swift_beginAccess();
  return GPKGroup.lastModified.modify;
}

uint64_t GPKGroup.lastModified.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.version : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 408))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.version : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 416))(v3);
  return swift_release();
}

uint64_t GPKGroup.version.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_version);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.version.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_version);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GPKGroup.version.modify())()
{
  swift_beginAccess();
  return GPKGroup.version.modify;
}

uint64_t GPKGroup.version.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.joinState : GPKGroup@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v2 = swift_retain();
  v7 = v4;
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v4 + 432))(&v6, v2);
  *a2 = v6;
  return swift_release();
}

uint64_t key path setter for GPKGroup.joinState : GPKGroup(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  v6 = v3;
  v5 = v4;
  (*(void (**)(char *))(*(_QWORD *)v3 + 440))(&v5);
  return swift_release();
}

uint64_t GPKGroup.joinState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  char v5;

  v3 = (char *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_joinState);
  swift_beginAccess();
  v5 = *v3;
  result = swift_endAccess();
  *a1 = v5;
  return result;
}

uint64_t GPKGroup.joinState.setter(char *a1)
{
  uint64_t v1;
  _BYTE *v3;
  char v4;

  v4 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_joinState);
  swift_beginAccess();
  *v3 = v4;
  return swift_endAccess();
}

uint64_t (*GPKGroup.joinState.modify())()
{
  swift_beginAccess();
  return GPKGroup.joinState.modify;
}

uint64_t GPKGroup.joinState.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.groupMode : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 456))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.groupMode : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 464))(v3);
  return swift_release();
}

uint64_t GPKGroup.groupMode.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupMode);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.groupMode.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupMode);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GPKGroup.groupMode.modify())()
{
  swift_beginAccess();
  return GPKGroup.groupMode.modify;
}

uint64_t GPKGroup.groupMode.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.invitationID : GPKGroup@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  v5 = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v4 - v6;
  v7 = *(_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v2 = swift_retain();
  v11 = v7;
  v10 = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 480))(v2);
  outlined init with take of UUID?(v8, v9);
  return swift_release();
}

uint64_t key path setter for GPKGroup.invitationID : GPKGroup(uint64_t a1, uint64_t *a2)
{
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1;
  v7 = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (const void *)MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v4 - v6;
  outlined init with copy of UUID?(v2, (char *)&v4 - v6);
  v9 = *v7;
  swift_retain();
  v11 = v9;
  v10 = v9;
  (*(void (**)(char *))(*(_QWORD *)v9 + 488))(v8);
  return swift_release();
}

uint64_t GPKGroup.invitationID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;

  v3 = (const void *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID);
  swift_beginAccess();
  outlined init with copy of UUID?(v3, a1);
  return swift_endAccess();
}

void *outlined init with copy of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t GPKGroup.invitationID.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  const void *v10;

  v7 = a1;
  v10 = 0;
  v9 = 0;
  v3 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (char *)&v3 - v3;
  v10 = (const void *)MEMORY[0x24BDAC7A8](v7);
  v9 = v1;
  outlined init with copy of UUID?(v10, (char *)&v3 - v3);
  v5 = (void *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID);
  v6 = &v8;
  swift_beginAccess();
  outlined assign with take of UUID?(v4, v5);
  swift_endAccess();
  return outlined destroy of UUID?(v7);
}

void *outlined assign with take of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t (*GPKGroup.invitationID.modify())()
{
  swift_beginAccess();
  return GPKGroup.invitationID.modify;
}

uint64_t GPKGroup.invitationID.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.invitationBlob : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 504))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKGroup.invitationBlob : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of Data?(a1, (uint64_t)v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 512))(v4, v6);
  return swift_release();
}

uint64_t GPKGroup.invitationBlob.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob;
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  outlined copy of Data?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.invitationBlob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;

  outlined copy of Data?(a1, a2);
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob);
  swift_beginAccess();
  v3 = *v6;
  v4 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  outlined consume of Data?(v3, v4);
  swift_endAccess();
  return outlined consume of Data?(a1, a2);
}

uint64_t (*GPKGroup.invitationBlob.modify())()
{
  swift_beginAccess();
  return GPKGroup.invitationBlob.modify;
}

uint64_t GPKGroup.invitationBlob.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.lastKnownRSVPQueueSeqNumber : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 528))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.lastKnownRSVPQueueSeqNumber : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 536))(v3);
  return swift_release();
}

uint64_t GPKGroup.lastKnownRSVPQueueSeqNumber.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastKnownRSVPQueueSeqNumber);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.lastKnownRSVPQueueSeqNumber.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastKnownRSVPQueueSeqNumber);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GPKGroup.lastKnownRSVPQueueSeqNumber.modify())()
{
  swift_beginAccess();
  return GPKGroup.lastKnownRSVPQueueSeqNumber.modify;
}

uint64_t GPKGroup.lastKnownRSVPQueueSeqNumber.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.groupBlob : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 552))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKGroup.groupBlob : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of Data?(a1, (uint64_t)v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 560))(v4, v6);
  return swift_release();
}

uint64_t GPKGroup.groupBlob.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob;
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  outlined copy of Data?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.groupBlob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;

  outlined copy of Data?(a1, a2);
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob);
  swift_beginAccess();
  v3 = *v6;
  v4 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  outlined consume of Data?(v3, v4);
  swift_endAccess();
  return outlined consume of Data?(a1, a2);
}

uint64_t (*GPKGroup.groupBlob.modify())()
{
  swift_beginAccess();
  return GPKGroup.groupBlob.modify;
}

uint64_t GPKGroup.groupBlob.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.invitationGroupVersion : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 576))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.invitationGroupVersion : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 584))(v3);
  return swift_release();
}

uint64_t GPKGroup.invitationGroupVersion.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationGroupVersion);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.invitationGroupVersion.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationGroupVersion);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GPKGroup.invitationGroupVersion.modify())()
{
  swift_beginAccess();
  return GPKGroup.invitationGroupVersion.modify;
}

uint64_t GPKGroup.invitationGroupVersion.modify()
{
  return swift_endAccess();
}

uint64_t GPKGroup.adminMembers.getter()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 336))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  return _ArrayProtocol.filter(_:)();
}

uint64_t closure #1 in GPKGroup.adminMembers.getter(uint64_t *a1)
{
  char v2;
  uint64_t v3;

  v3 = 0;
  v3 = *a1;
  (*(void (**)(char *__return_ptr))(*(_QWORD *)v3 + 184))(&v2);
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type [GPKMember] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x2426331C0](255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

uint64_t key path getter for GPKGroup.metaData : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 608))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.metaData : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [String : String](a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 616))(v4);
  return swift_release();
}

uint64_t GPKGroup.metaData.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaData);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.metaData.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaData);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKGroup.metaData.modify())()
{
  swift_beginAccess();
  return GPKGroup.metaData.modify;
}

uint64_t GPKGroup.metaData.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.metaDataHashAtInitialization : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 632))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.metaDataHashAtInitialization : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 640))(v3);
  return swift_release();
}

uint64_t GPKGroup.metaDataHashAtInitialization.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaDataHashAtInitialization);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.metaDataHashAtInitialization.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaDataHashAtInitialization);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GPKGroup.metaDataHashAtInitialization.modify())()
{
  swift_beginAccess();
  return GPKGroup.metaDataHashAtInitialization.modify;
}

uint64_t GPKGroup.metaDataHashAtInitialization.modify()
{
  return swift_endAccess();
}

BOOL GPKGroup.hasUnsavedMetaDataChanges.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
  (*(void (**)(void))(*(_QWORD *)v2 + 608))();
  v3 = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  return v4 != v3;
}

uint64_t key path getter for GPKGroup.hasUnsavedGroupPropertyChanges : GPKGroup@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 664))(v2) & 1;
  return swift_release();
}

uint64_t key path setter for GPKGroup.hasUnsavedGroupPropertyChanges : GPKGroup(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 672))(v4 & 1);
  return swift_release();
}

uint64_t GPKGroup.hasUnsavedGroupPropertyChanges.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_hasUnsavedGroupPropertyChanges);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t GPKGroup.hasUnsavedGroupPropertyChanges.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_hasUnsavedGroupPropertyChanges);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

uint64_t (*GPKGroup.hasUnsavedGroupPropertyChanges.modify())()
{
  swift_beginAccess();
  return GPKGroup.hasUnsavedGroupPropertyChanges.modify;
}

uint64_t GPKGroup.hasUnsavedGroupPropertyChanges.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.invitationSenderHandle : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 688))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKGroup.invitationSenderHandle : GPKGroup(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 696))(v4, v6);
  return swift_release();
}

uint64_t GPKGroup.invitationSenderHandle.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationSenderHandle);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.invitationSenderHandle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_bridgeObjectRetain();
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationSenderHandle);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKGroup.invitationSenderHandle.modify())()
{
  swift_beginAccess();
  return GPKGroup.invitationSenderHandle.modify;
}

uint64_t GPKGroup.invitationSenderHandle.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKGroup.managedMembers : GPKGroup@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 712))(v2);
  return swift_release();
}

uint64_t key path setter for GPKGroup.managedMembers : GPKGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [GPKMember](a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 720))(v4);
  return swift_release();
}

uint64_t GPKGroup.managedMembers.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_managedMembers);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t GPKGroup.managedMembers.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_managedMembers);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKGroup.managedMembers.modify())()
{
  swift_beginAccess();
  return GPKGroup.managedMembers.modify;
}

uint64_t GPKGroup.managedMembers.modify()
{
  return swift_endAccess();
}

uint64_t GPKGroup.meMember.getter()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(void))(*(_QWORD *)v0 + 336))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Sequence.first(where:)();
  outlined destroy of [GPKMember]();
  return v2;
}

uint64_t closure #1 in GPKGroup.meMember.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))() & 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMember]()
{
  swift_bridgeObjectRelease();
}

uint64_t GPKGroup.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for GPKMember();
  v1 = _allocateUninitializedArray<A>(_:)();
  v3 = (*(uint64_t (**)(uint64_t))(v0 + 744))(v1);
  swift_retain();
  swift_release();
  return v3;
}

Swift::String *GPKGroup.__allocating_init(members:)(uint64_t a1)
{
  swift_allocObject();
  return GPKGroup.init(members:)(a1);
}

Swift::String *GPKGroup.init(members:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  Swift::String v8;
  Swift::String v9;
  Swift::String *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  Swift::String v17;

  v1[2] = 0;
  v1[3] = 0xF000000000000000;
  v1[4] = 0;
  v1[5] = 0;
  GPKGroupID.init()((uint64_t)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID);
  Date.init()();
  Date.init()();
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_version) = 0;
  *((_BYTE *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_joinState) = 0;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupMode) = 0;
  v12 = OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID;
  v2 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))((char *)v1 + v12, 1);
  v3 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob);
  *v3 = 0;
  v3[1] = 0xF000000000000000;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastKnownRSVPQueueSeqNumber) = 0;
  v4 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob);
  *v4 = 0;
  v4[1] = 0xF000000000000000;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationGroupVersion) = 0;
  *((_BYTE *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_hasUnsavedGroupPropertyChanges) = 0;
  v5 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationSenderHandle);
  *v5 = 0;
  v5[1] = 0;
  v13 = OBJC_IVAR____TtC8GroupKit8GPKGroup_managedMembers;
  type metadata accessor for GPKMember();
  *(_QWORD *)((char *)v1 + v13) = _allocateUninitializedArray<A>(_:)();
  v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v15 = objc_msgSend(v14, sel_bundleIdentifier);
  if (v15)
  {
    v8._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8._object = v6;

    v9 = v8;
  }
  else
  {
    v9 = (Swift::String)0;
  }

  if (v9._object)
  {
    v17 = v9;
  }
  else
  {
    v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String?();
  }
  v11[3] = v17;
  swift_bridgeObjectRetain();
  *(uint64_t *)((char *)&v11->_countAndFlagsBits + OBJC_IVAR____TtC8GroupKit8GPKGroup_members) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v16 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  *(uint64_t *)((char *)&v11->_countAndFlagsBits + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaData) = v16;
  *(uint64_t *)((char *)&v11->_countAndFlagsBits + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaDataHashAtInitialization) = Dictionary<>.hashValue.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Sequence.forEach(_:)();
  swift_release();
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String?()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in GPKGroup.init(members:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 288))(a2);
}

uint64_t partial apply for closure #1 in GPKGroup.init(members:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in GPKGroup.init(members:)(a1, v1);
}

uint64_t GPKGroup.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  char v164;
  _QWORD v165[2];
  char v166;
  char v167;
  char v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  char v173;
  _QWORD v174[2];
  char v175;
  _QWORD v176[2];
  char v177;
  uint64_t v178;
  char v179;
  char v180;
  uint64_t v181;
  _BYTE v182[3];
  char v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v146 = (uint64_t *)((char *)&v181 + 2);
  v147 = a1;
  v187 = 0;
  v186 = 0;
  v185 = 0;
  v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v138 = (*(_QWORD *)(*(_QWORD *)(v137 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v137);
  v139 = (uint64_t)v64 - v138;
  v140 = 0;
  v141 = type metadata accessor for Date();
  v142 = *(_QWORD *)(v141 - 8);
  v143 = (*(_QWORD *)(v142 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v140);
  v144 = (char *)v64 - v143;
  v156 = type metadata accessor for GPKGroupID();
  v145 = (*(_QWORD *)(*(_QWORD *)(v156 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v156);
  v158 = (uint64_t)v64 - v145;
  v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroup.CodingKeys>);
  v148 = *(_QWORD *)(v155 - 8);
  v149 = (*(_QWORD *)(v148 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v147);
  v153 = (char *)v64 - v149;
  v3[5] = (char *)v64 - v149;
  v3[4] = v2;
  v3[3] = v1;
  v150 = v2[3];
  v151 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v150);
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  v4 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v152 + 312))(v4);
  v154 = &v184;
  v184 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v5 = v157;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v159 = v5;
  v160 = v5;
  if (v5)
  {
    v80 = v160;
    outlined destroy of GPKGroupID(v158);
    result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
    v81 = v80;
  }
  else
  {
    v6 = v152;
    v7 = outlined destroy of GPKGroupID(v158);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 360))(v7);
    v134 = &v183;
    v183 = 2;
    lazy protocol witness table accessor for type Date and conformance Date();
    v8 = v159;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v135 = v8;
    v136 = v8;
    if (v8)
    {
      v79 = v136;
      (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
      result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
      v81 = v79;
    }
    else
    {
      v9 = v152;
      v10 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v144, v141);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 408))(v10);
      v11 = v135;
      v182[2] = 6;
      v12 = KeyedEncodingContainer.encode(_:forKey:)();
      v132 = v11;
      v133 = v11;
      if (v11)
      {
        v78 = v133;
        result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
        v81 = v78;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v152 + 288))(v12);
        v13 = v132;
        v129 = v14;
        v182[1] = 7;
        KeyedEncodingContainer.encode(_:forKey:)();
        v130 = v13;
        v131 = v13;
        if (v13)
        {
          v77 = v131;
          swift_bridgeObjectRelease();
          result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
          v81 = v77;
        }
        else
        {
          v15 = v152;
          v16 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 480))(v16);
          v126 = v182;
          v182[0] = 10;
          lazy protocol witness table accessor for type UUID? and conformance <A> A?();
          v17 = v130;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v127 = v17;
          v128 = v17;
          if (v17)
          {
            v76 = v128;
            outlined destroy of UUID?(v139);
            result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
            v81 = v76;
          }
          else
          {
            v18 = v152;
            v19 = outlined destroy of UUID?(v139);
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 504))(v19);
            v21 = v146;
            v122 = (char *)&v181 + 2;
            *v146 = v20;
            v21[1] = v22;
            v120 = (char *)&v181 + 1;
            BYTE1(v181) = 11;
            v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            v23 = lazy protocol witness table accessor for type Data? and conformance <A> A?();
            v24 = v127;
            v123 = v23;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v124 = v24;
            v125 = v24;
            if (v24)
            {
              v75 = v125;
              outlined destroy of Data?((uint64_t)&v181 + 2);
              result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
              v81 = v75;
            }
            else
            {
              v25 = v152;
              v26 = outlined destroy of Data?((uint64_t)&v181 + 2);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v25 + 432))(&v181, v26);
              v117 = &v180;
              v180 = v181;
              v116 = &v179;
              v179 = 9;
              lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
              v27 = v124;
              v28 = KeyedEncodingContainer.encode<A>(_:forKey:)();
              v118 = v27;
              v119 = v27;
              if (v27)
              {
                v74 = v119;
                result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                v81 = v74;
              }
              else
              {
                v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 336))(v28);
                v112 = &v178;
                v178 = v29;
                v110 = &v177;
                v177 = 1;
                v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
                v30 = lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
                v31 = v118;
                v113 = v30;
                KeyedEncodingContainer.encode<A>(_:forKey:)();
                v114 = v31;
                v115 = v31;
                if (v31)
                {
                  v73 = v115;
                  outlined destroy of [GPKMember]();
                  result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                  v81 = v73;
                }
                else
                {
                  v32 = v152;
                  outlined destroy of [GPKMember]();
                  v33 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v32 + 504))(&v178);
                  v34 = v114;
                  v176[0] = v33;
                  v176[1] = v35;
                  v175 = 11;
                  KeyedEncodingContainer.encode<A>(_:forKey:)();
                  v108 = v34;
                  v109 = v34;
                  if (v34)
                  {
                    v72 = v109;
                    outlined destroy of Data?((uint64_t)v176);
                    result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                    v81 = v72;
                  }
                  else
                  {
                    v36 = v152;
                    v37 = outlined destroy of Data?((uint64_t)v176);
                    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 688))(v37);
                    v105 = v174;
                    v174[0] = v38;
                    v174[1] = v39;
                    v103 = &v173;
                    v173 = 12;
                    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                    lazy protocol witness table accessor for type String? and conformance <A> A?();
                    v40 = v108;
                    KeyedEncodingContainer.encode<A>(_:forKey:)();
                    v106 = v40;
                    v107 = v40;
                    if (v40)
                    {
                      v71 = v107;
                      outlined destroy of String?();
                      result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                      v81 = v71;
                    }
                    else
                    {
                      v41 = v152;
                      outlined destroy of String?();
                      (*(void (**)(_QWORD *))(*(_QWORD *)v41 + 528))(v174);
                      v42 = v106;
                      v172 = 13;
                      v43 = KeyedEncodingContainer.encode(_:forKey:)();
                      v101 = v42;
                      v102 = v42;
                      if (v42)
                      {
                        v70 = v102;
                        result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                        v81 = v70;
                      }
                      else
                      {
                        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 456))(v43);
                        v98 = &v171;
                        v171 = v44;
                        v97 = &v170;
                        v170 = 14;
                        lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
                        v45 = v101;
                        v46 = KeyedEncodingContainer.encode<A>(_:forKey:)();
                        v99 = v45;
                        v100 = v45;
                        if (v45)
                        {
                          v69 = v100;
                          result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                          v81 = v69;
                        }
                        else
                        {
                          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 608))(v46);
                          v94 = &v169;
                          v169 = v47;
                          v92 = &v168;
                          v168 = 15;
                          v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
                          lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
                          v48 = v99;
                          KeyedEncodingContainer.encode<A>(_:forKey:)();
                          v95 = v48;
                          v96 = v48;
                          if (v48)
                          {
                            v68 = v96;
                            outlined destroy of [String : String]();
                            result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                            v81 = v68;
                          }
                          else
                          {
                            v49 = v152;
                            outlined destroy of [String : String]();
                            (*(void (**)(uint64_t *))(*(_QWORD *)v49 + 632))(&v169);
                            v50 = v95;
                            v167 = 16;
                            v51 = KeyedEncodingContainer.encode(_:forKey:)();
                            v90 = v50;
                            v91 = v50;
                            if (v50)
                            {
                              v67 = v91;
                              result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                              v81 = v67;
                            }
                            else
                            {
                              (*(void (**)(uint64_t))(*(_QWORD *)v152 + 664))(v51);
                              v52 = v90;
                              v166 = 17;
                              v53 = KeyedEncodingContainer.encode(_:forKey:)();
                              v88 = v52;
                              v89 = v52;
                              if (v52)
                              {
                                v66 = v89;
                                result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                                v81 = v66;
                              }
                              else
                              {
                                v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 552))(v53);
                                v55 = v88;
                                v165[0] = v54;
                                v165[1] = v56;
                                v164 = 18;
                                KeyedEncodingContainer.encode<A>(_:forKey:)();
                                v86 = v55;
                                v87 = v55;
                                if (v55)
                                {
                                  v65 = v87;
                                  outlined destroy of Data?((uint64_t)v165);
                                  result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                                  v81 = v65;
                                }
                                else
                                {
                                  v57 = v152;
                                  v58 = outlined destroy of Data?((uint64_t)v165);
                                  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 576))(v58);
                                  v59 = v86;
                                  v163 = 19;
                                  v60 = KeyedEncodingContainer.encode(_:forKey:)();
                                  v84 = v59;
                                  v85 = v59;
                                  if (v59)
                                  {
                                    v64[1] = v85;
                                    return (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                                  }
                                  else
                                  {
                                    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 712))(v60);
                                    v62 = v84;
                                    v162 = v61;
                                    v161 = 20;
                                    KeyedEncodingContainer.encode<A>(_:forKey:)();
                                    v82 = v62;
                                    v83 = v62;
                                    if (v62)
                                      v64[0] = v83;
                                    outlined destroy of [GPKMember]();
                                    return (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v153, v155);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupID, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupID, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupID, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupID, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v0 = type metadata accessor for Date();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCE920], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v0 = type metadata accessor for Date();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCE960], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type UUID? and conformance <A> A?()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    v4 = lazy protocol witness table accessor for type UUID and conformance UUID();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AA8], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    v4 = lazy protocol witness table accessor for type UUID and conformance UUID();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AC0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    v4 = lazy protocol witness table accessor for type UUID and conformance UUID();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AB0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCEA70], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCEAA8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCEA88], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDCEA98], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Data? and conformance <A> A?()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AA8], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AC0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AB0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
    return v0;
  }
  return v3;
}

uint64_t outlined destroy of Data?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v4 = lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v4 = lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v4 = lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A8], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKMember and conformance GPKMember()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v4 = MEMORY[0x24BEE0D08];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AA8], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v4 = MEMORY[0x24BEE0D38];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AC0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v4 = MEMORY[0x24BEE0D10];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AB0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode;
  if (!lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.Mode, &type metadata for GPKGroup.Mode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode;
  if (!lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.Mode, &type metadata for GPKGroup.Mode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode;
  if (!lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.Mode, &type metadata for GPKGroup.Mode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode;
  if (!lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup.Mode, &type metadata for GPKGroup.Mode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.Mode and conformance GPKGroup.Mode);
    return v0;
  }
  return v2;
}

uint64_t GPKGroup.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKGroup.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKGroup.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v53[2];
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  _BYTE *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  int v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, char *, uint64_t);
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  char *v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE v219[32];
  _BYTE v220[32];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  char v225;
  char v226;
  unsigned __int8 v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  _BYTE v242[32];
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  char v253;
  _BYTE v254[3];
  _BYTE v255[32];
  char v256;
  char v257;
  char v258;
  char v259;
  uint64_t v260;
  char v261;
  char v262;
  _QWORD *v263;
  uint64_t v264;
  unsigned __int16 v265;
  unsigned __int8 v266;
  char *v267;

  v205 = (_QWORD *)a1;
  v267 = 0;
  v264 = 0;
  v263 = 0;
  v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v186 = (*(_QWORD *)(*(_QWORD *)(v185 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v187 = (char *)v53 - v186;
  v202 = 0;
  v188 = type metadata accessor for Date();
  v189 = *(_QWORD **)(v188 - 8);
  v190 = (v189[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v202);
  v191 = (char *)v53 - v190;
  v192 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v193 = (char *)v53 - v192;
  v194 = type metadata accessor for GPKGroupID();
  v195 = (*(_QWORD *)(*(_QWORD *)(v194 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v194);
  v196 = (uint64_t)v53 - v195;
  v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroup.CodingKeys>);
  v198 = *(_QWORD *)(v197 - 8);
  v199 = (*(_QWORD *)(v198 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v205);
  v206 = (char *)v53 - v199;
  v267 = (char *)v53 - v199;
  v264 = v4;
  v263 = v1;
  v1[2] = 0;
  v201 = 0xF000000000000000;
  v1[3] = 0xF000000000000000;
  v1[4] = 0;
  v1[5] = 0;
  v265 = 11;
  v266 = 0;
  GPKGroupID.init()((uint64_t)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID);
  v265 = 43;
  v266 = 0;
  Date.init()();
  v265 = 107;
  v266 = 0;
  Date.init()();
  v5 = v202;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_version) = v202;
  *((_BYTE *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_joinState) = 0;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupMode) = v5;
  v200 = OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID;
  v265 = 2027;
  v266 = 0;
  v6 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 56))((char *)v1 + v200, 1);
  v7 = v201;
  v8 = v202;
  v9 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob);
  *v9 = 0;
  v9[1] = v7;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastKnownRSVPQueueSeqNumber) = v8;
  v10 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob);
  *v10 = 0;
  v10[1] = v7;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationGroupVersion) = v8;
  *((_BYTE *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_hasUnsavedGroupPropertyChanges) = 0;
  v265 = 32747;
  v266 = 6;
  v11 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationSenderHandle);
  *v11 = 0;
  v11[1] = 0;
  v204 = OBJC_IVAR____TtC8GroupKit8GPKGroup_managedMembers;
  v203 = type metadata accessor for GPKMember();
  v12 = _allocateUninitializedArray<A>(_:)();
  v13 = v205;
  v265 = 32747;
  v266 = 14;
  *(_QWORD *)((char *)v1 + v204) = v12;
  v208 = v13[3];
  v209 = v13[4];
  __swift_project_boxed_opaque_existential_1(v13, v208);
  lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
  v14 = v207;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v210 = v14;
  v211 = v14;
  if (v14)
  {
    v73 = v211;
  }
  else
  {
    v181 = &v262;
    v262 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v15 = v210;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v182 = v15;
    v183 = v15;
    if (v15)
    {
      v72 = v183;
      (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
      v73 = v72;
    }
    else
    {
      v174 = v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID;
      v175 = &v261;
      swift_beginAccess();
      outlined assign with take of GPKGroupID(v196, v174);
      swift_endAccess();
      v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
      v176 = &v259;
      v259 = 1;
      v16 = lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
      v17 = v182;
      v178 = v16;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v179 = v17;
      v180 = v17;
      if (v17)
      {
        v71 = v180;
        (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
        v73 = v71;
      }
      else
      {
        v265 = 32763;
        v266 = 14;
        *(_QWORD *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_members) = v260;
        v171 = &v258;
        v258 = 2;
        lazy protocol witness table accessor for type Date and conformance Date();
        v18 = v179;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v172 = v18;
        v173 = v18;
        if (v18)
        {
          v70 = v173;
          (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
          v73 = v70;
        }
        else
        {
          v161 = v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_creationDate;
          v162 = &v257;
          v163 = 33;
          v164 = 0;
          swift_beginAccess();
          v166 = (void (*)(uint64_t, char *, uint64_t))v189[5];
          v166(v161, v193, v188);
          swift_endAccess();
          Date.init()();
          v165 = v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastModified;
          v167 = &v256;
          swift_beginAccess();
          v166(v165, v191, v188);
          swift_endAccess();
          v19 = v172;
          v255[31] = 6;
          v20 = KeyedDecodingContainer.decode(_:forKey:)();
          v168 = v19;
          v169 = v20;
          v170 = v19;
          if (v19)
          {
            v69 = v170;
            (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
            v73 = v69;
          }
          else
          {
            v155 = v169;
            v154 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_version);
            v156 = v255;
            swift_beginAccess();
            *v154 = v155;
            swift_endAccess();
            v21 = v168;
            v254[2] = 7;
            v22 = KeyedDecodingContainer.decode(_:forKey:)();
            v157 = v21;
            v158 = v22;
            v159 = v23;
            v160 = v21;
            if (v21)
            {
              v68 = v160;
              (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
              v73 = v68;
            }
            else
            {
              v24 = v184;
              v25 = v159;
              v265 = 0x7FFF;
              v266 = 14;
              *(_QWORD *)(v184 + 48) = v158;
              *(_QWORD *)(v24 + 56) = v25;
              v151 = v254;
              v254[0] = 9;
              lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
              v26 = v157;
              KeyedDecodingContainer.decode<A>(_:forKey:)();
              v152 = v26;
              v153 = v26;
              if (v26)
              {
                v67 = v153;
                (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                v73 = v67;
              }
              else
              {
                v146 = v254[1];
                v145 = (_BYTE *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_joinState);
                v147 = &v253;
                swift_beginAccess();
                *v145 = v146;
                swift_endAccess();
                v148 = &v252;
                v252 = 10;
                lazy protocol witness table accessor for type UUID? and conformance <A> A?();
                v27 = v152;
                KeyedDecodingContainer.decode<A>(_:forKey:)();
                v149 = v27;
                v150 = v27;
                if (v27)
                {
                  v66 = v150;
                  (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                  v73 = v66;
                }
                else
                {
                  v138 = (void *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID);
                  v139 = &v251;
                  swift_beginAccess();
                  outlined assign with take of UUID?(v187, v138);
                  swift_endAccess();
                  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
                  v140 = &v248;
                  v248 = 11;
                  v28 = lazy protocol witness table accessor for type Data? and conformance <A> A?();
                  v29 = v149;
                  v142 = v28;
                  KeyedDecodingContainer.decode<A>(_:forKey:)();
                  v143 = v29;
                  v144 = v29;
                  if (v29)
                  {
                    v65 = v144;
                    (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                    v73 = v65;
                  }
                  else
                  {
                    v130 = v249;
                    v132 = v250;
                    v131 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob);
                    v133 = &v247;
                    swift_beginAccess();
                    v30 = v131;
                    v31 = v132;
                    v32 = *v131;
                    v33 = v131[1];
                    *v131 = v130;
                    v30[1] = v31;
                    outlined consume of Data?(v32, v33);
                    swift_endAccess();
                    v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                    v134 = &v244;
                    v244 = 12;
                    lazy protocol witness table accessor for type String? and conformance <A> A?();
                    v34 = v143;
                    KeyedDecodingContainer.decode<A>(_:forKey:)();
                    v136 = v34;
                    v137 = v34;
                    if (v34)
                    {
                      v64 = v137;
                      (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                      v73 = v64;
                    }
                    else
                    {
                      v123 = v245;
                      v125 = v246;
                      v124 = (_QWORD *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationSenderHandle);
                      v126 = &v243;
                      swift_beginAccess();
                      v35 = v124;
                      v36 = v125;
                      *v124 = v123;
                      v35[1] = v36;
                      swift_bridgeObjectRelease();
                      swift_endAccess();
                      v37 = v136;
                      v242[31] = 13;
                      v38 = KeyedDecodingContainer.decode(_:forKey:)();
                      v127 = v37;
                      v128 = v38;
                      v129 = v37;
                      if (v37)
                      {
                        v63 = v129;
                        (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                        v73 = v63;
                      }
                      else
                      {
                        v118 = v128;
                        v117 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastKnownRSVPQueueSeqNumber);
                        v119 = v242;
                        swift_beginAccess();
                        *v117 = v118;
                        swift_endAccess();
                        v120 = &v240;
                        v240 = 14;
                        lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
                        v39 = v127;
                        KeyedDecodingContainer.decode<A>(_:forKey:)();
                        v121 = v39;
                        v122 = v39;
                        if (v39)
                        {
                          v62 = v122;
                          (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                          v73 = v62;
                        }
                        else
                        {
                          v111 = v241;
                          v110 = (_QWORD *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupMode);
                          v112 = &v239;
                          swift_beginAccess();
                          *v110 = v111;
                          swift_endAccess();
                          v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
                          v113 = &v236;
                          v236 = 15;
                          lazy protocol witness table accessor for type [String : String]? and conformance <A> A?();
                          v40 = v121;
                          KeyedDecodingContainer.decode<A>(_:forKey:)();
                          v115 = v40;
                          v116 = v40;
                          if (v40)
                          {
                            v61 = v116;
                            (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                            v73 = v61;
                          }
                          else
                          {
                            v235 = v237;
                            if (v237)
                            {
                              v238 = v235;
                            }
                            else
                            {
                              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
                              _allocateUninitializedArray<A>(_:)();
                              v238 = Dictionary.init(dictionaryLiteral:)();
                              outlined destroy of [String : String]?();
                            }
                            v265 = -1;
                            v266 = 14;
                            *(_QWORD *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaData) = v238;
                            v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
                            v106 = &v231;
                            v231 = 16;
                            lazy protocol witness table accessor for type Int? and conformance <A> A?();
                            v41 = v115;
                            KeyedDecodingContainer.decode<A>(_:forKey:)();
                            v108 = v41;
                            v109 = v41;
                            if (v41)
                            {
                              v60 = v109;
                              (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                              v73 = v60;
                            }
                            else
                            {
                              v229 = v232;
                              v230 = v233 & 1;
                              swift_retain();
                              if ((v230 & 1) != 0)
                              {
                                v103 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaData);
                                v104 = &v228;
                                swift_beginAccess();
                                v105 = *v103;
                                swift_bridgeObjectRetain();
                                swift_endAccess();
                                v234 = Dictionary<>.hashValue.getter();
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                v234 = v229;
                              }
                              swift_release();
                              v265 = -1;
                              v266 = 15;
                              *(_QWORD *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_metaDataHashAtInitialization) = v234;
                              v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
                              v99 = &v225;
                              v225 = 17;
                              lazy protocol witness table accessor for type Bool? and conformance <A> A?();
                              v42 = v108;
                              KeyedDecodingContainer.decode<A>(_:forKey:)();
                              v101 = v42;
                              v102 = v42;
                              if (v42)
                              {
                                v59 = v102;
                                (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                                v73 = v59;
                              }
                              else
                              {
                                v224 = v226;
                                if (v226 == 2)
                                  v227 = 0;
                                else
                                  v227 = v224 & 1;
                                v94 = v227;
                                v95 = (_BYTE *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_hasUnsavedGroupPropertyChanges);
                                v96 = &v223;
                                swift_beginAccess();
                                *v95 = v94 & 1;
                                swift_endAccess();
                                v43 = v101;
                                v220[31] = 18;
                                KeyedDecodingContainer.decode<A>(_:forKey:)();
                                v97 = v43;
                                v98 = v43;
                                if (v43)
                                {
                                  v58 = v98;
                                  (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                                  v73 = v58;
                                }
                                else
                                {
                                  v87 = v221;
                                  v89 = v222;
                                  v88 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob);
                                  v90 = v220;
                                  swift_beginAccess();
                                  v44 = v88;
                                  v45 = v89;
                                  v46 = *v88;
                                  v47 = v88[1];
                                  *v88 = v87;
                                  v44[1] = v45;
                                  outlined consume of Data?(v46, v47);
                                  swift_endAccess();
                                  v48 = v97;
                                  v219[31] = 19;
                                  v49 = KeyedDecodingContainer.decode(_:forKey:)();
                                  v91 = v48;
                                  v92 = v49;
                                  v93 = v48;
                                  if (v48)
                                  {
                                    v57 = v93;
                                    (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                                    v73 = v57;
                                  }
                                  else
                                  {
                                    v83 = v92;
                                    v82 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationGroupVersion);
                                    v84 = v219;
                                    swift_beginAccess();
                                    *v82 = v83;
                                    swift_endAccess();
                                    v50 = v91;
                                    v216 = 20;
                                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                                    v85 = v50;
                                    v86 = v50;
                                    if (v50)
                                    {
                                      v56 = v86;
                                      (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                                      v73 = v56;
                                    }
                                    else
                                    {
                                      v215 = v217;
                                      if (v217)
                                      {
                                        v218 = v215;
                                      }
                                      else
                                      {
                                        v218 = _allocateUninitializedArray<A>(_:)();
                                        outlined destroy of [GPKMember]?();
                                      }
                                      v75 = v218;
                                      v74 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_managedMembers);
                                      v76 = &v214;
                                      v77 = 0;
                                      swift_beginAccess();
                                      *v74 = v75;
                                      swift_bridgeObjectRelease();
                                      swift_endAccess();
                                      v78 = (uint64_t *)(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_members);
                                      v79 = &v213;
                                      swift_beginAccess();
                                      v80 = *v78;
                                      swift_bridgeObjectRetain();
                                      swift_endAccess();
                                      v212 = v80;
                                      swift_retain();
                                      lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
                                      v51 = v85;
                                      Sequence.forEach(_:)();
                                      v81 = v51;
                                      if (!v51)
                                      {
                                        swift_release();
                                        outlined destroy of [GPKMember]();
                                        (*(void (**)(char *, uint64_t))(v198 + 8))(v206, v197);
                                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
                                        return v184;
                                      }
                                      __break(1u);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v55 = v73;
  if (((v265 | (v266 << 16)) & 0xFFFFF) == 0xFFFFF)
  {
    swift_release();
  }
  else
  {
    outlined destroy of Data?(v184 + 16);
    outlined destroy of String?();
    if ((v265 & 4) != 0)
      outlined destroy of String();
    outlined destroy of GPKGroupID(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID);
    if ((v265 & 0x10) != 0)
      outlined destroy of [GPKMember]();
    v54 = (void (*)(uint64_t, uint64_t))v189[1];
    v54(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_creationDate, v188);
    v54(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastModified, v188);
    outlined destroy of UUID?(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID);
    outlined destroy of Data?(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob);
    outlined destroy of Data?(v184 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob);
    if ((v265 & 0x8000) != 0)
      outlined destroy of [String : String]();
    outlined destroy of String?();
    outlined destroy of [GPKMember]();
    type metadata accessor for GPKGroup();
    swift_deallocPartialClassInstance();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
  return v53[1];
}

uint64_t type metadata accessor for GPKGroup()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKGroup;
  if (!type metadata singleton initialization cache for GPKGroup)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
    v4 = MEMORY[0x24BEE1798];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AC0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Bool? and conformance <A> A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type Bool? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Bool? and conformance <A> A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Bool?);
    v4 = MEMORY[0x24BEE1348];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AC0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Bool? and conformance <A> A?);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMember]?()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in GPKGroup.init(from:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 288))(a2);
}

uint64_t partial apply for closure #1 in GPKGroup.init(from:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in GPKGroup.init(from:)(a1, v1);
}

Swift::Void __swiftcall GPKGroup.addMembers(_:remove:)(Swift::OpaquePointer _, Swift::OpaquePointer remove)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  Swift::String fileID;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD v56[2];
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *rawValue;

  v65 = 0;
  v63 = 0;
  v59 = 0;
  v60 = 0;
  v56[0] = 0;
  v56[1] = 0;
  v51 = 0;
  v47 = 0;
  v46 = 0;
  v45 = 0;
  v42 = 0;
  v39 = 0;
  rawValue = _._rawValue;
  v66 = remove._rawValue;
  swift_bridgeObjectRetain();
  v64 = _._rawValue;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v31 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v33 = Collection.isEmpty.getter();
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRetain();
  if ((v33 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v26 = Collection.isEmpty.getter();
    outlined destroy of [GPKMember]();
    v27 = v26;
  }
  else
  {
    v27 = 0;
  }
  v2 = swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No new members added or removed", 0x1FuLL, 1);
    fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/GPKGroup.swift", 0x17uLL, 1);
    v24 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v35);
    v34 = v35 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v3, v24, fileID, 170, (GroupKit::LogSubsystem)&v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 336))(v2);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMember));
    v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GPKGroup.addMembers(_:remove:), 0, v30, v4, MEMORY[0x24BEE4078], v31, MEMORY[0x24BEE40A8], v22);
    outlined destroy of [GPKMember]();
    v61 = v23;
    type metadata accessor for GPKMember();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, GPKMember)]);
    lazy protocol witness table accessor for type [(String, GPKMember)] and conformance [A]();
    v63 = Dictionary.init<A>(uniqueKeysWithValues:)();
    swift_bridgeObjectRetain();
    v58 = _._rawValue;
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
      v5 = IndexingIterator.next()();
      v21 = v57;
      if (!v57)
        break;
      v42 = v57;
      v40[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 160))(v5);
      v40[2] = v6;
      MEMORY[0x24263250C](&v41);
      outlined destroy of String();
      v40[0] = v41;
      v20 = v41 == 0;
      outlined destroy of GPKMember?();
      v39 = v20;
      if (v20)
      {
        v18 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v21 + 160))(v40);
        v19 = v7;
        swift_retain();
        v38 = v21;
        v36 = v18;
        v37 = v19;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
        Dictionary.subscript.setter();
        swift_retain();
        (*(void (**)())(*(_QWORD *)v21 + 288))();
      }
      swift_release();
    }
    outlined destroy of IndexingIterator<[GPKMember]>();
    swift_bridgeObjectRetain();
    v55 = remove._rawValue;
    Collection<>.makeIterator()();
    while (1)
    {
      v8 = IndexingIterator.next()();
      if (!v54)
        break;
      v45 = v54;
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 160))(v8);
      v44 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
      Dictionary.removeValue(forKey:)();
      outlined destroy of String();
      swift_release();
      swift_release();
    }
    outlined destroy of IndexingIterator<[GPKMember]>();
    v53 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v28 + 336))(v56);
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GPKGroup.addMembers(_:remove:), 0, v30, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v31, MEMORY[0x24BEE40A8], v22);
    outlined destroy of [GPKMember]();
    v52 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v15 = MEMORY[0x24BEE0D00];
    Set.init<A>(_:)();
    v14 = Set.hashValue.getter();
    v51 = v14;
    swift_bridgeObjectRelease();
    v50 = Dictionary.values.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember].Values);
    lazy protocol witness table accessor for type [String : GPKMember].Values and conformance [A : B].Values();
    v10 = Array.init<A>(_:)();
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 344))(v10);
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 336))(v11);
    v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #3 in GPKGroup.addMembers(_:remove:), 0, v30, v15, MEMORY[0x24BEE4078], v31, MEMORY[0x24BEE40A8], v22);
    outlined destroy of [GPKMember]();
    v48 = v16;
    Set.init<A>(_:)();
    v13 = Set.hashValue.getter();
    v47 = v13;
    swift_bridgeObjectRelease();
    v46 = v14 != v13;
    v12 = ((*(uint64_t (**)(void))(*(_QWORD *)v28 + 664))() & 1) != 0 || v14 != v13;
    (*(void (**)(BOOL))(*(_QWORD *)v28 + 672))(v12);
    outlined destroy of [String : GPKMember]();
  }
}

uint64_t closure #1 in GPKGroup.addMembers(_:remove:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v4 = *a1;
  *a2 = (*(uint64_t (**)(void))(*(_QWORD *)*a1 + 160))();
  a2[1] = v2;
  result = swift_retain();
  a2[2] = v4;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  void (*v16)(char *, _QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void (*v30)(char *, char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  Swift::Int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v30 = a1;
  v31 = a2;
  v53 = a3;
  v44 = a4;
  v32 = a5;
  v52 = a6;
  v34 = a8;
  v35 = "Fatal error";
  v36 = "Index out of bounds";
  v37 = "Swift/Collection.swift";
  v38 = "Range requires lowerBound <= upperBound";
  v39 = "Swift/Range.swift";
  v40 = "Index out of range";
  v67 = a3;
  v66 = a4;
  v65 = a5;
  v41 = *(_QWORD *)(a5 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)v15 - v42;
  v45 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)v15 - v48;
  v50 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)v15 - v50;
  v54 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v53);
  v57 = (char *)v15 - v56;
  v58 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)v15 - v58;
  v60 = dispatch thunk of Collection.count.getter();
  if (v60)
  {
    v64 = MEMORY[0x242632B84](v44);
    v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v60);
    result = dispatch thunk of Collection.startIndex.getter();
    if (v60 >= 0)
    {
      v27 = 0;
      for (i = v33; ; i = v18)
      {
        v25 = i;
        v26 = v27;
        if (v27 == v60)
          goto LABEL_17;
        if (v26 < 0 || v26 >= v60)
          goto LABEL_16;
        v62 = v26;
        if (v60 < 0)
          goto LABEL_15;
        if (v26 >= v60)
          break;
        v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        v63 = 0;
        v23 = v24;
LABEL_18:
        v22 = v23;
        if ((v63 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v57, v59, v54);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
          v19 = v64;
          swift_retain();
          swift_release();
          v20 = v19;
          v21 = v25;
          return v20;
        }
        v17 = &v61;
        v16 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v47 + 16))(v49);
        v16(v17, 0);
        v14 = v25;
        v30(v49, v43);
        v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v54);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v43, v32);
          return v15[1];
        }
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        result = v18;
        v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      v62 = 0;
      v63 = 1;
      v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v20 = static Array._allocateUninitialized(_:)();
  v21 = v33;
  return v20;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[GPKMember]>()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #2 in GPKGroup.addMembers(_:remove:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t closure #3 in GPKGroup.addMembers(_:remove:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v3;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKMember?()
{
  swift_release();
}

uint64_t GPKGroup.memberWithHandle(_:)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(void))(*(_QWORD *)v0 + 336))();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Sequence.first(where:)();
  swift_bridgeObjectRelease();
  outlined destroy of [GPKMember]();
  return v2;
}

uint64_t closure #1 in GPKGroup.memberWithHandle(_:)(uint64_t a1)
{
  char v2;

  (*(void (**)(void))(**(_QWORD **)a1 + 160))();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t partial apply for closure #1 in GPKGroup.memberWithHandle(_:)(uint64_t a1)
{
  return closure #1 in GPKGroup.memberWithHandle(_:)(a1) & 1;
}

Swift::Bool __swiftcall GPKGroup.canRespondToInvite()()
{
  uint64_t v0;
  char v2;
  uint64_t v3;

  v3 = v0;
  (*(void (**)(char *__return_ptr))(*(_QWORD *)v0 + 432))(&v2);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  return == infix<A>(_:_:)() & 1;
}

BOOL static GPKGroup.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = a1;
  v15 = a2;
  v3 = v2;
  v4 = v11;
  v14 = v3;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v5 = type metadata accessor for GPKGroupID();
  v12 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v16 = (uint64_t)&v10 - v12;
  v13 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v10 - v12);
  v17 = (uint64_t)&v10 - v13;
  v21 = v4;
  v20 = v7;
  v19 = v14;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 312))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 312))(v8);
  v18 = static GPKGroupID.== infix(_:_:)(v17, v16);
  outlined destroy of GPKGroupID(v16);
  outlined destroy of GPKGroupID(v17);
  return v18;
}

Swift::Void __swiftcall GPKGroup.setManagedMembers(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_bridgeObjectRetain();
  v2 = (*(uint64_t (**)(void *))(*(_QWORD *)v1 + 720))(a1._rawValue);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 712))(v2);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Sequence.forEach(_:)();
  swift_release();
  outlined destroy of [GPKMember]();
}

uint64_t closure #1 in GPKGroup.setManagedMembers(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 288))(a2);
}

uint64_t partial apply for closure #1 in GPKGroup.setManagedMembers(_:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in GPKGroup.setManagedMembers(_:)(a1, v1);
}

Swift::Void __swiftcall GPKGroup.setInvitationSenderHandle(_:)(Swift::String_optional a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v1 + 696))(a1.value._countAndFlagsBits, a1.value._object);
}

uint64_t *GPKGroup.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *result;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  uint64_t v58;
  _QWORD v59[3];
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v50 = a1;
  v64 = 0;
  v63 = 0;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v32 = (*(_QWORD *)(*(_QWORD *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v44 = (uint64_t)&v31 - v32;
  v34 = type metadata accessor for GPKGroupID();
  v33 = (*(_QWORD *)(*(_QWORD *)(v34 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v50);
  v35 = (uint64_t)&v31 - v33;
  v64 = v2;
  v63 = v1;
  (*(void (**)(void))(*(_QWORD *)v1 + 312))();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  Hasher.combine<A>(_:)();
  v3 = v48;
  v4 = outlined destroy of GPKGroupID(v35);
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 408))(v4);
  v37 = MEMORY[0x24BEE4008];
  v38 = MEMORY[0x24BEE4018];
  v5 = Hasher.combine<A>(_:)();
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v48 + 432))(&v61, v5);
  v36 = &v60;
  v60 = v61;
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v6 = Hasher.combine<A>(_:)();
  v59[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 408))(v6);
  v7 = Hasher.combine<A>(_:)();
  v59[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 528))(v7);
  v8 = Hasher.combine<A>(_:)();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 608))(v8);
  v40 = v59;
  v59[0] = v9;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
  Hasher.combine<A>(_:)();
  v10 = v48;
  v11 = v40;
  outlined destroy of [String : String]();
  v12 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v10 + 336))(v11);
  v41 = &v58;
  v58 = v12;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v52 = lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
  Hasher.combine<A>(_:)();
  v13 = v48;
  v14 = v41;
  outlined destroy of [GPKMember]();
  v15 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v13 + 288))(v14);
  v42 = v57;
  v57[0] = v15;
  v57[1] = v16;
  Hasher.combine<A>(_:)();
  v17 = v48;
  v18 = v42;
  outlined destroy of String();
  (*(void (**)(_QWORD *))(*(_QWORD *)v17 + 480))(v18);
  lazy protocol witness table accessor for type UUID? and conformance <A> A?();
  Hasher.combine<A>(_:)();
  v19 = v48;
  v20 = outlined destroy of UUID?(v44);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 504))(v20);
  v46 = v56;
  v56[0] = v21;
  v56[1] = v22;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  Hasher.combine<A>(_:)();
  v23 = v48;
  v24 = outlined destroy of Data?((uint64_t)v46);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 688))(v24);
  v49 = v55;
  v55[0] = v25;
  v55[1] = v26;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  Hasher.combine<A>(_:)();
  v27 = v48;
  v28 = v49;
  outlined destroy of String?();
  v29 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v27 + 712))(v28);
  v53 = &v54;
  v54 = v29;
  Hasher.combine<A>(_:)();
  result = v53;
  outlined destroy of [GPKMember]();
  return result;
}

uint64_t GPKGroup.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t countAndFlagsBits;
  void *v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  Swift::String v106;
  uint64_t v107;
  Swift::String v109;
  int v110;
  Swift::String v111;
  Swift::String *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  _QWORD *v116;
  void *v117;
  char *v118;
  int v119;
  void *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String v129;
  int v130;
  Swift::String *v131;
  Swift::String v132;
  void *v133;
  _QWORD *v134;
  void *v135;
  char *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  void *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  Swift::String *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  _QWORD *v157;
  int v158;
  void *v159;
  uint64_t *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  Swift::String v164;
  Swift::String v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  Swift::String *v171;
  void *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  Swift::String *v179;
  Swift::String v180;
  uint64_t v181;
  unint64_t v182;
  void *v183;
  void *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  _QWORD *v191;
  void *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  Builtin::Word v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  void *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  char *v213;
  void *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  void *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  Swift::String *v228;
  uint64_t v229;
  uint64_t v230;
  Builtin::Word v231;
  int v232;
  void *v233;
  Swift::String v234;
  void *v235;
  uint64_t v236;
  Builtin::Word v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  void *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  Swift::String v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  void *object;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  Builtin::Word v273;
  int v274;
  uint64_t v275;
  void *v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  Swift::String *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _BYTE v300[40];
  _QWORD v301[2];
  _QWORD v302[2];
  char v303;
  char v304;
  char v305;
  char v306;
  _QWORD v307[2];
  _QWORD v308[2];
  Swift::String v309;
  Swift::String v310;
  uint64_t v311;
  unint64_t v312;
  Swift::String v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  char v318;
  _QWORD v319[2];
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  Swift::String v331;
  Swift::String v332;
  Swift::String v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  char v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD v343[2];
  uint64_t v344;
  uint64_t v345;
  _QWORD v346[2];
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD v352[2];
  uint64_t v353;
  uint64_t v354;
  Swift::String v355;
  uint64_t v356;
  char v357;

  v356 = 0;
  v280 = &v355;
  v355._countAndFlagsBits = 0;
  v355._object = 0;
  v329 = 0;
  v330 = 0;
  v325 = 0;
  v326 = 0;
  v322 = 0;
  v316 = 0;
  memset(v300, 0, sizeof(v300));
  v294 = 0;
  v295 = 0;
  v292 = 0;
  v293 = 0;
  v262 = 0;
  v263 = type metadata accessor for Date();
  v264 = *(_QWORD *)(v263 - 8);
  v265 = (*(_QWORD *)(v264 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v266 = (char *)&v109 - v265;
  v1 = type metadata accessor for GPKGroupID();
  v267 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v269 = (uint64_t)&v109 - v267;
  v356 = v0;
  v273 = 1;
  v274 = 1;
  v355 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("{", 1uLL, 1);
  v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v277 = &v353;
  v353 = v2;
  v354 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tgroupID: ", 0xBuLL, v274 & 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  v5 = v275;
  v6 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 312))(v6);
  v270 = GPKGroupID.hexString.getter();
  v271 = v7;
  outlined destroy of GPKGroupID(v269);
  v272 = v352;
  v352[0] = v270;
  v352[1] = v271;
  v283 = MEMORY[0x24BEE0D00];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", v273, v274 & 1);
  v276 = v8._object;
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  v9 = v275;
  swift_bridgeObjectRelease();
  v279 = v353;
  v278 = v354;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v281 = String.init(stringInterpolation:)();
  v282 = v10;
  static String.+= infix(_:_:)();
  v11 = swift_bridgeObjectRelease();
  v284 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 608))(v11);
  v285 = MEMORY[0x2426324E8](v284, v283, v283, MEMORY[0x24BEE0D10]);
  swift_bridgeObjectRelease();
  if ((v285 & 1) == 0)
  {
    v12 = v275;
    v260 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tmetaData: {", 0xDuLL, 1);
    static String.+= infix(_:_:)();
    v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 608))(v13);
    v261 = &v357;
    Dictionary.makeIterator()();
    memcpy(v300, v261, sizeof(v300));
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String].Iterator);
      Dictionary.Iterator.next()();
      v256 = v296;
      v257 = v297;
      v258 = v298;
      v259 = v299;
      if (!v297)
        break;
      v252 = v256;
      v253 = v257;
      v254 = v258;
      v255 = v259;
      v250 = v259;
      v239 = v258;
      v251 = v257;
      v236 = v256;
      v294 = v256;
      v295 = v257;
      v292 = v258;
      v293 = v259;
      v237 = 2;
      v14 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v245 = &v290;
      v290 = v14;
      v291 = v15;
      v243 = 1;
      v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t\t", 3uLL, 1);
      v235 = v16._object;
      DefaultStringInterpolation.appendLiteral(_:)(v16);
      swift_bridgeObjectRelease();
      v288 = v236;
      v289 = v251;
      v240 = MEMORY[0x24BEE0D00];
      v241 = MEMORY[0x24BEE0D70];
      v242 = MEMORY[0x24BEE0D68];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", v237, v243 & 1);
      v238 = v17._object;
      DefaultStringInterpolation.appendLiteral(_:)(v17);
      swift_bridgeObjectRelease();
      v286 = v239;
      v287 = v250;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", 1uLL, v243 & 1);
      v244 = v18._object;
      DefaultStringInterpolation.appendLiteral(_:)(v18);
      swift_bridgeObjectRelease();
      v247 = v290;
      v246 = v291;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v248 = String.init(stringInterpolation:)();
      v249 = v19;
      static String.+= infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of [String : String].Iterator();
    v234 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t}", 3uLL, 1);
    static String.+= infix(_:_:)();
    swift_bridgeObjectRelease();
  }
  v231 = 1;
  v20 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v185 = &v350;
  v350 = v20;
  v351 = v21;
  v232 = 1;
  v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tgroupVersion: ", 0x10uLL, 1);
  v183 = v22._object;
  DefaultStringInterpolation.appendLiteral(_:)(v22);
  v23 = v275;
  v24 = swift_bridgeObjectRelease();
  v349 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 408))(v24);
  v221 = MEMORY[0x24BEE4008];
  v222 = MEMORY[0x24BEE4050];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v223 = ",";
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", v231, v232 & 1);
  v184 = v25._object;
  DefaultStringInterpolation.appendLiteral(_:)(v25);
  swift_bridgeObjectRelease();
  v187 = v350;
  v186 = v351;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v188 = String.init(stringInterpolation:)();
  v189 = v26;
  v228 = &v355;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v198 = 11;
  v27 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v193 = &v347;
  v347 = v27;
  v348 = v28;
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tdomain: ", 0xAuLL, v232 & 1);
  v190 = v29._object;
  DefaultStringInterpolation.appendLiteral(_:)(v29);
  v30 = v275;
  v31 = swift_bridgeObjectRelease();
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 288))(v31);
  v191 = v346;
  v346[0] = v32;
  v346[1] = v33;
  v202 = MEMORY[0x24BEE0D00];
  v203 = MEMORY[0x24BEE0D70];
  v204 = MEMORY[0x24BEE0D68];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v223, v231, v232 & 1);
  v192 = v34._object;
  DefaultStringInterpolation.appendLiteral(_:)(v34);
  swift_bridgeObjectRelease();
  v195 = v347;
  v194 = v348;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v196 = String.init(stringInterpolation:)();
  v197 = v35;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v36 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v207 = &v344;
  v344 = v36;
  v345 = v37;
  v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tcreated: ", v198, v232 & 1);
  v199 = v38._object;
  DefaultStringInterpolation.appendLiteral(_:)(v38);
  v39 = v275;
  v40 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 360))(v40);
  v200 = Date.description.getter();
  v201 = v41;
  (*(void (**)(char *, uint64_t))(v264 + 8))(v266, v263);
  v205 = v343;
  v343[0] = v200;
  v343[1] = v201;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v223, v231, v232 & 1);
  v206 = v42._object;
  DefaultStringInterpolation.appendLiteral(_:)(v42);
  swift_bridgeObjectRelease();
  v209 = v344;
  v208 = v345;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v210 = String.init(stringInterpolation:)();
  v211 = v43;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v44 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v215 = &v341;
  v341 = v44;
  v342 = v45;
  v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tjoinState: ", 0xDuLL, v232 & 1);
  v212 = v46._object;
  DefaultStringInterpolation.appendLiteral(_:)(v46);
  v47 = v275;
  v48 = swift_bridgeObjectRelease();
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v47 + 432))(&v340, v48);
  v213 = &v339;
  v339 = v340;
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v223, v231, v232 & 1);
  v214 = v49._object;
  DefaultStringInterpolation.appendLiteral(_:)(v49);
  swift_bridgeObjectRelease();
  v217 = v341;
  v216 = v342;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v218 = String.init(stringInterpolation:)();
  v219 = v50;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v51 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v225 = &v337;
  v337 = v51;
  v338 = v52;
  v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\trsvpQSequenceNumber: ", 0x17uLL, v232 & 1);
  v220 = v53._object;
  DefaultStringInterpolation.appendLiteral(_:)(v53);
  v54 = v275;
  v55 = swift_bridgeObjectRelease();
  v336 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 528))(v55);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v223, v231, v232 & 1);
  v224 = v56._object;
  DefaultStringInterpolation.appendLiteral(_:)(v56);
  swift_bridgeObjectRelease();
  v227 = v337;
  v226 = v338;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v229 = String.init(stringInterpolation:)();
  v230 = v57;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v334 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v335 = v58;
  v59 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tinvitationSenderHandle: ", 0x1AuLL, v232 & 1);
  v233 = v59._object;
  DefaultStringInterpolation.appendLiteral(_:)(v59);
  v60 = v275;
  v61 = swift_bridgeObjectRelease();
  v332._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 688))(v61);
  v332._object = v62;
  if (v62)
  {
    v333 = v332;
  }
  else
  {
    v333 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<nil>", 5uLL, 1);
    outlined destroy of String?();
  }
  v171 = &v331;
  v331 = v333;
  v173 = &v334;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v178 = 1;
  v63 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", 1uLL, 1);
  v172 = v63._object;
  DefaultStringInterpolation.appendLiteral(_:)(v63);
  v64 = v275;
  swift_bridgeObjectRelease();
  v175 = v334;
  v174 = v335;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v176 = String.init(stringInterpolation:)();
  v177 = v65;
  v179 = &v355;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v180 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tmembers: [", 0xCuLL, v178 & 1);
  static String.+= infix(_:_:)();
  v66 = swift_bridgeObjectRelease();
  v328 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 336))(v66);
  v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v182 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v170 = v327;
    if (!v327)
      break;
    v168 = v170;
    v166 = v170;
    v316 = v170;
    v314 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v315 = v67;
    v68 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t\t{\n\t\t\tuserID: ", 0x10uLL, 1);
    v167 = v68._object;
    DefaultStringInterpolation.appendLiteral(_:)(v68);
    v69 = v166;
    v70 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v69 + 304))(&v311, v70);
    if ((v312 & 0xF000000000000000) == 0xF000000000000000)
    {
      v133 = 0;
      outlined destroy of GPKUserID?((uint64_t)&v311);
      v165._countAndFlagsBits = (uint64_t)v133;
      v165._object = v133;
    }
    else
    {
      v160 = &v311;
      v163 = v311;
      v162 = v312;
      outlined copy of Data._Representation(v311, v312);
      outlined destroy of GPKUserID?((uint64_t)v160);
      outlined copy of Data._Representation(v163, v162);
      v161 = v301;
      v301[0] = v163;
      v301[1] = v162;
      v164._countAndFlagsBits = GPKUserID.hexString.getter();
      v164._object = v71;
      outlined destroy of GPKUserID((uint64_t)v161);
      outlined consume of Data._Representation(v163, v162);
      v165 = v164;
    }
    v310 = v165;
    if (v165._object)
    {
      v313 = v310;
    }
    else
    {
      v313 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Nil ID>", 8uLL, 1);
      outlined destroy of String?();
    }
    v151 = &v309;
    v309 = v313;
    v155 = MEMORY[0x24BEE0D00];
    v153 = MEMORY[0x24BEE0D70];
    v154 = MEMORY[0x24BEE0D68];
    v156 = &v314;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v158 = 1;
    v72 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n\t\t\thandle: ", 0xDuLL, 1);
    v152 = v72._object;
    DefaultStringInterpolation.appendLiteral(_:)(v72);
    v73 = v166;
    v74 = swift_bridgeObjectRelease();
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 160))(v74);
    v157 = v308;
    v308[0] = v75;
    v308[1] = v76;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v77 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v158 & 1);
    v159 = v77._object;
    DefaultStringInterpolation.appendLiteral(_:)(v77);
    v78 = v166;
    v79 = swift_bridgeObjectRelease();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 256))(v79) & 1) != 0)
    {
      v82 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" (me)", 5uLL, 1);
      v81 = v82._object;
      countAndFlagsBits = v82._countAndFlagsBits;
    }
    else
    {
      v83 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      v81 = v83._object;
      countAndFlagsBits = v83._countAndFlagsBits;
    }
    v149 = countAndFlagsBits;
    v150 = v81;
    v134 = v307;
    v307[0] = countAndFlagsBits;
    v307[1] = v81;
    v140 = MEMORY[0x24BEE0D00];
    v138 = MEMORY[0x24BEE0D70];
    v139 = MEMORY[0x24BEE0D68];
    v144 = &v314;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v142 = 1;
    v84 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n\t\t\trole: ", 0xBuLL, 1);
    v135 = v84._object;
    DefaultStringInterpolation.appendLiteral(_:)(v84);
    v85 = v166;
    v86 = swift_bridgeObjectRelease();
    (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v85 + 184))(&v306, v86);
    v136 = &v305;
    v305 = v306 & v142;
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v87 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n\t\t\tinviteStatus: ", 0x13uLL, v142 & 1);
    v137 = v87._object;
    DefaultStringInterpolation.appendLiteral(_:)(v87);
    v88 = v166;
    v89 = swift_bridgeObjectRelease();
    (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v88 + 232))(&v304, v89);
    v303 = v304;
    GPKMember.InviteStatus.description.getter();
    v141 = v302;
    v302[0] = v90;
    v302[1] = v91;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v92 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n\t\t},", 6uLL, v142 & 1);
    v143 = v92._object;
    DefaultStringInterpolation.appendLiteral(_:)(v92);
    swift_bridgeObjectRelease();
    v146 = v314;
    v145 = v315;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v147 = String.init(stringInterpolation:)();
    v148 = v93;
    static String.+= infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  v94 = v275;
  outlined destroy of IndexingIterator<[GPKMember]>();
  v130 = 1;
  v129 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t]", 3uLL, 1);
  v131 = &v355;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v132 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tmanaged members: [", 0x14uLL, v130 & 1);
  static String.+= infix(_:_:)();
  v95 = swift_bridgeObjectRelease();
  v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 712))(v95);
  Collection<>.makeIterator()();
  while (1)
  {
    IndexingIterator.next()();
    v128 = v323;
    if (!v323)
      break;
    v127 = v128;
    v126 = v128;
    v322 = v128;
    v96 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v121 = &v320;
    v320 = v96;
    v321 = v97;
    v119 = 1;
    v98 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t\t{\n\t\t\thandle: ", 0x10uLL, 1);
    v115 = v98._object;
    DefaultStringInterpolation.appendLiteral(_:)(v98);
    v99 = v126;
    v100 = swift_bridgeObjectRelease();
    v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 160))(v100);
    v116 = v319;
    v319[0] = v101;
    v319[1] = v102;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v103 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n\t\t\trole: ", 0xBuLL, v119 & 1);
    v117 = v103._object;
    DefaultStringInterpolation.appendLiteral(_:)(v103);
    v104 = v126;
    v105 = swift_bridgeObjectRelease();
    (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v104 + 184))(&v318, v105);
    v118 = &v317;
    v317 = v318 & v119;
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v106 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n\t\t},", 6uLL, v119 & 1);
    v120 = v106._object;
    DefaultStringInterpolation.appendLiteral(_:)(v106);
    swift_bridgeObjectRelease();
    v123 = v320;
    v122 = v321;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v124 = String.init(stringInterpolation:)();
    v125 = v107;
    static String.+= infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v110 = 1;
  v109 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t]", 3uLL, 1);
  v112 = &v355;
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v111 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n}", 2uLL, v110 & 1);
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v114 = v355._countAndFlagsBits;
  v113 = v355._object;
  swift_bridgeObjectRetain();
  outlined destroy of String();
  return v114;
}

unint64_t lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRole, &type metadata for GPKMemberRole);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRole, &type metadata for GPKMemberRole);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRole, &type metadata for GPKMemberRole);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRole, &type metadata for GPKMemberRole);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRole, &type metadata for GPKMemberRole);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRole, &type metadata for GPKMemberRole);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of GPKUserID?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t GPKGroup.deinit()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  outlined destroy of Data?(v0 + 16);
  outlined destroy of String?();
  outlined destroy of String();
  outlined destroy of GPKGroupID(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupID);
  outlined destroy of [GPKMember]();
  v2 = OBJC_IVAR____TtC8GroupKit8GPKGroup_creationDate;
  v3 = type metadata accessor for Date();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v0 + v2);
  ((void (*)(uint64_t, uint64_t))v4)(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_lastModified, v3);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationID);
  outlined destroy of Data?(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_invitationBlob);
  outlined destroy of Data?(v0 + OBJC_IVAR____TtC8GroupKit8GPKGroup_groupBlob);
  outlined destroy of [String : String]();
  outlined destroy of String?();
  outlined destroy of [GPKMember]();
  return v5;
}

uint64_t GPKGroup.__deallocating_deinit()
{
  GPKGroup.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKGroup.hashValue.getter()
{
  type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup;
  if (!lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup)
  {
    v0 = type metadata accessor for GPKGroup();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup;
  if (!lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup)
  {
    v0 = type metadata accessor for GPKGroup();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup;
  if (!lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup)
  {
    v0 = type metadata accessor for GPKGroup();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup;
  if (!lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup)
  {
    v0 = type metadata accessor for GPKGroup();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroup, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for Identifiable.id.getter in conformance GPKGroup@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for GPKGroup();
  result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroup()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 824))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroup()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 808))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroup(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroup@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 760))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroup()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 752))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroup()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 816))();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroup(uint64_t *a1, uint64_t *a2)
{
  return static GPKGroup.== infix(_:_:)(*a1, *a2);
}

unint64_t base witness table accessor for Equatable in GPKGroup.JoinState()
{
  return lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
}

unint64_t base witness table accessor for Equatable in GPKGroup.Mode()
{
  return lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GPKGroup()
{
  return MEMORY[0x24BEE0948];
}

unint64_t base witness table accessor for Equatable in GPKGroup()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

uint64_t ObjC metadata update function for GPKGroup()
{
  return type metadata accessor for GPKGroup();
}

uint64_t type metadata completion function for GPKGroup()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t updated;

  updated = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    updated = type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      updated = type metadata accessor for UUID?();
      if (v2 <= 0x3F)
      {
        updated = swift_updateClassMetadata2();
        if (!updated)
          return 0;
      }
    }
  }
  return updated;
}

uint64_t method lookup function for GPKGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKGroup.photoData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of GPKGroup.photoData.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of GPKGroup.photoData.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of GPKGroup.displayName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of GPKGroup.displayName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of GPKGroup.displayName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of GPKGroup.groupDomain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of GPKGroup.groupDomain.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of GPKGroup.groupDomain.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of GPKGroup.groupID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of GPKGroup.groupID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of GPKGroup.groupID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of GPKGroup.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of GPKGroup.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of GPKGroup.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of GPKGroup.creationDate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of GPKGroup.creationDate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of GPKGroup.creationDate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of GPKGroup.lastModified.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of GPKGroup.lastModified.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of GPKGroup.lastModified.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of GPKGroup.version.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of GPKGroup.version.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of GPKGroup.version.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of GPKGroup.joinState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of GPKGroup.joinState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of GPKGroup.joinState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of GPKGroup.groupMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of GPKGroup.groupMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of GPKGroup.groupMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of GPKGroup.invitationID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of GPKGroup.invitationID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of GPKGroup.invitationID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of GPKGroup.invitationBlob.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of GPKGroup.invitationBlob.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of GPKGroup.invitationBlob.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of GPKGroup.lastKnownRSVPQueueSeqNumber.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of GPKGroup.lastKnownRSVPQueueSeqNumber.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of GPKGroup.lastKnownRSVPQueueSeqNumber.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of GPKGroup.groupBlob.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of GPKGroup.groupBlob.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of GPKGroup.groupBlob.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of GPKGroup.invitationGroupVersion.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of GPKGroup.invitationGroupVersion.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of GPKGroup.invitationGroupVersion.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of GPKGroup.adminMembers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of GPKGroup.metaData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of GPKGroup.metaData.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of GPKGroup.metaData.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of GPKGroup.metaDataHashAtInitialization.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of GPKGroup.metaDataHashAtInitialization.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of GPKGroup.metaDataHashAtInitialization.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of GPKGroup.hasUnsavedMetaDataChanges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))() & 1;
}

uint64_t dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))() & 1;
}

uint64_t dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.setter(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 672))(a1 & 1);
}

uint64_t dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of GPKGroup.invitationSenderHandle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of GPKGroup.invitationSenderHandle.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of GPKGroup.invitationSenderHandle.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of GPKGroup.managedMembers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of GPKGroup.managedMembers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of GPKGroup.managedMembers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of GPKGroup.meMember.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of GPKGroup.__allocating_init(members:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 744))();
}

uint64_t dispatch thunk of GPKGroup.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of GPKGroup.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 760))();
}

uint64_t dispatch thunk of GPKGroup.addMembers(_:remove:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of GPKGroup.memberWithHandle(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of GPKGroup.canRespondToInvite()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))() & 1;
}

uint64_t dispatch thunk of GPKGroup.setManagedMembers(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of GPKGroup.setInvitationSenderHandle(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of GPKGroup.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of GPKGroup.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of GPKGroup.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t type metadata accessor for UUID?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for UUID?;
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for UUID?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for GPKGroup.JoinState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroup.JoinState(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for GPKGroup.JoinState(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKGroup.JoinState(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroup.JoinState()
{
  return &type metadata for GPKGroup.JoinState;
}

ValueMetadata *type metadata accessor for GPKGroup.Mode()
{
  return &type metadata for GPKGroup.Mode;
}

uint64_t getEnumTagSinglePayload for GPKGroup.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xEB)
      goto LABEL_15;
    v7 = ((a2 + 20) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 235;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 21;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroup.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xEB)
  {
    v5 = ((a3 + 20) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xEB)
  {
    v4 = ((a2 - 236) >> 8) + 1;
    *result = a2 + 20;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 20;
  }
  return result;
}

uint64_t getEnumTag for GPKGroup.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKGroup.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroup.CodingKeys()
{
  return &type metadata for GPKGroup.CodingKeys;
}

unint64_t base witness table accessor for Equatable in GPKGroup.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroup.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroup.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroup.CodingKeys and conformance GPKGroup.CodingKeys();
}

_QWORD *outlined init with copy of [GPKMember](uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_bridgeObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

_QWORD *outlined init with copy of String?(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

uint64_t outlined init with copy of Data?(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
  }
  else
  {
    v3 = *a1;
    v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  return a2;
}

void *outlined init with take of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined init with take of GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  return a2;
}

_QWORD *outlined init with copy of String(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
  swift_release();
}

{
  swift_release();
}

BOOL static GPKMembershipRequest.Action.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return ((*a1 & 1) != 0) == (unint64_t)((*a2 & 1) != 0);
}

uint64_t GPKMembershipRequest.Action.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL static GPKMembershipRequest.Action.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKMembershipRequest.Action.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMembershipRequest.Action.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("demote", 6uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("leave", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKMembershipRequest.Action.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKMembershipRequest.Action.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.CodingKeys, &type metadata for GPKMembershipRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.CodingKeys, &type metadata for GPKMembershipRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.CodingKeys, &type metadata for GPKMembershipRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.CodingKeys, &type metadata for GPKMembershipRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.CodingKeys, &type metadata for GPKMembershipRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMembershipRequest.Action.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMembershipRequest.Action.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("leave", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("demote", 6uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMembershipRequest.Action.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKMembershipRequest.Action.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMembershipRequest.Action.CodingKeys()
{
  return GPKMembershipRequest.Action.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMembershipRequest.Action.CodingKeys()
{
  return GPKMembershipRequest.Action.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMembershipRequest.Action.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMembershipRequest.Action.CodingKeys()
{
  _BYTE *v0;

  return GPKMembershipRequest.Action.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMembershipRequest.Action.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.Action.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMembershipRequest.Action.CodingKeys()
{
  return GPKMembershipRequest.Action.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMembershipRequest.Action.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.Action.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMembershipRequest.Action.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMembershipRequest.Action.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMembershipRequest.Action.DemoteCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKMembershipRequest.Action.DemoteCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKMembershipRequest.Action.DemoteCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMembershipRequest.Action.DemoteCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t GPKMembershipRequest.Action.LeaveCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKMembershipRequest.Action.LeaveCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKMembershipRequest.Action.LeaveCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMembershipRequest.Action.LeaveCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMembershipRequest.Action.DemoteCodingKeys()
{
  return GPKMembershipRequest.Action.DemoteCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMembershipRequest.Action.DemoteCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.Action.DemoteCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMembershipRequest.Action.DemoteCodingKeys()
{
  return GPKMembershipRequest.Action.DemoteCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMembershipRequest.Action.DemoteCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.Action.DemoteCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMembershipRequest.Action.DemoteCodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.DemoteCodingKeys, &type metadata for GPKMembershipRequest.Action.DemoteCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.DemoteCodingKeys, &type metadata for GPKMembershipRequest.Action.DemoteCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.DemoteCodingKeys, &type metadata for GPKMembershipRequest.Action.DemoteCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMembershipRequest.Action.DemoteCodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMembershipRequest.Action.LeaveCodingKeys()
{
  return GPKMembershipRequest.Action.LeaveCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMembershipRequest.Action.LeaveCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.Action.LeaveCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMembershipRequest.Action.LeaveCodingKeys()
{
  return GPKMembershipRequest.Action.LeaveCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMembershipRequest.Action.LeaveCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.Action.LeaveCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMembershipRequest.Action.LeaveCodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.LeaveCodingKeys, &type metadata for GPKMembershipRequest.Action.LeaveCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.LeaveCodingKeys, &type metadata for GPKMembershipRequest.Action.LeaveCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action.LeaveCodingKeys, &type metadata for GPKMembershipRequest.Action.LeaveCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMembershipRequest.Action.LeaveCodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMembershipRequest.Action.encode(to:)(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  _QWORD *v24;

  v13 = a1;
  v24 = 0;
  v23 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMembershipRequest.Action.LeaveCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v4 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMembershipRequest.Action.DemoteCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v4 - v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMembershipRequest.Action.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v4 - v16;
  v24 = v2;
  v20 = *v1;
  v23 = v20 & 1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v20 & 1) != 0)
  {
    v4[1] = &v22;
    v22 = 1;
    lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v4[2] = &v21;
    v21 = 0;
    lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t GPKMembershipRequest.Action.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action, &type metadata for GPKMembershipRequest.Action);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action, &type metadata for GPKMembershipRequest.Action);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action, &type metadata for GPKMembershipRequest.Action);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.Action, &type metadata for GPKMembershipRequest.Action);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action);
    return v0;
  }
  return v2;
}

uint64_t GPKMembershipRequest.Action.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  _QWORD v68[4];
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;

  v47 = a2;
  v56 = a1;
  v75 = 0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMembershipRequest.Action.LeaveCodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)v14 - v50;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMembershipRequest.Action.DemoteCodingKeys>);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v14 - v54;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMembershipRequest.Action.CodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v56);
  v60 = (char *)v14 - v59;
  v75 = v2;
  v62 = v2[3];
  v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
  v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v64 = v3;
  v65 = v3;
  if (v3)
  {
    v25 = v65;
  }
  else
  {
    v4 = KeyedDecodingContainer.allKeys.getter();
    v43 = &v70;
    v70 = v4;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMembershipRequest.Action.CodingKeys]);
    lazy protocol witness table accessor for type [GPKMembershipRequest.Action.CodingKeys] and conformance [A]();
    v71 = ArraySlice.init<A>(_:)();
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<GPKMembershipRequest.Action.CodingKeys>);
    v45 = lazy protocol witness table accessor for type ArraySlice<GPKMembershipRequest.Action.CodingKeys> and conformance ArraySlice<A>();
    Collection<>.popFirst()();
    v46 = v69;
    if (v69 == 2)
      goto LABEL_12;
    v41 = v46;
    v34 = v46;
    v39 = v71;
    v35 = v72;
    v36 = v73;
    v37 = v74;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v38 = v68;
    v68[0] = v39;
    v68[1] = v35;
    v68[2] = v36;
    v68[3] = v37;
    v40 = Collection.isEmpty.getter();
    outlined destroy of ArraySlice<GPKMembershipRequest.Action.CodingKeys>();
    swift_unknownObjectRelease();
    if ((v40 & 1) == 0)
    {
LABEL_12:
      v19 = 0;
      v23 = type metadata accessor for DecodingError();
      v17 = 1;
      v24 = swift_allocError();
      v22 = v12;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v18 = (char *)v22 + *(int *)(v13 + 48);
      *v22 = &type metadata for GPKMembershipRequest.Action;
      v20 = KeyedDecodingContainer.codingPath.getter();
      countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v17 & 1)._countAndFlagsBits;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v23 - 8) + 104))(v22, *MEMORY[0x24BEE26D0]);
      swift_willThrow();
      outlined destroy of ArraySlice<GPKMembershipRequest.Action.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v24;
    }
    else if ((v34 & 1) != 0)
    {
      v27 = &v67;
      v67 = v34 & 1;
      lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys();
      v9 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v28 = v9;
      v29 = v9;
      if (!v9)
      {
        v76 = 1;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
        v30 = v28;
        goto LABEL_11;
      }
      v15 = v29;
      outlined destroy of ArraySlice<GPKMembershipRequest.Action.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v15;
    }
    else
    {
      v31 = &v66;
      v66 = v34 & 1;
      lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys();
      v8 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v32 = v8;
      v33 = v8;
      if (!v8)
      {
        v76 = 0;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
        v30 = v32;
LABEL_11:
        v26 = v30;
        outlined destroy of ArraySlice<GPKMembershipRequest.Action.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
        v10 = v56;
        *v47 = v76 & 1;
        return __swift_destroy_boxed_opaque_existential_1(v10);
      }
      v16 = v33;
      outlined destroy of ArraySlice<GPKMembershipRequest.Action.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v16;
    }
  }
  v14[1] = v25;
  return __swift_destroy_boxed_opaque_existential_1(v56);
}

unint64_t lazy protocol witness table accessor for type [GPKMembershipRequest.Action.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMembershipRequest.Action.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMembershipRequest.Action.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMembershipRequest.Action.CodingKeys]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMembershipRequest.Action.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<GPKMembershipRequest.Action.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<GPKMembershipRequest.Action.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<GPKMembershipRequest.Action.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<GPKMembershipRequest.Action.CodingKeys>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<GPKMembershipRequest.Action.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<GPKMembershipRequest.Action.CodingKeys>()
{
  swift_unknownObjectRelease();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMembershipRequest.Action(_BYTE *a1, _BYTE *a2)
{
  return static GPKMembershipRequest.Action.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMembershipRequest.Action()
{
  return GPKMembershipRequest.Action.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMembershipRequest.Action()
{
  return GPKMembershipRequest.Action.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMembershipRequest.Action(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMembershipRequest.Action@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return GPKMembershipRequest.Action.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMembershipRequest.Action(uint64_t a1)
{
  return GPKMembershipRequest.Action.encode(to:)(a1);
}

uint64_t GPKMembershipRequest.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKMembershipRequest.action.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GPKMembershipRequest();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20)) & 1;
  return result;
}

uint64_t type metadata accessor for GPKMembershipRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKMembershipRequest;
  if (!type metadata singleton initialization cache for GPKMembershipRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKMembershipRequest.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKMembershipRequest() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKMembershipRequest.serviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GPKMembershipRequest() + 24));
  *v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*GPKMembershipRequest.serviceName.modify())()
{
  type metadata accessor for GPKMembershipRequest();
  return GPKMembershipRequest.serviceName.modify;
}

uint64_t GPKMembershipRequest.init(groupID:action:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;

  v17 = a3;
  v18 = a1;
  v12 = a2;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v9[1] = 0;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v13 = (uint64_t)v9 - v10;
  v14 = type metadata accessor for GPKMembershipRequest();
  v11 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v18);
  v19 = (uint64_t)v9 - v11;
  v22 = (char *)v9 - v11;
  v21 = v3;
  v16 = *v12;
  v15 = 1;
  v20 = v16 & 1;
  v4 = (_QWORD *)((char *)v9 + *(int *)(v14 + 24) - v11);
  *v4 = 0;
  v4[1] = 0;
  outlined init with copy of GPKGroupID(v3, v5);
  outlined init with take of GPKGroupID(v13, v19);
  v6 = v17;
  v7 = v19;
  *(_BYTE *)(v19 + *(int *)(v14 + 20)) = v16 & v15;
  outlined init with copy of GPKMembershipRequest(v7, v6);
  outlined destroy of GPKGroupID(v18);
  return outlined destroy of GPKMembershipRequest(v19);
}

uint64_t outlined init with copy of GPKMembershipRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a2 + *(int *)(v3 + 20)) = *(_BYTE *)(a1 + *(int *)(v3 + 20)) & 1;
  v4 = (_QWORD *)(a1 + *(int *)(v3 + 24));
  v8 = (_QWORD *)(a2 + *(int *)(v3 + 24));
  *v8 = *v4;
  v9 = v4[1];
  swift_bridgeObjectRetain();
  result = a2;
  v8[1] = v9;
  return result;
}

uint64_t outlined destroy of GPKMembershipRequest(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for GPKMembershipRequest();
  swift_bridgeObjectRelease();
  return a1;
}

BOOL static GPKMembershipRequest.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t GPKMembershipRequest.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMembershipRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("action", 6uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GPKMembershipRequest.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GPKMembershipRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.CodingKeys, &type metadata for GPKMembershipRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.CodingKeys, &type metadata for GPKMembershipRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.CodingKeys, &type metadata for GPKMembershipRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.CodingKeys, &type metadata for GPKMembershipRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest.CodingKeys, &type metadata for GPKMembershipRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMembershipRequest.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMembershipRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("action", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMembershipRequest.CodingKeys(char *a1, char *a2)
{
  return static GPKMembershipRequest.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMembershipRequest.CodingKeys()
{
  return GPKMembershipRequest.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMembershipRequest.CodingKeys()
{
  return GPKMembershipRequest.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMembershipRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMembershipRequest.CodingKeys()
{
  char *v0;

  return GPKMembershipRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMembershipRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMembershipRequest.CodingKeys()
{
  return GPKMembershipRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMembershipRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMembershipRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMembershipRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMembershipRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMembershipRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;

  v21 = a1;
  v40 = 0;
  v39 = 0;
  v30 = type metadata accessor for GPKGroupID();
  v20 = (*(_QWORD *)(*(_QWORD *)(v30 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (uint64_t)v8 - v20;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMembershipRequest.CodingKeys>);
  v22 = *(_QWORD *)(v29 - 8);
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v8 - v23;
  v40 = v2;
  v39 = v1;
  v24 = v2[3];
  v25 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v24);
  lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v27, v32);
  v28 = &v38;
  v38 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v31;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v33 = v3;
  v34 = v3;
  if (v3)
  {
    v9 = v34;
    outlined destroy of GPKGroupID(v32);
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v29);
    v10 = v9;
  }
  else
  {
    outlined destroy of GPKGroupID(v32);
    v15 = type metadata accessor for GPKMembershipRequest();
    v4 = *(_BYTE *)(v27 + *(int *)(v15 + 20));
    v17 = &v37;
    v37 = v4 & 1;
    v16 = &v36;
    v36 = 1;
    lazy protocol witness table accessor for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action();
    v5 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v5;
    v19 = v5;
    if (v5)
    {
      v8[2] = v19;
    }
    else
    {
      v6 = (uint64_t *)(v27 + *(int *)(v15 + 24));
      v11 = *v6;
      v12 = v6[1];
      swift_bridgeObjectRetain();
      v35 = 2;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      v13 = 0;
      v14 = 0;
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v29);
  }
  return result;
}

uint64_t GPKMembershipRequest.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE v45[2];
  char v46;
  _QWORD *v47;
  char v48;

  v26 = a2;
  v34 = a1;
  v47 = 0;
  v30 = 0;
  v27 = type metadata accessor for GPKGroupID();
  v28 = (*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (uint64_t)v12 - v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMembershipRequest.CodingKeys>);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v30);
  v38 = (char *)v12 - v33;
  v36 = type metadata accessor for GPKMembershipRequest();
  v35 = (*(_QWORD *)(*(_QWORD *)(v36 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v34);
  v37 = (uint64_t)v12 - v35;
  v48 = 0;
  v47 = v2;
  v3 = *(int *)(v36 + 24);
  v48 = 4;
  v4 = (_QWORD *)((char *)v12 + v3 - v35);
  *v4 = 0;
  v4[1] = 0;
  v40 = v2[3];
  v41 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v40);
  lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
  v5 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v42 = v5;
  v43 = v5;
  if (v5)
  {
    v15 = v43;
  }
  else
  {
    v23 = &v46;
    v46 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v6 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v6;
    v25 = v6;
    if (v6)
    {
      v14 = v25;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v31);
      v15 = v14;
    }
    else
    {
      v48 = 5;
      outlined init with take of GPKGroupID(v29, v37);
      v20 = v45;
      v45[0] = 1;
      lazy protocol witness table accessor for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action();
      v7 = v24;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v21 = v7;
      v22 = v7;
      if (!v7)
      {
        *(_BYTE *)(v37 + *(int *)(v36 + 20)) = v45[1] & 1;
        v44 = 2;
        v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        v16 = 0;
        v17 = v8;
        v18 = v9;
        v19 = 0;
        v10 = (uint64_t *)(v37 + *(int *)(v36 + 24));
        *v10 = v8;
        v10[1] = v9;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v31);
        outlined init with copy of GPKMembershipRequest(v37, v26);
        __swift_destroy_boxed_opaque_existential_1(v34);
        return outlined destroy of GPKMembershipRequest(v37);
      }
      v13 = v22;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v31);
      v15 = v13;
    }
  }
  v12[0] = v15;
  __swift_destroy_boxed_opaque_existential_1(v34);
  if ((v48 & 1) != 0)
    outlined destroy of GPKGroupID(v37);
  result = v37 + *(int *)(v36 + 24);
  outlined destroy of String?();
  return result;
}

unint64_t base witness table accessor for Equatable in GPKMembershipRequest.Action()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action and conformance GPKMembershipRequest.Action();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMembershipRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKMembershipRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMembershipRequest(uint64_t a1)
{
  return GPKMembershipRequest.encode(to:)(a1);
}

unint64_t initializeBufferWithCopyOfBuffer for GPKMembershipRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v13;

  v13 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v13 & 0x20000) != 0)
  {
    v8 = *a2;
    swift_retain();
    *a1 = v8;
    return *a1 + ((v13 + 16) & ~(unint64_t)v13);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20)) & 1;
    v4 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
    v7 = *(_QWORD *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v6 + 1) = v7;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPKMembershipRequest(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GPKMembershipRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20)) & 1;
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v9 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  result = a1;
  v9[1] = v10;
  return result;
}

uint64_t assignWithCopy for GPKMembershipRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20)) & 1;
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v8 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v8 = *v4;
  v9 = v4[1];
  swift_bridgeObjectRetain();
  v8[1] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for GPKMembershipRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20)) & 1;
  result = *(__n128 *)(a2 + *(int *)(a3 + 24));
  *(__n128 *)(a1 + *(int *)(a3 + 24)) = result;
  return result;
}

uint64_t assignWithTake for GPKMembershipRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20)) & 1;
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  v5 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKMembershipRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D214EC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  int v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 2147483646)
  {
    v5 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v5 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    v3 = v5 - 1;
    if (v5 - 1 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GPKMembershipRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D214FDC(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 2147483646)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKMembershipRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GPKMembershipRequest.Action(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMembershipRequest.Action(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMembershipRequest.Action(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMembershipRequest.Action(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMembershipRequest.Action()
{
  return &type metadata for GPKMembershipRequest.Action;
}

uint64_t getEnumTagSinglePayload for GPKMembershipRequest.Action.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMembershipRequest.Action.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMembershipRequest.Action.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMembershipRequest.Action.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMembershipRequest.Action.CodingKeys()
{
  return &type metadata for GPKMembershipRequest.Action.CodingKeys;
}

ValueMetadata *type metadata accessor for GPKMembershipRequest.Action.DemoteCodingKeys()
{
  return &type metadata for GPKMembershipRequest.Action.DemoteCodingKeys;
}

ValueMetadata *type metadata accessor for GPKMembershipRequest.Action.LeaveCodingKeys()
{
  return &type metadata for GPKMembershipRequest.Action.LeaveCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKMembershipRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMembershipRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKMembershipRequest.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMembershipRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMembershipRequest.CodingKeys()
{
  return &type metadata for GPKMembershipRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMembershipRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMembershipRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMembershipRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.CodingKeys and conformance GPKMembershipRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMembershipRequest.Action.LeaveCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMembershipRequest.Action.LeaveCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.LeaveCodingKeys and conformance GPKMembershipRequest.Action.LeaveCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMembershipRequest.Action.DemoteCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMembershipRequest.Action.DemoteCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.DemoteCodingKeys and conformance GPKMembershipRequest.Action.DemoteCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMembershipRequest.Action.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMembershipRequest.Action.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMembershipRequest.Action.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMembershipRequest.Action.CodingKeys and conformance GPKMembershipRequest.Action.CodingKeys();
}

uint64_t protocol witness for KeyValueStore.object(forKey:) in conformance NSUserDefaults@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return @nonobjc NSUserDefaults.object(forKey:)(a1, a2, a3);
}

uint64_t @nonobjc NSUserDefaults.object(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  id v3;
  id v8;
  id v9;
  _BYTE v10[32];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  v8 = (id)MEMORY[0x242632560](a1, a2);
  v3 = v9;
  if (objc_msgSend(v9, sel_objectForKey_, v8))
  {
    _bridgeAnyObjectToAny(_:)();
    outlined init with take of Any((uint64_t)v10, (uint64_t)&v11);
    swift_unknownObjectRelease();
  }
  else
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
  }
  outlined init with take of Any?(&v11, a3);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for KeyValueStore.string(forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSUserDefaults.string(forKey:)(a1, a2);
}

uint64_t @nonobjc NSUserDefaults.string(forKey:)(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v4;
  uint64_t v5;
  void *v8;
  void *v9;
  id v10;

  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x242632560](a1, a2);
  v2 = v9;
  v10 = objc_msgSend(v9, sel_stringForKey_, v8);
  if (v10)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }

  swift_bridgeObjectRelease();
  return v5;
}

id protocol witness for KeyValueStore.integer(forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSUserDefaults.integer(forKey:)(a1, a2);
}

id @nonobjc NSUserDefaults.integer(forKey:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v5;
  id v6;
  id v8;

  swift_bridgeObjectRetain();
  v6 = (id)MEMORY[0x242632560](a1, a2);
  v2 = v5;
  v8 = objc_msgSend(v5, sel_integerForKey_, v6);

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t protocol witness for KeyValueStore.BOOL(forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSUserDefaults.BOOL(forKey:)(a1, a2) & 1;
}

uint64_t @nonobjc NSUserDefaults.BOOL(forKey:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v5;
  id v6;
  unsigned __int8 v8;

  swift_bridgeObjectRetain();
  v6 = (id)MEMORY[0x242632560](a1, a2);
  v2 = v5;
  v8 = objc_msgSend(v5, sel_BOOLForKey_, v6);

  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t protocol witness for KeyValueStore.dictionary(forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSUserDefaults.dictionary(forKey:)(a1, a2);
}

uint64_t @nonobjc NSUserDefaults.dictionary(forKey:)(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v4;
  uint64_t v5;
  void *v8;
  void *v9;
  id v10;

  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x242632560](a1, a2);
  v2 = v9;
  v10 = objc_msgSend(v9, sel_dictionaryForKey_, v8);
  if (v10)
  {
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for KeyValueStore.data(forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSUserDefaults.data(forKey:)(a1, a2);
}

uint64_t @nonobjc NSUserDefaults.data(forKey:)(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v4;
  uint64_t v5;
  void *v8;
  void *v9;
  id v10;

  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x242632560](a1, a2);
  v2 = v9;
  v10 = objc_msgSend(v9, sel_dataForKey_, v8);
  if (v10)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = v4;
  }
  else
  {
    v5 = 0;
  }

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for KeyValueStore.set(_:forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return @nonobjc NSUserDefaults.set(_:forKey:)(a1, a2, a3);
}

{
  return @nonobjc NSUserDefaults.set(_:forKey:)(a1, a2, a3);
}

uint64_t @nonobjc NSUserDefaults.set(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD v21[3];
  uint64_t v22;

  v18 = a2;
  v19 = a3;
  outlined init with copy of Any?(a1, (uint64_t)v21);
  if (v22)
  {
    v15 = v21;
    v12 = v22;
    __swift_project_boxed_opaque_existential_0(v21, v22);
    v11 = *(_QWORD *)(v12 - 8);
    v3 = *(_QWORD *)(v11 + 64);
    v14 = &v7;
    v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x24BDAC7A8](&v7);
    v13 = (char *)&v7 - v10;
    (*(void (**)(void))(v4 + 16))();
    v16 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  v9 = v17;
  swift_bridgeObjectRetain();
  v8 = (id)MEMORY[0x242632560](v18, v19);
  v5 = v20;
  objc_msgSend(v20, sel_setObject_forKey_, v9, v8);

  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

{
  id v3;
  id v7;
  void *v8;

  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x242632560](a2, a3);
  v3 = v7;
  objc_msgSend(v7, sel_setInteger_forKey_, a1, v8);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for KeyValueStore.set(_:forKey:) in conformance NSUserDefaults(char a1, uint64_t a2, uint64_t a3)
{
  return @nonobjc NSUserDefaults.set(_:forKey:)(a1 & 1, a2, a3);
}

uint64_t @nonobjc NSUserDefaults.set(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v7;
  void *v8;

  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x242632560](a2, a3);
  v3 = v7;
  objc_msgSend(v7, sel_setBool_forKey_, a1 & 1, v8);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for KeyValueStore.removeObject(forKey:) in conformance NSUserDefaults(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSUserDefaults.removeObject(forKey:)(a1, a2);
}

uint64_t @nonobjc NSUserDefaults.removeObject(forKey:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v5;
  id v6;

  swift_bridgeObjectRetain();
  v6 = (id)MEMORY[0x242632560](a1, a2);
  v2 = v5;
  objc_msgSend(v5, sel_removeObjectForKey_, v6);

  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for domain()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static GroupKitUserDefaults.domain = (__int128)v1;
  return result;
}

__int128 *GroupKitUserDefaults.domain.unsafeMutableAddressor()
{
  if (one-time initialization token for domain != -1)
    swift_once();
  return &static GroupKitUserDefaults.domain;
}

uint64_t static GroupKitUserDefaults.domain.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)GroupKitUserDefaults.domain.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

void static GroupKitUserDefaults.createDefaults(domain:)(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  NSUserDefaults_optional *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v9;
  Swift::String_optional suiteName;
  void *v11;
  void *v12;

  suiteName.value._countAndFlagsBits = a1;
  suiteName.value._object = a2;
  v9 = type metadata accessor for NSUserDefaults();
  swift_bridgeObjectRetain();
  NSUserDefaults.__allocating_init(suiteName:)(v3, suiteName);
  v11 = v4;
  if (v4)
  {
    v5 = v4;
    a3[3] = v9;
    a3[4] = &protocol witness table for NSUserDefaults;
    *a3 = v11;

  }
  else
  {
    v12 = (void *)NSUserDefaults.__allocating_init()();
    swift_bridgeObjectRetain();
    v7 = (id)MEMORY[0x242632560](suiteName.value._countAndFlagsBits, suiteName.value._object);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_addSuiteNamed_, v7);

    v6 = v12;
    a3[3] = v9;
    a3[4] = &protocol witness table for NSUserDefaults;
    *a3 = v12;

  }
}

unint64_t type metadata accessor for NSUserDefaults()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
    return ObjCClassMetadata;
  }
  return v2;
}

void __swiftcall NSUserDefaults.__allocating_init(suiteName:)(NSUserDefaults_optional *__return_ptr retstr, Swift::String_optional suiteName)
{
  id v2;
  void *object;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = suiteName.value._countAndFlagsBits;
  object = suiteName.value._object;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSUserDefaults.init(suiteName:)(countAndFlagsBits, (uint64_t)object);
}

NSUserDefaults __swiftcall NSUserDefaults.__allocating_init()()
{
  id v0;
  objc_class *v1;
  void *v2;
  const __CFString *v3;
  const __CFString *v4;
  NSUserDefaults result;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (objc_class *)@nonobjc NSUserDefaults.init()();
  result._container_ = v4;
  result._identifier_ = v3;
  result._kvo_ = v2;
  result.super.isa = v1;
  return result;
}

uint64_t dispatch thunk of KeyValueStore.object(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of KeyValueStore.string(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of KeyValueStore.integer(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of KeyValueStore.BOOL(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))() & 1;
}

uint64_t dispatch thunk of KeyValueStore.dictionary(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of KeyValueStore.data(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of KeyValueStore.set(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of KeyValueStore.set(_:forKey:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD))(a5 + 72))(a1 & 1);
}

uint64_t dispatch thunk of KeyValueStore.removeObject(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

ValueMetadata *type metadata accessor for GroupKitUserDefaults()
{
  return &type metadata for GroupKitUserDefaults;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v6 = MEMORY[0x242632560](a1);
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v7, sel_initWithSuiteName_, v6);
  }
  else
  {
    v2 = objc_msgSend(v7, sel_initWithSuiteName_, 0);
  }
  v5 = v2;

  return v5;
}

id @nonobjc NSUserDefaults.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

uint64_t NSManagedObjectContext.sync<A>(work:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  id v10;
  _QWORD *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  id v18;
  _QWORD v19[2];
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id *v39;
  unint64_t v40;
  uint64_t v41;
  id *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  void *v48;
  uint64_t v49;
  int v50;
  void *v51;
  char v52;
  uint64_t aBlock;
  int v54;
  int v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;

  v25 = a4;
  v43 = a1;
  v44 = a2;
  v41 = a3;
  v64 = 0;
  v63 = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v51 = 0;
  v65 = 0;
  v66 = a3;
  v26 = *(_QWORD *)(a3 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v28 = (char *)v19 - v27;
  v65 = (char *)v19 - v27;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v29 = 0;
  v35 = type metadata accessor for Result();
  v34 = *(_QWORD *)(v35 - 8);
  v30 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v29);
  v31 = (void **)((char *)v19 - v30);
  v32 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v33 = (char *)v19 - v32;
  v64 = (char *)v19 - v32;
  v36 = type metadata accessor for Optional();
  v38 = *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64);
  v37 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v39 = (id *)((char *)v19 - v37);
  v40 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v19 - v37);
  v42 = (id *)((char *)v19 - v40);
  v63 = (char *)v19 - v40;
  v61 = v43;
  v62 = v7;
  v60 = v4;
  v9 = *(void (**)(void))(v8 + 56);
  v50 = 1;
  v9();
  v10 = v4;
  v45 = 7;
  v11 = (_QWORD *)swift_allocObject();
  v12 = v42;
  v13 = v43;
  v14 = v44;
  v46 = v11;
  v11[2] = v41;
  v11[3] = v12;
  v11[4] = v13;
  v11[5] = v14;
  v11[6] = v4;
  v15 = swift_allocObject();
  v16 = v46;
  v49 = v15;
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in NSManagedObjectContext.sync<A>(work:);
  *(_QWORD *)(v15 + 24) = v16;
  swift_retain();
  v58 = partial apply for thunk for @callee_guaranteed () -> ();
  v59 = v49;
  aBlock = MEMORY[0x24BDAC760];
  v54 = 1107296256;
  v55 = 0;
  v56 = thunk for @escaping @callee_guaranteed () -> ();
  v57 = &block_descriptor;
  v48 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v47, sel_performBlockAndWait_, v48);
  _Block_release(v48);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    outlined init with copy of Result<A, Error>?(v42, v39, v41, v35, v36);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v34 + 48))(v39, 1, v35) == 1)
    {
      outlined destroy of Result<A, Error>?(v39, v41, v35);
      v20 = 0;
      type metadata accessor for InternalError();
      v52 = 66;
      v21 = InternalError.__allocating_init(_:internalInfo:)(&v52, v20);
      swift_willThrow();
      outlined destroy of Result<A, Error>?(v42, v41, v35);
      v24 = v21;
    }
    else
    {
      outlined init with take of Result<A, Error>(v39, v33, v41, v35);
      outlined init with copy of Result<A, Error>((id *)v33, v31, v41);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, void **, uint64_t))(v26 + 32))(v28, v31, v41);
        v65 = v28;
        (*(void (**)(uint64_t))(v26 + 16))(v25);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v41);
        outlined destroy of Result<A, Error>((id *)v33, v41);
        outlined destroy of Result<A, Error>?(v42, v41, v35);
        return swift_release();
      }
      v22 = *v31;
      v51 = v22;
      type metadata accessor for InternalError();
      v18 = v22;
      v23 = InternalError.__allocating_init(_:)(v22);
      swift_willThrow();

      outlined destroy of Result<A, Error>((id *)v33, v41);
      outlined destroy of Result<A, Error>?(v42, v41, v35);
      v24 = v23;
    }
    v19[1] = v24;
    return swift_release();
  }
  return result;
}

void *closure #1 in NSManagedObjectContext.sync<A>(work:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v19 = a1;
  v13 = a2;
  v14 = a3;
  v17 = a4;
  v20 = a5;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v31 = a5;
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v16 = MEMORY[0x24BEE3F20];
  v21 = type metadata accessor for Result();
  v22 = type metadata accessor for Optional();
  v12 = (*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (void *)MEMORY[0x24BDAC7A8](v17);
  v18 = (char *)&v11 - v12;
  v30 = v6;
  v28 = v7;
  v29 = v8;
  v27 = v5;
  v9 = v5;
  v23 = v20;
  v24 = v13;
  v25 = v14;
  v26 = v17;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(uint64_t))partial apply for closure #1 in closure #1 in NSManagedObjectContext.sync<A>(work:), v20, v15, (uint64_t)v18);

  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v18, 0, 1);
  return outlined assign with take of Result<A, Error>?(v18, v19, v20, v21, v22);
}

uint64_t sub_23D2179E0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for closure #1 in NSManagedObjectContext.sync<A>(work:)()
{
  uint64_t v0;

  return closure #1 in NSManagedObjectContext.sync<A>(work:)(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 16));
}

void closure #1 in closure #1 in NSManagedObjectContext.sync<A>(work:)(void (*a1)(void), uint64_t a2, void *a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  id v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  os_log_type_t v13;
  Swift::String fileID;
  void *_;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;

  v23 = 0;
  v27 = a4;
  v25 = a1;
  v26 = a2;
  v24 = a3;
  a1();
  if (v5)
  {
    v6 = v5;
    v23 = v5;
    v21 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v22 = v7;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Coredata work failure ", 0x16uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    v20 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v12 = String.init(stringInterpolation:)();
    _ = v10;
    v13 = static os_log_type_t.error.getter();
    fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/CoreData+GroupKit.swift", 0x20uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v19);
    v11._countAndFlagsBits = v12;
    v11._object = _;
    v18 = v19 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v11, v13, fileID, 20, (GroupKit::LogSubsystem)&v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_reset);
    swift_willThrow();

    *a5 = v5;
  }
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a4;
  v22 = a1;
  v10 = a2;
  v11 = a3;
  v25 = a2;
  v24 = a3;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v8 - v13;
  v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v8 - v13);
  v15 = (char *)&v8 - v14;
  v17 = type metadata accessor for Result();
  v19 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  v18 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v16);
  v20 = (uint64_t)&v8 - v18;
  v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v23 = (uint64_t)&v8 - v21;
  v22(v6);
  swift_storeEnumTagMultiPayload();
  _ss6ResultOyxq_Gs5ErrorR_Ri_zr0_lWOb(v20, v23, v10, v11);
  return _ss6ResultOyxq_Gs5ErrorR_Ri_zr0_lWOb(v23, v9, v10, v11);
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23D217E78()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

_QWORD *outlined init with copy of Result<A, Error>?(id *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  uint64_t v13;

  v13 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(id *, uint64_t))(v13 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = *a1;
      v5 = *a1;
      *a2 = v7;
    }
    else
    {
      (*(void (**)(_QWORD *, id *))(*(_QWORD *)(a3 - 8) + 16))(a2, a1);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, a4);
  }
  return a2;
}

id *outlined destroy of Result<A, Error>?(id *a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(id *, uint64_t))(*(_QWORD *)(a3 - 8) + 48))(a1, 1))
  {
    if (swift_getEnumCaseMultiPayload() == 1)

    else
      (*(void (**)(id *))(*(_QWORD *)(a2 - 8) + 8))(a1);
  }
  return a1;
}

void *outlined init with take of Result<A, Error>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

_QWORD *outlined init with copy of Result<A, Error>(id *a1, _QWORD *a2, uint64_t a3)
{
  id v3;
  id v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = *a1;
    v3 = *a1;
    *a2 = v5;
  }
  else
  {
    (*(void (**)(_QWORD *, id *))(*(_QWORD *)(a3 - 8) + 16))(a2, a1);
  }
  swift_storeEnumTagMultiPayload();
  return a2;
}

id *outlined destroy of Result<A, Error>(id *a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(id *))(*(_QWORD *)(a2 - 8) + 8))(a1);
  return a1;
}

void partial apply for closure #1 in closure #1 in NSManagedObjectContext.sync<A>(work:)(_QWORD *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NSManagedObjectContext.sync<A>(work:)(*(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16), a1);
}

void *outlined assign with take of Result<A, Error>?(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  unsigned int (*v12)(void);

  v11 = *(_QWORD *)(a4 - 8);
  v12 = *(unsigned int (**)(void))(v11 + 48);
  if (v12())
  {
    if (((unsigned int (*)(const void *, uint64_t, uint64_t))v12)(a1, 1, a4))
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a2, a1, *(_QWORD *)(v11 + 64));
      }
      else
      {
        (*(void (**)(void *, const void *))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, a4);
    }
  }
  else if (((unsigned int (*)(const void *, uint64_t, uint64_t))v12)(a1, 1, a4))
  {
    outlined destroy of Result<A, Error>((id *)a2, a3);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64));
  }
  else if (a2 != a1)
  {
    outlined destroy of Result<A, Error>((id *)a2, a3);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a2, a1, *(_QWORD *)(v11 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a2;
}

uint64_t _ss6ResultOyxq_Gs5ErrorR_Ri_zr0_lWOb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (swift_getEnumCaseMultiPayload() == 1)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a2, a1);
  else
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t GPKMemberKeyRequest.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKMemberKeyRequest.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKMemberKeyRequest() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for GPKMemberKeyRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKMemberKeyRequest;
  if (!type metadata singleton initialization cache for GPKMemberKeyRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKMemberKeyRequest.userID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for GPKMemberKeyRequest();
  return outlined init with copy of GPKUserID?((uint64_t *)(v1 + *(int *)(v2 + 24)), a1);
}

uint64_t outlined init with copy of GPKUserID?(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
  }
  else
  {
    v3 = *a1;
    v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  return a2;
}

BOOL GPKMemberKeyRequest.isMeMemberRequest.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[2] = 0;
  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for GPKMemberKeyRequest() + 24));
  v3 = *v1;
  v4 = v1[1];
  outlined copy of GPKUserID?(*v1, v4);
  v5[0] = v3;
  v5[1] = v4;
  outlined destroy of GPKUserID?((uint64_t)v5);
  return (v4 & 0xF000000000000000) == 0xF000000000000000;
}

uint64_t outlined copy of GPKUserID?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

uint64_t GPKMemberKeyRequest.init(groupID:serviceName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v21 = a4;
  v23 = a1;
  v19 = a2;
  v22 = a3;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v15 = 0;
  v16 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v18 = (uint64_t)&v15 - v16;
  v20 = type metadata accessor for GPKMemberKeyRequest();
  v17 = (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v23);
  v24 = (uint64_t)&v15 - v17;
  v28 = (char *)&v15 - v17;
  v27 = v4;
  v25 = v5;
  v26 = v6;
  outlined init with copy of GPKGroupID(v4, v7);
  outlined init with take of GPKGroupID(v18, v24);
  swift_bridgeObjectRetain();
  v8 = v24;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = (_QWORD *)(v24 + *(int *)(v20 + 20));
  *v12 = v19;
  v12[1] = v11;
  v13 = (_QWORD *)(v8 + *(int *)(v9 + 24));
  *v13 = 0;
  v13[1] = 0xF000000000000000;
  outlined init with copy of GPKMemberKeyRequest(v8, v10);
  swift_bridgeObjectRelease();
  outlined destroy of GPKGroupID(v23);
  return outlined destroy of GPKMemberKeyRequest(v24);
}

uint64_t outlined init with copy of GPKMemberKeyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v12 = type metadata accessor for GPKMemberKeyRequest();
  v3 = (_QWORD *)(a1 + *(int *)(v12 + 20));
  v10 = (_QWORD *)(a2 + *(int *)(v12 + 20));
  *v10 = *v3;
  v11 = v3[1];
  swift_bridgeObjectRetain();
  v10[1] = v11;
  v13 = *(int *)(v12 + 24);
  if ((*(_QWORD *)(a1 + v13 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v13) = *(_OWORD *)(a1 + v13);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + v13);
    v7 = *(_QWORD *)(a1 + v13 + 8);
    outlined copy of Data._Representation(v6, v7);
    v4 = (uint64_t *)(a2 + v13);
    *v4 = v6;
    v4[1] = v7;
  }
  return a2;
}

uint64_t outlined destroy of GPKMemberKeyRequest(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKMemberKeyRequest();
  swift_bridgeObjectRelease();
  v5 = *(int *)(v3 + 24);
  if ((*(_QWORD *)(a1 + v5 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v5), *(_QWORD *)(a1 + v5 + 8));
  return a1;
}

uint64_t GPKMemberKeyRequest.init(groupID:serviceName:userID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[2];
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v26 = a5;
  v30 = a1;
  v24 = a2;
  v29 = a3;
  v21 = a4;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v19[1] = 0;
  v20 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v23 = (uint64_t)v19 - v20;
  v25 = type metadata accessor for GPKMemberKeyRequest();
  v22 = (*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v30);
  v31 = (uint64_t)v19 - v22;
  v37 = (char *)v19 - v22;
  v36 = v5;
  v34 = v6;
  v35 = v7;
  v28 = *v8;
  v27 = v8[1];
  v32 = v28;
  v33 = v27;
  outlined init with copy of GPKGroupID(v5, v9);
  outlined init with take of GPKGroupID(v23, v31);
  swift_bridgeObjectRetain();
  v10 = v28;
  v11 = v27;
  v12 = v29;
  v13 = (_QWORD *)(v31 + *(int *)(v25 + 20));
  *v13 = v24;
  v13[1] = v12;
  outlined copy of Data._Representation(v10, v11);
  v14 = v26;
  v15 = v27;
  v16 = v31;
  v17 = (_QWORD *)(v31 + *(int *)(v25 + 24));
  *v17 = v28;
  v17[1] = v15;
  outlined init with copy of GPKMemberKeyRequest(v16, v14);
  outlined consume of Data._Representation(v28, v27);
  swift_bridgeObjectRelease();
  outlined destroy of GPKGroupID(v30);
  return outlined destroy of GPKMemberKeyRequest(v31);
}

BOOL static GPKMemberKeyRequest.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t GPKMemberKeyRequest.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMemberKeyRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("userID", 6uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GPKMemberKeyRequest.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GPKMemberKeyRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest.CodingKeys, &type metadata for GPKMemberKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest.CodingKeys, &type metadata for GPKMemberKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest.CodingKeys, &type metadata for GPKMemberKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest.CodingKeys, &type metadata for GPKMemberKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest.CodingKeys, &type metadata for GPKMemberKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMemberKeyRequest.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMemberKeyRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("userID", 6uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMemberKeyRequest.CodingKeys(char *a1, char *a2)
{
  return static GPKMemberKeyRequest.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMemberKeyRequest.CodingKeys()
{
  return GPKMemberKeyRequest.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMemberKeyRequest.CodingKeys()
{
  return GPKMemberKeyRequest.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMemberKeyRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMemberKeyRequest.CodingKeys()
{
  char *v0;

  return GPKMemberKeyRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMemberKeyRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberKeyRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMemberKeyRequest.CodingKeys()
{
  return GPKMemberKeyRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMemberKeyRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberKeyRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberKeyRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMemberKeyRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMemberKeyRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[2];
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;

  v25 = a1;
  v44 = 0;
  v43 = 0;
  v34 = type metadata accessor for GPKGroupID();
  v24 = (*(_QWORD *)(*(_QWORD *)(v34 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (uint64_t)v10 - v24;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMemberKeyRequest.CodingKeys>);
  v26 = *(_QWORD *)(v33 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v10 - v27;
  v44 = v2;
  v43 = v1;
  v28 = v2[3];
  v29 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v28);
  lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v31, v36);
  v32 = &v42;
  v42 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v35;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v37 = v3;
  v38 = v3;
  if (v3)
  {
    v11 = v38;
    outlined destroy of GPKGroupID(v36);
    result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v30, v33);
    v12 = v11;
  }
  else
  {
    outlined destroy of GPKGroupID(v36);
    v4 = type metadata accessor for GPKMemberKeyRequest();
    v5 = v37;
    v19 = v4;
    v6 = (uint64_t *)(v31 + *(int *)(v4 + 20));
    v20 = *v6;
    v21 = v6[1];
    swift_bridgeObjectRetain();
    v41 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v22 = v5;
    v23 = v5;
    if (v5)
    {
      v10[1] = v23;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v30, v33);
    }
    else
    {
      swift_bridgeObjectRelease();
      v7 = (uint64_t *)(v31 + *(int *)(v19 + 24));
      v13 = *v7;
      v14 = v7[1];
      outlined copy of GPKUserID?(v13, v14);
      v16 = v40;
      v40[0] = v13;
      v40[1] = v14;
      v15 = &v39;
      v39 = 2;
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      v8 = v22;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v17 = v8;
      v18 = v8;
      if (v8)
        v10[0] = v18;
      outlined destroy of GPKUserID?((uint64_t)v40);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v30, v33);
    }
  }
  return result;
}

uint64_t GPKMemberKeyRequest.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  _QWORD *v56;
  char v57;

  v33 = a2;
  v41 = a1;
  v56 = 0;
  v37 = 0;
  v34 = type metadata accessor for GPKGroupID();
  v35 = (*(_QWORD *)(*(_QWORD *)(v34 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (uint64_t)&v17 - v35;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMemberKeyRequest.CodingKeys>);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v45 = (char *)&v17 - v40;
  v42 = type metadata accessor for GPKMemberKeyRequest();
  v43 = (*(_QWORD *)(*(_QWORD *)(v42 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v41);
  v44 = (uint64_t)&v17 - v43;
  v57 = 0;
  v56 = v2;
  v47 = v2[3];
  v48 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v47);
  lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
  v3 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v49 = v3;
  v50 = v3;
  if (v3)
  {
    v21 = v50;
  }
  else
  {
    v30 = &v55;
    v55 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v4;
    v32 = v4;
    if (v4)
    {
      v20 = v32;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v38);
      v21 = v20;
    }
    else
    {
      v25 = 1;
      v57 = 1;
      outlined init with take of GPKGroupID(v36, v44);
      v5 = v31;
      v54 = v25;
      v6 = KeyedDecodingContainer.decode(_:forKey:)();
      v26 = v5;
      v27 = v6;
      v28 = v7;
      v29 = v5;
      if (v5)
      {
        v19 = v29;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v38);
        v21 = v19;
      }
      else
      {
        v8 = v28;
        v9 = (uint64_t *)(v44 + *(int *)(v42 + 20));
        v57 = 3;
        *v9 = v27;
        v9[1] = v8;
        v22 = &v51;
        v51 = 2;
        lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
        v10 = v26;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v23 = v10;
        v24 = v10;
        if (!v10)
        {
          v11 = v38;
          v12 = v45;
          v13 = v39;
          v14 = v53;
          v15 = (_QWORD *)(v44 + *(int *)(v42 + 24));
          v57 = 7;
          *v15 = v52;
          v15[1] = v14;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
          outlined init with copy of GPKMemberKeyRequest(v44, v33);
          __swift_destroy_boxed_opaque_existential_1(v41);
          return outlined destroy of GPKMemberKeyRequest(v44);
        }
        v18 = v24;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v38);
        v21 = v18;
      }
    }
  }
  v17 = v21;
  result = __swift_destroy_boxed_opaque_existential_1(v41);
  if ((v57 & 1) != 0)
    result = outlined destroy of GPKGroupID(v44);
  if ((v57 & 2) != 0)
  {
    result = v44 + *(int *)(v42 + 20);
    outlined destroy of String();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMemberKeyRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKMemberKeyRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMemberKeyRequest(uint64_t a1)
{
  return GPKMemberKeyRequest.encode(to:)(a1);
}

unint64_t initializeBufferWithCopyOfBuffer for GPKMemberKeyRequest(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  int v17;

  v17 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v17 & 0x20000) != 0)
  {
    v12 = *a2;
    swift_retain();
    *a1 = v12;
    return *a1 + ((v17 + 16) & ~(unint64_t)v17);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v9 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v8 + 1) = v9;
    v10 = (char *)a1 + *(int *)(a3 + 24);
    v11 = (uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    if ((v11[1] & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v6 = *v11;
      v7 = v11[1];
      outlined copy of Data._Representation(*v11, v7);
      *(_QWORD *)v10 = v6;
      *((_QWORD *)v10 + 1) = v7;
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPKMemberKeyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  result = a1;
  v6 = *(int *)(a2 + 24);
  if ((*(_QWORD *)(a1 + v6 + 8) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + v6), *(_QWORD *)(a1 + v6 + 8));
  return result;
}

uint64_t initializeWithCopy for GPKMemberKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v14;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v10 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v10 = *v4;
  v11 = v4[1];
  swift_bridgeObjectRetain();
  v10[1] = v11;
  v14 = *(int *)(a3 + 24);
  if ((*(_QWORD *)(a2 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + v14);
    v8 = *(_QWORD *)(a2 + v14 + 8);
    outlined copy of Data._Representation(v7, v8);
    v5 = (uint64_t *)(a1 + v14);
    *v5 = v7;
    v5[1] = v8;
  }
  return a1;
}

uint64_t assignWithCopy for GPKMemberKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v19;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v15 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v15 = *v4;
  v16 = v4[1];
  swift_bridgeObjectRetain();
  v15[1] = v16;
  swift_bridgeObjectRelease();
  v19 = *(int *)(a3 + 24);
  if ((*(_QWORD *)(a1 + v19 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v19 + 8) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
    }
    else
    {
      v10 = *(_QWORD *)(a2 + v19);
      v11 = *(_QWORD *)(a2 + v19 + 8);
      outlined copy of Data._Representation(v10, v11);
      v8 = (uint64_t *)(a1 + v19);
      *v8 = v10;
      v8[1] = v11;
    }
  }
  else if ((*(_QWORD *)(a2 + v19 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID(a1 + v19);
    *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  }
  else
  {
    v12 = *(_QWORD *)(a2 + v19);
    v13 = *(_QWORD *)(a2 + v19 + 8);
    outlined copy of Data._Representation(v12, v13);
    v5 = (uint64_t *)(a1 + v19);
    v6 = *(_QWORD *)(a1 + v19);
    v7 = *(_QWORD *)(a1 + v19 + 8);
    *v5 = v12;
    v5[1] = v13;
    outlined consume of Data._Representation(v6, v7);
  }
  return a1;
}

uint64_t initializeWithTake for GPKMemberKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for GPKMemberKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v14;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v5 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v14 = *(int *)(a3 + 24);
  if ((*(_QWORD *)(a1 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else if ((*(_QWORD *)(a2 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID(a1 + v14);
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + v14 + 8);
    v7 = (_QWORD *)(a1 + v14);
    v8 = *(_QWORD *)(a1 + v14);
    v9 = *(_QWORD *)(a1 + v14 + 8);
    *v7 = *(_QWORD *)(a2 + v14);
    v7[1] = v6;
    outlined consume of Data._Representation(v8, v9);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKMemberKeyRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D21A484(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for GPKMemberKeyRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D21A580(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKMemberKeyRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GPKMemberKeyRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMemberKeyRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKMemberKeyRequest.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMemberKeyRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMemberKeyRequest.CodingKeys()
{
  return &type metadata for GPKMemberKeyRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMemberKeyRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMemberKeyRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMemberKeyRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberKeyRequest.CodingKeys and conformance GPKMemberKeyRequest.CodingKeys();
}

void GPKMemberProperty.policy.getter(_BYTE *a1@<X8>)
{
  GPKMemberProperty.policy.getter(a1);
}

{
  *a1 = 0;
}

void GPKMember.InviteStatus.description.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D21AD08()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unavailable", 0xBuLL, 1)._countAndFlagsBits;
}

GroupKit::GPKMember::InviteStatus_optional __swiftcall GPKMember.InviteStatus.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v3;

  switch(rawValue)
  {
    case -1:
      v3 = 0;
LABEL_14:
      *v1 = v3;
      return (GroupKit::GPKMember::InviteStatus_optional)rawValue;
    case 0:
      v3 = 1;
      goto LABEL_14;
    case 1:
      v3 = 2;
      goto LABEL_14;
    case 2:
      v3 = 3;
      goto LABEL_14;
    case 3:
      v3 = 4;
      goto LABEL_14;
    case 4:
      v3 = 5;
      goto LABEL_14;
  }
  *v1 = 6;
  return (GroupKit::GPKMember::InviteStatus_optional)rawValue;
}

void GPKMember.InviteStatus.rawValue.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D21AF6C()
{
  return -1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKMember.InviteStatus()
{
  lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus;
  if (!lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.InviteStatus, &type metadata for GPKMember.InviteStatus);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus;
  if (!lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.InviteStatus, &type metadata for GPKMember.InviteStatus);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus;
  if (!lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.InviteStatus, &type metadata for GPKMember.InviteStatus);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus;
  if (!lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.InviteStatus, &type metadata for GPKMember.InviteStatus);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMember.InviteStatus()
{
  lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMember.InviteStatus()
{
  lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMember.InviteStatus()
{
  lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::GPKMember::InviteStatus_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GPKMember.InviteStatus(Swift::Int64 *a1)
{
  return GPKMember.InviteStatus.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GPKMember.InviteStatus(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GPKMember.InviteStatus.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMember.InviteStatus()
{
  lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMember.InviteStatus()
{
  lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
  return RawRepresentable<>.encode(to:)();
}

uint64_t GPKMember.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::Int v7;
  unsigned __int8 v8;

  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "handle";
  *(_QWORD *)(v3 + 8) = 6;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "role";
  *(_QWORD *)(v3 + 32) = 4;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "inviteStatus";
  *(_QWORD *)(v3 + 56) = 12;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "userID";
  *(_QWORD *)(v3 + 80) = 6;
  *(_BYTE *)(v3 + 88) = 2;
  *(_QWORD *)(v3 + 96) = "isMe";
  *(_QWORD *)(v3 + 104) = 4;
  *(_BYTE *)(v3 + 112) = 2;
  *(_QWORD *)(v3 + 120) = "stableIdentifier";
  *(_QWORD *)(v3 + 128) = 16;
  *(_BYTE *)(v3 + 136) = 2;
  *(_QWORD *)(v3 + 144) = "metadata";
  *(_QWORD *)(v3 + 152) = 8;
  *(_BYTE *)(v3 + 160) = 2;
  *(_QWORD *)(v3 + 168) = "metadataHashWhenInitializing";
  *(_QWORD *)(v3 + 176) = 28;
  *(_BYTE *)(v3 + 184) = 2;
  *(_QWORD *)(v3 + 192) = "name";
  *(_QWORD *)(v3 + 200) = 4;
  *(_BYTE *)(v3 + 208) = 2;
  *(_QWORD *)(v3 + 216) = "profilePicture";
  *(_QWORD *)(v3 + 224) = 14;
  *(_BYTE *)(v3 + 232) = 2;
  *(_QWORD *)(v3 + 240) = "policy";
  *(_QWORD *)(v3 + 248) = 6;
  *(_BYTE *)(v3 + 256) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_24:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_24;
    case 2:
      v8 = 2;
      goto LABEL_24;
    case 3:
      v8 = 3;
      goto LABEL_24;
    case 4:
      v8 = 4;
      goto LABEL_24;
    case 5:
      v8 = 5;
      goto LABEL_24;
    case 6:
      v8 = 6;
      goto LABEL_24;
    case 7:
      v8 = 7;
      goto LABEL_24;
    case 8:
      v8 = 8;
      goto LABEL_24;
    case 9:
      v8 = 9;
      goto LABEL_24;
    case 10:
      v8 = 10;
      goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  return 11;
}

uint64_t GPKMember.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GPKMember.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 11)
    return 11;
  else
    return v6;
}

uint64_t GPKMember.CodingKeys.init(intValue:)()
{
  return 11;
}

uint64_t GPKMember.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKMember.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D21B714()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handle", 6uLL, 1)._countAndFlagsBits;
}

void GPKMember.CodingKeys.stringValue.getter(char a1)
{
  GPKMember.CodingKeys.rawValue.getter(a1);
}

void protocol witness for CustomStringConvertible.description.getter in conformance GPKMember.InviteStatus()
{
  GPKMember.InviteStatus.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKMember.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.CodingKeys, &type metadata for GPKMember.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.CodingKeys, &type metadata for GPKMember.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.CodingKeys, &type metadata for GPKMember.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.CodingKeys, &type metadata for GPKMember.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMember.CodingKeys, &type metadata for GPKMember.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMember.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMember.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMember.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GPKMember.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GPKMember.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GPKMember.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  GPKMember.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKMember.CodingKeys()
{
  char *v0;

  GPKMember.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMember.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GPKMember.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMember.CodingKeys()
{
  return GPKMember.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMember.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMember.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMember.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMember.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t key path getter for GPKMember.handle : GPKMember@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 160))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKMember.handle : GPKMember(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 168))(v4, v6);
  return swift_release();
}

uint64_t GPKMember.handle.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKMember.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKMember.handle.modify())()
{
  swift_beginAccess();
  return GPKMember.handle.modify;
}

uint64_t GPKMember.handle.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.role : GPKMember@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v2 = swift_retain();
  v7 = v4;
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v4 + 184))(&v6, v2);
  *a2 = v6 & 1;
  return swift_release();
}

uint64_t key path setter for GPKMember.role : GPKMember(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  v6 = v3;
  v5 = v4 & 1;
  (*(void (**)(char *))(*(_QWORD *)v3 + 192))(&v5);
  return swift_release();
}

uint64_t GPKMember.role.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 32);
  result = swift_endAccess();
  *a1 = v3 & 1;
  return result;
}

uint64_t GPKMember.role.setter(_BYTE *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1 & 1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 32) = v3;
  return swift_endAccess();
}

uint64_t (*GPKMember.role.modify())()
{
  swift_beginAccess();
  return GPKMember.role.modify;
}

uint64_t GPKMember.role.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.metadata : GPKMember@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v2);
  return swift_release();
}

uint64_t key path setter for GPKMember.metadata : GPKMember(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [String : String](a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 216))(v4);
  return swift_release();
}

uint64_t GPKMember.metadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKMember.metadata.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKMember.metadata.modify())()
{
  swift_beginAccess();
  return GPKMember.metadata.modify;
}

uint64_t GPKMember.metadata.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.inviteStatus : GPKMember@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v2 = swift_retain();
  v7 = v4;
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v4 + 232))(&v6, v2);
  *a2 = v6;
  return swift_release();
}

uint64_t key path setter for GPKMember.inviteStatus : GPKMember(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  v6 = v3;
  v5 = v4;
  (*(void (**)(char *))(*(_QWORD *)v3 + 240))(&v5);
  return swift_release();
}

uint64_t GPKMember.inviteStatus.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 48);
  result = swift_endAccess();
  *a1 = v4;
  return result;
}

uint64_t GPKMember.inviteStatus.setter(char *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 48) = v3;
  return swift_endAccess();
}

uint64_t (*GPKMember.inviteStatus.modify())()
{
  swift_beginAccess();
  return GPKMember.inviteStatus.modify;
}

uint64_t GPKMember.inviteStatus.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.isMe : GPKMember@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 256))(v2) & 1;
  return swift_release();
}

uint64_t key path setter for GPKMember.isMe : GPKMember(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 264))(v4 & 1);
  return swift_release();
}

uint64_t GPKMember.isMe.getter()
{
  uint64_t v0;
  char v2;

  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 49);
  swift_endAccess();
  return v2 & 1;
}

uint64_t GPKMember.isMe.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 49) = a1 & 1;
  return swift_endAccess();
}

uint64_t (*GPKMember.isMe.modify())()
{
  swift_beginAccess();
  return GPKMember.isMe.modify;
}

uint64_t GPKMember.isMe.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.group : GPKMember@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 280))(v2);
  return swift_release();
}

uint64_t key path setter for GPKMember.group : GPKMember(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of GPKGroup?(a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 288))(v4);
  return swift_release();
}

uint64_t GPKMember.group.getter()
{
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_endAccess();
  return Strong;
}

uint64_t GPKMember.group.setter()
{
  swift_retain();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  swift_endAccess();
  return swift_release();
}

void (*GPKMember.group.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = v1;
  swift_beginAccess();
  v4[3] = swift_weakLoadStrong();
  return GPKMember.group.modify;
}

void GPKMember.group.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_weakAssign();
    swift_release();
    outlined destroy of GPKGroup?();
  }
  else
  {
    swift_weakAssign();
    swift_release();
  }
  swift_endAccess();
  free(v2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKGroup?()
{
  swift_release();
}

uint64_t key path getter for GPKMember.userID : GPKMember@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v7[3];

  v5 = *a1;
  v2 = swift_retain();
  v7[2] = v5;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v5 + 304))(v7, v2);
  v3 = v7[1];
  *a2 = v7[0];
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKMember.userID : GPKMember(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[2];

  outlined init with copy of GPKUserID?(a1, (uint64_t)v8);
  v5 = v8[0];
  v6 = v8[1];
  v4 = *a2;
  swift_retain();
  v7[2] = v4;
  v7[0] = v5;
  v7[1] = v6;
  (*(void (**)(_QWORD *))(*(_QWORD *)v4 + 312))(v7);
  return swift_release();
}

uint64_t GPKMember.userID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v5;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  outlined copy of GPKUserID?(v3, v5);
  result = swift_endAccess();
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t GPKMember.userID.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v5 = *a1;
  v6 = a1[1];
  outlined copy of GPKUserID?(*a1, v6);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 64) = v5;
  *(_QWORD *)(v1 + 72) = v6;
  outlined consume of GPKUserID?(v2, v3);
  swift_endAccess();
  return outlined consume of GPKUserID?(v5, v6);
}

uint64_t (*GPKMember.userID.modify())()
{
  swift_beginAccess();
  return GPKMember.userID.modify;
}

uint64_t GPKMember.userID.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.stableIdentifier : GPKMember@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 328))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKMember.stableIdentifier : GPKMember(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 336))(v4, v6);
  return swift_release();
}

uint64_t GPKMember.stableIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKMember.stableIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKMember.stableIdentifier.modify())()
{
  swift_beginAccess();
  return GPKMember.stableIdentifier.modify;
}

uint64_t GPKMember.stableIdentifier.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKMember.metadataHashWhenInitializing : GPKMember@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v2);
  return swift_release();
}

uint64_t key path setter for GPKMember.metadataHashWhenInitializing : GPKMember(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 360))(v3);
  return swift_release();
}

uint64_t GPKMember.metadataHashWhenInitializing.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 96);
  swift_endAccess();
  return v2;
}

uint64_t GPKMember.metadataHashWhenInitializing.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return swift_endAccess();
}

uint64_t (*GPKMember.metadataHashWhenInitializing.modify())()
{
  swift_beginAccess();
  return GPKMember.metadataHashWhenInitializing.modify;
}

uint64_t GPKMember.metadataHashWhenInitializing.modify()
{
  return swift_endAccess();
}

BOOL GPKMember.hasUnsavedMetaDataChanges.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
  (*(void (**)(void))(*(_QWORD *)v2 + 208))();
  v3 = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  return v4 != v3;
}

uint64_t key path getter for GPKMember.policy : GPKMember@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v2 = swift_retain();
  v7 = v4;
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v4 + 384))(&v6, v2);
  *a2 = v6 & 1;
  return swift_release();
}

uint64_t key path setter for GPKMember.policy : GPKMember(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  v6 = v3;
  v5 = v4 & 1;
  (*(void (**)(char *))(*(_QWORD *)v3 + 392))(&v5);
  return swift_release();
}

uint64_t GPKMember.policy.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 104);
  result = swift_endAccess();
  *a1 = v3 & 1;
  return result;
}

uint64_t GPKMember.policy.setter(_BYTE *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1 & 1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 104) = v3;
  return swift_endAccess();
}

uint64_t (*GPKMember.policy.modify())()
{
  swift_beginAccess();
  return GPKMember.policy.modify;
}

uint64_t GPKMember.policy.modify()
{
  return swift_endAccess();
}

uint64_t GPKMember.__allocating_init(handle:role:)(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  swift_allocObject();
  return GPKMember.init(handle:role:)(a1, a2, a3);
}

uint64_t GPKMember.init(handle:role:)(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v11 = *a3 & 1;
  swift_weakInit();
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0xF000000000000000;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 104) = 0;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = v11;
  *(_BYTE *)(v3 + 48) = 1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0xF000000000000000;
  outlined consume of GPKUserID?(v4, v5);
  swift_endAccess();
  *(_BYTE *)(v3 + 49) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v10 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v3 + 40) = v10;
  *(_QWORD *)(v3 + 96) = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t GPKMember.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  _BYTE v81[2];
  char v82;
  uint64_t v83;
  char v84;
  _QWORD v85[2];
  char v86;
  char v87;
  _QWORD v88[2];
  _QWORD v89[2];
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  _BYTE v95[2];
  uint64_t v96;
  _QWORD *v97;
  char *v98;

  v67 = a1;
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMember.CodingKeys>);
  v68 = *(_QWORD *)(v74 - 8);
  v69 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v73 = (char *)v27 - v69;
  v98 = (char *)v27 - v69;
  v97 = (_QWORD *)MEMORY[0x24BDAC7A8](v67);
  v96 = v1;
  v70 = v97[3];
  v71 = v97[4];
  __swift_project_boxed_opaque_existential_1(v97, v70);
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  v2 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v72 + 160))(v2);
  v3 = v75;
  v76 = v4;
  v95[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v77 = v3;
  v78 = v3;
  if (v3)
  {
    v34 = v78;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
    v35 = v34;
  }
  else
  {
    v5 = v72;
    v6 = swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v5 + 184))(v95, v6);
    v64 = &v94;
    v94 = v95[0] & 1;
    v63 = &v93;
    v93 = 1;
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    v7 = v77;
    v8 = KeyedEncodingContainer.encode<A>(_:forKey:)();
    v65 = v7;
    v66 = v7;
    if (v7)
    {
      v33 = v66;
      result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
      v35 = v33;
    }
    else
    {
      (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v72 + 232))(&v92, v8);
      v60 = &v91;
      v91 = v92;
      v59 = &v90;
      v90 = 2;
      lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
      v9 = v65;
      v10 = KeyedEncodingContainer.encode<A>(_:forKey:)();
      v61 = v9;
      v62 = v9;
      if (v9)
      {
        v32 = v62;
        result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
        v35 = v32;
      }
      else
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v72 + 304))(v89, v10);
        v56 = v88;
        v88[0] = v89[0];
        v88[1] = v89[1];
        v54 = &v87;
        v87 = 3;
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
        lazy protocol witness table accessor for type GPKUserID? and conformance <A> A?();
        v11 = v61;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v57 = v11;
        v58 = v11;
        if (v11)
        {
          v31 = v58;
          outlined destroy of GPKUserID?((uint64_t)v88);
          result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
          v35 = v31;
        }
        else
        {
          v12 = v72;
          v13 = outlined destroy of GPKUserID?((uint64_t)v88);
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 256))(v13);
          v14 = v57;
          v86 = 4;
          v15 = KeyedEncodingContainer.encode(_:forKey:)();
          v52 = v14;
          v53 = v14;
          if (v14)
          {
            v30 = v53;
            result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
            v35 = v30;
          }
          else
          {
            v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 328))(v15);
            v49 = v85;
            v85[0] = v16;
            v85[1] = v17;
            v47 = &v84;
            v84 = 5;
            v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            lazy protocol witness table accessor for type String? and conformance <A> A?();
            v18 = v52;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v50 = v18;
            v51 = v18;
            if (v18)
            {
              v29 = v51;
              outlined destroy of String?();
              result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
              v35 = v29;
            }
            else
            {
              v19 = v72;
              outlined destroy of String?();
              v20 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v19 + 208))(v85);
              v44 = &v83;
              v83 = v20;
              v42 = &v82;
              v82 = 6;
              v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
              lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
              v21 = v50;
              KeyedEncodingContainer.encode<A>(_:forKey:)();
              v45 = v21;
              v46 = v21;
              if (v21)
              {
                v28 = v46;
                outlined destroy of [String : String]();
                result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
                v35 = v28;
              }
              else
              {
                v22 = v72;
                outlined destroy of [String : String]();
                (*(void (**)(uint64_t *))(*(_QWORD *)v22 + 352))(&v83);
                v23 = v45;
                v81[1] = 7;
                v24 = KeyedEncodingContainer.encode(_:forKey:)();
                v40 = v23;
                v41 = v23;
                if (v23)
                {
                  v27[2] = v41;
                  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
                }
                else
                {
                  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v72 + 384))(v81, v24);
                  v37 = &v80;
                  v80 = v81[0] & 1;
                  v36 = &v79;
                  v79 = 10;
                  lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
                  v25 = v40;
                  KeyedEncodingContainer.encode<A>(_:forKey:)();
                  v38 = v25;
                  v39 = v25;
                  if (v25)
                    v27[1] = v39;
                  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v73, v74);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GPKUserID? and conformance <A> A?()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GPKUserID?);
    v4 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AA8], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GPKUserID?);
    v4 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AC0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GPKUserID?);
    v4 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4AB0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy, &type metadata for GPKMemberPolicy);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy, &type metadata for GPKMemberPolicy);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy, &type metadata for GPKMemberPolicy);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy, &type metadata for GPKMemberPolicy);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy, &type metadata for GPKMemberPolicy);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy and conformance GPKMemberPolicy);
    return v0;
  }
  return v2;
}

uint64_t GPKMember.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKMember.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKMember.init(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  char v87;
  unsigned __int8 v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[2];
  _BYTE v104[3];
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  char *v108;

  v77 = (_QWORD *)a1;
  v108 = 0;
  v106 = 0;
  v105 = 0;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMember.CodingKeys>);
  v75 = *(_QWORD *)(v74 - 8);
  v76 = (*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v78 = (char *)v24 - v76;
  v108 = (char *)v24 - v76;
  v106 = MEMORY[0x24BDAC7A8](v77);
  v105 = v1;
  v107 = 32;
  swift_weakInit();
  v2 = v77;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0xF000000000000000;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  v107 = 736;
  *(_BYTE *)(v1 + 104) = 0;
  v80 = v2[3];
  v81 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v80);
  lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
  v3 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v82 = v3;
  v83 = v3;
  if (v3)
  {
    v33 = v83;
  }
  else
  {
    v104[2] = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v69 = 0;
    v70 = v4;
    v71 = v5;
    v72 = 0;
    v6 = v73;
    v107 = 737;
    *(_QWORD *)(v73 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v66 = v104;
    v104[0] = 1;
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    v7 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v67 = v7;
    v68 = v7;
    if (v7)
    {
      v32 = v68;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
      v33 = v32;
    }
    else
    {
      v107 = 739;
      *(_BYTE *)(v73 + 32) = v104[1] & 1;
      v63 = v103;
      v103[0] = 2;
      lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
      v8 = v67;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v64 = v8;
      v65 = v8;
      if (v8)
      {
        v31 = v65;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
        v33 = v31;
      }
      else
      {
        v107 = 747;
        *(_BYTE *)(v73 + 48) = v103[1];
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
        v59 = &v100;
        v100 = 3;
        lazy protocol witness table accessor for type GPKUserID? and conformance <A> A?();
        v9 = v64;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v61 = v9;
        v62 = v9;
        if (v9)
        {
          v30 = v62;
          (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
          v33 = v30;
        }
        else
        {
          v53 = v101;
          v54 = v102;
          v55 = &v99;
          swift_beginAccess();
          v10 = v73;
          v11 = v54;
          v12 = *(_QWORD *)(v73 + 64);
          v13 = *(_QWORD *)(v73 + 72);
          *(_QWORD *)(v73 + 64) = v53;
          *(_QWORD *)(v10 + 72) = v11;
          outlined consume of GPKUserID?(v12, v13);
          swift_endAccess();
          v14 = v61;
          v98 = 4;
          v15 = KeyedDecodingContainer.decode(_:forKey:)();
          v56 = v14;
          v57 = v15;
          v58 = v14;
          if (v14)
          {
            v29 = v58;
            (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
            v33 = v29;
          }
          else
          {
            v107 = 763;
            *(_BYTE *)(v73 + 49) = v57 & 1;
            v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            v49 = &v95;
            v95 = 5;
            lazy protocol witness table accessor for type String? and conformance <A> A?();
            v16 = v56;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v51 = v16;
            v52 = v16;
            if (v16)
            {
              v28 = v52;
              (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
              v33 = v28;
            }
            else
            {
              v42 = v96;
              v43 = v97;
              v44 = &v94;
              swift_beginAccess();
              v17 = v73;
              v18 = v43;
              *(_QWORD *)(v73 + 80) = v42;
              *(_QWORD *)(v17 + 88) = v18;
              swift_bridgeObjectRelease();
              swift_endAccess();
              v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
              v45 = &v91;
              v91 = 6;
              lazy protocol witness table accessor for type [String : String]? and conformance <A> A?();
              v19 = v51;
              KeyedDecodingContainer.decode<A>(_:forKey:)();
              v47 = v19;
              v48 = v19;
              if (v19)
              {
                v27 = v48;
                (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
                v33 = v27;
              }
              else
              {
                v90 = v92;
                if (v92)
                {
                  v93 = v90;
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
                  _allocateUninitializedArray<A>(_:)();
                  v93 = Dictionary.init(dictionaryLiteral:)();
                  outlined destroy of [String : String]?();
                }
                v20 = v47;
                v107 = 767;
                *(_QWORD *)(v73 + 40) = v93;
                v89 = 7;
                v21 = KeyedDecodingContainer.decode(_:forKey:)();
                v39 = v20;
                v40 = v21;
                v41 = v20;
                if (v20)
                {
                  v26 = v41;
                  (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
                  v33 = v26;
                }
                else
                {
                  v107 = 1023;
                  *(_QWORD *)(v73 + 96) = v40;
                  v36 = &v86;
                  v86 = 10;
                  lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
                  v22 = v39;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                  v37 = v22;
                  v38 = v22;
                  if (!v22)
                  {
                    v85 = v87;
                    if (v87 == 2)
                      v88 = 0;
                    else
                      v88 = v85 & 1;
                    v34 = v88;
                    v35 = &v84;
                    swift_beginAccess();
                    *(_BYTE *)(v73 + 104) = v34 & 1;
                    swift_endAccess();
                    (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
                    return v73;
                  }
                  v25 = v38;
                  (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
                  v33 = v25;
                }
              }
            }
          }
        }
      }
    }
  }
  v24[1] = v33;
  if ((v107 & 0x3FF) == 0x3FF)
  {
    swift_release();
  }
  else
  {
    if ((v107 & 1) != 0)
      outlined destroy of String();
    if ((v107 & 4) != 0)
      outlined destroy of [String : String]();
    swift_weakDestroy();
    outlined destroy of GPKUserID?(v73 + 64);
    outlined destroy of String?();
    type metadata accessor for GPKMember();
    swift_deallocPartialClassInstance();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  return v24[0];
}

uint64_t type metadata accessor for GPKMember()
{
  return objc_opt_self();
}

BOOL static GPKMember.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char v5;
  BOOL v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v20 = 0;
  v21 = 0;
  v16 = 0;
  v17 = 0;
  v26 = a1;
  v25 = a2;
  v24 = v2;
  v3 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 304))(&v22);
  v12 = v22;
  v13 = v23;
  if ((v23 & 0xF000000000000000) == 0xF000000000000000)
    goto LABEL_7;
  v20 = v22;
  v21 = v23;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)a2 + 304))(&v18, v3);
  v8 = v18;
  v9 = v19;
  if ((v19 & 0xF000000000000000) == 0xF000000000000000)
  {
    v3 = (_QWORD *)outlined consume of Data._Representation(v12, v13);
LABEL_7:
    (*(void (**)(_QWORD *))(*(_QWORD *)a1 + 160))(v3);
    (*(void (**)(void))(*(_QWORD *)a2 + 160))();
    v5 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
  v16 = v18;
  v17 = v19;
  v15[0] = v12;
  v15[1] = v13;
  v14[0] = v18;
  v14[1] = v19;
  v6 = static GPKUserID.== infix(_:_:)(v15, v14);
  outlined consume of Data._Representation(v8, v9);
  outlined consume of Data._Representation(v12, v13);
  return v6;
}

_QWORD *GPKMember.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = v1;
  v2 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 304))(&v9);
  v6 = v9;
  v7 = v10;
  if ((v10 & 0xF000000000000000) == 0xF000000000000000)
  {
    v8[0] = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 160))(v2);
    v8[1] = v4;
    Hasher.combine<A>(_:)();
    result = v8;
    outlined destroy of String();
  }
  else
  {
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    Hasher.combine<A>(_:)();
    return (_QWORD *)outlined consume of Data._Representation(v6, v7);
  }
  return result;
}

Swift::Void __swiftcall GPKMember.setValue(_:forKey:)(Swift::String _, Swift::String forKey)
{
  uint64_t v2;
  void (*v5)(_BYTE *, _QWORD);
  _BYTE v6[32];
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;

  v11 = _;
  v10 = forKey;
  v9 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = _;
  v7 = forKey;
  v5 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(void))(*(_QWORD *)v2 + 224))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  Dictionary.subscript.setter();
  v5(v6, 0);
}

Swift::String_optional __swiftcall GPKMember.valueForKey(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String_optional result;
  uint64_t v6;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  Swift::String v10;

  v10 = a1;
  v9 = v1;
  v2 = swift_bridgeObjectRetain();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 208))(v2);
  MEMORY[0x24263250C](v8);
  outlined destroy of String();
  v6 = v8[0];
  v7 = (void *)v8[1];
  swift_bridgeObjectRelease();
  v3 = v6;
  v4 = v7;
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

Swift::Void __swiftcall GPKMember.setMetadata(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  (*(void (**)(void *))(*(_QWORD *)v1 + 216))(a1._rawValue);
}

uint64_t GPKMember.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  unint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];
  char v40;
  char v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _BYTE v53[2];
  char v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  unint64_t v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = 0;
  v64 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v65 = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member: ", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  v2 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v37 + 304))(&v61, v2);
  if ((v62 & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID?((uint64_t)&v61);
    v36 = (Swift::String)0;
  }
  else
  {
    v34 = v61;
    v33 = v62;
    outlined copy of Data._Representation(v61, v62);
    outlined destroy of GPKUserID?((uint64_t)&v61);
    outlined copy of Data._Representation(v34, v33);
    v38[0] = v34;
    v38[1] = v33;
    v35._countAndFlagsBits = GPKUserID.hexString.getter();
    v35._object = v3;
    outlined destroy of GPKUserID((uint64_t)v38);
    outlined consume of Data._Representation(v34, v33);
    v36 = v35;
  }
  v60 = v36;
  if (v36._object)
  {
    v63 = v60;
  }
  else
  {
    v63 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Nil ID>", 8uLL, 1);
    outlined destroy of String?();
  }
  v59 = v63;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n    handle: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  v5 = swift_bridgeObjectRelease();
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 160))(v5);
  v58 = v6;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  v8 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 256))(v8) & 1) != 0)
  {
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" (me)", 5uLL, 1);
    object = v11._object;
    countAndFlagsBits = v11._countAndFlagsBits;
  }
  else
  {
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    object = v12._object;
    countAndFlagsBits = v12._countAndFlagsBits;
  }
  v55 = countAndFlagsBits;
  v56 = object;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n    role: ", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  v14 = swift_bridgeObjectRelease();
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v37 + 184))(&v54, v14);
  v53[1] = v54 & 1;
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n    inviteStatus: ", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v15);
  v16 = swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v37 + 232))(v53, v16);
  v52 = v53[0];
  GPKMember.InviteStatus.description.getter();
  v50 = v17;
  v51 = v18;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n    userID: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v19);
  v20 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v37 + 304))(&v47, v20);
  if ((v48 & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID?((uint64_t)&v47);
    v32 = (Swift::String)0;
  }
  else
  {
    v30 = v47;
    v29 = v48;
    outlined copy of Data._Representation(v47, v48);
    outlined destroy of GPKUserID?((uint64_t)&v47);
    outlined copy of Data._Representation(v30, v29);
    v39[0] = v30;
    v39[1] = v29;
    v31._countAndFlagsBits = GPKUserID.hexString.getter();
    v31._object = v21;
    outlined destroy of GPKUserID((uint64_t)v39);
    outlined consume of Data._Representation(v30, v29);
    v32 = v31;
  }
  v46 = v32;
  if (v32._object)
  {
    v49 = v46;
  }
  else
  {
    v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String?();
  }
  v45 = v49;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n    stableIdentifier: ", 0x18uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v22);
  v23 = swift_bridgeObjectRelease();
  v43._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 328))(v23);
  v43._object = v24;
  if (v24)
  {
    v44 = v43;
  }
  else
  {
    v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Nil>", 5uLL, 1);
    outlined destroy of String?();
  }
  v42 = v44;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",\n    policy: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v25);
  v26 = swift_bridgeObjectRelease();
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v37 + 384))(&v41, v26);
  v40 = v41 & 1;
  lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t GPKMember.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of String();
  outlined destroy of [String : String]();
  swift_weakDestroy();
  outlined destroy of GPKUserID?(v0 + 64);
  outlined destroy of String?();
  return v2;
}

uint64_t GPKMember.__deallocating_deinit()
{
  GPKMember.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKMember.hashValue.getter()
{
  type metadata accessor for GPKMember();
  lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for GPKMemberProperty.handle.getter in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t protocol witness for GPKMemberProperty.role.getter in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t protocol witness for GPKMemberProperty.metadata.getter in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t protocol witness for GPKMemberProperty.policy.getter in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 384))();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMember@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 424))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 416))();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 472))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 432))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMember(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMember()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 464))();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMember(uint64_t *a1, uint64_t *a2)
{
  return static GPKMember.== infix(_:_:)(*a1, *a2);
}

unint64_t base witness table accessor for Equatable in GPKMember.InviteStatus()
{
  return lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
}

unint64_t base witness table accessor for Equatable in GPKMember()
{
  return lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
}

uint64_t dispatch thunk of GPKMemberProperty.handle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of GPKMemberProperty.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of GPKMemberProperty.metadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GPKMemberProperty.policy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t method lookup function for GPKMember()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKMember.handle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GPKMember.handle.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of GPKMember.handle.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of GPKMember.role.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of GPKMember.role.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of GPKMember.role.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of GPKMember.metadata.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of GPKMember.metadata.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of GPKMember.metadata.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of GPKMember.inviteStatus.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of GPKMember.inviteStatus.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of GPKMember.inviteStatus.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of GPKMember.isMe.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))() & 1;
}

uint64_t dispatch thunk of GPKMember.isMe.setter(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 264))(a1 & 1);
}

uint64_t dispatch thunk of GPKMember.isMe.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of GPKMember.group.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of GPKMember.group.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of GPKMember.group.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of GPKMember.userID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of GPKMember.userID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of GPKMember.userID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of GPKMember.stableIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of GPKMember.stableIdentifier.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of GPKMember.stableIdentifier.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of GPKMember.metadataHashWhenInitializing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of GPKMember.metadataHashWhenInitializing.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of GPKMember.metadataHashWhenInitializing.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of GPKMember.hasUnsavedMetaDataChanges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))() & 1;
}

uint64_t dispatch thunk of GPKMember.policy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of GPKMember.policy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of GPKMember.policy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of GPKMember.__allocating_init(handle:role:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 408))();
}

uint64_t dispatch thunk of GPKMember.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of GPKMember.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 424))();
}

uint64_t dispatch thunk of GPKMember.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of GPKMember.setValue(_:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of GPKMember.valueForKey(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of GPKMember.setMetadata(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of GPKMember.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of GPKMember.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t getEnumTagSinglePayload for GPKMember.InviteStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMember.InviteStatus(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for GPKMember.InviteStatus(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMember.InviteStatus(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMember.InviteStatus()
{
  return &type metadata for GPKMember.InviteStatus;
}

uint64_t getEnumTagSinglePayload for GPKMember.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF5)
      goto LABEL_15;
    v7 = ((a2 + 10) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 245;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 11;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMember.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF5)
  {
    v5 = ((a3 + 10) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF5)
  {
    v4 = ((a2 - 246) >> 8) + 1;
    *result = a2 + 10;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 10;
  }
  return result;
}

uint64_t getEnumTag for GPKMember.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMember.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMember.CodingKeys()
{
  return &type metadata for GPKMember.CodingKeys;
}

unint64_t base witness table accessor for Equatable in GPKMember.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMember.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMember.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMember.CodingKeys and conformance GPKMember.CodingKeys();
}

_QWORD *outlined init with copy of GPKGroup?(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_retain();
  result = a2;
  *a2 = v4;
  return result;
}

id Invitation.__allocating_init(from:clientModelVersion:context:)(uint64_t a1, void *a2, float a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  Swift::String v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v34[4];
  Class v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  Class v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  Class v61;
  Class v62;
  uint64_t v63;
  unint64_t v64;
  Class v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  Class isa;
  Class v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v96;
  id v97;
  id v98;
  id v99;
  Class v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  float v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *object;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  _QWORD v119[2];
  uint64_t v120;
  int v121;
  uint64_t v122;
  id v123;

  v110 = a1;
  v109 = a3;
  v115 = a2;
  v122 = 0;
  v121 = 0;
  v120 = 0;
  v118 = 0;
  v102 = 0;
  v103 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v104 = (uint64_t)v34 - v103;
  v105 = type metadata accessor for UUID();
  v106 = *(_QWORD *)(v105 - 8);
  v107 = (*(_QWORD *)(v106 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v105);
  v108 = (char *)v34 - v107;
  v111 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v110);
  v112 = (uint64_t)v34 - v111;
  v122 = v3;
  v121 = v4;
  v120 = v5;
  v114 = (id)objc_opt_self();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation", 0xAuLL, 1);
  object = v6._object;
  v116 = (id)MEMORY[0x242632560](v6._countAndFlagsBits);
  swift_bridgeObjectRelease();
  v117 = objc_msgSend(v114, sel_entityForName_inManagedObjectContext_, v116, v115);

  if (v117)
  {
    v99 = v117;
    v98 = v117;
    v118 = v117;
    v96 = objc_allocWithZone(v100);
    v8 = v115;
    v97 = objc_msgSend(v96, sel_initWithEntity_insertIntoManagedObjectContext_, v98, v115);

    v123 = v97;
  }
  else
  {
    v7 = objc_allocWithZone(v100);
    v123 = objc_msgSend(v7, sel_initWithContext_, v115);
  }
  v94 = v123;
  (*(void (**)(id))(*(_QWORD *)v110 + 480))(v123);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v112, 1, v105) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v108, v112, v105);
    outlined destroy of UUID?(v112);
    v89 = UUID.uuidString.getter();
    v90 = v9;
    (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
    v92 = v89;
    v93 = v90;
  }
  else
  {
    v91 = 0;
    outlined destroy of UUID?(v112);
    v92 = v91;
    v93 = v91;
  }
  v87 = v93;
  v88 = v92;
  if (v93)
  {
    v85 = v88;
    v86 = v87;
    v82 = v87;
    v83 = MEMORY[0x242632560](v88);
    swift_bridgeObjectRelease();
    v84 = (void *)v83;
  }
  else
  {
    v84 = 0;
  }
  v10 = v110;
  v75 = v84;
  objc_msgSend(v94, sel_setInvitationID_);

  v78 = v123;
  (*(void (**)(id))(*(_QWORD *)v10 + 312))(v123);
  v11 = GPKGroupID.hexString.getter();
  v12 = v110;
  v76 = v13;
  v77 = (id)MEMORY[0x242632560](v11);
  outlined destroy of GPKGroupID(v104);
  swift_bridgeObjectRelease();
  objc_msgSend(v78, sel_setGroupID_, v77);

  v79 = v123;
  v80 = (*(uint64_t (**)(id))(*(_QWORD *)v12 + 504))(v123);
  v81 = v14;
  if ((v14 & 0xF000000000000000) == 0xF000000000000000)
  {
    v72 = 0;
  }
  else
  {
    v73 = v80;
    v74 = v81;
    v69 = v81;
    v70 = v80;
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v70, v69);
    v72 = isa;
  }
  v15 = v110;
  v65 = v72;
  objc_msgSend(v79, sel_setInvitationBlob_);

  v66 = v123;
  v67 = (*(uint64_t (**)(id))(*(_QWORD *)v15 + 552))(v123);
  v68 = v16;
  if ((v16 & 0xF000000000000000) == 0xF000000000000000)
  {
    v62 = 0;
  }
  else
  {
    v63 = v67;
    v64 = v68;
    v59 = v68;
    v60 = v67;
    v61 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v60, v59);
    v62 = v61;
  }
  v17 = v110;
  v51 = v62;
  objc_msgSend(v66, sel_setGroupBlob_);

  v52 = v123;
  v18 = (*(uint64_t (**)(id))(*(_QWORD *)v17 + 576))(v123);
  v19 = v110;
  objc_msgSend(v52, sel_setInvitationGroupVersion_, v18);

  v55 = v123;
  v20 = (*(uint64_t (**)(id))(*(_QWORD *)v19 + 288))(v123);
  v21 = v110;
  v53 = v22;
  v54 = (id)MEMORY[0x242632560](v20);
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_setGroupDomain_, v54);

  v56 = v123;
  v57 = (*(uint64_t (**)(id))(*(_QWORD *)v21 + 688))(v123);
  v58 = v23;
  if (v23)
  {
    v49 = v57;
    v50 = v58;
    v46 = v58;
    v47 = MEMORY[0x242632560](v57);
    swift_bridgeObjectRelease();
    v48 = (void *)v47;
  }
  else
  {
    v48 = 0;
  }
  v24 = v110;
  v37 = v48;
  objc_msgSend(v56, sel_setSenderHandle_);

  v38 = v123;
  (*(void (**)(id))(*(_QWORD *)v24 + 456))(v123);
  v25 = v110;
  GPKGroup.Mode.rawValue.getter();
  objc_msgSend(v38, sel_setGroupMode_, v26);

  v39 = v123;
  v27 = v123;
  *(float *)&v28 = v109;
  objc_msgSend(v39, sel_setClientModelVersion_, v28);

  v40 = v123;
  v119[1] = (*(uint64_t (**)(id))(*(_QWORD *)v25 + 336))(v123);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v42 = type metadata accessor for DatabaseParticipant();
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v29 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v30 = v101;
  v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in Invitation.init(from:clientModelVersion:context:), 0, v41, v42, v43, v29, MEMORY[0x24BEE3F20], (uint64_t)v119);
  v44 = v30;
  v45 = v31;
  if (v30)
  {
    v34[1] = v119[0];
    outlined destroy of [GPKMember]();

    swift_release();
    return (id)v34[2];
  }
  else
  {
    v34[3] = v45;
    outlined destroy of [GPKMember]();
    v35 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v40, sel_setParticipants_, v35);

    v36 = v123;
    v32 = v123;

    swift_release();
    return v36;
  }
}

id closure #1 in Invitation.init(from:clientModelVersion:context:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  type metadata accessor for DatabaseParticipant();
  swift_retain();
  result = DatabaseParticipant.__allocating_init(member:)(v7);
  if (v6)
    *a2 = v6;
  else
    *a3 = result;
  return result;
}

id Invitation.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v6;

  v6 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v6;
}

id Invitation.init(entity:insertInto:)(void *a1, void *a2)
{
  id v2;
  id v6;
  objc_super v7;
  void *v8;
  void *v9;
  id v10;

  v10 = 0;
  v9 = a1;
  v8 = a2;
  v7.receiver = 0;
  v7.super_class = (Class)type metadata accessor for Invitation();
  v6 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);
  v2 = v6;
  v10 = v6;

  return v6;
}

uint64_t type metadata accessor for Invitation()
{
  return objc_opt_self();
}

id Invitation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Invitation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GPKCreateGroupRequest.Member.id.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKCreateGroupRequest.Member.handle.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

void GPKCreateGroupRequest.Member.role.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16) & 1;
}

uint64_t GPKCreateGroupRequest.Member.metadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKCreateGroupRequest.Member.metadata.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*GPKCreateGroupRequest.Member.metadata.modify())()
{
  return GPKCreateGroupRequest.Member.metadata.modify;
}

void GPKCreateGroupRequest.Member.policy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32) & 1;
}

_BYTE *GPKCreateGroupRequest.Member.policy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result & 1;
  return result;
}

void (*GPKCreateGroupRequest.Member.policy.modify())()
{
  return GPKCreateGroupRequest.Member.policy.modify;
}

void __swiftcall GPKCreateGroupRequest.Member.init(handle:role:)(GroupKit::GPKCreateGroupRequest::Member *__return_ptr retstr, Swift::String handle, GroupKit::GPKMemberRole role)
{
  Swift::String v3;
  uint64_t countAndFlagsBits;
  _BYTE *v5;
  void *handlea;
  uint64_t v7;
  void *object;
  GroupKit::GPKMemberRole v9;
  void *rawValue;
  GroupKit::GPKMemberPolicy policy;
  char v13;
  char v14;
  GroupKit::GPKCreateGroupRequest::Member v15;
  char v16;
  uint64_t v17;
  void *v18;
  _QWORD __b[5];

  countAndFlagsBits = handle._countAndFlagsBits;
  handlea = handle._object;
  v5 = (_BYTE *)role;
  memset(__b, 0, 0x21uLL);
  v3._countAndFlagsBits = countAndFlagsBits;
  v3._object = handlea;
  v16 = 0;
  v17 = countAndFlagsBits;
  v18 = handlea;
  v16 = *v5 & 1;
  v14 = v16;
  v13 = 0;
  GPKCreateGroupRequest.Member.init(handle:role:policy:)(&v15, v3, (GroupKit::GPKMemberRole)&v14, (GroupKit::GPKMemberPolicy)&v13);
  v7 = v15.handle._countAndFlagsBits;
  object = v15.handle._object;
  v9 = v15.role;
  rawValue = v15.metadata._rawValue;
  policy = v15.policy;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[0] = v7;
  __b[1] = object;
  LOBYTE(__b[2]) = v9 & 1;
  __b[3] = rawValue;
  LOBYTE(__b[4]) = policy & 1;
  retstr->handle._countAndFlagsBits = v7;
  retstr->handle._object = object;
  retstr->role = v9 & 1;
  retstr->metadata._rawValue = rawValue;
  retstr->policy = policy & 1;
  outlined destroy of GPKCreateGroupRequest.Member();
}

void __swiftcall GPKCreateGroupRequest.Member.init(handle:role:policy:)(GroupKit::GPKCreateGroupRequest::Member *__return_ptr retstr, Swift::String handle, GroupKit::GPKMemberRole role, GroupKit::GPKMemberPolicy policy)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t countAndFlagsBits;
  void *v7;
  void *object;
  GroupKit::GPKMemberPolicy v10;
  GroupKit::GPKMemberRole v11;
  _QWORD __b[5];

  countAndFlagsBits = handle._countAndFlagsBits;
  object = handle._object;
  v4 = (_BYTE *)role;
  v5 = (_BYTE *)policy;
  memset(__b, 0, 0x21uLL);
  v11 = *v4 & 1;
  v10 = *v5 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v7 = (void *)Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  __b[3] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[0] = countAndFlagsBits;
  __b[1] = object;
  LOBYTE(__b[2]) = v11;
  LOBYTE(__b[4]) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  retstr->handle._countAndFlagsBits = countAndFlagsBits;
  retstr->handle._object = object;
  retstr->role = v11;
  retstr->metadata._rawValue = v7;
  retstr->policy = v10;
  swift_bridgeObjectRelease();
  outlined destroy of GPKCreateGroupRequest.Member();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKCreateGroupRequest.Member()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

_QWORD *GPKCreateGroupRequest.Member.init(member:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String handle;
  void *rawValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t countAndFlagsBits;
  void *object;
  GroupKit::GPKMemberRole role;
  uint64_t v17;
  GroupKit::GPKMemberPolicy policy;
  char v21;
  char v22;
  char v23;
  char v24;
  GroupKit::GPKCreateGroupRequest::Member v25;
  _QWORD *v26;
  _QWORD __b[5];

  memset(__b, 0, 0x21uLL);
  v26 = a1;
  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  handle._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
  handle._object = v2;
  v7 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(char *__return_ptr, uint64_t))(v6 + 16))(&v24, v7);
  v23 = v24 & 1;
  v9 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(char *__return_ptr, uint64_t))(v8 + 32))(&v22, v9);
  v21 = v22 & 1;
  GPKCreateGroupRequest.Member.init(handle:role:policy:)(&v25, handle, (GroupKit::GPKMemberRole)&v23, (GroupKit::GPKMemberPolicy)&v21);
  countAndFlagsBits = v25.handle._countAndFlagsBits;
  object = v25.handle._object;
  role = v25.role;
  rawValue = v25.metadata._rawValue;
  policy = v25.policy;
  swift_bridgeObjectRetain();
  __b[0] = countAndFlagsBits;
  __b[1] = object;
  LOBYTE(__b[2]) = role & 1;
  __b[3] = rawValue;
  LOBYTE(__b[4]) = policy & 1;
  v13 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v17 = (*(uint64_t (**)(uint64_t))(v12 + 24))(v13);
  swift_bridgeObjectRetain();
  __b[3] = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = countAndFlagsBits;
  *(_QWORD *)(a2 + 8) = object;
  *(_BYTE *)(a2 + 16) = role & 1;
  *(_QWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = policy & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  result = __b;
  outlined destroy of GPKCreateGroupRequest.Member();
  return result;
}

Swift::Void __swiftcall GPKCreateGroupRequest.Member.setMetadataValue(_:forKey:)(Swift::String_optional _, Swift::String forKey)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  Dictionary.subscript.setter();
}

uint64_t static GPKCreateGroupRequest.Member.== infix(_:_:)()
{
  char v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t GPKCreateGroupRequest.Member.hash(into:)()
{
  swift_bridgeObjectRetain();
  Hasher.combine<A>(_:)();
  outlined destroy of String();
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  Hasher.combine<A>(_:)();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
  Hasher.combine<A>(_:)();
  outlined destroy of [String : String]();
  lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
  return Hasher.combine<A>(_:)();
}

void static GPKCreateGroupRequest.Member.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D222528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D222574
                                                                                       + dword_23D2225DC[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D222584()
{
  uint64_t v1;

  return v1 == 0;
}

void GPKCreateGroupRequest.Member.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D22263C()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKCreateGroupRequest.Member.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handle", 6uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("role", 4uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("metadata", 8uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("policy", 6uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t GPKCreateGroupRequest.Member.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t GPKCreateGroupRequest.Member.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member.CodingKeys, &type metadata for GPKCreateGroupRequest.Member.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member.CodingKeys, &type metadata for GPKCreateGroupRequest.Member.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member.CodingKeys, &type metadata for GPKCreateGroupRequest.Member.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member.CodingKeys, &type metadata for GPKCreateGroupRequest.Member.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member.CodingKeys, &type metadata for GPKCreateGroupRequest.Member.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKCreateGroupRequest.Member.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKCreateGroupRequest.Member.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D222A9C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handle", 6uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKCreateGroupRequest.Member.CodingKeys(char *a1)
{
  char v1;

  static GPKCreateGroupRequest.Member.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKCreateGroupRequest.Member.CodingKeys()
{
  return GPKCreateGroupRequest.Member.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance GPKCreateGroupRequest.Member.CodingKeys(uint64_t a1)
{
  char *v1;

  GPKCreateGroupRequest.Member.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKCreateGroupRequest.Member.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKCreateGroupRequest.Member.CodingKeys()
{
  char *v0;

  GPKCreateGroupRequest.Member.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKCreateGroupRequest.Member.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKCreateGroupRequest.Member.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKCreateGroupRequest.Member.CodingKeys()
{
  return GPKCreateGroupRequest.Member.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKCreateGroupRequest.Member.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKCreateGroupRequest.Member.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKCreateGroupRequest.Member.CodingKeys()
{
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKCreateGroupRequest.Member.CodingKeys()
{
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKCreateGroupRequest.Member.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  _BYTE v44[2];
  uint64_t *v45;
  _QWORD *v46;

  v24 = a1;
  v46 = 0;
  v45 = 0;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKCreateGroupRequest.Member.CodingKeys>);
  v25 = *(_QWORD *)(v36 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v32 = (char *)v7 - v26;
  v46 = (_QWORD *)MEMORY[0x24BDAC7A8](v24);
  v34 = *v1;
  v35 = v1[1];
  v27 = *((unsigned __int8 *)v1 + 16);
  v28 = v1[3];
  v29 = *((unsigned __int8 *)v1 + 32);
  v45 = v1;
  v30 = v46[3];
  v31 = v46[4];
  __swift_project_boxed_opaque_existential_1(v46, v30);
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v33;
  swift_bridgeObjectRetain();
  v44[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v37 = v2;
  v38 = v2;
  if (v2)
  {
    v9 = v38;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v32, v36);
    v10 = v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = v44;
    v44[0] = v27 & 1;
    v20 = &v43;
    v43 = 1;
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    v3 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v22 = v3;
    v23 = v3;
    if (v3)
    {
      v8 = v23;
      result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v32, v36);
      v10 = v8;
    }
    else
    {
      swift_bridgeObjectRetain();
      v17 = &v42;
      v42 = v28;
      v15 = &v41;
      v41 = 2;
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
      v4 = v22;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v18 = v4;
      v19 = v4;
      if (v4)
      {
        v7[1] = v19;
        outlined destroy of [String : String]();
        return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v32, v36);
      }
      else
      {
        outlined destroy of [String : String]();
        v12 = &v40;
        v40 = v29 & 1;
        v11 = &v39;
        v39 = 3;
        lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
        v5 = v18;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v13 = v5;
        v14 = v5;
        if (v5)
          v7[0] = v14;
        return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v32, v36);
      }
    }
  }
  return result;
}

uint64_t GPKCreateGroupRequest.Member.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  _QWORD __b[5];

  memset(__b, 0, 0x21uLL);
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  __b[0] = *(_QWORD *)v0;
  __b[1] = v1;
  LOBYTE(__b[2]) = v2 & 1;
  __b[3] = v3;
  LOBYTE(__b[4]) = v4 & 1;
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member, &type metadata for GPKCreateGroupRequest.Member);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member, &type metadata for GPKCreateGroupRequest.Member);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member, &type metadata for GPKCreateGroupRequest.Member);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.Member, &type metadata for GPKCreateGroupRequest.Member);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member);
    return v0;
  }
  return v2;
}

uint64_t *GPKCreateGroupRequest.Member.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned __int8 v55;
  char v56;
  uint64_t v57;
  char v58;
  unsigned __int8 v59;
  char v60;
  uint64_t v61;
  _QWORD v62[2];
  char v63;
  uint64_t v64;
  char v65;
  char v66;

  v43 = a2;
  v47 = a1;
  v61 = 0;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKCreateGroupRequest.Member.CodingKeys>);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v48 = (char *)&v17 - v46;
  v66 = 0;
  v61 = MEMORY[0x24BDAC7A8](v47);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v2 = Dictionary.init(dictionaryLiteral:)();
  v66 = 4;
  v64 = v2;
  v50 = v47[3];
  v51 = v47[4];
  __swift_project_boxed_opaque_existential_1(v47, v50);
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
  v3 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v21 = v53;
  }
  else
  {
    v60 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v39 = 0;
    v40 = v4;
    v41 = v5;
    v42 = 0;
    v35 = v5;
    v34 = v4;
    v66 = 5;
    swift_bridgeObjectRetain();
    v62[0] = v34;
    v62[1] = v35;
    v36 = &v58;
    v58 = 1;
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    v6 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v6;
    v38 = v6;
    if (v6)
    {
      v20 = v38;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
      v21 = v20;
    }
    else
    {
      v29 = v59;
      v63 = v59 & 1;
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      v30 = &v56;
      v56 = 2;
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
      v7 = v37;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v32 = v7;
      v33 = v7;
      if (v7)
      {
        v19 = v33;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
        v21 = v19;
      }
      else
      {
        v25 = v57;
        swift_bridgeObjectRetain();
        v64 = v25;
        swift_bridgeObjectRelease();
        v26 = &v54;
        v54 = 3;
        lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
        v8 = v32;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v27 = v8;
        v28 = v8;
        if (!v8)
        {
          v23 = v55;
          v24 = v62;
          v22 = 1;
          v65 = v55 & 1;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = v35;
          v10 = v22;
          v11 = v29;
          v12 = v25;
          v13 = v23;
          v14 = v43;
          v15 = v47;
          *v43 = v34;
          v14[1] = v9;
          *((_BYTE *)v14 + 16) = v11 & v10;
          v14[3] = v12;
          *((_BYTE *)v14 + 32) = v13 & 1;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
          result = v24;
          outlined destroy of GPKCreateGroupRequest.Member();
          return result;
        }
        v18 = v28;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
        v21 = v18;
      }
    }
  }
  v17 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  if ((v66 & 1) != 0)
    outlined destroy of String();
  result = &v64;
  outlined destroy of [String : String]();
  return result;
}

uint64_t protocol witness for GPKMemberProperty.handle.getter in conformance GPKCreateGroupRequest.Member()
{
  return GPKCreateGroupRequest.Member.handle.getter();
}

void protocol witness for GPKMemberProperty.role.getter in conformance GPKCreateGroupRequest.Member(_BYTE *a1@<X8>)
{
  GPKCreateGroupRequest.Member.role.getter(a1);
}

uint64_t protocol witness for GPKMemberProperty.metadata.getter in conformance GPKCreateGroupRequest.Member()
{
  return GPKCreateGroupRequest.Member.metadata.getter();
}

void protocol witness for GPKMemberProperty.policy.getter in conformance GPKCreateGroupRequest.Member(_BYTE *a1@<X8>)
{
  GPKCreateGroupRequest.Member.policy.getter(a1);
}

uint64_t *protocol witness for Decodable.init(from:) in conformance GPKCreateGroupRequest.Member@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GPKCreateGroupRequest.Member.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKCreateGroupRequest.Member(uint64_t a1)
{
  return GPKCreateGroupRequest.Member.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKCreateGroupRequest.Member()
{
  return GPKCreateGroupRequest.Member.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKCreateGroupRequest.Member()
{
  return GPKCreateGroupRequest.Member.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKCreateGroupRequest.Member(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance GPKCreateGroupRequest.Member@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = GPKCreateGroupRequest.Member.id.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKCreateGroupRequest.Member()
{
  return static GPKCreateGroupRequest.Member.== infix(_:_:)() & 1;
}

uint64_t key path getter for GPKCreateGroupRequest.groupDomain : GPKCreateGroupRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKCreateGroupRequest.groupDomain : GPKCreateGroupRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v4, v6);
  return swift_release();
}

uint64_t GPKCreateGroupRequest.groupDomain.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKCreateGroupRequest.groupDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKCreateGroupRequest.groupDomain.modify())()
{
  swift_beginAccess();
  return GPKCreateGroupRequest.groupDomain.modify;
}

uint64_t GPKCreateGroupRequest.groupDomain.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKCreateGroupRequest.serviceName : GPKCreateGroupRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKCreateGroupRequest.serviceName : GPKCreateGroupRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 160))(v4, v6);
  return swift_release();
}

uint64_t GPKCreateGroupRequest.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKCreateGroupRequest.serviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKCreateGroupRequest.serviceName.modify())()
{
  swift_beginAccess();
  return GPKCreateGroupRequest.serviceName.modify;
}

uint64_t GPKCreateGroupRequest.serviceName.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKCreateGroupRequest.groupMode : GPKCreateGroupRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v2);
  return swift_release();
}

uint64_t key path setter for GPKCreateGroupRequest.groupMode : GPKCreateGroupRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 184))(v3);
  return swift_release();
}

uint64_t GPKCreateGroupRequest.groupMode.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 48);
  swift_endAccess();
  return v2;
}

uint64_t GPKCreateGroupRequest.groupMode.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_endAccess();
}

uint64_t (*GPKCreateGroupRequest.groupMode.modify())()
{
  swift_beginAccess();
  return GPKCreateGroupRequest.groupMode.modify;
}

uint64_t GPKCreateGroupRequest.groupMode.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKCreateGroupRequest.groupMetadata : GPKCreateGroupRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v2);
  return swift_release();
}

uint64_t key path setter for GPKCreateGroupRequest.groupMetadata : GPKCreateGroupRequest(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of [String : String](a1, &v3);
  v2 = v3;
  swift_retain();
  GPKCreateGroupRequest.groupMetadata.setter(v2);
  return swift_release();
}

uint64_t GPKCreateGroupRequest.groupMetadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKCreateGroupRequest.groupMetadata.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKCreateGroupRequest.groupMetadata.modify())()
{
  swift_beginAccess();
  return GPKCreateGroupRequest.groupMetadata.modify;
}

uint64_t GPKCreateGroupRequest.groupMetadata.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKCreateGroupRequest.meMemberMetadata : GPKCreateGroupRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 224))(v2);
  return swift_release();
}

uint64_t key path setter for GPKCreateGroupRequest.meMemberMetadata : GPKCreateGroupRequest(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of [String : String](a1, &v3);
  v2 = v3;
  swift_retain();
  GPKCreateGroupRequest.meMemberMetadata.setter(v2);
  return swift_release();
}

uint64_t GPKCreateGroupRequest.meMemberMetadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKCreateGroupRequest.meMemberMetadata.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKCreateGroupRequest.meMemberMetadata.modify())()
{
  swift_beginAccess();
  return GPKCreateGroupRequest.meMemberMetadata.modify;
}

uint64_t GPKCreateGroupRequest.meMemberMetadata.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKCreateGroupRequest.members : GPKCreateGroupRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v2);
  return swift_release();
}

uint64_t key path setter for GPKCreateGroupRequest.members : GPKCreateGroupRequest(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of Set<GPKCreateGroupRequest.Member>(a1, &v3);
  v2 = v3;
  swift_retain();
  GPKCreateGroupRequest.members.setter(v2);
  return swift_release();
}

uint64_t GPKCreateGroupRequest.members.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t GPKCreateGroupRequest.members.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKCreateGroupRequest.members.modify())()
{
  swift_beginAccess();
  return GPKCreateGroupRequest.members.modify;
}

uint64_t GPKCreateGroupRequest.members.modify()
{
  return swift_endAccess();
}

uint64_t GPKCreateGroupRequest.__allocating_init(memberHandle:memberRole:)(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  GroupKit::GPKMemberRole role;
  GroupKit::GPKMemberPolicy policy;
  uint64_t v14;
  void *object;
  void *rawValue;
  uint64_t v17;
  _BYTE __b[33];
  char v19;
  GroupKit::GPKCreateGroupRequest::Member v20;
  char v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v21 = 0;
  memset(__b, 0, sizeof(__b));
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  v22 = a1;
  v23 = a2;
  v21 = *a3 & 1;
  v19 = v21;
  GPKCreateGroupRequest.Member.init(handle:role:)(&v20, v4, (GroupKit::GPKMemberRole)&v19);
  countAndFlagsBits = v20.handle._countAndFlagsBits;
  object = v20.handle._object;
  role = v20.role;
  rawValue = v20.metadata._rawValue;
  policy = v20.policy;
  *(_QWORD *)__b = v20.handle._countAndFlagsBits;
  *(_QWORD *)&__b[8] = v20.handle._object;
  __b[16] = v20.role & 1;
  *(_QWORD *)&__b[24] = v20.metadata._rawValue;
  __b[32] = v20.policy & 1;
  v10 = _allocateUninitializedArray<A>(_:)();
  v14 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)v14 = countAndFlagsBits;
  *(_QWORD *)(v14 + 8) = object;
  *(_BYTE *)(v14 + 16) = role & 1;
  *(_QWORD *)(v14 + 24) = rawValue;
  *(_BYTE *)(v14 + 32) = policy & 1;
  _finalizeUninitializedArray<A>(_:)();
  v17 = (*(uint64_t (**)(uint64_t))(v3 + 272))(v10);
  swift_retain();
  v24 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

uint64_t GPKCreateGroupRequest.__allocating_init(members:)()
{
  swift_allocObject();
  return GPKCreateGroupRequest.init(members:)();
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMemberProperty]);
  v0 = lazy protocol witness table accessor for type [GPKMemberProperty] and conformance [A]();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))implicit closure #1 in GPKCreateGroupRequest.init(members:), 0, v4, (uint64_t)&type metadata for GPKCreateGroupRequest.Member, MEMORY[0x24BEE4078], v0, MEMORY[0x24BEE40A8], v5);
  v2 = (*(uint64_t (**)(uint64_t))(v3 + 272))(v6);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t GPKCreateGroupRequest.init(members:)()
{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[2] = 0;
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v0[7] = Dictionary.init(dictionaryLiteral:)();
  _allocateUninitializedArray<A>(_:)();
  v0[8] = Dictionary.init(dictionaryLiteral:)();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
  v0[9] = Set.init(arrayLiteral:)();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKCreateGroupRequest.Member]);
  lazy protocol witness table accessor for type [GPKCreateGroupRequest.Member] and conformance [A]();
  v2 = Set.init<A>(_:)();
  swift_beginAccess();
  v0[9] = v2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t lazy protocol witness table accessor for type [GPKCreateGroupRequest.Member] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKCreateGroupRequest.Member] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKCreateGroupRequest.Member] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKCreateGroupRequest.Member]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKCreateGroupRequest.Member] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKCreateGroupRequest.Member] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKCreateGroupRequest.Member] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKCreateGroupRequest.Member]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKCreateGroupRequest.Member] and conformance [A]);
    return v1;
  }
  return v3;
}

_QWORD *implicit closure #1 in GPKCreateGroupRequest.init(members:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[6];

  v4[5] = a1;
  outlined init with copy of GPKMemberProperty(a1, (uint64_t)v4);
  return GPKCreateGroupRequest.Member.init(member:)(v4, a2);
}

unint64_t lazy protocol witness table accessor for type [GPKMemberProperty] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMemberProperty] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMemberProperty] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMemberProperty]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMemberProperty] and conformance [A]);
    return v1;
  }
  return v3;
}

Swift::Void __swiftcall GPKCreateGroupRequest.setMeMemberMetadataValue(_:forKey:)(Swift::String_optional _, Swift::String forKey)
{
  uint64_t v2;
  uint64_t (*v5)();
  _BYTE v6[32];
  Swift::String v7;
  Swift::String_optional v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String_optional v11;

  v11 = _;
  v10 = forKey;
  v9 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = _;
  v7 = forKey;
  v5 = GPKCreateGroupRequest.meMemberMetadata.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  Dictionary.subscript.setter();
  ((void (*)(_BYTE *, _QWORD))v5)(v6, 0);
}

Swift::Void __swiftcall GPKCreateGroupRequest.setGroupMetadataValue(_:forKey:)(Swift::String_optional _, Swift::String forKey)
{
  uint64_t v2;
  uint64_t (*v5)();
  _BYTE v6[32];
  Swift::String v7;
  Swift::String_optional v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String_optional v11;

  v11 = _;
  v10 = forKey;
  v9 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = _;
  v7 = forKey;
  v5 = GPKCreateGroupRequest.groupMetadata.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  Dictionary.subscript.setter();
  ((void (*)(_BYTE *, _QWORD))v5)(v6, 0);
}

Swift::Void __swiftcall GPKCreateGroupRequest.addMember(_:)(GroupKit::GPKCreateGroupRequest::Member *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t (*v8)();
  uint64_t v9;
  os_log_type_t v10;
  Swift::String fileID;
  void *_;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17[32];
  char v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26[32];
  _BYTE v27[33];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  _BYTE __dst[33];
  __int128 v34;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v2 = memcpy(__dst, a1, sizeof(__dst));
  v32 = v1;
  v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v1 + 248))(v2);
  outlined retain of GPKCreateGroupRequest.Member((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
  lazy protocol witness table accessor for type Set<GPKCreateGroupRequest.Member> and conformance Set<A>();
  Collection.firstIndex(where:)();
  outlined release of GPKCreateGroupRequest.Member((uint64_t)__dst);
  outlined destroy of Set<GPKCreateGroupRequest.Member>();
  v14 = v29;
  v15 = v30;
  v16 = v31;
  if (v31 != 255)
  {
    v23 = v29;
    v24 = v30;
    v25 = v31 & 1;
    v21 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v22 = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member with a handle ", 0x15uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v34 = *(_OWORD *)__dst;
    outlined retain of String();
    v20 = v34;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" already found in added list - replacing it with the incoming member", 0x44uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v9 = String.init(stringInterpolation:)();
    _ = v6;
    fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/GPKCreateGroupRequest.swift", 0x24uLL, 1);
    v10 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v19);
    v7._countAndFlagsBits = v9;
    v7._object = _;
    v18 = v19 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v7, v10, fileID, 155, (GroupKit::LogSubsystem)&v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = GPKCreateGroupRequest.members.modify();
    Set.remove(at:)();
    ((void (*)(char *, _QWORD))v13)(v17, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Set<GPKCreateGroupRequest.Member>.Index._Variant(v14, v15, v16 & 1);
  }
  outlined retain of GPKCreateGroupRequest.Member((uint64_t)__dst);
  memcpy(v27, __dst, sizeof(v27));
  v8 = GPKCreateGroupRequest.members.modify();
  Set.insert(_:)();
  ((void (*)(char *, _QWORD))v8)(v26, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in GPKCreateGroupRequest.addMember(_:)()
{
  char v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t outlined retain of GPKCreateGroupRequest.Member(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in GPKCreateGroupRequest.addMember(_:)()
{
  return closure #1 in GPKCreateGroupRequest.addMember(_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type Set<GPKCreateGroupRequest.Member> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE1728], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance Set<A>);
    return v1;
  }
  return v3;
}

uint64_t outlined release of GPKCreateGroupRequest.Member(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<GPKCreateGroupRequest.Member>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of String()
{
  swift_bridgeObjectRetain();
}

uint64_t outlined consume of Set<GPKCreateGroupRequest.Member>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

Swift::Void __swiftcall GPKCreateGroupRequest.addMembers(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  char v5;
  uint64_t v6;
  char v7;
  _QWORD __b[5];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *rawValue;

  v15 = 0;
  v16 = 0;
  memset(__b, 0, 0x21uLL);
  rawValue = a1._rawValue;
  v17 = v1;
  swift_bridgeObjectRetain();
  v14 = a1._rawValue;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKCreateGroupRequest.Member]);
  lazy protocol witness table accessor for type [GPKCreateGroupRequest.Member] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKCreateGroupRequest.Member]>);
    IndexingIterator.next()();
    if (!v10)
      break;
    __b[0] = v9;
    __b[1] = v10;
    LOBYTE(__b[2]) = v11 & 1;
    __b[3] = v12;
    LOBYTE(__b[4]) = v13 & 1;
    v4[0] = v9;
    v4[1] = v10;
    v5 = v11 & 1;
    v6 = v12;
    v7 = v13 & 1;
    (*(void (**)(_QWORD *))(*(_QWORD *)v2 + 296))(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined destroy of IndexingIterator<[GPKCreateGroupRequest.Member]>();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[GPKCreateGroupRequest.Member]>()
{
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall GPKCreateGroupRequest.removeMember(handle:)(Swift::String handle)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(void))(*(_QWORD *)v1 + 248))();
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
  Set.filter(_:)();
  v2 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 248))(v2);
  v3 = Set.subtracting(_:)();
  GPKCreateGroupRequest.members.setter(v3);
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in GPKCreateGroupRequest.removeMember(handle:)()
{
  char v1;

  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t partial apply for closure #1 in GPKCreateGroupRequest.removeMember(handle:)()
{
  return closure #1 in GPKCreateGroupRequest.removeMember(handle:)() & 1;
}

Swift::Void __swiftcall GPKCreateGroupRequest.setMemberMetadata(_:forKey:handle:)(Swift::String_optional _, Swift::String forKey, Swift::String handle)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  os_log_type_t v10;
  Swift::String fileID;
  void *v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v27[32];
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  _QWORD v33[14];
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String_optional v49;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  memset(&v33[9], 0, 0x21uLL);
  v49 = _;
  v48 = forKey;
  v47 = handle;
  v46 = v3;
  v42 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 248))();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
  lazy protocol witness table accessor for type Set<GPKCreateGroupRequest.Member> and conformance Set<A>();
  Collection.firstIndex(where:)();
  swift_bridgeObjectRelease();
  outlined destroy of Set<GPKCreateGroupRequest.Member>();
  v20 = v43;
  v21 = v44;
  v22 = v45;
  if (v45 == 255)
  {
    v40 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v41 = v4;
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member with a handle ", 0x15uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    v39 = handle;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" not found", 0xAuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v9 = String.init(stringInterpolation:)();
    v12 = v7;
    v10 = static os_log_type_t.error.getter();
    fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/GPKCreateGroupRequest.swift", 0x24uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v38);
    v8._countAndFlagsBits = v9;
    v8._object = v12;
    v37 = v38 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v8, v10, fileID, 197, (GroupKit::LogSubsystem)&v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = v43;
    v35 = v44;
    v36 = v45 & 1;
    (*(void (**)(uint64_t *))(*(_QWORD *)v23 + 248))(&v42);
    outlined copy of Set<A>.Index._Variant<A>(v20, v21, v22 & 1);
    lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
    Set.subscript.getter();
    swift_bridgeObjectRelease();
    outlined consume of Set<GPKCreateGroupRequest.Member>.Index._Variant(v20, v21, v22 & 1);
    GPKCreateGroupRequest.Member.setMetadataValue(_:forKey:)(_, forKey);
    v13 = GPKCreateGroupRequest.members.modify();
    Set.remove(at:)();
    ((void (*)(_QWORD *, _QWORD))v13)(v33, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v33[9];
    v15 = v33[10];
    v16 = v33[11];
    v17 = v33[12];
    v18 = v33[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v14;
    v29 = v15;
    v30 = v16 & 1;
    v31 = v17;
    v32 = v18 & 1;
    v19 = GPKCreateGroupRequest.members.modify();
    Set.insert(_:)();
    ((void (*)(char *, _QWORD))v19)(v27, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of GPKCreateGroupRequest.Member();
    outlined consume of Set<GPKCreateGroupRequest.Member>.Index._Variant(v20, v21, v22 & 1);
  }
}

uint64_t closure #1 in GPKCreateGroupRequest.setMemberMetadata(_:forKey:handle:)()
{
  char v1;

  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t partial apply for closure #1 in GPKCreateGroupRequest.setMemberMetadata(_:forKey:handle:)()
{
  return closure #1 in GPKCreateGroupRequest.setMemberMetadata(_:forKey:handle:)() & 1;
}

uint64_t outlined copy of Set<A>.Index._Variant<A>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

void static GPKCreateGroupRequest.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D225C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D225CE8
                                                                                       + *((int *)qword_23D225D70 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D225CF8()
{
  uint64_t v1;

  return v1 == 0;
}

void GPKCreateGroupRequest.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D225DD8()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKCreateGroupRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  unsigned __int8 v8;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDomain", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 1;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMode", 9uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 2;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMetadata", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 3;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("meMemberMetadata", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 4;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("members", 7uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 5;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 6;
}

uint64_t GPKCreateGroupRequest.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t GPKCreateGroupRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.CodingKeys, &type metadata for GPKCreateGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.CodingKeys, &type metadata for GPKCreateGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.CodingKeys, &type metadata for GPKCreateGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.CodingKeys, &type metadata for GPKCreateGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest.CodingKeys, &type metadata for GPKCreateGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKCreateGroupRequest.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKCreateGroupRequest.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D226390()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDomain", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKCreateGroupRequest.CodingKeys(char *a1)
{
  char v1;

  static GPKCreateGroupRequest.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKCreateGroupRequest.CodingKeys()
{
  return GPKCreateGroupRequest.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance GPKCreateGroupRequest.CodingKeys(uint64_t a1)
{
  char *v1;

  GPKCreateGroupRequest.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKCreateGroupRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKCreateGroupRequest.CodingKeys()
{
  char *v0;

  GPKCreateGroupRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKCreateGroupRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKCreateGroupRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKCreateGroupRequest.CodingKeys()
{
  return GPKCreateGroupRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKCreateGroupRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKCreateGroupRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKCreateGroupRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKCreateGroupRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKCreateGroupRequest.deinit()
{
  uint64_t v1;

  outlined destroy of String?();
  outlined destroy of String?();
  outlined destroy of [String : String]();
  outlined destroy of [String : String]();
  outlined destroy of Set<GPKCreateGroupRequest.Member>();
  return v1;
}

uint64_t GPKCreateGroupRequest.__deallocating_deinit()
{
  GPKCreateGroupRequest.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKCreateGroupRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;

  v50 = a1;
  v73 = 0;
  v72 = 0;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKCreateGroupRequest.CodingKeys>);
  v51 = *(_QWORD *)(v57 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v56 = (char *)v24 - v52;
  v73 = (_QWORD *)MEMORY[0x24BDAC7A8](v50);
  v72 = v1;
  v53 = v73[3];
  v54 = v73[4];
  __swift_project_boxed_opaque_existential_1(v73, v53);
  lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
  v2 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 128))(v2);
  v3 = v58;
  v59 = v4;
  v71 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v60 = v3;
  v61 = v3;
  if (v3)
  {
    v28 = v61;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v57);
    v29 = v28;
  }
  else
  {
    v5 = v55;
    v6 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 152))(v6);
    v7 = v60;
    v47 = v8;
    v70 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v48 = v7;
    v49 = v7;
    if (v7)
    {
      v27 = v49;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v57);
      v29 = v27;
    }
    else
    {
      v9 = v55;
      v10 = swift_bridgeObjectRelease();
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 176))(v10);
      v44 = &v69;
      v69 = v11;
      v43 = &v68;
      v68 = 2;
      lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
      v12 = v48;
      v13 = KeyedEncodingContainer.encode<A>(_:forKey:)();
      v45 = v12;
      v46 = v12;
      if (v12)
      {
        v26 = v46;
        result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v57);
        v29 = v26;
      }
      else
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 200))(v13);
        v39 = &v67;
        v67 = v14;
        v37 = &v66;
        v66 = 3;
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        v15 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
        v16 = v45;
        v40 = v15;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v41 = v16;
        v42 = v16;
        if (v16)
        {
          v25 = v42;
          outlined destroy of [String : String]();
          result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v57);
          v29 = v25;
        }
        else
        {
          v17 = v55;
          outlined destroy of [String : String]();
          v18 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v17 + 224))(&v67);
          v19 = v41;
          v65 = v18;
          v64 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v35 = v19;
          v36 = v19;
          if (v19)
          {
            v24[1] = v36;
            outlined destroy of [String : String]();
            return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v57);
          }
          else
          {
            v20 = v55;
            outlined destroy of [String : String]();
            v21 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v20 + 248))(&v65);
            v32 = &v63;
            v63 = v21;
            v30 = &v62;
            v62 = 5;
            v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
            lazy protocol witness table accessor for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>();
            v22 = v35;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v33 = v22;
            v34 = v22;
            if (v22)
              v24[0] = v34;
            outlined destroy of Set<GPKCreateGroupRequest.Member>();
            return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v57);
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>;
  if (!lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
    v4 = lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE1700], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>;
  if (!lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
    v4 = lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE1720], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>);
    return v0;
  }
  return v3;
}

_QWORD *GPKCreateGroupRequest.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  swift_allocObject();
  v5 = GPKCreateGroupRequest.init(from:)(a1);
  if (v3)
    return (_QWORD *)v2;
  else
    return v5;
}

_QWORD *GPKCreateGroupRequest.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  ValueMetadata *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  _BYTE v83[32];
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  _BYTE v91[32];
  _BYTE v92[32];
  _QWORD *v93;
  uint64_t v94;

  v73 = (_QWORD *)a1;
  v94 = 0;
  v93 = 0;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKCreateGroupRequest.CodingKeys>);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = (*(_QWORD *)(v65 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v74 = (char *)v20 - v66;
  v94 = MEMORY[0x24BDAC7A8](v73);
  v93 = v1;
  v70 = 0;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  v1[5] = 0;
  v1[6] = 0;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v68 = MEMORY[0x24BEE0D00];
  v69 = MEMORY[0x24BEE0D10];
  v1[7] = Dictionary.init(dictionaryLiteral:)();
  _allocateUninitializedArray<A>(_:)();
  v1[8] = Dictionary.init(dictionaryLiteral:)();
  v71 = &type metadata for GPKCreateGroupRequest.Member;
  v72 = _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
  v2 = Set.init(arrayLiteral:)();
  v3 = v73;
  v1[9] = v2;
  v76 = v3[3];
  v77 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v76);
  lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
  v4 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v78 = v4;
  v79 = v4;
  if (v4)
  {
    v26 = v79;
  }
  else
  {
    v92[31] = 0;
    v5 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v59 = 0;
    v60 = v5;
    v61 = v6;
    v62 = 0;
    v53 = v6;
    v52 = v5;
    v54 = v92;
    swift_beginAccess();
    v7 = v63;
    v8 = v53;
    v63[2] = v52;
    v7[3] = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v9 = v59;
    v91[31] = 1;
    v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v55 = v9;
    v56 = v10;
    v57 = v11;
    v58 = v9;
    if (v9)
    {
      v25 = v58;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v74, v64);
      v26 = v25;
    }
    else
    {
      v47 = v57;
      v46 = v56;
      v48 = v91;
      swift_beginAccess();
      v12 = v63;
      v13 = v47;
      v63[4] = v46;
      v12[5] = v13;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v49 = &v89;
      v89 = 2;
      lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
      v14 = v55;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v50 = v14;
      v51 = v14;
      if (v14)
      {
        v24 = v51;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v74, v64);
        v26 = v24;
      }
      else
      {
        v39 = v90;
        v40 = &v88;
        swift_beginAccess();
        v63[6] = v39;
        swift_endAccess();
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        v41 = &v86;
        v86 = 3;
        v15 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
        v16 = v50;
        v43 = v15;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v44 = v16;
        v45 = v16;
        if (v16)
        {
          v23 = v45;
          (*(void (**)(char *, uint64_t))(v65 + 8))(v74, v64);
          v26 = v23;
        }
        else
        {
          v35 = v87;
          v36 = &v85;
          swift_beginAccess();
          v63[7] = v35;
          swift_bridgeObjectRelease();
          swift_endAccess();
          v17 = v44;
          v83[31] = 4;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v37 = v17;
          v38 = v17;
          if (v17)
          {
            v22 = v38;
            (*(void (**)(char *, uint64_t))(v65 + 8))(v74, v64);
            v26 = v22;
          }
          else
          {
            v29 = v84;
            v30 = v83;
            swift_beginAccess();
            v63[8] = v29;
            swift_bridgeObjectRelease();
            swift_endAccess();
            v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>);
            v31 = &v81;
            v81 = 5;
            lazy protocol witness table accessor for type Set<GPKCreateGroupRequest.Member> and conformance <> Set<A>();
            v18 = v37;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v33 = v18;
            v34 = v18;
            if (!v18)
            {
              v27 = v82;
              v28 = &v80;
              swift_beginAccess();
              v63[9] = v27;
              swift_bridgeObjectRelease();
              swift_endAccess();
              (*(void (**)(char *, uint64_t))(v65 + 8))(v74, v64);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
              return v63;
            }
            v21 = v34;
            (*(void (**)(char *, uint64_t))(v65 + 8))(v74, v64);
            v26 = v21;
          }
        }
      }
    }
  }
  v20[0] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  return (_QWORD *)v20[1];
}

unint64_t base witness table accessor for Equatable in GPKCreateGroupRequest.Member()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GPKCreateGroupRequest.Member()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKCreateGroupRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 336))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKCreateGroupRequest()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 328))();
}

uint64_t type metadata accessor for GPKCreateGroupRequest()
{
  return objc_opt_self();
}

uint64_t method lookup function for GPKCreateGroupRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupDomain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupDomain.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupDomain.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.serviceName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.serviceName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.serviceName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.groupMetadata.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.meMemberMetadata.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.__allocating_init(members:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.setMeMemberMetadataValue(_:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.setGroupMetadataValue(_:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.addMember(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.addMembers(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.removeMember(handle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.setMemberMetadata(_:forKey:handle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of GPKCreateGroupRequest.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t initializeBufferWithCopyOfBuffer for GPKCreateGroupRequest.Member(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GPKCreateGroupRequest.Member()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GPKCreateGroupRequest.Member(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32) & 1;
  return result;
}

uint64_t assignWithCopy for GPKCreateGroupRequest.Member(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32) & 1;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy33_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x21uLL);
}

uint64_t assignWithTake for GPKCreateGroupRequest.Member(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for GPKCreateGroupRequest.Member(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKCreateGroupRequest.Member(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 33);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    *(_BYTE *)(result + 32) = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GPKCreateGroupRequest.Member()
{
  return &type metadata for GPKCreateGroupRequest.Member;
}

uint64_t getEnumTagSinglePayload for GPKCreateGroupRequest.Member.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKCreateGroupRequest.Member.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for GPKCreateGroupRequest.Member.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKCreateGroupRequest.Member.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKCreateGroupRequest.Member.CodingKeys()
{
  return &type metadata for GPKCreateGroupRequest.Member.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKCreateGroupRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKCreateGroupRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for GPKCreateGroupRequest.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKCreateGroupRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKCreateGroupRequest.CodingKeys()
{
  return &type metadata for GPKCreateGroupRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKCreateGroupRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKCreateGroupRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKCreateGroupRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.CodingKeys and conformance GPKCreateGroupRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKCreateGroupRequest.Member.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKCreateGroupRequest.Member.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKCreateGroupRequest.Member.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKCreateGroupRequest.Member.CodingKeys and conformance GPKCreateGroupRequest.Member.CodingKeys();
}

_QWORD *outlined init with copy of Set<GPKCreateGroupRequest.Member>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_bridgeObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

uint64_t outlined init with copy of GPKMemberProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

_QWORD *User.__allocating_init(from:clientModelVersion:context:)(uint64_t a1, void *a2, float a3)
{
  uint64_t countAndFlagsBits;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  objc_class *v24;
  uint64_t v25;
  void *v26;
  void *v28;
  id v29;
  _QWORD v30[3];
  float v31;
  uint64_t v32;
  _QWORD *v33;

  v32 = a1;
  v31 = a3;
  v30[2] = a2;
  v26 = (void *)objc_opt_self();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User", 4uLL, 1)._countAndFlagsBits;
  v28 = (void *)MEMORY[0x242632560](countAndFlagsBits);
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v26, sel_entityForName_inManagedObjectContext_, v28, a2);

  if (v29)
  {
    v20 = objc_allocWithZone(v24);
    v4 = a2;
    v21 = objc_msgSend(v20, sel_initWithEntity_insertIntoManagedObjectContext_, v29, a2);

    v33 = v21;
  }
  else
  {
    v33 = objc_msgSend(objc_allocWithZone(v24), sel_initWithContext_, a2);
  }
  v18 = v33;
  v5 = v33;
  v15 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  outlined copy of Data._Representation(v15, v14);
  outlined copy of Data._Representation(v15, v14);
  v30[0] = v15;
  v30[1] = v14;
  v13 = GPKUserID.hexString.getter();
  v16 = v6;
  outlined destroy of GPKUserID((uint64_t)v30);
  v17 = (id)MEMORY[0x242632560](v13, v16);
  outlined consume of Data._Representation(v15, v14);
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setUserID_, v17);

  v19 = v33;
  v7 = v33;
  *(float *)&v8 = a3;
  objc_msgSend(v19, sel_setClientModelVersion_, v8);

  (*(void (**)(uint64_t, void *, float))((*v33 & *MEMORY[0x24BEE4EA0]) + 0x50))(a1, a2, a3);
  if (v25)
  {

    swift_release();
    return (_QWORD *)v11;
  }
  else
  {
    v12 = v33;
    v9 = v33;

    swift_release();
    return v12;
  }
}

_QWORD *User.updateWithBasicProperties(of:clientModelVersion:context:)(uint64_t a1, void *a2, float a3)
{
  id v3;
  unint64_t v4;
  id v5;
  _QWORD *result;
  Class v7;
  Class v8;
  Class isa;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  float v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  float v31;
  uint64_t v32;

  v30[1] = 0;
  v28 = 0;
  v32 = a1;
  v31 = a3;
  v30[2] = a2;
  v16 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v30[0] = v16;
  v3 = a2;
  v25 = a3;
  v26 = a2;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v20 = type metadata accessor for Handle();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v4 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in User.updateWithBasicProperties(of:clientModelVersion:context:), (uint64_t)v24, v19, v20, v21, v4, MEMORY[0x24BEE3F20], (uint64_t)&v29);
  if (v22)
  {

    result = v30;
    outlined destroy of [String]();
  }
  else
  {

    outlined destroy of [String]();
    v28 = v23;
    objc_msgSend(v15, sel_setIsMe_, *(_BYTE *)(a1 + 40) & 1);
    v27 = objc_msgSend(v15, sel_handles);
    if (v27)
    {
      v10 = v27;
      v5 = v27;
      outlined destroy of NSSet?(&v27);
      swift_bridgeObjectRetain();
      _arrayForceCast<A, B>(_:)();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = objc_msgSend(v10, sel_setByAddingObjectsFromArray_, isa);

      v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;
    }
    else
    {
      outlined destroy of NSSet?(&v27);
      v13 = 0;
    }
    if (v13)
    {
      v7 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v8 = v7;
    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v15, sel_setHandles_);

    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in User.updateWithBasicProperties(of:clientModelVersion:context:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *a1;
  v12 = a1[1];
  v5 = type metadata accessor for Handle();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v5 + 80))(v13, v12, a2, a5);
  if (v11)
    *a3 = v11;
  else
    *a4 = result;
  return result;
}

uint64_t partial apply for closure #1 in User.updateWithBasicProperties(of:clientModelVersion:context:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in User.updateWithBasicProperties(of:clientModelVersion:context:)(a1, *(_QWORD *)(v3 + 24), a2, a3, *(float *)(v3 + 16));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [String]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSSet?(id *a1)
{

}

id User.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v6;

  v6 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v6;
}

id User.init(entity:insertInto:)(void *a1, void *a2)
{
  id v2;
  id v6;
  objc_super v7;
  void *v8;
  void *v9;
  id v10;

  v10 = 0;
  v9 = a1;
  v8 = a2;
  v7.receiver = 0;
  v7.super_class = (Class)type metadata accessor for User();
  v6 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);
  v2 = v6;
  v10 = v6;

  return v6;
}

uint64_t type metadata accessor for User()
{
  return objc_opt_self();
}

id User.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for User();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for User()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of User.updateWithBasicProperties(of:clientModelVersion:context:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x50))();
}

BOOL static GPKGroupKeyRequest.RequestedKey.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return ((*a1 & 1) != 0) == (unint64_t)((*a2 & 1) != 0);
}

uint64_t GPKGroupKeyRequest.RequestedKey.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL static GPKGroupKeyRequest.RequestedKey.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKGroupKeyRequest.RequestedKey.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKGroupKeyRequest.RequestedKey.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("latest", 6uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("historical", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKGroupKeyRequest.RequestedKey.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKGroupKeyRequest.RequestedKey.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.CodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.CodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.CodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.CodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.CodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKeyRequest.RequestedKey.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKeyRequest.RequestedKey.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("historical", 0xAuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("latest", 6uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKGroupKeyRequest.RequestedKey.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  _BYTE *v0;

  return GPKGroupKeyRequest.RequestedKey.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.RequestedKey.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.RequestedKey.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  return GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.RequestedKey.LatestCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys, &type metadata for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKGroupKeyRequest.RequestedKey.encode(to:)(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  _QWORD *v24;

  v13 = a1;
  v24 = 0;
  v23 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v4 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKeyRequest.RequestedKey.LatestCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v4 - v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKeyRequest.RequestedKey.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v4 - v16;
  v24 = v2;
  v20 = *v1;
  v23 = v20 & 1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v20 & 1) != 0)
  {
    v4[1] = &v22;
    v22 = 1;
    lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v4[2] = &v21;
    v21 = 0;
    lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t GPKGroupKeyRequest.RequestedKey.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey, &type metadata for GPKGroupKeyRequest.RequestedKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey, &type metadata for GPKGroupKeyRequest.RequestedKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey, &type metadata for GPKGroupKeyRequest.RequestedKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.RequestedKey, &type metadata for GPKGroupKeyRequest.RequestedKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKeyRequest.RequestedKey.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  _QWORD v68[4];
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;

  v47 = a2;
  v56 = a1;
  v75 = 0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)v14 - v50;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKeyRequest.RequestedKey.LatestCodingKeys>);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v14 - v54;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKeyRequest.RequestedKey.CodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v56);
  v60 = (char *)v14 - v59;
  v75 = v2;
  v62 = v2[3];
  v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
  v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v64 = v3;
  v65 = v3;
  if (v3)
  {
    v25 = v65;
  }
  else
  {
    v4 = KeyedDecodingContainer.allKeys.getter();
    v43 = &v70;
    v70 = v4;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroupKeyRequest.RequestedKey.CodingKeys]);
    lazy protocol witness table accessor for type [GPKGroupKeyRequest.RequestedKey.CodingKeys] and conformance [A]();
    v71 = ArraySlice.init<A>(_:)();
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>);
    v45 = lazy protocol witness table accessor for type ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys> and conformance ArraySlice<A>();
    Collection<>.popFirst()();
    v46 = v69;
    if (v69 == 2)
      goto LABEL_12;
    v41 = v46;
    v34 = v46;
    v39 = v71;
    v35 = v72;
    v36 = v73;
    v37 = v74;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v38 = v68;
    v68[0] = v39;
    v68[1] = v35;
    v68[2] = v36;
    v68[3] = v37;
    v40 = Collection.isEmpty.getter();
    outlined destroy of ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>();
    swift_unknownObjectRelease();
    if ((v40 & 1) == 0)
    {
LABEL_12:
      v19 = 0;
      v23 = type metadata accessor for DecodingError();
      v17 = 1;
      v24 = swift_allocError();
      v22 = v12;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v18 = (char *)v22 + *(int *)(v13 + 48);
      *v22 = &type metadata for GPKGroupKeyRequest.RequestedKey;
      v20 = KeyedDecodingContainer.codingPath.getter();
      countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v17 & 1)._countAndFlagsBits;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v23 - 8) + 104))(v22, *MEMORY[0x24BEE26D0]);
      swift_willThrow();
      outlined destroy of ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v24;
    }
    else if ((v34 & 1) != 0)
    {
      v27 = &v67;
      v67 = v34 & 1;
      lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys();
      v9 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v28 = v9;
      v29 = v9;
      if (!v9)
      {
        v76 = 1;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
        v30 = v28;
        goto LABEL_11;
      }
      v15 = v29;
      outlined destroy of ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v15;
    }
    else
    {
      v31 = &v66;
      v66 = v34 & 1;
      lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys();
      v8 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v32 = v8;
      v33 = v8;
      if (!v8)
      {
        v76 = 0;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
        v30 = v32;
LABEL_11:
        v26 = v30;
        outlined destroy of ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
        v10 = v56;
        *v47 = v76 & 1;
        return __swift_destroy_boxed_opaque_existential_1(v10);
      }
      v16 = v33;
      outlined destroy of ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v16;
    }
  }
  v14[1] = v25;
  return __swift_destroy_boxed_opaque_existential_1(v56);
}

unint64_t lazy protocol witness table accessor for type [GPKGroupKeyRequest.RequestedKey.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKGroupKeyRequest.RequestedKey.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKGroupKeyRequest.RequestedKey.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroupKeyRequest.RequestedKey.CodingKeys]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroupKeyRequest.RequestedKey.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<GPKGroupKeyRequest.RequestedKey.CodingKeys>()
{
  swift_unknownObjectRelease();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKeyRequest.RequestedKey(_BYTE *a1, _BYTE *a2)
{
  return static GPKGroupKeyRequest.RequestedKey.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKeyRequest.RequestedKey()
{
  return GPKGroupKeyRequest.RequestedKey.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupKeyRequest.RequestedKey()
{
  return GPKGroupKeyRequest.RequestedKey.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKeyRequest.RequestedKey(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroupKeyRequest.RequestedKey@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return GPKGroupKeyRequest.RequestedKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroupKeyRequest.RequestedKey(uint64_t a1)
{
  return GPKGroupKeyRequest.RequestedKey.encode(to:)(a1);
}

uint64_t GPKGroupKeyRequest.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKGroupKeyRequest.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKGroupKeyRequest() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for GPKGroupKeyRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKGroupKeyRequest;
  if (!type metadata singleton initialization cache for GPKGroupKeyRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKGroupKeyRequest.requestedKey.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GPKGroupKeyRequest();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24)) & 1;
  return result;
}

uint64_t GPKGroupKeyRequest.init(groupID:serviceName:requestedKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[2];
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v27 = a5;
  v29 = a1;
  v23 = a2;
  v28 = a3;
  v20 = a4;
  v35 = 0;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v18[1] = 0;
  v19 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v22 = (uint64_t)v18 - v19;
  v24 = type metadata accessor for GPKGroupKeyRequest();
  v21 = (*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v29);
  v30 = (uint64_t)v18 - v21;
  v35 = (char *)v18 - v21;
  v34 = v5;
  v32 = v6;
  v33 = v7;
  v26 = *v8;
  v25 = 1;
  v31 = v26 & 1;
  outlined init with copy of GPKGroupID(v5, v9);
  outlined init with take of GPKGroupID(v22, v30);
  swift_bridgeObjectRetain();
  v10 = v30;
  v11 = v24;
  v12 = v25;
  v13 = v26;
  v14 = v27;
  v15 = v28;
  v16 = (_QWORD *)(v30 + *(int *)(v24 + 20));
  *v16 = v23;
  v16[1] = v15;
  *(_BYTE *)(v10 + *(int *)(v11 + 24)) = v13 & v12;
  outlined init with copy of GPKGroupKeyRequest(v10, v14);
  swift_bridgeObjectRelease();
  outlined destroy of GPKGroupID(v29);
  return outlined destroy of GPKGroupKeyRequest(v30);
}

uint64_t outlined init with copy of GPKGroupKeyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v8 = type metadata accessor for GPKGroupKeyRequest();
  v3 = (_QWORD *)(a1 + *(int *)(v8 + 20));
  v6 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v6 = *v3;
  v7 = v3[1];
  swift_bridgeObjectRetain();
  result = a2;
  v6[1] = v7;
  *(_BYTE *)(a2 + *(int *)(v8 + 24)) = *(_BYTE *)(a1 + *(int *)(v8 + 24)) & 1;
  return result;
}

uint64_t outlined destroy of GPKGroupKeyRequest(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for GPKGroupKeyRequest();
  swift_bridgeObjectRelease();
  return a1;
}

BOOL static GPKGroupKeyRequest.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t GPKGroupKeyRequest.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKGroupKeyRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestedKey", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GPKGroupKeyRequest.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GPKGroupKeyRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.CodingKeys, &type metadata for GPKGroupKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.CodingKeys, &type metadata for GPKGroupKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.CodingKeys, &type metadata for GPKGroupKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.CodingKeys, &type metadata for GPKGroupKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest.CodingKeys, &type metadata for GPKGroupKeyRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKeyRequest.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKeyRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestedKey", 0xCuLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKeyRequest.CodingKeys(char *a1, char *a2)
{
  return static GPKGroupKeyRequest.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKeyRequest.CodingKeys()
{
  return GPKGroupKeyRequest.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupKeyRequest.CodingKeys()
{
  return GPKGroupKeyRequest.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKeyRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKeyRequest.CodingKeys()
{
  char *v0;

  return GPKGroupKeyRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKeyRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKeyRequest.CodingKeys()
{
  return GPKGroupKeyRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKeyRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKeyRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKeyRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKeyRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKGroupKeyRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[2];
  char v39;
  uint64_t v40;
  _QWORD *v41;

  v23 = a1;
  v41 = 0;
  v40 = 0;
  v32 = type metadata accessor for GPKGroupID();
  v22 = (*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (uint64_t)v10 - v22;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKeyRequest.CodingKeys>);
  v24 = *(_QWORD *)(v31 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)v10 - v25;
  v41 = v2;
  v40 = v1;
  v26 = v2[3];
  v27 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v26);
  lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v29, v34);
  v30 = &v39;
  v39 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v33;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v35 = v3;
  v36 = v3;
  if (v3)
  {
    v11 = v36;
    outlined destroy of GPKGroupID(v34);
    result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v28, v31);
    v12 = v11;
  }
  else
  {
    outlined destroy of GPKGroupID(v34);
    v4 = type metadata accessor for GPKGroupKeyRequest();
    v5 = v35;
    v17 = v4;
    v6 = (uint64_t *)(v29 + *(int *)(v4 + 20));
    v18 = *v6;
    v19 = v6[1];
    swift_bridgeObjectRetain();
    v38[1] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v20 = v5;
    v21 = v5;
    if (v5)
    {
      v10[2] = v21;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v28, v31);
    }
    else
    {
      swift_bridgeObjectRelease();
      v7 = *(_BYTE *)(v29 + *(int *)(v17 + 24)) & 1;
      v14 = v38;
      v38[0] = v7;
      v13 = &v37;
      v37 = 2;
      lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey();
      v8 = v20;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v15 = v8;
      v16 = v8;
      if (v8)
        v10[1] = v16;
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v28, v31);
    }
  }
  return result;
}

uint64_t GPKGroupKeyRequest.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[3];
  char v50;
  _QWORD *v51;
  char v52;

  v31 = a2;
  v39 = a1;
  v51 = 0;
  v35 = 0;
  v32 = type metadata accessor for GPKGroupID();
  v33 = (*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (uint64_t)v15 - v33;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKeyRequest.CodingKeys>);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v43 = (char *)v15 - v38;
  v40 = type metadata accessor for GPKGroupKeyRequest();
  v41 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v39);
  v42 = (uint64_t)v15 - v41;
  v52 = 0;
  v51 = v2;
  v45 = v2[3];
  v46 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v45);
  lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
  v3 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v47 = v3;
  v48 = v3;
  if (v3)
  {
    v19 = v48;
  }
  else
  {
    v28 = &v50;
    v50 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29 = v4;
    v30 = v4;
    if (v4)
    {
      v18 = v30;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
      v19 = v18;
    }
    else
    {
      v23 = 1;
      v52 = 1;
      outlined init with take of GPKGroupID(v34, v42);
      v5 = v29;
      v49[2] = v23;
      v6 = KeyedDecodingContainer.decode(_:forKey:)();
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v5;
      if (v5)
      {
        v17 = v27;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
        v19 = v17;
      }
      else
      {
        v8 = v26;
        v9 = (uint64_t *)(v42 + *(int *)(v40 + 20));
        v52 = 3;
        *v9 = v25;
        v9[1] = v8;
        v20 = v49;
        v49[0] = 2;
        lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey();
        v10 = v24;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v21 = v10;
        v22 = v10;
        if (!v10)
        {
          v11 = v36;
          v12 = v43;
          v13 = v37;
          *(_BYTE *)(v42 + *(int *)(v40 + 24)) = v49[1] & 1;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
          outlined init with copy of GPKGroupKeyRequest(v42, v31);
          __swift_destroy_boxed_opaque_existential_1(v39);
          return outlined destroy of GPKGroupKeyRequest(v42);
        }
        v16 = v22;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
        v19 = v16;
      }
    }
  }
  v15[1] = v19;
  result = __swift_destroy_boxed_opaque_existential_1(v39);
  if ((v52 & 1) != 0)
    result = outlined destroy of GPKGroupID(v42);
  if ((v52 & 2) != 0)
  {
    result = v42 + *(int *)(v40 + 20);
    outlined destroy of String();
  }
  return result;
}

unint64_t base witness table accessor for Equatable in GPKGroupKeyRequest.RequestedKey()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey and conformance GPKGroupKeyRequest.RequestedKey();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroupKeyRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKGroupKeyRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroupKeyRequest(uint64_t a1)
{
  return GPKGroupKeyRequest.encode(to:)(a1);
}

unint64_t initializeBufferWithCopyOfBuffer for GPKGroupKeyRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v13;

  v13 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v13 & 0x20000) != 0)
  {
    v8 = *a2;
    swift_retain();
    *a1 = v8;
    return *a1 + ((v13 + 16) & ~(unint64_t)v13);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
    v7 = *(_QWORD *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v6 + 1) = v7;
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24)) & 1;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPKGroupKeyRequest(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GPKGroupKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v7 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  result = a1;
  v7[1] = v8;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24)) & 1;
  return result;
}

uint64_t assignWithCopy for GPKGroupKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v6 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v6 = *v4;
  v7 = v4[1];
  swift_bridgeObjectRetain();
  v6[1] = v7;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24)) & 1;
  return result;
}

__n128 initializeWithTake for GPKGroupKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24)) & 1;
  return result;
}

uint64_t assignWithTake for GPKGroupKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v5 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24)) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for GPKGroupKeyRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D22C4A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for GPKGroupKeyRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D22C5A4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKGroupKeyRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GPKGroupKeyRequest.RequestedKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKeyRequest.RequestedKey(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKeyRequest.RequestedKey(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKGroupKeyRequest.RequestedKey(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKeyRequest.RequestedKey()
{
  return &type metadata for GPKGroupKeyRequest.RequestedKey;
}

uint64_t getEnumTagSinglePayload for GPKGroupKeyRequest.RequestedKey.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKeyRequest.RequestedKey.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKeyRequest.RequestedKey.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKGroupKeyRequest.RequestedKey.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return &type metadata for GPKGroupKeyRequest.RequestedKey.CodingKeys;
}

ValueMetadata *type metadata accessor for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  return &type metadata for GPKGroupKeyRequest.RequestedKey.LatestCodingKeys;
}

ValueMetadata *type metadata accessor for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  return &type metadata for GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKGroupKeyRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKeyRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKeyRequest.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKGroupKeyRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKeyRequest.CodingKeys()
{
  return &type metadata for GPKGroupKeyRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKeyRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKeyRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKGroupKeyRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.CodingKeys and conformance GPKGroupKeyRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKeyRequest.RequestedKey.LatestCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.LatestCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.LatestCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys and conformance GPKGroupKeyRequest.RequestedKey.HistoricalCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKGroupKeyRequest.RequestedKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKeyRequest.RequestedKey.CodingKeys and conformance GPKGroupKeyRequest.RequestedKey.CodingKeys();
}

uint64_t GPKMemberRole.description.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("admin", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("member", 6uLL, 1)._countAndFlagsBits;
}

GroupKit::GPKMemberRole_optional __swiftcall GPKMemberRole.init(rawValue:)(Swift::Int64 rawValue)
{
  _BYTE *v1;
  char v3;

  if (!rawValue)
  {
    v3 = 0;
LABEL_6:
    *v1 = v3 & 1;
    return (GroupKit::GPKMemberRole_optional)rawValue;
  }
  if (rawValue == 1)
  {
    v3 = 1;
    goto LABEL_6;
  }
  *v1 = 2;
  return (GroupKit::GPKMemberRole_optional)rawValue;
}

uint64_t static GPKMemberRole.allCases.getter()
{
  uint64_t result;
  _BYTE *v1;

  result = _allocateUninitializedArray<A>(_:)();
  *v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

BOOL GPKMemberRole.rawValue.getter()
{
  _BYTE *v0;

  return (*v0 & 1) != 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKMemberRole()
{
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMemberRole()
{
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMemberRole()
{
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMemberRole()
{
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::GPKMemberRole_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GPKMemberRole(Swift::Int64 *a1)
{
  return GPKMemberRole.init(rawValue:)(*a1);
}

BOOL protocol witness for RawRepresentable.rawValue.getter in conformance GPKMemberRole@<W0>(_BOOL8 *a1@<X8>)
{
  _BOOL8 result;

  result = GPKMemberRole.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMemberRole()
{
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMemberRole()
{
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberRole()
{
  return GPKMemberRole.description.getter();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance GPKMemberRole@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static GPKMemberRole.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t GPKMemberPolicy.description.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Fully Managed", 0xDuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Fail When Unavailable", 0x15uLL, 1)._countAndFlagsBits;
}

BOOL static GPKMemberPolicy.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return ((*a1 & 1) != 0) == (unint64_t)((*a2 & 1) != 0);
}

uint64_t GPKMemberPolicy.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL static GPKMemberPolicy.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKMemberPolicy.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMemberPolicy.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("failWhenUnavailable", 0x13uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fullyManaged", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKMemberPolicy.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKMemberPolicy.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.CodingKeys, &type metadata for GPKMemberPolicy.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.CodingKeys, &type metadata for GPKMemberPolicy.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.CodingKeys, &type metadata for GPKMemberPolicy.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.CodingKeys, &type metadata for GPKMemberPolicy.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.CodingKeys, &type metadata for GPKMemberPolicy.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMemberPolicy.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMemberPolicy.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fullyManaged", 0xCuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("failWhenUnavailable", 0x13uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMemberPolicy.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKMemberPolicy.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMemberPolicy.CodingKeys()
{
  return GPKMemberPolicy.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMemberPolicy.CodingKeys()
{
  return GPKMemberPolicy.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMemberPolicy.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMemberPolicy.CodingKeys()
{
  _BYTE *v0;

  return GPKMemberPolicy.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMemberPolicy.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberPolicy.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMemberPolicy.CodingKeys()
{
  return GPKMemberPolicy.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMemberPolicy.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberPolicy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberPolicy.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMemberPolicy.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMemberPolicy.FailWhenUnavailableCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKMemberPolicy.FailWhenUnavailableCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKMemberPolicy.FailWhenUnavailableCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMemberPolicy.FailWhenUnavailableCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t GPKMemberPolicy.FullyManagedCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKMemberPolicy.FullyManagedCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKMemberPolicy.FullyManagedCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMemberPolicy.FullyManagedCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  return GPKMemberPolicy.FailWhenUnavailableCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberPolicy.FailWhenUnavailableCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  return GPKMemberPolicy.FailWhenUnavailableCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberPolicy.FailWhenUnavailableCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.FailWhenUnavailableCodingKeys, &type metadata for GPKMemberPolicy.FailWhenUnavailableCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.FailWhenUnavailableCodingKeys, &type metadata for GPKMemberPolicy.FailWhenUnavailableCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.FailWhenUnavailableCodingKeys, &type metadata for GPKMemberPolicy.FailWhenUnavailableCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMemberPolicy.FullyManagedCodingKeys()
{
  return GPKMemberPolicy.FullyManagedCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMemberPolicy.FullyManagedCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberPolicy.FullyManagedCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMemberPolicy.FullyManagedCodingKeys()
{
  return GPKMemberPolicy.FullyManagedCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMemberPolicy.FullyManagedCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberPolicy.FullyManagedCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberPolicy.FullyManagedCodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.FullyManagedCodingKeys, &type metadata for GPKMemberPolicy.FullyManagedCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.FullyManagedCodingKeys, &type metadata for GPKMemberPolicy.FullyManagedCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberPolicy.FullyManagedCodingKeys, &type metadata for GPKMemberPolicy.FullyManagedCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMemberPolicy.FullyManagedCodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMemberPolicy.encode(to:)(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  _QWORD *v24;

  v13 = a1;
  v24 = 0;
  v23 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMemberPolicy.FullyManagedCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v4 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMemberPolicy.FailWhenUnavailableCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v4 - v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMemberPolicy.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v4 - v16;
  v24 = v2;
  v20 = *v1;
  v23 = v20 & 1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v20 & 1) != 0)
  {
    v4[1] = &v22;
    v22 = 1;
    lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v4[2] = &v21;
    v21 = 0;
    lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t GPKMemberPolicy.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
  return _hashValue<A>(for:)();
}

uint64_t GPKMemberPolicy.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  _QWORD v68[4];
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;

  v47 = a2;
  v56 = a1;
  v75 = 0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMemberPolicy.FullyManagedCodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)v14 - v50;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMemberPolicy.FailWhenUnavailableCodingKeys>);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v14 - v54;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMemberPolicy.CodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v56);
  v60 = (char *)v14 - v59;
  v75 = v2;
  v62 = v2[3];
  v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
  v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v64 = v3;
  v65 = v3;
  if (v3)
  {
    v25 = v65;
  }
  else
  {
    v4 = KeyedDecodingContainer.allKeys.getter();
    v43 = &v70;
    v70 = v4;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMemberPolicy.CodingKeys]);
    lazy protocol witness table accessor for type [GPKMemberPolicy.CodingKeys] and conformance [A]();
    v71 = ArraySlice.init<A>(_:)();
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<GPKMemberPolicy.CodingKeys>);
    v45 = lazy protocol witness table accessor for type ArraySlice<GPKMemberPolicy.CodingKeys> and conformance ArraySlice<A>();
    Collection<>.popFirst()();
    v46 = v69;
    if (v69 == 2)
      goto LABEL_12;
    v41 = v46;
    v34 = v46;
    v39 = v71;
    v35 = v72;
    v36 = v73;
    v37 = v74;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v38 = v68;
    v68[0] = v39;
    v68[1] = v35;
    v68[2] = v36;
    v68[3] = v37;
    v40 = Collection.isEmpty.getter();
    outlined destroy of ArraySlice<GPKMemberPolicy.CodingKeys>();
    swift_unknownObjectRelease();
    if ((v40 & 1) == 0)
    {
LABEL_12:
      v19 = 0;
      v23 = type metadata accessor for DecodingError();
      v17 = 1;
      v24 = swift_allocError();
      v22 = v12;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v18 = (char *)v22 + *(int *)(v13 + 48);
      *v22 = &type metadata for GPKMemberPolicy;
      v20 = KeyedDecodingContainer.codingPath.getter();
      countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v17 & 1)._countAndFlagsBits;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v23 - 8) + 104))(v22, *MEMORY[0x24BEE26D0]);
      swift_willThrow();
      outlined destroy of ArraySlice<GPKMemberPolicy.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v24;
    }
    else if ((v34 & 1) != 0)
    {
      v27 = &v67;
      v67 = v34 & 1;
      lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys();
      v9 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v28 = v9;
      v29 = v9;
      if (!v9)
      {
        v76 = 1;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
        v30 = v28;
        goto LABEL_11;
      }
      v15 = v29;
      outlined destroy of ArraySlice<GPKMemberPolicy.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v15;
    }
    else
    {
      v31 = &v66;
      v66 = v34 & 1;
      lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys();
      v8 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v32 = v8;
      v33 = v8;
      if (!v8)
      {
        v76 = 0;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
        v30 = v32;
LABEL_11:
        v26 = v30;
        outlined destroy of ArraySlice<GPKMemberPolicy.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
        v10 = v56;
        *v47 = v76 & 1;
        return __swift_destroy_boxed_opaque_existential_1(v10);
      }
      v16 = v33;
      outlined destroy of ArraySlice<GPKMemberPolicy.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v16;
    }
  }
  v14[1] = v25;
  return __swift_destroy_boxed_opaque_existential_1(v56);
}

unint64_t lazy protocol witness table accessor for type [GPKMemberPolicy.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMemberPolicy.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMemberPolicy.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMemberPolicy.CodingKeys]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMemberPolicy.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<GPKMemberPolicy.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<GPKMemberPolicy.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<GPKMemberPolicy.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<GPKMemberPolicy.CodingKeys>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<GPKMemberPolicy.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<GPKMemberPolicy.CodingKeys>()
{
  swift_unknownObjectRelease();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMemberPolicy(_BYTE *a1, _BYTE *a2)
{
  return static GPKMemberPolicy.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMemberPolicy()
{
  return GPKMemberPolicy.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMemberPolicy()
{
  return GPKMemberPolicy.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMemberPolicy(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMemberPolicy@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return GPKMemberPolicy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMemberPolicy(uint64_t a1)
{
  return GPKMemberPolicy.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberPolicy()
{
  return GPKMemberPolicy.description.getter();
}

unint64_t base witness table accessor for Equatable in GPKMemberRole()
{
  return lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GPKMemberRole()
{
  return lazy protocol witness table accessor for type [GPKMemberRole] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [GPKMemberRole] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMemberRole] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMemberRole] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMemberRole]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMemberRole] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in GPKMemberPolicy()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy and conformance GPKMemberPolicy();
}

uint64_t getEnumTagSinglePayload for GPKMemberRole(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMemberRole(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMemberRole(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMemberRole(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMemberRole()
{
  return &type metadata for GPKMemberRole;
}

uint64_t getEnumTagSinglePayload for GPKMemberPolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMemberPolicy(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMemberPolicy(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMemberPolicy(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMemberPolicy()
{
  return &type metadata for GPKMemberPolicy;
}

uint64_t getEnumTagSinglePayload for GPKMemberPolicy.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMemberPolicy.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMemberPolicy.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMemberPolicy.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMemberPolicy.CodingKeys()
{
  return &type metadata for GPKMemberPolicy.CodingKeys;
}

ValueMetadata *type metadata accessor for GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  return &type metadata for GPKMemberPolicy.FailWhenUnavailableCodingKeys;
}

ValueMetadata *type metadata accessor for GPKMemberPolicy.FullyManagedCodingKeys()
{
  return &type metadata for GPKMemberPolicy.FullyManagedCodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMemberPolicy.FullyManagedCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMemberPolicy.FullyManagedCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.FullyManagedCodingKeys and conformance GPKMemberPolicy.FullyManagedCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMemberPolicy.FailWhenUnavailableCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.FailWhenUnavailableCodingKeys and conformance GPKMemberPolicy.FailWhenUnavailableCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMemberPolicy.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMemberPolicy.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMemberPolicy.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberPolicy.CodingKeys and conformance GPKMemberPolicy.CodingKeys();
}

uint64_t PingMessage.messageText.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static PingMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t PingMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL PingMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("messageText", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t PingMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t PingMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage.CodingKeys, &type metadata for PingMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage.CodingKeys, &type metadata for PingMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage.CodingKeys, &type metadata for PingMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage.CodingKeys, &type metadata for PingMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage.CodingKeys, &type metadata for PingMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t PingMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t PingMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("messageText", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PingMessage.CodingKeys()
{
  return static PingMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PingMessage.CodingKeys()
{
  return PingMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PingMessage.CodingKeys()
{
  return PingMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PingMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PingMessage.CodingKeys()
{
  return PingMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance PingMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = PingMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PingMessage.CodingKeys()
{
  return PingMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PingMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PingMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PingMessage.CodingKeys()
{
  lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PingMessage.CodingKeys()
{
  lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PingMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v5 = a1;
  v18 = 0;
  v17 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PingMessage.CodingKeys>);
  v6 = *(_QWORD *)(v14 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v18 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v12 = *v1;
  v13 = v1[1];
  v17 = v1;
  v8 = v18[3];
  v9 = v18[4];
  __swift_project_boxed_opaque_existential_1(v18, v8);
  lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v11;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)();
  v15 = v2;
  v16 = v2;
  if (v2)
    v4 = v16;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v14);
}

uint64_t PingMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[2];

  v17 = a2;
  v18 = a1;
  v28 = 0;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PingMessage.CodingKeys>);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (char *)v9 - v21;
  v28 = (_QWORD *)MEMORY[0x24BDAC7A8](v18);
  v24 = v28[3];
  v25 = v28[4];
  __swift_project_boxed_opaque_existential_1(v28, v24);
  lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
  v2 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v2;
  v27 = v2;
  if (v2)
  {
    v9[3] = v27;
    v9[1] = v27;
    return __swift_destroy_boxed_opaque_existential_1(v18);
  }
  else
  {
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v13 = 0;
    v14 = v3;
    v15 = v4;
    v16 = 0;
    v11 = v4;
    v10 = v3;
    swift_bridgeObjectRetain();
    v12 = v29;
    v29[0] = v10;
    v29[1] = v11;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v5 = v17;
    v6 = v11;
    v7 = v18;
    *v17 = v10;
    v5[1] = v6;
    __swift_destroy_boxed_opaque_existential_1(v7);
    result = (uint64_t)v12;
    outlined destroy of PingMessage();
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of PingMessage()
{
  swift_bridgeObjectRelease();
}

GroupKit::PingMessage __swiftcall PingMessage.init(messageText:)(GroupKit::PingMessage messageText)
{
  GroupKit::PingMessage *v1;

  *v1 = messageText;
  return messageText;
}

uint64_t StartBroadcastMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t StartBroadcastMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t StartBroadcastMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t StartBroadcastMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PingMessage@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return PingMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PingMessage(uint64_t a1)
{
  return PingMessage.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StartBroadcastMessage.CodingKeys()
{
  return StartBroadcastMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StartBroadcastMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = StartBroadcastMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance StartBroadcastMessage.CodingKeys()
{
  return StartBroadcastMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance StartBroadcastMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = StartBroadcastMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StartBroadcastMessage.CodingKeys()
{
  lazy protocol witness table accessor for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for StartBroadcastMessage.CodingKeys, &type metadata for StartBroadcastMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for StartBroadcastMessage.CodingKeys, &type metadata for StartBroadcastMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for StartBroadcastMessage.CodingKeys, &type metadata for StartBroadcastMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StartBroadcastMessage.CodingKeys()
{
  lazy protocol witness table accessor for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t StartBroadcastMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StartBroadcastMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t StartBroadcastMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance StartBroadcastMessage(uint64_t a1)
{
  return StartBroadcastMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StartBroadcastMessage(uint64_t a1)
{
  return StartBroadcastMessage.encode(to:)(a1);
}

uint64_t FetchGroupsXPCMessage.request.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t static FetchGroupsXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t FetchGroupsXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL FetchGroupsXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t FetchGroupsXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchGroupsXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage.CodingKeys, &type metadata for FetchGroupsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage.CodingKeys, &type metadata for FetchGroupsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage.CodingKeys, &type metadata for FetchGroupsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage.CodingKeys, &type metadata for FetchGroupsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage.CodingKeys, &type metadata for FetchGroupsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchGroupsXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchGroupsXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchGroupsXPCMessage.CodingKeys()
{
  return static FetchGroupsXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchGroupsXPCMessage.CodingKeys()
{
  return FetchGroupsXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchGroupsXPCMessage.CodingKeys()
{
  return FetchGroupsXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchGroupsXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchGroupsXPCMessage.CodingKeys()
{
  return FetchGroupsXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance FetchGroupsXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = FetchGroupsXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchGroupsXPCMessage.CodingKeys()
{
  return FetchGroupsXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchGroupsXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchGroupsXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchGroupsXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchGroupsXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchGroupsXPCMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchGroupsXPCMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKFetchGroupsRequest();
  lazy protocol witness table accessor for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest)
  {
    v0 = type metadata accessor for GPKFetchGroupsRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest)
  {
    v0 = type metadata accessor for GPKFetchGroupsRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest);
    return v1;
  }
  return v3;
}

uint64_t FetchGroupsXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchGroupsXPCMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKFetchGroupsRequest();
    lazy protocol witness table accessor for type GPKFetchGroupsRequest and conformance GPKFetchGroupsRequest();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of FetchGroupsXPCMessage();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of FetchGroupsXPCMessage()
{
  swift_release();
}

uint64_t FetchGroupsXPCMessage.init(request:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchGroupsXPCMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return FetchGroupsXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchGroupsXPCMessage(uint64_t a1)
{
  return FetchGroupsXPCMessage.encode(to:)(a1);
}

uint64_t CreateGroupXPCMessage.request.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t static CreateGroupXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t CreateGroupXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL CreateGroupXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t CreateGroupXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CreateGroupXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage.CodingKeys, &type metadata for CreateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage.CodingKeys, &type metadata for CreateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage.CodingKeys, &type metadata for CreateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage.CodingKeys, &type metadata for CreateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage.CodingKeys, &type metadata for CreateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CreateGroupXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CreateGroupXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CreateGroupXPCMessage.CodingKeys()
{
  return static CreateGroupXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CreateGroupXPCMessage.CodingKeys()
{
  return CreateGroupXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CreateGroupXPCMessage.CodingKeys()
{
  return CreateGroupXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CreateGroupXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CreateGroupXPCMessage.CodingKeys()
{
  return CreateGroupXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance CreateGroupXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = CreateGroupXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CreateGroupXPCMessage.CodingKeys()
{
  return CreateGroupXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CreateGroupXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CreateGroupXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CreateGroupXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CreateGroupXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CreateGroupXPCMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CreateGroupXPCMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKCreateGroupRequest();
  lazy protocol witness table accessor for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest)
  {
    v0 = type metadata accessor for GPKCreateGroupRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest)
  {
    v0 = type metadata accessor for GPKCreateGroupRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKCreateGroupRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest);
    return v1;
  }
  return v3;
}

uint64_t CreateGroupXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CreateGroupXPCMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKCreateGroupRequest();
    lazy protocol witness table accessor for type GPKCreateGroupRequest and conformance GPKCreateGroupRequest();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of CreateGroupXPCMessage();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CreateGroupXPCMessage()
{
  swift_release();
}

uint64_t CreateGroupXPCMessage.init(request:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CreateGroupXPCMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CreateGroupXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CreateGroupXPCMessage(uint64_t a1)
{
  return CreateGroupXPCMessage.encode(to:)(a1);
}

uint64_t UpdateGroupXPCMessage.request.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t static UpdateGroupXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t UpdateGroupXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL UpdateGroupXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t UpdateGroupXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t UpdateGroupXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage.CodingKeys, &type metadata for UpdateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage.CodingKeys, &type metadata for UpdateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage.CodingKeys, &type metadata for UpdateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage.CodingKeys, &type metadata for UpdateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage.CodingKeys, &type metadata for UpdateGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t UpdateGroupXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t UpdateGroupXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UpdateGroupXPCMessage.CodingKeys()
{
  return static UpdateGroupXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UpdateGroupXPCMessage.CodingKeys()
{
  return UpdateGroupXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UpdateGroupXPCMessage.CodingKeys()
{
  return UpdateGroupXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UpdateGroupXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UpdateGroupXPCMessage.CodingKeys()
{
  return UpdateGroupXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance UpdateGroupXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = UpdateGroupXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance UpdateGroupXPCMessage.CodingKeys()
{
  return UpdateGroupXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UpdateGroupXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = UpdateGroupXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UpdateGroupXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UpdateGroupXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t UpdateGroupXPCMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UpdateGroupXPCMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKUpdateGroupRequest();
  lazy protocol witness table accessor for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest;
  if (!lazy protocol witness table cache variable for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest)
  {
    v0 = type metadata accessor for GPKUpdateGroupRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUpdateGroupRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest;
  if (!lazy protocol witness table cache variable for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest)
  {
    v0 = type metadata accessor for GPKUpdateGroupRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUpdateGroupRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest);
    return v1;
  }
  return v3;
}

uint64_t UpdateGroupXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UpdateGroupXPCMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKUpdateGroupRequest();
    lazy protocol witness table accessor for type GPKUpdateGroupRequest and conformance GPKUpdateGroupRequest();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of UpdateGroupXPCMessage();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of UpdateGroupXPCMessage()
{
  swift_release();
}

uint64_t UpdateGroupXPCMessage.init(request:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance UpdateGroupXPCMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return UpdateGroupXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UpdateGroupXPCMessage(uint64_t a1)
{
  return UpdateGroupXPCMessage.encode(to:)(a1);
}

uint64_t CheckAvailabilityMessage.handles.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

GroupKit::CheckAvailabilityMessage __swiftcall CheckAvailabilityMessage.init(handles:)(Swift::OpaquePointer handles)
{
  Swift::OpaquePointer *v1;
  GroupKit::CheckAvailabilityMessage result;
  Swift::OpaquePointer *v4;
  void *rawValue;

  v4 = v1;
  rawValue = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  rawValue = handles._rawValue;
  v4->_rawValue = handles._rawValue;
  swift_bridgeObjectRelease();
  result.handles._rawValue = &rawValue;
  outlined destroy of CheckAvailabilityMessage();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CheckAvailabilityMessage()
{
  swift_bridgeObjectRelease();
}

uint64_t static CheckAvailabilityMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t CheckAvailabilityMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL CheckAvailabilityMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handles", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t CheckAvailabilityMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CheckAvailabilityMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage.CodingKeys, &type metadata for CheckAvailabilityMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage.CodingKeys, &type metadata for CheckAvailabilityMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage.CodingKeys, &type metadata for CheckAvailabilityMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage.CodingKeys, &type metadata for CheckAvailabilityMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage.CodingKeys, &type metadata for CheckAvailabilityMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CheckAvailabilityMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CheckAvailabilityMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handles", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CheckAvailabilityMessage.CodingKeys()
{
  return static CheckAvailabilityMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CheckAvailabilityMessage.CodingKeys()
{
  return CheckAvailabilityMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CheckAvailabilityMessage.CodingKeys()
{
  return CheckAvailabilityMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CheckAvailabilityMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CheckAvailabilityMessage.CodingKeys()
{
  return CheckAvailabilityMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance CheckAvailabilityMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = CheckAvailabilityMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CheckAvailabilityMessage.CodingKeys()
{
  return CheckAvailabilityMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CheckAvailabilityMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CheckAvailabilityMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CheckAvailabilityMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CheckAvailabilityMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CheckAvailabilityMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CheckAvailabilityMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v15 = &v18;
  v18 = v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  outlined destroy of [String]();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v4 = MEMORY[0x24BEE0D08];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v4 = MEMORY[0x24BEE0D38];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12D0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v4 = MEMORY[0x24BEE0D10];
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A8], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    return v1;
  }
  return v3;
}

uint64_t CheckAvailabilityMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CheckAvailabilityMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_bridgeObjectRetain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of CheckAvailabilityMessage();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CheckAvailabilityMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CheckAvailabilityMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CheckAvailabilityMessage(uint64_t a1)
{
  return CheckAvailabilityMessage.encode(to:)(a1);
}

uint64_t NoReply.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t NoReply.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t NoReply.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t NoReply.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NoReply.CodingKeys()
{
  return NoReply.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NoReply.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = NoReply.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance NoReply.CodingKeys()
{
  return NoReply.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance NoReply.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = NoReply.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NoReply.CodingKeys()
{
  lazy protocol witness table accessor for type NoReply.CodingKeys and conformance NoReply.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type NoReply.CodingKeys and conformance NoReply.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for NoReply.CodingKeys, &type metadata for NoReply.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for NoReply.CodingKeys, &type metadata for NoReply.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys;
  if (!lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for NoReply.CodingKeys, &type metadata for NoReply.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type NoReply.CodingKeys and conformance NoReply.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NoReply.CodingKeys()
{
  lazy protocol witness table accessor for type NoReply.CodingKeys and conformance NoReply.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NoReply.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NoReply.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type NoReply.CodingKeys and conformance NoReply.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t NoReply.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NoReply(uint64_t a1)
{
  return NoReply.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NoReply(uint64_t a1)
{
  return NoReply.encode(to:)(a1);
}

uint64_t FetchPrimaryAccountMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t FetchPrimaryAccountMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchPrimaryAccountMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchPrimaryAccountMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchPrimaryAccountMessage.CodingKeys()
{
  return FetchPrimaryAccountMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchPrimaryAccountMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchPrimaryAccountMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchPrimaryAccountMessage.CodingKeys()
{
  return FetchPrimaryAccountMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchPrimaryAccountMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchPrimaryAccountMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchPrimaryAccountMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPrimaryAccountMessage.CodingKeys, &type metadata for FetchPrimaryAccountMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPrimaryAccountMessage.CodingKeys, &type metadata for FetchPrimaryAccountMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPrimaryAccountMessage.CodingKeys, &type metadata for FetchPrimaryAccountMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchPrimaryAccountMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchPrimaryAccountMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchPrimaryAccountMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t FetchPrimaryAccountMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchPrimaryAccountMessage(uint64_t a1)
{
  return FetchPrimaryAccountMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchPrimaryAccountMessage(uint64_t a1)
{
  return FetchPrimaryAccountMessage.encode(to:)(a1);
}

uint64_t FetchAccountAliasesMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t FetchAccountAliasesMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchAccountAliasesMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchAccountAliasesMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchAccountAliasesMessage.CodingKeys()
{
  return FetchAccountAliasesMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchAccountAliasesMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchAccountAliasesMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchAccountAliasesMessage.CodingKeys()
{
  return FetchAccountAliasesMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchAccountAliasesMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchAccountAliasesMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchAccountAliasesMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAccountAliasesMessage.CodingKeys, &type metadata for FetchAccountAliasesMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAccountAliasesMessage.CodingKeys, &type metadata for FetchAccountAliasesMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAccountAliasesMessage.CodingKeys, &type metadata for FetchAccountAliasesMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchAccountAliasesMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchAccountAliasesMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchAccountAliasesMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t FetchAccountAliasesMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchAccountAliasesMessage(uint64_t a1)
{
  return FetchAccountAliasesMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchAccountAliasesMessage(uint64_t a1)
{
  return FetchAccountAliasesMessage.encode(to:)(a1);
}

uint64_t FetchPreferredHandleMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t FetchPreferredHandleMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchPreferredHandleMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchPreferredHandleMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchPreferredHandleMessage.CodingKeys()
{
  return FetchPreferredHandleMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchPreferredHandleMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchPreferredHandleMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchPreferredHandleMessage.CodingKeys()
{
  return FetchPreferredHandleMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchPreferredHandleMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchPreferredHandleMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchPreferredHandleMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPreferredHandleMessage.CodingKeys, &type metadata for FetchPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPreferredHandleMessage.CodingKeys, &type metadata for FetchPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPreferredHandleMessage.CodingKeys, &type metadata for FetchPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchPreferredHandleMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchPreferredHandleMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchPreferredHandleMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t FetchPreferredHandleMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchPreferredHandleMessage(uint64_t a1)
{
  return FetchPreferredHandleMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchPreferredHandleMessage(uint64_t a1)
{
  return FetchPreferredHandleMessage.encode(to:)(a1);
}

uint64_t SetPreferredHandleMessage.handle.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

GroupKit::SetPreferredHandleMessage __swiftcall SetPreferredHandleMessage.init(_:)(Swift::String_optional a1)
{
  uint64_t *v1;
  uint64_t *v2;
  void *v3;
  GroupKit::SetPreferredHandleMessage result;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v7 = v1;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  object = a1.value._object;
  v8 = 0;
  v9 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = countAndFlagsBits;
  v9 = object;
  *v7 = countAndFlagsBits;
  v7[1] = (uint64_t)object;
  swift_bridgeObjectRelease();
  v2 = &v8;
  outlined destroy of SetPreferredHandleMessage();
  result.handle.value._object = v3;
  result.handle.value._countAndFlagsBits = (uint64_t)v2;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of SetPreferredHandleMessage()
{
  swift_bridgeObjectRelease();
}

uint64_t static SetPreferredHandleMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t SetPreferredHandleMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL SetPreferredHandleMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handle", 6uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t SetPreferredHandleMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t SetPreferredHandleMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage.CodingKeys, &type metadata for SetPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage.CodingKeys, &type metadata for SetPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage.CodingKeys, &type metadata for SetPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage.CodingKeys, &type metadata for SetPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage.CodingKeys, &type metadata for SetPreferredHandleMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t SetPreferredHandleMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SetPreferredHandleMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handle", 6uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SetPreferredHandleMessage.CodingKeys()
{
  return static SetPreferredHandleMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SetPreferredHandleMessage.CodingKeys()
{
  return SetPreferredHandleMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SetPreferredHandleMessage.CodingKeys()
{
  return SetPreferredHandleMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SetPreferredHandleMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SetPreferredHandleMessage.CodingKeys()
{
  return SetPreferredHandleMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance SetPreferredHandleMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = SetPreferredHandleMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SetPreferredHandleMessage.CodingKeys()
{
  return SetPreferredHandleMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SetPreferredHandleMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SetPreferredHandleMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SetPreferredHandleMessage.CodingKeys()
{
  lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SetPreferredHandleMessage.CodingKeys()
{
  lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SetPreferredHandleMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v5 = a1;
  v18 = 0;
  v17 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SetPreferredHandleMessage.CodingKeys>);
  v6 = *(_QWORD *)(v14 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v18 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v12 = *v1;
  v13 = v1[1];
  v17 = v1;
  v8 = v18[3];
  v9 = v18[4];
  __swift_project_boxed_opaque_existential_1(v18, v8);
  lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v11;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v15 = v2;
  v16 = v2;
  if (v2)
    v4 = v16;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v14);
}

uint64_t SetPreferredHandleMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[2];

  v17 = a2;
  v18 = a1;
  v28 = 0;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SetPreferredHandleMessage.CodingKeys>);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (char *)v9 - v21;
  v28 = (_QWORD *)MEMORY[0x24BDAC7A8](v18);
  v24 = v28[3];
  v25 = v28[4];
  __swift_project_boxed_opaque_existential_1(v28, v24);
  lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
  v2 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v2;
  v27 = v2;
  if (v2)
  {
    v9[3] = v27;
    v9[1] = v27;
    return __swift_destroy_boxed_opaque_existential_1(v18);
  }
  else
  {
    v3 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v13 = 0;
    v14 = v3;
    v15 = v4;
    v16 = 0;
    v11 = v4;
    v10 = v3;
    swift_bridgeObjectRetain();
    v12 = v29;
    v29[0] = v10;
    v29[1] = v11;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v5 = v17;
    v6 = v11;
    v7 = v18;
    *v17 = v10;
    v5[1] = v6;
    __swift_destroy_boxed_opaque_existential_1(v7);
    result = (uint64_t)v12;
    outlined destroy of SetPreferredHandleMessage();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SetPreferredHandleMessage@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return SetPreferredHandleMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SetPreferredHandleMessage(uint64_t a1)
{
  return SetPreferredHandleMessage.encode(to:)(a1);
}

uint64_t RSVPXPCMessage.request.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t static RSVPXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t RSVPXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL RSVPXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t RSVPXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t RSVPXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage.CodingKeys, &type metadata for RSVPXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage.CodingKeys, &type metadata for RSVPXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage.CodingKeys, &type metadata for RSVPXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage.CodingKeys, &type metadata for RSVPXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage.CodingKeys, &type metadata for RSVPXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RSVPXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RSVPXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPXPCMessage.CodingKeys()
{
  return static RSVPXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPXPCMessage.CodingKeys()
{
  return RSVPXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSVPXPCMessage.CodingKeys()
{
  return RSVPXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RSVPXPCMessage.CodingKeys()
{
  return RSVPXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance RSVPXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = RSVPXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RSVPXPCMessage.CodingKeys()
{
  return RSVPXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RSVPXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RSVPXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RSVPXPCMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RSVPXPCMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKRSVPRequest();
  lazy protocol witness table accessor for type GPKRSVPRequest and conformance GPKRSVPRequest();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type GPKRSVPRequest and conformance GPKRSVPRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKRSVPRequest and conformance GPKRSVPRequest;
  if (!lazy protocol witness table cache variable for type GPKRSVPRequest and conformance GPKRSVPRequest)
  {
    v0 = type metadata accessor for GPKRSVPRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKRSVPRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKRSVPRequest and conformance GPKRSVPRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKRSVPRequest and conformance GPKRSVPRequest;
  if (!lazy protocol witness table cache variable for type GPKRSVPRequest and conformance GPKRSVPRequest)
  {
    v0 = type metadata accessor for GPKRSVPRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKRSVPRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKRSVPRequest and conformance GPKRSVPRequest);
    return v1;
  }
  return v3;
}

uint64_t RSVPXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RSVPXPCMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKRSVPRequest();
    lazy protocol witness table accessor for type GPKRSVPRequest and conformance GPKRSVPRequest();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of RSVPXPCMessage();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of RSVPXPCMessage()
{
  swift_release();
}

uint64_t RSVPXPCMessage.init(request:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPXPCMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RSVPXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPXPCMessage(uint64_t a1)
{
  return RSVPXPCMessage.encode(to:)(a1);
}

uint64_t ProfileInformationXPCMessage.request.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;

  v4 = *v1;
  result = swift_bridgeObjectRetain();
  *a1 = v4;
  return result;
}

uint64_t static ProfileInformationXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t ProfileInformationXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL ProfileInformationXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t ProfileInformationXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t ProfileInformationXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage.CodingKeys, &type metadata for ProfileInformationXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage.CodingKeys, &type metadata for ProfileInformationXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage.CodingKeys, &type metadata for ProfileInformationXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage.CodingKeys, &type metadata for ProfileInformationXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage.CodingKeys, &type metadata for ProfileInformationXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t ProfileInformationXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ProfileInformationXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProfileInformationXPCMessage.CodingKeys()
{
  return static ProfileInformationXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ProfileInformationXPCMessage.CodingKeys()
{
  return ProfileInformationXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ProfileInformationXPCMessage.CodingKeys()
{
  return ProfileInformationXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProfileInformationXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProfileInformationXPCMessage.CodingKeys()
{
  return ProfileInformationXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance ProfileInformationXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = ProfileInformationXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ProfileInformationXPCMessage.CodingKeys()
{
  return ProfileInformationXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ProfileInformationXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ProfileInformationXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProfileInformationXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProfileInformationXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ProfileInformationXPCMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v5 = a1;
  v19 = 0;
  v18 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ProfileInformationXPCMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)v4 - v7;
  v19 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v18 = v1;
  v8 = v19[3];
  v9 = v19[4];
  __swift_project_boxed_opaque_existential_1(v19, v8);
  lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v14 = &v17;
  v17 = v11;
  lazy protocol witness table accessor for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest();
  v2 = v13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v15 = v2;
  v16 = v2;
  if (v2)
    v4[1] = v16;
  outlined destroy of GPKProfileInformationRequest();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationRequest, &type metadata for GPKProfileInformationRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationRequest, &type metadata for GPKProfileInformationRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKProfileInformationRequest()
{
  swift_bridgeObjectRelease();
}

uint64_t ProfileInformationXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v13 = a2;
  v14 = a1;
  v25 = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ProfileInformationXPCMessage.CodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = (char *)&v6 - v17;
  v25 = (_QWORD *)MEMORY[0x24BDAC7A8](v14);
  v20 = v25[3];
  v21 = v25[4];
  __swift_project_boxed_opaque_existential_1(v25, v20);
  lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
  v2 = v19;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v22 = v2;
  v23 = v2;
  if (v2)
  {
    v8 = v23;
  }
  else
  {
    lazy protocol witness table accessor for type GPKProfileInformationRequest and conformance GPKProfileInformationRequest();
    v3 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v3;
    v12 = v3;
    if (!v3)
    {
      v9 = v24;
      swift_bridgeObjectRetain();
      v10 = &v26;
      v26 = v9;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v4 = v14;
      *v13 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of ProfileInformationXPCMessage();
      return result;
    }
    v7 = v12;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v8 = v7;
  }
  v6 = v8;
  return __swift_destroy_boxed_opaque_existential_1(v14);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ProfileInformationXPCMessage()
{
  swift_bridgeObjectRelease();
}

_QWORD *ProfileInformationXPCMessage.init(request:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProfileInformationXPCMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ProfileInformationXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProfileInformationXPCMessage(uint64_t a1)
{
  return ProfileInformationXPCMessage.encode(to:)(a1);
}

uint64_t MembershipXPCMessage.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKMembershipRequest(v1, a1);
}

uint64_t static MembershipXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t MembershipXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL MembershipXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t MembershipXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t MembershipXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage.CodingKeys, &type metadata for MembershipXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage.CodingKeys, &type metadata for MembershipXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage.CodingKeys, &type metadata for MembershipXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage.CodingKeys, &type metadata for MembershipXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage.CodingKeys, &type metadata for MembershipXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t MembershipXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t MembershipXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MembershipXPCMessage.CodingKeys()
{
  return static MembershipXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MembershipXPCMessage.CodingKeys()
{
  return MembershipXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MembershipXPCMessage.CodingKeys()
{
  return MembershipXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MembershipXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MembershipXPCMessage.CodingKeys()
{
  return MembershipXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance MembershipXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = MembershipXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MembershipXPCMessage.CodingKeys()
{
  return MembershipXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MembershipXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MembershipXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MembershipXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MembershipXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MembershipXPCMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKMembershipRequest();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MembershipXPCMessage.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKMembershipRequest(v13, v17);
  lazy protocol witness table accessor for type GPKMembershipRequest and conformance GPKMembershipRequest();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKMembershipRequest(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

unint64_t lazy protocol witness table accessor for type GPKMembershipRequest and conformance GPKMembershipRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMembershipRequest and conformance GPKMembershipRequest;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest and conformance GPKMembershipRequest)
  {
    v0 = type metadata accessor for GPKMembershipRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest and conformance GPKMembershipRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMembershipRequest and conformance GPKMembershipRequest;
  if (!lazy protocol witness table cache variable for type GPKMembershipRequest and conformance GPKMembershipRequest)
  {
    v0 = type metadata accessor for GPKMembershipRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMembershipRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMembershipRequest and conformance GPKMembershipRequest);
    return v1;
  }
  return v3;
}

uint64_t MembershipXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v12 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v13 = type metadata accessor for GPKMembershipRequest();
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t)&v7 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MembershipXPCMessage.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)&v7 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for MembershipXPCMessage() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)&v7 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v9 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKMembershipRequest and conformance GPKMembershipRequest();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v4;
    v11 = v4;
    if (!v4)
    {
      v5 = outlined init with take of GPKMembershipRequest(v15, v22);
      (*(void (**)(char *, uint64_t, __n128))(v18 + 8))(v23, v17, v5);
      outlined init with copy of MembershipXPCMessage(v22, v12);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of MembershipXPCMessage(v22);
    }
    v8 = v11;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v9 = v8;
  }
  v7 = v9;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for MembershipXPCMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for MembershipXPCMessage;
  if (!type metadata singleton initialization cache for MembershipXPCMessage)
    return swift_getSingletonMetadata();
  return v1;
}

__n128 outlined init with take of GPKMembershipRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a2 + *(int *)(v3 + 20)) = *(_BYTE *)(a1 + *(int *)(v3 + 20)) & 1;
  result = *(__n128 *)(a1 + *(int *)(v3 + 24));
  *(__n128 *)(a2 + *(int *)(v3 + 24)) = result;
  return result;
}

uint64_t outlined init with copy of MembershipXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a2 + *(int *)(v3 + 20)) = *(_BYTE *)(a1 + *(int *)(v3 + 20)) & 1;
  v4 = (_QWORD *)(a1 + *(int *)(v3 + 24));
  v8 = (_QWORD *)(a2 + *(int *)(v3 + 24));
  *v8 = *v4;
  v9 = v4[1];
  swift_bridgeObjectRetain();
  result = a2;
  v8[1] = v9;
  return result;
}

uint64_t outlined destroy of MembershipXPCMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for GPKMembershipRequest();
  swift_bridgeObjectRelease();
  return a1;
}

double MembershipXPCMessage.init(request:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = outlined init with take of GPKMembershipRequest(a1, a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MembershipXPCMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MembershipXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MembershipXPCMessage(uint64_t a1)
{
  return MembershipXPCMessage.encode(to:)(a1);
}

uint64_t DeleteGroupXPCMessage.request.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t static DeleteGroupXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t DeleteGroupXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL DeleteGroupXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t DeleteGroupXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t DeleteGroupXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage.CodingKeys, &type metadata for DeleteGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage.CodingKeys, &type metadata for DeleteGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage.CodingKeys, &type metadata for DeleteGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage.CodingKeys, &type metadata for DeleteGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage.CodingKeys, &type metadata for DeleteGroupXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t DeleteGroupXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t DeleteGroupXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DeleteGroupXPCMessage.CodingKeys()
{
  return static DeleteGroupXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DeleteGroupXPCMessage.CodingKeys()
{
  return DeleteGroupXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DeleteGroupXPCMessage.CodingKeys()
{
  return DeleteGroupXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DeleteGroupXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DeleteGroupXPCMessage.CodingKeys()
{
  return DeleteGroupXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance DeleteGroupXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = DeleteGroupXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance DeleteGroupXPCMessage.CodingKeys()
{
  return DeleteGroupXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance DeleteGroupXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DeleteGroupXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DeleteGroupXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DeleteGroupXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DeleteGroupXPCMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DeleteGroupXPCMessage.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKDeleteGroupRequest();
  lazy protocol witness table accessor for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

unint64_t lazy protocol witness table accessor for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest)
  {
    v0 = type metadata accessor for GPKDeleteGroupRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest)
  {
    v0 = type metadata accessor for GPKDeleteGroupRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest);
    return v1;
  }
  return v3;
}

uint64_t DeleteGroupXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DeleteGroupXPCMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKDeleteGroupRequest();
    lazy protocol witness table accessor for type GPKDeleteGroupRequest and conformance GPKDeleteGroupRequest();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of DeleteGroupXPCMessage();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DeleteGroupXPCMessage()
{
  swift_release();
}

uint64_t DeleteGroupXPCMessage.init(request:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance DeleteGroupXPCMessage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return DeleteGroupXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DeleteGroupXPCMessage(uint64_t a1)
{
  return DeleteGroupXPCMessage.encode(to:)(a1);
}

double MetricsXPCMessage.request.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = outlined init with copy of GPKMetricsRequest(v1, a1).n128_u64[0];
  return result;
}

__n128 outlined init with copy of GPKMetricsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v3 = type metadata accessor for GPKMetricsRequest();
  v4 = a1 + *(int *)(v3 + 20);
  v5 = a2 + *(int *)(v3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

uint64_t static MetricsXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t MetricsXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL MetricsXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t MetricsXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t MetricsXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage.CodingKeys, &type metadata for MetricsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage.CodingKeys, &type metadata for MetricsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage.CodingKeys, &type metadata for MetricsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage.CodingKeys, &type metadata for MetricsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage.CodingKeys, &type metadata for MetricsXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t MetricsXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t MetricsXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MetricsXPCMessage.CodingKeys()
{
  return static MetricsXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MetricsXPCMessage.CodingKeys()
{
  return MetricsXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MetricsXPCMessage.CodingKeys()
{
  return MetricsXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MetricsXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MetricsXPCMessage.CodingKeys()
{
  return MetricsXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance MetricsXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = MetricsXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MetricsXPCMessage.CodingKeys()
{
  return MetricsXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MetricsXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MetricsXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MetricsXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MetricsXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MetricsXPCMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKMetricsRequest();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MetricsXPCMessage.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKMetricsRequest(v13, v17);
  lazy protocol witness table accessor for type GPKMetricsRequest and conformance GPKMetricsRequest();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKMetricsRequest(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

unint64_t lazy protocol witness table accessor for type GPKMetricsRequest and conformance GPKMetricsRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMetricsRequest and conformance GPKMetricsRequest;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest and conformance GPKMetricsRequest)
  {
    v0 = type metadata accessor for GPKMetricsRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest and conformance GPKMetricsRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMetricsRequest and conformance GPKMetricsRequest;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest and conformance GPKMetricsRequest)
  {
    v0 = type metadata accessor for GPKMetricsRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest and conformance GPKMetricsRequest);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of GPKMetricsRequest(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t MetricsXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v12 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v13 = type metadata accessor for GPKMetricsRequest();
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t)&v7 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MetricsXPCMessage.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)&v7 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for MetricsXPCMessage() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)&v7 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v9 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKMetricsRequest and conformance GPKMetricsRequest();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v4;
    v11 = v4;
    if (!v4)
    {
      v5 = outlined init with take of GPKMetricsRequest(v15, v22);
      (*(void (**)(char *, uint64_t, __n128))(v18 + 8))(v23, v17, v5);
      outlined init with copy of MetricsXPCMessage(v22, v12);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of MetricsXPCMessage(v22);
    }
    v8 = v11;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v9 = v8;
  }
  v7 = v9;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for MetricsXPCMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for MetricsXPCMessage;
  if (!type metadata singleton initialization cache for MetricsXPCMessage)
    return swift_getSingletonMetadata();
  return v1;
}

__n128 outlined init with take of GPKMetricsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v3 = type metadata accessor for GPKMetricsRequest();
  v4 = a1 + *(int *)(v3 + 20);
  v5 = a2 + *(int *)(v3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 outlined init with copy of MetricsXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v3 = type metadata accessor for GPKMetricsRequest();
  v4 = a1 + *(int *)(v3 + 20);
  v5 = a2 + *(int *)(v3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

uint64_t outlined destroy of MetricsXPCMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

double MetricsXPCMessage.init(request:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = outlined init with take of GPKMetricsRequest(a1, a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MetricsXPCMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MetricsXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MetricsXPCMessage(uint64_t a1)
{
  return MetricsXPCMessage.encode(to:)(a1);
}

uint64_t GroupUpdatedBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t *GroupUpdatedBroadcast.init(group:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;

  v5 = 0;
  swift_retain();
  swift_retain();
  v5 = a1;
  *a2 = a1;
  swift_release();
  result = &v5;
  outlined destroy of GroupUpdatedBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GroupUpdatedBroadcast()
{
  swift_release();
}

uint64_t static GroupUpdatedBroadcast.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t GroupUpdatedBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL GroupUpdatedBroadcast.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t GroupUpdatedBroadcast.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GroupUpdatedBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupUpdatedBroadcast.CodingKeys, &type metadata for GroupUpdatedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupUpdatedBroadcast.CodingKeys, &type metadata for GroupUpdatedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupUpdatedBroadcast.CodingKeys, &type metadata for GroupUpdatedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupUpdatedBroadcast.CodingKeys, &type metadata for GroupUpdatedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupUpdatedBroadcast.CodingKeys, &type metadata for GroupUpdatedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GroupUpdatedBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GroupUpdatedBroadcast.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupUpdatedBroadcast.CodingKeys()
{
  return static GroupUpdatedBroadcast.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupUpdatedBroadcast.CodingKeys()
{
  return GroupUpdatedBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupUpdatedBroadcast.CodingKeys()
{
  return GroupUpdatedBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupUpdatedBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupUpdatedBroadcast.CodingKeys()
{
  return GroupUpdatedBroadcast.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance GroupUpdatedBroadcast.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GroupUpdatedBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GroupUpdatedBroadcast.CodingKeys()
{
  return GroupUpdatedBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GroupUpdatedBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GroupUpdatedBroadcast.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupUpdatedBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupUpdatedBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GroupUpdatedBroadcast.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupUpdatedBroadcast.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

uint64_t GroupUpdatedBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupUpdatedBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of GroupUpdatedBroadcast();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupUpdatedBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return GroupUpdatedBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupUpdatedBroadcast(uint64_t a1)
{
  return GroupUpdatedBroadcast.encode(to:)(a1);
}

uint64_t LeftGroupBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t *LeftGroupBroadcast.init(group:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;

  v5 = 0;
  swift_retain();
  swift_retain();
  v5 = a1;
  *a2 = a1;
  swift_release();
  result = &v5;
  outlined destroy of LeftGroupBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of LeftGroupBroadcast()
{
  swift_release();
}

uint64_t static LeftGroupBroadcast.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t LeftGroupBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL LeftGroupBroadcast.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t LeftGroupBroadcast.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t LeftGroupBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LeftGroupBroadcast.CodingKeys, &type metadata for LeftGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LeftGroupBroadcast.CodingKeys, &type metadata for LeftGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LeftGroupBroadcast.CodingKeys, &type metadata for LeftGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LeftGroupBroadcast.CodingKeys, &type metadata for LeftGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LeftGroupBroadcast.CodingKeys, &type metadata for LeftGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t LeftGroupBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t LeftGroupBroadcast.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LeftGroupBroadcast.CodingKeys()
{
  return static LeftGroupBroadcast.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LeftGroupBroadcast.CodingKeys()
{
  return LeftGroupBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LeftGroupBroadcast.CodingKeys()
{
  return LeftGroupBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LeftGroupBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LeftGroupBroadcast.CodingKeys()
{
  return LeftGroupBroadcast.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance LeftGroupBroadcast.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = LeftGroupBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LeftGroupBroadcast.CodingKeys()
{
  return LeftGroupBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LeftGroupBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LeftGroupBroadcast.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LeftGroupBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LeftGroupBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t LeftGroupBroadcast.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LeftGroupBroadcast.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

uint64_t LeftGroupBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LeftGroupBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of LeftGroupBroadcast();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance LeftGroupBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return LeftGroupBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LeftGroupBroadcast(uint64_t a1)
{
  return LeftGroupBroadcast.encode(to:)(a1);
}

uint64_t GroupDeletedBroadcast.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GroupDeletedBroadcast.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v9 = a2;
  v10 = a1;
  v13 = 0;
  v12 = 0;
  v5[1] = 0;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v5 - v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupDeletedBroadcast() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)v5 - v7;
  v13 = (char *)v5 - v7;
  v12 = v2;
  outlined init with copy of GPKGroupID(v2, v3);
  outlined init with take of GPKGroupID(v8, v11);
  outlined init with copy of GroupDeletedBroadcast(v11, v9);
  outlined destroy of GPKGroupID(v10);
  return outlined destroy of GroupDeletedBroadcast(v11);
}

uint64_t type metadata accessor for GroupDeletedBroadcast()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GroupDeletedBroadcast;
  if (!type metadata singleton initialization cache for GroupDeletedBroadcast)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of GroupDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of GroupDeletedBroadcast(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t static GroupDeletedBroadcast.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t GroupDeletedBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL GroupDeletedBroadcast.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t GroupDeletedBroadcast.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GroupDeletedBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupDeletedBroadcast.CodingKeys, &type metadata for GroupDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupDeletedBroadcast.CodingKeys, &type metadata for GroupDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupDeletedBroadcast.CodingKeys, &type metadata for GroupDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupDeletedBroadcast.CodingKeys, &type metadata for GroupDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupDeletedBroadcast.CodingKeys, &type metadata for GroupDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GroupDeletedBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GroupDeletedBroadcast.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupDeletedBroadcast.CodingKeys()
{
  return static GroupDeletedBroadcast.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupDeletedBroadcast.CodingKeys()
{
  return GroupDeletedBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupDeletedBroadcast.CodingKeys()
{
  return GroupDeletedBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupDeletedBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupDeletedBroadcast.CodingKeys()
{
  return GroupDeletedBroadcast.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance GroupDeletedBroadcast.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GroupDeletedBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GroupDeletedBroadcast.CodingKeys()
{
  return GroupDeletedBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GroupDeletedBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GroupDeletedBroadcast.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupDeletedBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupDeletedBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GroupDeletedBroadcast.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKGroupID();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupDeletedBroadcast.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v13, v17);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKGroupID(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

uint64_t GroupDeletedBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v11 = a2;
  v19 = a1;
  v28 = 0;
  v15 = 0;
  v12 = type metadata accessor for GPKGroupID();
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t)&v6 - v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupDeletedBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)&v6 - v18;
  v20 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupDeletedBroadcast() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v6 - v20;
  v28 = v2;
  v24 = v2[3];
  v25 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v24);
  lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
  v3 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v3;
  v27 = v3;
  if (v3)
  {
    v8 = v27;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      outlined init with take of GPKGroupID(v14, v21);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
      outlined init with copy of GroupDeletedBroadcast(v21, v11);
      __swift_destroy_boxed_opaque_existential_1(v19);
      return outlined destroy of GroupDeletedBroadcast(v21);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    v8 = v7;
  }
  v6 = v8;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupDeletedBroadcast@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GroupDeletedBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupDeletedBroadcast(uint64_t a1)
{
  return GroupDeletedBroadcast.encode(to:)(a1);
}

uint64_t InvitationDeletedBroadcast.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t InvitationDeletedBroadcast.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v9 = a2;
  v10 = a1;
  v13 = 0;
  v12 = 0;
  v5[1] = 0;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v5 - v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for InvitationDeletedBroadcast() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)v5 - v7;
  v13 = (char *)v5 - v7;
  v12 = v2;
  outlined init with copy of GPKGroupID(v2, v3);
  outlined init with take of GPKGroupID(v8, v11);
  outlined init with copy of InvitationDeletedBroadcast(v11, v9);
  outlined destroy of GPKGroupID(v10);
  return outlined destroy of InvitationDeletedBroadcast(v11);
}

uint64_t type metadata accessor for InvitationDeletedBroadcast()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InvitationDeletedBroadcast;
  if (!type metadata singleton initialization cache for InvitationDeletedBroadcast)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of InvitationDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of InvitationDeletedBroadcast(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t static InvitationDeletedBroadcast.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t InvitationDeletedBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL InvitationDeletedBroadcast.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t InvitationDeletedBroadcast.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t InvitationDeletedBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InvitationDeletedBroadcast.CodingKeys, &type metadata for InvitationDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InvitationDeletedBroadcast.CodingKeys, &type metadata for InvitationDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InvitationDeletedBroadcast.CodingKeys, &type metadata for InvitationDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InvitationDeletedBroadcast.CodingKeys, &type metadata for InvitationDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InvitationDeletedBroadcast.CodingKeys, &type metadata for InvitationDeletedBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InvitationDeletedBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InvitationDeletedBroadcast.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InvitationDeletedBroadcast.CodingKeys()
{
  return static InvitationDeletedBroadcast.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InvitationDeletedBroadcast.CodingKeys()
{
  return InvitationDeletedBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InvitationDeletedBroadcast.CodingKeys()
{
  return InvitationDeletedBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InvitationDeletedBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationDeletedBroadcast.CodingKeys()
{
  return InvitationDeletedBroadcast.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance InvitationDeletedBroadcast.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = InvitationDeletedBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InvitationDeletedBroadcast.CodingKeys()
{
  return InvitationDeletedBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InvitationDeletedBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InvitationDeletedBroadcast.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationDeletedBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationDeletedBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InvitationDeletedBroadcast.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKGroupID();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationDeletedBroadcast.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v13, v17);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKGroupID(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

uint64_t InvitationDeletedBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v11 = a2;
  v19 = a1;
  v28 = 0;
  v15 = 0;
  v12 = type metadata accessor for GPKGroupID();
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t)&v6 - v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationDeletedBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)&v6 - v18;
  v20 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for InvitationDeletedBroadcast() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v6 - v20;
  v28 = v2;
  v24 = v2[3];
  v25 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v24);
  lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
  v3 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v3;
  v27 = v3;
  if (v3)
  {
    v8 = v27;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      outlined init with take of GPKGroupID(v14, v21);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
      outlined init with copy of InvitationDeletedBroadcast(v21, v11);
      __swift_destroy_boxed_opaque_existential_1(v19);
      return outlined destroy of InvitationDeletedBroadcast(v21);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    v8 = v7;
  }
  v6 = v8;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationDeletedBroadcast@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InvitationDeletedBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationDeletedBroadcast(uint64_t a1)
{
  return InvitationDeletedBroadcast.encode(to:)(a1);
}

uint64_t MemberInvitationResponseBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t MemberInvitationResponseBroadcast.isAccepted.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) & 1;
}

uint64_t MemberInvitationResponseBroadcast.member.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v2;
}

uint64_t *MemberInvitationResponseBroadcast.init(group:member:isAccepted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  swift_retain();
  swift_retain();
  v9 = a1;
  swift_retain();
  swift_retain();
  v11 = a2;
  LOBYTE(v10) = a3 & 1;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = a3 & 1;
  *(_QWORD *)(a4 + 16) = a2;
  swift_release();
  swift_release();
  result = &v9;
  outlined destroy of MemberInvitationResponseBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of MemberInvitationResponseBroadcast()
{
  swift_release();
  swift_release();
}

BOOL static MemberInvitationResponseBroadcast.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t MemberInvitationResponseBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t MemberInvitationResponseBroadcast.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isAccepted", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("member", 6uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t MemberInvitationResponseBroadcast.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t MemberInvitationResponseBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MemberInvitationResponseBroadcast.CodingKeys, &type metadata for MemberInvitationResponseBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MemberInvitationResponseBroadcast.CodingKeys, &type metadata for MemberInvitationResponseBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MemberInvitationResponseBroadcast.CodingKeys, &type metadata for MemberInvitationResponseBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MemberInvitationResponseBroadcast.CodingKeys, &type metadata for MemberInvitationResponseBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for MemberInvitationResponseBroadcast.CodingKeys, &type metadata for MemberInvitationResponseBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t MemberInvitationResponseBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t MemberInvitationResponseBroadcast.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isAccepted", 0xAuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("member", 6uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MemberInvitationResponseBroadcast.CodingKeys(char *a1, char *a2)
{
  return static MemberInvitationResponseBroadcast.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  return MemberInvitationResponseBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  return MemberInvitationResponseBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MemberInvitationResponseBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  char *v0;

  return MemberInvitationResponseBroadcast.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MemberInvitationResponseBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MemberInvitationResponseBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  return MemberInvitationResponseBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MemberInvitationResponseBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MemberInvitationResponseBroadcast.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MemberInvitationResponseBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MemberInvitationResponseBroadcast.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;

  v16 = a1;
  v38 = 0;
  v37 = 0;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MemberInvitationResponseBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v26 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v6 - v18;
  v38 = (_QWORD *)MEMORY[0x24BDAC7A8](v16);
  v24 = *v1;
  v19 = *((unsigned __int8 *)v1 + 8);
  v20 = v1[2];
  v37 = v1;
  v21 = v38[3];
  v22 = v38[4];
  __swift_project_boxed_opaque_existential_1(v38, v21);
  lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v29 = &v36;
  v36 = v24;
  v25 = &v35;
  v35 = 0;
  v27 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v28;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v30 = v2;
  v31 = v2;
  if (v2)
  {
    v7 = v31;
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v26);
    v8 = v7;
  }
  else
  {
    swift_release();
    v3 = v30;
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = v3;
    v15 = v3;
    if (v3)
    {
      v6[2] = v15;
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v26);
    }
    else
    {
      swift_retain();
      v11 = &v33;
      v33 = v20;
      v9 = &v32;
      v32 = 2;
      v10 = type metadata accessor for GPKMember();
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      v4 = v14;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v12 = v4;
      v13 = v4;
      if (v4)
        v6[1] = v13;
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v26);
    }
  }
  return result;
}

uint64_t MemberInvitationResponseBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  v31 = a2;
  v32 = a1;
  v47 = 0;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MemberInvitationResponseBroadcast.CodingKeys>);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v36 = (char *)v11 - v35;
  v51 = 0;
  v47 = (_QWORD *)MEMORY[0x24BDAC7A8](v32);
  v38 = v47[3];
  v39 = v47[4];
  __swift_project_boxed_opaque_existential_1(v47, v38);
  lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
  v2 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v2;
  v41 = v2;
  if (v2)
  {
    v14 = v41;
  }
  else
  {
    v28 = type metadata accessor for GPKGroup();
    v27 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29 = v3;
    v30 = v3;
    if (v3)
    {
      v13 = v30;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v14 = v13;
    }
    else
    {
      v22 = v46;
      v23 = 1;
      v51 = 1;
      swift_retain();
      v48 = v22;
      v44 = v23;
      v4 = KeyedDecodingContainer.decode(_:forKey:)();
      v24 = 0;
      v25 = v4;
      v26 = 0;
      v17 = v4;
      v49 = v4 & 1;
      v19 = type metadata accessor for GPKMember();
      v18 = &v42;
      v42 = 2;
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      v5 = v24;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v20 = v5;
      v21 = v5;
      if (!v5)
      {
        v15 = v43;
        v16 = &v48;
        v51 = 5;
        swift_retain();
        v50 = v15;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
        swift_retain();
        swift_retain();
        swift_release();
        swift_release();
        v6 = v17;
        v7 = v31;
        v8 = v15;
        v9 = v32;
        *v31 = v22;
        *((_BYTE *)v7 + 8) = v6 & 1;
        v7[2] = v8;
        __swift_destroy_boxed_opaque_existential_1(v9);
        result = (uint64_t)v16;
        outlined destroy of MemberInvitationResponseBroadcast();
        return result;
      }
      v12 = v21;
      swift_release();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v14 = v12;
    }
  }
  v11[1] = v14;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v51 & 1) != 0)
    return swift_release();
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MemberInvitationResponseBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return MemberInvitationResponseBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MemberInvitationResponseBroadcast(uint64_t a1)
{
  return MemberInvitationResponseBroadcast.encode(to:)(a1);
}

uint64_t ReceivedGroupInviteBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t *ReceivedGroupInviteBroadcast.init(group:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;

  v5 = 0;
  swift_retain();
  swift_retain();
  v5 = a1;
  *a2 = a1;
  swift_release();
  result = &v5;
  outlined destroy of ReceivedGroupInviteBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ReceivedGroupInviteBroadcast()
{
  swift_release();
}

uint64_t static ReceivedGroupInviteBroadcast.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t ReceivedGroupInviteBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL ReceivedGroupInviteBroadcast.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t ReceivedGroupInviteBroadcast.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t ReceivedGroupInviteBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupInviteBroadcast.CodingKeys, &type metadata for ReceivedGroupInviteBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupInviteBroadcast.CodingKeys, &type metadata for ReceivedGroupInviteBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupInviteBroadcast.CodingKeys, &type metadata for ReceivedGroupInviteBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupInviteBroadcast.CodingKeys, &type metadata for ReceivedGroupInviteBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupInviteBroadcast.CodingKeys, &type metadata for ReceivedGroupInviteBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t ReceivedGroupInviteBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ReceivedGroupInviteBroadcast.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  return static ReceivedGroupInviteBroadcast.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  return ReceivedGroupInviteBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  return ReceivedGroupInviteBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReceivedGroupInviteBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  return ReceivedGroupInviteBroadcast.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance ReceivedGroupInviteBroadcast.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = ReceivedGroupInviteBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  return ReceivedGroupInviteBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReceivedGroupInviteBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReceivedGroupInviteBroadcast.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReceivedGroupInviteBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReceivedGroupInviteBroadcast.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = a1;
  v20 = 0;
  v19 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReceivedGroupInviteBroadcast.CodingKeys>);
  v6 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v7;
  v20 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v11 = *v1;
  v19 = v1;
  v8 = v20[3];
  v9 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v8);
  lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v15 = &v18;
  v18 = v11;
  v13 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
    v4 = v17;
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v12);
}

uint64_t ReceivedGroupInviteBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v14 = a2;
  v15 = a1;
  v26 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReceivedGroupInviteBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)v6 - v18;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v21 = v26[3];
  v22 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v21);
  lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
  v2 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v23 = v2;
  v24 = v2;
  if (v2)
  {
    v8 = v24;
  }
  else
  {
    v11 = type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v25;
      swift_retain();
      v10 = &v27;
      v27 = v9;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v4 = v15;
      *v14 = v9;
      __swift_destroy_boxed_opaque_existential_1(v4);
      result = (uint64_t)v10;
      outlined destroy of ReceivedGroupInviteBroadcast();
      return result;
    }
    v7 = v13;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReceivedGroupInviteBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ReceivedGroupInviteBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReceivedGroupInviteBroadcast(uint64_t a1)
{
  return ReceivedGroupInviteBroadcast.encode(to:)(a1);
}

uint64_t ReceivedGroupUpdateBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t ReceivedGroupUpdateBroadcast.addedMembers.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ReceivedGroupUpdateBroadcast.removedMembers.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ReceivedGroupUpdateBroadcast.deliveredSilently.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 24) & 1;
}

uint64_t *ReceivedGroupUpdateBroadcast.init(group:addedMembers:removedMembers:deliveredSilently:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  swift_retain();
  swift_retain();
  v11 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = a3;
  v14 = a4 & 1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = &v11;
  outlined destroy of ReceivedGroupUpdateBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ReceivedGroupUpdateBroadcast()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void static ReceivedGroupUpdateBroadcast.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D23C4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D23C534
                                                                                       + dword_23D23C59C[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D23C544()
{
  uint64_t v1;

  return v1 == 0;
}

void ReceivedGroupUpdateBroadcast.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D23C5FC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ReceivedGroupUpdateBroadcast.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("addedMembers", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("removedMembers", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deliveredSilently", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t ReceivedGroupUpdateBroadcast.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t ReceivedGroupUpdateBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupUpdateBroadcast.CodingKeys, &type metadata for ReceivedGroupUpdateBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupUpdateBroadcast.CodingKeys, &type metadata for ReceivedGroupUpdateBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupUpdateBroadcast.CodingKeys, &type metadata for ReceivedGroupUpdateBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupUpdateBroadcast.CodingKeys, &type metadata for ReceivedGroupUpdateBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupUpdateBroadcast.CodingKeys, &type metadata for ReceivedGroupUpdateBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t ReceivedGroupUpdateBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

void ReceivedGroupUpdateBroadcast.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D23CA5C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReceivedGroupUpdateBroadcast.CodingKeys(char *a1)
{
  char v1;

  static ReceivedGroupUpdateBroadcast.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReceivedGroupUpdateBroadcast.CodingKeys()
{
  return ReceivedGroupUpdateBroadcast.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ReceivedGroupUpdateBroadcast.CodingKeys(uint64_t a1)
{
  char *v1;

  ReceivedGroupUpdateBroadcast.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReceivedGroupUpdateBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance ReceivedGroupUpdateBroadcast.CodingKeys()
{
  char *v0;

  ReceivedGroupUpdateBroadcast.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReceivedGroupUpdateBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReceivedGroupUpdateBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReceivedGroupUpdateBroadcast.CodingKeys()
{
  return ReceivedGroupUpdateBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReceivedGroupUpdateBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReceivedGroupUpdateBroadcast.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReceivedGroupUpdateBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReceivedGroupUpdateBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReceivedGroupUpdateBroadcast.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;

  v23 = a1;
  v48 = 0;
  v47 = 0;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReceivedGroupUpdateBroadcast.CodingKeys>);
  v24 = *(_QWORD *)(v34 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v7 - v25;
  v48 = (_QWORD *)MEMORY[0x24BDAC7A8](v23);
  v32 = *v1;
  v26 = v1[1];
  v27 = v1[2];
  v28 = *((unsigned __int8 *)v1 + 24);
  v47 = v1;
  v29 = v48[3];
  v30 = v48[4];
  __swift_project_boxed_opaque_existential_1(v48, v29);
  lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v37 = &v46;
  v46 = v32;
  v33 = &v45;
  v45 = 0;
  v35 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v36;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v38 = v2;
  v39 = v2;
  if (v2)
  {
    v9 = v39;
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v34);
    v10 = v9;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRetain();
    v20 = &v44;
    v44 = v26;
    v18 = &v43;
    v43 = 1;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
    v3 = v38;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v21 = v3;
    v22 = v3;
    if (v3)
    {
      v8 = v22;
      outlined destroy of [GPKMember]();
      result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v34);
      v10 = v8;
    }
    else
    {
      outlined destroy of [GPKMember]();
      swift_bridgeObjectRetain();
      v15 = &v42;
      v42 = v27;
      v13 = &v41;
      v41 = 2;
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMemberRemoval]);
      lazy protocol witness table accessor for type [GPKMemberRemoval] and conformance <A> [A]();
      v4 = v21;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v16 = v4;
      v17 = v4;
      if (v4)
      {
        v7[1] = v17;
        outlined destroy of [GPKMemberRemoval]();
        return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v34);
      }
      else
      {
        outlined destroy of [GPKMemberRemoval]();
        v5 = v16;
        v40 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        v11 = v5;
        v12 = v5;
        if (v5)
          v7[0] = v12;
        return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v34);
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [GPKMemberRemoval] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMemberRemoval] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMemberRemoval] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMemberRemoval]);
    v4 = lazy protocol witness table accessor for type GPKMemberRemoval and conformance GPKMemberRemoval();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMemberRemoval] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMemberRemoval] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMemberRemoval] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMemberRemoval]);
    v4 = lazy protocol witness table accessor for type GPKMemberRemoval and conformance GPKMemberRemoval();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMemberRemoval] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKMemberRemoval and conformance GPKMemberRemoval()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval;
  if (!lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval)
  {
    v0 = type metadata accessor for GPKMemberRemoval();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRemoval, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval;
  if (!lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval)
  {
    v0 = type metadata accessor for GPKMemberRemoval();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRemoval, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval;
  if (!lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval)
  {
    v0 = type metadata accessor for GPKMemberRemoval();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRemoval, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval;
  if (!lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval)
  {
    v0 = type metadata accessor for GPKMemberRemoval();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberRemoval, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRemoval and conformance GPKMemberRemoval);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMemberRemoval]()
{
  swift_bridgeObjectRelease();
}

uint64_t *ReceivedGroupUpdateBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *result;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;

  v39 = a2;
  v40 = a1;
  v57 = 0;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReceivedGroupUpdateBroadcast.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v44 = (char *)v13 - v43;
  v62 = 0;
  v57 = (_QWORD *)MEMORY[0x24BDAC7A8](v40);
  v46 = v57[3];
  v47 = v57[4];
  __swift_project_boxed_opaque_existential_1(v57, v46);
  lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
  v2 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v48 = v2;
  v49 = v2;
  if (v2)
  {
    v17 = v49;
  }
  else
  {
    v36 = type metadata accessor for GPKGroup();
    v35 = &v55;
    v55 = 0;
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v3;
    v38 = v3;
    if (v3)
    {
      v16 = v38;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
      v17 = v16;
    }
    else
    {
      v29 = v56;
      v30 = 1;
      v62 = 1;
      swift_retain();
      v58 = v29;
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
      v31 = &v53;
      v53 = v30;
      lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
      v4 = v37;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v33 = v4;
      v34 = v4;
      if (v4)
      {
        v15 = v34;
        swift_release();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
        v17 = v15;
      }
      else
      {
        v24 = v54;
        v62 = 3;
        swift_bridgeObjectRetain();
        v59 = v24;
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMemberRemoval]);
        v25 = &v51;
        v51 = 2;
        lazy protocol witness table accessor for type [GPKMemberRemoval] and conformance <A> [A]();
        v5 = v33;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v27 = v5;
        v28 = v5;
        if (!v5)
        {
          v20 = v52;
          v62 = 7;
          swift_bridgeObjectRetain();
          v60 = v20;
          v50 = 3;
          v6 = KeyedDecodingContainer.decode(_:forKey:)();
          v21 = 0;
          v22 = v6;
          v23 = 0;
          v18 = v6;
          v19 = &v58;
          v61 = v6 & 1;
          (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v7 = v24;
          v8 = v20;
          v9 = v18;
          v10 = v39;
          v11 = v40;
          *v39 = v29;
          v10[1] = v7;
          v10[2] = v8;
          *((_BYTE *)v10 + 24) = v9 & 1;
          __swift_destroy_boxed_opaque_existential_1(v11);
          result = v19;
          outlined destroy of ReceivedGroupUpdateBroadcast();
          return result;
        }
        v14 = v28;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
        v17 = v14;
      }
    }
  }
  v13[1] = v17;
  result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1(v40);
  if ((v62 & 1) != 0)
    result = (uint64_t *)swift_release();
  if ((v62 & 2) != 0)
  {
    result = &v59;
    outlined destroy of [GPKMember]();
  }
  if ((v62 & 4) != 0)
  {
    result = &v60;
    outlined destroy of [GPKMemberRemoval]();
  }
  return result;
}

uint64_t *protocol witness for Decodable.init(from:) in conformance ReceivedGroupUpdateBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ReceivedGroupUpdateBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReceivedGroupUpdateBroadcast(uint64_t a1)
{
  return ReceivedGroupUpdateBroadcast.encode(to:)(a1);
}

uint64_t RemovedFromGroupBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t RemovedFromGroupBroadcast.deliveredSilently.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) & 1;
}

uint64_t *RemovedFromGroupBroadcast.init(group:deliveredSilently:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 0;
  swift_retain();
  swift_retain();
  v7 = a1;
  v8 = a2 & 1;
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  swift_release();
  result = &v7;
  outlined destroy of RemovedFromGroupBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of RemovedFromGroupBroadcast()
{
  swift_release();
}

BOOL static RemovedFromGroupBroadcast.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t RemovedFromGroupBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t RemovedFromGroupBroadcast.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deliveredSilently", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t RemovedFromGroupBroadcast.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t RemovedFromGroupBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RemovedFromGroupBroadcast.CodingKeys, &type metadata for RemovedFromGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RemovedFromGroupBroadcast.CodingKeys, &type metadata for RemovedFromGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RemovedFromGroupBroadcast.CodingKeys, &type metadata for RemovedFromGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RemovedFromGroupBroadcast.CodingKeys, &type metadata for RemovedFromGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RemovedFromGroupBroadcast.CodingKeys, &type metadata for RemovedFromGroupBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RemovedFromGroupBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RemovedFromGroupBroadcast.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deliveredSilently", 0x11uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RemovedFromGroupBroadcast.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static RemovedFromGroupBroadcast.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RemovedFromGroupBroadcast.CodingKeys()
{
  return RemovedFromGroupBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RemovedFromGroupBroadcast.CodingKeys()
{
  return RemovedFromGroupBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemovedFromGroupBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RemovedFromGroupBroadcast.CodingKeys()
{
  _BYTE *v0;

  return RemovedFromGroupBroadcast.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemovedFromGroupBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RemovedFromGroupBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RemovedFromGroupBroadcast.CodingKeys()
{
  return RemovedFromGroupBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RemovedFromGroupBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RemovedFromGroupBroadcast.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemovedFromGroupBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemovedFromGroupBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RemovedFromGroupBroadcast.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;

  v7 = a1;
  v26 = 0;
  v25 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemovedFromGroupBroadcast.CodingKeys>);
  v8 = *(_QWORD *)(v16 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)v5 - v9;
  v26 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v14 = *v1;
  v10 = *((unsigned __int8 *)v1 + 8);
  v25 = v1;
  v11 = v26[3];
  v12 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v11);
  lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v19 = &v24;
  v24 = v14;
  v15 = &v23;
  v23 = 0;
  v17 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v20 = v2;
  v21 = v2;
  if (v2)
  {
    v5[1] = v21;
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v16);
  }
  else
  {
    swift_release();
    v3 = v20;
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v5[3] = v3;
    v6 = v3;
    if (v3)
      v5[0] = v6;
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v16);
  }
}

uint64_t RemovedFromGroupBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  char v40;

  v23 = a2;
  v24 = a1;
  v37 = 0;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemovedFromGroupBroadcast.CodingKeys>);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v28 = (char *)v9 - v27;
  v40 = 0;
  v37 = (_QWORD *)MEMORY[0x24BDAC7A8](v24);
  v30 = v37[3];
  v31 = v37[4];
  __swift_project_boxed_opaque_existential_1(v37, v30);
  lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
  v2 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v32 = v2;
  v33 = v2;
  if (v2)
  {
    v11 = v33;
  }
  else
  {
    v20 = type metadata accessor for GPKGroup();
    v19 = &v35;
    v35 = 0;
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v3;
    v22 = v3;
    if (!v3)
    {
      v14 = v36;
      v15 = 1;
      v40 = 1;
      swift_retain();
      v38 = v14;
      v34 = v15;
      v4 = KeyedDecodingContainer.decode(_:forKey:)();
      v16 = 0;
      v17 = v4;
      v18 = 0;
      v12 = v4;
      v13 = &v38;
      v39 = v4 & 1;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
      v5 = v12;
      v6 = v23;
      v7 = v24;
      *v23 = v14;
      *((_BYTE *)v6 + 8) = v5 & 1;
      __swift_destroy_boxed_opaque_existential_1(v7);
      result = (uint64_t)v13;
      outlined destroy of RemovedFromGroupBroadcast();
      return result;
    }
    v10 = v22;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    v11 = v10;
  }
  v9[1] = v11;
  result = __swift_destroy_boxed_opaque_existential_1(v24);
  if ((v40 & 1) != 0)
    return swift_release();
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RemovedFromGroupBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RemovedFromGroupBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RemovedFromGroupBroadcast(uint64_t a1)
{
  return RemovedFromGroupBroadcast.encode(to:)(a1);
}

uint64_t ReceivedGroupDeletionBroadcast.group.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

uint64_t ReceivedGroupDeletionBroadcast.deliveredSilently.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) & 1;
}

uint64_t ReceivedGroupDeletionBroadcast.actingMember.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v2;
}

uint64_t *ReceivedGroupDeletionBroadcast.init(group:deliveredSilently:actingMember:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  swift_retain();
  swift_retain();
  v9 = a1;
  LOBYTE(v10) = a2 & 1;
  swift_retain();
  swift_retain();
  v11 = a3;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = a2 & 1;
  *(_QWORD *)(a4 + 16) = a3;
  swift_release();
  swift_release();
  result = &v9;
  outlined destroy of ReceivedGroupDeletionBroadcast();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ReceivedGroupDeletionBroadcast()
{
  swift_release();
  swift_release();
}

BOOL static ReceivedGroupDeletionBroadcast.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t ReceivedGroupDeletionBroadcast.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ReceivedGroupDeletionBroadcast.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deliveredSilently", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("actingMember", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t ReceivedGroupDeletionBroadcast.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t ReceivedGroupDeletionBroadcast.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupDeletionBroadcast.CodingKeys, &type metadata for ReceivedGroupDeletionBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupDeletionBroadcast.CodingKeys, &type metadata for ReceivedGroupDeletionBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupDeletionBroadcast.CodingKeys, &type metadata for ReceivedGroupDeletionBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupDeletionBroadcast.CodingKeys, &type metadata for ReceivedGroupDeletionBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ReceivedGroupDeletionBroadcast.CodingKeys, &type metadata for ReceivedGroupDeletionBroadcast.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t ReceivedGroupDeletionBroadcast.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ReceivedGroupDeletionBroadcast.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("group", 5uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deliveredSilently", 0x11uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("actingMember", 0xCuLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ReceivedGroupDeletionBroadcast.CodingKeys(char *a1, char *a2)
{
  return static ReceivedGroupDeletionBroadcast.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return ReceivedGroupDeletionBroadcast.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return ReceivedGroupDeletionBroadcast.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReceivedGroupDeletionBroadcast.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  char *v0;

  return ReceivedGroupDeletionBroadcast.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReceivedGroupDeletionBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReceivedGroupDeletionBroadcast.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return ReceivedGroupDeletionBroadcast.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReceivedGroupDeletionBroadcast.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReceivedGroupDeletionBroadcast.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReceivedGroupDeletionBroadcast.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReceivedGroupDeletionBroadcast.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;

  v16 = a1;
  v38 = 0;
  v37 = 0;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReceivedGroupDeletionBroadcast.CodingKeys>);
  v17 = *(_QWORD *)(v26 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v6 - v18;
  v38 = (_QWORD *)MEMORY[0x24BDAC7A8](v16);
  v24 = *v1;
  v19 = *((unsigned __int8 *)v1 + 8);
  v20 = v1[2];
  v37 = v1;
  v21 = v38[3];
  v22 = v38[4];
  __swift_project_boxed_opaque_existential_1(v38, v21);
  lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v29 = &v36;
  v36 = v24;
  v25 = &v35;
  v35 = 0;
  v27 = type metadata accessor for GPKGroup();
  lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  v2 = v28;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v30 = v2;
  v31 = v2;
  if (v2)
  {
    v7 = v31;
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v26);
    v8 = v7;
  }
  else
  {
    swift_release();
    v3 = v30;
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = v3;
    v15 = v3;
    if (v3)
    {
      v6[2] = v15;
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v26);
    }
    else
    {
      swift_retain();
      v11 = &v33;
      v33 = v20;
      v9 = &v32;
      v32 = 2;
      v10 = type metadata accessor for GPKMember();
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      v4 = v14;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v12 = v4;
      v13 = v4;
      if (v4)
        v6[1] = v13;
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v26);
    }
  }
  return result;
}

uint64_t ReceivedGroupDeletionBroadcast.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  v31 = a2;
  v32 = a1;
  v47 = 0;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReceivedGroupDeletionBroadcast.CodingKeys>);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v36 = (char *)v11 - v35;
  v51 = 0;
  v47 = (_QWORD *)MEMORY[0x24BDAC7A8](v32);
  v38 = v47[3];
  v39 = v47[4];
  __swift_project_boxed_opaque_existential_1(v47, v38);
  lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
  v2 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v2;
  v41 = v2;
  if (v2)
  {
    v14 = v41;
  }
  else
  {
    v28 = type metadata accessor for GPKGroup();
    v27 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v3 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29 = v3;
    v30 = v3;
    if (v3)
    {
      v13 = v30;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v14 = v13;
    }
    else
    {
      v22 = v46;
      v23 = 1;
      v51 = 1;
      swift_retain();
      v48 = v22;
      v44 = v23;
      v4 = KeyedDecodingContainer.decode(_:forKey:)();
      v24 = 0;
      v25 = v4;
      v26 = 0;
      v17 = v4;
      v49 = v4 & 1;
      v19 = type metadata accessor for GPKMember();
      v18 = &v42;
      v42 = 2;
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      v5 = v24;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v20 = v5;
      v21 = v5;
      if (!v5)
      {
        v15 = v43;
        v16 = &v48;
        v51 = 5;
        swift_retain();
        v50 = v15;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
        swift_retain();
        swift_retain();
        swift_release();
        swift_release();
        v6 = v17;
        v7 = v31;
        v8 = v15;
        v9 = v32;
        *v31 = v22;
        *((_BYTE *)v7 + 8) = v6 & 1;
        v7[2] = v8;
        __swift_destroy_boxed_opaque_existential_1(v9);
        result = (uint64_t)v16;
        outlined destroy of ReceivedGroupDeletionBroadcast();
        return result;
      }
      v12 = v21;
      swift_release();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v14 = v12;
    }
  }
  v11[1] = v14;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v51 & 1) != 0)
    return swift_release();
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReceivedGroupDeletionBroadcast@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ReceivedGroupDeletionBroadcast.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReceivedGroupDeletionBroadcast(uint64_t a1)
{
  return ReceivedGroupDeletionBroadcast.encode(to:)(a1);
}

uint64_t CheckKeyRegistrationMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t CheckKeyRegistrationMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CheckKeyRegistrationMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CheckKeyRegistrationMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CheckKeyRegistrationMessage.CodingKeys()
{
  return CheckKeyRegistrationMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CheckKeyRegistrationMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CheckKeyRegistrationMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CheckKeyRegistrationMessage.CodingKeys()
{
  return CheckKeyRegistrationMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CheckKeyRegistrationMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CheckKeyRegistrationMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CheckKeyRegistrationMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckKeyRegistrationMessage.CodingKeys, &type metadata for CheckKeyRegistrationMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckKeyRegistrationMessage.CodingKeys, &type metadata for CheckKeyRegistrationMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckKeyRegistrationMessage.CodingKeys, &type metadata for CheckKeyRegistrationMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CheckKeyRegistrationMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CheckKeyRegistrationMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CheckKeyRegistrationMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t CheckKeyRegistrationMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CheckKeyRegistrationMessage(uint64_t a1)
{
  return CheckKeyRegistrationMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CheckKeyRegistrationMessage(uint64_t a1)
{
  return CheckKeyRegistrationMessage.encode(to:)(a1);
}

uint64_t RegisterSelfMessage.forceKeyRoll.getter()
{
  _BYTE *v0;

  return *v0 & 1;
}

uint64_t RegisterSelfMessage.skipServerCheck.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 1) & 1;
}

uint64_t RegisterSelfMessage.skipLocalCheck.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 2) & 1;
}

BOOL static RegisterSelfMessage.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t RegisterSelfMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t RegisterSelfMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("forceKeyRoll", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipServerCheck", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipLocalCheck", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t RegisterSelfMessage.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t RegisterSelfMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage.CodingKeys, &type metadata for RegisterSelfMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage.CodingKeys, &type metadata for RegisterSelfMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage.CodingKeys, &type metadata for RegisterSelfMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage.CodingKeys, &type metadata for RegisterSelfMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage.CodingKeys, &type metadata for RegisterSelfMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RegisterSelfMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RegisterSelfMessage.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("forceKeyRoll", 0xCuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipServerCheck", 0xFuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipLocalCheck", 0xEuLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RegisterSelfMessage.CodingKeys(char *a1, char *a2)
{
  return static RegisterSelfMessage.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RegisterSelfMessage.CodingKeys()
{
  return RegisterSelfMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RegisterSelfMessage.CodingKeys()
{
  return RegisterSelfMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegisterSelfMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RegisterSelfMessage.CodingKeys()
{
  char *v0;

  return RegisterSelfMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegisterSelfMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RegisterSelfMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RegisterSelfMessage.CodingKeys()
{
  return RegisterSelfMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RegisterSelfMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RegisterSelfMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegisterSelfMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegisterSelfMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RegisterSelfMessage.encode(to:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v4[9];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  unsigned __int8 *v21;
  _QWORD *v22;

  v5 = a1;
  v22 = 0;
  v21 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegisterSelfMessage.CodingKeys>);
  v6 = *(_QWORD *)(v14 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)v4 - v7;
  v22 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v13 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v21 = v1;
  v10 = v22[3];
  v11 = v22[4];
  __swift_project_boxed_opaque_existential_1(v22, v10);
  lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v15;
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
  {
    v4[3] = v17;
  }
  else
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v4[7] = 0;
    v4[8] = 0;
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v4[5] = 0;
    v4[6] = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v14);
}

GroupKit::RegisterSelfMessage __swiftcall RegisterSelfMessage.init(forceKeyRoll:skipServerCheck:skipLocalCheck:)(Swift::Bool forceKeyRoll, Swift::Bool skipServerCheck, Swift::Bool skipLocalCheck)
{
  Swift::Bool *v3;
  GroupKit::RegisterSelfMessage result;

  *v3 = forceKeyRoll;
  v3[1] = skipServerCheck;
  v3[2] = skipLocalCheck;
  result.forceKeyRoll = forceKeyRoll;
  return result;
}

uint64_t RegisterSelfMessage.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD v12[6];
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v26 = a2;
  v27 = a1;
  v40 = 0;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegisterSelfMessage.CodingKeys>);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = (char *)v12 - v30;
  v40 = (_QWORD *)MEMORY[0x24BDAC7A8](v27);
  v33 = v40[3];
  v34 = v40[4];
  __swift_project_boxed_opaque_existential_1(v40, v33);
  lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
  v2 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v35 = v2;
  v36 = v2;
  if (v2)
  {
    v12[5] = v36;
    v12[1] = v36;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  else
  {
    v39 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = 0;
    v24 = v3;
    v25 = 0;
    v19 = v3;
    v41 = v3 & 1;
    v38 = 1;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v20 = 0;
    v21 = v4;
    v22 = 0;
    v15 = v4;
    v42 = v4 & 1;
    v37 = 2;
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = 0;
    v17 = v5;
    v18 = 0;
    v14 = v5;
    v13 = 1;
    v43 = v5 & 1;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    v6 = v13;
    v7 = v15;
    v8 = v14;
    v9 = v26;
    v10 = v27;
    *v26 = v19 & v13;
    v9[1] = v7 & v6;
    v9[2] = v8 & 1;
    return __swift_destroy_boxed_opaque_existential_1(v10);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance RegisterSelfMessage@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return RegisterSelfMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RegisterSelfMessage(uint64_t a1)
{
  return RegisterSelfMessage.encode(to:)(a1);
}

uint64_t DeleteAllContentMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t DeleteAllContentMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t DeleteAllContentMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t DeleteAllContentMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DeleteAllContentMessage.CodingKeys()
{
  return DeleteAllContentMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DeleteAllContentMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DeleteAllContentMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance DeleteAllContentMessage.CodingKeys()
{
  return DeleteAllContentMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance DeleteAllContentMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DeleteAllContentMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DeleteAllContentMessage.CodingKeys()
{
  lazy protocol witness table accessor for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteAllContentMessage.CodingKeys, &type metadata for DeleteAllContentMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteAllContentMessage.CodingKeys, &type metadata for DeleteAllContentMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteAllContentMessage.CodingKeys, &type metadata for DeleteAllContentMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DeleteAllContentMessage.CodingKeys()
{
  lazy protocol witness table accessor for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DeleteAllContentMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DeleteAllContentMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t DeleteAllContentMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DeleteAllContentMessage(uint64_t a1)
{
  return DeleteAllContentMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DeleteAllContentMessage(uint64_t a1)
{
  return DeleteAllContentMessage.encode(to:)(a1);
}

uint64_t FetchAllUsersMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t FetchAllUsersMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchAllUsersMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchAllUsersMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchAllUsersMessage.CodingKeys()
{
  return FetchAllUsersMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchAllUsersMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchAllUsersMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchAllUsersMessage.CodingKeys()
{
  return FetchAllUsersMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchAllUsersMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchAllUsersMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchAllUsersMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAllUsersMessage.CodingKeys, &type metadata for FetchAllUsersMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAllUsersMessage.CodingKeys, &type metadata for FetchAllUsersMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAllUsersMessage.CodingKeys, &type metadata for FetchAllUsersMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchAllUsersMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchAllUsersMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchAllUsersMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t FetchAllUsersMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchAllUsersMessage(uint64_t a1)
{
  return FetchAllUsersMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchAllUsersMessage(uint64_t a1)
{
  return FetchAllUsersMessage.encode(to:)(a1);
}

GroupKit::SeedType_optional __swiftcall SeedType.init(rawValue:)(Swift::String rawValue)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  GroupKit::SeedType_optional result;
  _BYTE *v5;
  Swift::Int v7;
  char v8;

  v5 = v1;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "Admin";
  *(_QWORD *)(v3 + 8) = 5;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "Member";
  *(_QWORD *)(v3 + 32) = 6;
  *(_BYTE *)(v3 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, rawValue);
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v7 != 1)
    {
      result.value = swift_bridgeObjectRelease();
      *v5 = 2;
      return result;
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  *v5 = v8 & 1;
  return (GroupKit::SeedType_optional)swift_bridgeObjectRelease();
}

uint64_t SeedType.rawValue.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Admin", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SeedType()
{
  lazy protocol witness table accessor for type SeedType and conformance SeedType();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type SeedType and conformance SeedType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SeedType and conformance SeedType;
  if (!lazy protocol witness table cache variable for type SeedType and conformance SeedType)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SeedType, &type metadata for SeedType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SeedType and conformance SeedType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SeedType and conformance SeedType;
  if (!lazy protocol witness table cache variable for type SeedType and conformance SeedType)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SeedType, &type metadata for SeedType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SeedType and conformance SeedType);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SeedType()
{
  lazy protocol witness table accessor for type SeedType and conformance SeedType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SeedType()
{
  lazy protocol witness table accessor for type SeedType and conformance SeedType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SeedType()
{
  lazy protocol witness table accessor for type SeedType and conformance SeedType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::SeedType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SeedType(Swift::String *a1)
{
  return SeedType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SeedType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = SeedType.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SeedType()
{
  lazy protocol witness table accessor for type SeedType and conformance SeedType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SeedType()
{
  lazy protocol witness table accessor for type SeedType and conformance SeedType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t GroupRefreshMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GroupRefreshMessage.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v9 = a2;
  v10 = a1;
  v13 = 0;
  v12 = 0;
  v5[1] = 0;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v5 - v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupRefreshMessage() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)v5 - v7;
  v13 = (char *)v5 - v7;
  v12 = v2;
  outlined init with copy of GPKGroupID(v2, v3);
  outlined init with take of GPKGroupID(v8, v11);
  outlined init with copy of GroupRefreshMessage(v11, v9);
  outlined destroy of GPKGroupID(v10);
  return outlined destroy of GroupRefreshMessage(v11);
}

uint64_t type metadata accessor for GroupRefreshMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GroupRefreshMessage;
  if (!type metadata singleton initialization cache for GroupRefreshMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of GroupRefreshMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of GroupRefreshMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t static GroupRefreshMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t GroupRefreshMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL GroupRefreshMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t GroupRefreshMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GroupRefreshMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage.CodingKeys, &type metadata for GroupRefreshMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage.CodingKeys, &type metadata for GroupRefreshMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage.CodingKeys, &type metadata for GroupRefreshMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage.CodingKeys, &type metadata for GroupRefreshMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage.CodingKeys, &type metadata for GroupRefreshMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GroupRefreshMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GroupRefreshMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupRefreshMessage.CodingKeys()
{
  return static GroupRefreshMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupRefreshMessage.CodingKeys()
{
  return GroupRefreshMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupRefreshMessage.CodingKeys()
{
  return GroupRefreshMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupRefreshMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupRefreshMessage.CodingKeys()
{
  return GroupRefreshMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance GroupRefreshMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GroupRefreshMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GroupRefreshMessage.CodingKeys()
{
  return GroupRefreshMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GroupRefreshMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GroupRefreshMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupRefreshMessage.CodingKeys()
{
  lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupRefreshMessage.CodingKeys()
{
  lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GroupRefreshMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKGroupID();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupRefreshMessage.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v13, v17);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKGroupID(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

uint64_t GroupRefreshMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v11 = a2;
  v19 = a1;
  v28 = 0;
  v15 = 0;
  v12 = type metadata accessor for GPKGroupID();
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t)&v6 - v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupRefreshMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)&v6 - v18;
  v20 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupRefreshMessage() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v6 - v20;
  v28 = v2;
  v24 = v2[3];
  v25 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v24);
  lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
  v3 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v3;
  v27 = v3;
  if (v3)
  {
    v8 = v27;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      outlined init with take of GPKGroupID(v14, v21);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
      outlined init with copy of GroupRefreshMessage(v21, v11);
      __swift_destroy_boxed_opaque_existential_1(v19);
      return outlined destroy of GroupRefreshMessage(v21);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    v8 = v7;
  }
  v6 = v8;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupRefreshMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GroupRefreshMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupRefreshMessage(uint64_t a1)
{
  return GroupRefreshMessage.encode(to:)(a1);
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.code.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.body.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

GroupKit::KeyDistributionRequestMessage::KeyDistributionResponse __swiftcall KeyDistributionRequestMessage.KeyDistributionResponse.init(code:body:)(Swift::Int code, Swift::String body)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v4;
  void *v5;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int *v9;
  Swift::Int v10;
  uint64_t v11;
  void *v12;
  GroupKit::KeyDistributionRequestMessage::KeyDistributionResponse result;

  v9 = v2;
  countAndFlagsBits = body._countAndFlagsBits;
  object = body._object;
  v11 = 0;
  v12 = 0;
  v10 = code;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = countAndFlagsBits;
  v12 = object;
  *v9 = code;
  v9[1] = countAndFlagsBits;
  v9[2] = (Swift::Int)object;
  swift_bridgeObjectRelease();
  v3 = &v10;
  outlined destroy of KeyDistributionRequestMessage.KeyDistributionResponse();
  result.body._object = v5;
  result.body._countAndFlagsBits = v4;
  result.code = (Swift::Int)v3;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of KeyDistributionRequestMessage.KeyDistributionResponse()
{
  swift_bridgeObjectRelease();
}

BOOL static KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("code", 4uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("body", 4uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("body", 4uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("code", 4uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  _BYTE *v0;

  return KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;

  v5 = a1;
  v21 = 0;
  v20 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys>);
  v6 = *(_QWORD *)(v14 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)v4 - v7;
  v21 = (_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v13 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v20 = v1;
  v10 = v21[3];
  v11 = v21[4];
  __swift_project_boxed_opaque_existential_1(v21, v10);
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v15;
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v16 = v2;
  v17 = v2;
  if (v2)
  {
    v4[2] = v17;
  }
  else
  {
    swift_bridgeObjectRetain();
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v4[4] = 0;
    v4[5] = 0;
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v14);
}

uint64_t KeyDistributionRequestMessage.KeyDistributionResponse.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD *v36;
  _QWORD v37[3];

  v23 = a2;
  v24 = a1;
  v36 = 0;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys>);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v28 = (char *)v11 - v27;
  v36 = (_QWORD *)MEMORY[0x24BDAC7A8](v24);
  v30 = v36[3];
  v31 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v30);
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
  v2 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v32 = v2;
  v33 = v2;
  if (v2)
  {
    v11[4] = v33;
    v11[1] = v33;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  else
  {
    v35 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v20 = 0;
    v21 = v3;
    v22 = 0;
    v15 = v3;
    v37[0] = v3;
    v34 = 1;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = 0;
    v17 = v4;
    v18 = v5;
    v19 = 0;
    v13 = v5;
    v12 = v4;
    v14 = v37;
    swift_bridgeObjectRetain();
    v37[1] = v12;
    v37[2] = v13;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    v6 = v12;
    v7 = v23;
    v8 = v13;
    v9 = v24;
    *v23 = v15;
    v7[1] = v6;
    v7[2] = v8;
    __swift_destroy_boxed_opaque_existential_1(v9);
    result = (uint64_t)v14;
    outlined destroy of KeyDistributionRequestMessage.KeyDistributionResponse();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyDistributionRequestMessage.KeyDistributionResponse.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance KeyDistributionRequestMessage.KeyDistributionResponse(uint64_t a1)
{
  return KeyDistributionRequestMessage.KeyDistributionResponse.encode(to:)(a1);
}

GroupKit::KeyDistributionRequestMessage::RequestType_optional __swiftcall KeyDistributionRequestMessage.RequestType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  char v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "fetch";
  *(_QWORD *)(v2 + 8) = 5;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "lookup";
  *(_QWORD *)(v2 + 32) = 6;
  *(_BYTE *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (GroupKit::KeyDistributionRequestMessage::RequestType_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (GroupKit::KeyDistributionRequestMessage::RequestType_optional)2;
}

uint64_t KeyDistributionRequestMessage.RequestType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lookup", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fetch", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyDistributionRequestMessage.RequestType()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance KeyDistributionRequestMessage.RequestType()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyDistributionRequestMessage.RequestType()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance KeyDistributionRequestMessage.RequestType()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::KeyDistributionRequestMessage::RequestType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance KeyDistributionRequestMessage.RequestType@<W0>(Swift::String *a1@<X0>, GroupKit::KeyDistributionRequestMessage::RequestType_optional *a2@<X8>)
{
  GroupKit::KeyDistributionRequestMessage::RequestType_optional result;

  result.value = KeyDistributionRequestMessage.RequestType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance KeyDistributionRequestMessage.RequestType@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = KeyDistributionRequestMessage.RequestType.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance KeyDistributionRequestMessage.RequestType()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance KeyDistributionRequestMessage.RequestType()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t KeyDistributionRequestMessage.requestType.getter()
{
  _BYTE *v0;

  return *v0 & 1;
}

uint64_t KeyDistributionRequestMessage.altDSID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t KeyDistributionRequestMessage.gpkUserID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v5;

  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  result = outlined copy of GPKUserID?(v3, v5);
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t KeyDistributionRequestMessage.email.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t KeyDistributionRequestMessage.emailHash.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t KeyDistributionRequestMessage.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t KeyDistributionRequestMessage.phoneNumberHash.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t KeyDistributionRequestMessage.init(requestType:altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v22;
  unint64_t v23;
  _QWORD __b[13];

  memset(__b, 0, sizeof(__b));
  v22 = *a4;
  v23 = a4[1];
  LOBYTE(__b[0]) = a1 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[1] = a2;
  __b[2] = a3;
  outlined copy of GPKUserID?(v22, v23);
  outlined copy of GPKUserID?(v22, v23);
  __b[3] = v22;
  __b[4] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[5] = a5;
  __b[6] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[7] = a7;
  __b[8] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[9] = a10;
  __b[10] = a11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[11] = a12;
  __b[12] = a13;
  swift_bridgeObjectRetain();
  outlined copy of GPKUserID?(v22, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of GPKUserID?(v22, v23);
  swift_bridgeObjectRelease();
  *(_BYTE *)a9 = a1 & 1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = v22;
  *(_QWORD *)(a9 + 32) = v23;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 56) = a7;
  *(_QWORD *)(a9 + 64) = a8;
  *(_QWORD *)(a9 + 72) = a10;
  *(_QWORD *)(a9 + 80) = a11;
  *(_QWORD *)(a9 + 88) = a12;
  *(_QWORD *)(a9 + 96) = a13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of GPKUserID?(v22, v23);
  swift_bridgeObjectRelease();
  return outlined destroy of KeyDistributionRequestMessage((uint64_t)__b);
}

uint64_t outlined destroy of KeyDistributionRequestMessage(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 32) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void static KeyDistributionRequestMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D243198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D243208
                                                                                       + *((int *)qword_23D2432A0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D243218()
{
  uint64_t v1;

  return v1 == 0;
}

void KeyDistributionRequestMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D24330C()
{
  return Hasher.combine<A>(_:)();
}

uint64_t KeyDistributionRequestMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  unsigned __int8 v9;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestType", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("altDSID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserID", 9uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 2;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("email", 5uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 3;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("emailHash", 9uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumber", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 5;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumberHash", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 6;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 7;
}

uint64_t KeyDistributionRequestMessage.CodingKeys.init(intValue:)()
{
  return 7;
}

uint64_t KeyDistributionRequestMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.CodingKeys, &type metadata for KeyDistributionRequestMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.CodingKeys, &type metadata for KeyDistributionRequestMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.CodingKeys, &type metadata for KeyDistributionRequestMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.CodingKeys, &type metadata for KeyDistributionRequestMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.CodingKeys, &type metadata for KeyDistributionRequestMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t KeyDistributionRequestMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void KeyDistributionRequestMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D24396C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestType", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyDistributionRequestMessage.CodingKeys(char *a1)
{
  char v1;

  static KeyDistributionRequestMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance KeyDistributionRequestMessage.CodingKeys()
{
  return KeyDistributionRequestMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance KeyDistributionRequestMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  KeyDistributionRequestMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyDistributionRequestMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance KeyDistributionRequestMessage.CodingKeys()
{
  char *v0;

  KeyDistributionRequestMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance KeyDistributionRequestMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = KeyDistributionRequestMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance KeyDistributionRequestMessage.CodingKeys()
{
  return KeyDistributionRequestMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance KeyDistributionRequestMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = KeyDistributionRequestMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance KeyDistributionRequestMessage.CodingKeys()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance KeyDistributionRequestMessage.CodingKeys()
{
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t KeyDistributionRequestMessage.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _QWORD v59[2];
  char v60;
  char v61;
  char v62;
  _QWORD *v63;
  _QWORD *v64;

  v29 = a1;
  v64 = 0;
  v63 = 0;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<KeyDistributionRequestMessage.CodingKeys>);
  v30 = *(_QWORD *)(v49 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v46 = (char *)v9 - v31;
  v64 = (_QWORD *)MEMORY[0x24BDAC7A8](v29);
  v47 = *(unsigned __int8 *)v1;
  v32 = v1[1];
  v33 = v1[2];
  v34 = v1[3];
  v35 = v1[4];
  v36 = v1[5];
  v37 = v1[6];
  v38 = v1[7];
  v39 = v1[8];
  v40 = v1[9];
  v41 = v1[10];
  v42 = v1[11];
  v43 = v1[12];
  v63 = v1;
  v44 = v64[3];
  v45 = v64[4];
  __swift_project_boxed_opaque_existential_1(v64, v44);
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v51 = &v62;
  v62 = v47 & 1;
  v48 = &v61;
  v61 = 0;
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
  v2 = v50;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v52 = v2;
  v53 = v2;
  if (v2)
  {
    v13 = v53;
    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v49);
    v14 = v13;
  }
  else
  {
    swift_bridgeObjectRetain();
    v60 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v27 = 0;
    v28 = 0;
    swift_bridgeObjectRelease();
    outlined copy of GPKUserID?(v34, v35);
    v24 = v59;
    v59[0] = v34;
    v59[1] = v35;
    v23 = &v58;
    v58 = 2;
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v3 = v27;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v25 = v3;
    v26 = v3;
    if (v3)
    {
      v12 = v26;
      outlined destroy of GPKUserID?((uint64_t)v59);
      result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v49);
      v14 = v12;
    }
    else
    {
      outlined destroy of GPKUserID?((uint64_t)v59);
      v4 = v25;
      swift_bridgeObjectRetain();
      v57 = 3;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      v21 = v4;
      v22 = v4;
      if (v4)
      {
        v11 = v22;
        swift_bridgeObjectRelease();
        result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v49);
        v14 = v11;
      }
      else
      {
        swift_bridgeObjectRelease();
        v5 = v21;
        swift_bridgeObjectRetain();
        v56 = 4;
        KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
        v19 = v5;
        v20 = v5;
        if (v5)
        {
          v10 = v20;
          swift_bridgeObjectRelease();
          result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v49);
          v14 = v10;
        }
        else
        {
          swift_bridgeObjectRelease();
          v6 = v19;
          swift_bridgeObjectRetain();
          v55 = 5;
          KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
          v17 = v6;
          v18 = v6;
          if (v6)
          {
            v9[1] = v18;
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v49);
          }
          else
          {
            swift_bridgeObjectRelease();
            v7 = v17;
            swift_bridgeObjectRetain();
            v54 = 6;
            KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
            v15 = v7;
            v16 = v7;
            if (v7)
              v9[0] = v16;
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v49);
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.RequestType, &type metadata for KeyDistributionRequestMessage.RequestType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.RequestType, &type metadata for KeyDistributionRequestMessage.RequestType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.RequestType, &type metadata for KeyDistributionRequestMessage.RequestType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.RequestType, &type metadata for KeyDistributionRequestMessage.RequestType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType);
    return v0;
  }
  return v2;
}

_QWORD *KeyDistributionRequestMessage.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned __int8 v97;
  _QWORD *v98;
  char v99;
  _QWORD v100[2];
  _QWORD v101[2];
  _QWORD v102[2];
  _QWORD v103[2];
  _QWORD v104[4];
  char v105;

  v77 = a2;
  v78 = a1;
  v98 = 0;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<KeyDistributionRequestMessage.CodingKeys>);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = (*(_QWORD *)(v80 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v82 = (char *)&v31 - v81;
  v105 = 0;
  v98 = (_QWORD *)MEMORY[0x24BDAC7A8](v78);
  v84 = v98[3];
  v85 = v98[4];
  __swift_project_boxed_opaque_existential_1(v98, v84);
  lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
  v2 = v83;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v86 = v2;
  v87 = v2;
  if (v2)
  {
    v35 = v87;
  }
  else
  {
    v74 = &v96;
    v96 = 0;
    lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
    v3 = v86;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v75 = v3;
    v76 = v3;
    if (v3)
    {
      v34 = v76;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
      v35 = v34;
    }
    else
    {
      v69 = v97;
      v99 = v97 & 1;
      v95 = 1;
      v4 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v70 = 0;
      v71 = v4;
      v72 = v5;
      v73 = 0;
      v64 = v5;
      v63 = v4;
      v65 = 2;
      v105 = 2;
      swift_bridgeObjectRetain();
      v100[0] = v63;
      v100[1] = v64;
      v66 = &v92;
      v92 = v65;
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      v6 = v70;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v67 = v6;
      v68 = v6;
      if (v6)
      {
        v33 = v68;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
        v35 = v33;
      }
      else
      {
        v57 = v93;
        v58 = v94;
        v105 = 6;
        outlined copy of GPKUserID?(v93, v94);
        v7 = v67;
        v101[0] = v57;
        v101[1] = v58;
        v91 = 3;
        v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        v59 = v7;
        v60 = v8;
        v61 = v9;
        v62 = v7;
        if (!v7)
        {
          v52 = v61;
          v51 = v60;
          v105 = 14;
          swift_bridgeObjectRetain();
          v102[0] = v51;
          v102[1] = v52;
          v90 = 4;
          v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          v53 = 0;
          v54 = v10;
          v55 = v11;
          v56 = 0;
          v46 = v11;
          v45 = v10;
          v105 = 30;
          swift_bridgeObjectRetain();
          v103[0] = v45;
          v103[1] = v46;
          v89 = 5;
          v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          v47 = 0;
          v48 = v12;
          v49 = v13;
          v50 = 0;
          v40 = v13;
          v39 = v12;
          v105 = 62;
          swift_bridgeObjectRetain();
          v104[0] = v39;
          v104[1] = v40;
          v88 = 6;
          v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          v41 = 0;
          v42 = v14;
          v43 = v15;
          v44 = 0;
          v37 = v15;
          v36 = v14;
          v38 = &v99;
          v105 = 126;
          swift_bridgeObjectRetain();
          v104[2] = v36;
          v104[3] = v37;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
          swift_bridgeObjectRetain();
          outlined copy of GPKUserID?(v57, v58);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of GPKUserID?(v57, v58);
          swift_bridgeObjectRelease();
          v16 = v63;
          v17 = v64;
          v18 = v57;
          v19 = v58;
          v20 = v51;
          v21 = v52;
          v22 = v45;
          v23 = v46;
          v24 = v39;
          v25 = v40;
          v26 = v36;
          v27 = v77;
          v28 = v37;
          v29 = v78;
          *v77 = v69 & 1;
          v27[1] = v16;
          v27[2] = v17;
          v27[3] = v18;
          v27[4] = v19;
          v27[5] = v20;
          v27[6] = v21;
          v27[7] = v22;
          v27[8] = v23;
          v27[9] = v24;
          v27[10] = v25;
          v27[11] = v26;
          v27[12] = v28;
          __swift_destroy_boxed_opaque_existential_1(v29);
          return (_QWORD *)outlined destroy of KeyDistributionRequestMessage((uint64_t)v38);
        }
        v32 = v62;
        outlined consume of GPKUserID?(v57, v58);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
        v35 = v32;
      }
    }
  }
  v31 = v35;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v78);
  if ((v105 & 2) != 0)
  {
    result = v100;
    outlined destroy of String?();
  }
  if ((v105 & 4) != 0)
    result = (_QWORD *)outlined destroy of GPKUserID?((uint64_t)v101);
  if ((v105 & 8) != 0)
  {
    result = v102;
    outlined destroy of String?();
  }
  if ((v105 & 0x10) != 0)
  {
    result = v103;
    outlined destroy of String?();
  }
  if ((v105 & 0x20) != 0)
  {
    result = v104;
    outlined destroy of String?();
  }
  return result;
}

_QWORD *protocol witness for Decodable.init(from:) in conformance KeyDistributionRequestMessage@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return KeyDistributionRequestMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance KeyDistributionRequestMessage(uint64_t a1)
{
  return KeyDistributionRequestMessage.encode(to:)(a1);
}

GroupKit::GroupMode_optional __swiftcall GroupMode.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  char v3;

  if (!rawValue)
  {
    v3 = 0;
LABEL_6:
    *v1 = v3 & 1;
    return (GroupKit::GroupMode_optional)rawValue;
  }
  if (rawValue == 1)
  {
    v3 = 1;
    goto LABEL_6;
  }
  *v1 = 2;
  return (GroupKit::GroupMode_optional)rawValue;
}

BOOL GroupMode.rawValue.getter()
{
  _BYTE *v0;

  return (*v0 & 1) != 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupMode()
{
  lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GroupMode and conformance GroupMode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupMode and conformance GroupMode;
  if (!lazy protocol witness table cache variable for type GroupMode and conformance GroupMode)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupMode, &type metadata for GroupMode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupMode and conformance GroupMode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupMode and conformance GroupMode;
  if (!lazy protocol witness table cache variable for type GroupMode and conformance GroupMode)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupMode, &type metadata for GroupMode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupMode and conformance GroupMode);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupMode()
{
  lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupMode()
{
  lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GroupMode()
{
  lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::GroupMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GroupMode(Swift::Int *a1)
{
  return GroupMode.init(rawValue:)(*a1);
}

BOOL protocol witness for RawRepresentable.rawValue.getter in conformance GroupMode@<W0>(_BOOL8 *a1@<X8>)
{
  _BOOL8 result;

  result = GroupMode.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupMode()
{
  lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupMode()
{
  lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
  return RawRepresentable<>.encode(to:)();
}

uint64_t GroupKitServerRequestMessage.payload.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2);
}

uint64_t GroupKitServerRequestMessage.init(payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[8];

  v18 = a4;
  v20 = a1;
  v22 = a2;
  v25 = 0;
  v24 = 0;
  v26[7] = a2;
  v26[6] = a3;
  v19 = *(_QWORD *)(a2 - 8);
  v15 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v14 - v15;
  v26[0] = v4;
  v26[1] = v5;
  v26[2] = v6;
  v26[3] = v7;
  v26[4] = v8;
  v26[5] = v9;
  v23 = type metadata accessor for GroupKitServerRequestMessage(0, (uint64_t)v26);
  v16 = (*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v17);
  v21 = (uint64_t)&v14 - v16;
  v25 = (char *)&v14 - v16;
  v24 = v11;
  (*(void (**)(uint64_t))(v12 + 16))(v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v21, v17, v22);
  outlined init with copy of GroupKitServerRequestMessage<A, B>(v21, v18, v22);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v22);
  result = v21;
  outlined destroy of GroupKitServerRequestMessage<A, B>(v21, v22);
  return result;
}

uint64_t type metadata accessor for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x242633178](a1, a2, &nominal type descriptor for GroupKitServerRequestMessage);
}

uint64_t outlined init with copy of GroupKitServerRequestMessage<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 16))();
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GroupKitServerRequestMessage<A, B>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(a2 - 8) + 8))();
}

uint64_t static GroupKitServerRequestMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t GroupKitServerRequestMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL GroupKitServerRequestMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payload", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t GroupKitServerRequestMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GroupKitServerRequestMessage.CodingKeys.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[8];

  v7[7] = a1;
  v7[6] = a2;
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a5;
  v7[5] = a6;
  type metadata accessor for GroupKitServerRequestMessage.CodingKeys(0, (uint64_t)v7);
  MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys);
  return _hashValue<A>(for:)();
}

uint64_t type metadata accessor for GroupKitServerRequestMessage.CodingKeys(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x242633178](a1, a2, &nominal type descriptor for GroupKitServerRequestMessage.CodingKeys);
}

uint64_t GroupKitServerRequestMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GroupKitServerRequestMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payload", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupKitServerRequestMessage<A, B>.CodingKeys()
{
  return static GroupKitServerRequestMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupKitServerRequestMessage<A, B>.CodingKeys(uint64_t *a1)
{
  return GroupKitServerRequestMessage.CodingKeys.hashValue.getter(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupKitServerRequestMessage<A, B>.CodingKeys()
{
  return GroupKitServerRequestMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupKitServerRequestMessage<A, B>.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupKitServerRequestMessage<A, B>.CodingKeys()
{
  return GroupKitServerRequestMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance GroupKitServerRequestMessage<A, B>.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GroupKitServerRequestMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GroupKitServerRequestMessage<A, B>.CodingKeys()
{
  return GroupKitServerRequestMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GroupKitServerRequestMessage<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GroupKitServerRequestMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupKitServerRequestMessage<A, B>.CodingKeys()
{
  MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupKitServerRequestMessage<A, B>.CodingKeys()
{
  MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t GroupKitServerRequestMessage.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[6];
  uint64_t v33;
  uint64_t v34;

  v13 = a1;
  v31 = 0;
  v30 = 0;
  v24 = *(_QWORD *)(a2 + 16);
  v34 = v24;
  v21 = *(_QWORD *)(v24 - 8);
  v12 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v27 = (char *)&v11 - v12;
  v33 = v3[3];
  v4 = v3[4];
  v25 = v3[5];
  v5 = v3[6];
  v6 = v3[7];
  v32[0] = v7;
  v32[1] = v33;
  v32[2] = v4;
  v32[3] = v25;
  v32[4] = v5;
  v32[5] = v6;
  v16 = type metadata accessor for GroupKitServerRequestMessage.CodingKeys(255, (uint64_t)v32);
  v17 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys);
  v23 = type metadata accessor for KeyedEncodingContainer();
  v14 = *(_QWORD *)(v23 - 8);
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v20 = (char *)&v11 - v15;
  v31 = v8;
  v30 = v2;
  v18 = v8[3];
  v19 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v18);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v24);
  v9 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v9;
  v29 = v9;
  if (v9)
    v11 = v29;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, v23);
}

uint64_t GroupKitServerRequestMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[6];
  _QWORD v53[8];

  v25 = a8;
  v39 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v34 = a7;
  v51 = 0;
  v53[7] = a2;
  v53[6] = a3;
  v26 = *(_QWORD *)(a2 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v28 = (char *)v24 - v27;
  v53[0] = v8;
  v53[1] = v9;
  v53[2] = v10;
  v53[3] = v11;
  v53[4] = v12;
  v53[5] = v13;
  v44 = type metadata accessor for GroupKitServerRequestMessage.CodingKeys(255, (uint64_t)v53);
  v45 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys);
  v35 = 0;
  v36 = type metadata accessor for KeyedDecodingContainer();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v35);
  v43 = (char *)v24 - v38;
  v52[0] = v15;
  v52[1] = v16;
  v52[2] = v17;
  v52[3] = v18;
  v52[4] = v19;
  v52[5] = v20;
  v40 = type metadata accessor for GroupKitServerRequestMessage(v14, (uint64_t)v52);
  v41 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (_QWORD *)MEMORY[0x24BDAC7A8](v39);
  v42 = (uint64_t)v24 - v41;
  v51 = v21;
  v47 = v21[3];
  v48 = v21[4];
  __swift_project_boxed_opaque_existential_1(v21, v47);
  v22 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v49 = v22;
  v50 = v22;
  if (v22)
  {
    v24[3] = v50;
    v24[1] = v50;
    return __swift_destroy_boxed_opaque_existential_1(v39);
  }
  else
  {
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24[4] = 0;
    v24[5] = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v42, v28, v29);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
    outlined init with copy of GroupKitServerRequestMessage<A, B>(v42, v25, v29);
    __swift_destroy_boxed_opaque_existential_1(v39);
    result = v42;
    outlined destroy of GroupKitServerRequestMessage<A, B>(v42, v29);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupKitServerRequestMessage<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return GroupKitServerRequestMessage.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupKitServerRequestMessage<A, B>(uint64_t a1, uint64_t a2)
{
  return GroupKitServerRequestMessage.encode(to:)(a1, a2);
}

uint64_t FetchRSVPQueueMessagePayload.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t FetchRSVPQueueMessagePayload.signature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for FetchRSVPQueueMessagePayload() + 20);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t type metadata accessor for FetchRSVPQueueMessagePayload()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for FetchRSVPQueueMessagePayload;
  if (!type metadata singleton initialization cache for FetchRSVPQueueMessagePayload)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t FetchRSVPQueueMessagePayload.init(groupID:signature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t RSVPQueueMessagePayload;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v18 = a4;
  v21 = a1;
  v20 = a2;
  v19 = a3;
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v13 = 0;
  v14 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (uint64_t)&v13 - v14;
  RSVPQueueMessagePayload = type metadata accessor for FetchRSVPQueueMessagePayload();
  v15 = (*(_QWORD *)(*(_QWORD *)(RSVPQueueMessagePayload - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v21);
  v22 = (uint64_t)&v13 - v15;
  v26 = (char *)&v13 - v15;
  v25 = v4;
  v23 = v5;
  v24 = v6;
  outlined init with copy of GPKGroupID(v4, v7);
  outlined init with take of GPKGroupID(v16, v22);
  outlined copy of Data._Representation(v20, v19);
  v8 = v18;
  v9 = v19;
  v10 = v22;
  v11 = (_QWORD *)(v22 + *(int *)(RSVPQueueMessagePayload + 20));
  *v11 = v20;
  v11[1] = v9;
  outlined init with copy of FetchRSVPQueueMessagePayload(v10, v8);
  outlined consume of Data._Representation(v20, v19);
  outlined destroy of GPKGroupID(v21);
  return outlined destroy of FetchRSVPQueueMessagePayload(v22);
}

uint64_t outlined init with copy of FetchRSVPQueueMessagePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for FetchRSVPQueueMessagePayload() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of FetchRSVPQueueMessagePayload(uint64_t a1)
{
  uint64_t v1;
  uint64_t RSVPQueueMessagePayload;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  RSVPQueueMessagePayload = type metadata accessor for FetchRSVPQueueMessagePayload();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(RSVPQueueMessagePayload + 20)), *(_QWORD *)(a1 + *(int *)(RSVPQueueMessagePayload + 20) + 8));
  return a1;
}

BOOL static FetchRSVPQueueMessagePayload.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t FetchRSVPQueueMessagePayload.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t FetchRSVPQueueMessagePayload.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t FetchRSVPQueueMessagePayload.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t FetchRSVPQueueMessagePayload.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchRSVPQueueMessagePayload.CodingKeys, &type metadata for FetchRSVPQueueMessagePayload.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchRSVPQueueMessagePayload.CodingKeys, &type metadata for FetchRSVPQueueMessagePayload.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchRSVPQueueMessagePayload.CodingKeys, &type metadata for FetchRSVPQueueMessagePayload.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchRSVPQueueMessagePayload.CodingKeys, &type metadata for FetchRSVPQueueMessagePayload.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchRSVPQueueMessagePayload.CodingKeys, &type metadata for FetchRSVPQueueMessagePayload.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchRSVPQueueMessagePayload.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchRSVPQueueMessagePayload.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FetchRSVPQueueMessagePayload.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static FetchRSVPQueueMessagePayload.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  return FetchRSVPQueueMessagePayload.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  return FetchRSVPQueueMessagePayload.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchRSVPQueueMessagePayload.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  _BYTE *v0;

  return FetchRSVPQueueMessagePayload.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchRSVPQueueMessagePayload.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchRSVPQueueMessagePayload.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  return FetchRSVPQueueMessagePayload.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchRSVPQueueMessagePayload.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchRSVPQueueMessagePayload.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchRSVPQueueMessagePayload.CodingKeys()
{
  lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchRSVPQueueMessagePayload.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;
  _QWORD *v33;

  v15 = a1;
  v33 = 0;
  v32 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v14 = (*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t)v7 - v14;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchRSVPQueueMessagePayload.CodingKeys>);
  v16 = *(_QWORD *)(v23 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v33 = v2;
  v32 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v21, v26);
  v22 = &v31;
  v31 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v7[1] = v28;
    outlined destroy of GPKGroupID(v26);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v23);
  }
  else
  {
    outlined destroy of GPKGroupID(v26);
    v4 = (uint64_t *)(v21 + *(int *)(type metadata accessor for FetchRSVPQueueMessagePayload() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v30;
    v30[0] = v8;
    v30[1] = v9;
    v10 = &v29;
    v29 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    v5 = v27;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[0] = v13;
    outlined destroy of Data((uint64_t)v30);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v23);
  }
}

uint64_t FetchRSVPQueueMessagePayload.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t RSVPQueueMessagePayload;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  char v46;

  v23 = a2;
  v31 = a1;
  v45 = 0;
  v27 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = (*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t)v12 - v25;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchRSVPQueueMessagePayload.CodingKeys>);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v35 = (char *)v12 - v30;
  RSVPQueueMessagePayload = type metadata accessor for FetchRSVPQueueMessagePayload();
  v33 = (*(_QWORD *)(*(_QWORD *)(RSVPQueueMessagePayload - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t)v12 - v33;
  v46 = 0;
  v45 = v2;
  v37 = v2[3];
  v38 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v37);
  lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
  v3 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v39 = v3;
  v40 = v3;
  if (v3)
  {
    v15 = v40;
  }
  else
  {
    v20 = &v44;
    v44 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v46 = 1;
      outlined init with take of GPKGroupID(v26, v34);
      v17 = &v41;
      v41 = v16;
      lazy protocol witness table accessor for type Data and conformance Data();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v28;
        v7 = v35;
        v8 = v29;
        v9 = v43;
        v10 = (_QWORD *)(v34 + *(int *)(RSVPQueueMessagePayload + 20));
        v46 = 3;
        *v10 = v42;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of FetchRSVPQueueMessagePayload(v34, v23);
        __swift_destroy_boxed_opaque_existential_1(v31);
        return outlined destroy of FetchRSVPQueueMessagePayload(v34);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
      v15 = v13;
    }
  }
  v12[1] = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v31);
  if ((v46 & 1) != 0)
    return outlined destroy of GPKGroupID(v34);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchRSVPQueueMessagePayload@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FetchRSVPQueueMessagePayload.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchRSVPQueueMessagePayload(uint64_t a1)
{
  return FetchRSVPQueueMessagePayload.encode(to:)(a1);
}

uint64_t EncryptDataMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t EncryptDataMessage.message.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for EncryptDataMessage() + 20);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t type metadata accessor for EncryptDataMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for EncryptDataMessage;
  if (!type metadata singleton initialization cache for EncryptDataMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t EncryptDataMessage.associatedData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for EncryptDataMessage() + 24);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t EncryptDataMessage.role.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EncryptDataMessage();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28)) & 1;
  return result;
}

uint64_t EncryptDataMessage.entitlementID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for EncryptDataMessage() + 32);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t EncryptDataMessage.keyDiversifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for EncryptDataMessage() + 36);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t EncryptDataMessage.init(groupID:message:associatedData:role:entitlementID:keyDiversifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  char v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;

  v49 = a9;
  v58 = a1;
  v56 = a2;
  v57 = a3;
  v54 = a4;
  v55 = a5;
  v44 = a6;
  v52 = a7;
  v53 = a8;
  v51 = a10;
  v50 = a11;
  v70 = 0;
  v69 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v42 = 0;
  v43 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v45 = (uint64_t)&v42 - v43;
  v48 = (int *)type metadata accessor for EncryptDataMessage();
  v11 = MEMORY[0x24BDAC7A8](v58);
  v59 = (uint64_t)&v42 - v12;
  v70 = (char *)&v42 - v12;
  v69 = v11;
  v67 = v56;
  v68 = v13;
  v65 = v14;
  v66 = v15;
  v47 = *v16;
  v46 = 1;
  v64 = v47 & 1;
  v62 = v17;
  v63 = v18;
  v60 = v51;
  v61 = v19;
  outlined init with copy of GPKGroupID(v11, v20);
  outlined init with take of GPKGroupID(v45, v59);
  outlined copy of Data._Representation(v56, v57);
  v21 = v54;
  v22 = v55;
  v23 = v57;
  v24 = (_QWORD *)(v59 + v48[5]);
  *v24 = v56;
  v24[1] = v23;
  outlined copy of Data._Representation(v21, v22);
  v25 = v46;
  v26 = v47;
  v27 = v48;
  v28 = v52;
  v29 = v53;
  v30 = v55;
  v31 = v59;
  v32 = (_QWORD *)(v59 + v48[6]);
  *v32 = v54;
  v32[1] = v30;
  *(_BYTE *)(v31 + v27[7]) = v26 & v25;
  outlined copy of Data._Representation(v28, v29);
  v33 = v51;
  v34 = v50;
  v35 = v53;
  v36 = (_QWORD *)(v59 + v48[8]);
  *v36 = v52;
  v36[1] = v35;
  outlined copy of Data._Representation(v33, v34);
  v37 = v49;
  v38 = v50;
  v39 = v59;
  v40 = (_QWORD *)(v59 + v48[9]);
  *v40 = v51;
  v40[1] = v38;
  outlined init with copy of EncryptDataMessage(v39, v37);
  outlined consume of Data._Representation(v51, v50);
  outlined consume of Data._Representation(v52, v53);
  outlined consume of Data._Representation(v54, v55);
  outlined consume of Data._Representation(v56, v57);
  outlined destroy of GPKGroupID(v58);
  return outlined destroy of EncryptDataMessage(v59);
}

uint64_t outlined init with copy of EncryptDataMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v17 = (int *)type metadata accessor for EncryptDataMessage();
  v8 = v17[5];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v3 = (uint64_t *)(a2 + v8);
  *v3 = v9;
  v3[1] = v10;
  v11 = v17[6];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  outlined copy of Data._Representation(v12, v13);
  v4 = (uint64_t *)(a2 + v11);
  *v4 = v12;
  v4[1] = v13;
  *(_BYTE *)(a2 + v17[7]) = *(_BYTE *)(a1 + v17[7]) & 1;
  v14 = v17[8];
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  v5 = (uint64_t *)(a2 + v14);
  *v5 = v15;
  v5[1] = v16;
  v19 = v17[9];
  v20 = *(_QWORD *)(a1 + v19);
  v21 = *(_QWORD *)(a1 + v19 + 8);
  outlined copy of Data._Representation(v20, v21);
  result = a2;
  v7 = (uint64_t *)(a2 + v19);
  *v7 = v20;
  v7[1] = v21;
  return result;
}

uint64_t outlined destroy of EncryptDataMessage(uint64_t a1)
{
  uint64_t v1;
  int *v3;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = (int *)type metadata accessor for EncryptDataMessage();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[5]), *(_QWORD *)(a1 + v3[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[6]), *(_QWORD *)(a1 + v3[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[8]), *(_QWORD *)(a1 + v3[8] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[9]), *(_QWORD *)(a1 + v3[9] + 8));
  return a1;
}

void static EncryptDataMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D247540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D2475A4
                                                                                       + dword_23D24762C[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D2475B4()
{
  uint64_t v1;

  return v1 == 0;
}

void EncryptDataMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D247694()
{
  return Hasher.combine<A>(_:)();
}

uint64_t EncryptDataMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  unsigned __int8 v8;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("message", 7uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 1;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("associatedData", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 2;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("role", 4uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 3;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("entitlementID", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 4;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyDiversifier", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 5;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 6;
}

uint64_t EncryptDataMessage.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t EncryptDataMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage.CodingKeys, &type metadata for EncryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage.CodingKeys, &type metadata for EncryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage.CodingKeys, &type metadata for EncryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage.CodingKeys, &type metadata for EncryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage.CodingKeys, &type metadata for EncryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t EncryptDataMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void EncryptDataMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D247C4C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EncryptDataMessage.CodingKeys(char *a1)
{
  char v1;

  static EncryptDataMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance EncryptDataMessage.CodingKeys()
{
  return EncryptDataMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance EncryptDataMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  EncryptDataMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EncryptDataMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance EncryptDataMessage.CodingKeys()
{
  char *v0;

  EncryptDataMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EncryptDataMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EncryptDataMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance EncryptDataMessage.CodingKeys()
{
  return EncryptDataMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance EncryptDataMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EncryptDataMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EncryptDataMessage.CodingKeys()
{
  lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EncryptDataMessage.CodingKeys()
{
  lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t EncryptDataMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD v62[2];
  char v63;
  _QWORD v64[2];
  char v65;
  _BYTE v66[2];
  _QWORD v67[2];
  char v68;
  _QWORD v69[2];
  char v70;
  uint64_t v71;
  _QWORD *v72;

  v47 = a1;
  v72 = 0;
  v71 = 0;
  v56 = type metadata accessor for GPKGroupID();
  v46 = (*(_QWORD *)(*(_QWORD *)(v56 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v58 = (uint64_t)v16 - v46;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EncryptDataMessage.CodingKeys>);
  v48 = *(_QWORD *)(v55 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v47);
  v52 = (char *)v16 - v49;
  v72 = v2;
  v71 = v1;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v53, v58);
  v54 = &v70;
  v70 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v57;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v59 = v3;
  v60 = v3;
  if (v3)
  {
    v20 = v60;
    outlined destroy of GPKGroupID(v58);
    result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v55);
    v21 = v20;
  }
  else
  {
    outlined destroy of GPKGroupID(v58);
    v38 = (int *)type metadata accessor for EncryptDataMessage();
    v4 = (uint64_t *)(v53 + v38[5]);
    v39 = *v4;
    v40 = v4[1];
    outlined copy of Data._Representation(v39, v40);
    v42 = v69;
    v69[0] = v39;
    v69[1] = v40;
    v41 = &v68;
    v68 = 1;
    v5 = lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v59;
    v43 = v5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v44 = v6;
    v45 = v6;
    if (v6)
    {
      v19 = v45;
      outlined destroy of Data((uint64_t)v69);
      result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v55);
      v21 = v19;
    }
    else
    {
      outlined destroy of Data((uint64_t)v69);
      v7 = (uint64_t *)(v53 + v38[6]);
      v34 = *v7;
      v35 = v7[1];
      outlined copy of Data._Representation(v34, v35);
      v8 = v44;
      v67[0] = v34;
      v67[1] = v35;
      v66[1] = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v36 = v8;
      v37 = v8;
      if (v8)
      {
        v18 = v37;
        outlined destroy of Data((uint64_t)v67);
        result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v55);
        v21 = v18;
      }
      else
      {
        outlined destroy of Data((uint64_t)v67);
        v9 = *(_BYTE *)(v53 + v38[7]) & 1;
        v31 = v66;
        v66[0] = v9;
        v30 = &v65;
        v65 = 3;
        lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
        v10 = v36;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v32 = v10;
        v33 = v10;
        if (v10)
        {
          v17 = v33;
          result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v55);
          v21 = v17;
        }
        else
        {
          v11 = (uint64_t *)(v53 + v38[8]);
          v26 = *v11;
          v27 = v11[1];
          outlined copy of Data._Representation(v26, v27);
          v12 = v32;
          v64[0] = v26;
          v64[1] = v27;
          v63 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v28 = v12;
          v29 = v12;
          if (v12)
          {
            v16[2] = v29;
            outlined destroy of Data((uint64_t)v64);
            return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v55);
          }
          else
          {
            outlined destroy of Data((uint64_t)v64);
            v13 = (uint64_t *)(v53 + v38[9]);
            v22 = *v13;
            v23 = v13[1];
            outlined copy of Data._Representation(v22, v23);
            v14 = v28;
            v62[0] = v22;
            v62[1] = v23;
            v61 = 5;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v24 = v14;
            v25 = v14;
            if (v14)
              v16[1] = v25;
            outlined destroy of Data((uint64_t)v62);
            return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v55);
          }
        }
      }
    }
  }
  return result;
}

void EncryptDataMessage.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[3];
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _QWORD *v72;
  char v73;

  v41 = a2;
  v49 = a1;
  v72 = 0;
  v45 = 0;
  v42 = type metadata accessor for GPKGroupID();
  v43 = (*(_QWORD *)(*(_QWORD *)(v42 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (uint64_t)v19 - v43;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<EncryptDataMessage.CodingKeys>);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v53 = (char *)v19 - v48;
  v50 = (int *)type metadata accessor for EncryptDataMessage();
  v51 = (*(_QWORD *)(*((_QWORD *)v50 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v49);
  v52 = (uint64_t)v19 - v51;
  v73 = 0;
  v72 = v2;
  v55 = v2[3];
  v56 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v55);
  lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
  v3 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v57 = v3;
  v58 = v3;
  if (v3)
  {
    v23 = v58;
  }
  else
  {
    v38 = &v71;
    v71 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v39 = v4;
    v40 = v4;
    if (v4)
    {
      v22 = v40;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v46);
      v23 = v22;
    }
    else
    {
      v33 = 1;
      v73 = 1;
      outlined init with take of GPKGroupID(v44, v52);
      v34 = &v68;
      v68 = v33;
      v5 = lazy protocol witness table accessor for type Data and conformance Data();
      v6 = v39;
      v35 = v5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v36 = v6;
      v37 = v6;
      if (v6)
      {
        v21 = v37;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v46);
        v23 = v21;
      }
      else
      {
        v7 = v70;
        v8 = (_QWORD *)(v52 + v50[5]);
        v73 = 3;
        *v8 = v69;
        v8[1] = v7;
        v65[2] = 2;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v31 = 0;
        v32 = 0;
        v9 = v67;
        v10 = (_QWORD *)(v52 + v50[6]);
        v73 = 7;
        *v10 = v66;
        v10[1] = v9;
        v28 = v65;
        v65[0] = 3;
        lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
        v11 = v31;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v29 = v11;
        v30 = v11;
        if (!v11)
        {
          *(_BYTE *)(v52 + v50[7]) = v65[1] & 1;
          v62 = 4;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v26 = 0;
          v27 = 0;
          v12 = v64;
          v13 = (_QWORD *)(v52 + v50[8]);
          v73 = 23;
          *v13 = v63;
          v13[1] = v12;
          v59 = 5;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v24 = 0;
          v25 = 0;
          v14 = v46;
          v15 = v53;
          v16 = v47;
          v17 = v61;
          v18 = (_QWORD *)(v52 + v50[9]);
          v73 = 55;
          *v18 = v60;
          v18[1] = v17;
          (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v14);
          outlined init with copy of EncryptDataMessage(v52, v41);
          __swift_destroy_boxed_opaque_existential_1(v49);
          outlined destroy of EncryptDataMessage(v52);
          return;
        }
        v20 = v30;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v46);
        v23 = v20;
      }
    }
  }
  v19[0] = v23;
  __swift_destroy_boxed_opaque_existential_1(v49);
  if ((v73 & 1) != 0)
    outlined destroy of GPKGroupID(v52);
  if ((v73 & 2) != 0)
    outlined destroy of Data(v52 + v50[5]);
  if ((v73 & 4) != 0)
    outlined destroy of Data(v52 + v50[6]);
  if ((v73 & 0x10) != 0)
    outlined destroy of Data(v52 + v50[8]);
}

void protocol witness for Decodable.init(from:) in conformance EncryptDataMessage(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  EncryptDataMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EncryptDataMessage(uint64_t a1)
{
  return EncryptDataMessage.encode(to:)(a1);
}

uint64_t DecryptDataMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t DecryptDataMessage.cipherText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for DecryptDataMessage() + 20);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t type metadata accessor for DecryptDataMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for DecryptDataMessage;
  if (!type metadata singleton initialization cache for DecryptDataMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t DecryptDataMessage.associatedData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for DecryptDataMessage() + 24);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t DecryptDataMessage.entitlementID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for DecryptDataMessage() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t DecryptDataMessage.keyDiversifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for DecryptDataMessage() + 32);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t DecryptDataMessage.init(groupID:cipherText:associatedData:entitlementID:keyDiversifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;

  v41 = a9;
  v50 = a1;
  v48 = a2;
  v49 = a3;
  v46 = a4;
  v47 = a5;
  v44 = a6;
  v45 = a7;
  v43 = a8;
  v42 = a10;
  v61 = 0;
  v60 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v36 = 0;
  v37 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v39 = (uint64_t)&v36 - v37;
  v40 = (int *)type metadata accessor for DecryptDataMessage();
  v38 = (*(_QWORD *)(*((_QWORD *)v40 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v50);
  v51 = (uint64_t)&v36 - v38;
  v61 = (char *)&v36 - v38;
  v60 = v10;
  v58 = v48;
  v59 = v11;
  v56 = v12;
  v57 = v13;
  v54 = v14;
  v55 = v15;
  v52 = v16;
  v53 = v17;
  outlined init with copy of GPKGroupID(v10, v18);
  outlined init with take of GPKGroupID(v39, v51);
  outlined copy of Data._Representation(v48, v49);
  v19 = v46;
  v20 = v47;
  v21 = v49;
  v22 = (_QWORD *)(v51 + v40[5]);
  *v22 = v48;
  v22[1] = v21;
  outlined copy of Data._Representation(v19, v20);
  v23 = v44;
  v24 = v45;
  v25 = v47;
  v26 = (_QWORD *)(v51 + v40[6]);
  *v26 = v46;
  v26[1] = v25;
  outlined copy of Data._Representation(v23, v24);
  v27 = v43;
  v28 = v42;
  v29 = v45;
  v30 = (_QWORD *)(v51 + v40[7]);
  *v30 = v44;
  v30[1] = v29;
  outlined copy of Data._Representation(v27, v28);
  v31 = v41;
  v32 = v42;
  v33 = v51;
  v34 = (_QWORD *)(v51 + v40[8]);
  *v34 = v43;
  v34[1] = v32;
  outlined init with copy of DecryptDataMessage(v33, v31);
  outlined consume of Data._Representation(v43, v42);
  outlined consume of Data._Representation(v44, v45);
  outlined consume of Data._Representation(v46, v47);
  outlined consume of Data._Representation(v48, v49);
  outlined destroy of GPKGroupID(v50);
  return outlined destroy of DecryptDataMessage(v51);
}

uint64_t outlined init with copy of DecryptDataMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v17 = (int *)type metadata accessor for DecryptDataMessage();
  v8 = v17[5];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v3 = (uint64_t *)(a2 + v8);
  *v3 = v9;
  v3[1] = v10;
  v11 = v17[6];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  outlined copy of Data._Representation(v12, v13);
  v4 = (uint64_t *)(a2 + v11);
  *v4 = v12;
  v4[1] = v13;
  v14 = v17[7];
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  v5 = (uint64_t *)(a2 + v14);
  *v5 = v15;
  v5[1] = v16;
  v19 = v17[8];
  v20 = *(_QWORD *)(a1 + v19);
  v21 = *(_QWORD *)(a1 + v19 + 8);
  outlined copy of Data._Representation(v20, v21);
  result = a2;
  v7 = (uint64_t *)(a2 + v19);
  *v7 = v20;
  v7[1] = v21;
  return result;
}

uint64_t outlined destroy of DecryptDataMessage(uint64_t a1)
{
  uint64_t v1;
  int *v3;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = (int *)type metadata accessor for DecryptDataMessage();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[5]), *(_QWORD *)(a1 + v3[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[6]), *(_QWORD *)(a1 + v3[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[7]), *(_QWORD *)(a1 + v3[7] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[8]), *(_QWORD *)(a1 + v3[8] + 8));
  return a1;
}

void static DecryptDataMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D2493D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D249428
                                                                                       + *((int *)qword_23D2494A0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D249438()
{
  uint64_t v1;

  return v1 == 0;
}

void DecryptDataMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D249504()
{
  return Hasher.combine<A>(_:)();
}

uint64_t DecryptDataMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cipherText", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("associatedData", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("entitlementID", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyDiversifier", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t DecryptDataMessage.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t DecryptDataMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage.CodingKeys, &type metadata for DecryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage.CodingKeys, &type metadata for DecryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage.CodingKeys, &type metadata for DecryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage.CodingKeys, &type metadata for DecryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage.CodingKeys, &type metadata for DecryptDataMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t DecryptDataMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void DecryptDataMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D249A14()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DecryptDataMessage.CodingKeys(char *a1)
{
  char v1;

  static DecryptDataMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DecryptDataMessage.CodingKeys()
{
  return DecryptDataMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance DecryptDataMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  DecryptDataMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DecryptDataMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance DecryptDataMessage.CodingKeys()
{
  char *v0;

  DecryptDataMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DecryptDataMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DecryptDataMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance DecryptDataMessage.CodingKeys()
{
  return DecryptDataMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance DecryptDataMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DecryptDataMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DecryptDataMessage.CodingKeys()
{
  lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DecryptDataMessage.CodingKeys()
{
  lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DecryptDataMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD v55[2];
  char v56;
  _QWORD v57[2];
  char v58;
  _QWORD v59[2];
  char v60;
  _QWORD v61[2];
  char v62;
  uint64_t v63;
  _QWORD *v64;

  v40 = a1;
  v64 = 0;
  v63 = 0;
  v49 = type metadata accessor for GPKGroupID();
  v39 = (*(_QWORD *)(*(_QWORD *)(v49 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v51 = (uint64_t)v14 - v39;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DecryptDataMessage.CodingKeys>);
  v41 = *(_QWORD *)(v48 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v40);
  v45 = (char *)v14 - v42;
  v64 = v2;
  v63 = v1;
  v43 = v2[3];
  v44 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v43);
  lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v46, v51);
  v47 = &v62;
  v62 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v50;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v17 = v53;
    outlined destroy of GPKGroupID(v51);
    result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v48);
    v18 = v17;
  }
  else
  {
    outlined destroy of GPKGroupID(v51);
    v31 = (int *)type metadata accessor for DecryptDataMessage();
    v4 = (uint64_t *)(v46 + v31[5]);
    v32 = *v4;
    v33 = v4[1];
    outlined copy of Data._Representation(v32, v33);
    v35 = v61;
    v61[0] = v32;
    v61[1] = v33;
    v34 = &v60;
    v60 = 1;
    v5 = lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v52;
    v36 = v5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v37 = v6;
    v38 = v6;
    if (v6)
    {
      v16 = v38;
      outlined destroy of Data((uint64_t)v61);
      result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v48);
      v18 = v16;
    }
    else
    {
      outlined destroy of Data((uint64_t)v61);
      v7 = (uint64_t *)(v46 + v31[6]);
      v27 = *v7;
      v28 = v7[1];
      outlined copy of Data._Representation(v27, v28);
      v8 = v37;
      v59[0] = v27;
      v59[1] = v28;
      v58 = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v29 = v8;
      v30 = v8;
      if (v8)
      {
        v15 = v30;
        outlined destroy of Data((uint64_t)v59);
        result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v48);
        v18 = v15;
      }
      else
      {
        outlined destroy of Data((uint64_t)v59);
        v9 = (uint64_t *)(v46 + v31[7]);
        v23 = *v9;
        v24 = v9[1];
        outlined copy of Data._Representation(v23, v24);
        v10 = v29;
        v57[0] = v23;
        v57[1] = v24;
        v56 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v25 = v10;
        v26 = v10;
        if (v10)
        {
          v14[1] = v26;
          outlined destroy of Data((uint64_t)v57);
          return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v48);
        }
        else
        {
          outlined destroy of Data((uint64_t)v57);
          v11 = (uint64_t *)(v46 + v31[8]);
          v19 = *v11;
          v20 = v11[1];
          outlined copy of Data._Representation(v19, v20);
          v12 = v25;
          v55[0] = v19;
          v55[1] = v20;
          v54 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v21 = v12;
          v22 = v12;
          if (v12)
            v14[0] = v22;
          outlined destroy of Data((uint64_t)v55);
          return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v48);
        }
      }
    }
  }
  return result;
}

void DecryptDataMessage.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  char v68;

  v36 = a2;
  v44 = a1;
  v67 = 0;
  v40 = 0;
  v37 = type metadata accessor for GPKGroupID();
  v38 = (*(_QWORD *)(*(_QWORD *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (uint64_t)v18 - v38;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DecryptDataMessage.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)v18 - v43;
  v45 = (int *)type metadata accessor for DecryptDataMessage();
  v46 = (*(_QWORD *)(*((_QWORD *)v45 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v44);
  v47 = (uint64_t)v18 - v46;
  v68 = 0;
  v67 = v2;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
  v3 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v21 = v53;
  }
  else
  {
    v33 = &v66;
    v66 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34 = v4;
    v35 = v4;
    if (v4)
    {
      v20 = v35;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
      v21 = v20;
    }
    else
    {
      v28 = 1;
      v68 = 1;
      outlined init with take of GPKGroupID(v39, v47);
      v29 = &v63;
      v63 = v28;
      v5 = lazy protocol witness table accessor for type Data and conformance Data();
      v6 = v34;
      v30 = v5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v31 = v6;
      v32 = v6;
      if (!v6)
      {
        v7 = v65;
        v8 = (_QWORD *)(v47 + v45[5]);
        v68 = 3;
        *v8 = v64;
        v8[1] = v7;
        v60 = 2;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v26 = 0;
        v27 = 0;
        v9 = v62;
        v10 = (_QWORD *)(v47 + v45[6]);
        v68 = 7;
        *v10 = v61;
        v10[1] = v9;
        v57 = 3;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v24 = 0;
        v25 = 0;
        v11 = v59;
        v12 = (_QWORD *)(v47 + v45[7]);
        v68 = 15;
        *v12 = v58;
        v12[1] = v11;
        v54 = 4;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v22 = 0;
        v23 = 0;
        v13 = v41;
        v14 = v48;
        v15 = v42;
        v16 = v56;
        v17 = (_QWORD *)(v47 + v45[8]);
        v68 = 31;
        *v17 = v55;
        v17[1] = v16;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v13);
        outlined init with copy of DecryptDataMessage(v47, v36);
        __swift_destroy_boxed_opaque_existential_1(v44);
        outlined destroy of DecryptDataMessage(v47);
        return;
      }
      v19 = v32;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
      v21 = v19;
    }
  }
  v18[0] = v21;
  __swift_destroy_boxed_opaque_existential_1(v44);
  if ((v68 & 1) != 0)
    outlined destroy of GPKGroupID(v47);
  if ((v68 & 2) != 0)
    outlined destroy of Data(v47 + v45[5]);
  if ((v68 & 4) != 0)
    outlined destroy of Data(v47 + v45[6]);
  if ((v68 & 8) != 0)
    outlined destroy of Data(v47 + v45[7]);
}

void protocol witness for Decodable.init(from:) in conformance DecryptDataMessage(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  DecryptDataMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DecryptDataMessage(uint64_t a1)
{
  return DecryptDataMessage.encode(to:)(a1);
}

uint64_t DeleteInvitation.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t DeleteInvitation.init(invitationID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v10 = a2;
  v13 = a1;
  v16 = 0;
  v15 = 0;
  v6[1] = 0;
  v12 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v9 = (char *)v6 - v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DeleteInvitation() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v14 = (uint64_t)v6 - v8;
  v16 = (char *)v6 - v8;
  v15 = v3;
  (*(void (**)(uint64_t))(v4 + 16))(v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v9, v12);
  outlined init with copy of DeleteInvitation(v14, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  return outlined destroy of DeleteInvitation(v14);
}

uint64_t type metadata accessor for DeleteInvitation()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for DeleteInvitation;
  if (!type metadata singleton initialization cache for DeleteInvitation)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of DeleteInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of DeleteInvitation(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t static DeleteInvitation.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t DeleteInvitation.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL DeleteInvitation.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("invitationID", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t DeleteInvitation.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t DeleteInvitation.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation.CodingKeys, &type metadata for DeleteInvitation.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation.CodingKeys, &type metadata for DeleteInvitation.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation.CodingKeys, &type metadata for DeleteInvitation.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation.CodingKeys, &type metadata for DeleteInvitation.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation.CodingKeys, &type metadata for DeleteInvitation.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t DeleteInvitation.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t DeleteInvitation.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("invitationID", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DeleteInvitation.CodingKeys()
{
  return static DeleteInvitation.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DeleteInvitation.CodingKeys()
{
  return DeleteInvitation.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DeleteInvitation.CodingKeys()
{
  return DeleteInvitation.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DeleteInvitation.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DeleteInvitation.CodingKeys()
{
  return DeleteInvitation.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance DeleteInvitation.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = DeleteInvitation.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance DeleteInvitation.CodingKeys()
{
  return DeleteInvitation.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance DeleteInvitation.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DeleteInvitation.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DeleteInvitation.CodingKeys()
{
  lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DeleteInvitation.CodingKeys()
{
  lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DeleteInvitation.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v22 = 0;
  v21 = 0;
  v16 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v16 - 8);
  v6 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v5 - v6;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DeleteInvitation.CodingKeys>);
  v8 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v5 - v9;
  v22 = v2;
  v21 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v14, v16);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v3 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19 = v3;
  v20 = v3;
  if (v3)
    v5[1] = v20;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v15);
}

uint64_t DeleteInvitation.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v11 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v6 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DeleteInvitation.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)v6 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DeleteInvitation() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)v6 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v8 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v15, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
      outlined init with copy of DeleteInvitation(v22, v11);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of DeleteInvitation(v22);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DeleteInvitation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DeleteInvitation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DeleteInvitation(uint64_t a1)
{
  return DeleteInvitation.encode(to:)(a1);
}

uint64_t InitCKSchemasMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t InitCKSchemasMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t InitCKSchemasMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitCKSchemasMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitCKSchemasMessage.CodingKeys()
{
  return InitCKSchemasMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitCKSchemasMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitCKSchemasMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitCKSchemasMessage.CodingKeys()
{
  return InitCKSchemasMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitCKSchemasMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitCKSchemasMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitCKSchemasMessage.CodingKeys()
{
  lazy protocol witness table accessor for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InitCKSchemasMessage.CodingKeys, &type metadata for InitCKSchemasMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InitCKSchemasMessage.CodingKeys, &type metadata for InitCKSchemasMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InitCKSchemasMessage.CodingKeys, &type metadata for InitCKSchemasMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitCKSchemasMessage.CodingKeys()
{
  lazy protocol witness table accessor for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitCKSchemasMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitCKSchemasMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t InitCKSchemasMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitCKSchemasMessage(uint64_t a1)
{
  return InitCKSchemasMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitCKSchemasMessage(uint64_t a1)
{
  return InitCKSchemasMessage.encode(to:)(a1);
}

uint64_t AccountNotificationMessage.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t AccountNotificationMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t AccountNotificationMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t AccountNotificationMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccountNotificationMessage.CodingKeys()
{
  return AccountNotificationMessage.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccountNotificationMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AccountNotificationMessage.CodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AccountNotificationMessage.CodingKeys()
{
  return AccountNotificationMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AccountNotificationMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AccountNotificationMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccountNotificationMessage.CodingKeys()
{
  lazy protocol witness table accessor for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for AccountNotificationMessage.CodingKeys, &type metadata for AccountNotificationMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for AccountNotificationMessage.CodingKeys, &type metadata for AccountNotificationMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for AccountNotificationMessage.CodingKeys, &type metadata for AccountNotificationMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccountNotificationMessage.CodingKeys()
{
  lazy protocol witness table accessor for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccountNotificationMessage.encode(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a1;
  v10 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AccountNotificationMessage.CodingKeys>);
  v7 = *(_QWORD *)(v9 - 8);
  v4 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v2 - v4;
  v10 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v5 = v10[3];
  v6 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v5);
  lazy protocol witness table accessor for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t AccountNotificationMessage.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccountNotificationMessage(uint64_t a1)
{
  return AccountNotificationMessage.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccountNotificationMessage(uint64_t a1)
{
  return AccountNotificationMessage.encode(to:)(a1);
}

uint64_t FetchMemberKeyXPCMessage.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKMemberKeyRequest(v1, a1);
}

uint64_t static FetchMemberKeyXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t FetchMemberKeyXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL FetchMemberKeyXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t FetchMemberKeyXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchMemberKeyXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage.CodingKeys, &type metadata for FetchMemberKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage.CodingKeys, &type metadata for FetchMemberKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage.CodingKeys, &type metadata for FetchMemberKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage.CodingKeys, &type metadata for FetchMemberKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage.CodingKeys, &type metadata for FetchMemberKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchMemberKeyXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchMemberKeyXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  return static FetchMemberKeyXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  return FetchMemberKeyXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  return FetchMemberKeyXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchMemberKeyXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  return FetchMemberKeyXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance FetchMemberKeyXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = FetchMemberKeyXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  return FetchMemberKeyXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchMemberKeyXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchMemberKeyXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchMemberKeyXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchMemberKeyXPCMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKMemberKeyRequest();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchMemberKeyXPCMessage.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKMemberKeyRequest(v13, v17);
  lazy protocol witness table accessor for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKMemberKeyRequest(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

unint64_t lazy protocol witness table accessor for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest)
  {
    v0 = type metadata accessor for GPKMemberKeyRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest;
  if (!lazy protocol witness table cache variable for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest)
  {
    v0 = type metadata accessor for GPKMemberKeyRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKeyRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest);
    return v1;
  }
  return v3;
}

uint64_t FetchMemberKeyXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v11 = a2;
  v19 = a1;
  v28 = 0;
  v15 = 0;
  v12 = type metadata accessor for GPKMemberKeyRequest();
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t)&v6 - v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchMemberKeyXPCMessage.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)&v6 - v18;
  v20 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for FetchMemberKeyXPCMessage() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v6 - v20;
  v28 = v2;
  v24 = v2[3];
  v25 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v24);
  lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
  v3 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v3;
  v27 = v3;
  if (v3)
  {
    v8 = v27;
  }
  else
  {
    lazy protocol witness table accessor for type GPKMemberKeyRequest and conformance GPKMemberKeyRequest();
    v4 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      outlined init with take of GPKMemberKeyRequest(v14, v21);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
      outlined init with copy of FetchMemberKeyXPCMessage(v21, v11);
      __swift_destroy_boxed_opaque_existential_1(v19);
      return outlined destroy of FetchMemberKeyXPCMessage(v21);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    v8 = v7;
  }
  v6 = v8;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t type metadata accessor for FetchMemberKeyXPCMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for FetchMemberKeyXPCMessage;
  if (!type metadata singleton initialization cache for FetchMemberKeyXPCMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with take of GPKMemberKeyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v3 = type metadata accessor for GPKMemberKeyRequest();
  *(_OWORD *)(a2 + *(int *)(v3 + 20)) = *(_OWORD *)(a1 + *(int *)(v3 + 20));
  *(_OWORD *)(a2 + *(int *)(v3 + 24)) = *(_OWORD *)(a1 + *(int *)(v3 + 24));
  return a2;
}

uint64_t outlined init with copy of FetchMemberKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v12 = type metadata accessor for GPKMemberKeyRequest();
  v3 = (_QWORD *)(a1 + *(int *)(v12 + 20));
  v10 = (_QWORD *)(a2 + *(int *)(v12 + 20));
  *v10 = *v3;
  v11 = v3[1];
  swift_bridgeObjectRetain();
  v10[1] = v11;
  v13 = *(int *)(v12 + 24);
  if ((*(_QWORD *)(a1 + v13 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v13) = *(_OWORD *)(a1 + v13);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + v13);
    v7 = *(_QWORD *)(a1 + v13 + 8);
    outlined copy of Data._Representation(v6, v7);
    v4 = (uint64_t *)(a2 + v13);
    *v4 = v6;
    v4[1] = v7;
  }
  return a2;
}

uint64_t outlined destroy of FetchMemberKeyXPCMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKMemberKeyRequest();
  swift_bridgeObjectRelease();
  v5 = *(int *)(v3 + 24);
  if ((*(_QWORD *)(a1 + v5 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v5), *(_QWORD *)(a1 + v5 + 8));
  return a1;
}

uint64_t FetchMemberKeyXPCMessage.init(request:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of GPKMemberKeyRequest(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchMemberKeyXPCMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FetchMemberKeyXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchMemberKeyXPCMessage(uint64_t a1)
{
  return FetchMemberKeyXPCMessage.encode(to:)(a1);
}

uint64_t FetchGroupKeyXPCMessage.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupKeyRequest(v1, a1);
}

uint64_t static FetchGroupKeyXPCMessage.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t FetchGroupKeyXPCMessage.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL FetchGroupKeyXPCMessage.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t FetchGroupKeyXPCMessage.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchGroupKeyXPCMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage.CodingKeys, &type metadata for FetchGroupKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage.CodingKeys, &type metadata for FetchGroupKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage.CodingKeys, &type metadata for FetchGroupKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage.CodingKeys, &type metadata for FetchGroupKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage.CodingKeys, &type metadata for FetchGroupKeyXPCMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchGroupKeyXPCMessage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchGroupKeyXPCMessage.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  return static FetchGroupKeyXPCMessage.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  return FetchGroupKeyXPCMessage.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  return FetchGroupKeyXPCMessage.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchGroupKeyXPCMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  return FetchGroupKeyXPCMessage.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance FetchGroupKeyXPCMessage.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = FetchGroupKeyXPCMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  return FetchGroupKeyXPCMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchGroupKeyXPCMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchGroupKeyXPCMessage.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchGroupKeyXPCMessage.CodingKeys()
{
  lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchGroupKeyXPCMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v7 = a1;
  v21 = 0;
  v20 = 0;
  v15 = type metadata accessor for GPKGroupKeyRequest();
  v6 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t)&v5 - v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchGroupKeyXPCMessage.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v5 - v9;
  v21 = v2;
  v20 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupKeyRequest(v13, v17);
  lazy protocol witness table accessor for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest();
  v3 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
    v5 = v19;
  outlined destroy of GPKGroupKeyRequest(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

unint64_t lazy protocol witness table accessor for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest)
  {
    v0 = type metadata accessor for GPKGroupKeyRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest;
  if (!lazy protocol witness table cache variable for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest)
  {
    v0 = type metadata accessor for GPKGroupKeyRequest();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKeyRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest);
    return v1;
  }
  return v3;
}

uint64_t FetchGroupKeyXPCMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v12 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v13 = type metadata accessor for GPKGroupKeyRequest();
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t)&v7 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchGroupKeyXPCMessage.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)&v7 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for FetchGroupKeyXPCMessage() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)&v7 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v9 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupKeyRequest and conformance GPKGroupKeyRequest();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v4;
    v11 = v4;
    if (!v4)
    {
      v5 = outlined init with take of GPKGroupKeyRequest(v15, v22);
      (*(void (**)(char *, uint64_t, __n128))(v18 + 8))(v23, v17, v5);
      outlined init with copy of FetchGroupKeyXPCMessage(v22, v12);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of FetchGroupKeyXPCMessage(v22);
    }
    v8 = v11;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v9 = v8;
  }
  v7 = v9;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for FetchGroupKeyXPCMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for FetchGroupKeyXPCMessage;
  if (!type metadata singleton initialization cache for FetchGroupKeyXPCMessage)
    return swift_getSingletonMetadata();
  return v1;
}

__n128 outlined init with take of GPKGroupKeyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v3 = type metadata accessor for GPKGroupKeyRequest();
  result = *(__n128 *)(a1 + *(int *)(v3 + 20));
  *(__n128 *)(a2 + *(int *)(v3 + 20)) = result;
  *(_BYTE *)(a2 + *(int *)(v3 + 24)) = *(_BYTE *)(a1 + *(int *)(v3 + 24)) & 1;
  return result;
}

uint64_t outlined init with copy of FetchGroupKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v8 = type metadata accessor for GPKGroupKeyRequest();
  v3 = (_QWORD *)(a1 + *(int *)(v8 + 20));
  v6 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v6 = *v3;
  v7 = v3[1];
  swift_bridgeObjectRetain();
  result = a2;
  v6[1] = v7;
  *(_BYTE *)(a2 + *(int *)(v8 + 24)) = *(_BYTE *)(a1 + *(int *)(v8 + 24)) & 1;
  return result;
}

uint64_t outlined destroy of FetchGroupKeyXPCMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for GPKGroupKeyRequest();
  swift_bridgeObjectRelease();
  return a1;
}

double FetchGroupKeyXPCMessage.init(request:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = outlined init with take of GPKGroupKeyRequest(a1, a2).n128_u64[0];
  return result;
}

unint64_t base witness table accessor for Decodable in PingMessage()
{
  return lazy protocol witness table accessor for type PingMessage and conformance PingMessage();
}

unint64_t lazy protocol witness table accessor for type PingMessage and conformance PingMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage and conformance PingMessage;
  if (!lazy protocol witness table cache variable for type PingMessage and conformance PingMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage, &type metadata for PingMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage and conformance PingMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage and conformance PingMessage;
  if (!lazy protocol witness table cache variable for type PingMessage and conformance PingMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage, &type metadata for PingMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage and conformance PingMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PingMessage and conformance PingMessage;
  if (!lazy protocol witness table cache variable for type PingMessage and conformance PingMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for PingMessage, &type metadata for PingMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage and conformance PingMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in PingMessage()
{
  return lazy protocol witness table accessor for type PingMessage and conformance PingMessage();
}

uint64_t associated type witness table accessor for Message.ResponseType : Decodable in PingMessage()
{
  return MEMORY[0x24BEE0D38];
}

uint64_t associated type witness table accessor for Message.ResponseType : Encodable in PingMessage()
{
  return MEMORY[0x24BEE0D08];
}

unint64_t base witness table accessor for Decodable in StartBroadcastMessage()
{
  return lazy protocol witness table accessor for type StartBroadcastMessage and conformance StartBroadcastMessage();
}

unint64_t lazy protocol witness table accessor for type StartBroadcastMessage and conformance StartBroadcastMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for StartBroadcastMessage, &type metadata for StartBroadcastMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for StartBroadcastMessage, &type metadata for StartBroadcastMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for StartBroadcastMessage, &type metadata for StartBroadcastMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in StartBroadcastMessage()
{
  return lazy protocol witness table accessor for type StartBroadcastMessage and conformance StartBroadcastMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in StartBroadcastMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t lazy protocol witness table accessor for type NoReply and conformance NoReply()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type NoReply and conformance NoReply;
  if (!lazy protocol witness table cache variable for type NoReply and conformance NoReply)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for NoReply, &type metadata for NoReply);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type NoReply and conformance NoReply);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type NoReply and conformance NoReply;
  if (!lazy protocol witness table cache variable for type NoReply and conformance NoReply)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for NoReply, &type metadata for NoReply);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type NoReply and conformance NoReply);
    return v0;
  }
  return v2;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in StartBroadcastMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in FetchGroupsXPCMessage()
{
  return lazy protocol witness table accessor for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage();
}

unint64_t lazy protocol witness table accessor for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage, &type metadata for FetchGroupsXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage, &type metadata for FetchGroupsXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupsXPCMessage, &type metadata for FetchGroupsXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in FetchGroupsXPCMessage()
{
  return lazy protocol witness table accessor for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchGroupsXPCMessage()
{
  return lazy protocol witness table accessor for type [GPKGroup] and conformance <A> [A]();
}

unint64_t lazy protocol witness table accessor for type [GPKGroup] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKGroup] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKGroup] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroup]);
    v4 = lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroup] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKGroup] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKGroup] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroup]);
    v4 = lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroup] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchGroupsXPCMessage()
{
  return lazy protocol witness table accessor for type [GPKGroup] and conformance <A> [A]();
}

unint64_t base witness table accessor for Decodable in CreateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage();
}

unint64_t lazy protocol witness table accessor for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage, &type metadata for CreateGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage, &type metadata for CreateGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CreateGroupXPCMessage, &type metadata for CreateGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in CreateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in CreateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in CreateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t base witness table accessor for Decodable in UpdateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage();
}

unint64_t lazy protocol witness table accessor for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage, &type metadata for UpdateGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage, &type metadata for UpdateGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for UpdateGroupXPCMessage, &type metadata for UpdateGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in UpdateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in UpdateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in UpdateGroupXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t base witness table accessor for Decodable in CheckAvailabilityMessage()
{
  return lazy protocol witness table accessor for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage();
}

unint64_t lazy protocol witness table accessor for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage, &type metadata for CheckAvailabilityMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage, &type metadata for CheckAvailabilityMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckAvailabilityMessage, &type metadata for CheckAvailabilityMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in CheckAvailabilityMessage()
{
  return lazy protocol witness table accessor for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in CheckAvailabilityMessage()
{
  return lazy protocol witness table accessor for type [String : Bool] and conformance <> [A : B]();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in CheckAvailabilityMessage()
{
  return lazy protocol witness table accessor for type [String : Bool] and conformance <> [A : B]();
}

unint64_t base witness table accessor for Decodable in FetchPrimaryAccountMessage()
{
  return lazy protocol witness table accessor for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage();
}

unint64_t lazy protocol witness table accessor for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPrimaryAccountMessage, &type metadata for FetchPrimaryAccountMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPrimaryAccountMessage, &type metadata for FetchPrimaryAccountMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPrimaryAccountMessage, &type metadata for FetchPrimaryAccountMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in FetchPrimaryAccountMessage()
{
  return lazy protocol witness table accessor for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage();
}

uint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchPrimaryAccountMessage()
{
  return MEMORY[0x24BEE0D38];
}

uint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchPrimaryAccountMessage()
{
  return MEMORY[0x24BEE0D08];
}

unint64_t base witness table accessor for Decodable in FetchAccountAliasesMessage()
{
  return lazy protocol witness table accessor for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage();
}

unint64_t lazy protocol witness table accessor for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAccountAliasesMessage, &type metadata for FetchAccountAliasesMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAccountAliasesMessage, &type metadata for FetchAccountAliasesMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAccountAliasesMessage, &type metadata for FetchAccountAliasesMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in FetchAccountAliasesMessage()
{
  return lazy protocol witness table accessor for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchAccountAliasesMessage()
{
  return lazy protocol witness table accessor for type [String] and conformance <A> [A]();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchAccountAliasesMessage()
{
  return lazy protocol witness table accessor for type [String] and conformance <A> [A]();
}

unint64_t base witness table accessor for Decodable in FetchPreferredHandleMessage()
{
  return lazy protocol witness table accessor for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage();
}

unint64_t lazy protocol witness table accessor for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPreferredHandleMessage, &type metadata for FetchPreferredHandleMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPreferredHandleMessage, &type metadata for FetchPreferredHandleMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchPreferredHandleMessage, &type metadata for FetchPreferredHandleMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in FetchPreferredHandleMessage()
{
  return lazy protocol witness table accessor for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage();
}

uint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchPreferredHandleMessage()
{
  return MEMORY[0x24BEE0D38];
}

uint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchPreferredHandleMessage()
{
  return MEMORY[0x24BEE0D08];
}

unint64_t base witness table accessor for Decodable in SetPreferredHandleMessage()
{
  return lazy protocol witness table accessor for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage();
}

unint64_t lazy protocol witness table accessor for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage, &type metadata for SetPreferredHandleMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage, &type metadata for SetPreferredHandleMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for SetPreferredHandleMessage, &type metadata for SetPreferredHandleMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in SetPreferredHandleMessage()
{
  return lazy protocol witness table accessor for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in SetPreferredHandleMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in SetPreferredHandleMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in RSVPXPCMessage()
{
  return lazy protocol witness table accessor for type RSVPXPCMessage and conformance RSVPXPCMessage();
}

unint64_t lazy protocol witness table accessor for type RSVPXPCMessage and conformance RSVPXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage, &type metadata for RSVPXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage, &type metadata for RSVPXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RSVPXPCMessage, &type metadata for RSVPXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in RSVPXPCMessage()
{
  return lazy protocol witness table accessor for type RSVPXPCMessage and conformance RSVPXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in RSVPXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in RSVPXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t base witness table accessor for Decodable in ProfileInformationXPCMessage()
{
  return lazy protocol witness table accessor for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage();
}

unint64_t lazy protocol witness table accessor for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage, &type metadata for ProfileInformationXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage, &type metadata for ProfileInformationXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for ProfileInformationXPCMessage, &type metadata for ProfileInformationXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in ProfileInformationXPCMessage()
{
  return lazy protocol witness table accessor for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in ProfileInformationXPCMessage()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse();
}

unint64_t lazy protocol witness table accessor for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse)
  {
    v0 = type metadata accessor for GPKProfileInformationResponse();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse)
  {
    v0 = type metadata accessor for GPKProfileInformationResponse();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKProfileInformationResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in ProfileInformationXPCMessage()
{
  return lazy protocol witness table accessor for type GPKProfileInformationResponse and conformance GPKProfileInformationResponse();
}

unint64_t base witness table accessor for Decodable in MembershipXPCMessage()
{
  return lazy protocol witness table accessor for type MembershipXPCMessage and conformance MembershipXPCMessage();
}

unint64_t lazy protocol witness table accessor for type MembershipXPCMessage and conformance MembershipXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage)
  {
    v0 = type metadata accessor for MembershipXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage)
  {
    v0 = type metadata accessor for MembershipXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage)
  {
    v0 = type metadata accessor for MembershipXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for MembershipXPCMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in MembershipXPCMessage()
{
  return lazy protocol witness table accessor for type MembershipXPCMessage and conformance MembershipXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in MembershipXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in MembershipXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t base witness table accessor for Decodable in DeleteGroupXPCMessage()
{
  return lazy protocol witness table accessor for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage();
}

unint64_t lazy protocol witness table accessor for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage, &type metadata for DeleteGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage, &type metadata for DeleteGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteGroupXPCMessage, &type metadata for DeleteGroupXPCMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in DeleteGroupXPCMessage()
{
  return lazy protocol witness table accessor for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in DeleteGroupXPCMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in DeleteGroupXPCMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in MetricsXPCMessage()
{
  return lazy protocol witness table accessor for type MetricsXPCMessage and conformance MetricsXPCMessage();
}

unint64_t lazy protocol witness table accessor for type MetricsXPCMessage and conformance MetricsXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage)
  {
    v0 = type metadata accessor for MetricsXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage)
  {
    v0 = type metadata accessor for MetricsXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage)
  {
    v0 = type metadata accessor for MetricsXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for MetricsXPCMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in MetricsXPCMessage()
{
  return lazy protocol witness table accessor for type MetricsXPCMessage and conformance MetricsXPCMessage();
}

uint64_t associated type witness table accessor for Message.ResponseType : Decodable in MetricsXPCMessage()
{
  return MEMORY[0x24BEE1348];
}

uint64_t associated type witness table accessor for Message.ResponseType : Encodable in MetricsXPCMessage()
{
  return MEMORY[0x24BEE1330];
}

unint64_t base witness table accessor for Decodable in CheckKeyRegistrationMessage()
{
  return lazy protocol witness table accessor for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage();
}

unint64_t lazy protocol witness table accessor for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckKeyRegistrationMessage, &type metadata for CheckKeyRegistrationMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckKeyRegistrationMessage, &type metadata for CheckKeyRegistrationMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for CheckKeyRegistrationMessage, &type metadata for CheckKeyRegistrationMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in CheckKeyRegistrationMessage()
{
  return lazy protocol witness table accessor for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage();
}

uint64_t associated type witness table accessor for Message.ResponseType : Decodable in CheckKeyRegistrationMessage()
{
  return MEMORY[0x24BEE1348];
}

uint64_t associated type witness table accessor for Message.ResponseType : Encodable in CheckKeyRegistrationMessage()
{
  return MEMORY[0x24BEE1330];
}

unint64_t base witness table accessor for Decodable in RegisterSelfMessage()
{
  return lazy protocol witness table accessor for type RegisterSelfMessage and conformance RegisterSelfMessage();
}

unint64_t lazy protocol witness table accessor for type RegisterSelfMessage and conformance RegisterSelfMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage, &type metadata for RegisterSelfMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage, &type metadata for RegisterSelfMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for RegisterSelfMessage, &type metadata for RegisterSelfMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in RegisterSelfMessage()
{
  return lazy protocol witness table accessor for type RegisterSelfMessage and conformance RegisterSelfMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in RegisterSelfMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in RegisterSelfMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in DeleteAllContentMessage()
{
  return lazy protocol witness table accessor for type DeleteAllContentMessage and conformance DeleteAllContentMessage();
}

unint64_t lazy protocol witness table accessor for type DeleteAllContentMessage and conformance DeleteAllContentMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteAllContentMessage, &type metadata for DeleteAllContentMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteAllContentMessage, &type metadata for DeleteAllContentMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteAllContentMessage, &type metadata for DeleteAllContentMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in DeleteAllContentMessage()
{
  return lazy protocol witness table accessor for type DeleteAllContentMessage and conformance DeleteAllContentMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in DeleteAllContentMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in DeleteAllContentMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in FetchAllUsersMessage()
{
  return lazy protocol witness table accessor for type FetchAllUsersMessage and conformance FetchAllUsersMessage();
}

unint64_t lazy protocol witness table accessor for type FetchAllUsersMessage and conformance FetchAllUsersMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAllUsersMessage, &type metadata for FetchAllUsersMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAllUsersMessage, &type metadata for FetchAllUsersMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchAllUsersMessage, &type metadata for FetchAllUsersMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in FetchAllUsersMessage()
{
  return lazy protocol witness table accessor for type FetchAllUsersMessage and conformance FetchAllUsersMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchAllUsersMessage()
{
  return lazy protocol witness table accessor for type [GPKUser] and conformance <A> [A]();
}

unint64_t lazy protocol witness table accessor for type [GPKUser] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKUser] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKUser] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKUser]);
    v4 = lazy protocol witness table accessor for type GPKUser and conformance GPKUser();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKUser] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKUser] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKUser] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKUser]);
    v4 = lazy protocol witness table accessor for type GPKUser and conformance GPKUser();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKUser] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKUser and conformance GPKUser()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUser and conformance GPKUser;
  if (!lazy protocol witness table cache variable for type GPKUser and conformance GPKUser)
  {
    v0 = type metadata accessor for GPKUser();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser and conformance GPKUser);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUser and conformance GPKUser;
  if (!lazy protocol witness table cache variable for type GPKUser and conformance GPKUser)
  {
    v0 = type metadata accessor for GPKUser();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser and conformance GPKUser);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUser and conformance GPKUser;
  if (!lazy protocol witness table cache variable for type GPKUser and conformance GPKUser)
  {
    v0 = type metadata accessor for GPKUser();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser and conformance GPKUser);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUser and conformance GPKUser;
  if (!lazy protocol witness table cache variable for type GPKUser and conformance GPKUser)
  {
    v0 = type metadata accessor for GPKUser();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser and conformance GPKUser);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchAllUsersMessage()
{
  return lazy protocol witness table accessor for type [GPKUser] and conformance <A> [A]();
}

unint64_t base witness table accessor for Equatable in SeedType()
{
  return lazy protocol witness table accessor for type SeedType and conformance SeedType();
}

unint64_t base witness table accessor for Decodable in GroupRefreshMessage()
{
  return lazy protocol witness table accessor for type GroupRefreshMessage and conformance GroupRefreshMessage();
}

unint64_t lazy protocol witness table accessor for type GroupRefreshMessage and conformance GroupRefreshMessage()
{
  uint64_t refreshed;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage)
  {
    refreshed = type metadata accessor for GroupRefreshMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage, refreshed);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t refreshed;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage)
  {
    refreshed = type metadata accessor for GroupRefreshMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage, refreshed);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t refreshed;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage)
  {
    refreshed = type metadata accessor for GroupRefreshMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupRefreshMessage, refreshed);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in GroupRefreshMessage()
{
  return lazy protocol witness table accessor for type GroupRefreshMessage and conformance GroupRefreshMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in GroupRefreshMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in GroupRefreshMessage()
{
  return lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
}

unint64_t base witness table accessor for Equatable in KeyDistributionRequestMessage.RequestType()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.RequestType and conformance KeyDistributionRequestMessage.RequestType();
}

unint64_t base witness table accessor for Decodable in KeyDistributionRequestMessage()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage();
}

unint64_t lazy protocol witness table accessor for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage, &type metadata for KeyDistributionRequestMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage, &type metadata for KeyDistributionRequestMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage, &type metadata for KeyDistributionRequestMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in KeyDistributionRequestMessage()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in KeyDistributionRequestMessage()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse();
}

unint64_t lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for KeyDistributionRequestMessage.KeyDistributionResponse, &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse);
    return v0;
  }
  return v2;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in KeyDistributionRequestMessage()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse and conformance KeyDistributionRequestMessage.KeyDistributionResponse();
}

unint64_t base witness table accessor for Equatable in GroupMode()
{
  return lazy protocol witness table accessor for type GroupMode and conformance GroupMode();
}

uint64_t base witness table accessor for Decodable in GroupKitServerRequestMessage<A, B>(uint64_t a1)
{
  return MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>, a1);
}

uint64_t base witness table accessor for Encodable in GroupKitServerRequestMessage<A, B>(uint64_t a1)
{
  return MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>, a1);
}

uint64_t associated type witness table accessor for Message.ResponseType : Decodable in GroupKitServerRequestMessage<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t associated type witness table accessor for Message.ResponseType : Encodable in GroupKitServerRequestMessage<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 56);
}

unint64_t base witness table accessor for Decodable in EncryptDataMessage()
{
  return lazy protocol witness table accessor for type EncryptDataMessage and conformance EncryptDataMessage();
}

unint64_t lazy protocol witness table accessor for type EncryptDataMessage and conformance EncryptDataMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage)
  {
    v0 = type metadata accessor for EncryptDataMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage)
  {
    v0 = type metadata accessor for EncryptDataMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage;
  if (!lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage)
  {
    v0 = type metadata accessor for EncryptDataMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for EncryptDataMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type EncryptDataMessage and conformance EncryptDataMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in EncryptDataMessage()
{
  return lazy protocol witness table accessor for type EncryptDataMessage and conformance EncryptDataMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in EncryptDataMessage()
{
  return lazy protocol witness table accessor for type Data and conformance Data();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in EncryptDataMessage()
{
  return lazy protocol witness table accessor for type Data and conformance Data();
}

unint64_t base witness table accessor for Decodable in DecryptDataMessage()
{
  return lazy protocol witness table accessor for type DecryptDataMessage and conformance DecryptDataMessage();
}

unint64_t lazy protocol witness table accessor for type DecryptDataMessage and conformance DecryptDataMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage)
  {
    v0 = type metadata accessor for DecryptDataMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage)
  {
    v0 = type metadata accessor for DecryptDataMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage;
  if (!lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage)
  {
    v0 = type metadata accessor for DecryptDataMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for DecryptDataMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DecryptDataMessage and conformance DecryptDataMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in DecryptDataMessage()
{
  return lazy protocol witness table accessor for type DecryptDataMessage and conformance DecryptDataMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in DecryptDataMessage()
{
  return lazy protocol witness table accessor for type Data and conformance Data();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in DecryptDataMessage()
{
  return lazy protocol witness table accessor for type Data and conformance Data();
}

unint64_t base witness table accessor for Decodable in DeleteInvitation()
{
  return lazy protocol witness table accessor for type DeleteInvitation and conformance DeleteInvitation();
}

unint64_t lazy protocol witness table accessor for type DeleteInvitation and conformance DeleteInvitation()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation;
  if (!lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation)
  {
    v0 = type metadata accessor for DeleteInvitation();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation;
  if (!lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation)
  {
    v0 = type metadata accessor for DeleteInvitation();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation;
  if (!lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation)
  {
    v0 = type metadata accessor for DeleteInvitation();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for DeleteInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in DeleteInvitation()
{
  return lazy protocol witness table accessor for type DeleteInvitation and conformance DeleteInvitation();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in DeleteInvitation()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in DeleteInvitation()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in InitCKSchemasMessage()
{
  return lazy protocol witness table accessor for type InitCKSchemasMessage and conformance InitCKSchemasMessage();
}

unint64_t lazy protocol witness table accessor for type InitCKSchemasMessage and conformance InitCKSchemasMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InitCKSchemasMessage, &type metadata for InitCKSchemasMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InitCKSchemasMessage, &type metadata for InitCKSchemasMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for InitCKSchemasMessage, &type metadata for InitCKSchemasMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in InitCKSchemasMessage()
{
  return lazy protocol witness table accessor for type InitCKSchemasMessage and conformance InitCKSchemasMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in InitCKSchemasMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in InitCKSchemasMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in AccountNotificationMessage()
{
  return lazy protocol witness table accessor for type AccountNotificationMessage and conformance AccountNotificationMessage();
}

unint64_t lazy protocol witness table accessor for type AccountNotificationMessage and conformance AccountNotificationMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for AccountNotificationMessage, &type metadata for AccountNotificationMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for AccountNotificationMessage, &type metadata for AccountNotificationMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for AccountNotificationMessage, &type metadata for AccountNotificationMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in AccountNotificationMessage()
{
  return lazy protocol witness table accessor for type AccountNotificationMessage and conformance AccountNotificationMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in AccountNotificationMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in AccountNotificationMessage()
{
  return lazy protocol witness table accessor for type NoReply and conformance NoReply();
}

unint64_t base witness table accessor for Decodable in FetchMemberKeyXPCMessage()
{
  return lazy protocol witness table accessor for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage();
}

unint64_t lazy protocol witness table accessor for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage()
{
  uint64_t MemberKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage)
  {
    MemberKeyXPCMessage = type metadata accessor for FetchMemberKeyXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage, MemberKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t MemberKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage)
  {
    MemberKeyXPCMessage = type metadata accessor for FetchMemberKeyXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage, MemberKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t MemberKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage)
  {
    MemberKeyXPCMessage = type metadata accessor for FetchMemberKeyXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchMemberKeyXPCMessage, MemberKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in FetchMemberKeyXPCMessage()
{
  return lazy protocol witness table accessor for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchMemberKeyXPCMessage()
{
  return lazy protocol witness table accessor for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey();
}

unint64_t lazy protocol witness table accessor for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey)
  {
    v0 = type metadata accessor for GPKMemberKey.RawKey();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey)
  {
    v0 = type metadata accessor for GPKMemberKey.RawKey();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchMemberKeyXPCMessage()
{
  return lazy protocol witness table accessor for type GPKMemberKey.RawKey and conformance GPKMemberKey.RawKey();
}

unint64_t base witness table accessor for Decodable in FetchGroupKeyXPCMessage()
{
  return lazy protocol witness table accessor for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage();
}

unint64_t lazy protocol witness table accessor for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage()
{
  uint64_t GroupKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage)
  {
    GroupKeyXPCMessage = type metadata accessor for FetchGroupKeyXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage, GroupKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t GroupKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage)
  {
    GroupKeyXPCMessage = type metadata accessor for FetchGroupKeyXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage, GroupKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t GroupKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage)
  {
    GroupKeyXPCMessage = type metadata accessor for FetchGroupKeyXPCMessage();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for FetchGroupKeyXPCMessage, GroupKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Encodable in FetchGroupKeyXPCMessage()
{
  return lazy protocol witness table accessor for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage();
}

unint64_t associated type witness table accessor for Message.ResponseType : Decodable in FetchGroupKeyXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey)
  {
    v0 = type metadata accessor for GPKGroupKey.RawKey();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey)
  {
    v0 = type metadata accessor for GPKGroupKey.RawKey();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for Message.ResponseType : Encodable in FetchGroupKeyXPCMessage()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey and conformance GPKGroupKey.RawKey();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchGroupKeyXPCMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FetchGroupKeyXPCMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchGroupKeyXPCMessage(uint64_t a1)
{
  return FetchGroupKeyXPCMessage.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for PingMessage(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  result = a1;
  a1[1] = v4;
  return result;
}

uint64_t destroy for PingMessage()
{
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PingMessage(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  result = a1;
  a1[1] = v4;
  return result;
}

_QWORD *assignWithCopy for PingMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for PingMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for PingMessage(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v4 = *(_OWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PingMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_OWORD *)result = a2 + 0x80000000;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PingMessage()
{
  return &type metadata for PingMessage;
}

uint64_t getEnumTagSinglePayload for PingMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for PingMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for PingMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for PingMessage.CodingKeys()
{
  return &type metadata for PingMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for StartBroadcastMessage()
{
  return &type metadata for StartBroadcastMessage;
}

ValueMetadata *type metadata accessor for StartBroadcastMessage.CodingKeys()
{
  return &type metadata for StartBroadcastMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchGroupsXPCMessage()
{
  return &type metadata for FetchGroupsXPCMessage;
}

uint64_t getEnumTagSinglePayload for FetchGroupsXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchGroupsXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for FetchGroupsXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for FetchGroupsXPCMessage.CodingKeys()
{
  return &type metadata for FetchGroupsXPCMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for CreateGroupXPCMessage()
{
  return &type metadata for CreateGroupXPCMessage;
}

uint64_t getEnumTagSinglePayload for CreateGroupXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for CreateGroupXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for CreateGroupXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for CreateGroupXPCMessage.CodingKeys()
{
  return &type metadata for CreateGroupXPCMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UpdateGroupXPCMessage()
{
  return &type metadata for UpdateGroupXPCMessage;
}

uint64_t getEnumTagSinglePayload for UpdateGroupXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for UpdateGroupXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for UpdateGroupXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for UpdateGroupXPCMessage.CodingKeys()
{
  return &type metadata for UpdateGroupXPCMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for CheckAvailabilityMessage()
{
  return &type metadata for CheckAvailabilityMessage;
}

uint64_t getEnumTagSinglePayload for CheckAvailabilityMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for CheckAvailabilityMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for CheckAvailabilityMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for CheckAvailabilityMessage.CodingKeys()
{
  return &type metadata for CheckAvailabilityMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for NoReply()
{
  return &type metadata for NoReply;
}

ValueMetadata *type metadata accessor for NoReply.CodingKeys()
{
  return &type metadata for NoReply.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchPrimaryAccountMessage()
{
  return &type metadata for FetchPrimaryAccountMessage;
}

ValueMetadata *type metadata accessor for FetchPrimaryAccountMessage.CodingKeys()
{
  return &type metadata for FetchPrimaryAccountMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchAccountAliasesMessage()
{
  return &type metadata for FetchAccountAliasesMessage;
}

ValueMetadata *type metadata accessor for FetchAccountAliasesMessage.CodingKeys()
{
  return &type metadata for FetchAccountAliasesMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchPreferredHandleMessage()
{
  return &type metadata for FetchPreferredHandleMessage;
}

ValueMetadata *type metadata accessor for FetchPreferredHandleMessage.CodingKeys()
{
  return &type metadata for FetchPreferredHandleMessage.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for SetPreferredHandleMessage(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  result = a1;
  a1[1] = v4;
  return result;
}

uint64_t destroy for SetPreferredHandleMessage()
{
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SetPreferredHandleMessage(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  result = a1;
  a1[1] = v4;
  return result;
}

_QWORD *assignWithCopy for SetPreferredHandleMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for SetPreferredHandleMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for SetPreferredHandleMessage(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    {
      v5 = *(_OWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 8);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SetPreferredHandleMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetPreferredHandleMessage()
{
  return &type metadata for SetPreferredHandleMessage;
}

uint64_t getEnumTagSinglePayload for SetPreferredHandleMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for SetPreferredHandleMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for SetPreferredHandleMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for SetPreferredHandleMessage.CodingKeys()
{
  return &type metadata for SetPreferredHandleMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for RSVPXPCMessage()
{
  return &type metadata for RSVPXPCMessage;
}

uint64_t getEnumTagSinglePayload for RSVPXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for RSVPXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for RSVPXPCMessage.CodingKeys()
{
  return &type metadata for RSVPXPCMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ProfileInformationXPCMessage()
{
  return &type metadata for ProfileInformationXPCMessage;
}

uint64_t getEnumTagSinglePayload for ProfileInformationXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for ProfileInformationXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ProfileInformationXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for ProfileInformationXPCMessage.CodingKeys()
{
  return &type metadata for ProfileInformationXPCMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for MembershipXPCMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  int v12;

  v11 = type metadata accessor for GPKMembershipRequest();
  v12 = *(_DWORD *)(*(_QWORD *)(v11 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
    *((_BYTE *)a1 + *(int *)(v11 + 20)) = *((_BYTE *)a2 + *(int *)(v11 + 20)) & 1;
    v3 = *(int *)(v11 + 24);
    v5 = (char *)a1 + v3;
    *(_QWORD *)((char *)a1 + v3) = *(_QWORD *)((char *)a2 + v3);
    v6 = *(_QWORD *)((char *)a2 + v3 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v5 + 1) = v6;
    return (unint64_t)a1;
  }
}

uint64_t destroy for MembershipXPCMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for GPKMembershipRequest();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MembershipXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a1 + *(int *)(v3 + 20)) = *(_BYTE *)(a2 + *(int *)(v3 + 20)) & 1;
  v4 = *(int *)(v3 + 24);
  v8 = a1 + v4;
  *(_QWORD *)(a1 + v4) = *(_QWORD *)(a2 + v4);
  v9 = *(_QWORD *)(a2 + v4 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(v8 + 8) = v9;
  return result;
}

uint64_t assignWithCopy for MembershipXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a1 + *(int *)(v3 + 20)) = *(_BYTE *)(a2 + *(int *)(v3 + 20)) & 1;
  v4 = *(int *)(v3 + 24);
  v7 = a1 + v4;
  *(_QWORD *)(a1 + v4) = *(_QWORD *)(a2 + v4);
  v8 = *(_QWORD *)(a2 + v4 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 + 8) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MembershipXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a1 + *(int *)(v3 + 20)) = *(_BYTE *)(a2 + *(int *)(v3 + 20)) & 1;
  result = *(__n128 *)(a2 + *(int *)(v3 + 24));
  *(__n128 *)(a1 + *(int *)(v3 + 24)) = result;
  return result;
}

uint64_t assignWithTake for MembershipXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  v3 = type metadata accessor for GPKMembershipRequest();
  *(_BYTE *)(a1 + *(int *)(v3 + 20)) = *(_BYTE *)(a2 + *(int *)(v3 + 20)) & 1;
  v4 = *(int *)(v3 + 24);
  v5 = (_QWORD *)(a2 + v4);
  v6 = (_QWORD *)(a1 + v4);
  *v6 = *v5;
  v6[1] = v5[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MembershipXPCMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D252B38(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKMembershipRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for MembershipXPCMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D252B94(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKMembershipRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for MembershipXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKMembershipRequest();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for MembershipXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for MembershipXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for MembershipXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for MembershipXPCMessage.CodingKeys()
{
  return &type metadata for MembershipXPCMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for DeleteGroupXPCMessage()
{
  return &type metadata for DeleteGroupXPCMessage;
}

uint64_t getEnumTagSinglePayload for DeleteGroupXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for DeleteGroupXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for DeleteGroupXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for DeleteGroupXPCMessage.CodingKeys()
{
  return &type metadata for DeleteGroupXPCMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for MetricsXPCMessage(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v6;
  uint64_t v10;
  int v11;

  v10 = type metadata accessor for GPKMetricsRequest();
  v11 = *(_DWORD *)(*(_QWORD *)(v10 - 8) + 80);
  if ((v11 & 0x20000) != 0)
  {
    v6 = *a2;
    swift_retain();
    *a1 = v6;
    return *a1 + ((v11 + 16) & ~(unint64_t)v11);
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
    v3 = (_OWORD *)((char *)a1 + *(int *)(v10 + 20));
    v4 = (_OWORD *)((char *)a2 + *(int *)(v10 + 20));
    *v3 = *v4;
    *(_OWORD *)((char *)v3 + 9) = *(_OWORD *)((char *)v4 + 9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for MetricsXPCMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

__n128 initializeWithCopy for MetricsXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  v3 = *(int *)(type metadata accessor for GPKMetricsRequest() + 20);
  v4 = a2 + v3;
  v5 = a1 + v3;
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 assignWithCopy for MetricsXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  v3 = *(int *)(type metadata accessor for GPKMetricsRequest() + 20);
  v4 = a2 + v3;
  v5 = a1 + v3;
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 initializeWithTake for MetricsXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  v3 = *(int *)(type metadata accessor for GPKMetricsRequest() + 20);
  v4 = a2 + v3;
  v5 = a1 + v3;
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 assignWithTake for MetricsXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  v3 = *(int *)(type metadata accessor for GPKMetricsRequest() + 20);
  v4 = a2 + v3;
  v5 = a1 + v3;
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MetricsXPCMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25373C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKMetricsRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for MetricsXPCMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D253798(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKMetricsRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for MetricsXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKMetricsRequest();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for MetricsXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for MetricsXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for MetricsXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for MetricsXPCMessage.CodingKeys()
{
  return &type metadata for MetricsXPCMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupUpdatedBroadcast()
{
  return &type metadata for GroupUpdatedBroadcast;
}

uint64_t getEnumTagSinglePayload for GroupUpdatedBroadcast.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupUpdatedBroadcast.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupUpdatedBroadcast.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for GroupUpdatedBroadcast.CodingKeys()
{
  return &type metadata for GroupUpdatedBroadcast.CodingKeys;
}

ValueMetadata *type metadata accessor for LeftGroupBroadcast()
{
  return &type metadata for LeftGroupBroadcast;
}

uint64_t getEnumTagSinglePayload for LeftGroupBroadcast.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for LeftGroupBroadcast.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for LeftGroupBroadcast.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for LeftGroupBroadcast.CodingKeys()
{
  return &type metadata for LeftGroupBroadcast.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for GroupDeletedBroadcast(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for GroupDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for GroupDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for GroupDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for GroupDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupDeletedBroadcast()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D2545AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for GroupDeletedBroadcast()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D254608(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for GroupDeletedBroadcast()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GroupDeletedBroadcast.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupDeletedBroadcast.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupDeletedBroadcast.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for GroupDeletedBroadcast.CodingKeys()
{
  return &type metadata for GroupDeletedBroadcast.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for InvitationDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for InvitationDeletedBroadcast(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for InvitationDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for InvitationDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for InvitationDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for InvitationDeletedBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvitationDeletedBroadcast()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D254C64(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for InvitationDeletedBroadcast()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D254CC0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for InvitationDeletedBroadcast()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InvitationDeletedBroadcast.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for InvitationDeletedBroadcast.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for InvitationDeletedBroadcast.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for InvitationDeletedBroadcast.CodingKeys()
{
  return &type metadata for InvitationDeletedBroadcast.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for MemberInvitationResponseBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v6;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t destroy for MemberInvitationResponseBroadcast()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MemberInvitationResponseBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v6;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t assignWithCopy for MemberInvitationResponseBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  swift_release();
  *(_BYTE *)(a1 + 8) = a2[1] & 1;
  v5 = a2[2];
  swift_retain();
  *(_QWORD *)(a1 + 16) = v5;
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t assignWithTake for MemberInvitationResponseBroadcast(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MemberInvitationResponseBroadcast(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MemberInvitationResponseBroadcast(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MemberInvitationResponseBroadcast()
{
  return &type metadata for MemberInvitationResponseBroadcast;
}

uint64_t getEnumTagSinglePayload for MemberInvitationResponseBroadcast.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for MemberInvitationResponseBroadcast.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for MemberInvitationResponseBroadcast.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for MemberInvitationResponseBroadcast.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MemberInvitationResponseBroadcast.CodingKeys()
{
  return &type metadata for MemberInvitationResponseBroadcast.CodingKeys;
}

ValueMetadata *type metadata accessor for ReceivedGroupInviteBroadcast()
{
  return &type metadata for ReceivedGroupInviteBroadcast;
}

uint64_t getEnumTagSinglePayload for ReceivedGroupInviteBroadcast.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for ReceivedGroupInviteBroadcast.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ReceivedGroupInviteBroadcast.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for ReceivedGroupInviteBroadcast.CodingKeys()
{
  return &type metadata for ReceivedGroupInviteBroadcast.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for ReceivedGroupUpdateBroadcast(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ReceivedGroupUpdateBroadcast()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReceivedGroupUpdateBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  return result;
}

uint64_t assignWithCopy for ReceivedGroupUpdateBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  swift_release();
  v4 = a2[1];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = a2[2];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 24) = a2[3] & 1;
  return result;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 9);
  *(__n128 *)(a1 + 9) = result;
  return result;
}

uint64_t assignWithTake for ReceivedGroupUpdateBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for ReceivedGroupUpdateBroadcast(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReceivedGroupUpdateBroadcast(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 25);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)result = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReceivedGroupUpdateBroadcast()
{
  return &type metadata for ReceivedGroupUpdateBroadcast;
}

uint64_t getEnumTagSinglePayload for ReceivedGroupUpdateBroadcast.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for ReceivedGroupUpdateBroadcast.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for ReceivedGroupUpdateBroadcast.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ReceivedGroupUpdateBroadcast.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReceivedGroupUpdateBroadcast.CodingKeys()
{
  return &type metadata for ReceivedGroupUpdateBroadcast.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for RemovedFromGroupBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  return result;
}

uint64_t destroy for RemovedFromGroupBroadcast()
{
  return swift_release();
}

uint64_t initializeWithCopy for RemovedFromGroupBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  return result;
}

uint64_t assignWithCopy for RemovedFromGroupBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  swift_release();
  result = a1;
  *(_BYTE *)(a1 + 8) = a2[1] & 1;
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for RemovedFromGroupBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  result = a1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for RemovedFromGroupBroadcast(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 9))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)a1 < 0x100000000uLL)
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for RemovedFromGroupBroadcast(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  _BYTE *v4;

  v3 = result;
  v4 = (char *)result + 9;
  if (a2 < 0)
  {
    result = 0;
    *((_BYTE *)v3 + 8) = 0;
    *v3 = a2 + 0x80000000;
    if (a3 < 0)
      *v4 = 1;
  }
  else
  {
    if (a3 < 0)
      *v4 = 0;
    if (a2)
      *result = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for RemovedFromGroupBroadcast()
{
  return &type metadata for RemovedFromGroupBroadcast;
}

uint64_t getEnumTagSinglePayload for RemovedFromGroupBroadcast.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RemovedFromGroupBroadcast.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for RemovedFromGroupBroadcast.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for RemovedFromGroupBroadcast.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RemovedFromGroupBroadcast.CodingKeys()
{
  return &type metadata for RemovedFromGroupBroadcast.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for ReceivedGroupDeletionBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v6;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t destroy for ReceivedGroupDeletionBroadcast()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ReceivedGroupDeletionBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v6;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t assignWithCopy for ReceivedGroupDeletionBroadcast(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v3;
  swift_release();
  *(_BYTE *)(a1 + 8) = a2[1] & 1;
  v5 = a2[2];
  swift_retain();
  *(_QWORD *)(a1 + 16) = v5;
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReceivedGroupDeletionBroadcast(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReceivedGroupDeletionBroadcast(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReceivedGroupDeletionBroadcast(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReceivedGroupDeletionBroadcast()
{
  return &type metadata for ReceivedGroupDeletionBroadcast;
}

uint64_t getEnumTagSinglePayload for ReceivedGroupDeletionBroadcast.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for ReceivedGroupDeletionBroadcast.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for ReceivedGroupDeletionBroadcast.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ReceivedGroupDeletionBroadcast.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return &type metadata for ReceivedGroupDeletionBroadcast.CodingKeys;
}

ValueMetadata *type metadata accessor for CheckKeyRegistrationMessage()
{
  return &type metadata for CheckKeyRegistrationMessage;
}

ValueMetadata *type metadata accessor for CheckKeyRegistrationMessage.CodingKeys()
{
  return &type metadata for CheckKeyRegistrationMessage.CodingKeys;
}

uint64_t __swift_memcpy3_1(uint64_t result, uint64_t a2)
{
  *(_WORD *)result = *(_WORD *)a2;
  *(_BYTE *)(result + 2) = *(_BYTE *)(a2 + 2);
  return result;
}

uint64_t getEnumTagSinglePayload for RegisterSelfMessage(_BYTE *a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 16776961) >> 24) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[3];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 3) : *(_DWORD *)(a1 + 3);
    if (v6)
    {
      v5 = ((*(unsigned __int16 *)a1 | (a1[2] << 16)) & 0xFFFFFF | ((v6 - 1) << 24)) + 254;
    }
    else
    {
LABEL_15:
      v4 = -1;
      if ((*a1 & 0xFE) != 0)
        v4 = *a1 & 1 | ((*a1 & 0xFE) - 2) & 0x7FFFFFFF;
      v5 = v4;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RegisterSelfMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 16776961) >> 24) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 24) + 1;
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = ((a2 - 255) & 0xFFFFFF) >> 16;
    if (v7)
    {
      if (v7 == 1)
      {
        *(_BYTE *)(result + 3) = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 3) = v4;
      }
      else
      {
        *(_DWORD *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        *(_BYTE *)(result + 3) = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 3) = 0;
      }
      else
      {
        *(_DWORD *)(result + 3) = 0;
      }
    }
    if (a2)
      *(_BYTE *)result = (a2 - 1) & 1 | (2 * (((a2 - 1) >> 1) + 1));
  }
  return result;
}

ValueMetadata *type metadata accessor for RegisterSelfMessage()
{
  return &type metadata for RegisterSelfMessage;
}

uint64_t getEnumTagSinglePayload for RegisterSelfMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RegisterSelfMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for RegisterSelfMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for RegisterSelfMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RegisterSelfMessage.CodingKeys()
{
  return &type metadata for RegisterSelfMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for DeleteAllContentMessage()
{
  return &type metadata for DeleteAllContentMessage;
}

ValueMetadata *type metadata accessor for DeleteAllContentMessage.CodingKeys()
{
  return &type metadata for DeleteAllContentMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchAllUsersMessage()
{
  return &type metadata for FetchAllUsersMessage;
}

ValueMetadata *type metadata accessor for FetchAllUsersMessage.CodingKeys()
{
  return &type metadata for FetchAllUsersMessage.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SeedType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for SeedType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for SeedType(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for SeedType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SeedType()
{
  return &type metadata for SeedType;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupRefreshMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for GroupRefreshMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for GroupRefreshMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for GroupRefreshMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for GroupRefreshMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for GroupRefreshMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupRefreshMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D258814(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for GroupRefreshMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D258870(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for GroupRefreshMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GroupRefreshMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupRefreshMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupRefreshMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for GroupRefreshMessage.CodingKeys()
{
  return &type metadata for GroupRefreshMessage.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for KeyDistributionRequestMessage(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for KeyDistributionRequestMessage(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 32) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyDistributionRequestMessage(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2 & 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v10;
  if ((*(_QWORD *)(a2 + 32) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithCopy for KeyDistributionRequestMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2 & 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v14;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 32) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + 32) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      outlined copy of Data._Representation(v9, v10);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
    }
  }
  else if ((*(_QWORD *)(a2 + 32) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    outlined copy of Data._Representation(v11, v12);
    v2 = *(_QWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
    outlined consume of Data._Representation(v2, v3);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy104_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for KeyDistributionRequestMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2 & 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 32) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else if ((*(_QWORD *)(a2 + 32) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 32);
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v2;
    outlined consume of Data._Representation(v3, v4);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDistributionRequestMessage(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    {
      v5 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 16)))
        v4 = *(_QWORD *)(a1 + 16);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDistributionRequestMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 104) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 104) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionRequestMessage()
{
  return &type metadata for KeyDistributionRequestMessage;
}

_QWORD *initializeBufferWithCopyOfBuffer for KeyDistributionRequestMessage.KeyDistributionResponse(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  swift_bridgeObjectRetain();
  result = a1;
  a1[2] = v4;
  return result;
}

uint64_t destroy for KeyDistributionRequestMessage.KeyDistributionResponse()
{
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for KeyDistributionRequestMessage.KeyDistributionResponse(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  swift_bridgeObjectRetain();
  result = a1;
  a1[2] = v4;
  return result;
}

_QWORD *assignWithCopy for KeyDistributionRequestMessage.KeyDistributionResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for KeyDistributionRequestMessage.KeyDistributionResponse(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for KeyDistributionRequestMessage.KeyDistributionResponse(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 16)))
        v3 = *(_QWORD *)(a1 + 16);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDistributionRequestMessage.KeyDistributionResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 16) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionRequestMessage.KeyDistributionResponse()
{
  return &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse;
}

uint64_t getEnumTagSinglePayload for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return &type metadata for KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KeyDistributionRequestMessage.RequestType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for KeyDistributionRequestMessage.RequestType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for KeyDistributionRequestMessage.RequestType(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for KeyDistributionRequestMessage.RequestType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionRequestMessage.RequestType()
{
  return &type metadata for KeyDistributionRequestMessage.RequestType;
}

uint64_t getEnumTagSinglePayload for KeyDistributionRequestMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF9)
      goto LABEL_15;
    v7 = ((a2 + 6) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 249;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 7;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for KeyDistributionRequestMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF9)
  {
    v5 = ((a3 + 6) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF9)
  {
    v4 = ((a2 - 250) >> 8) + 1;
    *result = a2 + 6;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 6;
  }
  return result;
}

uint64_t getEnumTag for KeyDistributionRequestMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for KeyDistributionRequestMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionRequestMessage.CodingKeys()
{
  return &type metadata for KeyDistributionRequestMessage.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GroupMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupMode(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GroupMode(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GroupMode(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GroupMode()
{
  return &type metadata for GroupMode;
}

uint64_t type metadata instantiation function for GroupKitServerRequestMessage()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for GroupKitServerRequestMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (**(uint64_t (***)(void))(*(_QWORD *)(a3 + 16) - 8))();
}

uint64_t destroy for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> initializeWithCopy for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithCopy for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> initializeWithTake for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for GroupKitServerRequestMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
}

uint64_t getEnumTagSinglePayload for GroupKitServerRequestMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25ADC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for GroupKitServerRequestMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25AE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 56))(a1, a2);
}

uint64_t type metadata instantiation function for GroupKitServerRequestMessage.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for GroupKitServerRequestMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupKitServerRequestMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupKitServerRequestMessage.CodingKeys()
{
  return 0;
}

unint64_t initializeBufferWithCopyOfBuffer for FetchRSVPQueueMessagePayload(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for FetchRSVPQueueMessagePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for FetchRSVPQueueMessagePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for FetchRSVPQueueMessagePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for FetchRSVPQueueMessagePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for FetchRSVPQueueMessagePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchRSVPQueueMessagePayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25B5A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for FetchRSVPQueueMessagePayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25B6A0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for FetchRSVPQueueMessagePayload()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for FetchRSVPQueueMessagePayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchRSVPQueueMessagePayload.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for FetchRSVPQueueMessagePayload.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for FetchRSVPQueueMessagePayload.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRSVPQueueMessagePayload.CodingKeys()
{
  return &type metadata for FetchRSVPQueueMessagePayload.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for EncryptDataMessage(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v26;

  v26 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v26 & 0x20000) != 0)
  {
    v21 = *a2;
    swift_retain();
    *a1 = v21;
    return *a1 + ((v26 + 16) & ~(unint64_t)v26);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v10 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (_QWORD *)((char *)a2 + a3[5]);
    v9 = *v4;
    v11 = v4[1];
    outlined copy of Data._Representation(*v4, v11);
    *v10 = v9;
    v10[1] = v11;
    v13 = (_QWORD *)((char *)a1 + a3[6]);
    v5 = (_QWORD *)((char *)a2 + a3[6]);
    v12 = *v5;
    v14 = v5[1];
    outlined copy of Data._Representation(*v5, v14);
    *v13 = v12;
    v13[1] = v14;
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]) & 1;
    v16 = (_QWORD *)((char *)a1 + a3[8]);
    v6 = (_QWORD *)((char *)a2 + a3[8]);
    v15 = *v6;
    v17 = v6[1];
    outlined copy of Data._Representation(*v6, v17);
    *v16 = v15;
    v16[1] = v17;
    v19 = (_QWORD *)((char *)a1 + a3[9]);
    v7 = (_QWORD *)((char *)a2 + a3[9]);
    v18 = *v7;
    v20 = v7[1];
    outlined copy of Data._Representation(*v7, v20);
    *v19 = v18;
    v19[1] = v20;
    return (unint64_t)a1;
  }
}

uint64_t destroy for EncryptDataMessage(uint64_t a1, int *a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t initializeWithCopy for EncryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v9 = a3[5];
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a2 + v9 + 8);
  outlined copy of Data._Representation(v10, v11);
  v4 = (uint64_t *)(a1 + v9);
  *v4 = v10;
  v4[1] = v11;
  v12 = a3[6];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a2 + v12 + 8);
  outlined copy of Data._Representation(v13, v14);
  v5 = (uint64_t *)(a1 + v12);
  *v5 = v13;
  v5[1] = v14;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]) & 1;
  v15 = a3[8];
  v16 = *(_QWORD *)(a2 + v15);
  v17 = *(_QWORD *)(a2 + v15 + 8);
  outlined copy of Data._Representation(v16, v17);
  v6 = (uint64_t *)(a1 + v15);
  *v6 = v16;
  v6[1] = v17;
  v20 = a3[9];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  result = a1;
  v8 = (uint64_t *)(a1 + v20);
  *v8 = v21;
  v8[1] = v22;
  return result;
}

uint64_t assignWithCopy for EncryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v17 = a3[5];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a2 + v17 + 8);
  outlined copy of Data._Representation(v18, v19);
  v4 = (uint64_t *)(a1 + v17);
  v5 = *(_QWORD *)(a1 + v17);
  v6 = *(_QWORD *)(a1 + v17 + 8);
  *v4 = v18;
  v4[1] = v19;
  outlined consume of Data._Representation(v5, v6);
  v20 = a3[6];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  v7 = (uint64_t *)(a1 + v20);
  v8 = *(_QWORD *)(a1 + v20);
  v9 = *(_QWORD *)(a1 + v20 + 8);
  *v7 = v21;
  v7[1] = v22;
  outlined consume of Data._Representation(v8, v9);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]) & 1;
  v23 = a3[8];
  v24 = *(_QWORD *)(a2 + v23);
  v25 = *(_QWORD *)(a2 + v23 + 8);
  outlined copy of Data._Representation(v24, v25);
  v10 = (uint64_t *)(a1 + v23);
  v11 = *(_QWORD *)(a1 + v23);
  v12 = *(_QWORD *)(a1 + v23 + 8);
  *v10 = v24;
  v10[1] = v25;
  outlined consume of Data._Representation(v11, v12);
  v28 = a3[9];
  v29 = *(_QWORD *)(a2 + v28);
  v30 = *(_QWORD *)(a2 + v28 + 8);
  outlined copy of Data._Representation(v29, v30);
  v13 = (uint64_t *)(a1 + v28);
  v14 = *(_QWORD *)(a1 + v28);
  v15 = *(_QWORD *)(a1 + v28 + 8);
  *v13 = v29;
  v13[1] = v30;
  outlined consume of Data._Representation(v14, v15);
  return a1;
}

__n128 initializeWithTake for EncryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]) & 1;
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  result = *(__n128 *)(a2 + a3[9]);
  *(__n128 *)(a1 + a3[9]) = result;
  return result;
}

uint64_t assignWithTake for EncryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  v10 = (uint64_t *)(a2 + a3[6]);
  v11 = *v10;
  v12 = v10[1];
  v13 = (uint64_t *)(a1 + a3[6]);
  v14 = *v13;
  v15 = v13[1];
  *v13 = v11;
  v13[1] = v12;
  outlined consume of Data._Representation(v14, v15);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]) & 1;
  v16 = (uint64_t *)(a2 + a3[8]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (uint64_t *)(a1 + a3[8]);
  v20 = *v19;
  v21 = v19[1];
  *v19 = v17;
  v19[1] = v18;
  outlined consume of Data._Representation(v20, v21);
  v22 = (uint64_t *)(a2 + a3[9]);
  v23 = *v22;
  v24 = v22[1];
  v25 = (uint64_t *)(a1 + a3[9]);
  v26 = *v25;
  v27 = v25[1];
  *v25 = v23;
  v25[1] = v24;
  outlined consume of Data._Representation(v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for EncryptDataMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25C424(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 254)
  {
    v3 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) - 2;
    if (v3 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for EncryptDataMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25C500(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 254)
    *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for EncryptDataMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for EncryptDataMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for EncryptDataMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for EncryptDataMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for EncryptDataMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EncryptDataMessage.CodingKeys()
{
  return &type metadata for EncryptDataMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for DecryptDataMessage(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v26;

  v26 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v26 & 0x20000) != 0)
  {
    v21 = *a2;
    swift_retain();
    *a1 = v21;
    return *a1 + ((v26 + 16) & ~(unint64_t)v26);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v10 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (uint64_t *)((char *)a2 + a3[5]);
    v9 = *v4;
    v11 = v4[1];
    outlined copy of Data._Representation(*v4, v11);
    *v10 = v9;
    v10[1] = v11;
    v13 = (_QWORD *)((char *)a1 + a3[6]);
    v5 = (uint64_t *)((char *)a2 + a3[6]);
    v12 = *v5;
    v14 = v5[1];
    outlined copy of Data._Representation(*v5, v14);
    *v13 = v12;
    v13[1] = v14;
    v16 = (_QWORD *)((char *)a1 + a3[7]);
    v6 = (uint64_t *)((char *)a2 + a3[7]);
    v15 = *v6;
    v17 = v6[1];
    outlined copy of Data._Representation(*v6, v17);
    *v16 = v15;
    v16[1] = v17;
    v19 = (_QWORD *)((char *)a1 + a3[8]);
    v7 = (uint64_t *)((char *)a2 + a3[8]);
    v18 = *v7;
    v20 = v7[1];
    outlined copy of Data._Representation(*v7, v20);
    *v19 = v18;
    v19[1] = v20;
    return (unint64_t)a1;
  }
}

uint64_t destroy for DecryptDataMessage(uint64_t a1, int *a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t initializeWithCopy for DecryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v9 = a3[5];
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a2 + v9 + 8);
  outlined copy of Data._Representation(v10, v11);
  v4 = (uint64_t *)(a1 + v9);
  *v4 = v10;
  v4[1] = v11;
  v12 = a3[6];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a2 + v12 + 8);
  outlined copy of Data._Representation(v13, v14);
  v5 = (uint64_t *)(a1 + v12);
  *v5 = v13;
  v5[1] = v14;
  v15 = a3[7];
  v16 = *(_QWORD *)(a2 + v15);
  v17 = *(_QWORD *)(a2 + v15 + 8);
  outlined copy of Data._Representation(v16, v17);
  v6 = (uint64_t *)(a1 + v15);
  *v6 = v16;
  v6[1] = v17;
  v20 = a3[8];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  result = a1;
  v8 = (uint64_t *)(a1 + v20);
  *v8 = v21;
  v8[1] = v22;
  return result;
}

uint64_t assignWithCopy for DecryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v17 = a3[5];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a2 + v17 + 8);
  outlined copy of Data._Representation(v18, v19);
  v4 = (uint64_t *)(a1 + v17);
  v5 = *(_QWORD *)(a1 + v17);
  v6 = *(_QWORD *)(a1 + v17 + 8);
  *v4 = v18;
  v4[1] = v19;
  outlined consume of Data._Representation(v5, v6);
  v20 = a3[6];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  v7 = (uint64_t *)(a1 + v20);
  v8 = *(_QWORD *)(a1 + v20);
  v9 = *(_QWORD *)(a1 + v20 + 8);
  *v7 = v21;
  v7[1] = v22;
  outlined consume of Data._Representation(v8, v9);
  v23 = a3[7];
  v24 = *(_QWORD *)(a2 + v23);
  v25 = *(_QWORD *)(a2 + v23 + 8);
  outlined copy of Data._Representation(v24, v25);
  v10 = (uint64_t *)(a1 + v23);
  v11 = *(_QWORD *)(a1 + v23);
  v12 = *(_QWORD *)(a1 + v23 + 8);
  *v10 = v24;
  v10[1] = v25;
  outlined consume of Data._Representation(v11, v12);
  v28 = a3[8];
  v29 = *(_QWORD *)(a2 + v28);
  v30 = *(_QWORD *)(a2 + v28 + 8);
  outlined copy of Data._Representation(v29, v30);
  v13 = (uint64_t *)(a1 + v28);
  v14 = *(_QWORD *)(a1 + v28);
  v15 = *(_QWORD *)(a1 + v28 + 8);
  *v13 = v29;
  v13[1] = v30;
  outlined consume of Data._Representation(v14, v15);
  return a1;
}

__n128 initializeWithTake for DecryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  result = *(__n128 *)(a2 + a3[8]);
  *(__n128 *)(a1 + a3[8]) = result;
  return result;
}

uint64_t assignWithTake for DecryptDataMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  v10 = (uint64_t *)(a2 + a3[6]);
  v11 = *v10;
  v12 = v10[1];
  v13 = (uint64_t *)(a1 + a3[6]);
  v14 = *v13;
  v15 = v13[1];
  *v13 = v11;
  v13[1] = v12;
  outlined consume of Data._Representation(v14, v15);
  v16 = (uint64_t *)(a2 + a3[7]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (uint64_t *)(a1 + a3[7]);
  v20 = *v19;
  v21 = v19[1];
  *v19 = v17;
  v19[1] = v18;
  outlined consume of Data._Representation(v20, v21);
  v22 = (uint64_t *)(a2 + a3[8]);
  v23 = *v22;
  v24 = v22[1];
  v25 = (uint64_t *)(a1 + a3[8]);
  v26 = *v25;
  v27 = v25[1];
  *v25 = v23;
  v25[1] = v24;
  outlined consume of Data._Representation(v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for DecryptDataMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25D1EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for DecryptDataMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25D2E8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for DecryptDataMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for DecryptDataMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for DecryptDataMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for DecryptDataMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for DecryptDataMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DecryptDataMessage.CodingKeys()
{
  return &type metadata for DecryptDataMessage.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for DeleteInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for DeleteInvitation(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for DeleteInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for DeleteInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for DeleteInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for DeleteInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeleteInvitation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25DA44(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for DeleteInvitation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25DAA0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for DeleteInvitation()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for DeleteInvitation.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for DeleteInvitation.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for DeleteInvitation.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for DeleteInvitation.CodingKeys()
{
  return &type metadata for DeleteInvitation.CodingKeys;
}

ValueMetadata *type metadata accessor for InitCKSchemasMessage()
{
  return &type metadata for InitCKSchemasMessage;
}

ValueMetadata *type metadata accessor for InitCKSchemasMessage.CodingKeys()
{
  return &type metadata for InitCKSchemasMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for AccountNotificationMessage()
{
  return &type metadata for AccountNotificationMessage;
}

ValueMetadata *type metadata accessor for AccountNotificationMessage.CodingKeys()
{
  return &type metadata for AccountNotificationMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for FetchMemberKeyXPCMessage(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v15;
  int v16;

  v15 = type metadata accessor for GPKMemberKeyRequest();
  v16 = *(_DWORD *)(*(_QWORD *)(v15 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
    v3 = *(int *)(v15 + 20);
    v7 = (char *)a1 + v3;
    *(_QWORD *)((char *)a1 + v3) = *(uint64_t *)((char *)a2 + v3);
    v8 = *(uint64_t *)((char *)a2 + v3 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    v9 = (char *)a1 + *(int *)(v15 + 24);
    v10 = (uint64_t *)((char *)a2 + *(int *)(v15 + 24));
    if ((v10[1] & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v5 = *v10;
      v6 = v10[1];
      outlined copy of Data._Representation(*v10, v6);
      *(_QWORD *)v9 = v5;
      *((_QWORD *)v9 + 1) = v6;
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for FetchMemberKeyXPCMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v5;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKMemberKeyRequest();
  swift_bridgeObjectRelease();
  result = a1;
  v5 = *(int *)(v3 + 24);
  if ((*(_QWORD *)(a1 + v5 + 8) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + v5), *(_QWORD *)(a1 + v5 + 8));
  return result;
}

uint64_t initializeWithCopy for FetchMemberKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  v9 = type metadata accessor for GPKMemberKeyRequest();
  v3 = (_QWORD *)(a2 + *(int *)(v9 + 20));
  v10 = (_QWORD *)(a1 + *(int *)(v9 + 20));
  *v10 = *v3;
  v11 = v3[1];
  swift_bridgeObjectRetain();
  v10[1] = v11;
  v13 = *(int *)(v9 + 24);
  if ((*(_QWORD *)(a2 + v13 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + v13);
    v7 = *(_QWORD *)(a2 + v13 + 8);
    outlined copy of Data._Representation(v6, v7);
    v4 = (uint64_t *)(a1 + v13);
    *v4 = v6;
    v4[1] = v7;
  }
  return a1;
}

uint64_t assignWithCopy for FetchMemberKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  v16 = type metadata accessor for GPKMemberKeyRequest();
  v3 = *(int *)(v16 + 20);
  v14 = a1 + v3;
  *(_QWORD *)(a1 + v3) = *(_QWORD *)(a2 + v3);
  v15 = *(_QWORD *)(a2 + v3 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v14 + 8) = v15;
  swift_bridgeObjectRelease();
  v18 = *(int *)(v16 + 24);
  if ((*(_QWORD *)(a1 + v18 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v18 + 8) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + v18);
      v10 = *(_QWORD *)(a2 + v18 + 8);
      outlined copy of Data._Representation(v9, v10);
      v7 = (uint64_t *)(a1 + v18);
      *v7 = v9;
      v7[1] = v10;
    }
  }
  else if ((*(_QWORD *)(a2 + v18 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID(a1 + v18);
    *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + v18);
    v12 = *(_QWORD *)(a2 + v18 + 8);
    outlined copy of Data._Representation(v11, v12);
    v4 = (uint64_t *)(a1 + v18);
    v5 = *(_QWORD *)(a1 + v18);
    v6 = *(_QWORD *)(a1 + v18 + 8);
    *v4 = v11;
    v4[1] = v12;
    outlined consume of Data._Representation(v5, v6);
  }
  return a1;
}

uint64_t initializeWithTake for FetchMemberKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  v3 = type metadata accessor for GPKMemberKeyRequest();
  *(_OWORD *)(a1 + *(int *)(v3 + 20)) = *(_OWORD *)(a2 + *(int *)(v3 + 20));
  *(_OWORD *)(a1 + *(int *)(v3 + 24)) = *(_OWORD *)(a2 + *(int *)(v3 + 24));
  return a1;
}

uint64_t assignWithTake for FetchMemberKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  v12 = type metadata accessor for GPKMemberKeyRequest();
  v3 = *(int *)(v12 + 20);
  v4 = (_QWORD *)(a2 + v3);
  v5 = (_QWORD *)(a1 + v3);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v14 = *(int *)(v12 + 24);
  if ((*(_QWORD *)(a1 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else if ((*(_QWORD *)(a2 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID(a1 + v14);
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + v14 + 8);
    v7 = (_QWORD *)(a1 + v14);
    v8 = *(_QWORD *)(a1 + v14);
    v9 = *(_QWORD *)(a1 + v14 + 8);
    *v7 = *(_QWORD *)(a2 + v14);
    v7[1] = v6;
    outlined consume of Data._Representation(v8, v9);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchMemberKeyXPCMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25E784(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKMemberKeyRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for FetchMemberKeyXPCMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25E7E0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKMemberKeyRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for FetchMemberKeyXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKMemberKeyRequest();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for FetchMemberKeyXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchMemberKeyXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for FetchMemberKeyXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for FetchMemberKeyXPCMessage.CodingKeys()
{
  return &type metadata for FetchMemberKeyXPCMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for FetchGroupKeyXPCMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  int v12;

  v11 = type metadata accessor for GPKGroupKeyRequest();
  v12 = *(_DWORD *)(*(_QWORD *)(v11 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
    v3 = *(int *)(v11 + 20);
    v5 = (char *)a1 + v3;
    *(_QWORD *)((char *)a1 + v3) = *(_QWORD *)((char *)a2 + v3);
    v6 = *(_QWORD *)((char *)a2 + v3 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v5 + 1) = v6;
    *((_BYTE *)a1 + *(int *)(v11 + 24)) = *((_BYTE *)a2 + *(int *)(v11 + 24)) & 1;
    return (unint64_t)a1;
  }
}

uint64_t destroy for FetchGroupKeyXPCMessage(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for GPKGroupKeyRequest();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FetchGroupKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  v8 = type metadata accessor for GPKGroupKeyRequest();
  v3 = *(int *)(v8 + 20);
  v6 = a1 + v3;
  *(_QWORD *)(a1 + v3) = *(_QWORD *)(a2 + v3);
  v7 = *(_QWORD *)(a2 + v3 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(v6 + 8) = v7;
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24)) & 1;
  return result;
}

uint64_t assignWithCopy for FetchGroupKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  v7 = type metadata accessor for GPKGroupKeyRequest();
  v3 = *(int *)(v7 + 20);
  v5 = a1 + v3;
  *(_QWORD *)(a1 + v3) = *(_QWORD *)(a2 + v3);
  v6 = *(_QWORD *)(a2 + v3 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v5 + 8) = v6;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24)) & 1;
  return result;
}

__n128 initializeWithTake for FetchGroupKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  v3 = type metadata accessor for GPKGroupKeyRequest();
  result = *(__n128 *)(a2 + *(int *)(v3 + 20));
  *(__n128 *)(a1 + *(int *)(v3 + 20)) = result;
  *(_BYTE *)(a1 + *(int *)(v3 + 24)) = *(_BYTE *)(a2 + *(int *)(v3 + 24)) & 1;
  return result;
}

uint64_t assignWithTake for FetchGroupKeyXPCMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  v7 = type metadata accessor for GPKGroupKeyRequest();
  v3 = *(int *)(v7 + 20);
  v4 = (_QWORD *)(a2 + v3);
  v5 = (_QWORD *)(a1 + v3);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24)) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for FetchGroupKeyXPCMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25F0C0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupKeyRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for FetchGroupKeyXPCMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D25F11C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupKeyRequest();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for FetchGroupKeyXPCMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupKeyRequest();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for FetchGroupKeyXPCMessage.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchGroupKeyXPCMessage.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for FetchGroupKeyXPCMessage.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for FetchGroupKeyXPCMessage.CodingKeys()
{
  return &type metadata for FetchGroupKeyXPCMessage.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchGroupKeyXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchGroupKeyXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchGroupKeyXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchGroupKeyXPCMessage.CodingKeys and conformance FetchGroupKeyXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchMemberKeyXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchMemberKeyXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchMemberKeyXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchMemberKeyXPCMessage.CodingKeys and conformance FetchMemberKeyXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in AccountNotificationMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in AccountNotificationMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type AccountNotificationMessage.CodingKeys and conformance AccountNotificationMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitCKSchemasMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitCKSchemasMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type InitCKSchemasMessage.CodingKeys and conformance InitCKSchemasMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in DeleteInvitation.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in DeleteInvitation.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
}

unint64_t base witness table accessor for Equatable in DeleteInvitation.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteInvitation.CodingKeys and conformance DeleteInvitation.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in DecryptDataMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in DecryptDataMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in DecryptDataMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DecryptDataMessage.CodingKeys and conformance DecryptDataMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in EncryptDataMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in EncryptDataMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in EncryptDataMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type EncryptDataMessage.CodingKeys and conformance EncryptDataMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchRSVPQueueMessagePayload.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchRSVPQueueMessagePayload.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchRSVPQueueMessagePayload.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchRSVPQueueMessagePayload.CodingKeys and conformance FetchRSVPQueueMessagePayload.CodingKeys();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in GroupKitServerRequestMessage<A, B>.CodingKeys(uint64_t a1)
{
  return MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomStringConvertible in GroupKitServerRequestMessage<A, B>.CodingKeys(uint64_t a1)
{
  return MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys, a1);
}

uint64_t base witness table accessor for Equatable in GroupKitServerRequestMessage<A, B>.CodingKeys(uint64_t a1)
{
  return MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>.CodingKeys, a1);
}

unint64_t base witness table accessor for CustomDebugStringConvertible in KeyDistributionRequestMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in KeyDistributionRequestMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in KeyDistributionRequestMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.CodingKeys and conformance KeyDistributionRequestMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
}

unint64_t base witness table accessor for Equatable in KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys and conformance KeyDistributionRequestMessage.KeyDistributionResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GroupRefreshMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GroupRefreshMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GroupRefreshMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupRefreshMessage.CodingKeys and conformance GroupRefreshMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchAllUsersMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchAllUsersMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchAllUsersMessage.CodingKeys and conformance FetchAllUsersMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in DeleteAllContentMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in DeleteAllContentMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteAllContentMessage.CodingKeys and conformance DeleteAllContentMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RegisterSelfMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RegisterSelfMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RegisterSelfMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RegisterSelfMessage.CodingKeys and conformance RegisterSelfMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CheckKeyRegistrationMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CheckKeyRegistrationMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CheckKeyRegistrationMessage.CodingKeys and conformance CheckKeyRegistrationMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in ReceivedGroupDeletionBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast.CodingKeys and conformance ReceivedGroupDeletionBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RemovedFromGroupBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RemovedFromGroupBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RemovedFromGroupBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type RemovedFromGroupBroadcast.CodingKeys and conformance RemovedFromGroupBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ReceivedGroupUpdateBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ReceivedGroupUpdateBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in ReceivedGroupUpdateBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast.CodingKeys and conformance ReceivedGroupUpdateBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ReceivedGroupInviteBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ReceivedGroupInviteBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in ReceivedGroupInviteBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast.CodingKeys and conformance ReceivedGroupInviteBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in MemberInvitationResponseBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in MemberInvitationResponseBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in MemberInvitationResponseBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type MemberInvitationResponseBroadcast.CodingKeys and conformance MemberInvitationResponseBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InvitationDeletedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InvitationDeletedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InvitationDeletedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type InvitationDeletedBroadcast.CodingKeys and conformance InvitationDeletedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GroupDeletedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GroupDeletedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GroupDeletedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupDeletedBroadcast.CodingKeys and conformance GroupDeletedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in LeftGroupBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in LeftGroupBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in LeftGroupBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type LeftGroupBroadcast.CodingKeys and conformance LeftGroupBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GroupUpdatedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GroupUpdatedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GroupUpdatedBroadcast.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupUpdatedBroadcast.CodingKeys and conformance GroupUpdatedBroadcast.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in MetricsXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in MetricsXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in MetricsXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MetricsXPCMessage.CodingKeys and conformance MetricsXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in DeleteGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in DeleteGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in DeleteGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type DeleteGroupXPCMessage.CodingKeys and conformance DeleteGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in MembershipXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in MembershipXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in MembershipXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MembershipXPCMessage.CodingKeys and conformance MembershipXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ProfileInformationXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ProfileInformationXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in ProfileInformationXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type ProfileInformationXPCMessage.CodingKeys and conformance ProfileInformationXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RSVPXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RSVPXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RSVPXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPXPCMessage.CodingKeys and conformance RSVPXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SetPreferredHandleMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SetPreferredHandleMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SetPreferredHandleMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type SetPreferredHandleMessage.CodingKeys and conformance SetPreferredHandleMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchPreferredHandleMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchPreferredHandleMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchPreferredHandleMessage.CodingKeys and conformance FetchPreferredHandleMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchAccountAliasesMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchAccountAliasesMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchAccountAliasesMessage.CodingKeys and conformance FetchAccountAliasesMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchPrimaryAccountMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchPrimaryAccountMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchPrimaryAccountMessage.CodingKeys and conformance FetchPrimaryAccountMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in NoReply.CodingKeys()
{
  return lazy protocol witness table accessor for type NoReply.CodingKeys and conformance NoReply.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in NoReply.CodingKeys()
{
  return lazy protocol witness table accessor for type NoReply.CodingKeys and conformance NoReply.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CheckAvailabilityMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CheckAvailabilityMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CheckAvailabilityMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CheckAvailabilityMessage.CodingKeys and conformance CheckAvailabilityMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in UpdateGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in UpdateGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in UpdateGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type UpdateGroupXPCMessage.CodingKeys and conformance UpdateGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CreateGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CreateGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CreateGroupXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CreateGroupXPCMessage.CodingKeys and conformance CreateGroupXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchGroupsXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchGroupsXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchGroupsXPCMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchGroupsXPCMessage.CodingKeys and conformance FetchGroupsXPCMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in StartBroadcastMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in StartBroadcastMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type StartBroadcastMessage.CodingKeys and conformance StartBroadcastMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in PingMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in PingMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in PingMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type PingMessage.CodingKeys and conformance PingMessage.CodingKeys();
}

uint64_t unsafeSoftLinkSymbol<A>(name:frameworkNameOrPath:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = 0;
  v22 = a6;
  v20 = a1;
  v21 = a2;
  v18 = a3;
  v19 = a4;
  v17 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = (void *)MEMORY[0x242632560](a3, a4);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  v14 = CUTWeakLinkSymbol();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  if (!v14)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 1);
  v16 = v14;
  v15 = v14;
  v8 = *(_QWORD *)(a6 - 8);
  if (*(_QWORD *)(v8 + 64) != 8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 16))(a7, &v15, a6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a7, 0, 1, a6);
}

uint64_t softLinkClass(name:frameworkNameOrPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10;
  void *v11;
  uint64_t v12;

  swift_bridgeObjectRetain();
  v11 = (void *)MEMORY[0x242632560](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10 = (id)MEMORY[0x242632560](a3, a4);
  swift_bridgeObjectRelease();
  v12 = CUTWeakLinkClass();

  if (v12)
    return swift_getObjCClassMetadata();
  else
    return 0;
}

uint64_t Data.init(hexString:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v37 = a1;
  v38 = a2;
  v55 = 0;
  v56 = 0;
  v39 = 0;
  v50 = 0;
  v43 = 0;
  v41 = 0;
  v53 = a1;
  v54 = a2;
  if ((String.isEmpty.getter() & 1) != 0)
    goto LABEL_6;
  v36 = String.count.getter();
  if (v36 % 2)
    goto LABEL_6;
  v51 = v37;
  v52 = v38;
  v2 = lazy protocol witness table accessor for type String and conformance String();
  v34 = v39;
  v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))implicit closure #1 in Data.init(hexString:), 0, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v33);
  v26 = v35;
  v50 = v35;
  v25 = v49;
  v49[0] = specialized Array.startIndex.getter();
  v48 = MEMORY[0x2426327B8](v35);
  v47 = 2;
  stride<A>(from:to:by:)();
  v44 = v49[1];
  v45 = v49[2];
  v46 = v49[3];
  swift_bridgeObjectRetain();
  v27 = &v10;
  MEMORY[0x24BDAC7A8](&v10);
  v28 = v9;
  v9[2] = v3;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StrideTo<Int>);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt8?);
  v4 = lazy protocol witness table accessor for type StrideTo<Int> and conformance StrideTo<A>();
  v5 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Data.init(hexString:), (uint64_t)v28, v29, v30, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v33);
  v31 = 0;
  v32 = v5;
  v22 = v5;
  swift_bridgeObjectRelease();
  v43 = v22;
  v42 = v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8?]);
  lazy protocol witness table accessor for type [UInt8?] and conformance [A]();
  v24 = Sequence.compactMap<A>(_:)();
  v20 = v24;
  v41 = v24;
  v21 = MEMORY[0x2426327A0]();
  v6 = MEMORY[0x242632794](v22, v30);
  if (v21 != v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    v11 = 0;
    v12 = 0xF000000000000000;
    swift_bridgeObjectRelease();
    v18 = v11;
    v19 = v12;
    return v18;
  }
  swift_bridgeObjectRetain();
  v14 = &v40;
  v40 = v20;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  v16 = Data.init<A>(_:)();
  v17 = v7;
  outlined copy of Data._Representation(v16, v7);
  v15 = &v55;
  v55 = v16;
  v56 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Data((uint64_t)v15);
  v18 = v16;
  v19 = v17;
  return v18;
}

uint64_t implicit closure #1 in Data.init(hexString:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain();
  result = MEMORY[0x242632668](v4, v5);
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t closure #1 in Data.init(hexString:)(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *a1;
  result = MEMORY[0x2426327F4]();
  v6 = result;
  v7 = v3;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = MEMORY[0x2426327F4](v9 + 1, a2);
    MEMORY[0x2426325F0](v6, v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    lazy protocol witness table accessor for type String and conformance String();
    return FixedWidthInteger.init<A>(_:radix:)();
  }
  return result;
}

uint64_t partial apply for closure #1 in Data.init(hexString:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in Data.init(hexString:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void (*v34)(char *, char *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v34 = a1;
  v35 = a2;
  v79 = a3;
  v71 = a4;
  v36 = a5;
  v78 = a6;
  v38 = a8;
  v39 = "Fatal error";
  v40 = "Index out of bounds";
  v41 = "Swift/Collection.swift";
  v42 = "Range requires lowerBound <= upperBound";
  v43 = "Swift/Range.swift";
  v44 = "Index out of range";
  v45 = "Unexpectedly found nil while unwrapping an Optional value";
  v46 = "Swift/Sequence.swift";
  v86 = a3;
  v85 = a4;
  v84 = a5;
  v47 = *(_QWORD *)(a5 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)&v21 - v48;
  v50 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v48);
  v51 = (char *)&v21 - v50;
  v52 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v50);
  v53 = (char *)&v21 - v52;
  v54 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v52);
  v55 = (char *)&v21 - v54;
  v57 = MEMORY[0x24BEE0E28];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = 0;
  v58 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64);
  v59 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v72);
  v61 = (char *)&v21 - v59;
  v62 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v63 = (uint64_t)&v21 - v62;
  v64 = *(_QWORD *)(v13 - 8);
  v65 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v66 = (char *)&v21 - v65;
  v75 = *(_QWORD *)(v15 - 8);
  v67 = (*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v21 - v67;
  v68 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = (*(_QWORD *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v77 = (char *)&v21 - v70;
  v80 = dispatch thunk of Sequence.underestimatedCount.getter();
  v83 = MEMORY[0x242632B84](v71);
  v73 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v80);
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v76, v79);
  dispatch thunk of Sequence.makeIterator()();
  result = v80;
  if (v80 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  v32 = 0;
  for (i = v37; ; i = v22)
  {
    v30 = i;
    v31 = v32;
    if (v32 == v80)
      goto LABEL_16;
    if (v31 < 0 || v31 >= v80)
      goto LABEL_15;
    v81 = v31;
    if (v80 < 0)
      goto LABEL_14;
    if (v31 >= v80)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      v81 = 0;
      v82 = 1;
      v28 = v31;
      goto LABEL_17;
    }
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_32;
    v82 = 0;
    v28 = v29;
LABEL_17:
    v27 = v28;
    if ((v82 & 1) != 0)
      break;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v61, 1, AssociatedTypeWitness) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v20 = v30;
    v34(v61, v49);
    v22 = v20;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
      outlined destroy of ContiguousArray<A1>();
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v49, v36);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v61, AssociatedTypeWitness);
      return v21;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v61, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
    result = v22;
    v32 = v27;
  }
  for (j = v30; ; j = v23)
  {
    v25 = j;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
      outlined destroy of A.Element?(v63, AssociatedTypeWitness);
      v24 = v83;
      swift_retain();
      swift_release();
      return v24;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v66, v63, AssociatedTypeWitness);
    v18 = v25;
    v34(v66, v51);
    v23 = v18;
    if (v18)
      break;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v66, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
  outlined destroy of ContiguousArray<A1>();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v51, v36);
  return v21;
}

unint64_t lazy protocol witness table accessor for type StrideTo<Int> and conformance StrideTo<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type StrideTo<Int> and conformance StrideTo<A>;
  if (!lazy protocol witness table cache variable for type StrideTo<Int> and conformance StrideTo<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for StrideTo<Int>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE49C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type StrideTo<Int> and conformance StrideTo<A>);
    return v1;
  }
  return v3;
}

_BYTE *closure #2 in Data.init(hexString:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  char v2;

  v2 = result[1] & 1;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type [UInt8?] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UInt8?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8?] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8?]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8?] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t UUID.init(hexString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::String v8;
  _QWORD v10[11];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v17 = a3;
  v21 = a1;
  v20 = a2;
  v37 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v18 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v19 = (uint64_t)v10 - v18;
  v22 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v10 - v24;
  v37 = (char *)v10 - v24;
  v35 = v4;
  v36 = v5;
  if (String.count.getter() == 32)
  {
    swift_bridgeObjectRetain();
    v33 = v21;
    v34 = v20;
    v14 = MEMORY[0x24BEE1768];
    v6 = _allocateUninitializedArray<A>(_:)();
    *v7 = 8;
    v7[1] = 13;
    v7[2] = 18;
    v7[3] = 23;
    _finalizeUninitializedArray<A>(_:)();
    v15 = v6;
    v32 = v6;
    swift_bridgeObjectRetain();
    v29 = v15;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance [A]();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Int]>);
      IndexingIterator.next()();
      v13 = v27;
      if ((v28 & 1) != 0)
        break;
      v12 = v13;
      v10[3] = v13;
      v26 = v13;
      v8 = Character.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
      v10[6] = v8._countAndFlagsBits;
      v10[8] = v8._object;
      v10[4] = v33;
      v10[5] = v34;
      swift_bridgeObjectRetain();
      v10[0] = v33;
      v10[1] = v34;
      swift_bridgeObjectRetain();
      v10[2] = String.startIndex.getter();
      swift_bridgeObjectRelease();
      v10[7] = String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      String.insert(_:at:)();
      swift_bridgeObjectRelease();
    }
    outlined destroy of IndexingIterator<[Int]>();
    v10[9] = v33;
    v10[10] = v34;
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v25, v19, v22);
      swift_bridgeObjectRelease();
      outlined destroy of String();
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v17, v25, v22);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, v22);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    }
    outlined destroy of UUID?(v19);
    swift_bridgeObjectRelease();
    outlined destroy of String();
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v17, 1, 1, v22);
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[Int]>()
{
  swift_bridgeObjectRelease();
}

uint64_t UUID.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;

  v11 = v0;
  v8 = UUID.uuid.getter();
  v9 = v1;
  v10[0] = v8;
  v10[1] = v1;
  v6 = 16;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8));
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t (*)(uint64_t))partial apply for closure #1 in UUID.data.getter, (uint64_t)v5, v2, MEMORY[0x24BEE4078], MEMORY[0x24BDCDDE8], MEMORY[0x24BEE40A8], v4);
  return v7;
}

uint64_t closure #1 in UUID.data.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = MEMORY[0x2426320BC]();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t partial apply for closure #1 in UUID.data.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in UUID.data.getter(a1);
}

uint64_t _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = a2;
  v11 = a5;
  v12 = a8;
  v20 = a4;
  v19 = a5;
  v18 = a6;
  v13 = *(_QWORD *)(a5 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8]();
  v16 = (char *)&v11 - v14;
  result = v15(v9);
  v17 = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v12, v16, v11);
  return result;
}

uint64_t GroupID.encode(to:)(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = 0;
  v8 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v3 = GroupID.rawValue.getter();
  v4 = v1;
  Data.hexString.getter();
  outlined consume of Data._Representation(v3, v4);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t GroupID.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *object;
  int v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  char *v77;

  v46 = a2;
  v54 = a1;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v70 = 0;
  v71 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  v47 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v48 = (uint64_t)&v17 - v47;
  v49 = 0;
  v50 = type metadata accessor for GPKGroupID();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v53 = (uint64_t)&v17 - v52;
  v77 = (char *)&v17 - v52;
  v55 = type metadata accessor for GroupID();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v54);
  v58 = (char *)&v17 - v57;
  v59 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (_QWORD *)MEMORY[0x24BDAC7A8](v3);
  v60 = (char *)&v17 - v59;
  v76 = (char *)&v17 - v59;
  v75 = v5;
  v63 = v5[3];
  v62 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v63);
  v6 = v61;
  dispatch thunk of Decoder.singleValueContainer()();
  v64 = v6;
  v65 = v6;
  if (v6)
  {
    v37 = v65;
  }
  else
  {
    v41 = v73;
    v40 = v74;
    __swift_project_boxed_opaque_existential_1(&v72, v73);
    v7 = v64;
    v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v42 = v7;
    v43 = v8;
    v44 = v9;
    v45 = v7;
    if (v7)
    {
      v19 = v45;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
      v37 = v19;
    }
    else
    {
      v39 = v44;
      v38 = v43;
      v70 = v43;
      v71 = v44;
      swift_bridgeObjectRetain();
      GPKGroupID.init(hexString:)(v38, v39, v48);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50) == 1)
      {
        outlined destroy of GPKGroupID?(v48);
        v30 = 0;
        v34 = type metadata accessor for DecodingError();
        v25 = 1;
        v36 = swift_allocError();
        v33 = v10;
        v35 = &v72;
        v23 = v73;
        v22 = v74;
        __swift_project_boxed_opaque_existential_1(&v72, v73);
        v31 = MEMORY[0x242632D70](v23, v22);
        v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v27 = &v68;
        v68 = v11;
        v69 = v12;
        v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decoded value ", 0xEuLL, v25 & 1);
        object = v13._object;
        DefaultStringInterpolation.appendLiteral(_:)(v13);
        swift_bridgeObjectRelease();
        v66 = v38;
        v67 = v39;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" cannot be converted to UUID", 0x1CuLL, v25 & 1);
        v26 = v14._object;
        DefaultStringInterpolation.appendLiteral(_:)(v14);
        swift_bridgeObjectRelease();
        v29 = v68;
        v28 = v69;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v32 = String.init(stringInterpolation:)();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v34 - 8) + 104))(v33, *MEMORY[0x24BEE26D8]);
        swift_willThrow();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
        v37 = v36;
      }
      else
      {
        outlined init with take of GPKGroupID(v48, v53);
        GPKGroupID.data.getter();
        v15 = v42;
        GroupID.init(_:)();
        v20 = v15;
        v21 = v15;
        if (!v15)
        {
          (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v60, v58, v55);
          outlined destroy of GPKGroupID(v53);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
          (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v46, v60, v55);
          __swift_destroy_boxed_opaque_existential_1(v54);
          return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v60, v55);
        }
        v18 = v21;
        outlined destroy of GPKGroupID(v53);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
        v37 = v18;
      }
    }
  }
  v17 = v37;
  return __swift_destroy_boxed_opaque_existential_1(v54);
}

uint64_t outlined destroy of GPKGroupID?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for GPKGroupID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 1))
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t GroupKitUserID.encode(to:)(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = 0;
  v8 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v3 = GroupID.rawValue.getter();
  v4 = v1;
  Data.hexString.getter();
  outlined consume of Data._Representation(v3, v4);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t GroupKitUserID.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *object;
  int v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;

  v51 = a2;
  v52 = a1;
  v78 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v64 = 0;
  v65 = 0;
  v53 = type metadata accessor for GroupKitUserID();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)&v16 - v55;
  v57 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (_QWORD *)MEMORY[0x24BDAC7A8](v2);
  v58 = (char *)&v16 - v57;
  v78 = (char *)&v16 - v57;
  v77 = v4;
  v61 = v4[3];
  v60 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v61);
  v5 = v59;
  dispatch thunk of Decoder.singleValueContainer()();
  v62 = v5;
  v63 = v5;
  if (v5)
  {
    v38 = v63;
  }
  else
  {
    v46 = v75;
    v45 = v76;
    __swift_project_boxed_opaque_existential_1(&v74, v75);
    v6 = v62;
    v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v47 = v6;
    v48 = v7;
    v49 = v8;
    v50 = v6;
    if (v6)
    {
      v18 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
      v38 = v18;
    }
    else
    {
      v42 = v49;
      v41 = v48;
      v72 = v48;
      v73 = v49;
      swift_bridgeObjectRetain();
      GPKUserID.init(from:)(v41, v42, &v70);
      v43 = v70;
      v44 = v71;
      if ((v71 & 0xF000000000000000) == 0xF000000000000000)
      {
        v31 = 0;
        v35 = type metadata accessor for DecodingError();
        v26 = 1;
        v37 = swift_allocError();
        v34 = v9;
        v36 = &v74;
        v24 = v75;
        v23 = v76;
        __swift_project_boxed_opaque_existential_1(&v74, v75);
        v32 = MEMORY[0x242632D70](v24, v23);
        v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v28 = &v68;
        v68 = v10;
        v69 = v11;
        v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decoded value ", 0xEuLL, v26 & 1);
        object = v12._object;
        DefaultStringInterpolation.appendLiteral(_:)(v12);
        swift_bridgeObjectRelease();
        v66 = v41;
        v67 = v42;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" cannot be converted to UUID", 0x1CuLL, v26 & 1);
        v27 = v13._object;
        DefaultStringInterpolation.appendLiteral(_:)(v13);
        swift_bridgeObjectRelease();
        v30 = v68;
        v29 = v69;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v33 = String.init(stringInterpolation:)();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v35 - 8) + 104))(v34, *MEMORY[0x24BEE26D8]);
        swift_willThrow();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        v38 = v37;
      }
      else
      {
        v39 = v43;
        v40 = v44;
        v20 = v44;
        v19 = v43;
        v64 = v43;
        v65 = v44;
        outlined copy of Data._Representation(v43, v44);
        v14 = v47;
        GroupKitUserID.init(_:)();
        v21 = v14;
        v22 = v14;
        if (!v14)
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v58, v56, v53);
          outlined consume of Data._Representation(v19, v20);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
          (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v51, v58, v53);
          __swift_destroy_boxed_opaque_existential_1(v52);
          return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v53);
        }
        v17 = v22;
        outlined consume of Data._Representation(v19, v20);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
        v38 = v17;
      }
    }
  }
  v16 = v38;
  return __swift_destroy_boxed_opaque_existential_1(v52);
}

uint64_t GroupRole.init(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  char *v16;

  v6 = a2;
  v7 = a1;
  v16 = 0;
  v15 = 0;
  v8 = type metadata accessor for GroupRole();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v5 - v10;
  v12 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v5 - v10);
  v13 = (char *)&v5 - v12;
  v16 = (char *)&v5 - v12;
  v15 = a1;
  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 184))(&v14);
  if ((v14 & 1) != 0)
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE3E750], v8);
  else
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE3E758], v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v6, v13, v8);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t outlined destroy of A.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE42A0], MEMORY[0x24BEE4260]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return v0;
  }
  return v2;
}

uint64_t GPKFeatureAvailability.description.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("available", 9uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unavailable", 0xBuLL, 1)._countAndFlagsBits;
}

GroupKit::GPKFeatureAvailability_optional __swiftcall GPKFeatureAvailability.init(rawValue:)(Swift::Int64 rawValue)
{
  _BYTE *v1;
  char v3;

  if (!rawValue)
  {
    v3 = 0;
LABEL_6:
    *v1 = v3 & 1;
    return (GroupKit::GPKFeatureAvailability_optional)rawValue;
  }
  if (rawValue == 1)
  {
    v3 = 1;
    goto LABEL_6;
  }
  *v1 = 2;
  return (GroupKit::GPKFeatureAvailability_optional)rawValue;
}

BOOL GPKFeatureAvailability.rawValue.getter()
{
  _BYTE *v0;

  return (*v0 & 1) != 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKFeatureAvailability()
{
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability;
  if (!lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFeatureAvailability, &type metadata for GPKFeatureAvailability);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability;
  if (!lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFeatureAvailability, &type metadata for GPKFeatureAvailability);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKFeatureAvailability()
{
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKFeatureAvailability()
{
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKFeatureAvailability()
{
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::GPKFeatureAvailability_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GPKFeatureAvailability(Swift::Int64 *a1)
{
  return GPKFeatureAvailability.init(rawValue:)(*a1);
}

BOOL protocol witness for RawRepresentable.rawValue.getter in conformance GPKFeatureAvailability@<W0>(_BOOL8 *a1@<X8>)
{
  _BOOL8 result;

  result = GPKFeatureAvailability.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKFeatureAvailability()
{
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKFeatureAvailability()
{
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKFeatureAvailability()
{
  return GPKFeatureAvailability.description.getter();
}

unint64_t base witness table accessor for Equatable in GPKFeatureAvailability()
{
  return lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
}

uint64_t getEnumTagSinglePayload for GPKFeatureAvailability(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKFeatureAvailability(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKFeatureAvailability(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKFeatureAvailability(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKFeatureAvailability()
{
  return &type metadata for GPKFeatureAvailability;
}

uint64_t type metadata accessor for GPK_DatabaseParticipants.Participant()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPK_DatabaseParticipants.Participant;
  if (!type metadata singleton initialization cache for GPK_DatabaseParticipants.Participant)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPK_DatabaseParticipants.participants.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPK_DatabaseParticipants.participants.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRetain();
  *v1 = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPK_DatabaseParticipants.participants.modify())()
{
  return GPK_DatabaseParticipants.participants.modify;
}

uint64_t GPK_DatabaseParticipants.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GPK_DatabaseParticipants() + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GPK_DatabaseParticipants()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPK_DatabaseParticipants;
  if (!type metadata singleton initialization cache for GPK_DatabaseParticipants)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPK_DatabaseParticipants.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v5[1] = 0;
  v8 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v8 - 8);
  v5[0] = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v6 = (char *)v5 - v5[0];
  (*(void (**)(void))(v2 + 16))();
  v3 = type metadata accessor for GPK_DatabaseParticipants();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v1 + *(int *)(v3 + 20), v6, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
}

uint64_t (*GPK_DatabaseParticipants.unknownFields.modify())()
{
  type metadata accessor for GPK_DatabaseParticipants();
  return GPK_DatabaseParticipants.unknownFields.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.userID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GPK_DatabaseParticipants.Participant.userID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GPK_DatabaseParticipants.Participant.userID.modify())()
{
  return GPK_DatabaseParticipants.Participant.userID.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.handle.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPK_DatabaseParticipants.Participant.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPK_DatabaseParticipants.Participant.handle.modify())()
{
  return GPK_DatabaseParticipants.Participant.handle.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.permission.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t GPK_DatabaseParticipants.Participant.permission.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*GPK_DatabaseParticipants.Participant.permission.modify())()
{
  return GPK_DatabaseParticipants.Participant.permission.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.inviteStatus.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t GPK_DatabaseParticipants.Participant.inviteStatus.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*GPK_DatabaseParticipants.Participant.inviteStatus.modify())()
{
  return GPK_DatabaseParticipants.Participant.inviteStatus.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.isMe.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 48) & 1;
}

uint64_t GPK_DatabaseParticipants.Participant.isMe.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result & 1;
  return result;
}

uint64_t (*GPK_DatabaseParticipants.Participant.isMe.modify())()
{
  return GPK_DatabaseParticipants.Participant.isMe.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GPK_DatabaseParticipants.Participant() + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GPK_DatabaseParticipants.Participant.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v5[1] = 0;
  v8 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v8 - 8);
  v5[0] = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v6 = (char *)v5 - v5[0];
  (*(void (**)(void))(v2 + 16))();
  v3 = type metadata accessor for GPK_DatabaseParticipants.Participant();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v1 + *(int *)(v3 + 36), v6, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
}

uint64_t (*GPK_DatabaseParticipants.Participant.unknownFields.modify())()
{
  type metadata accessor for GPK_DatabaseParticipants.Participant();
  return GPK_DatabaseParticipants.Participant.unknownFields.modify;
}

uint64_t GPK_DatabaseParticipants.Participant.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String *v2;
  void *v3;
  Swift::String v4;
  Swift::String *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String *v10;
  uint64_t v11;
  char *v12;

  v11 = a1;
  v12 = 0;
  v9 = type metadata accessor for GPK_DatabaseParticipants.Participant();
  v8 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v10 = (Swift::String *)((char *)&v7 - v8);
  v12 = (char *)&v7 - v8;
  v1 = Data.init()();
  v2 = v10;
  v10->_countAndFlagsBits = v1;
  v2->_object = v3;
  v4 = String.init()();
  v5 = v10;
  v10[1] = v4;
  v5[2]._countAndFlagsBits = 0;
  v5[2]._object = 0;
  LOBYTE(v5[3]._countAndFlagsBits) = 0;
  UnknownStorage.init()();
  return outlined init with take of GPK_DatabaseParticipants.Participant((uint64_t)v10, v11);
}

uint64_t outlined init with take of GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 48);
  v4 = *(int *)(type metadata accessor for GPK_DatabaseParticipants.Participant() + 36);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

char *GPK_DatabaseParticipants.init()@<X0>(char *a1@<X8>)
{
  _QWORD v2[2];
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;

  v5 = a1;
  v6 = 0;
  v2[1] = 0;
  v3 = type metadata accessor for GPK_DatabaseParticipants();
  v2[0] = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v4 = (char *)v2 - v2[0];
  v6 = (char *)v2 - v2[0];
  type metadata accessor for GPK_DatabaseParticipants.Participant();
  *(_QWORD *)v4 = _allocateUninitializedArray<A>(_:)();
  UnknownStorage.init()();
  return outlined init with take of GPK_DatabaseParticipants(v4, v5);
}

char *outlined init with take of GPK_DatabaseParticipants(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(int *)(type metadata accessor for GPK_DatabaseParticipants() + 20);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t one-time initialization function for _protobuf_package()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GPK", 3uLL, 1);
  result = v1._countAndFlagsBits;
  _protobuf_package = v1;
  return result;
}

Swift::String *_protobuf_package.unsafeMutableAddressor()
{
  if (one-time initialization token for _protobuf_package != -1)
    swift_once();
  return &_protobuf_package;
}

uint64_t one-time initialization function for protoMessageName()
{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".DatabaseParticipants", 0x15uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x2426325F0](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GPK_DatabaseParticipants.protoMessageName = v6;
  qword_256C57F00 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GPK_DatabaseParticipants.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".Participant", 0xCuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x2426325F0](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GPK_DatabaseParticipants.Participant.protoMessageName = v6;
  qword_256C57F28 = v7;
  return result;
}

uint64_t *GPK_DatabaseParticipants.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GPK_DatabaseParticipants.protoMessageName;
}

uint64_t static GPK_DatabaseParticipants.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GPK_DatabaseParticipants.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;

  v4 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v4, static GPK_DatabaseParticipants._protobuf_nameMap);
  __swift_project_value_buffer(v4, (uint64_t)static GPK_DatabaseParticipants._protobuf_nameMap);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v0 = *(int *)(v7 + 48);
  *v1 = 1;
  v6 = (char *)v1 + v0;
  *(_QWORD *)v6 = "participants";
  *((_QWORD *)v6 + 1) = 12;
  v6[16] = 2;
  v5 = *MEMORY[0x24BE5C318];
  v2 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v2 - 8) + 104))(v6, v5);
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t v20;

  v14 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v14, static GPK_DatabaseParticipants.Participant._protobuf_nameMap);
  __swift_project_value_buffer(v14, (uint64_t)static GPK_DatabaseParticipants.Participant._protobuf_nameMap);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v18 = v0;
  v1 = *(int *)(v20 + 48);
  *v0 = 1;
  v16 = (char *)v0 + v1;
  *(_QWORD *)v16 = "userID";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v15 = *MEMORY[0x24BE5C318];
  v19 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v19)(v16, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  v2 = *(int *)(v20 + 48);
  *(_QWORD *)((char *)v18 + v17) = 2;
  v3 = (char *)v18 + v17 + v2;
  *(_QWORD *)v3 = "handle";
  *((_QWORD *)v3 + 1) = 6;
  v3[16] = 2;
  v19();
  v4 = *(int *)(v20 + 48);
  v5 = (_QWORD *)((char *)v18 + 2 * v17);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "permission";
  *((_QWORD *)v6 + 1) = 10;
  v6[16] = 2;
  v19();
  v7 = *(int *)(v20 + 48);
  v8 = (_QWORD *)((char *)v18 + 3 * v17);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "inviteStatus";
  *((_QWORD *)v9 + 1) = 12;
  v9[16] = 2;
  v19();
  v10 = *(int *)(v20 + 48);
  v11 = (_QWORD *)((char *)v18 + 4 * v17);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "isMe";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v19();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
    return *(_QWORD *)a2;
  return v3;
}

uint64_t GPK_DatabaseParticipants._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GPK_DatabaseParticipants._protobuf_nameMap);
}

uint64_t static GPK_DatabaseParticipants._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GPK_DatabaseParticipants._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GPK_DatabaseParticipants.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in GPK_DatabaseParticipants.decodeMessage<A>(decoder:)();
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GPK_DatabaseParticipants.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GPK_DatabaseParticipants.Participant();
  lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t GPK_DatabaseParticipants.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v22 = a1;
  v18 = a2;
  v19 = a3;
  v33 = 0;
  v32 = 0;
  v34 = a2;
  v23 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (char *)v9 - v25;
  v33 = MEMORY[0x24BDAC7A8](v22);
  v32 = v3;
  v29 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = &v31;
  v31 = v29;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPK_DatabaseParticipants.Participant]);
  lazy protocol witness table accessor for type [GPK_DatabaseParticipants.Participant] and conformance [A]();
  v30 = Collection.isEmpty.getter();
  outlined destroy of [GPK_DatabaseParticipants.Participant]();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    v13 = v21;
  }
  else
  {
    v15 = *(_QWORD *)v20;
    swift_bridgeObjectRetain();
    v14 = type metadata accessor for GPK_DatabaseParticipants.Participant();
    lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
    v4 = v21;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    v16 = v4;
    v17 = v4;
    if (v4)
    {
      v9[1] = v17;
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v13 = v16;
  }
  v5 = v26;
  v10 = v13;
  v6 = type metadata accessor for GPK_DatabaseParticipants();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v5, &v20[*(int *)(v6 + 20)], v23);
  v7 = v10;
  UnknownStorage.traverse<A>(visitor:)();
  v11 = v7;
  v12 = v7;
  if (v7)
    v9[0] = v12;
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
}

unint64_t lazy protocol witness table accessor for type [GPK_DatabaseParticipants.Participant] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPK_DatabaseParticipants.Participant] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPK_DatabaseParticipants.Participant] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPK_DatabaseParticipants.Participant]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPK_DatabaseParticipants.Participant] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPK_DatabaseParticipants.Participant]()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants.Participant();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants.Participant, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants.Participant();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants.Participant, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants.Participant();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants.Participant, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants.Participant();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants.Participant, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants.Participant();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants.Participant, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant);
    return v1;
  }
  return v3;
}

BOOL static GPK_DatabaseParticipants.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  void (*v11)(char *, uint64_t);
  int v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;

  v14 = a1;
  v21 = a2;
  v28 = 0;
  v27 = 0;
  v22 = 0;
  v15 = type metadata accessor for UnknownStorage();
  v16 = *(_QWORD **)(v15 - 8);
  v17 = (v16[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v8 - v17;
  v19 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (_QWORD *)MEMORY[0x24BDAC7A8](v2);
  v20 = (char *)&v8 - v19;
  v28 = v4;
  v27 = v5;
  v25 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = type metadata accessor for GPK_DatabaseParticipants.Participant();
  lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
  v26 = static Array<A>.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    v9 = type metadata accessor for GPK_DatabaseParticipants();
    v6 = v14 + *(int *)(v9 + 20);
    v10 = (void (*)(char *, uint64_t, uint64_t))v16[2];
    v10(v20, v6, v15);
    v10(v18, (uint64_t)v21 + *(int *)(v9 + 20), v15);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v11 = (void (*)(char *, uint64_t))v16[1];
    v11(v18, v15);
    v11(v20, v15);
    return (v12 & 1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t GPK_DatabaseParticipants.hashValue.getter()
{
  type metadata accessor for GPK_DatabaseParticipants();
  lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GPK_DatabaseParticipants@<X0>(char *a1@<X8>)
{
  return GPK_DatabaseParticipants.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GPK_DatabaseParticipants()
{
  return static GPK_DatabaseParticipants.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GPK_DatabaseParticipants()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GPK_DatabaseParticipants@<X0>(uint64_t a1@<X8>)
{
  return GPK_DatabaseParticipants.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GPK_DatabaseParticipants(uint64_t a1)
{
  return GPK_DatabaseParticipants.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GPK_DatabaseParticipants(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GPK_DatabaseParticipants.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GPK_DatabaseParticipants;
}

void protocol witness for Message.unknownFields.modify in conformance GPK_DatabaseParticipants(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GPK_DatabaseParticipants()
{
  return GPK_DatabaseParticipants.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GPK_DatabaseParticipants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GPK_DatabaseParticipants.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GPK_DatabaseParticipants()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GPK_DatabaseParticipants()
{
  lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GPK_DatabaseParticipants()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GPK_DatabaseParticipants@<X0>(uint64_t a1@<X8>)
{
  return static GPK_DatabaseParticipants._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPK_DatabaseParticipants()
{
  lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPK_DatabaseParticipants()
{
  return GPK_DatabaseParticipants.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPK_DatabaseParticipants()
{
  lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPK_DatabaseParticipants(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPK_DatabaseParticipants(uint64_t a1, uint64_t *a2)
{
  return static GPK_DatabaseParticipants.== infix(_:_:)(a1, a2);
}

uint64_t *GPK_DatabaseParticipants.Participant.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GPK_DatabaseParticipants.Participant.protoMessageName;
}

uint64_t static GPK_DatabaseParticipants.Participant.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GPK_DatabaseParticipants.Participant.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GPK_DatabaseParticipants.Participant._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GPK_DatabaseParticipants.Participant._protobuf_nameMap);
}

uint64_t static GPK_DatabaseParticipants.Participant._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GPK_DatabaseParticipants.Participant._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t closure #3 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t closure #4 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t closure #5 in GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t GPK_DatabaseParticipants.Participant.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD v58[2];
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;

  v49 = a1;
  v45 = a2;
  v46 = a3;
  v60 = 0;
  v59 = 0;
  v61 = a2;
  v50 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v53 = (char *)v13 - v52;
  v60 = MEMORY[0x24BDAC7A8](v49);
  v59 = v3;
  v56 = *v3;
  v55 = v3[1];
  outlined copy of Data._Representation(v56, v55);
  outlined copy of Data._Representation(v56, v55);
  v54 = v58;
  v58[0] = v56;
  v58[1] = v55;
  lazy protocol witness table accessor for type Data and conformance Data();
  v57 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v54);
  outlined consume of Data._Representation(v56, v55);
  if ((v57 & 1) != 0)
  {
    v40 = v48;
  }
  else
  {
    v41 = *(_QWORD *)v47;
    v42 = *(_QWORD *)(v47 + 8);
    outlined copy of Data._Representation(v41, v42);
    v4 = v48;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v43 = v4;
    v44 = v4;
    if (v4)
    {
      v14 = v44;
      result = outlined consume of Data._Representation(v41, v42);
      v15 = v14;
      return result;
    }
    outlined consume of Data._Representation(v41, v42);
    v40 = v43;
  }
  v36 = v40;
  v37 = *(_QWORD *)(v47 + 16);
  v38 = *(_QWORD *)(v47 + 24);
  swift_bridgeObjectRetain();
  v39 = String.isEmpty.getter();
  swift_bridgeObjectRelease();
  if ((v39 & 1) != 0)
  {
    v31 = v36;
  }
  else
  {
    v5 = v36;
    v32 = *(_QWORD *)(v47 + 16);
    v33 = *(_QWORD *)(v47 + 24);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v34 = v5;
    v35 = v5;
    if (v5)
    {
      v13[2] = v35;
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v31 = v34;
  }
  v30 = v31;
  if (*(_QWORD *)(v47 + 32))
  {
    v6 = v30;
    result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    v28 = v6;
    v29 = v6;
    if (v6)
      return result;
    v27 = 0;
  }
  else
  {
    v27 = v30;
  }
  v26 = v27;
  if (*(_QWORD *)(v47 + 40))
  {
    v8 = v26;
    result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    v24 = v8;
    v25 = v8;
    if (v8)
      return result;
    v23 = 0;
  }
  else
  {
    v23 = v26;
  }
  v22 = v23;
  if ((*(_BYTE *)(v47 + 48) & 1) != 0)
  {
    v9 = v22;
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v20 = v9;
    v21 = v9;
    if (v9)
      return result;
    v19 = 0;
  }
  else
  {
    v19 = v22;
  }
  v10 = v53;
  v16 = v19;
  v11 = type metadata accessor for GPK_DatabaseParticipants.Participant();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v10, v47 + *(int *)(v11 + 36), v50);
  v12 = v16;
  UnknownStorage.traverse<A>(visitor:)();
  v17 = v12;
  v18 = v12;
  if (v12)
    v13[1] = v18;
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v53, v50);
}

BOOL static GPK_DatabaseParticipants.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v17 = a1;
  v25 = a2;
  v32 = 0;
  v31 = 0;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD **)(v18 - 8);
  v21 = v19[8];
  v20 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v6 - v20;
  v23 = v20;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v20);
  v24 = (char *)&v6 - v23;
  v32 = v2;
  v31 = v3;
  v28 = *v2;
  v29 = v2[1];
  outlined copy of Data._Representation(v28, v29);
  outlined copy of Data._Representation(v28, v29);
  v26 = *(_QWORD *)v25;
  v27 = *(_QWORD *)(v25 + 8);
  outlined copy of Data._Representation(v26, v27);
  outlined copy of Data._Representation(v26, v27);
  v30 = MEMORY[0x2426320A4](v28, v29, v26, v27);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  if ((v30 & 1) != 0)
  {
    v11 = *(_QWORD *)(v17 + 16);
    v14 = *(_QWORD *)(v17 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = *(_QWORD *)(v25 + 16);
    v13 = *(_QWORD *)(v25 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      if (*(_QWORD *)(v17 + 32) == *(_QWORD *)(v25 + 32))
      {
        if (*(_QWORD *)(v17 + 40) == *(_QWORD *)(v25 + 40))
        {
          if ((*(_BYTE *)(v17 + 48) & 1) == (*(_BYTE *)(v25 + 48) & 1))
          {
            v7 = type metadata accessor for GPK_DatabaseParticipants.Participant();
            v4 = v17 + *(int *)(v7 + 36);
            v8 = (void (*)(char *, uint64_t, uint64_t))v19[2];
            v8(v24, v4, v18);
            v8(v22, v25 + *(int *)(v7 + 36), v18);
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
            v10 = dispatch thunk of static Equatable.== infix(_:_:)();
            v9 = (void (*)(char *, uint64_t))v19[1];
            v9(v22, v18);
            v9(v24, v18);
            return (v10 & 1) != 0;
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GPK_DatabaseParticipants.Participant.hashValue.getter()
{
  type metadata accessor for GPK_DatabaseParticipants.Participant();
  lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GPK_DatabaseParticipants.Participant@<X0>(uint64_t a1@<X8>)
{
  return GPK_DatabaseParticipants.Participant.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GPK_DatabaseParticipants.Participant()
{
  return static GPK_DatabaseParticipants.Participant.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GPK_DatabaseParticipants.Participant()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GPK_DatabaseParticipants.Participant@<X0>(uint64_t a1@<X8>)
{
  return GPK_DatabaseParticipants.Participant.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GPK_DatabaseParticipants.Participant(uint64_t a1)
{
  return GPK_DatabaseParticipants.Participant.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GPK_DatabaseParticipants.Participant(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GPK_DatabaseParticipants.Participant.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GPK_DatabaseParticipants.Participant;
}

void protocol witness for Message.unknownFields.modify in conformance GPK_DatabaseParticipants.Participant(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GPK_DatabaseParticipants.Participant()
{
  return GPK_DatabaseParticipants.Participant.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GPK_DatabaseParticipants.Participant.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GPK_DatabaseParticipants.Participant()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GPK_DatabaseParticipants.Participant()
{
  lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GPK_DatabaseParticipants.Participant()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GPK_DatabaseParticipants.Participant@<X0>(uint64_t a1@<X8>)
{
  return static GPK_DatabaseParticipants.Participant._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPK_DatabaseParticipants.Participant()
{
  lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPK_DatabaseParticipants.Participant()
{
  return GPK_DatabaseParticipants.Participant.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPK_DatabaseParticipants.Participant()
{
  lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPK_DatabaseParticipants.Participant(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2)
{
  return static GPK_DatabaseParticipants.Participant.== infix(_:_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage;
  if (!lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage)
  {
    v0 = type metadata accessor for UnknownStorage();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BE5BF20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants;
  if (!lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants)
  {
    v0 = type metadata accessor for GPK_DatabaseParticipants();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPK_DatabaseParticipants, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPK_DatabaseParticipants()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
}

unint64_t base witness table accessor for Message in GPK_DatabaseParticipants()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
}

unint64_t base witness table accessor for Hashable in GPK_DatabaseParticipants()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
}

unint64_t base witness table accessor for Equatable in GPK_DatabaseParticipants()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants and conformance GPK_DatabaseParticipants();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPK_DatabaseParticipants.Participant()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
}

unint64_t base witness table accessor for Message in GPK_DatabaseParticipants.Participant()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
}

unint64_t base witness table accessor for Hashable in GPK_DatabaseParticipants.Participant()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
}

unint64_t base witness table accessor for Equatable in GPK_DatabaseParticipants.Participant()
{
  return lazy protocol witness table accessor for type GPK_DatabaseParticipants.Participant and conformance GPK_DatabaseParticipants.Participant();
}

ValueMetadata *type metadata accessor for _GeneratedWithProtocGenSwiftVersion()
{
  return &type metadata for _GeneratedWithProtocGenSwiftVersion;
}

ValueMetadata *type metadata accessor for _GeneratedWithProtocGenSwiftVersion._2()
{
  return &type metadata for _GeneratedWithProtocGenSwiftVersion._2;
}

unint64_t initializeBufferWithCopyOfBuffer for GPK_DatabaseParticipants(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v13;

  v13 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v13 & 0x20000) != 0)
  {
    v8 = *a2;
    swift_retain();
    *a1 = v8;
    return *a1 + ((v13 + 16) & ~(unint64_t)v13);
  }
  else
  {
    v5 = *a2;
    swift_bridgeObjectRetain();
    *a1 = v5;
    v7 = (char *)a1 + *(int *)(a3 + 20);
    v6 = (char *)a2 + *(int *)(a3 + 20);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v7, v6);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPK_DatabaseParticipants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v5 = *(int *)(a2 + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

char *initializeWithCopy for GPK_DatabaseParticipants(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v5;
  v7 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(&a1[v7], &a2[v7]);
  return a1;
}

char *assignWithCopy for GPK_DatabaseParticipants(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v5;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 24))(&a1[v7], &a2[v7]);
  return a1;
}

char *initializeWithTake for GPK_DatabaseParticipants(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

char *assignWithTake for GPK_DatabaseParticipants(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 40))(&a1[v6], &a2[v6]);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPK_DatabaseParticipants()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D269990(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)a1 < 0x100000000uLL)
      v7 = *(_QWORD *)a1;
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(char *, _QWORD, uint64_t))(v5 + 48))(&a1[*(int *)(a3 + 20)], a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GPK_DatabaseParticipants()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D269A88(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 - 1;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 20)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GPK_DatabaseParticipants()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v15;

  v15 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v15 & 0x20000) != 0)
  {
    v10 = *(_QWORD *)a2;
    swift_retain();
    *(_QWORD *)a1 = v10;
    return *(_QWORD *)a1 + ((v15 + 16) & ~(unint64_t)v15);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v6);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v9 = a1 + *(int *)(a3 + 36);
    v8 = a2 + *(int *)(a3 + 36);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v9, v8);
    return a1;
  }
}

uint64_t destroy for GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v5 = *(int *)(a2 + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v9, a2 + v9);
  return a1;
}

uint64_t assignWithCopy for GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v8);
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined consume of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48) & 1;
  v11 = *(int *)(a3 + 36);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1 + v11, a2 + v11);
  return a1;
}

uint64_t initializeWithTake for GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GPK_DatabaseParticipants.Participant(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = a2[6] & 1;
  v11 = *(int *)(a3 + 36);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1 + v11, (uint64_t)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPK_DatabaseParticipants.Participant()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D26A0D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
      v7 = *(_QWORD *)(a1 + 24);
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 36), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GPK_DatabaseParticipants.Participant()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D26A1CC(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = a2 - 1;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 36), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GPK_DatabaseParticipants.Participant()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t associated type witness table accessor for ProtobufAPIVersionCheck.Version : ProtobufAPIVersion_2 in _GeneratedWithProtocGenSwiftVersion()
{
  return lazy protocol witness table accessor for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2();
}

unint64_t lazy protocol witness table accessor for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2;
  if (!lazy protocol witness table cache variable for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for _GeneratedWithProtocGenSwiftVersion._2, &type metadata for _GeneratedWithProtocGenSwiftVersion._2);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupManager.isKeyRegistered.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  char **v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = StaticString.checkRegistration.unsafeMutableAddressor();
  v5 = (uint64_t)*v1;
  v6 = (uint64_t)v1[1];
  v7 = *((_BYTE *)v1 + 16);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v4[5] = v2;
  *v2 = v4[2];
  v2[1] = GPKGroupManager.isKeyRegistered.getter;
  return signpost<A>(_:_:)((uint64_t)(v4 + 7), v5, v6, v7, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.isKeyRegistered.getter, v4[4], MEMORY[0x24BEE1328]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 16) + 8))(*(_BYTE *)(v0 + 56) & 1);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16) + 8))(v0 & 1);
}

uint64_t closure #1 in GPKGroupManager.isKeyRegistered.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[10] = a2;
  v2[9] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[8] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.isKeyRegistered.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[10];
  v0[7] = v0;
  CheckKeyRegistrationMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + 16, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  v5[11] = v1;
  v2 = lazy protocol witness table accessor for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage();
  *v1 = v5[7];
  v1[1] = closure #1 in GPKGroupManager.isKeyRegistered.getter;
  return v9(v5[9], v6, &type metadata for CheckKeyRegistrationMessage, v2, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.isKeyRegistered.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in GPKGroupManager.isKeyRegistered.getter;
  return closure #1 in GPKGroupManager.isKeyRegistered.getter(a1, v4);
}

uint64_t partial apply for closure #1 in GPKGroupManager.isKeyRegistered.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)(char a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 67) = a3 & 1;
  *(_BYTE *)(v4 + 66) = a2 & 1;
  *(_BYTE *)(v4 + 65) = a1 & 1;
  *(_QWORD *)(v4 + 16) = v4;
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 64) = a1 & 1;
  *(_BYTE *)(v4 + 72) = a2 & 1;
  *(_BYTE *)(v4 + 80) = a3 & 1;
  *(_QWORD *)(v4 + 24) = v3;
  return swift_task_switch();
}

uint64_t GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t v0;
  char **v1;
  _QWORD *v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 67);
  v5 = *(_BYTE *)(v0 + 66);
  v4 = *(_BYTE *)(v0 + 65);
  *(_QWORD *)(v0 + 16) = v0;
  v1 = StaticString.keyRegistration.unsafeMutableAddressor();
  v9 = (uint64_t)*v1;
  v10 = (uint64_t)v1[1];
  v11 = *((_BYTE *)v1 + 16);
  swift_retain();
  v12 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v12;
  *(_BYTE *)(v12 + 16) = v4 & 1;
  *(_BYTE *)(v12 + 17) = v5 & 1;
  *(_BYTE *)(v12 + 18) = v6 & 1;
  *(_QWORD *)(v12 + 24) = v7;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 48) = v2;
  *v2 = *(_QWORD *)(v8 + 16);
  v2[1] = GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return signpost<A>(_:_:)(v13, v9, v10, v11, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:), v12, MEMORY[0x24BEE4AE0] + 8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 72) = a5;
  *(_BYTE *)(v5 + 106) = a4 & 1;
  *(_BYTE *)(v5 + 105) = a3 & 1;
  *(_BYTE *)(v5 + 103) = a2 & 1;
  *(_QWORD *)(v5 + 56) = v5;
  *(_BYTE *)(v5 + 96) = 0;
  *(_BYTE *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_WORD *)(v5 + 97) = 0;
  *(_BYTE *)(v5 + 99) = 0;
  *(_BYTE *)(v5 + 96) = a2 & 1;
  *(_BYTE *)(v5 + 104) = a3 & 1;
  *(_BYTE *)(v5 + 112) = a4 & 1;
  *(_QWORD *)(v5 + 64) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v7 = *(_QWORD *)(v0 + 72);
  v1 = *(_BYTE *)(v0 + 106);
  v2 = *(_BYTE *)(v0 + 105);
  v3 = *(_BYTE *)(v0 + 103);
  *(_QWORD *)(v0 + 56) = v0;
  RegisterSelfMessage.init(forceKeyRoll:skipServerCheck:skipLocalCheck:)(v3 & 1, v2 & 1, v1 & 1);
  *(_BYTE *)(v0 + 97) = v14 & 1;
  *(_BYTE *)(v0 + 98) = v15 & 1;
  *(_BYTE *)(v0 + 99) = v16 & 1;
  outlined init with copy of MessageSenderProtocol(v7 + 16, v0 + 16);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v10);
  v9 = v0 + 100;
  *(_BYTE *)(v0 + 100) = v14 & 1;
  *(_BYTE *)(v0 + 101) = v15 & 1;
  *(_BYTE *)(v0 + 102) = v16 & 1;
  v12 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8) + **(int **)(v11 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 80) = v4;
  v5 = lazy protocol witness table accessor for type RegisterSelfMessage and conformance RegisterSelfMessage();
  *v4 = *(_QWORD *)(v8 + 56);
  v4[1] = closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return v12(v13, v9, &type metadata for RegisterSelfMessage, v5, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v5;
  char v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 17);
  v7 = *(_BYTE *)(v1 + 18);
  v8 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a1, v5 & 1, v6 & 1, v7 & 1, v8);
}

uint64_t partial apply for closure #1 in GPKGroupManager.registerSelf(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.fetchAllUsers()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[5] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  char **v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = StaticString.fetchUsers.unsafeMutableAddressor();
  v6 = (uint64_t)*v1;
  v7 = (uint64_t)v1[1];
  v8 = *((_BYTE *)v1 + 16);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v5[6] = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUser]);
  *v2 = v5[2];
  v2[1] = GPKGroupManager.fetchAllUsers();
  return signpost<A>(_:_:)((uint64_t)(v5 + 4), v6, v7, v8, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.fetchAllUsers(), v5[5], v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 16) + 8))(*(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_release();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t closure #1 in GPKGroupManager.fetchAllUsers()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[10] = a2;
  v2[9] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[8] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.fetchAllUsers()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t AllUsersMessage;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[10];
  v0[7] = v0;
  FetchAllUsersMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + 16, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  v5[11] = v1;
  AllUsersMessage = lazy protocol witness table accessor for type FetchAllUsersMessage and conformance FetchAllUsersMessage();
  *v1 = v5[7];
  v1[1] = closure #1 in GPKGroupManager.fetchAllUsers();
  return v9(v5[9], v6, &type metadata for FetchAllUsersMessage, AllUsersMessage, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.fetchAllUsers()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in GPKGroupManager.fetchAllUsers();
  return closure #1 in GPKGroupManager.fetchAllUsers()(a1, v4);
}

uint64_t partial apply for closure #1 in GPKGroupManager.fetchAllUsers()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.kdsRequest(message:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v2 + 328) = v1;
  *(_QWORD *)(v2 + 312) = v2;
  memset((void *)(v2 + 16), 0, 0x68uLL);
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  v3 = *a1;
  *(_BYTE *)(v2 + 448) = *a1 & 1;
  v4 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(v2 + 336) = v4;
  v5 = *((_QWORD *)a1 + 2);
  *(_QWORD *)(v2 + 344) = v5;
  v6 = *((_QWORD *)a1 + 3);
  *(_QWORD *)(v2 + 352) = v6;
  v7 = *((_QWORD *)a1 + 4);
  *(_QWORD *)(v2 + 360) = v7;
  v8 = *((_QWORD *)a1 + 5);
  *(_QWORD *)(v2 + 368) = v8;
  v9 = *((_QWORD *)a1 + 6);
  *(_QWORD *)(v2 + 376) = v9;
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v2 + 384) = v10;
  v11 = *((_QWORD *)a1 + 8);
  *(_QWORD *)(v2 + 392) = v11;
  v12 = *((_QWORD *)a1 + 9);
  *(_QWORD *)(v2 + 400) = v12;
  v13 = *((_QWORD *)a1 + 10);
  *(_QWORD *)(v2 + 408) = v13;
  v14 = *((_QWORD *)a1 + 11);
  *(_QWORD *)(v2 + 416) = v14;
  v15 = *((_QWORD *)a1 + 12);
  *(_QWORD *)(v2 + 424) = v15;
  *(_BYTE *)(v2 + 16) = v3 & 1;
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v7;
  *(_QWORD *)(v2 + 56) = v8;
  *(_QWORD *)(v2 + 64) = v9;
  *(_QWORD *)(v2 + 72) = v10;
  *(_QWORD *)(v2 + 80) = v11;
  *(_QWORD *)(v2 + 88) = v12;
  *(_QWORD *)(v2 + 96) = v13;
  *(_QWORD *)(v2 + 104) = v14;
  *(_QWORD *)(v2 + 112) = v15;
  *(_QWORD *)(v2 + 320) = v1;
  return swift_task_switch();
}

uint64_t GPKGroupManager.kdsRequest(message:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v16 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 416);
  v14 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 368);
  v17 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_BYTE *)(v0 + 448);
  v1 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 312) = v0;
  outlined init with copy of MessageSenderProtocol(v1 + 16, v0 + 224);
  v20 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 256);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 224), v20);
  v19 = v0 + 120;
  *(_BYTE *)(v0 + 120) = v5 & 1;
  *(_QWORD *)(v0 + 128) = v6;
  *(_QWORD *)(v0 + 136) = v7;
  *(_QWORD *)(v0 + 144) = v8;
  *(_QWORD *)(v0 + 152) = v17;
  *(_QWORD *)(v0 + 160) = v9;
  *(_QWORD *)(v0 + 168) = v10;
  *(_QWORD *)(v0 + 176) = v11;
  *(_QWORD *)(v0 + 184) = v12;
  *(_QWORD *)(v0 + 192) = v13;
  *(_QWORD *)(v0 + 200) = v14;
  *(_QWORD *)(v0 + 208) = v15;
  *(_QWORD *)(v0 + 216) = v16;
  v22 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8) + **(int **)(v21 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 432) = v2;
  v3 = lazy protocol witness table accessor for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage();
  *v2 = *(_QWORD *)(v18 + 312);
  v2[1] = GPKGroupManager.kdsRequest(message:);
  return v22(v18 + 264, v19, &type metadata for KeyDistributionRequestMessage, v3, v20, v21);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 312) = *v1;
  *(_QWORD *)(v2 + 440) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0[39] = v0;
  v2 = v0[33];
  v3 = v0[34];
  v4 = v0[35];
  v0[36] = v2;
  v0[37] = v3;
  v0[38] = v4;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[39] + 8))(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 312) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 224);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 312) + 8))();
}

uint64_t outlined init with copy of MessageSenderProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GPKGroupManager.refreshGroup(groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[7] = v1;
  v2[6] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  type metadata accessor for GPKGroupID();
  v2[8] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t GPKGroupManager.refreshGroup(groupID:)()
{
  _QWORD *v0;
  char **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v6 = v0[8];
  v7 = v0[7];
  v5 = v0[6];
  v0[2] = v0;
  v1 = StaticString.refreshGroup.unsafeMutableAddressor();
  v12 = (uint64_t)*v1;
  v9 = (uint64_t)v1[1];
  v10 = *((_BYTE *)v1 + 16);
  outlined init with copy of GPKGroupID(v5, v6);
  swift_retain();
  v11 = swift_task_alloc();
  v0[9] = v11;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v7;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 80) = v2;
  v3 = type metadata accessor for GPKGroup();
  *v2 = *(_QWORD *)(v8 + 16);
  v2[1] = GPKGroupManager.refreshGroup(groupID:);
  return signpost<A>(_:_:)(v8 + 40, v12, v9, v10, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.refreshGroup(groupID:), v11, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v5 = v2 + 16;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 48);
    swift_task_dealloc();
    outlined destroy of GPKGroupID(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = v0;
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  outlined destroy of GPKGroupID(v2);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t closure #1 in GPKGroupManager.refreshGroup(groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[12] = a3;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  type metadata accessor for GPKGroupID();
  v3[13] = swift_task_alloc();
  v3[14] = type metadata accessor for GroupRefreshMessage();
  v3[15] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.refreshGroup(groupID:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t refreshed;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);

  v6 = v0[15];
  v1 = v0[13];
  v7 = v1;
  v8 = v0[12];
  v2 = v0[11];
  v0[7] = v0;
  outlined init with copy of GPKGroupID(v2, v1);
  GroupRefreshMessage.init(groupID:)(v7, v6);
  outlined init with copy of MessageSenderProtocol(v8 + 16, (uint64_t)(v0 + 2));
  v10 = v0[5];
  v11 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v10);
  v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8)
                                                                                           + **(int **)(v11 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  v9[16] = v3;
  refreshed = lazy protocol witness table accessor for type GroupRefreshMessage and conformance GroupRefreshMessage();
  *v3 = v9[7];
  v3[1] = closure #1 in GPKGroupManager.refreshGroup(groupID:);
  return v12(v9[10], v9[15], v9[14], refreshed, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of GroupRefreshMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of GroupRefreshMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.refreshGroup(groupID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.refreshGroup(groupID:);
  return closure #1 in GPKGroupManager.refreshGroup(groupID:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in GPKGroupManager.refreshGroup(groupID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.groupKitServerRequest<A, B>(message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  v9[24] = v8;
  v9[23] = a8;
  v9[22] = a7;
  v9[21] = a6;
  v9[20] = a5;
  v9[19] = a4;
  v9[18] = a3;
  v9[17] = a2;
  v9[16] = a1;
  v9[13] = v9;
  v9[14] = 0;
  v9[15] = 0;
  v9[14] = a2;
  v9[15] = v8;
  return swift_task_switch();
}

uint64_t GPKGroupManager.groupKitServerRequest<A, B>(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[24];
  v10 = v0[23];
  v9 = v0[22];
  v8 = v0[21];
  v7 = v0[20];
  v6 = v0[19];
  v5 = v0[18];
  v0[13] = v0;
  outlined init with copy of MessageSenderProtocol(v1 + 16, (uint64_t)(v0 + 8));
  v13 = v0[11];
  v14 = v0[12];
  __swift_project_boxed_opaque_existential_1(v0 + 8, v13);
  v15 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 + 8)
                                                                                   + **(int **)(v14 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  v11[25] = v2;
  v11[2] = v5;
  v11[3] = v6;
  v11[4] = v7;
  v11[5] = v8;
  v11[6] = v9;
  v11[7] = v10;
  v12 = type metadata accessor for GroupKitServerRequestMessage(0, (uint64_t)(v11 + 2));
  v3 = MEMORY[0x2426331CC](&protocol conformance descriptor for GroupKitServerRequestMessage<A, B>);
  *v2 = v11[13];
  v2[1] = GPKGroupManager.groupKitServerRequest<A, B>(message:);
  return v15(v11[16], v11[17], v12, v3, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = *v1;
  *(_QWORD *)(v2 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 104) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 104) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 104) + 8))();
}

uint64_t GPKGroupManager.ping()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[15] = v0;
  v1[13] = v1;
  v1[14] = 0;
  v1[7] = 0;
  v1[8] = 0;
  v1[14] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v5 = v0[15];
  v0[13] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Hi!", 3uLL, 1);
  PingMessage.init(messageText:)(v1);
  v0[16] = v12;
  v0[7] = v11;
  v0[8] = v12;
  outlined init with copy of MessageSenderProtocol(v5 + 16, (uint64_t)(v0 + 2));
  v8 = v0[5];
  v9 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  v7 = v0 + 11;
  v0[11] = v11;
  v0[12] = v12;
  v10 = (uint64_t (*)(uint64_t, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8) + **(int **)(v9 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 136) = v2;
  v3 = lazy protocol witness table accessor for type PingMessage and conformance PingMessage();
  *v2 = *(_QWORD *)(v6 + 104);
  v2[1] = GPKGroupManager.ping();
  return v10(v6 + 72, v7, &type metadata for PingMessage, v3, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[13] = v0;
  v2 = v0[9];
  v3 = v0[10];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[13] + 8))(v2, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 104) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 104) + 8))();
}

uint64_t GPKGroupManager.deleteAllContent()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  char **v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = StaticString.deleteContent.unsafeMutableAddressor();
  v5 = (uint64_t)*v1;
  v6 = (uint64_t)v1[1];
  v7 = *((_BYTE *)v1 + 16);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v4[5] = v2;
  *v2 = v4[2];
  v2[1] = GPKGroupManager.deleteAllContent();
  return signpost<A>(_:_:)(v8, v5, v6, v7, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.deleteAllContent(), v4[4], MEMORY[0x24BEE4AE0] + 8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t closure #1 in GPKGroupManager.deleteAllContent()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[9] = a2;
  v2[7] = v2;
  v2[8] = 0;
  v2[8] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.deleteAllContent()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[9];
  v0[7] = v0;
  DeleteAllContentMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + 16, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 80) = v1;
  v2 = lazy protocol witness table accessor for type DeleteAllContentMessage and conformance DeleteAllContentMessage();
  *v1 = *(_QWORD *)(v5 + 56);
  v1[1] = closure #1 in GPKGroupManager.deleteAllContent();
  return v9(v6, v6, &type metadata for DeleteAllContentMessage, v2, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.deleteAllContent()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for closure #1 in GPKGroupManager.deleteAllContent();
  return closure #1 in GPKGroupManager.deleteAllContent()(a1, v4);
}

uint64_t partial apply for closure #1 in GPKGroupManager.deleteAllContent()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.encryptMessage(for:message:role:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(v5 + 96) = v4;
  *(_QWORD *)(v5 + 88) = a3;
  *(_QWORD *)(v5 + 80) = a2;
  *(_QWORD *)(v5 + 72) = a1;
  *(_QWORD *)(v5 + 48) = v5;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  type metadata accessor for GPKGroupID();
  *(_QWORD *)(v5 + 104) = swift_task_alloc();
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = *a4 & 1;
  *(_BYTE *)(v5 + 137) = v6;
  *(_BYTE *)(v5 + 136) = v6;
  *(_QWORD *)(v5 + 64) = v4;
  return swift_task_switch();
}

uint64_t GPKGroupManager.encryptMessage(for:message:role:)()
{
  uint64_t v0;
  char **v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v9 = *(_BYTE *)(v0 + 137);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 48) = v0;
  v1 = StaticString.encrypt.unsafeMutableAddressor();
  v11 = (uint64_t)*v1;
  v12 = (uint64_t)v1[1];
  v13 = *((_BYTE *)v1 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined init with copy of GPKGroupID(v4, v8);
  v14 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v14;
  *(_QWORD *)(v14 + 16) = v5;
  *(_QWORD *)(v14 + 24) = v6;
  *(_QWORD *)(v14 + 32) = v7;
  *(_QWORD *)(v14 + 40) = v8;
  *(_BYTE *)(v14 + 48) = v9 & 1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 120) = v2;
  *v2 = *(_QWORD *)(v10 + 48);
  v2[1] = GPKGroupManager.encryptMessage(for:message:role:);
  return signpost<A>(_:_:)(v10 + 32, v11, v12, v13, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.encryptMessage(for:message:role:), v14, MEMORY[0x24BEE0D00]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  v2 += 48;
  v5 = v2 - 32;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 88);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of GPKGroupID(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[6] = v0;
  v2 = v0[4];
  v3 = v0[5];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[6] + 8))(v2, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 48) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of GPKGroupID(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 48) + 8))();
}

uint64_t closure #1 in GPKGroupManager.encryptMessage(for:message:role:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v6 + 298) = a6;
  *(_QWORD *)(v6 + 152) = a5;
  *(_QWORD *)(v6 + 144) = a4;
  *(_QWORD *)(v6 + 136) = a3;
  *(_QWORD *)(v6 + 128) = a2;
  *(_QWORD *)(v6 + 120) = a1;
  *(_QWORD *)(v6 + 96) = v6;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_BYTE *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v7 = type metadata accessor for String.Encoding();
  *(_QWORD *)(v6 + 160) = v7;
  *(_QWORD *)(v6 + 168) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 176) = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 104) = a4;
  *(_QWORD *)(v6 + 112) = a5;
  *(_BYTE *)(v6 + 296) = a6 & 1;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.encryptMessage(for:message:role:)()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v20 = v0[22];
  v19 = v0[21];
  v21 = v0[20];
  v0[12] = v0;
  static String.Encoding.utf8.getter();
  default argument 1 of String.data(using:allowLossyConversion:)();
  v22 = String.data(using:allowLossyConversion:)();
  v23 = v1;
  v0[23] = v22;
  v0[24] = v1;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  v0[4] = v22;
  v0[5] = v23;
  outlined copy of Data?(v22, v23);
  v0[8] = v22;
  v0[9] = v23;
  if ((v0[9] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_QWORD *)(v18 + 48) = Data.init()();
    *(_QWORD *)(v18 + 56) = v3;
    outlined destroy of Data?(v18 + 64);
  }
  else
  {
    v2 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v18 + 48) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v18 + 56) = v2;
  }
  v9 = *(_BYTE *)(v18 + 298);
  v12 = *(_QWORD *)(v18 + 48);
  *(_QWORD *)(v18 + 200) = v12;
  v13 = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v18 + 208) = v13;
  v4 = GPKConstant.defaultAssociatedData.unsafeMutableAddressor();
  v14 = *v4;
  *(_QWORD *)(v18 + 216) = *v4;
  v15 = v4[1];
  *(_QWORD *)(v18 + 224) = v15;
  outlined copy of Data._Representation(v14, v15);
  *(_BYTE *)(v18 + 297) = v9 & 1;
  v5 = GPKConstant.defaultEntitlmentID.unsafeMutableAddressor();
  v16 = *v5;
  *(_QWORD *)(v18 + 232) = *v5;
  v17 = v5[1];
  *(_QWORD *)(v18 + 240) = v17;
  outlined copy of Data._Representation(v16, v17);
  v6 = GPKConstant.defaultKeyDiversifier.unsafeMutableAddressor();
  v10 = *v6;
  *(_QWORD *)(v18 + 248) = *v6;
  v11 = v6[1];
  *(_QWORD *)(v18 + 256) = v11;
  outlined copy of Data._Representation(v10, v11);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 264) = v7;
  *v7 = *(_QWORD *)(v18 + 96);
  v7[1] = closure #1 in GPKGroupManager.encryptMessage(for:message:role:);
  return GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)(*(_QWORD *)(v18 + 152), v12, v13, v14, v15, (_BYTE *)(v18 + 297), v16, v17);
}

{
  _QWORD *v0;
  NSDataBase64EncodingOptions v1;
  Swift::String *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = v0[36];
  v4 = v0[35];
  v7 = v0[24];
  v6 = v0[23];
  v3 = (Swift::String *)v0[15];
  v0[12] = v0;
  v0[10] = v4;
  v0[11] = v5;
  v1 = default argument 0 of Data.base64EncodedString(options:)();
  *v3 = Data.base64EncodedString(options:)(v1);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data?(v6, v7);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[12] + 8))();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = v0[32];
  v2 = v0[31];
  v5 = v0[30];
  v4 = v0[29];
  v7 = v0[28];
  v6 = v0[27];
  v9 = v0[26];
  v8 = v0[25];
  v11 = v0[24];
  v10 = v0[23];
  v0[12] = v0;
  outlined consume of Data._Representation(v2, v1);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  outlined consume of Data._Representation(v8, v9);
  outlined consume of Data?(v10, v11);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[12] + 8))();
}

uint64_t closure #1 in GPKGroupManager.encryptMessage(for:message:role:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = (_QWORD *)*v3;
  v4[12] = *v3;
  v12 = v4 + 2;
  v4[34] = v2;
  v4[35] = a1;
  v4[36] = a2;
  swift_task_dealloc();
  if (!v2)
  {
    v7 = v12[28];
    v6 = v12[27];
    v9 = v12[26];
    v8 = v12[25];
    v11 = v12[24];
    v10 = v12[23];
    outlined consume of Data._Representation(v12[29], v12[30]);
    outlined consume of Data._Representation(v6, v7);
    outlined consume of Data._Representation(v8, v9);
    outlined consume of Data._Representation(v10, v11);
  }
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in GPKGroupManager.encryptMessage(for:message:role:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = *(_BYTE *)(v1 + 48);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.encryptMessage(for:message:role:);
  return closure #1 in GPKGroupManager.encryptMessage(for:message:role:)(a1, v5, v6, v7, v8, v9 & 1);
}

uint64_t partial apply for closure #1 in GPKGroupManager.encryptMessage(for:message:role:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t default argument 1 of String.data(using:allowLossyConversion:)()
{
  return 0;
}

uint64_t GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v9 + 192) = v8;
  *(_QWORD *)(v9 + 184) = v21;
  *(_QWORD *)(v9 + 176) = v20;
  *(_QWORD *)(v9 + 168) = a8;
  *(_QWORD *)(v9 + 160) = a7;
  *(_QWORD *)(v9 + 152) = a5;
  *(_QWORD *)(v9 + 144) = a4;
  *(_QWORD *)(v9 + 136) = a3;
  *(_QWORD *)(v9 + 128) = a2;
  *(_QWORD *)(v9 + 120) = a1;
  *(_QWORD *)(v9 + 96) = v9;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 232) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 112) = 0;
  type metadata accessor for GPKGroupID();
  *(_QWORD *)(v9 + 200) = swift_task_alloc();
  *(_QWORD *)(v9 + 104) = a1;
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  *(_QWORD *)(v9 + 32) = a4;
  *(_QWORD *)(v9 + 40) = a5;
  v10 = *a6 & 1;
  *(_BYTE *)(v9 + 233) = v10;
  *(_BYTE *)(v9 + 232) = v10;
  *(_QWORD *)(v9 + 48) = a7;
  *(_QWORD *)(v9 + 56) = a8;
  *(_QWORD *)(v9 + 64) = v20;
  *(_QWORD *)(v9 + 72) = v21;
  *(_QWORD *)(v9 + 112) = v8;
  return swift_task_switch();
}

uint64_t GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v10 = *(_BYTE *)(v0 + 233);
  v1 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 96) = v0;
  v2 = StaticString.encrypt.unsafeMutableAddressor();
  v17 = (uint64_t)*v2;
  v18 = (uint64_t)v2[1];
  v19 = *((_BYTE *)v2 + 16);
  outlined init with copy of GPKGroupID(v5, v1);
  outlined copy of Data._Representation(v6, v7);
  outlined copy of Data._Representation(v8, v9);
  outlined copy of Data._Representation(v11, v12);
  outlined copy of Data._Representation(v13, v14);
  swift_retain();
  v20 = swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v20;
  *(_QWORD *)(v20 + 16) = v1;
  *(_QWORD *)(v20 + 24) = v6;
  *(_QWORD *)(v20 + 32) = v7;
  *(_QWORD *)(v20 + 40) = v8;
  *(_QWORD *)(v20 + 48) = v9;
  *(_BYTE *)(v20 + 56) = v10 & 1;
  *(_QWORD *)(v20 + 64) = v11;
  *(_QWORD *)(v20 + 72) = v12;
  *(_QWORD *)(v20 + 80) = v13;
  *(_QWORD *)(v20 + 88) = v14;
  *(_QWORD *)(v20 + 96) = v15;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v16 + 216) = v3;
  *v3 = *(_QWORD *)(v16 + 96);
  v3[1] = GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:);
  return signpost<A>(_:_:)(v16 + 80, v17, v18, v19, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:), v20, MEMORY[0x24BDCDDE8]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  v2 += 96;
  v13 = (_QWORD *)(v2 - 80);
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = v13[23];
    v12 = v13[21];
    v11 = v13[20];
    v10 = v13[19];
    v9 = v13[18];
    v8 = v13[17];
    v7 = v13[16];
    v5 = v13[15];
    v6 = v13[14];
    swift_task_dealloc();
    outlined destroy of GPKGroupID(v4);
    outlined consume of Data._Representation(v6, v5);
    outlined consume of Data._Representation(v7, v8);
    outlined consume of Data._Representation(v9, v10);
    outlined consume of Data._Representation(v11, v12);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[12] = v0;
  v2 = v0[10];
  v3 = v0[11];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[12] + 8))(v2, v3);
}

{
  _QWORD *v0;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v10 = v0[25];
  v9 = v0[23];
  v8 = v0[22];
  v7 = v0[21];
  v6 = v0[20];
  v5 = v0[19];
  v4 = v0[18];
  v2 = v0[17];
  v3 = v0[16];
  v0[12] = v0;
  swift_task_dealloc();
  outlined destroy of GPKGroupID(v10);
  outlined consume of Data._Representation(v3, v2);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  outlined consume of Data._Representation(v8, v9);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[12] + 8))();
}

uint64_t default argument 0 of Data.base64EncodedString(options:)()
{
  return 0;
}

uint64_t closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v8 + 224) = v20;
  *(_QWORD *)(v8 + 216) = v19;
  *(_QWORD *)(v8 + 208) = v18;
  *(_QWORD *)(v8 + 200) = v17;
  *(_QWORD *)(v8 + 192) = a8;
  *(_BYTE *)(v8 + 273) = a7;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 160) = a3;
  *(_QWORD *)(v8 + 152) = a2;
  *(_QWORD *)(v8 + 144) = a1;
  *(_QWORD *)(v8 + 120) = v8;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 272) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  type metadata accessor for GPKGroupID();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  *(_QWORD *)(v8 + 240) = type metadata accessor for EncryptDataMessage();
  *(_QWORD *)(v8 + 248) = swift_task_alloc();
  *(_QWORD *)(v8 + 128) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a5;
  *(_QWORD *)(v8 + 80) = a6;
  *(_BYTE *)(v8 + 272) = a7 & 1;
  *(_QWORD *)(v8 + 88) = a8;
  *(_QWORD *)(v8 + 96) = v17;
  *(_QWORD *)(v8 + 104) = v18;
  *(_QWORD *)(v8 + 112) = v19;
  *(_QWORD *)(v8 + 136) = v20;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);
  char v22;

  v9 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 232);
  v10 = v1;
  v17 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 192);
  v6 = *(_BYTE *)(v0 + 273);
  v14 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 120) = v0;
  outlined init with copy of GPKGroupID(v2, v1);
  outlined copy of Data._Representation(v11, v12);
  outlined copy of Data._Representation(v13, v14);
  v22 = v6 & 1;
  outlined copy of Data._Representation(v15, v16);
  outlined copy of Data._Representation(v7, v8);
  EncryptDataMessage.init(groupID:message:associatedData:role:entitlementID:keyDiversifier:)(v10, v11, v12, v13, v14, (uint64_t)&v22, v15, v16, v9, v7, v8);
  outlined init with copy of MessageSenderProtocol(v17 + 16, v0 + 16);
  v19 = *(_QWORD *)(v0 + 40);
  v20 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v19);
  v21 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8)
                                                                                           + **(int **)(v20 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  v18[32] = v3;
  v4 = lazy protocol witness table accessor for type EncryptDataMessage and conformance EncryptDataMessage();
  *v3 = v18[15];
  v3[1] = closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:);
  return v21(v18[18], v18[31], v18[30], v4, v19, v20);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = *v1;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of EncryptDataMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 120) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of EncryptDataMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 120) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v10 = *(_BYTE *)(v1 + 56);
  v11 = *(_QWORD *)(v1 + 64);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:);
  return closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)(a1, v5, v6, v7, v8, v9, v10 & 1, v11);
}

uint64_t partial apply for closure #1 in GPKGroupManager.encryptData(for:message:authenticating:role:entitlementID:keyDiversifier:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.decryptMessage(for:ciphertext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[12] = v3;
  v4[11] = a3;
  v4[10] = a2;
  v4[9] = a1;
  v4[6] = v4;
  v4[7] = 0;
  v4[2] = 0;
  v4[3] = 0;
  v4[8] = 0;
  type metadata accessor for GPKGroupID();
  v4[13] = swift_task_alloc();
  v4[7] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[8] = v3;
  return swift_task_switch();
}

uint64_t GPKGroupManager.decryptMessage(for:ciphertext:)()
{
  _QWORD *v0;
  char **v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v8 = v0[13];
  v7 = v0[12];
  v6 = v0[11];
  v5 = v0[10];
  v4 = v0[9];
  v0[6] = v0;
  v1 = StaticString.encrypt.unsafeMutableAddressor();
  v10 = (uint64_t)*v1;
  v11 = (uint64_t)v1[1];
  v12 = *((_BYTE *)v1 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined init with copy of GPKGroupID(v4, v8);
  v13 = (_QWORD *)swift_task_alloc();
  v0[14] = v13;
  v13[2] = v5;
  v13[3] = v6;
  v13[4] = v7;
  v13[5] = v8;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 120) = v2;
  *v2 = *(_QWORD *)(v9 + 48);
  v2[1] = GPKGroupManager.decryptMessage(for:ciphertext:);
  return signpost<A>(_:_:)(v9 + 32, v10, v11, v12, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:), (uint64_t)v13, MEMORY[0x24BEE0D00]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  v2 += 48;
  v5 = v2 - 32;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 88);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of GPKGroupID(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[6] = v0;
  v2 = v0[4];
  v3 = v0[5];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[6] + 8))(v2, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 48) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of GPKGroupID(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 48) + 8))();
}

uint64_t closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[19] = a5;
  v5[18] = a4;
  v5[17] = a3;
  v5[16] = a2;
  v5[15] = a1;
  v5[12] = v5;
  v5[2] = 0;
  v5[3] = 0;
  v5[13] = 0;
  v5[14] = 0;
  v5[6] = 0;
  v5[7] = 0;
  v5[8] = 0;
  v5[9] = 0;
  type metadata accessor for String.Encoding();
  v5[20] = swift_task_alloc();
  v5[2] = a2;
  v5[3] = a3;
  v5[13] = a4;
  v5[14] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v0[12] = v0;
  default argument 1 of Data.init(base64Encoded:options:)();
  v0[4] = Data.init(base64Encoded:options:)();
  v0[5] = v1;
  if ((v0[5] & 0xF000000000000000) == 0xF000000000000000)
  {
    v15 = Data.init()();
    v16 = v2;
    outlined destroy of Data?((uint64_t)(v14 + 4));
  }
  else
  {
    v15 = v14[4];
    v16 = v14[5];
  }
  v14[21] = v15;
  v14[22] = v16;
  v14[6] = v15;
  v14[7] = v16;
  v3 = GPKConstant.defaultAssociatedData.unsafeMutableAddressor();
  v9 = *v3;
  v14[23] = *v3;
  v10 = v3[1];
  v14[24] = v10;
  outlined copy of Data._Representation(v9, v10);
  v4 = GPKConstant.defaultEntitlmentID.unsafeMutableAddressor();
  v11 = *v4;
  v14[25] = *v4;
  v12 = v4[1];
  v14[26] = v12;
  outlined copy of Data._Representation(v11, v12);
  v5 = GPKConstant.defaultKeyDiversifier.unsafeMutableAddressor();
  v13 = *v5;
  v14[27] = *v5;
  v8 = v5[1];
  v14[28] = v8;
  outlined copy of Data._Representation(v13, v8);
  v6 = (_QWORD *)swift_task_alloc();
  v14[29] = v6;
  *v6 = v14[12];
  v6[1] = closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:);
  return GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)(v14[19], v15, v16, v9, v10, v11, v12, v13);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  Swift::String *v7;
  uint64_t v8;

  v1 = v0[32];
  v2 = v0[31];
  v0[12] = v0;
  v0[8] = v2;
  v0[9] = v1;
  static String.Encoding.utf8.getter();
  v0[10] = String.init(data:encoding:)();
  v0[11] = v3;
  if (v0[11])
  {
    *(_OWORD *)*(_QWORD *)(v8 + 120) = *(_OWORD *)(v8 + 80);
  }
  else
  {
    v7 = *(Swift::String **)(v8 + 120);
    *v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String?();
  }
  v6 = *(_QWORD *)(v8 + 176);
  v5 = *(_QWORD *)(v8 + 168);
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 248), *(_QWORD *)(v8 + 256));
  outlined consume of Data._Representation(v5, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v8 + 96) + 8))();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = v0[28];
  v2 = v0[27];
  v5 = v0[26];
  v4 = v0[25];
  v7 = v0[24];
  v6 = v0[23];
  v9 = v0[22];
  v8 = v0[21];
  v0[12] = v0;
  outlined consume of Data._Representation(v2, v1);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  outlined consume of Data._Representation(v8, v9);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[12] + 8))();
}

uint64_t closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v4 = (_QWORD *)*v3;
  v4[12] = *v3;
  v4 += 12;
  v10 = v4 - 10;
  v4[18] = v2;
  v4[19] = a1;
  v4[20] = a2;
  swift_task_dealloc();
  if (!v2)
  {
    v7 = v10[24];
    v6 = v10[23];
    v9 = v10[22];
    v8 = v10[21];
    outlined consume of Data._Representation(v10[25], v10[26]);
    outlined consume of Data._Representation(v6, v7);
    outlined consume of Data._Representation(v8, v9);
  }
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:);
  return closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in GPKGroupManager.decryptMessage(for:ciphertext:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t default argument 1 of Data.init(base64Encoded:options:)()
{
  return 0;
}

uint64_t GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v19;

  v9[24] = v8;
  v9[23] = v19;
  v9[22] = a8;
  v9[21] = a7;
  v9[20] = a6;
  v9[19] = a5;
  v9[18] = a4;
  v9[17] = a3;
  v9[16] = a2;
  v9[15] = a1;
  v9[12] = v9;
  v9[13] = 0;
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = 0;
  v9[5] = 0;
  v9[6] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[9] = 0;
  v9[14] = 0;
  type metadata accessor for GPKGroupID();
  v9[25] = swift_task_alloc();
  v9[13] = a1;
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  v9[6] = a6;
  v9[7] = a7;
  v9[8] = a8;
  v9[9] = v19;
  v9[14] = v8;
  return swift_task_switch();
}

uint64_t GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)()
{
  _QWORD *v0;
  char **v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = v0[25];
  v15 = v0[24];
  v14 = v0[23];
  v13 = v0[22];
  v12 = v0[21];
  v11 = v0[20];
  v10 = v0[19];
  v9 = v0[18];
  v8 = v0[17];
  v7 = v0[16];
  v5 = v0[15];
  v0[12] = v0;
  v1 = StaticString.encrypt.unsafeMutableAddressor();
  v17 = (uint64_t)*v1;
  v18 = (uint64_t)v1[1];
  v19 = *((_BYTE *)v1 + 16);
  outlined init with copy of GPKGroupID(v5, v6);
  outlined copy of Data._Representation(v7, v8);
  outlined copy of Data._Representation(v9, v10);
  outlined copy of Data._Representation(v11, v12);
  outlined copy of Data._Representation(v13, v14);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[26] = v2;
  v2[2] = v6;
  v2[3] = v7;
  v2[4] = v8;
  v2[5] = v9;
  v2[6] = v10;
  v2[7] = v11;
  v2[8] = v12;
  v2[9] = v13;
  v2[10] = v14;
  v2[11] = v15;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v16 + 216) = v3;
  *v3 = *(_QWORD *)(v16 + 96);
  v3[1] = GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:);
  return signpost<A>(_:_:)(v16 + 80, v17, v18, v19, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:), (uint64_t)v2, MEMORY[0x24BDCDDE8]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  v2 += 96;
  v13 = (_QWORD *)(v2 - 80);
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = v13[23];
    v12 = v13[21];
    v11 = v13[20];
    v10 = v13[19];
    v9 = v13[18];
    v8 = v13[17];
    v7 = v13[16];
    v5 = v13[15];
    v6 = v13[14];
    swift_task_dealloc();
    outlined destroy of GPKGroupID(v4);
    outlined consume of Data._Representation(v6, v5);
    outlined consume of Data._Representation(v7, v8);
    outlined consume of Data._Representation(v9, v10);
    outlined consume of Data._Representation(v11, v12);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[12] = v0;
  v2 = v0[10];
  v3 = v0[11];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[12] + 8))(v2, v3);
}

{
  _QWORD *v0;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v10 = v0[25];
  v9 = v0[23];
  v8 = v0[22];
  v7 = v0[21];
  v6 = v0[20];
  v5 = v0[19];
  v4 = v0[18];
  v2 = v0[17];
  v3 = v0[16];
  v0[12] = v0;
  swift_task_dealloc();
  outlined destroy of GPKGroupID(v10);
  outlined consume of Data._Representation(v3, v2);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  outlined consume of Data._Representation(v8, v9);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[12] + 8))();
}

uint64_t closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8[28] = v19;
  v8[27] = v18;
  v8[26] = v17;
  v8[25] = a8;
  v8[24] = a7;
  v8[23] = a6;
  v8[22] = a5;
  v8[21] = a4;
  v8[20] = a3;
  v8[19] = a2;
  v8[18] = a1;
  v8[15] = v8;
  v8[16] = 0;
  v8[7] = 0;
  v8[8] = 0;
  v8[9] = 0;
  v8[10] = 0;
  v8[11] = 0;
  v8[12] = 0;
  v8[13] = 0;
  v8[14] = 0;
  v8[17] = 0;
  type metadata accessor for GPKGroupID();
  v8[29] = swift_task_alloc();
  v8[30] = type metadata accessor for DecryptDataMessage();
  v8[31] = swift_task_alloc();
  v8[16] = a2;
  v8[7] = a3;
  v8[8] = a4;
  v8[9] = a5;
  v8[10] = a6;
  v8[11] = a7;
  v8[12] = a8;
  v8[13] = v17;
  v8[14] = v18;
  v8[17] = v19;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);

  v6 = v0[31];
  v7 = v0[29];
  v15 = v0[28];
  v5 = v0[27];
  v14 = v0[26];
  v13 = v0[25];
  v12 = v0[24];
  v11 = v0[23];
  v10 = v0[22];
  v9 = v0[21];
  v8 = v0[20];
  v1 = v0[19];
  v0[15] = v0;
  outlined init with copy of GPKGroupID(v1, v7);
  outlined copy of Data._Representation(v8, v9);
  outlined copy of Data._Representation(v10, v11);
  outlined copy of Data._Representation(v12, v13);
  outlined copy of Data._Representation(v14, v5);
  DecryptDataMessage.init(groupID:cipherText:associatedData:entitlementID:keyDiversifier:)(v7, v8, v9, v10, v11, v12, v13, v14, v6, v5);
  outlined init with copy of MessageSenderProtocol(v15 + 16, (uint64_t)(v0 + 2));
  v17 = v0[5];
  v18 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v17);
  v19 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8)
                                                                                           + **(int **)(v18 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  v16[32] = v2;
  v3 = lazy protocol witness table accessor for type DecryptDataMessage and conformance DecryptDataMessage();
  *v2 = v16[15];
  v2[1] = closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:);
  return v19(v16[18], v16[31], v16[30], v3, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = *v1;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of DecryptDataMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 120) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of DecryptDataMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 120) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = v1[8];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:);
  return closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in GPKGroupManager.decryptData(for:ciphertext:authenticating:entitlementID:keyDiversifier:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.deleteInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[6] = v1;
  v2[5] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v3 = type metadata accessor for UUID();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t GPKGroupManager.deleteInvitation(with:)()
{
  _QWORD *v0;
  char **v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v7 = v0[9];
  v4 = v0[8];
  v6 = v0[7];
  v8 = v0[6];
  v5 = v0[5];
  v0[2] = v0;
  v1 = StaticString.deleteInvitation.unsafeMutableAddressor();
  v10 = (uint64_t)*v1;
  v11 = (uint64_t)v1[1];
  v12 = *((_BYTE *)v1 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v5, v6);
  swift_retain();
  v13 = swift_task_alloc();
  v0[10] = v13;
  *(_QWORD *)(v13 + 16) = v7;
  *(_QWORD *)(v13 + 24) = v8;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 88) = v2;
  *v2 = *(_QWORD *)(v9 + 16);
  v2[1] = GPKGroupManager.deleteInvitation(with:);
  return signpost<A>(_:_:)(v14, v10, v11, v12, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.deleteInvitation(with:), v13, MEMORY[0x24BEE4AE0] + 8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v7 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[7];
    v4 = v7[6];
    v6 = v7[5];
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v0[9];
  v2 = v0[8];
  v3 = v0[7];
  v0[2] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t closure #1 in GPKGroupManager.deleteInvitation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[11] = a3;
  v3[10] = a2;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(_QWORD *)(v4 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = type metadata accessor for DeleteInvitation();
  v3[16] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.deleteInvitation(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v5 = v0[16];
  v6 = v0[14];
  v1 = v0[13];
  v7 = v0[11];
  v0[7] = v0;
  (*(void (**)(void))(v1 + 16))();
  DeleteInvitation.init(invitationID:)(v6, v5);
  outlined init with copy of MessageSenderProtocol(v7 + 16, (uint64_t)(v0 + 2));
  v9 = v0[5];
  v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v9);
  v11 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8)
                                                                                            + **(int **)(v10 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  v8[17] = v2;
  v3 = lazy protocol witness table accessor for type DeleteInvitation and conformance DeleteInvitation();
  *v2 = v8[7];
  v2[1] = closure #1 in GPKGroupManager.deleteInvitation(with:);
  return v11(v12, v8[16], v8[15], v3, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of DeleteInvitation(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of DeleteInvitation(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.deleteInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.deleteInvitation(with:);
  return closure #1 in GPKGroupManager.deleteInvitation(with:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in GPKGroupManager.deleteInvitation(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.initCKSchemas()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[9];
  v0[7] = v0;
  InitCKSchemasMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + 16, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 80) = v1;
  inited = lazy protocol witness table accessor for type InitCKSchemasMessage and conformance InitCKSchemasMessage();
  *v1 = *(_QWORD *)(v5 + 56);
  v1[1] = GPKGroupManager.initCKSchemas();
  return v9(v6, v6, &type metadata for InitCKSchemasMessage, inited, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

id Handle.__allocating_init(from:clientModelVersion:context:)(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  uint64_t countAndFlagsBits;
  id v5;
  id v6;
  id v7;
  double v8;
  id v9;
  id v11;
  id v12;
  id v13;
  objc_class *v17;
  void *v18;
  void *v20;
  id v21;
  id v22;

  v18 = (void *)objc_opt_self();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Handle", 6uLL, 1)._countAndFlagsBits;
  v20 = (void *)MEMORY[0x242632560](countAndFlagsBits);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_entityForName_inManagedObjectContext_, v20, a3);

  if (v21)
  {
    v12 = objc_allocWithZone(v17);
    v5 = a3;
    v13 = objc_msgSend(v12, sel_initWithEntity_insertIntoManagedObjectContext_, v21, a3);

    v22 = v13;
  }
  else
  {
    v22 = objc_msgSend(objc_allocWithZone(v17), sel_initWithContext_, a3);
  }
  v6 = v22;
  swift_bridgeObjectRetain();
  v11 = (id)MEMORY[0x242632560](a1, a2);
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setHandleString_, v11);

  v7 = v22;
  *(float *)&v8 = a4;
  objc_msgSend(v22, sel_setClientModelVersion_, v8);

  v9 = v22;
  swift_bridgeObjectRelease();

  return v22;
}

id static Handle.handle(from:clientModelVersion:context:)(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  uint64_t *v4;
  id v5;
  uint64_t v7;
  id v8;
  uint64_t *v13;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for Handle();
  v16 = static Handle.fetchRequest()();
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handleString == %@", 0x12uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v13 = v4;
  swift_bridgeObjectRetain();
  v13[3] = MEMORY[0x24BEE0D00];
  v13[4] = lazy protocol witness table accessor for type String and conformance String();
  *v13 = a1;
  v13[1] = a2;
  _finalizeUninitializedArray<A>(_:)();
  v15 = (void *)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setPredicate_, v15);

  NSManagedObjectContext.fetch<A>(_:)();
  if (v17)
  {

    return (id)v7;
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Handle]);
    lazy protocol witness table accessor for type [Handle] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [Handle]();
    if (v18)
    {
      swift_bridgeObjectRelease();

      return (id)v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      v5 = a3;
      v8 = Handle.__allocating_init(from:clientModelVersion:context:)(a1, a2, a3, a4);
      swift_bridgeObjectRelease();

      return v8;
    }
  }
}

uint64_t type metadata accessor for Handle()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for NSPredicate()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSPredicate;
  if (!lazy cache variable for type metadata for NSPredicate)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [Handle] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Handle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Handle] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Handle]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Handle] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Handle]()
{
  swift_bridgeObjectRelease();
}

id Handle.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v6;

  v6 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v6;
}

id Handle.init(entity:insertInto:)(void *a1, void *a2)
{
  id v2;
  id v6;
  objc_super v7;
  void *v8;
  void *v9;
  id v10;

  v10 = 0;
  v9 = a1;
  v8 = a2;
  v7.receiver = 0;
  v7.super_class = (Class)type metadata accessor for Handle();
  v6 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);
  v2 = v6;
  v10 = v6;

  return v6;
}

id Handle.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Handle();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for Handle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static Handle.handle(from:clientModelVersion:context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

id MetaData.__allocating_init(from:groupID:clientModelVersion:context:)(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  Swift::String v9;
  id v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  Class isa;
  id v22;
  id v23;
  id v24;
  Class v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  Class v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  void *object;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _DWORD v57[2];
  uint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD __b[6];
  id v62;

  v40 = a1;
  v39 = a2;
  v38 = a4;
  v53 = a3;
  memset(__b, 0, 0x2CuLL);
  v60 = 0;
  v59 = 0;
  v58 = 0;
  v56 = 0;
  v41 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)&isa - v43;
  v5 = *(_BYTE *)v4;
  v45 = *(_QWORD *)(v4 + 8);
  v46 = *(_QWORD *)(v4 + 16);
  v47 = *(_QWORD *)(v4 + 24);
  v48 = *(_QWORD *)(v4 + 32);
  v49 = *(_DWORD *)(v4 + 40);
  v50 = 1;
  LOBYTE(__b[0]) = v5 & 1;
  __b[1] = v45;
  __b[2] = v46;
  __b[3] = v47;
  __b[4] = v48;
  LODWORD(__b[5]) = v49;
  v60 = v6;
  v59 = v7;
  v58 = v8;
  v52 = (id)objc_opt_self();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MetaData", 8uLL, v50 & 1);
  object = v9._object;
  v54 = (id)MEMORY[0x242632560](v9._countAndFlagsBits);
  swift_bridgeObjectRelease();
  v55 = objc_msgSend(v52, sel_entityForName_inManagedObjectContext_, v54, v53);

  if (v55)
  {
    v36 = v55;
    v35 = v55;
    v56 = v55;
    v33 = objc_allocWithZone(v37);
    v11 = v53;
    v34 = objc_msgSend(v33, sel_initWithEntity_insertIntoManagedObjectContext_, v35, v53);

    v62 = v34;
  }
  else
  {
    v10 = objc_allocWithZone(v37);
    v62 = objc_msgSend(v10, sel_initWithContext_, v53);
  }
  v12 = v44;
  v22 = v62;
  v13 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v12, v39, v41);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  objc_msgSend(v22, sel_setGroupID_, isa);

  v24 = v62;
  v14 = v62;
  swift_bridgeObjectRetain();
  v23 = (id)MEMORY[0x242632560](v45, v46);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setKey_, v23);

  v26 = v62;
  v15 = v62;
  outlined copy of Data._Representation(v47, v48);
  v25 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v47, v48);
  objc_msgSend(v26, sel_setValue_, v25);

  v30 = v62;
  v16 = v62;
  v29 = v57;
  v57[0] = v49;
  v27 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  v28 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  objc_msgSend(v30, sel_setVersion_, v57[1]);

  v31 = v62;
  v17 = v62;
  *(float *)&v18 = v38;
  objc_msgSend(v31, sel_setClientModelVersion_, v18);

  v32 = v62;
  v19 = v62;

  outlined destroy of GPKGroupID(v39);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v47, v48);

  return v32;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE3FD8], MEMORY[0x24BEE3F88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE3FB0], MEMORY[0x24BEE3F88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

id MetaData.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v6;

  v6 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v6;
}

id MetaData.init(entity:insertInto:)(void *a1, void *a2)
{
  id v2;
  id v6;
  objc_super v7;
  void *v8;
  void *v9;
  id v10;

  v10 = 0;
  v9 = a1;
  v8 = a2;
  v7.receiver = 0;
  v7.super_class = (Class)type metadata accessor for MetaData();
  v6 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);
  v2 = v6;
  v10 = v6;

  return v6;
}

uint64_t type metadata accessor for MetaData()
{
  return objc_opt_self();
}

id MetaData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetaData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GPKMetadata.isEncrypted.getter()
{
  _BYTE *v0;

  return *v0 & 1;
}

uint64_t GPKMetadata.isEncrypted.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

void (*GPKMetadata.isEncrypted.modify())()
{
  return GPKMetadata.isEncrypted.modify;
}

uint64_t GPKMetadata.key.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKMetadata.value.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GPKMetadata.value.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

void (*GPKMetadata.value.modify())()
{
  return GPKMetadata.value.modify;
}

uint64_t GPKMetadata.version.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t GPKMetadata.init(key:value:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD __b[6];

  memset(__b, 0, 0x2CuLL);
  LOBYTE(__b[0]) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[1] = a1;
  __b[2] = a2;
  outlined copy of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a3, a4);
  __b[3] = a3;
  __b[4] = a4;
  LODWORD(__b[5]) = a5;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  swift_bridgeObjectRelease();
  *(_BYTE *)a6 = 0;
  *(_QWORD *)(a6 + 8) = a1;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  *(_QWORD *)(a6 + 32) = a4;
  *(_DWORD *)(a6 + 40) = a5;
  outlined consume of Data._Representation(a3, a4);
  swift_bridgeObjectRelease();
  return outlined destroy of GPKMetadata((uint64_t)__b);
}

uint64_t outlined destroy of GPKMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

BOOL static GPKMetadata.CodingKeys.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*a1)
  {
    if (*a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (*a2)
  {
    if (*a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t GPKMetadata.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

GroupKit::GPKMetadata::CodingKeys_optional __swiftcall GPKMetadata.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  GroupKit::GPKMetadata::CodingKeys_optional result;
  char v3;
  char v4;
  char *v5;
  char v6;
  char v7;

  v5 = v1;
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key", 3uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("value", 5uLL, 1);
    swift_bridgeObjectRetain();
    v4 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v7 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1);
      swift_bridgeObjectRetain();
      v3 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        result.value = swift_bridgeObjectRelease();
        *v5 = 3;
        return result;
      }
      swift_bridgeObjectRelease();
      v7 = 2;
    }
  }
  *v5 = v7;
  return (GroupKit::GPKMetadata::CodingKeys_optional)swift_bridgeObjectRelease();
}

GroupKit::GPKMetadata::CodingKeys_optional __swiftcall GPKMetadata.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 3;
  return (GroupKit::GPKMetadata::CodingKeys_optional)intValue;
}

uint64_t GPKMetadata.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
  return _hashValue<A>(for:)();
}

uint64_t GPKMetadata.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMetadata.CodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (!*v0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key", 3uLL, 1)._countAndFlagsBits;
  if (*v0 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("value", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMetadata.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKMetadata.CodingKeys.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMetadata.CodingKeys()
{
  return GPKMetadata.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMetadata.CodingKeys()
{
  return GPKMetadata.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMetadata.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMetadata.CodingKeys()
{
  return GPKMetadata.CodingKeys.stringValue.getter();
}

GroupKit::GPKMetadata::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance GPKMetadata.CodingKeys(uint64_t a1, uint64_t a2)
{
  return GPKMetadata.CodingKeys.init(stringValue:)(*(Swift::String *)&a1);
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMetadata.CodingKeys()
{
  return GPKMetadata.CodingKeys.intValue.getter();
}

GroupKit::GPKMetadata::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance GPKMetadata.CodingKeys(Swift::Int a1)
{
  return GPKMetadata.CodingKeys.init(intValue:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_BYTE *GPKMetadata.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  _BYTE *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  _BYTE __b[44];
  char v55;
  char *v56;

  v37 = a2;
  v38 = a1;
  v56 = 0;
  memset(__b, 0, sizeof(__b));
  v53 = 0;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMetadata.CodingKeys>);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v17 - v41;
  v56 = (char *)&v17 - v41;
  v55 = 0;
  v53 = v2;
  __b[0] = 0;
  v44 = v2[3];
  v45 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v44);
  lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
  v3 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v46 = v3;
  v47 = v3;
  if (v3)
  {
    v20 = v47;
  }
  else
  {
    v52 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v33 = 0;
    v34 = v4;
    v35 = v5;
    v36 = 0;
    v29 = v5;
    v28 = v4;
    v55 = 2;
    swift_bridgeObjectRetain();
    *(_QWORD *)&__b[8] = v28;
    *(_QWORD *)&__b[16] = v29;
    v30 = &v49;
    v49 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v6;
    v32 = v6;
    if (v6)
    {
      v19 = v32;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
      v20 = v19;
    }
    else
    {
      v23 = v50;
      v24 = v51;
      v55 = 6;
      outlined copy of Data._Representation(v50, v51);
      v7 = v31;
      *(_QWORD *)&__b[24] = v23;
      *(_QWORD *)&__b[32] = v24;
      v48 = 2;
      v8 = KeyedDecodingContainer.decode(_:forKey:)();
      v25 = v7;
      v26 = v8;
      v27 = v7;
      if (!v7)
      {
        v21 = v26;
        v22 = __b;
        *(_DWORD *)&__b[40] = v26;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v23, v24);
        outlined consume of Data._Representation(v23, v24);
        swift_bridgeObjectRelease();
        v9 = v28;
        v10 = v29;
        v11 = v23;
        v12 = v24;
        v13 = v37;
        v14 = v21;
        v15 = v38;
        *v37 = 0;
        *((_QWORD *)v13 + 1) = v9;
        *((_QWORD *)v13 + 2) = v10;
        *((_QWORD *)v13 + 3) = v11;
        *((_QWORD *)v13 + 4) = v12;
        *((_DWORD *)v13 + 10) = v14;
        __swift_destroy_boxed_opaque_existential_1(v15);
        return (_BYTE *)outlined destroy of GPKMetadata((uint64_t)v22);
      }
      v18 = v27;
      outlined consume of Data._Representation(v23, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
      v20 = v18;
    }
  }
  v17 = v20;
  result = (_BYTE *)__swift_destroy_boxed_opaque_existential_1(v38);
  if ((v55 & 2) != 0)
  {
    result = &__b[8];
    outlined destroy of String();
  }
  if ((v55 & 4) != 0)
  {
    result = &__b[24];
    outlined destroy of Data((uint64_t)&__b[24]);
  }
  return result;
}

uint64_t GPKMetadata.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  _QWORD v32[2];
  char v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;

  v15 = a1;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMetadata.CodingKeys>);
  v16 = *(_QWORD *)(v27 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v6 - v17;
  v36 = (char *)v6 - v17;
  v35 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v25 = *(_QWORD *)(v1 + 8);
  v26 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 24);
  v19 = *(_QWORD *)(v1 + 32);
  v20 = *(_DWORD *)(v1 + 40);
  v34 = v1;
  v21 = v35[3];
  v22 = v35[4];
  __swift_project_boxed_opaque_existential_1(v35, v21);
  lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v24;
  swift_bridgeObjectRetain();
  v33 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v28 = v2;
  v29 = v2;
  if (v2)
  {
    v7 = v29;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v27);
    v8 = v7;
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v18, v19);
    v12 = v32;
    v32[0] = v18;
    v32[1] = v19;
    v11 = &v31;
    v31 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    v3 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = v3;
    v14 = v3;
    if (v3)
    {
      v6[1] = v14;
      outlined destroy of Data((uint64_t)v32);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v27);
    }
    else
    {
      outlined destroy of Data((uint64_t)v32);
      v4 = v13;
      v30 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v9 = v4;
      v10 = v4;
      if (v4)
        v6[0] = v10;
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v27);
    }
  }
  return result;
}

_BYTE *protocol witness for Decodable.init(from:) in conformance GPKMetadata@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return GPKMetadata.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMetadata(uint64_t a1)
{
  return GPKMetadata.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetadata.CodingKeys, &type metadata for GPKMetadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetadata.CodingKeys, &type metadata for GPKMetadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetadata.CodingKeys, &type metadata for GPKMetadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetadata.CodingKeys, &type metadata for GPKMetadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetadata.CodingKeys, &type metadata for GPKMetadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in GPKMetadata.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMetadata.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMetadata.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetadata.CodingKeys and conformance GPKMetadata.CodingKeys();
}

uint64_t initializeBufferWithCopyOfBuffer for GPKMetadata(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GPKMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for GPKMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v4, v5);
  result = a1;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t assignWithCopy for GPKMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2 & 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v6, v7);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  outlined consume of Data._Representation(v2, v3);
  result = a1;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy44_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x2CuLL);
}

uint64_t assignWithTake for GPKMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  *(_BYTE *)a1 = *(_BYTE *)a2 & 1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v2;
  outlined consume of Data._Representation(v3, v4);
  result = a1;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t getEnumTagSinglePayload for GPKMetadata(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 44))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 16)))
        v3 = *(_QWORD *)(a1 + 16);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 44) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 44) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 16) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GPKMetadata()
{
  return &type metadata for GPKMetadata;
}

uint64_t getEnumTagSinglePayload for GPKMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMetadata.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKMetadata.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMetadata.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMetadata.CodingKeys()
{
  return &type metadata for GPKMetadata.CodingKeys;
}

uint64_t GPKMemberKey.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKMemberKey.groupVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKMemberKey() + 20));
}

uint64_t type metadata accessor for GPKMemberKey()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKMemberKey;
  if (!type metadata singleton initialization cache for GPKMemberKey)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKMemberKey.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKMemberKey() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

void *GPKMemberKey.identity.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + *(int *)(type metadata accessor for GPKMemberKey() + 28));
  v1 = v3;
  return v3;
}

uint64_t GPKMemberKey.init(rawKey:keyConverter:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t countAndFlagsBits;
  int v32;
  Swift::String v33;
  void *object;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v24 = a3;
  v37 = a1;
  v35 = a2;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v36 = 0;
  v25 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v26 = (uint64_t)&v20 - v25;
  v27 = (int *)type metadata accessor for GPKMemberKey();
  v28 = (*(_QWORD *)(*((_QWORD *)v27 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v37);
  v29 = (uint64_t)&v20 - v28;
  v51 = (char *)&v20 - v28;
  v50 = v3;
  v49 = v4;
  v30 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member key successfully converted to pcs identity", 0x31uLL, 1);
  countAndFlagsBits = v5._countAndFlagsBits;
  object = v5._object;
  v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/GPKMemberKey.swift", 0x1BuLL, v30 & 1);
  v32 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v48);
  v6._countAndFlagsBits = countAndFlagsBits;
  v6._object = object;
  v47 = v48 & v30;
  gpklog(_:type:fileID:line:subsystem:)(v6, (os_log_type_t)v32, v33, 19, (GroupKit::LogSubsystem)&v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = v35[3];
  v43 = v35[4];
  __swift_project_boxed_opaque_existential_1(v35, v42);
  v38 = type metadata accessor for GPKMemberKey.RawKey();
  v7 = (uint64_t *)(v37 + *(int *)(v38 + 28));
  v39 = *v7;
  v40 = v7[1];
  outlined copy of Data._Representation(v39, v40);
  v8 = v41;
  v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v43 + 8))(v39, v40, v42);
  v44 = v8;
  v45 = v9;
  v46 = v8;
  if (v8)
  {
    v20 = v46;
    outlined consume of Data._Representation(v39, v40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return outlined destroy of GPKMemberKey.RawKey(v37);
  }
  else
  {
    v21 = v45;
    outlined consume of Data._Representation(v39, v40);
    v10 = v26;
    v11 = v37;
    *(_QWORD *)(v29 + v27[7]) = v21;
    outlined init with copy of GPKGroupID(v11, v10);
    outlined init with take of GPKGroupID(v26, v29);
    v12 = v38;
    v13 = v37;
    *(_QWORD *)(v29 + v27[5]) = *(_QWORD *)(v37 + *(int *)(v38 + 20));
    v14 = (uint64_t *)(v13 + *(int *)(v12 + 24));
    v22 = *v14;
    v23 = v14[1];
    swift_bridgeObjectRetain();
    v15 = v29;
    v16 = v23;
    v17 = v24;
    v18 = (_QWORD *)(v29 + v27[6]);
    *v18 = v22;
    v18[1] = v16;
    outlined init with copy of GPKMemberKey(v15, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    outlined destroy of GPKMemberKey.RawKey(v37);
    return outlined destroy of GPKMemberKey(v29);
  }
}

uint64_t type metadata accessor for GPKMemberKey.RawKey()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKMemberKey.RawKey;
  if (!type metadata singleton initialization cache for GPKMemberKey.RawKey)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined destroy of GPKMemberKey.RawKey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKMemberKey.RawKey();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(v3 + 28)), *(_QWORD *)(a1 + *(int *)(v3 + 28) + 8));
  return a1;
}

uint64_t outlined init with copy of GPKMemberKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  id v4;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v9 = (int *)type metadata accessor for GPKMemberKey();
  *(_QWORD *)(a2 + v9[5]) = *(_QWORD *)(a1 + v9[5]);
  v3 = (_QWORD *)(a1 + v9[6]);
  v7 = (_QWORD *)(a2 + v9[6]);
  *v7 = *v3;
  v8 = v3[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v10 = v9[7];
  v11 = *(void **)(a1 + v10);
  v4 = v11;
  result = a2;
  *(_QWORD *)(a2 + v10) = v11;
  return result;
}

uint64_t outlined destroy of GPKMemberKey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKMemberKey();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t GPKMemberKey.RawKey.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKMemberKey.RawKey.groupVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKMemberKey.RawKey() + 20));
}

uint64_t GPKMemberKey.RawKey.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKMemberKey.RawKey() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKMemberKey.RawKey.key.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for GPKMemberKey.RawKey() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t GPKMemberKey.RawKey.init(groupID:groupVersion:serviceName:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v30 = a7;
  v34 = a1;
  v27 = a2;
  v28 = a3;
  v33 = a4;
  v32 = a5;
  v31 = a6;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v23 = 0;
  v24 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v26 = (uint64_t)&v23 - v24;
  v29 = (int *)type metadata accessor for GPKMemberKey.RawKey();
  v25 = (*(_QWORD *)(*((_QWORD *)v29 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v34);
  v35 = (uint64_t)&v23 - v25;
  v42 = (char *)&v23 - v25;
  v41 = v7;
  v40 = v8;
  v38 = v9;
  v39 = v10;
  v36 = v11;
  v37 = v12;
  outlined init with copy of GPKGroupID(v7, v13);
  outlined init with take of GPKGroupID(v26, v35);
  *(_QWORD *)(v35 + v29[5]) = v27;
  swift_bridgeObjectRetain();
  v14 = v32;
  v15 = v31;
  v16 = v33;
  v17 = (_QWORD *)(v35 + v29[6]);
  *v17 = v28;
  v17[1] = v16;
  outlined copy of Data._Representation(v14, v15);
  v18 = v30;
  v19 = v31;
  v20 = v35;
  v21 = (_QWORD *)(v35 + v29[7]);
  *v21 = v32;
  v21[1] = v19;
  outlined init with copy of GPKMemberKey.RawKey(v20, v18);
  outlined consume of Data._Representation(v32, v31);
  swift_bridgeObjectRelease();
  outlined destroy of GPKGroupID(v34);
  return outlined destroy of GPKMemberKey.RawKey(v35);
}

uint64_t outlined init with copy of GPKMemberKey.RawKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v9 = (int *)type metadata accessor for GPKMemberKey.RawKey();
  *(_QWORD *)(a2 + v9[5]) = *(_QWORD *)(a1 + v9[5]);
  v3 = (_QWORD *)(a1 + v9[6]);
  v7 = (_QWORD *)(a2 + v9[6]);
  *v7 = *v3;
  v8 = v3[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v10 = v9[7];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  result = a2;
  v5 = (uint64_t *)(a2 + v10);
  *v5 = v11;
  v5[1] = v12;
  return result;
}

void static GPKMemberKey.RawKey.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D27465C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D2746A8
                                                                                       + *((int *)qword_23D274710 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D2746B8()
{
  uint64_t v1;

  return v1 == 0;
}

void GPKMemberKey.RawKey.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D274770()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMemberKey.RawKey.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupVersion", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key", 3uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t GPKMemberKey.RawKey.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t GPKMemberKey.RawKey.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey.CodingKeys, &type metadata for GPKMemberKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey.CodingKeys, &type metadata for GPKMemberKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey.CodingKeys, &type metadata for GPKMemberKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey.CodingKeys, &type metadata for GPKMemberKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMemberKey.RawKey.CodingKeys, &type metadata for GPKMemberKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMemberKey.RawKey.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKMemberKey.RawKey.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D274BD0()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKMemberKey.RawKey.CodingKeys(char *a1)
{
  char v1;

  static GPKMemberKey.RawKey.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMemberKey.RawKey.CodingKeys()
{
  return GPKMemberKey.RawKey.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance GPKMemberKey.RawKey.CodingKeys(uint64_t a1)
{
  char *v1;

  GPKMemberKey.RawKey.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMemberKey.RawKey.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKMemberKey.RawKey.CodingKeys()
{
  char *v0;

  GPKMemberKey.RawKey.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMemberKey.RawKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberKey.RawKey.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMemberKey.RawKey.CodingKeys()
{
  return GPKMemberKey.RawKey.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMemberKey.RawKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMemberKey.RawKey.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMemberKey.RawKey.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMemberKey.RawKey.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMemberKey.RawKey.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[2];
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;

  v27 = a1;
  v47 = 0;
  v46 = 0;
  v36 = type metadata accessor for GPKGroupID();
  v26 = (*(_QWORD *)(*(_QWORD *)(v36 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (uint64_t)v10 - v26;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMemberKey.RawKey.CodingKeys>);
  v28 = *(_QWORD *)(v35 - 8);
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)v10 - v29;
  v47 = v2;
  v46 = v1;
  v30 = v2[3];
  v31 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v30);
  lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v33, v38);
  v34 = &v45;
  v45 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v39 = v3;
  v40 = v3;
  if (v3)
  {
    v11 = v40;
    outlined destroy of GPKGroupID(v38);
    result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v32, v35);
    v12 = v11;
  }
  else
  {
    outlined destroy of GPKGroupID(v38);
    v4 = type metadata accessor for GPKMemberKey.RawKey();
    v5 = v39;
    v23 = v4;
    v44 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v24 = v5;
    v25 = v5;
    if (v5)
    {
      v10[3] = v25;
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v32, v35);
    }
    else
    {
      v6 = (uint64_t *)(v33 + *(int *)(v23 + 24));
      v19 = *v6;
      v20 = v6[1];
      swift_bridgeObjectRetain();
      v43 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v21 = 0;
      v22 = 0;
      swift_bridgeObjectRelease();
      v7 = (uint64_t *)(v33 + *(int *)(v23 + 28));
      v13 = *v7;
      v14 = v7[1];
      outlined copy of Data._Representation(v13, v14);
      v16 = v42;
      v42[0] = v13;
      v42[1] = v14;
      v15 = &v41;
      v41 = 3;
      lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v21;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v17 = v8;
      v18 = v8;
      if (v8)
        v10[1] = v18;
      outlined destroy of Data((uint64_t)v42);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v32, v35);
    }
  }
  return result;
}

uint64_t GPKMemberKey.RawKey.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  _QWORD *v60;
  char v61;

  v36 = a2;
  v44 = a1;
  v60 = 0;
  v40 = 0;
  v37 = type metadata accessor for GPKGroupID();
  v38 = (*(_QWORD *)(*(_QWORD *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (uint64_t)&v17 - v38;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMemberKey.RawKey.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)&v17 - v43;
  v45 = (int *)type metadata accessor for GPKMemberKey.RawKey();
  v46 = (*(_QWORD *)(*((_QWORD *)v45 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v44);
  v47 = (uint64_t)&v17 - v46;
  v61 = 0;
  v60 = v2;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
  v3 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v21 = v53;
  }
  else
  {
    v33 = &v59;
    v59 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34 = v4;
    v35 = v4;
    if (v4)
    {
      v20 = v35;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
      v21 = v20;
    }
    else
    {
      v29 = 1;
      v61 = 1;
      outlined init with take of GPKGroupID(v39, v47);
      v5 = v34;
      v58 = v29;
      v6 = KeyedDecodingContainer.decode(_:forKey:)();
      v30 = v5;
      v31 = v6;
      v32 = v5;
      if (v5)
      {
        v19 = v32;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v21 = v19;
      }
      else
      {
        *(_QWORD *)(v47 + v45[5]) = v31;
        v57 = 2;
        v7 = KeyedDecodingContainer.decode(_:forKey:)();
        v25 = 0;
        v26 = v7;
        v27 = v8;
        v28 = 0;
        v9 = (uint64_t *)(v47 + v45[6]);
        v61 = 5;
        *v9 = v7;
        v9[1] = v8;
        v22 = &v54;
        v54 = 3;
        lazy protocol witness table accessor for type Data and conformance Data();
        v10 = v25;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v23 = v10;
        v24 = v10;
        if (!v10)
        {
          v11 = v41;
          v12 = v48;
          v13 = v42;
          v14 = v56;
          v15 = (_QWORD *)(v47 + v45[7]);
          v61 = 13;
          *v15 = v55;
          v15[1] = v14;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
          outlined init with copy of GPKMemberKey.RawKey(v47, v36);
          __swift_destroy_boxed_opaque_existential_1(v44);
          return outlined destroy of GPKMemberKey.RawKey(v47);
        }
        v18 = v24;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v21 = v18;
      }
    }
  }
  v17 = v21;
  result = __swift_destroy_boxed_opaque_existential_1(v44);
  if ((v61 & 1) != 0)
    result = outlined destroy of GPKGroupID(v47);
  if ((v61 & 4) != 0)
  {
    result = v47 + v45[6];
    outlined destroy of String();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMemberKey.RawKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKMemberKey.RawKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMemberKey.RawKey(uint64_t a1)
{
  return GPKMemberKey.RawKey.encode(to:)(a1);
}

unint64_t initializeBufferWithCopyOfBuffer for GPKMemberKey(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    *(_QWORD *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v4 = a3[6];
    v7 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v8 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    v9 = a3[7];
    v10 = *(void **)((char *)a2 + v9);
    v5 = v10;
    *(_QWORD *)((char *)a1 + v9) = v10;
    return (unint64_t)a1;
  }
}

void destroy for GPKMemberKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for GPKMemberKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  void *v12;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v7 = (_QWORD *)(a1 + a3[6]);
  *v7 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v11 = a3[7];
  v12 = *(void **)(a2 + v11);
  v5 = v12;
  result = a1;
  *(_QWORD *)(a1 + v11) = v12;
  return result;
}

uint64_t assignWithCopy for GPKMemberKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v12;
  void *v13;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v8 = (_QWORD *)(a1 + a3[6]);
  *v8 = *v4;
  v9 = v4[1];
  swift_bridgeObjectRetain();
  v8[1] = v9;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = *(void **)(a2 + v12);
  v5 = v13;
  v6 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;

  return a1;
}

__n128 initializeWithTake for GPKMemberKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  result = *(__n128 *)(a2 + a3[6]);
  *(__n128 *)(a1 + a3[6]) = result;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return result;
}

uint64_t assignWithTake for GPKMemberKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  void *v7;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v5 = (_QWORD *)(a1 + a3[6]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v6 = (void **)(a1 + a3[7]);
  v7 = *v6;
  *v6 = *(void **)(a2 + a3[7]);

  return a1;
}

uint64_t getEnumTagSinglePayload for GPKMemberKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D275C38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for GPKMemberKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D275D34(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKMemberKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GPKMemberKey.RawKey(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v17;

  v17 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v17 & 0x20000) != 0)
  {
    v12 = *a2;
    swift_retain();
    *a1 = v12;
    return *a1 + ((v17 + 16) & ~(unint64_t)v17);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    *(_QWORD *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v4 = a3[6];
    v7 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v8 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    v10 = (_QWORD *)((char *)a1 + a3[7]);
    v5 = (uint64_t *)((char *)a2 + a3[7]);
    v9 = *v5;
    v11 = v5[1];
    outlined copy of Data._Representation(*v5, v11);
    *v10 = v9;
    v10[1] = v11;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPKMemberKey.RawKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t initializeWithCopy for GPKMemberKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v7 = (_QWORD *)(a1 + a3[6]);
  *v7 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a2 + v11 + 8);
  outlined copy of Data._Representation(v12, v13);
  result = a1;
  v6 = (uint64_t *)(a1 + v11);
  *v6 = v12;
  v6[1] = v13;
  return result;
}

uint64_t assignWithCopy for GPKMemberKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v9 = (_QWORD *)(a1 + a3[6]);
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  v9[1] = v10;
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = *(_QWORD *)(a2 + v13);
  v15 = *(_QWORD *)(a2 + v13 + 8);
  outlined copy of Data._Representation(v14, v15);
  v5 = (uint64_t *)(a1 + v13);
  v6 = *(_QWORD *)(a1 + v13);
  v7 = *(_QWORD *)(a1 + v13 + 8);
  *v5 = v14;
  v5[1] = v15;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

__n128 initializeWithTake for GPKMemberKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  result = *(__n128 *)(a2 + a3[7]);
  *(__n128 *)(a1 + a3[7]) = result;
  return result;
}

uint64_t assignWithTake for GPKMemberKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v5 = (_QWORD *)(a1 + a3[6]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a2 + a3[7]);
  v7 = *v6;
  v8 = v6[1];
  v9 = (uint64_t *)(a1 + a3[7]);
  v10 = *v9;
  v11 = v9[1];
  *v9 = v7;
  v9[1] = v8;
  outlined consume of Data._Representation(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKMemberKey.RawKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D2763A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for GPKMemberKey.RawKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D2764A4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKMemberKey.RawKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GPKMemberKey.RawKey.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMemberKey.RawKey.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for GPKMemberKey.RawKey.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMemberKey.RawKey.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMemberKey.RawKey.CodingKeys()
{
  return &type metadata for GPKMemberKey.RawKey.CodingKeys;
}

uint64_t type metadata accessor for PCSIdentityRef()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for PCSIdentityRef;
  if (!lazy cache variable for type metadata for PCSIdentityRef)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for PCSIdentityRef);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMemberKey.RawKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMemberKey.RawKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMemberKey.RawKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMemberKey.RawKey.CodingKeys and conformance GPKMemberKey.RawKey.CodingKeys();
}

uint64_t one-time initialization function for logQueue()
{
  uint64_t result;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v2 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)&v1 - v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)&v1 - v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v6 = (char *)&v1 - v4;
  type metadata accessor for OS_dispatch_queue();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.queue.logger", 0x1FuLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v8);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  logQueue = result;
  return result;
}

uint64_t default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;

  v3 = *MEMORY[0x24BEE5750];
  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 104))(a1, v3);
}

uint64_t *logQueue.unsafeMutableAddressor()
{
  if (one-time initialization token for logQueue != -1)
    swift_once();
  return &logQueue;
}

void *one-time initialization function for loggers()
{
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Logger));
  _allocateUninitializedArray<A>(_:)();
  type metadata accessor for Logger();
  result = (void *)Dictionary.init(dictionaryLiteral:)();
  loggers._rawValue = result;
  return result;
}

Swift::OpaquePointer *loggers.unsafeMutableAddressor()
{
  if (one-time initialization token for loggers != -1)
    swift_once();
  return &loggers;
}

GroupKit::LogSubsystem_optional __swiftcall LogSubsystem.init(rawValue:)(Swift::String rawValue)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  GroupKit::LogSubsystem_optional result;
  _BYTE *v5;
  Swift::Int v7;
  char v8;

  v5 = v1;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "com.apple.groupkit";
  *(_QWORD *)(v3 + 8) = 18;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "com.apple.groupkit.server";
  *(_QWORD *)(v3 + 32) = 25;
  *(_BYTE *)(v3 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, rawValue);
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v7 != 1)
    {
      result.value = swift_bridgeObjectRelease();
      *v5 = 2;
      return result;
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  *v5 = v8 & 1;
  return (GroupKit::LogSubsystem_optional)swift_bridgeObjectRelease();
}

uint64_t LogSubsystem.rawValue.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.server", 0x19uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogSubsystem()
{
  lazy protocol witness table accessor for type LogSubsystem and conformance LogSubsystem();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type LogSubsystem and conformance LogSubsystem()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogSubsystem and conformance LogSubsystem;
  if (!lazy protocol witness table cache variable for type LogSubsystem and conformance LogSubsystem)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LogSubsystem, &type metadata for LogSubsystem);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogSubsystem and conformance LogSubsystem);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogSubsystem and conformance LogSubsystem;
  if (!lazy protocol witness table cache variable for type LogSubsystem and conformance LogSubsystem)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for LogSubsystem, &type metadata for LogSubsystem);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogSubsystem and conformance LogSubsystem);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogSubsystem()
{
  lazy protocol witness table accessor for type LogSubsystem and conformance LogSubsystem();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogSubsystem()
{
  lazy protocol witness table accessor for type LogSubsystem and conformance LogSubsystem();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogSubsystem()
{
  lazy protocol witness table accessor for type LogSubsystem and conformance LogSubsystem();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKit::LogSubsystem_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LogSubsystem(Swift::String *a1)
{
  return LogSubsystem.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LogSubsystem@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = LogSubsystem.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t Optional.logInfo.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  _QWORD v13[2];
  char *v14;
  Builtin::Word v15;
  int v16;
  void *object;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  char *v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  v27 = *(_QWORD *)(a1 + 16);
  v33 = v27;
  v26 = *(_QWORD *)(v27 - 8);
  v23 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v1);
  v24 = (char *)v13 - v23;
  v32 = (char *)v13 - v23;
  v25 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (const void *)MEMORY[0x24BDAC7A8](v2);
  v28 = (char *)v13 - v25;
  v31 = v4;
  outlined init with copy of A?(v4, (char *)v13 - v25, v5, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v28, 1, v27) == 1)
  {
    v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v24, v28, v27);
    v32 = v24;
    v15 = 0;
    v7 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v18 = &v29;
    v29 = v7;
    v30 = v8;
    v14 = "";
    v16 = 1;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v15, 1);
    v13[1] = v9._object;
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v14, v15, v16 & 1);
    object = v10._object;
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    v20 = v29;
    v19 = v30;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v21._countAndFlagsBits = String.init(stringInterpolation:)();
    v21._object = v11;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v27);
    v22 = v21;
  }
  return v22._countAndFlagsBits;
}

void *outlined init with copy of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t default argument 1 of gpklog(_:type:fileID:line:subsystem:)()
{
  return static os_log_type_t.default.getter();
}

void default argument 4 of gpklog(_:type:fileID:line:subsystem:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

Swift::Void __swiftcall gpklog(_:type:fileID:line:subsystem:)(Swift::String _, os_log_type_t type, Swift::String fileID, Swift::Int line, GroupKit::LogSubsystem subsystem)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  id v12;
  uint64_t v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  unint64_t v22;
  Swift::String v23;
  int v24;
  int v25;
  int v26;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t aBlock;
  int v39;
  int v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  uint64_t (*v43)();
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  countAndFlagsBits = _._countAndFlagsBits;
  object = _._object;
  v26 = type;
  v23 = fileID;
  v21[1] = line;
  v21[2] = subsystem;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v45 = 0;
  v29 = 0;
  v32 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v32 - 8);
  v21[0] = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v31 = (char *)v21 - v21[0];
  v35 = type metadata accessor for DispatchQoS();
  v33 = *(_QWORD *)(v35 - 8);
  v22 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](countAndFlagsBits);
  v34 = (char *)v21 - v22;
  v50 = v5;
  v51 = v6;
  v49 = v7;
  v47 = v8;
  v48 = v9;
  v46 = v10;
  v25 = *v11;
  v24 = 1;
  v45 = v25 & 1;
  v37 = (id)*logQueue.unsafeMutableAddressor();
  v12 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = swift_allocObject();
  v14 = v23._object;
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v18 = object;
  v19 = v13;
  v20 = countAndFlagsBits;
  *(_QWORD *)(v19 + 16) = v23._countAndFlagsBits;
  *(_QWORD *)(v19 + 24) = v14;
  *(_BYTE *)(v19 + 32) = v16 & v15;
  *(_BYTE *)(v19 + 33) = v17;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = v18;
  v43 = partial apply for closure #1 in gpklog(_:type:fileID:line:subsystem:);
  v44 = v19;
  aBlock = MEMORY[0x24BDAC760];
  v39 = 1107296256;
  v40 = 0;
  v41 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v42 = &block_descriptor_0;
  v36 = _Block_copy(&aBlock);
  default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  MEMORY[0x2426329C8](v29, v34, v31, v36);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  _Block_release(v36);
  swift_release();

}

uint64_t closure #1 in gpklog(_:type:fileID:line:subsystem:)(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD v116[2];
  uint64_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE **v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  uint32_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  NSObject *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE **v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint32_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  NSObject *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE **v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint32_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  NSObject *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint8_t *v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE **v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t *v205;
  uint32_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  NSObject *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint8_t *v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE **v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t *v231;
  uint32_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  NSObject *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint8_t *v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE **v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  uint32_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  NSObject *v274;
  int v275;
  _QWORD *v276;
  uint64_t *v277;
  char *v278;
  uint64_t v279;
  char *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *object;
  _QWORD *v286;
  Builtin::Word v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  Builtin::Word v293;
  void *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  Swift::OpaquePointer *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t *v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  Swift::String *v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char *v327;
  unint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  Swift::String *v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD v353[5];
  Swift::String v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t (*v359)(uint64_t, uint64_t, uint64_t);
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _BYTE *v363;
  uint64_t v364;
  uint32_t v365;
  uint64_t (*v366)(uint64_t, uint64_t, uint64_t);
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _BYTE *v370;
  uint64_t v371;
  uint32_t v372;
  uint64_t (*v373)(uint64_t, uint64_t, uint64_t);
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE *v377;
  uint64_t v378;
  uint32_t v379;
  uint64_t (*v380)(uint64_t, uint64_t, uint64_t);
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _BYTE *v384;
  uint64_t v385;
  uint32_t v386;
  uint64_t (*v387)(uint64_t, uint64_t, uint64_t);
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _BYTE *v391;
  uint64_t v392;
  uint32_t v393;
  uint64_t (*v394)(uint64_t, uint64_t, uint64_t);
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _BYTE *v398;
  uint64_t v399;
  uint32_t v400;
  char v401;
  char v402;
  char v403;
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  uint64_t v409;
  _QWORD v410[2];
  char v411;
  _QWORD v412[2];
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD v418[2];
  char v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD v428[5];
  Swift::String v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  char v438;
  char v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;

  v338 = a1;
  v339 = a2;
  v330 = a3;
  v331 = a4;
  v332 = a5;
  v333 = a6;
  v442 = 0;
  v440 = 0;
  v441 = 0;
  v439 = 0;
  v438 = 0;
  v436 = 0;
  v437 = 0;
  v422 = 0;
  v423 = 0;
  v414 = 0;
  v415 = 0;
  v325 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v326 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v327 = (char *)v116 - v326;
  v328 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v116 - v326);
  v329 = (uint64_t)v116 - v328;
  v334 = type metadata accessor for Logger();
  v335 = *(_QWORD *)(v334 - 8);
  v336 = (*(_QWORD *)(v335 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v339);
  v337 = (char *)v116 - v336;
  v442 = (char *)v116 - v336;
  v440 = v9;
  v441 = v8;
  v340 = 1;
  v439 = v10 & 1;
  v438 = v11;
  v436 = v12;
  v437 = v13;
  swift_bridgeObjectRetain();
  v430 = v338;
  v431 = v339;
  v14 = Character.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)("/", 1uLL, v340 & 1);
  v345 = &v429;
  v429 = v14;
  v343 = lazy protocol witness table accessor for type String and conformance String();
  v342 = MEMORY[0x24BEE0D00];
  v344 = MEMORY[0x24BEE0730];
  v341 = default argument 1 of Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  default argument 2 of Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  v348 = Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  outlined destroy of Character();
  swift_bridgeObjectRetain();
  v347 = v428;
  v428[0] = v348;
  v346 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
  lazy protocol witness table accessor for type [Substring] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [Substring]();
  v349 = v428[1];
  v350 = v428[2];
  v351 = v428[3];
  v352 = v428[4];
  swift_bridgeObjectRelease();
  if (v352)
  {
    v321 = v349;
    v322 = v350;
    v323 = v351;
    v324 = v352;
    v355 = v349;
    v356 = v350;
    v357 = v351;
    v358 = v352;
    v15 = Character.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
    v310 = &v354;
    v354 = v15;
    v308 = lazy protocol witness table accessor for type Substring and conformance Substring();
    v307 = MEMORY[0x24BEE1E08];
    v309 = MEMORY[0x24BEE0730];
    v306 = default argument 1 of Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    default argument 2 of Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    v312 = Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    outlined destroy of Character();
    swift_bridgeObjectRetain();
    v311 = v353;
    v353[0] = v312;
    lazy protocol witness table accessor for type [Substring] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [Substring]();
    v313 = v353[1];
    v314 = v353[2];
    v315 = v353[3];
    v316 = v353[4];
    swift_bridgeObjectRelease();
    v317 = v313;
    v318 = v314;
    v319 = v315;
    v320 = v316;
  }
  else
  {
    v317 = 0;
    v318 = 0;
    v319 = 0;
    v320 = 0;
  }
  v424 = v317;
  v425 = v318;
  v426 = v319;
  v427 = v320;
  if (v320)
  {
    v432 = v424;
    v433 = v425;
    v434 = v426;
    v435 = v427;
  }
  else
  {
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupkit", 8uLL, 1);
    v432 = MEMORY[0x242632A40](v16._countAndFlagsBits, v16._object);
    v433 = v17;
    v434 = v18;
    v435 = v19;
    outlined destroy of Substring?();
  }
  v284 = v435;
  v289 = MEMORY[0x242632674](v432, v433, v434);
  v304 = v20;
  swift_bridgeObjectRelease();
  v422 = v289;
  v423 = v304;
  v287 = 1;
  v21 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v295 = &v420;
  v420 = v21;
  v421 = v22;
  v292 = "";
  v293 = 0;
  v305 = 1;
  v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  object = v23._object;
  DefaultStringInterpolation.appendLiteral(_:)(v23);
  swift_bridgeObjectRelease();
  v419 = v330 & v305;
  v24 = LogSubsystem.rawValue.getter();
  v286 = v418;
  v418[0] = v24;
  v418[1] = v25;
  v301 = MEMORY[0x24BEE0D00];
  v290 = MEMORY[0x24BEE0D70];
  v291 = MEMORY[0x24BEE0D68];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", v287, v305 & 1);
  v288 = v26._object;
  DefaultStringInterpolation.appendLiteral(_:)(v26);
  swift_bridgeObjectRelease();
  v416 = v289;
  v417 = v304;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v292, v293, v305 & 1);
  v294 = v27._object;
  DefaultStringInterpolation.appendLiteral(_:)(v27);
  swift_bridgeObjectRelease();
  v297 = v420;
  v296 = v421;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v299 = String.init(stringInterpolation:)();
  v300 = v28;
  v414 = v299;
  v415 = v28;
  v298 = loggers.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  v303 = &v413;
  swift_beginAccess();
  v302 = v412;
  v412[0] = v299;
  v412[1] = v300;
  MEMORY[0x24263250C]();
  outlined destroy of String();
  swift_endAccess();
  swift_bridgeObjectRetain();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v335 + 48))(v329, v305, v334) == 1)
  {
    v411 = v330 & 1;
    v282 = LogSubsystem.rawValue.getter();
    v283 = v29;
    swift_bridgeObjectRetain();
    Logger.init(subsystem:category:)();
    outlined destroy of Logger?(v329);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v335 + 32))(v337, v329, v334);
  }
  swift_bridgeObjectRelease();
  loggers.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v327, v337, v334);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v327, 0, 1, v334);
  v276 = v410;
  v410[0] = v299;
  v410[1] = v300;
  v277 = &v409;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Logger]);
  Dictionary.subscript.setter();
  swift_endAccess();
  v30 = static os_log_type_t.info.getter();
  v280 = &v408;
  v408 = v30;
  v278 = &v407;
  v407 = v331;
  v279 = type metadata accessor for os_log_type_t();
  v281 = lazy protocol witness table accessor for type os_log_type_t and conformance os_log_type_t();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v264 = 32;
    v265 = 7;
    v31 = swift_allocObject();
    v32 = v333;
    v266 = v31;
    *(_QWORD *)(v31 + 16) = v332;
    *(_QWORD *)(v31 + 24) = v32;
    v274 = Logger.logObject.getter();
    v275 = static os_log_type_t.info.getter();
    v261 = &v364;
    v364 = 12;
    v259 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v260 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v262 = v365;
    v263 = 17;
    v268 = swift_allocObject();
    *(_BYTE *)(v268 + 16) = 32;
    v269 = swift_allocObject();
    *(_BYTE *)(v269 + 16) = 8;
    v33 = swift_allocObject();
    v34 = v266;
    v267 = v33;
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #3 in closure #1 in gpklog(_:type:fileID:line:subsystem:);
    *(_QWORD *)(v33 + 24) = v34;
    v35 = swift_allocObject();
    v36 = v267;
    v271 = v35;
    *(_QWORD *)(v35 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v35 + 24) = v36;
    v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v270 = _allocateUninitializedArray<A>(_:)();
    v272 = v37;
    swift_retain();
    v38 = v268;
    v39 = v272;
    *v272 = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[1] = v38;
    swift_retain();
    v40 = v269;
    v41 = v272;
    v272[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v41[3] = v40;
    swift_retain();
    v42 = v271;
    v43 = v272;
    v272[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v274, (os_log_type_t)v275))
    {
      v44 = v325;
      v252 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v253 = createStorage<A>(capacity:type:)(0);
      v254 = createStorage<A>(capacity:type:)(1);
      v255 = &v363;
      v363 = v252;
      v256 = &v362;
      v362 = v253;
      v257 = &v361;
      v361 = v254;
      serialize(_:at:)(2, &v363);
      serialize(_:at:)(1, v255);
      v359 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v360 = v268;
      closure #1 in osLogInternal(_:log:type:)(&v359, (uint64_t)v255, (uint64_t)v256, (uint64_t)v257);
      v258 = v44;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        v359 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v360 = v269;
        closure #1 in osLogInternal(_:log:type:)(&v359, (uint64_t)&v363, (uint64_t)&v362, (uint64_t)&v361);
        v250 = 0;
        v359 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v360 = v271;
        closure #1 in osLogInternal(_:log:type:)(&v359, (uint64_t)&v363, (uint64_t)&v362, (uint64_t)&v361);
        _os_log_impl(&dword_23D1FC000, v274, (os_log_type_t)v275, "%s", v252, v262);
        destroyStorage<A>(_:count:)(v253, 0, v251);
        destroyStorage<A>(_:count:)(v254, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x242632A10](v252, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

  }
  else
  {
    v406 = static os_log_type_t.debug.getter();
    v405 = v331;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v248 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1)._object;
      v247 = String.utf8CString.getter();
      swift_retain();
      swift_release();
      swift_retain();
      v246 = v247 + 32;
      swift_bridgeObjectRelease();
      v249 = os_variant_allows_internal_security_policies();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if ((v249 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v234 = 32;
        v235 = 7;
        v45 = swift_allocObject();
        v46 = v333;
        v236 = v45;
        *(_QWORD *)(v45 + 16) = v332;
        *(_QWORD *)(v45 + 24) = v46;
        v244 = Logger.logObject.getter();
        v245 = static os_log_type_t.default.getter();
        v231 = &v371;
        v371 = 12;
        v229 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v230 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v232 = v372;
        v233 = 17;
        v238 = swift_allocObject();
        *(_BYTE *)(v238 + 16) = 32;
        v239 = swift_allocObject();
        *(_BYTE *)(v239 + 16) = 8;
        v47 = swift_allocObject();
        v48 = v236;
        v237 = v47;
        *(_QWORD *)(v47 + 16) = partial apply for implicit closure #4 in closure #1 in gpklog(_:type:fileID:line:subsystem:);
        *(_QWORD *)(v47 + 24) = v48;
        v49 = swift_allocObject();
        v50 = v237;
        v241 = v49;
        *(_QWORD *)(v49 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v49 + 24) = v50;
        v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v240 = _allocateUninitializedArray<A>(_:)();
        v242 = v51;
        swift_retain();
        v52 = v238;
        v53 = v242;
        *v242 = closure #1 in OSLogArguments.append(_:)partial apply;
        v53[1] = v52;
        swift_retain();
        v54 = v239;
        v55 = v242;
        v242[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v55[3] = v54;
        swift_retain();
        v56 = v241;
        v57 = v242;
        v242[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v57[5] = v56;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v244, (os_log_type_t)v245))
        {
          v58 = v325;
          v222 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v223 = createStorage<A>(capacity:type:)(0);
          v224 = createStorage<A>(capacity:type:)(1);
          v225 = &v370;
          v370 = v222;
          v226 = &v369;
          v369 = v223;
          v227 = &v368;
          v368 = v224;
          serialize(_:at:)(2, &v370);
          serialize(_:at:)(1, v225);
          v366 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v367 = v238;
          closure #1 in osLogInternal(_:log:type:)(&v366, (uint64_t)v225, (uint64_t)v226, (uint64_t)v227);
          v228 = v58;
          if (v58)
          {
            __break(1u);
          }
          else
          {
            v366 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v367 = v239;
            closure #1 in osLogInternal(_:log:type:)(&v366, (uint64_t)&v370, (uint64_t)&v369, (uint64_t)&v368);
            v220 = 0;
            v366 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v367 = v241;
            closure #1 in osLogInternal(_:log:type:)(&v366, (uint64_t)&v370, (uint64_t)&v369, (uint64_t)&v368);
            _os_log_impl(&dword_23D1FC000, v244, (os_log_type_t)v245, "%s", v222, v232);
            destroyStorage<A>(_:count:)(v223, 0, v221);
            destroyStorage<A>(_:count:)(v224, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x242632A10](v222, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

      }
      else
      {
        swift_bridgeObjectRetain();
        v208 = 32;
        v209 = 7;
        v59 = swift_allocObject();
        v60 = v333;
        v210 = v59;
        *(_QWORD *)(v59 + 16) = v332;
        *(_QWORD *)(v59 + 24) = v60;
        v218 = Logger.logObject.getter();
        v219 = static os_log_type_t.debug.getter();
        v205 = &v378;
        v378 = 12;
        v203 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v204 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v206 = v379;
        v207 = 17;
        v212 = swift_allocObject();
        *(_BYTE *)(v212 + 16) = 32;
        v213 = swift_allocObject();
        *(_BYTE *)(v213 + 16) = 8;
        v61 = swift_allocObject();
        v62 = v210;
        v211 = v61;
        *(_QWORD *)(v61 + 16) = partial apply for implicit closure #5 in closure #1 in gpklog(_:type:fileID:line:subsystem:);
        *(_QWORD *)(v61 + 24) = v62;
        v63 = swift_allocObject();
        v64 = v211;
        v215 = v63;
        *(_QWORD *)(v63 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v63 + 24) = v64;
        v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v214 = _allocateUninitializedArray<A>(_:)();
        v216 = v65;
        swift_retain();
        v66 = v212;
        v67 = v216;
        *v216 = closure #1 in OSLogArguments.append(_:)partial apply;
        v67[1] = v66;
        swift_retain();
        v68 = v213;
        v69 = v216;
        v216[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v69[3] = v68;
        swift_retain();
        v70 = v215;
        v71 = v216;
        v216[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v71[5] = v70;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v218, (os_log_type_t)v219))
        {
          v72 = v325;
          v196 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v197 = createStorage<A>(capacity:type:)(0);
          v198 = createStorage<A>(capacity:type:)(1);
          v199 = &v377;
          v377 = v196;
          v200 = &v376;
          v376 = v197;
          v201 = &v375;
          v375 = v198;
          serialize(_:at:)(2, &v377);
          serialize(_:at:)(1, v199);
          v373 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v374 = v212;
          closure #1 in osLogInternal(_:log:type:)(&v373, (uint64_t)v199, (uint64_t)v200, (uint64_t)v201);
          v202 = v72;
          if (v72)
          {
            __break(1u);
          }
          else
          {
            v373 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v374 = v213;
            closure #1 in osLogInternal(_:log:type:)(&v373, (uint64_t)&v377, (uint64_t)&v376, (uint64_t)&v375);
            v194 = 0;
            v373 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v374 = v215;
            closure #1 in osLogInternal(_:log:type:)(&v373, (uint64_t)&v377, (uint64_t)&v376, (uint64_t)&v375);
            _os_log_impl(&dword_23D1FC000, v218, (os_log_type_t)v219, "%s", v196, v206);
            destroyStorage<A>(_:count:)(v197, 0, v195);
            destroyStorage<A>(_:count:)(v198, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x242632A10](v196, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

      }
    }
    else
    {
      v404 = static os_log_type_t.error.getter();
      v403 = v331;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v182 = 32;
        v183 = 7;
        v73 = swift_allocObject();
        v74 = v333;
        v184 = v73;
        *(_QWORD *)(v73 + 16) = v332;
        *(_QWORD *)(v73 + 24) = v74;
        v192 = Logger.logObject.getter();
        v193 = static os_log_type_t.error.getter();
        v179 = &v385;
        v385 = 12;
        v177 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v178 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v180 = v386;
        v181 = 17;
        v186 = swift_allocObject();
        *(_BYTE *)(v186 + 16) = 32;
        v187 = swift_allocObject();
        *(_BYTE *)(v187 + 16) = 8;
        v75 = swift_allocObject();
        v76 = v184;
        v185 = v75;
        *(_QWORD *)(v75 + 16) = partial apply for implicit closure #6 in closure #1 in gpklog(_:type:fileID:line:subsystem:);
        *(_QWORD *)(v75 + 24) = v76;
        v77 = swift_allocObject();
        v78 = v185;
        v189 = v77;
        *(_QWORD *)(v77 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v77 + 24) = v78;
        v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v188 = _allocateUninitializedArray<A>(_:)();
        v190 = v79;
        swift_retain();
        v80 = v186;
        v81 = v190;
        *v190 = closure #1 in OSLogArguments.append(_:)partial apply;
        v81[1] = v80;
        swift_retain();
        v82 = v187;
        v83 = v190;
        v190[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v83[3] = v82;
        swift_retain();
        v84 = v189;
        v85 = v190;
        v190[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v85[5] = v84;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v192, (os_log_type_t)v193))
        {
          v86 = v325;
          v170 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v171 = createStorage<A>(capacity:type:)(0);
          v172 = createStorage<A>(capacity:type:)(1);
          v173 = &v384;
          v384 = v170;
          v174 = &v383;
          v383 = v171;
          v175 = &v382;
          v382 = v172;
          serialize(_:at:)(2, &v384);
          serialize(_:at:)(1, v173);
          v380 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v381 = v186;
          closure #1 in osLogInternal(_:log:type:)(&v380, (uint64_t)v173, (uint64_t)v174, (uint64_t)v175);
          v176 = v86;
          if (v86)
          {
            __break(1u);
          }
          else
          {
            v380 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v381 = v187;
            closure #1 in osLogInternal(_:log:type:)(&v380, (uint64_t)&v384, (uint64_t)&v383, (uint64_t)&v382);
            v168 = 0;
            v380 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v381 = v189;
            closure #1 in osLogInternal(_:log:type:)(&v380, (uint64_t)&v384, (uint64_t)&v383, (uint64_t)&v382);
            _os_log_impl(&dword_23D1FC000, v192, (os_log_type_t)v193, "%s", v170, v180);
            destroyStorage<A>(_:count:)(v171, 0, v169);
            destroyStorage<A>(_:count:)(v172, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x242632A10](v170, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

      }
      else
      {
        v402 = static os_log_type_t.fault.getter();
        v401 = v331;
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          v156 = 32;
          v157 = 7;
          v87 = swift_allocObject();
          v88 = v333;
          v158 = v87;
          *(_QWORD *)(v87 + 16) = v332;
          *(_QWORD *)(v87 + 24) = v88;
          v166 = Logger.logObject.getter();
          v167 = static os_log_type_t.fault.getter();
          v153 = &v392;
          v392 = 12;
          v151 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v152 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)();
          v154 = v393;
          v155 = 17;
          v160 = swift_allocObject();
          *(_BYTE *)(v160 + 16) = 32;
          v161 = swift_allocObject();
          *(_BYTE *)(v161 + 16) = 8;
          v89 = swift_allocObject();
          v90 = v158;
          v159 = v89;
          *(_QWORD *)(v89 + 16) = partial apply for implicit closure #7 in closure #1 in gpklog(_:type:fileID:line:subsystem:);
          *(_QWORD *)(v89 + 24) = v90;
          v91 = swift_allocObject();
          v92 = v159;
          v163 = v91;
          *(_QWORD *)(v91 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(_QWORD *)(v91 + 24) = v92;
          v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
          v162 = _allocateUninitializedArray<A>(_:)();
          v164 = v93;
          swift_retain();
          v94 = v160;
          v95 = v164;
          *v164 = closure #1 in OSLogArguments.append(_:)partial apply;
          v95[1] = v94;
          swift_retain();
          v96 = v161;
          v97 = v164;
          v164[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v97[3] = v96;
          swift_retain();
          v98 = v163;
          v99 = v164;
          v164[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v99[5] = v98;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v166, (os_log_type_t)v167))
          {
            v100 = v325;
            v144 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v145 = createStorage<A>(capacity:type:)(0);
            v146 = createStorage<A>(capacity:type:)(1);
            v147 = &v391;
            v391 = v144;
            v148 = &v390;
            v390 = v145;
            v149 = &v389;
            v389 = v146;
            serialize(_:at:)(2, &v391);
            serialize(_:at:)(1, v147);
            v387 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v388 = v160;
            closure #1 in osLogInternal(_:log:type:)(&v387, (uint64_t)v147, (uint64_t)v148, (uint64_t)v149);
            v150 = v100;
            if (v100)
            {
              __break(1u);
            }
            else
            {
              v387 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v388 = v161;
              closure #1 in osLogInternal(_:log:type:)(&v387, (uint64_t)&v391, (uint64_t)&v390, (uint64_t)&v389);
              v142 = 0;
              v387 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v388 = v163;
              closure #1 in osLogInternal(_:log:type:)(&v387, (uint64_t)&v391, (uint64_t)&v390, (uint64_t)&v389);
              _os_log_impl(&dword_23D1FC000, v166, (os_log_type_t)v167, "%s", v144, v154);
              destroyStorage<A>(_:count:)(v145, 0, v143);
              destroyStorage<A>(_:count:)(v146, 1, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x242632A10](v144, MEMORY[0x24BEE4260]);
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
          }

        }
        else
        {
          swift_bridgeObjectRetain();
          v130 = 32;
          v131 = 7;
          v101 = swift_allocObject();
          v102 = v333;
          v132 = v101;
          *(_QWORD *)(v101 + 16) = v332;
          *(_QWORD *)(v101 + 24) = v102;
          v140 = Logger.logObject.getter();
          v141 = static os_log_type_t.default.getter();
          v127 = &v399;
          v399 = 12;
          v125 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v126 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)();
          v128 = v400;
          v129 = 17;
          v134 = swift_allocObject();
          *(_BYTE *)(v134 + 16) = 32;
          v135 = swift_allocObject();
          *(_BYTE *)(v135 + 16) = 8;
          v103 = swift_allocObject();
          v104 = v132;
          v133 = v103;
          *(_QWORD *)(v103 + 16) = partial apply for implicit closure #8 in closure #1 in gpklog(_:type:fileID:line:subsystem:);
          *(_QWORD *)(v103 + 24) = v104;
          v105 = swift_allocObject();
          v106 = v133;
          v137 = v105;
          *(_QWORD *)(v105 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(_QWORD *)(v105 + 24) = v106;
          v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
          v136 = _allocateUninitializedArray<A>(_:)();
          v138 = v107;
          swift_retain();
          v108 = v134;
          v109 = v138;
          *v138 = partial apply for closure #1 in OSLogArguments.append(_:);
          v109[1] = v108;
          swift_retain();
          v110 = v135;
          v111 = v138;
          v138[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v111[3] = v110;
          swift_retain();
          v112 = v137;
          v113 = v138;
          v138[4] = partial apply for closure #1 in OSLogArguments.append(_:);
          v113[5] = v112;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v140, (os_log_type_t)v141))
          {
            v114 = v325;
            v118 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v119 = createStorage<A>(capacity:type:)(0);
            v120 = createStorage<A>(capacity:type:)(1);
            v121 = &v398;
            v398 = v118;
            v122 = &v397;
            v397 = v119;
            v123 = &v396;
            v396 = v120;
            serialize(_:at:)(2, &v398);
            serialize(_:at:)(1, v121);
            v394 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v395 = v134;
            closure #1 in osLogInternal(_:log:type:)(&v394, (uint64_t)v121, (uint64_t)v122, (uint64_t)v123);
            v124 = v114;
            if (v114)
            {
              __break(1u);
            }
            else
            {
              v394 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v395 = v135;
              closure #1 in osLogInternal(_:log:type:)(&v394, (uint64_t)&v398, (uint64_t)&v397, (uint64_t)&v396);
              v116[1] = 0;
              v394 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
              v395 = v137;
              closure #1 in osLogInternal(_:log:type:)(&v394, (uint64_t)&v398, (uint64_t)&v397, (uint64_t)&v396);
              _os_log_impl(&dword_23D1FC000, v140, (os_log_type_t)v141, "%s", v118, v128);
              destroyStorage<A>(_:count:)(v119, 0, v117);
              destroyStorage<A>(_:count:)(v120, 1, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x242632A10](v118, MEMORY[0x24BEE4260]);
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
          }

        }
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v335 + 8))(v337, v334);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D279BEC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;

  return closure #1 in gpklog(_:type:fileID:line:subsystem:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32) & 1, *(unsigned __int8 *)(v0 + 33), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t default argument 1 of Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t default argument 2 of Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #4 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #5 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #6 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #7 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #8 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  swift_bridgeObjectRetain();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

unint64_t base witness table accessor for Equatable in LogSubsystem()
{
  return lazy protocol witness table accessor for type LogSubsystem and conformance LogSubsystem();
}

uint64_t getEnumTagSinglePayload for LogSubsystem(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for LogSubsystem(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for LogSubsystem(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for LogSubsystem(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LogSubsystem()
{
  return &type metadata for LogSubsystem;
}

uint64_t type metadata accessor for os_log_type_t()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for os_log_type_t;
  if (!lazy cache variable for type metadata for os_log_type_t)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_log_type_t);
      return v1;
    }
  }
  return v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance os_log_type_t()
{
  lazy protocol witness table accessor for type os_log_type_t and conformance os_log_type_t();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance os_log_type_t@<X0>(Swift::UInt8 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result;

  result = os_log_type_t.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance os_log_type_t@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = os_log_type_t.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type os_log_type_t and conformance os_log_type_t()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type os_log_type_t and conformance os_log_type_t;
  if (!lazy protocol witness table cache variable for type os_log_type_t and conformance os_log_type_t)
  {
    v0 = type metadata accessor for os_log_type_t();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for os_log_type_t, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type os_log_type_t and conformance os_log_type_t);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type os_log_type_t and conformance os_log_type_t;
  if (!lazy protocol witness table cache variable for type os_log_type_t and conformance os_log_type_t)
  {
    v0 = type metadata accessor for os_log_type_t();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for os_log_type_t, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type os_log_type_t and conformance os_log_type_t);
    return v1;
  }
  return v3;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1)
    return static UnsafeMutablePointer.allocate(capacity:)();
  else
    return 0;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x242632A10](v3, a3);
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for OS_dispatch_queue.Attributes();
      v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      swift_retain();
      v3 = v2;
    }
    type metadata accessor for OS_dispatch_queue.Attributes();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for DispatchWorkItemFlags();
      v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      swift_retain();
      v3 = v2;
    }
    type metadata accessor for DispatchWorkItemFlags();
    return v3;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v0 = type metadata accessor for DispatchWorkItemFlags();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE5468], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Character()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type [Substring] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Substring] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Substring] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Substring]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Substring] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Substring] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Substring] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Substring]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Substring] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Substring]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Substring?()
{
  swift_bridgeObjectRelease();
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Logger();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_23D27AA8C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #8 in closure #1 in gpklog(_:type:fileID:line:subsystem:)();
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;

  v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  v15 = v3;
  v16 = v4;
  v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x24BEE2520];
    v13[0] = a1;
    v13[1] = a2;
    v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD v21[4];
  char v22;
  char v23;
  uint64_t v24;

  v17 = (_QWORD *)result;
  v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3)
          __break(1u);
        v16 = a3 - (_QWORD)a2;
      }
      else
      {
        v16 = 0;
      }
      v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          *v17 = a2;
          v11 = 0;
          v12 = v15;
          v13 = 1;
          v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          v22 = v13 & 1;
          v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *v17 = v7;
    v11 = v6;
    v12 = v8;
    v13 = 0;
    v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  result = _StringObject.sharedUTF8.getter();
  if (!result)
    goto LABEL_29;
  v10 = result;
LABEL_21:
  *v17 = v10;
  if (a6 < 0)
  {
    v9 = 0;
LABEL_25:
    v11 = (_QWORD *)v9;
    v12 = a5 & 0xFFFFFFFFFFFFLL;
    v13 = 0;
    v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  memcpy(__dst, a1, a2);
  return __dst;
}

_QWORD *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  specialized Array._endMutation()();
  swift_retain();
  v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  result = (_QWORD *)v5;
  if (!__OFSUB__(v5, 1))
    return v6;
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  char v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
    return (_QWORD *)specialized ContiguousArray.init()();
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  result = (_QWORD *)_StringGuts.copyUTF8(into:)();
  v6 = result;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (_QWORD *)v7)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v4;
  if ((result & 1) == 0)
  {
    v2 = specialized Array.count.getter(*v3);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    *v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 < result + 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 16) = v5;
  swift_release();
  v6 = *v2;
  swift_retain();
  *(_BYTE *)(v6 + 32 + a1) = a2;
  return swift_release();
}

void specialized Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  _QWORD *v6;
  uint64_t v7;

  if (a2 < a1)
    v7 = a1;
  else
    v7 = a2;
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v6 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (_QWORD)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return (_QWORD *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;
  char *v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v16;

  swift_retain();
  result = swift_retain();
  v16 = *(_QWORD *)(a4 + 24) >> 1;
  if ((a3 & 1) != 0)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2)
        v11 = a2;
      else
        v11 = 2 * v16;
    }
    else
    {
      v11 = *(_QWORD *)(a4 + 24) >> 1;
    }
  }
  else
  {
    v11 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v11 < v10)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v11;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * (v6 - (_QWORD)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * v9;
    }
    swift_release();
    v7 = (char *)v8;
  }
  else
  {
    v5 = (char *)MEMORY[0x24BEE4AF8];
    swift_retain();
    v7 = v5;
  }
  if ((a1 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result)
    return (char *)memmove(a3, result, a2);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_23D27BB00()
{
  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23D27BB30()
{
  return swift_deallocObject();
}

_BYTE **closure #1 in OSLogArguments.append(_:)partial apply(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23D27BB60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23D27BBA8()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23D27BBF0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #7 in closure #1 in gpklog(_:type:fileID:line:subsystem:)();
  return result;
}

uint64_t sub_23D27BC38()
{
  return swift_deallocObject();
}

uint64_t sub_23D27BC68()
{
  return swift_deallocObject();
}

uint64_t sub_23D27BC98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23D27BCE0()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *closure #1 in OSLogArguments.append(_:)partial apply(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23D27BD28()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #6 in closure #1 in gpklog(_:type:fileID:line:subsystem:)();
  return result;
}

uint64_t sub_23D27BD70()
{
  return swift_deallocObject();
}

uint64_t sub_23D27BDA0()
{
  return swift_deallocObject();
}

uint64_t sub_23D27BDD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27BE18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27BE60()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #5 in closure #1 in gpklog(_:type:fileID:line:subsystem:)();
  return result;
}

uint64_t sub_23D27BEA8()
{
  return swift_deallocObject();
}

uint64_t sub_23D27BED8()
{
  return swift_deallocObject();
}

uint64_t sub_23D27BF08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27BF50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27BF98()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #4 in closure #1 in gpklog(_:type:fileID:line:subsystem:)();
  return result;
}

uint64_t sub_23D27BFE0()
{
  return swift_deallocObject();
}

uint64_t sub_23D27C010()
{
  return swift_deallocObject();
}

uint64_t sub_23D27C040()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27C088()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27C0D0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in closure #1 in gpklog(_:type:fileID:line:subsystem:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #3 in closure #1 in gpklog(_:type:fileID:line:subsystem:)();
  return result;
}

uint64_t sub_23D27C118()
{
  return swift_deallocObject();
}

uint64_t sub_23D27C148()
{
  return swift_deallocObject();
}

uint64_t sub_23D27C178()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23D27C1C0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE1E28], MEMORY[0x24BEE1E08]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
    return v0;
  }
  return v2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
  swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v0 = type metadata accessor for OS_dispatch_queue.Attributes();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE5698], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
    return v1;
  }
  return v3;
}

const char *Key.domain.getter()
{
  return "GroupKit";
}

void Key.feature.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D27C564()
{
  uint64_t v1;

  return v1;
}

void static Key.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D27C654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D27C6A0
                                                                                       + *((int *)qword_23D27C708 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D27C6B0()
{
  uint64_t v1;

  return v1 == 0;
}

void Key.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D27C768()
{
  return Hasher.combine<A>(_:)();
}

uint64_t Key.hashValue.getter()
{
  lazy protocol witness table accessor for type Key and conformance Key();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type Key and conformance Key()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Key and conformance Key;
  if (!lazy protocol witness table cache variable for type Key and conformance Key)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for Key, &type metadata for Key);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Key and conformance Key);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Key and conformance Key;
  if (!lazy protocol witness table cache variable for type Key and conformance Key)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for Key, &type metadata for Key);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Key and conformance Key);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Key and conformance Key;
  if (!lazy protocol witness table cache variable for type Key and conformance Key)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for Key, &type metadata for Key);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Key and conformance Key);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Key(char *a1)
{
  char v1;

  static Key.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Key()
{
  return Key.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance Key(uint64_t a1)
{
  char *v1;

  Key.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Key(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Key()
{
  return Key.domain.getter();
}

void protocol witness for FeatureFlagsKey.feature.getter in conformance Key()
{
  char *v0;

  Key.feature.getter(*v0);
}

uint64_t FeatureChecker.store.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyValueStore(v1 + 16, a1);
}

uint64_t outlined init with copy of KeyValueStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t FeatureChecker.DefaultsKey.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "groupKitEnabled";
  *(_QWORD *)(v3 + 8) = 15;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "metaDataEnabled";
  *(_QWORD *)(v3 + 32) = 15;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "ignoreEligibilityCheck";
  *(_QWORD *)(v3 + 56) = 22;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "forceUseSingleUserKDSLookup";
  *(_QWORD *)(v3 + 80) = 27;
  *(_BYTE *)(v3 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_10:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_10;
    case 2:
      v8 = 2;
      goto LABEL_10;
    case 3:
      v8 = 3;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return 4;
}

void FeatureChecker.DefaultsKey.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D27CB94()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupKitEnabled", 0xFuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FeatureChecker.DefaultsKey()
{
  lazy protocol witness table accessor for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey;
  if (!lazy protocol witness table cache variable for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FeatureChecker.DefaultsKey, &type metadata for FeatureChecker.DefaultsKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey;
  if (!lazy protocol witness table cache variable for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for FeatureChecker.DefaultsKey, &type metadata for FeatureChecker.DefaultsKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FeatureChecker.DefaultsKey()
{
  lazy protocol witness table accessor for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FeatureChecker.DefaultsKey()
{
  lazy protocol witness table accessor for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance FeatureChecker.DefaultsKey()
{
  lazy protocol witness table accessor for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FeatureChecker.DefaultsKey@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = FeatureChecker.DefaultsKey.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FeatureChecker.DefaultsKey(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  FeatureChecker.DefaultsKey.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t FeatureChecker.__allocating_init(store:)(uint64_t a1)
{
  swift_allocObject();
  return FeatureChecker.init(store:)(a1);
}

uint64_t FeatureChecker.init(store:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  char v43;
  uint64_t v44;
  os_log_type_t v45;
  Swift::String fileID;
  void *_;
  char v48;
  uint64_t v49;
  os_log_type_t v50;
  Swift::String v51;
  void *v52;
  char v53;
  uint64_t v54;
  os_log_type_t v55;
  Swift::String v56;
  void *v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  os_log_type_t v61;
  Swift::String v62;
  void *v63;
  uint64_t v64;
  os_log_type_t v65;
  Swift::String v66;
  void *v67;
  uint64_t v68;
  os_log_type_t v69;
  Swift::String v70;
  void *v71;
  uint64_t v72;
  os_log_type_t v73;
  Swift::String v74;
  void *v75;
  uint64_t v76;
  os_log_type_t v77;
  Swift::String v78;
  void *v79;
  uint64_t v81;
  char v82;
  _BYTE v83[2];
  uint64_t v84;
  uint64_t v85;
  char v86;
  _BYTE v87[2];
  uint64_t v88;
  uint64_t v89;
  char v90;
  _BYTE v91[2];
  uint64_t v92;
  uint64_t v93;
  char v94;
  _BYTE v95[2];
  uint64_t v96;
  uint64_t v97;
  char v98;
  _BYTE v99[2];
  char v100[24];
  ValueMetadata *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE v106[2];
  char v107[24];
  ValueMetadata *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[2];
  char v114[24];
  ValueMetadata *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  _BYTE v120[2];
  _BYTE v121[24];
  ValueMetadata *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[40];
  uint64_t v127;
  uint64_t v128;

  v127 = 0;
  v128 = a1;
  outlined init with copy of KeyValueStore(a1, (uint64_t)v126);
  outlined init with take of KeyValueStore(v126, (void *)(v1 + 16));
  v124 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v125 = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/GroupKitEnabled: ", 0x1AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v122 = &type metadata for Key;
  v58 = lazy protocol witness table accessor for type Key and conformance Key();
  v123 = v58;
  v121[0] = 0;
  v43 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
  v120[1] = v43 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v44 = String.init(stringInterpolation:)();
  _ = v5;
  v45 = static os_log_type_t.debug.getter();
  fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v120);
  v6._countAndFlagsBits = v44;
  v6._object = _;
  v119 = v120[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v6, v45, fileID, 59, (GroupKit::LogSubsystem)&v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v118 = v7;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/MetadataEnabled: ", 0x1AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  v115 = &type metadata for Key;
  v116 = v58;
  v114[0] = 1;
  v48 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
  v113[1] = v48 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v49 = String.init(stringInterpolation:)();
  v52 = v10;
  v50 = static os_log_type_t.debug.getter();
  v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v113);
  v11._countAndFlagsBits = v49;
  v11._object = v52;
  v112 = v113[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v11, v50, v51, 60, (GroupKit::LogSubsystem)&v112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v110 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v111 = v12;
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/InternalLiveOn: ", 0x19uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  v108 = &type metadata for Key;
  v109 = v58;
  v107[0] = 2;
  v53 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  v106[1] = v53 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v54 = String.init(stringInterpolation:)();
  v57 = v15;
  v55 = static os_log_type_t.debug.getter();
  v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v106);
  v16._countAndFlagsBits = v54;
  v16._object = v57;
  v105 = v106[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v16, v55, v56, 61, (GroupKit::LogSubsystem)&v105);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v103 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v104 = v17;
  v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FamilyShadow: ", 0x17uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v18);
  swift_bridgeObjectRelease();
  v101 = &type metadata for Key;
  v102 = v58;
  v100[0] = 3;
  v59 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  v99[1] = v59 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v60 = String.init(stringInterpolation:)();
  v63 = v20;
  v61 = static os_log_type_t.debug.getter();
  v62 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v99);
  v21._countAndFlagsBits = v60;
  v21._object = v63;
  v98 = v99[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v21, v61, v62, 62, (GroupKit::LogSubsystem)&v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v96 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v97 = v22;
  v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("defaults/groupKitEnabled: ", 0x1AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v23);
  swift_bridgeObjectRelease();
  v95[1] = FeatureChecker.BOOLValue(forKey:)(0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v64 = String.init(stringInterpolation:)();
  v67 = v25;
  v65 = static os_log_type_t.debug.getter();
  v66 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v95);
  v26._countAndFlagsBits = v64;
  v26._object = v67;
  v94 = v95[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v26, v65, v66, 64, (GroupKit::LogSubsystem)&v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v93 = v27;
  v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("defaults/metaDataEnabled: ", 0x1AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v28);
  swift_bridgeObjectRelease();
  v91[1] = FeatureChecker.BOOLValue(forKey:)(1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v68 = String.init(stringInterpolation:)();
  v71 = v30;
  v69 = static os_log_type_t.debug.getter();
  v70 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v91);
  v31._countAndFlagsBits = v68;
  v31._object = v71;
  v90 = v91[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v31, v69, v70, 65, (GroupKit::LogSubsystem)&v90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v88 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v89 = v32;
  v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("defaults/ignoreEligibilityCheck: ", 0x21uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v33);
  swift_bridgeObjectRelease();
  v87[1] = FeatureChecker.BOOLValue(forKey:)(2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v72 = String.init(stringInterpolation:)();
  v75 = v35;
  v73 = static os_log_type_t.debug.getter();
  v74 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v87);
  v36._countAndFlagsBits = v72;
  v36._object = v75;
  v86 = v87[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v36, v73, v74, 66, (GroupKit::LogSubsystem)&v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v84 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v85 = v37;
  v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("defaults/forceUseSingleUserKDSLookup: ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v38);
  swift_bridgeObjectRelease();
  v83[1] = FeatureChecker.BOOLValue(forKey:)(3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v76 = String.init(stringInterpolation:)();
  v79 = v40;
  v77 = static os_log_type_t.debug.getter();
  v78 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/FeatureFlags.swift", 0x1BuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v83);
  v41._countAndFlagsBits = v76;
  v41._object = v79;
  v82 = v83[0] & 1;
  gpklog(_:type:fileID:line:subsystem:)(v41, v77, v78, 67, (GroupKit::LogSubsystem)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v81;
}

void *outlined init with take of KeyValueStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t FeatureChecker.isGroupKitEnabled.getter()
{
  char v1;
  char v2;
  BOOL v3;
  unint64_t v4;
  char v5;
  char v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  _BYTE v9[24];
  ValueMetadata *v10;
  unint64_t v11;
  uint64_t v12;

  v12 = 0;
  v10 = &type metadata for Key;
  v4 = lazy protocol witness table accessor for type Key and conformance Key();
  v11 = v4;
  v9[0] = 0;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  swift_retain();
  v3 = (v5 & 1) != 0 || FeatureChecker.BOOLValue(forKey:)(0);
  swift_release();
  if (v3)
  {
    v2 = 1;
  }
  else
  {
    v7 = &type metadata for Key;
    v8 = v4;
    v6[0] = 2;
    v1 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v2 = v1;
  }
  return v2 & 1;
}

uint64_t FeatureChecker.isMetaDataEnabled.getter()
{
  char v1;
  char v2;
  BOOL v3;
  unint64_t v4;
  char v5;
  char v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  char v9[24];
  ValueMetadata *v10;
  unint64_t v11;
  uint64_t v12;

  v12 = 0;
  v10 = &type metadata for Key;
  v4 = lazy protocol witness table accessor for type Key and conformance Key();
  v11 = v4;
  v9[0] = 1;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  swift_retain();
  v3 = (v5 & 1) != 0 || FeatureChecker.BOOLValue(forKey:)(1);
  swift_release();
  if (v3)
  {
    v2 = 1;
  }
  else
  {
    v7 = &type metadata for Key;
    v8 = v4;
    v6[0] = 2;
    v1 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v2 = v1;
  }
  return v2 & 1;
}

BOOL FeatureChecker.shouldIgnoreEligibilityCheck.getter()
{
  BOOL v1;
  char v2;
  char v3;
  unint64_t v4;
  char v5;
  char v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  char v9[24];
  ValueMetadata *v10;
  unint64_t v11;
  uint64_t v12;

  v12 = 0;
  v10 = &type metadata for Key;
  v4 = lazy protocol witness table accessor for type Key and conformance Key();
  v11 = v4;
  v9[0] = 2;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if ((v5 & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v7 = &type metadata for Key;
    v8 = v4;
    v6[0] = 3;
    v2 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v3 = v2;
  }
  swift_retain();
  v1 = (v3 & 1) != 0 || FeatureChecker.BOOLValue(forKey:)(2);
  swift_release();
  return v1;
}

BOOL FeatureChecker.shouldUseMultiUserLookup.getter()
{
  return !FeatureChecker.BOOLValue(forKey:)(3);
}

uint64_t FeatureChecker.isInternalLiveOnEnabled.getter()
{
  char v1;
  char v2[24];
  ValueMetadata *v3;
  unint64_t v4;
  uint64_t v5;

  v5 = 0;
  v3 = &type metadata for Key;
  v4 = lazy protocol witness table accessor for type Key and conformance Key();
  v2[0] = 2;
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v1 & 1;
}

uint64_t FeatureChecker.isFamilyShadowEnabled.getter()
{
  char v1;
  char v2[24];
  ValueMetadata *v3;
  unint64_t v4;
  uint64_t v5;

  v5 = 0;
  v3 = &type metadata for Key;
  v4 = lazy protocol witness table accessor for type Key and conformance Key();
  v2[0] = 3;
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v1 & 1;
}

BOOL FeatureChecker.BOOLValue(forKey:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  _QWORD v11[6];
  char v12;

  v11[5] = 0;
  v12 = a1;
  outlined init with copy of KeyValueStore(v1 + 16, (uint64_t)v11);
  v7 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  FeatureChecker.DefaultsKey.rawValue.getter(a1);
  v9 = (*(uint64_t (**)(void))(v7 + 32))();
  swift_bridgeObjectRelease();
  swift_retain();
  if ((v9 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    outlined init with copy of KeyValueStore(v8 + 16, (uint64_t)v10);
    v3 = v10[4];
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    FeatureChecker.DefaultsKey.rawValue.getter(a1);
    v4 = (*(uint64_t (**)(void))(v3 + 24))();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v5 = v4 > 0;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v5;
}

uint64_t FeatureChecker.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v2;
}

uint64_t FeatureChecker.__deallocating_deinit()
{
  FeatureChecker.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for FeatureChecking.isGroupKitEnabled.getter in conformance FeatureChecker()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))() & 1;
}

uint64_t protocol witness for FeatureChecking.shouldIgnoreEligibilityCheck.getter in conformance FeatureChecker()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))() & 1;
}

uint64_t protocol witness for FeatureChecking.isMetaDataEnabled.getter in conformance FeatureChecker()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))() & 1;
}

uint64_t protocol witness for FeatureChecking.shouldUseMultiUserLookup.getter in conformance FeatureChecker()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))() & 1;
}

unint64_t base witness table accessor for Equatable in Key()
{
  return lazy protocol witness table accessor for type Key and conformance Key();
}

uint64_t getEnumTagSinglePayload for Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for Key(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for Key(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for Key(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Key()
{
  return &type metadata for Key;
}

uint64_t dispatch thunk of FeatureChecking.isGroupKitEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t dispatch thunk of FeatureChecking.shouldIgnoreEligibilityCheck.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

uint64_t dispatch thunk of FeatureChecking.isMetaDataEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() & 1;
}

uint64_t dispatch thunk of FeatureChecking.shouldUseMultiUserLookup.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))() & 1;
}

uint64_t type metadata accessor for FeatureChecker()
{
  return objc_opt_self();
}

uint64_t method lookup function for FeatureChecker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeatureChecker.__allocating_init(store:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of FeatureChecker.isGroupKitEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))() & 1;
}

uint64_t dispatch thunk of FeatureChecker.isMetaDataEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))() & 1;
}

uint64_t dispatch thunk of FeatureChecker.shouldIgnoreEligibilityCheck.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))() & 1;
}

uint64_t dispatch thunk of FeatureChecker.shouldUseMultiUserLookup.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))() & 1;
}

uint64_t getEnumTagSinglePayload for FeatureChecker.DefaultsKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for FeatureChecker.DefaultsKey(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for FeatureChecker.DefaultsKey(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for FeatureChecker.DefaultsKey(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeatureChecker.DefaultsKey()
{
  return &type metadata for FeatureChecker.DefaultsKey;
}

unint64_t base witness table accessor for Equatable in FeatureChecker.DefaultsKey()
{
  return lazy protocol witness table accessor for type FeatureChecker.DefaultsKey and conformance FeatureChecker.DefaultsKey();
}

uint64_t Array.chunked(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v26 = a1;
  v25 = a2;
  v21 = 0;
  v20 = MEMORY[0x242632794]();
  v19 = a1;
  stride<A>(from:to:by:)();
  v16 = v22;
  v17 = v23;
  v18 = v24;
  swift_bridgeObjectRetain();
  v13 = a3;
  v14 = a2;
  v15 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StrideTo<Int>);
  v9 = type metadata accessor for Array();
  v3 = lazy protocol witness table accessor for type StrideTo<Int> and conformance StrideTo<A>();
  v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array.chunked(into:), (uint64_t)v12, v8, v9, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v10);
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *closure #1 in Array.chunked(into:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *result;
  if (__OFADD__(*result, a3))
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x242632794](a2, a4);
    min<A>(_:_:)();
    if (v8 < v7)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    Array.subscript.getter();
    type metadata accessor for ArraySlice();
    MEMORY[0x2426331CC](MEMORY[0x24BEE2180]);
    result = (_QWORD *)Array.init<A>(_:)();
    *a5 = result;
  }
  return result;
}

_QWORD *partial apply for closure #1 in Array.chunked(into:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in Array.chunked(into:)(a1, v2[3], v2[4], v2[2], a2);
}

Swift::OpaquePointer_optional __swiftcall Array.convertEmptyToOptional()()
{
  void *v0;
  Swift::Bool v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  Swift::OpaquePointer_optional result;

  v4 = v0;
  swift_bridgeObjectRetain();
  type metadata accessor for Array();
  MEMORY[0x2426331CC](MEMORY[0x24BEE12E0]);
  v5 = Collection.isEmpty.getter();
  outlined destroy of [A]();
  if ((v5 & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = v4;
  }
  v2 = v3;
  result.value._rawValue = v2;
  result.is_nil = v1;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [A]()
{
  swift_bridgeObjectRelease();
}

uint64_t lengthEncodedDataArray(_:)(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v16 = a1;
  v14 = MEMORY[0x2426320C8](4);
  v15 = v1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Data]>);
    IndexingIterator.next()();
    if ((v13 & 0xF000000000000000) == 0xF000000000000000)
      break;
    Data.count.getter();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v8 = Data.init(bigEndianBytesOf:)(v10);
    v9 = v2;
    Data.append(_:)();
    outlined consume of Data._Representation(v8, v9);
    Data.append(_:)();
    outlined consume of Data._Representation(v12, v13);
  }
  outlined destroy of IndexingIterator<[Data]>();
  Data.count.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v5 = Data.init(bigEndianBytesOf:)(v11);
  v6 = v3;
  Data.replaceSubrange(_:with:)();
  outlined consume of Data._Representation(v5, v6);
  v7 = v14;
  outlined copy of Data._Representation(v14, v15);
  outlined destroy of Data((uint64_t)&v14);
  return v7;
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Data] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[Data]>()
{
  swift_bridgeObjectRelease();
}

uint64_t Data.init(bigEndianBytesOf:)(int a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v6[3];
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = a1;
  v6[1] = a1;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v4 = MEMORY[0x24BEE44F0];
  FixedWidthInteger.bigEndian.getter();
  v6[0] = v6[2];
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t (*)(void))closure #1 in Data.init(bigEndianBytesOf:), 0, v4, MEMORY[0x24BEE4078], MEMORY[0x24BDCDDE8], v5, (uint64_t)&v7);
  v3 = v7;
  v2 = v8;
  outlined copy of Data._Representation(v7, v8);
  v10 = v3;
  v11 = v2;
  outlined destroy of Data((uint64_t)&v10);
  return v3;
}

uint64_t closure #1 in Data.init(bigEndianBytesOf:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = Data.init<A>(_:)();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v11[2] = a8;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = a5;
  v17 = a7;
  v18 = "Fatal error";
  v19 = "UnsafeRawBufferPointer with negative count";
  v20 = "Swift/UnsafeRawBufferPointer.swift";
  v28 = a4;
  v27 = a5;
  v26 = a6;
  v21 = *(_QWORD *)(a5 - 8);
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v23 = (char *)v11 - v22;
  v24 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v24 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v9 = v16;
    v25 = v12 + v24;
    result = v13();
    v11[1] = v9;
    if (v9)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v17, v23, v15);
  }
  return result;
}

uint64_t DaemonConnection.setHandler(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRetain();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(a1, a2);
}

uint64_t protocol witness for DaemonBroadcaster.setHandler(_:) in conformance DaemonConnection(uint64_t a1, uint64_t a2)
{
  return DaemonConnection.setHandler(_:)(a1, a2);
}

uint64_t dispatch thunk of DaemonBroadcastHandler.broadcastReceived(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of DaemonBroadcastHandler.daemonConnectionInvalidated()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DaemonBroadcaster.setHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

id static NSBundle.groupKit.getter()
{
  type metadata accessor for NSBundle();
  type metadata accessor for BundleIdentifier();
  return @nonobjc NSBundle.__allocating_init(for:)();
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for BundleIdentifier()
{
  return objc_opt_self();
}

id @nonobjc NSBundle.__allocating_init(for:)()
{
  uint64_t ObjCClassFromMetadata;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t BundleIdentifier.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t BundleIdentifier.__deallocating_deinit()
{
  BundleIdentifier.deinit();
  return swift_deallocClassInstance();
}

uint64_t BundleIdentifier.__allocating_init()()
{
  swift_allocObject();
  return BundleIdentifier.init()();
}

uint64_t BundleIdentifier.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t *GPKUser.userID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKUserID((uint64_t *)(v1 + 16), a1);
}

uint64_t *outlined init with copy of GPKUserID(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  outlined copy of Data._Representation(*a1, v4);
  result = a2;
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t GPKUser.handles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKUser.isMe.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 40) & 1;
}

uint64_t GPKUser.__allocating_init(userID:handles:isMe:)(uint64_t *a1, uint64_t a2, char a3)
{
  swift_allocObject();
  return GPKUser.init(userID:handles:isMe:)(a1, a2, a3 & 1);
}

uint64_t GPKUser.init(userID:handles:isMe:)(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = *a1;
  v8 = a1[1];
  outlined copy of Data._Representation(*a1, v8);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 24) = v8;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = a3 & 1;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v8);
  return v9;
}

uint64_t GPKUser.__allocating_init(user:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKUser.init(user:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKUser.init(user:)(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;

  v28 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v29 = a1;
  v18 = objc_msgSend(a1, sel_userID);
  if (v18)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v1;

    v13 = v11;
    v14 = v12;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  if (!v14)
    goto LABEL_21;
  v25 = v13;
  v26 = v14;
  swift_bridgeObjectRetain();
  GPKUserID.init(from:)(v13, v14, &v23);
  v9 = v23;
  v10 = v24;
  if ((v24 & 0xF000000000000000) == 0xF000000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    type metadata accessor for InternalError();
    v27 = 46;
    InternalError.__allocating_init(_:internalInfo:)(&v27, 0);
    swift_willThrow();
    goto LABEL_23;
  }
  v21 = v23;
  v22 = v24;
  v20 = objc_msgSend(a1, sel_handles);
  if (v20)
  {
    v6 = v20;
    v2 = v20;
    outlined destroy of NSSet?(&v20);
    type metadata accessor for NSSet();
    lazy protocol witness table accessor for type NSSet and conformance NSSet();
    v7 = Sequence.compactMap<A>(_:)();
    if (v17)
    {
      __break(1u);
      goto LABEL_23;
    }

    v8 = v7;
  }
  else
  {
    outlined destroy of NSSet?(&v20);
    v8 = 0;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v5 = Collection.isEmpty.getter();
    outlined destroy of [String]();
    if ((v5 & 1) == 0)
    {
      outlined copy of Data._Representation(v9, v10);
      *(_QWORD *)(v16 + 16) = v9;
      *(_QWORD *)(v16 + 24) = v10;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v16 + 32) = v8;
      *(_BYTE *)(v16 + 40) = objc_msgSend(a1, sel_isMe) & 1;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v9, v10);
      swift_bridgeObjectRelease();

      return v16;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for InternalError();
  v19 = 48;
  InternalError.__allocating_init(_:internalInfo:)(&v19, 0);
  swift_willThrow();
  outlined consume of Data._Representation(v9, v10);
  swift_bridgeObjectRelease();
LABEL_23:
  type metadata accessor for GPKUser();
  swift_deallocPartialClassInstance();

  return v4;
}

uint64_t type metadata accessor for GPKUser()
{
  return objc_opt_self();
}

void closure #1 in GPKUser.init(user:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v10;
  char v11[32];
  uint64_t v12;

  v12 = a1;
  outlined init with copy of Any(a1, (uint64_t)v11);
  type metadata accessor for Handle();
  if ((swift_dynamicCast() & 1) != 0)
    v8 = v10;
  else
    v8 = 0;
  if (v8)
  {
    v7 = objc_msgSend(v8, sel_handleString);
    if (v7)
    {
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v4 = v2;

      v5 = v3;
      v6 = v4;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    *a2 = v5;
    a2[1] = v6;

  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

unint64_t type metadata accessor for NSSet()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSSet;
  if (!lazy cache variable for type metadata for NSSet)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSSet);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type NSSet and conformance NSSet()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSSet and conformance NSSet;
  if (!lazy protocol witness table cache variable for type NSSet and conformance NSSet)
  {
    v0 = type metadata accessor for NSSet();
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BDD0100], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSSet and conformance NSSet);
    return v1;
  }
  return v3;
}

uint64_t GPKUser.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "userID";
  *(_QWORD *)(v3 + 8) = 6;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "handles";
  *(_QWORD *)(v3 + 32) = 7;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "isMe";
  *(_QWORD *)(v3 + 56) = 4;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_8:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_8;
    case 2:
      v8 = 2;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GPKUser.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GPKUser.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 3)
    return 3;
  else
    return v6;
}

uint64_t GPKUser.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GPKUser.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKUser.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("userID", 6uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handles", 7uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isMe", 4uLL, 1)._countAndFlagsBits;
}

uint64_t GPKUser.CodingKeys.stringValue.getter(char a1)
{
  return GPKUser.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKUser.CodingKeys()
{
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser.CodingKeys, &type metadata for GPKUser.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser.CodingKeys, &type metadata for GPKUser.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser.CodingKeys, &type metadata for GPKUser.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser.CodingKeys, &type metadata for GPKUser.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKUser.CodingKeys, &type metadata for GPKUser.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKUser.CodingKeys()
{
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKUser.CodingKeys()
{
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GPKUser.CodingKeys()
{
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GPKUser.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GPKUser.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GPKUser.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GPKUser.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKUser.CodingKeys()
{
  char *v0;

  return GPKUser.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKUser.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GPKUser.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKUser.CodingKeys()
{
  return GPKUser.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKUser.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKUser.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKUser.CodingKeys()
{
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKUser.CodingKeys()
{
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKUser.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD *v38;
  char *v39;

  v17 = a1;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKUser.CodingKeys>);
  v18 = *(_QWORD *)(v27 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (char *)v6 - v19;
  v39 = (char *)v6 - v19;
  v38 = (_QWORD *)MEMORY[0x24BDAC7A8](v17);
  v37 = v1;
  v20 = v38[3];
  v21 = v38[4];
  __swift_project_boxed_opaque_existential_1(v38, v20);
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v24 = v23[2];
  v25 = v23[3];
  outlined copy of Data._Representation(v24, v25);
  v29 = v36;
  v36[0] = v24;
  v36[1] = v25;
  v26 = &v35;
  v35 = 0;
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v2 = v28;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v30 = v2;
  v31 = v2;
  if (v2)
  {
    v7 = v31;
    outlined destroy of GPKUserID((uint64_t)v36);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v27);
    v8 = v7;
  }
  else
  {
    outlined destroy of GPKUserID((uint64_t)v36);
    v11 = v23[4];
    swift_bridgeObjectRetain();
    v14 = &v34;
    v34 = v11;
    v12 = &v33;
    v33 = 1;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    v3 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = v3;
    v16 = v3;
    if (v3)
    {
      v6[2] = v16;
      outlined destroy of [String]();
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v27);
    }
    else
    {
      outlined destroy of [String]();
      v4 = v15;
      v32 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v9 = v4;
      v10 = v4;
      if (v4)
        v6[1] = v10;
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v27);
    }
  }
  return result;
}

uint64_t GPKUser.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKUser.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKUser.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  char *v47;

  v28 = a1;
  v47 = 0;
  v45 = 0;
  v44 = 0;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKUser.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v32 = (char *)v12 - v31;
  v47 = (char *)v12 - v31;
  v45 = (_QWORD *)MEMORY[0x24BDAC7A8](v28);
  v44 = v1;
  v46 = 0;
  v34 = v45[3];
  v35 = v45[4];
  __swift_project_boxed_opaque_existential_1(v45, v34);
  lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
  v2 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v36 = v2;
  v37 = v2;
  if (v2)
  {
    v15 = v37;
  }
  else
  {
    v24 = &v41;
    v41 = 0;
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v3 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v3;
    v26 = v3;
    if (v3)
    {
      v14 = v26;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      v15 = v14;
    }
    else
    {
      v4 = v27;
      v5 = v43;
      v19 = 1;
      v46 = 1;
      *(_QWORD *)(v27 + 16) = v42;
      *(_QWORD *)(v4 + 24) = v5;
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      v20 = &v39;
      v39 = v19;
      lazy protocol witness table accessor for type [String] and conformance <A> [A]();
      v6 = v25;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v22 = v6;
      v23 = v6;
      if (!v6)
      {
        v46 = 3;
        *(_QWORD *)(v27 + 32) = v40;
        v38 = 2;
        v7 = KeyedDecodingContainer.decode(_:forKey:)();
        v16 = 0;
        v17 = v7;
        v18 = 0;
        v8 = v29;
        v9 = v32;
        v10 = v30;
        v46 = 7;
        *(_BYTE *)(v27 + 40) = v17 & 1;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v8);
        __swift_destroy_boxed_opaque_existential_1(v28);
        return v27;
      }
      v13 = v23;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      v15 = v13;
    }
  }
  v12[4] = v15;
  if ((v46 & 7) == 7)
  {
    swift_release();
  }
  else
  {
    if ((v46 & 1) != 0)
      outlined destroy of GPKUserID(v27 + 16);
    if ((v46 & 2) != 0)
      outlined destroy of [String]();
    v12[3] = v27;
    v12[2] = v27;
    type metadata accessor for GPKUser();
    swift_deallocPartialClassInstance();
  }
  __swift_destroy_boxed_opaque_existential_1(v28);
  return v12[1];
}

uint64_t *GPKUser.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  outlined copy of Data._Representation(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
  v8[0] = v3;
  v8[1] = v4;
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  Hasher.combine<A>(_:)();
  outlined destroy of GPKUserID((uint64_t)v8);
  v7 = *(_BYTE *)(v1 + 40) & 1;
  Hasher.combine<A>(_:)();
  v5 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  Hasher.combine<A>(_:)();
  result = &v6;
  outlined destroy of [String]();
  return result;
}

BOOL static GPKUser.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9[2];
  uint64_t v10[5];

  v10[2] = 0;
  v10[4] = a1;
  v10[3] = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  outlined copy of Data._Representation(v3, v4);
  v10[0] = v3;
  v10[1] = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v6, v7);
  v9[0] = v6;
  v9[1] = v7;
  v8 = static GPKUserID.== infix(_:_:)(v10, v9);
  outlined destroy of GPKUserID((uint64_t)v9);
  outlined destroy of GPKUserID((uint64_t)v10);
  return v8;
}

uint64_t GPKUser.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = 0;
  v9[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v9[3] = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GPKUser(", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v8 + 16);
  v6 = *(_QWORD *)(v8 + 24);
  outlined copy of Data._Representation(v7, v6);
  outlined copy of Data._Representation(v7, v6);
  v9[0] = v7;
  v9[1] = v6;
  GPKUserID.hexString.getter();
  outlined destroy of GPKUserID((uint64_t)v9);
  outlined consume of Data._Representation(v7, v6);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - ", 3uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [String]();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v8 + 40) & 1) != 0)
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - isMe", 7uLL, 1);
  else
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t GPKUser.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of GPKUserID(v0 + 16);
  outlined destroy of [String]();
  return v2;
}

uint64_t GPKUser.__deallocating_deinit()
{
  GPKUser.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKUser.hashValue.getter()
{
  type metadata accessor for GPKUser();
  lazy protocol witness table accessor for type GPKUser and conformance GPKUser();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKUser@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKUser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKUser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKUser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKUser(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKUser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKUser(uint64_t *a1, uint64_t *a2)
{
  return static GPKUser.== infix(_:_:)(*a1, *a2);
}

unint64_t base witness table accessor for Equatable in GPKUser()
{
  return lazy protocol witness table accessor for type GPKUser and conformance GPKUser();
}

uint64_t method lookup function for GPKUser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKUser.__allocating_init(userID:handles:isMe:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 104))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of GPKUser.__allocating_init(user:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of GPKUser.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of GPKUser.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of GPKUser.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of GPKUser.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of GPKUser.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t getEnumTagSinglePayload for GPKUser.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKUser.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKUser.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKUser.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKUser.CodingKeys()
{
  return &type metadata for GPKUser.CodingKeys;
}

unint64_t base witness table accessor for Equatable in GPKUser.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKUser.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKUser.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKUser.CodingKeys and conformance GPKUser.CodingKeys();
}

BOOL static GPKDeleteGroupRequest.Action.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return ((*a1 & 1) != 0) == (unint64_t)((*a2 & 1) != 0);
}

uint64_t GPKDeleteGroupRequest.Action.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL static GPKDeleteGroupRequest.Action.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKDeleteGroupRequest.Action.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKDeleteGroupRequest.Action.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("destroy", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("delete", 6uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKDeleteGroupRequest.Action.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKDeleteGroupRequest.Action.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.CodingKeys, &type metadata for GPKDeleteGroupRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.CodingKeys, &type metadata for GPKDeleteGroupRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.CodingKeys, &type metadata for GPKDeleteGroupRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.CodingKeys, &type metadata for GPKDeleteGroupRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.CodingKeys, &type metadata for GPKDeleteGroupRequest.Action.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKDeleteGroupRequest.Action.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKDeleteGroupRequest.Action.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("delete", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("destroy", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKDeleteGroupRequest.Action.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKDeleteGroupRequest.Action.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  return GPKDeleteGroupRequest.Action.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  return GPKDeleteGroupRequest.Action.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKDeleteGroupRequest.Action.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  _BYTE *v0;

  return GPKDeleteGroupRequest.Action.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKDeleteGroupRequest.Action.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.Action.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  return GPKDeleteGroupRequest.Action.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKDeleteGroupRequest.Action.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.Action.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKDeleteGroupRequest.Action.CodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKDeleteGroupRequest.Action.DeleteCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKDeleteGroupRequest.Action.DeleteCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKDeleteGroupRequest.Action.DeleteCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKDeleteGroupRequest.Action.DeleteCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t GPKDeleteGroupRequest.Action.DestroyCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKDeleteGroupRequest.Action.DestroyCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKDeleteGroupRequest.Action.DestroyCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKDeleteGroupRequest.Action.DestroyCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  return GPKDeleteGroupRequest.Action.DeleteCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.Action.DeleteCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  return GPKDeleteGroupRequest.Action.DeleteCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.Action.DeleteCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.DeleteCodingKeys, &type metadata for GPKDeleteGroupRequest.Action.DeleteCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.DeleteCodingKeys, &type metadata for GPKDeleteGroupRequest.Action.DeleteCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.DeleteCodingKeys, &type metadata for GPKDeleteGroupRequest.Action.DeleteCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  return GPKDeleteGroupRequest.Action.DestroyCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.Action.DestroyCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  return GPKDeleteGroupRequest.Action.DestroyCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.Action.DestroyCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.DestroyCodingKeys, &type metadata for GPKDeleteGroupRequest.Action.DestroyCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.DestroyCodingKeys, &type metadata for GPKDeleteGroupRequest.Action.DestroyCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action.DestroyCodingKeys, &type metadata for GPKDeleteGroupRequest.Action.DestroyCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKDeleteGroupRequest.Action.encode(to:)(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  _QWORD *v24;

  v13 = a1;
  v24 = 0;
  v23 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKDeleteGroupRequest.Action.DeleteCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v4 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKDeleteGroupRequest.Action.DestroyCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v4 - v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKDeleteGroupRequest.Action.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v4 - v16;
  v24 = v2;
  v20 = *v1;
  v23 = v20 & 1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v20 & 1) != 0)
  {
    v4[1] = &v22;
    v22 = 1;
    lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v4[2] = &v21;
    v21 = 0;
    lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t GPKDeleteGroupRequest.Action.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action, &type metadata for GPKDeleteGroupRequest.Action);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.Action, &type metadata for GPKDeleteGroupRequest.Action);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action);
    return v0;
  }
  return v2;
}

uint64_t GPKDeleteGroupRequest.Action.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  _QWORD v68[4];
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;

  v47 = a2;
  v56 = a1;
  v75 = 0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKDeleteGroupRequest.Action.DeleteCodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)v14 - v50;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKDeleteGroupRequest.Action.DestroyCodingKeys>);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v14 - v54;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKDeleteGroupRequest.Action.CodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v56);
  v60 = (char *)v14 - v59;
  v75 = v2;
  v62 = v2[3];
  v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
  v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v64 = v3;
  v65 = v3;
  if (v3)
  {
    v25 = v65;
  }
  else
  {
    v4 = KeyedDecodingContainer.allKeys.getter();
    v43 = &v70;
    v70 = v4;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKDeleteGroupRequest.Action.CodingKeys]);
    lazy protocol witness table accessor for type [GPKDeleteGroupRequest.Action.CodingKeys] and conformance [A]();
    v71 = ArraySlice.init<A>(_:)();
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>);
    v45 = lazy protocol witness table accessor for type ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys> and conformance ArraySlice<A>();
    Collection<>.popFirst()();
    v46 = v69;
    if (v69 == 2)
      goto LABEL_12;
    v41 = v46;
    v34 = v46;
    v39 = v71;
    v35 = v72;
    v36 = v73;
    v37 = v74;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v38 = v68;
    v68[0] = v39;
    v68[1] = v35;
    v68[2] = v36;
    v68[3] = v37;
    v40 = Collection.isEmpty.getter();
    outlined destroy of ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>();
    swift_unknownObjectRelease();
    if ((v40 & 1) == 0)
    {
LABEL_12:
      v19 = 0;
      v23 = type metadata accessor for DecodingError();
      v17 = 1;
      v24 = swift_allocError();
      v22 = v12;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v18 = (char *)v22 + *(int *)(v13 + 48);
      *v22 = &type metadata for GPKDeleteGroupRequest.Action;
      v20 = KeyedDecodingContainer.codingPath.getter();
      countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v17 & 1)._countAndFlagsBits;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v23 - 8) + 104))(v22, *MEMORY[0x24BEE26D0]);
      swift_willThrow();
      outlined destroy of ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v24;
    }
    else if ((v34 & 1) != 0)
    {
      v27 = &v67;
      v67 = v34 & 1;
      lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys();
      v9 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v28 = v9;
      v29 = v9;
      if (!v9)
      {
        v76 = 1;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
        v30 = v28;
        goto LABEL_11;
      }
      v15 = v29;
      outlined destroy of ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v15;
    }
    else
    {
      v31 = &v66;
      v66 = v34 & 1;
      lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys();
      v8 = v64;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v32 = v8;
      v33 = v8;
      if (!v8)
      {
        v76 = 0;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
        v30 = v32;
LABEL_11:
        v26 = v30;
        outlined destroy of ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
        v10 = v56;
        *v47 = v76 & 1;
        return __swift_destroy_boxed_opaque_existential_1(v10);
      }
      v16 = v33;
      outlined destroy of ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
      v25 = v16;
    }
  }
  v14[1] = v25;
  return __swift_destroy_boxed_opaque_existential_1(v56);
}

unint64_t lazy protocol witness table accessor for type [GPKDeleteGroupRequest.Action.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKDeleteGroupRequest.Action.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKDeleteGroupRequest.Action.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKDeleteGroupRequest.Action.CodingKeys]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKDeleteGroupRequest.Action.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<GPKDeleteGroupRequest.Action.CodingKeys>()
{
  swift_unknownObjectRelease();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKDeleteGroupRequest.Action(_BYTE *a1, _BYTE *a2)
{
  return static GPKDeleteGroupRequest.Action.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKDeleteGroupRequest.Action()
{
  return GPKDeleteGroupRequest.Action.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKDeleteGroupRequest.Action()
{
  return GPKDeleteGroupRequest.Action.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKDeleteGroupRequest.Action(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKDeleteGroupRequest.Action@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return GPKDeleteGroupRequest.Action.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKDeleteGroupRequest.Action(uint64_t a1)
{
  return GPKDeleteGroupRequest.Action.encode(to:)(a1);
}

uint64_t key path getter for GPKDeleteGroupRequest.force : GPKDeleteGroupRequest@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v2) & 1;
  return swift_release();
}

uint64_t key path setter for GPKDeleteGroupRequest.force : GPKDeleteGroupRequest(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 112))(v4 & 1);
  return swift_release();
}

uint64_t GPKDeleteGroupRequest.force.getter()
{
  uint64_t v0;
  char v2;

  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 16);
  swift_endAccess();
  return v2 & 1;
}

uint64_t GPKDeleteGroupRequest.force.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1 & 1;
  return swift_endAccess();
}

uint64_t (*GPKDeleteGroupRequest.force.modify())()
{
  swift_beginAccess();
  return GPKDeleteGroupRequest.force.modify;
}

uint64_t GPKDeleteGroupRequest.force.modify()
{
  return swift_endAccess();
}

uint64_t GPKDeleteGroupRequest.__allocating_init(groupID:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a1;
  v5 = a2;
  v11 = 0;
  v10 = 0;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)&v5 - v6;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v10 = *v3 & 1;
  outlined init with copy of GPKGroupID(v11, (uint64_t)&v5 - v6);
  v9 = (*(uint64_t (**)(char *))(v2 + 152))(v7);
  swift_retain();
  v12 = v9;
  outlined destroy of GPKGroupID(v8);
  swift_release();
  return v9;
}

uint64_t key path getter for GPKDeleteGroupRequest.deleteLocalCopy : GPKDeleteGroupRequest@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v2) & 1;
  return swift_release();
}

uint64_t key path setter for GPKDeleteGroupRequest.deleteLocalCopy : GPKDeleteGroupRequest(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 136))(v4 & 1);
  return swift_release();
}

uint64_t GPKDeleteGroupRequest.deleteLocalCopy.getter()
{
  uint64_t v0;
  char v2;

  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 17);
  swift_endAccess();
  return v2 & 1;
}

uint64_t GPKDeleteGroupRequest.deleteLocalCopy.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 17) = a1 & 1;
  return swift_endAccess();
}

uint64_t (*GPKDeleteGroupRequest.deleteLocalCopy.modify())()
{
  swift_beginAccess();
  return GPKDeleteGroupRequest.deleteLocalCopy.modify;
}

uint64_t GPKDeleteGroupRequest.deleteLocalCopy.modify()
{
  return swift_endAccess();
}

uint64_t GPKDeleteGroupRequest.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1 + OBJC_IVAR____TtC8GroupKit21GPKDeleteGroupRequest_groupID, a1);
}

uint64_t GPKDeleteGroupRequest.__allocating_init(groupID:)(uint64_t a1)
{
  swift_allocObject();
  return GPKDeleteGroupRequest.init(groupID:)(a1);
}

uint64_t GPKDeleteGroupRequest.init(groupID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a1;
  v10 = 0;
  v9 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v7);
  v3 = (char *)&v5 - v5;
  v6 = (uint64_t)&v5 - v5;
  v10 = v2;
  v9 = v1;
  *(_BYTE *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 17) = 0;
  outlined init with copy of GPKGroupID(v2, (uint64_t)v3);
  outlined init with take of GPKGroupID(v6, v1 + OBJC_IVAR____TtC8GroupKit21GPKDeleteGroupRequest_groupID);
  outlined destroy of GPKGroupID(v7);
  return v8;
}

BOOL static GPKDeleteGroupRequest.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t GPKDeleteGroupRequest.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKDeleteGroupRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("force", 5uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deleteLocalCopy", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GPKDeleteGroupRequest.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GPKDeleteGroupRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.CodingKeys, &type metadata for GPKDeleteGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.CodingKeys, &type metadata for GPKDeleteGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.CodingKeys, &type metadata for GPKDeleteGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.CodingKeys, &type metadata for GPKDeleteGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKDeleteGroupRequest.CodingKeys, &type metadata for GPKDeleteGroupRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKDeleteGroupRequest.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKDeleteGroupRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("force", 5uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deleteLocalCopy", 0xFuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKDeleteGroupRequest.CodingKeys(char *a1, char *a2)
{
  return static GPKDeleteGroupRequest.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKDeleteGroupRequest.CodingKeys()
{
  return GPKDeleteGroupRequest.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKDeleteGroupRequest.CodingKeys()
{
  return GPKDeleteGroupRequest.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKDeleteGroupRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKDeleteGroupRequest.CodingKeys()
{
  char *v0;

  return GPKDeleteGroupRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKDeleteGroupRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKDeleteGroupRequest.CodingKeys()
{
  return GPKDeleteGroupRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKDeleteGroupRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKDeleteGroupRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKDeleteGroupRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKDeleteGroupRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKDeleteGroupRequest.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of GPKGroupID(v0 + OBJC_IVAR____TtC8GroupKit21GPKDeleteGroupRequest_groupID);
  return v2;
}

uint64_t GPKDeleteGroupRequest.__deallocating_deinit()
{
  GPKDeleteGroupRequest.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKDeleteGroupRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[3];
  uint64_t v32;
  _QWORD *v33;

  v20 = a1;
  v33 = 0;
  v32 = 0;
  v17 = type metadata accessor for GPKGroupID();
  v18 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t)v9 - v18;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKDeleteGroupRequest.CodingKeys>);
  v21 = *(_QWORD *)(v27 - 8);
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v26 = (char *)v9 - v22;
  v33 = v2;
  v32 = v1;
  v23 = v2[3];
  v24 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v23);
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
  v3 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 104))(v3);
  v4 = v28;
  v31[2] = 0;
  v5 = KeyedEncodingContainer.encode(_:forKey:)();
  v29 = v4;
  v30 = v4;
  if (v4)
  {
    v10 = v30;
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v27);
    v11 = v10;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 128))(v5);
    v6 = v29;
    v31[1] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v15 = v6;
    v16 = v6;
    if (v6)
    {
      v9[1] = v16;
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v27);
    }
    else
    {
      outlined init with copy of GPKGroupID(v25 + OBJC_IVAR____TtC8GroupKit21GPKDeleteGroupRequest_groupID, v19);
      v12 = v31;
      v31[0] = 2;
      lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
      v7 = v15;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v13 = v7;
      v14 = v7;
      if (v7)
        v9[0] = v14;
      outlined destroy of GPKGroupID(v19);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v27);
    }
  }
  return result;
}

uint64_t GPKDeleteGroupRequest.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKDeleteGroupRequest.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKDeleteGroupRequest.init(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BYTE v43[32];
  _BYTE v44[32];
  uint64_t v45;
  _QWORD *v46;

  v32 = a1;
  v46 = 0;
  v45 = 0;
  v29 = type metadata accessor for GPKGroupID();
  v30 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (uint64_t)v9 - v30;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKDeleteGroupRequest.CodingKeys>);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)v9 - v35;
  v46 = v2;
  v45 = v1;
  *(_BYTE *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 17) = 0;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v12 = v41;
    v13 = v28;
  }
  else
  {
    v44[31] = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v25 = 0;
    v26 = v4;
    v27 = 0;
    v19 = v4;
    v20 = v44;
    swift_beginAccess();
    v21 = 1;
    *(_BYTE *)(v28 + 16) = v19 & 1;
    swift_endAccess();
    v5 = v25;
    v43[31] = v21;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v22 = v5;
    v23 = v6;
    v24 = v5;
    if (v5)
    {
      v11 = v24;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v12 = v11;
      v13 = v28;
    }
    else
    {
      v14 = v23;
      v15 = v43;
      swift_beginAccess();
      *(_BYTE *)(v28 + 17) = v14 & 1;
      swift_endAccess();
      v16 = &v42;
      v42 = 2;
      lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
      v7 = v22;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v17 = v7;
      v18 = v7;
      if (!v7)
      {
        outlined init with take of GPKGroupID(v31, v28 + OBJC_IVAR____TtC8GroupKit21GPKDeleteGroupRequest_groupID);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return v28;
      }
      v10 = v18;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      v12 = v10;
      v13 = v28;
    }
  }
  v9[1] = v13;
  v9[2] = v12;
  type metadata accessor for GPKDeleteGroupRequest();
  swift_deallocPartialClassInstance();
  __swift_destroy_boxed_opaque_existential_1(v32);
  return v9[3];
}

uint64_t type metadata accessor for GPKDeleteGroupRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKDeleteGroupRequest;
  if (!type metadata singleton initialization cache for GPKDeleteGroupRequest)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t base witness table accessor for Equatable in GPKDeleteGroupRequest.Action()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action and conformance GPKDeleteGroupRequest.Action();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKDeleteGroupRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 168))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKDeleteGroupRequest()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t ObjC metadata update function for GPKDeleteGroupRequest()
{
  return type metadata accessor for GPKDeleteGroupRequest();
}

uint64_t type metadata completion function for GPKDeleteGroupRequest()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t method lookup function for GPKDeleteGroupRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.force.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))() & 1;
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.force.setter(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 112))(a1 & 1);
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.force.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))() & 1;
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.setter(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 136))(a1 & 1);
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.__allocating_init(groupID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GPKDeleteGroupRequest.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t getEnumTagSinglePayload for GPKDeleteGroupRequest.Action(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKDeleteGroupRequest.Action(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKDeleteGroupRequest.Action(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKDeleteGroupRequest.Action(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKDeleteGroupRequest.Action()
{
  return &type metadata for GPKDeleteGroupRequest.Action;
}

uint64_t getEnumTagSinglePayload for GPKDeleteGroupRequest.Action.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKDeleteGroupRequest.Action.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKDeleteGroupRequest.Action.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKDeleteGroupRequest.Action.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKDeleteGroupRequest.Action.CodingKeys()
{
  return &type metadata for GPKDeleteGroupRequest.Action.CodingKeys;
}

ValueMetadata *type metadata accessor for GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  return &type metadata for GPKDeleteGroupRequest.Action.DestroyCodingKeys;
}

ValueMetadata *type metadata accessor for GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  return &type metadata for GPKDeleteGroupRequest.Action.DeleteCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKDeleteGroupRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKDeleteGroupRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKDeleteGroupRequest.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKDeleteGroupRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKDeleteGroupRequest.CodingKeys()
{
  return &type metadata for GPKDeleteGroupRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKDeleteGroupRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKDeleteGroupRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKDeleteGroupRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.CodingKeys and conformance GPKDeleteGroupRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKDeleteGroupRequest.Action.DestroyCodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DestroyCodingKeys and conformance GPKDeleteGroupRequest.Action.DestroyCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKDeleteGroupRequest.Action.DeleteCodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.DeleteCodingKeys and conformance GPKDeleteGroupRequest.Action.DeleteCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKDeleteGroupRequest.Action.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKDeleteGroupRequest.Action.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKDeleteGroupRequest.Action.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKDeleteGroupRequest.Action.CodingKeys and conformance GPKDeleteGroupRequest.Action.CodingKeys();
}

id one-time initialization function for shared()
{
  uint64_t *v0;
  id result;
  _BYTE v2[40];

  type metadata accessor for GPKAccountManager();
  v0 = DaemonMessageSender.shared.unsafeMutableAddressor();
  outlined init with copy of MessageSenderProtocol((uint64_t)v0, (uint64_t)v2);
  result = GPKAccountManager.__allocating_init(daemonMessageSender:)((uint64_t)v2);
  static GPKAccountManager.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for GPKAccountManager()
{
  return objc_opt_self();
}

id GPKAccountManager.__allocating_init(daemonMessageSender:)(uint64_t a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GPKAccountManager.init(daemonMessageSender:)(a1);
}

uint64_t *GPKAccountManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static GPKAccountManager.shared;
}

void *static GPKAccountManager.shared.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*GPKAccountManager.shared.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t GPKAccountManager.daemonMessageSender.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MessageSenderProtocol(v1 + OBJC_IVAR___GPKAccountManager_daemonMessageSender, a1);
}

id GPKAccountManager.init(daemonMessageSender:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v5;
  id v7;
  objc_super v8;
  _BYTE v9[40];
  uint64_t v10;
  id v11;

  v10 = a1;
  v2 = v1;
  v11 = v1;
  outlined init with copy of MessageSenderProtocol(a1, (uint64_t)v9);
  outlined init with take of MessageSenderProtocol(v9, &v1[OBJC_IVAR___GPKAccountManager_daemonMessageSender]);

  v8.receiver = v11;
  v8.super_class = (Class)type metadata accessor for GPKAccountManager();
  v7 = objc_msgSendSuper2(&v8, sel_init);
  v3 = v7;
  v11 = v7;
  __swift_destroy_boxed_opaque_existential_1(a1);

  return v7;
}

void *outlined init with take of MessageSenderProtocol(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t GPKAccountManager.accountPrimaryIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[13] = v0;
  v1[11] = v1;
  v1[12] = 0;
  v1[9] = 0;
  v1[10] = 0;
  v1[12] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t PrimaryAccountMessage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[13];
  v0[11] = v0;
  FetchPrimaryAccountMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + OBJC_IVAR___GPKAccountManager_daemonMessageSender, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 112) = v1;
  PrimaryAccountMessage = lazy protocol witness table accessor for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage();
  *v1 = *(_QWORD *)(v5 + 88);
  v1[1] = GPKAccountManager.accountPrimaryIdentifier();
  return v9(v5 + 56, v6, &type metadata for FetchPrimaryAccountMessage, PrimaryAccountMessage, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[11] = v0;
  v2 = v0[7];
  v3 = v0[8];
  v0[9] = v2;
  v0[10] = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[11] + 8))(v2, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 88) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 88) + 8))();
}

uint64_t GPKAccountManager.allAccountHandles()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[10] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t AccountAliasesMessage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[10];
  v0[7] = v0;
  FetchAccountAliasesMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + OBJC_IVAR___GPKAccountManager_daemonMessageSender, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 88) = v1;
  AccountAliasesMessage = lazy protocol witness table accessor for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage();
  *v1 = *(_QWORD *)(v5 + 56);
  v1[1] = GPKAccountManager.allAccountHandles();
  return v9(v5 + 72, v6, &type metadata for FetchAccountAliasesMessage, AccountAliasesMessage, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  v2 = *(_QWORD *)(v0 + 72);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 56) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t @objc closure #1 in GPKAccountManager.allAccountHandles()(const void *a1, void *a2)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;
  uint64_t v7;

  v2[3] = a2;
  v2[2] = v2;
  v2[4] = _Block_copy(a1);
  v4 = a2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 40) = v5;
  *v5 = *(_QWORD *)(v7 + 16);
  v5[1] = @objc closure #1 in GPKAccountManager.allAccountHandles();
  return GPKAccountManager.allAccountHandles()();
}

_QWORD *@objc closure #1 in GPKAccountManager.allAccountHandles()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id v4;
  void (**v5)(void *, _QWORD);
  Class isa;
  void (**aBlock)(void);
  id v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v9 = v2 + 16;
  v10 = (_QWORD *)(v2 + 16);
  swift_task_dealloc();
  if (v0)
  {
    v5 = *(void (***)(void *, _QWORD))(v9 + 16);
    v4 = (id)_convertErrorToNSError(_:)();
    v5[2](v5, 0);

    _Block_release(v5);
  }
  else
  {
    aBlock = *(void (***)(void))(v9 + 16);
    isa = Array._bridgeToObjectiveC()().super.isa;
    aBlock[2]();

    _Block_release(aBlock);
    swift_bridgeObjectRelease();
  }

  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v10 + 8))(v10);
}

uint64_t sub_23D286B14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GPKAccountManager.allAccountHandles()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  const void *v5;

  *(_QWORD *)(v1 + 16) = v1;
  v5 = *(const void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for @objc closure #1 in GPKAccountManager.allAccountHandles();
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in GPKAccountManager.allAccountHandles()
                                                       + async function pointer to @objc closure #1 in GPKAccountManager.allAccountHandles()))(v5, v4);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;

  v17 = a1;
  v16 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v23 = (char *)&v14 - v15;
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v23, 1);
  v18 = 48;
  v19 = 7;
  v4 = swift_allocObject();
  v5 = v16;
  v6 = (_QWORD *)v4;
  v7 = v17;
  v22 = v6;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v7;
  v6[5] = v5;
  v20 = v6[2];
  v21 = v6[3];
  swift_unknownObjectRetain();
  v8 = swift_allocObject();
  v9 = v21;
  v10 = v22;
  v11 = (_QWORD *)v8;
  v12 = (uint64_t)v23;
  v11[2] = v20;
  v11[3] = v9;
  v11[4] = &_sIeghH_IeAgH_TRTATu;
  v11[5] = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(v12, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v11);
  return swift_release();
}

uint64_t GPKAccountManager.preferredHandle()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[13] = v0;
  v1[11] = v1;
  v1[12] = 0;
  v1[9] = 0;
  v1[10] = 0;
  v1[12] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t PreferredHandleMessage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[13];
  v0[11] = v0;
  FetchPreferredHandleMessage.init()();
  outlined init with copy of MessageSenderProtocol(v4 + OBJC_IVAR___GPKAccountManager_daemonMessageSender, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v9 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + **(int **)(v8 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 112) = v1;
  PreferredHandleMessage = lazy protocol witness table accessor for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage();
  *v1 = *(_QWORD *)(v5 + 88);
  v1[1] = GPKAccountManager.preferredHandle();
  return v9(v5 + 56, v6, &type metadata for FetchPreferredHandleMessage, PreferredHandleMessage, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[11] = v0;
  v2 = v0[7];
  v3 = v0[8];
  v0[9] = v2;
  v0[10] = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[11] + 8))(v2, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 88) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 88) + 8))();
}

uint64_t @objc closure #1 in GPKAccountManager.preferredHandle()(const void *a1, void *a2)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;
  uint64_t v7;

  v2[3] = a2;
  v2[2] = v2;
  v2[4] = _Block_copy(a1);
  v4 = a2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 40) = v5;
  *v5 = *(_QWORD *)(v7 + 16);
  v5[1] = @objc closure #1 in GPKAccountManager.preferredHandle();
  return GPKAccountManager.preferredHandle()();
}

_QWORD *@objc closure #1 in GPKAccountManager.preferredHandle()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  id v6;
  void (**v7)(void *, _QWORD);
  id v8;
  void (**aBlock)(void);
  id v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v11 = v4 + 16;
  v12 = (_QWORD *)(v4 + 16);
  swift_task_dealloc();
  if (v2)
  {
    v7 = *(void (***)(void *, _QWORD))(v11 + 16);
    v6 = (id)_convertErrorToNSError(_:)();
    v7[2](v7, 0);

    _Block_release(v7);
  }
  else
  {
    aBlock = *(void (***)(void))(v11 + 16);
    v8 = (id)MEMORY[0x242632560](a1, a2);
    aBlock[2]();

    _Block_release(aBlock);
    swift_bridgeObjectRelease();
  }

  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v12 + 8))(v12);
}

uint64_t sub_23D2872A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GPKAccountManager.preferredHandle()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  const void *v5;

  *(_QWORD *)(v1 + 16) = v1;
  v5 = *(const void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for @objc closure #1 in GPKAccountManager.preferredHandle();
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in GPKAccountManager.preferredHandle()
                                                       + async function pointer to @objc closure #1 in GPKAccountManager.preferredHandle()))(v5, v4);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKAccountManager.setPreferredHandle(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = v2;
  v3[16] = a2;
  v3[15] = a1;
  v3[13] = v3;
  v3[7] = 0;
  v3[8] = 0;
  v3[14] = 0;
  v3[9] = 0;
  v3[10] = 0;
  v3[7] = a1;
  v3[8] = a2;
  v3[14] = v2;
  return swift_task_switch();
}

uint64_t GPKAccountManager.setPreferredHandle(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  Swift::String_optional v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(Swift::String_optional *)(v0 + 120);
  *(_QWORD *)(v0 + 104) = v0;
  swift_bridgeObjectRetain();
  SetPreferredHandleMessage.init(_:)(v4);
  *(_QWORD *)(v0 + 144) = v13;
  *(_QWORD *)(v0 + 72) = v12;
  *(_QWORD *)(v0 + 80) = v13;
  outlined init with copy of MessageSenderProtocol(v5 + OBJC_IVAR___GPKAccountManager_daemonMessageSender, v0 + 16);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v8);
  v7 = v0 + 88;
  *(_QWORD *)(v0 + 88) = v12;
  *(_QWORD *)(v0 + 96) = v13;
  v10 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8) + **(int **)(v9 + 8));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 152) = v1;
  v2 = lazy protocol witness table accessor for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage();
  *v1 = *(_QWORD *)(v6 + 104);
  v1[1] = GPKAccountManager.setPreferredHandle(_:);
  return v10(v11, v7, &type metadata for SetPreferredHandleMessage, v2, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = *v1;
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 104) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 104) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 104) + 8))();
}

uint64_t @objc closure #1 in GPKAccountManager.setPreferredHandle(_:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v15;
  uint64_t v16;

  v3[3] = a3;
  v3[2] = v3;
  v4 = a1;
  v3[4] = _Block_copy(a2);
  v5 = a3;
  v15 = 0;
  v16 = 0;
  if (a1)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v6;

    v15 = v9;
    v16 = v10;
  }
  v11[5] = v16;
  v7 = (_QWORD *)swift_task_alloc();
  v11[6] = v7;
  *v7 = v11[2];
  v7[1] = @objc closure #1 in GPKAccountManager.setPreferredHandle(_:);
  return GPKAccountManager.setPreferredHandle(_:)(v15, v16);
}

_QWORD *@objc closure #1 in GPKAccountManager.setPreferredHandle(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  id v5;
  void (**v6)(void);
  void (**aBlock)(void);
  id v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v9 = v2 + 16;
  v10 = (_QWORD *)(v2 + 16);
  swift_task_dealloc();
  if (v0)
  {
    v6 = *(void (***)(void))(v9 + 16);
    v5 = (id)_convertErrorToNSError(_:)();
    v6[2]();

    _Block_release(v6);
  }
  else
  {
    aBlock = *(void (***)(void))(v9 + 16);
    aBlock[2]();
    _Block_release(aBlock);
  }
  v4 = *(void **)(v9 + 8);
  swift_bridgeObjectRelease();

  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v10 + 8))(v10);
}

uint64_t sub_23D287A00()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GPKAccountManager.setPreferredHandle(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for @objc closure #1 in GPKAccountManager.setPreferredHandle(_:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GPKAccountManager.setPreferredHandle(_:)
                                                               + async function pointer to @objc closure #1 in GPKAccountManager.setPreferredHandle(_:)))(v6, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

id GPKAccountManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GPKAccountManager.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"GroupKit.GPKAccountManager")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"GroupKit.GPKAccountManager", 26, (unint64_t)"init()", 6, 2, (unint64_t)"GroupKit/GPKAccountManager.swift", 32, 2, v1, 0xCuLL, 0xEuLL);
  __break(1u);
  return result;
}

id GPKAccountManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GPKAccountManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF)
      goto LABEL_12;
    v5 = (a3 + 1);
  }
  else
  {
    v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL)
        v5 = (v6 | (a3 >> 12)) + 8487393;
      else
        v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
    }
  }
  v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0)
    return a1(&v8, v4);
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  unsigned int v11;
  uint64_t result;
  char v13[8];
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  char *v16;
  uint64_t v17[2];
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = a11;
  v30 = "Fatal error";
  v31 = "Unexpectedly found nil while unwrapping an Optional value";
  v32 = "Swift/StaticString.swift";
  v33 = "Not enough bits to represent the passed value";
  v34 = "Swift/Integers.swift";
  v35 = "UnsafeBufferPointer with negative count";
  v36 = "Swift/UnsafeBufferPointer.swift";
  v37 = 0;
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a1;
  v43 = a2;
  v44 = a10;
  v45 = a11;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = v17;
        MEMORY[0x24BDAC7A8](v17);
        v15 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v16 = &v38;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v13, v11);
        return (uint64_t)v18;
      }
      v13[0] = 2;
      v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v46 = v23;
  else
    v46 = 0;
  v17[0] = v46;
  if (!v46)
  {
    v13[0] = 2;
    v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17[0], v24, v25, v26, v27, v21, v22, v28, v20, v29);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t method lookup function for GPKAccountManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKAccountManager.__allocating_init(daemonMessageSender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of GPKAccountManager.accountPrimaryIdentifier()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)((*v0 & *MEMORY[0x24BEE4EA0]) + 0x60)
                         + **(int **)((*v0 & *MEMORY[0x24BEE4EA0]) + 0x60));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = dispatch thunk of GPKAccountManager.accountPrimaryIdentifier();
  return v4();
}

uint64_t dispatch thunk of GPKAccountManager.accountPrimaryIdentifier()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of GPKAccountManager.allAccountHandles()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)((*v0 & *MEMORY[0x24BEE4EA0]) + 0x68)
                         + **(int **)((*v0 & *MEMORY[0x24BEE4EA0]) + 0x68));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = dispatch thunk of GPKAccountManager.allAccountHandles();
  return v4();
}

uint64_t dispatch thunk of GPKAccountManager.allAccountHandles()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of GPKAccountManager.preferredHandle()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)((*v0 & *MEMORY[0x24BEE4EA0]) + 0x70)
                         + **(int **)((*v0 & *MEMORY[0x24BEE4EA0]) + 0x70));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = dispatch thunk of GPKAccountManager.preferredHandle();
  return v4();
}

uint64_t dispatch thunk of GPKAccountManager.preferredHandle()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of GPKAccountManager.setPreferredHandle(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)((*v2 & *MEMORY[0x24BEE4EA0]) + 0x78)
                                                + **(int **)((*v2 & *MEMORY[0x24BEE4EA0]) + 0x78));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of GPKAccountManager.setPreferredHandle(_:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of GPKAccountManager.setPreferredHandle(_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  char v12[8];
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = "Fatal error";
  v30 = "Unexpectedly found nil while unwrapping an Optional value";
  v31 = "Swift/StaticString.swift";
  v32 = "Not enough bits to represent the passed value";
  v33 = "Swift/Integers.swift";
  v34 = "UnsafeBufferPointer with negative count";
  v35 = "Swift/UnsafeBufferPointer.swift";
  v36 = 0;
  v38 = a6;
  v39 = a7;
  v40 = a1;
  v41 = a2;
  v42 = a8;
  v43 = a10;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = &v16;
        MEMORY[0x24BDAC7A8](&v16);
        v14 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v15 = &v37;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply, (uint64_t)v12, v10);
        return (uint64_t)v18;
      }
      v12[0] = 2;
      v13 = 148;
      LODWORD(v14) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v12[0] = 2;
    v13 = 3455;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v44 = v23;
  else
    v44 = 0;
  v17 = v44;
  if (!v44)
  {
    v12[0] = 2;
    v13 = 136;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17, v24, v25, v26, v21, v22, v27, v28);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF)
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = v3;
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return v6();
}

uint64_t _sIeghH_IeAgH_TRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D2892EC()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = v0[2];
  v4 = v0[3];
  v5 = (int *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v6, v4, v5);
}

uint64_t _sIeghH_IeAgH_TRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = v4;
  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = _sIeAgH_ytIeAgHr_TRTQ0_;
  return v7();
}

uint64_t _sIeAgH_ytIeAgHr_TRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D289524()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = (int *)v1[4];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sIeAgH_ytIeAgHr_TRTATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v5, v6, v7);
}

uint64_t _sIeAgH_ytIeAgHr_TRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  v5 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v5)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  return swift_task_create();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for TaskPriority();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D289A00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t VersionedKeyData.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t VersionedKeyData.data.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t VersionedKeyData.isCurrent.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 24) & 1;
}

uint64_t *VersionedKeyData.init(version:data:isCurrent:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v11 = a1;
  outlined copy of Data._Representation(a2, a3);
  outlined copy of Data._Representation(a2, a3);
  v12 = a2;
  v13 = a3;
  v14 = a4 & 1;
  *(_DWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  outlined consume of Data._Representation(a2, a3);
  result = &v11;
  outlined destroy of VersionedKeyData((uint64_t)&v11);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of VersionedKeyData(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

BOOL static VersionedKeyData.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t VersionedKeyData.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t VersionedKeyData.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("data", 4uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isCurrent", 9uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t VersionedKeyData.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t VersionedKeyData.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys;
  if (!lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData.CodingKeys, &type metadata for VersionedKeyData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys;
  if (!lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData.CodingKeys, &type metadata for VersionedKeyData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys;
  if (!lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData.CodingKeys, &type metadata for VersionedKeyData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys;
  if (!lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData.CodingKeys, &type metadata for VersionedKeyData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys;
  if (!lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData.CodingKeys, &type metadata for VersionedKeyData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t VersionedKeyData.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t VersionedKeyData.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("data", 4uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isCurrent", 9uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance VersionedKeyData.CodingKeys(char *a1, char *a2)
{
  return static VersionedKeyData.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance VersionedKeyData.CodingKeys()
{
  return VersionedKeyData.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VersionedKeyData.CodingKeys()
{
  return VersionedKeyData.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VersionedKeyData.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance VersionedKeyData.CodingKeys()
{
  char *v0;

  return VersionedKeyData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance VersionedKeyData.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = VersionedKeyData.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance VersionedKeyData.CodingKeys()
{
  return VersionedKeyData.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance VersionedKeyData.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = VersionedKeyData.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance VersionedKeyData.CodingKeys()
{
  lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance VersionedKeyData.CodingKeys()
{
  lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t VersionedKeyData.encode(to:)(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  char v32;
  int *v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<VersionedKeyData.CodingKeys>);
  v16 = *(_QWORD *)(v25 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)v6 - v17;
  v34 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v24 = *v1;
  v18 = *((_QWORD *)v1 + 1);
  v19 = *((_QWORD *)v1 + 2);
  v20 = *((unsigned __int8 *)v1 + 24);
  v33 = v1;
  v21 = v34[3];
  v22 = v34[4];
  __swift_project_boxed_opaque_existential_1(v34, v21);
  lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v26;
  v32 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v27 = v2;
  v28 = v2;
  if (v2)
  {
    v7 = v28;
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v25);
    v8 = v7;
  }
  else
  {
    outlined copy of Data._Representation(v18, v19);
    v12 = v31;
    v31[0] = v18;
    v31[1] = v19;
    v11 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    v3 = v27;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = v3;
    v14 = v3;
    if (v3)
    {
      v6[1] = v14;
      outlined destroy of Data((uint64_t)v31);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v25);
    }
    else
    {
      outlined destroy of Data((uint64_t)v31);
      v4 = v13;
      v29 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v9 = v4;
      v10 = v4;
      if (v4)
        v6[0] = v10;
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v25);
    }
  }
  return result;
}

_QWORD *VersionedKeyData.init(from:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  int v49;
  _QWORD v50[2];
  char v51;
  char v52;

  v32 = a2;
  v33 = a1;
  v48 = 0;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<VersionedKeyData.CodingKeys>);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v37 = (char *)&v13 - v36;
  v52 = 0;
  v48 = (_QWORD *)MEMORY[0x24BDAC7A8](v33);
  v39 = v48[3];
  v40 = v48[4];
  __swift_project_boxed_opaque_existential_1(v48, v39);
  lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
  v2 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v41 = v2;
  v42 = v2;
  if (v2)
  {
    v16 = v42;
  }
  else
  {
    v47 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v29 = 0;
    v30 = v3;
    v31 = 0;
    v25 = v3;
    v49 = v3;
    v26 = &v44;
    v44 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    v4 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v27 = v4;
    v28 = v4;
    if (v4)
    {
      v15 = v28;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      v16 = v15;
    }
    else
    {
      v19 = v45;
      v20 = v46;
      v21 = 2;
      v52 = 2;
      outlined copy of Data._Representation(v45, v46);
      v5 = v27;
      v50[0] = v19;
      v50[1] = v20;
      v43 = v21;
      v6 = KeyedDecodingContainer.decode(_:forKey:)();
      v22 = v5;
      v23 = v6;
      v24 = v5;
      if (!v5)
      {
        v17 = v23;
        v18 = &v49;
        v51 = v23 & 1;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
        v7 = v19;
        v8 = v20;
        v9 = v17;
        v10 = v32;
        v11 = v33;
        *v32 = v25;
        *((_QWORD *)v10 + 1) = v7;
        *((_QWORD *)v10 + 2) = v8;
        *((_BYTE *)v10 + 24) = v9 & 1;
        __swift_destroy_boxed_opaque_existential_1(v11);
        result = v18;
        outlined destroy of VersionedKeyData((uint64_t)v18);
        return result;
      }
      v14 = v24;
      outlined consume of Data._Representation(v19, v20);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      v16 = v14;
    }
  }
  v13 = v16;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v33);
  if ((v52 & 2) != 0)
  {
    result = v50;
    outlined destroy of Data((uint64_t)v50);
  }
  return result;
}

_QWORD *protocol witness for Decodable.init(from:) in conformance VersionedKeyData@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return VersionedKeyData.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VersionedKeyData(uint64_t a1)
{
  return VersionedKeyData.encode(to:)(a1);
}

uint64_t KeyConverter.convertToPCSIdentity(rawPrivateKey:)(uint64_t a1, unint64_t a2)
{
  Swift::String v2;
  id v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  void *_;
  id v16;
  void *v17;
  os_log_type_t v18;
  Swift::String v19;
  Class isa;
  uint64_t v23;
  char v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v34 = a1;
  v35 = a2;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to create identity from data", 0x27uLL, 1);
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
  v18 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v32);
  v31 = v32 & 1;
  gpklog(_:type:fileID:line:subsystem:)(v2, v18, v19, 33, (GroupKit::LogSubsystem)&v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = 0;
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v23 = PCSIdentityCreateFromRaw();

  outlined consume of Data._Representation(a1, a2);
  if (v23)
    return v23;
  if (v33)
  {
    v16 = v33;
    v4 = v33;
    v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  if (v17)
  {
    v29 = v17;
    v27 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28 = v5;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error converting key to pcs identity: ", 0x26uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    v26 = v17;
    type metadata accessor for CFErrorRef();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v13 = String.init(stringInterpolation:)();
    _ = v8;
    v14 = static os_log_type_t.error.getter();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v25);
    v10._countAndFlagsBits = v13;
    v10._object = _;
    v24 = v25 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v10, v14, v9, 38, (GroupKit::LogSubsystem)&v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for GPKError();
  type metadata accessor for InternalError();
  v30 = 106;
  v11 = InternalError.__allocating_init(_:internalInfo:)(&v30, 0);
  GPKError.__allocating_init(internalError:)(v11);
  swift_willThrow();
  return v12;
}

uint64_t type metadata accessor for CFErrorRef()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CFErrorRef;
  if (!lazy cache variable for type metadata for CFErrorRef)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CFErrorRef);
      return v1;
    }
  }
  return v4;
}

uint64_t KeyConverter.convertToPCSIdentity(rawPrivateKey:)(uint64_t a1)
{
  Swift::String v1;
  uint64_t v3;
  os_log_type_t v4;
  Swift::String fileID;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;

  v12 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v12 = a1;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to create identity from versioned key data", 0x35uLL, 1);
  fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
  v4 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v11);
  v10 = v11 & 1;
  gpklog(_:type:fileID:line:subsystem:)(v1, v4, fileID, 47, (GroupKit::LogSubsystem)&v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v6, v7);
  v9 = KeyConverter.convertToPCSIdentity(rawPrivateKey:)(v6, v7);
  outlined consume of Data._Representation(v6, v7);
  if (v8)
    return v3;
  else
    return v9;
}

void *KeyConverter.convertToPCSIdentitySet(rawPrivateKeys:)(uint64_t a1)
{
  Swift::String v1;
  id v2;
  id v3;
  id v4;
  id v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  id v18;
  Swift::String v19;
  id v20;
  os_log_type_t v21;
  Swift::String v22;
  uint64_t v23;
  os_log_type_t v24;
  Swift::String v25;
  void *v26;
  id v27;
  void *v28;
  os_log_type_t v29;
  Swift::String v30;
  os_log_type_t v31;
  Swift::String v32;
  os_log_type_t v33;
  Swift::String v34;
  char v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t i;
  void *Mutable;
  uint64_t v44;
  os_log_type_t v45;
  Swift::String fileID;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char v62;
  char v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  id v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v61 = 0;
  v59 = 0;
  v60 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v57 = 0;
  v75 = a1;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to create identity set", 0x21uLL, 1);
  fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
  v45 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v74);
  v73 = v74 & 1;
  gpklog(_:type:fileID:line:subsystem:)(v1, v45, fileID, 52, (GroupKit::LogSubsystem)&v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v72 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [VersionedKeyData]);
  lazy protocol witness table accessor for type [VersionedKeyData] and conformance [A]();
  v48 = Collection.isEmpty.getter();
  outlined destroy of [VersionedKeyData]();
  if ((v48 & 1) != 0)
  {
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Key set is empty", 0x10uLL, 1);
    v21 = static os_log_type_t.error.getter();
    v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v71);
    v70 = v71 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v19, v21, v22, 55, (GroupKit::LogSubsystem)&v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for GPKError();
    type metadata accessor for InternalError();
    v69 = 109;
    v20 = InternalError.__allocating_init(_:internalInfo:)(&v69, 0);
    GPKError.__allocating_init(internalError:)(v20);
    swift_willThrow();
  }
  else
  {
    v88 = 0;
    Mutable = (void *)PCSIdentitySetCreateMutable();
    if (Mutable)
    {
      v61 = Mutable;
      swift_bridgeObjectRetain();
      v58 = a1;
      Collection<>.makeIterator()();
      for (i = v44; ; i = 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[VersionedKeyData]>);
        IndexingIterator.next()();
        v39 = v85;
        v40 = v86;
        v41 = v87;
        if (v87 == 2)
        {
          outlined destroy of IndexingIterator<[VersionedKeyData]>();
          return Mutable;
        }
        LODWORD(v80) = v84;
        v81 = v85;
        v82 = v86;
        v83 = v87 & 1;
        v76 = v84;
        v77 = v85;
        v78 = v86;
        v79 = v87 & 1;
        v38 = (void *)KeyConverter.convertToPCSIdentity(rawPrivateKey:)((uint64_t)&v76);
        if (i)
          break;
        v57 = v38;
        v2 = Mutable;
        v3 = v38;
        v36 = PCSIdentitySetAddIdentity();

        if ((v36 & 1) == 0)
        {
          v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to create an identity to identity set", 0x2CuLL, 1);
          v29 = static os_log_type_t.error.getter();
          v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v56);
          v55 = v56 & 1;
          gpklog(_:type:fileID:line:subsystem:)(v9, v29, v30, 71, (GroupKit::LogSubsystem)&v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for GPKError();
          type metadata accessor for InternalError();
          v54 = 109;
          v10 = InternalError.__allocating_init(_:internalInfo:)(&v54, 0);
          GPKError.__allocating_init(internalError:)(v10);
          swift_willThrow();

          outlined consume of Data._Representation(v39, v40);
          outlined destroy of IndexingIterator<[VersionedKeyData]>();

          return (void *)v37;
        }
        if ((v41 & 1) != 0)
        {
          v4 = Mutable;
          v5 = v38;
          v35 = PCSIdentitySetSetCurrentIdentity();

          if ((v35 & 1) == 0)
          {
            v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unable to set current identity to set", 0x25uLL, 1);
            v33 = static os_log_type_t.error.getter();
            v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
            default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v53);
            v52 = v53 & 1;
            gpklog(_:type:fileID:line:subsystem:)(v6, v33, v34, 79, (GroupKit::LogSubsystem)&v52);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for GPKError();
            type metadata accessor for InternalError();
            v51 = 110;
            v7 = InternalError.__allocating_init(_:internalInfo:)(&v51, 0);
            GPKError.__allocating_init(internalError:)(v7);
            swift_willThrow();

            outlined consume of Data._Representation(v39, v40);
            outlined destroy of IndexingIterator<[VersionedKeyData]>();

            return (void *)v37;
          }
          v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Current identity set", 0x14uLL, 1);
          v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
          v31 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v50);
          v49 = v50 & 1;
          gpklog(_:type:fileID:line:subsystem:)(v8, v31, v32, 77, (GroupKit::LogSubsystem)&v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        outlined consume of Data._Representation(v39, v40);
      }
      outlined consume of Data._Representation(v39, v40);
      outlined destroy of IndexingIterator<[VersionedKeyData]>();

    }
    else
    {
      if (v88)
      {
        v27 = v88;
        v12 = v88;
        v28 = v27;
      }
      else
      {
        v28 = 0;
      }
      if (v28)
      {
        v67 = v28;
        v65 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v66 = v13;
        v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error creating mutable identity set: ", 0x25uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v14);
        swift_bridgeObjectRelease();
        v64 = v28;
        type metadata accessor for CFErrorRef();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v23 = String.init(stringInterpolation:)();
        v26 = v16;
        v24 = static os_log_type_t.error.getter();
        v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/KeyConverter.swift", 0x1BuLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v63);
        v17._countAndFlagsBits = v23;
        v17._object = v26;
        v62 = v63 & 1;
        gpklog(_:type:fileID:line:subsystem:)(v17, v24, v25, 62, (GroupKit::LogSubsystem)&v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      type metadata accessor for GPKError();
      type metadata accessor for InternalError();
      v68 = 109;
      v18 = InternalError.__allocating_init(_:internalInfo:)(&v68, 0);
      GPKError.__allocating_init(internalError:)(v18);
      swift_willThrow();
    }
  }
  return (void *)v37;
}

unint64_t lazy protocol witness table accessor for type [VersionedKeyData] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [VersionedKeyData] and conformance [A];
  if (!lazy protocol witness table cache variable for type [VersionedKeyData] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [VersionedKeyData]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [VersionedKeyData] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [VersionedKeyData]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[VersionedKeyData]>()
{
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for KeyConverting.convertToPCSIdentity(rawPrivateKey:) in conformance KeyConverter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = KeyConverter.convertToPCSIdentity(rawPrivateKey:)(a1, a2);
  if (v2)
    return v4;
  else
    return v5;
}

uint64_t protocol witness for KeyConverting.convertToPCSIdentity(rawPrivateKey:) in conformance KeyConverter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = KeyConverter.convertToPCSIdentity(rawPrivateKey:)(a1);
  if (v1)
    return v3;
  else
    return v4;
}

void *protocol witness for KeyConverting.convertToPCSIdentitySet(rawPrivateKeys:) in conformance KeyConverter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v4 = KeyConverter.convertToPCSIdentitySet(rawPrivateKeys:)(a1);
  if (v1)
    return (void *)v3;
  else
    return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for VersionedKeyData(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for VersionedKeyData(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for VersionedKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  result = a1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t assignWithCopy for VersionedKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v2, v3);
  result = a1;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24) & 1;
  return result;
}

uint64_t assignWithTake for VersionedKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  result = a1;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for VersionedKeyData(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    {
      v4 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = -1;
      if ((*(_BYTE *)(a1 + 24) & 0xFE) != 0)
        v3 = (*(unsigned __int8 *)(a1 + 24) + 2147483646) & 0x7FFFFFFF;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VersionedKeyData(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 25);
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *v3 = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for VersionedKeyData()
{
  return &type metadata for VersionedKeyData;
}

uint64_t getEnumTagSinglePayload for VersionedKeyData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for VersionedKeyData.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for VersionedKeyData.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for VersionedKeyData.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for VersionedKeyData.CodingKeys()
{
  return &type metadata for VersionedKeyData.CodingKeys;
}

uint64_t dispatch thunk of KeyConverting.convertToPCSIdentity(rawPrivateKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of KeyConverting.convertToPCSIdentity(rawPrivateKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of KeyConverting.convertToPCSIdentitySet(rawPrivateKeys:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for KeyConverter()
{
  return &type metadata for KeyConverter;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in VersionedKeyData.CodingKeys()
{
  return lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in VersionedKeyData.CodingKeys()
{
  return lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
}

unint64_t base witness table accessor for Equatable in VersionedKeyData.CodingKeys()
{
  return lazy protocol witness table accessor for type VersionedKeyData.CodingKeys and conformance VersionedKeyData.CodingKeys();
}

uint64_t GPKGroupKey.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKGroupKey.groupVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKGroupKey() + 20));
}

uint64_t type metadata accessor for GPKGroupKey()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKGroupKey;
  if (!type metadata singleton initialization cache for GPKGroupKey)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKGroupKey.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKGroupKey() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKGroupKey.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupKey();
  return outlined init with copy of GPKGroupKey.Key(v1 + *(int *)(v2 + 28), a1);
}

uint64_t outlined init with copy of GPKGroupKey.Key(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  char v4;

  v3 = *(void **)a1;
  v4 = *(_BYTE *)(a1 + 8);
  outlined copy of GPKGroupKey.Key(*(void **)a1);
  result = a2;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id outlined copy of GPKGroupKey.Key(void *a1)
{
  return a1;
}

uint64_t GPKGroupKey.init(rawKey:keyConverter:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  id v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;

  v55 = a3;
  v64 = a1;
  v59 = a2;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v70 = 0;
  v60 = 0;
  v57 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v58 = (uint64_t)v24 - v57;
  v61 = (int *)type metadata accessor for GPKGroupKey();
  v62 = (*(_QWORD *)(*((_QWORD *)v61 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v60);
  v63 = (uint64_t)v24 - v62;
  v83 = (char *)v24 - v62;
  v82 = v3;
  v81 = v4;
  v65 = type metadata accessor for GPKGroupKey.RawKey();
  v5 = v64 + *(int *)(v65 + 28);
  v66 = *(_QWORD *)v5;
  v67 = *(_QWORD *)(v5 + 8);
  v68 = *(_QWORD *)(v5 + 16);
  v69 = *(unsigned __int8 *)(v5 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(v66, v67, v68, v69);
  if ((v69 & 0x80) != 0)
  {
    v50 = v66;
    v34 = v66;
    v80 = v66;
    v32 = v59[3];
    v33 = v59[4];
    __swift_project_boxed_opaque_existential_1(v59, v32);
    v11 = v56;
    v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v34, v32);
    v35 = v11;
    v36 = v12;
    v37 = v11;
    if (!v11)
    {
      v31 = v36;
      v79 = v36;
      v13 = v36;
      v14 = v31;
      v15 = v63 + v61[7];
      *(_QWORD *)v15 = v31;
      *(_BYTE *)(v15 + 8) = 1;

      swift_bridgeObjectRelease();
      v39 = v35;
      goto LABEL_8;
    }
    v25 = v37;
    swift_bridgeObjectRelease();
    v27 = v25;
  }
  else
  {
    v51 = v66;
    v52 = v67;
    v53 = v68;
    v54 = v69;
    v44 = v69;
    v42 = v68;
    v41 = v67;
    v40 = v66;
    LODWORD(v75) = v66;
    v76 = v67;
    v77 = v68;
    v43 = 1;
    v78 = v69 & 1;
    v45 = v59[3];
    v46 = v59[4];
    __swift_project_boxed_opaque_existential_1(v59, v45);
    v6 = v56;
    v71 = v40;
    v72 = v41;
    v73 = v42;
    v74 = v44 & v43;
    v7 = (void *)(*(uint64_t (**)(int *, uint64_t))(v46 + 16))(&v71, v45);
    v47 = v6;
    v48 = v7;
    v49 = v6;
    if (!v6)
    {
      v38 = v48;
      v70 = v48;
      v8 = v48;
      v9 = v38;
      v10 = v63 + v61[7];
      *(_QWORD *)v10 = v38;
      *(_BYTE *)(v10 + 8) = 0;

      outlined consume of Data._Representation(v41, v42);
      v39 = v47;
LABEL_8:
      v30 = v39;
      outlined init with copy of GPKGroupID(v64, v58);
      outlined init with take of GPKGroupID(v58, v63);
      v16 = v65;
      v17 = v64;
      *(_QWORD *)(v63 + v61[5]) = *(_QWORD *)(v64 + *(int *)(v65 + 20));
      v18 = (uint64_t *)(v17 + *(int *)(v16 + 24));
      v28 = *v18;
      v29 = v18[1];
      swift_bridgeObjectRetain();
      v19 = v63;
      v20 = v29;
      v21 = v55;
      v22 = (_QWORD *)(v63 + v61[6]);
      *v22 = v28;
      v22[1] = v20;
      outlined init with copy of GPKGroupKey(v19, v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
      outlined destroy of GPKGroupKey.RawKey(v64);
      return outlined destroy of GPKGroupKey(v63);
    }
    v26 = v49;
    outlined consume of Data._Representation(v41, v42);
    v27 = v26;
  }
  v24[1] = v27;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  return outlined destroy of GPKGroupKey.RawKey(v64);
}

uint64_t type metadata accessor for GPKGroupKey.RawKey()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKGroupKey.RawKey;
  if (!type metadata singleton initialization cache for GPKGroupKey.RawKey)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined copy of GPKGroupKey.RawKey.Key(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4 < 0)
    return swift_bridgeObjectRetain();
  else
    return outlined copy of Data._Representation(a2, a3);
}

uint64_t outlined destroy of GPKGroupKey.RawKey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKGroupKey.RawKey();
  swift_bridgeObjectRelease();
  outlined consume of GPKGroupKey.RawKey.Key(*(_QWORD *)(a1 + *(int *)(v3 + 28)), *(_QWORD *)(a1 + *(int *)(v3 + 28) + 8), *(_QWORD *)(a1 + *(int *)(v3 + 28) + 16), *(_BYTE *)(a1 + *(int *)(v3 + 28) + 24));
  return a1;
}

uint64_t outlined consume of GPKGroupKey.RawKey.Key(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4 < 0)
    return swift_bridgeObjectRelease();
  else
    return outlined consume of Data._Representation(a2, a3);
}

uint64_t outlined init with copy of GPKGroupKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  char v12;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v9 = (int *)type metadata accessor for GPKGroupKey();
  *(_QWORD *)(a2 + v9[5]) = *(_QWORD *)(a1 + v9[5]);
  v3 = (_QWORD *)(a1 + v9[6]);
  v7 = (_QWORD *)(a2 + v9[6]);
  *v7 = *v3;
  v8 = v3[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v10 = v9[7];
  v11 = *(void **)(a1 + v10);
  v12 = *(_BYTE *)(a1 + v10 + 8);
  outlined copy of GPKGroupKey.Key(v11);
  result = a2;
  v5 = a2 + v10;
  *(_QWORD *)v5 = v11;
  *(_BYTE *)(v5 + 8) = v12 & 1;
  return result;
}

uint64_t outlined destroy of GPKGroupKey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for GPKGroupKey();
  swift_bridgeObjectRelease();
  outlined consume of GPKGroupKey.Key(*(void **)(a1 + *(int *)(v3 + 28)));
  return a1;
}

void outlined consume of GPKGroupKey.Key(void *a1)
{

}

BOOL static GPKGroupKey.RawKey.Key.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKGroupKey.RawKey.Key.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKGroupKey.RawKey.Key.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("latest", 6uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("historical", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKGroupKey.RawKey.Key.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKGroupKey.RawKey.Key.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.CodingKeys, &type metadata for GPKGroupKey.RawKey.Key.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.CodingKeys, &type metadata for GPKGroupKey.RawKey.Key.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.CodingKeys, &type metadata for GPKGroupKey.RawKey.Key.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.CodingKeys, &type metadata for GPKGroupKey.RawKey.Key.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.CodingKeys, &type metadata for GPKGroupKey.RawKey.Key.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKey.RawKey.Key.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKey.RawKey.Key.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("historical", 0xAuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("latest", 6uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKey.RawKey.Key.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKGroupKey.RawKey.Key.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  return GPKGroupKey.RawKey.Key.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  return GPKGroupKey.RawKey.Key.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKey.RawKey.Key.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  _BYTE *v0;

  return GPKGroupKey.RawKey.Key.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKey.RawKey.Key.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKey.RawKey.Key.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  return GPKGroupKey.RawKey.Key.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKey.RawKey.Key.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKey.RawKey.Key.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKey.RawKey.Key.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t static GPKGroupKey.RawKey.Key.HistoricalCodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t GPKGroupKey.RawKey.Key.HistoricalCodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL GPKGroupKey.RawKey.Key.HistoricalCodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keys", 4uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t GPKGroupKey.RawKey.Key.HistoricalCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKGroupKey.RawKey.Key.HistoricalCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.HistoricalCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.HistoricalCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.HistoricalCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.HistoricalCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.HistoricalCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKey.RawKey.Key.HistoricalCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKey.RawKey.Key.HistoricalCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keys", 4uLL, 1)._countAndFlagsBits;
}

uint64_t static GPKGroupKey.RawKey.Key.LatestCodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t GPKGroupKey.RawKey.Key.LatestCodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL GPKGroupKey.RawKey.Key.LatestCodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key", 3uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t GPKGroupKey.RawKey.Key.LatestCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKGroupKey.RawKey.Key.LatestCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.LatestCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.LatestCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.LatestCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.LatestCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key.LatestCodingKeys, &type metadata for GPKGroupKey.RawKey.Key.LatestCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKey.RawKey.Key.LatestCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKGroupKey.RawKey.Key.LatestCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key", 3uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return static GPKGroupKey.RawKey.Key.HistoricalCodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return GPKGroupKey.RawKey.Key.HistoricalCodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return GPKGroupKey.RawKey.Key.HistoricalCodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return GPKGroupKey.RawKey.Key.HistoricalCodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GPKGroupKey.RawKey.Key.HistoricalCodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return GPKGroupKey.RawKey.Key.HistoricalCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKey.RawKey.Key.HistoricalCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return static GPKGroupKey.RawKey.Key.LatestCodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return GPKGroupKey.RawKey.Key.LatestCodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return GPKGroupKey.RawKey.Key.LatestCodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return GPKGroupKey.RawKey.Key.LatestCodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GPKGroupKey.RawKey.Key.LatestCodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return GPKGroupKey.RawKey.Key.LatestCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKey.RawKey.Key.LatestCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKGroupKey.RawKey.Key.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;

  v39 = a1;
  v61 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKey.RawKey.Key.HistoricalCodingKeys>);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v6 - v33;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKey.RawKey.Key.LatestCodingKeys>);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v6 - v37;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKey.RawKey.Key.CodingKeys>);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v39);
  v46 = (char *)&v6 - v42;
  v61 = v2;
  v43 = *v1;
  v44 = v1[1];
  v45 = v1[2];
  v49 = *((unsigned __int8 *)v1 + 24);
  v57 = v43;
  v58 = v44;
  v59 = v45;
  v60 = v49;
  v47 = v2[3];
  v48 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v47);
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v49 & 0x80) != 0)
  {
    v25 = v43;
    v11 = v43;
    swift_bridgeObjectRetain();
    v10 = &v56;
    v56 = 1;
    lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v13 = &v55;
    v55 = v11;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [VersionedKeyData]);
    lazy protocol witness table accessor for type [VersionedKeyData] and conformance <A> [A]();
    v4 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14 = v4;
    v15 = v4;
    if (!v4)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
      swift_bridgeObjectRelease();
      v16 = v14;
      goto LABEL_8;
    }
    v6 = v15;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v46, v40);
  }
  else
  {
    v26 = v43;
    v27 = v44;
    v28 = v45;
    v29 = v49;
    v21 = v49;
    v20 = v45;
    v19 = v44;
    v18 = v43;
    outlined copy of Data._Representation(v44, v45);
    v17 = &v54;
    v54 = 0;
    lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v22 = &v50;
    v50 = v18;
    v51 = v19;
    v52 = v20;
    v53 = v21 & 1;
    lazy protocol witness table accessor for type VersionedKeyData and conformance VersionedKeyData();
    v3 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v23 = v3;
    v24 = v3;
    if (!v3)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      outlined consume of Data._Representation(v19, v20);
      v16 = v23;
LABEL_8:
      v9 = v16;
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v46, v40);
    }
    v7 = v24;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
    outlined consume of Data._Representation(v19, v20);
    result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v46, v40);
    v8 = v7;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [VersionedKeyData] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [VersionedKeyData] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [VersionedKeyData] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [VersionedKeyData]);
    v4 = lazy protocol witness table accessor for type VersionedKeyData and conformance VersionedKeyData();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [VersionedKeyData] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [VersionedKeyData] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [VersionedKeyData] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [VersionedKeyData]);
    v4 = lazy protocol witness table accessor for type VersionedKeyData and conformance VersionedKeyData();
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [VersionedKeyData] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type VersionedKeyData and conformance VersionedKeyData()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData and conformance VersionedKeyData;
  if (!lazy protocol witness table cache variable for type VersionedKeyData and conformance VersionedKeyData)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData, &type metadata for VersionedKeyData);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData and conformance VersionedKeyData);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type VersionedKeyData and conformance VersionedKeyData;
  if (!lazy protocol witness table cache variable for type VersionedKeyData and conformance VersionedKeyData)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for VersionedKeyData, &type metadata for VersionedKeyData);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type VersionedKeyData and conformance VersionedKeyData);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKey.RawKey.Key.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t countAndFlagsBits;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  _QWORD v82[4];
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;

  v56 = a2;
  v65 = a1;
  v89 = 0;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKey.RawKey.Key.HistoricalCodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v57);
  v60 = (char *)v15 - v59;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKey.RawKey.Key.LatestCodingKeys>);
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v64 = (char *)v15 - v63;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKey.RawKey.Key.CodingKeys>);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = (*(_QWORD *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v65);
  v69 = (char *)v15 - v68;
  v89 = v2;
  v71 = v2[3];
  v72 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v71);
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
  v3 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v73 = v3;
  v74 = v3;
  if (v3)
  {
    v28 = v74;
  }
  else
  {
    v4 = KeyedDecodingContainer.allKeys.getter();
    v52 = &v84;
    v84 = v4;
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroupKey.RawKey.Key.CodingKeys]);
    lazy protocol witness table accessor for type [GPKGroupKey.RawKey.Key.CodingKeys] and conformance [A]();
    v85 = ArraySlice.init<A>(_:)();
    v86 = v5;
    v87 = v6;
    v88 = v7;
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>);
    v54 = lazy protocol witness table accessor for type ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys> and conformance ArraySlice<A>();
    Collection<>.popFirst()();
    v55 = v83;
    if (v83 == 2)
      goto LABEL_14;
    v50 = v55;
    v43 = v55;
    v48 = v85;
    v44 = v86;
    v45 = v87;
    v46 = v88;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v47 = v82;
    v82[0] = v48;
    v82[1] = v44;
    v82[2] = v45;
    v82[3] = v46;
    v49 = Collection.isEmpty.getter();
    outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
    swift_unknownObjectRelease();
    if ((v49 & 1) == 0)
    {
LABEL_14:
      v22 = 0;
      v26 = type metadata accessor for DecodingError();
      v20 = 1;
      v27 = swift_allocError();
      v25 = v13;
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v21 = (char *)v25 + *(int *)(v14 + 48);
      *v25 = &type metadata for GPKGroupKey.RawKey.Key;
      v23 = KeyedDecodingContainer.codingPath.getter();
      countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v20 & 1)._countAndFlagsBits;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v26 - 8) + 104))(v25, *MEMORY[0x24BEE26D0]);
      swift_willThrow();
      outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
      v28 = v27;
    }
    else if ((v43 & 1) != 0)
    {
      v34 = &v81;
      v81 = v43 & 1;
      lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
      v10 = v73;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v35 = v10;
      v36 = v10;
      if (v10)
      {
        v17 = v36;
        outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
        v28 = v17;
      }
      else
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [VersionedKeyData]);
        lazy protocol witness table accessor for type [VersionedKeyData] and conformance <A> [A]();
        v11 = v35;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v32 = v11;
        v33 = v11;
        if (!v11)
        {
          v90 = v80;
          v91 = 0;
          v92 = 0;
          v93 = 0x80;
          (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
          v37 = v32;
          goto LABEL_13;
        }
        v16 = v33;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
        outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
        v28 = v16;
      }
    }
    else
    {
      v40 = &v79;
      v79 = v43 & 1;
      lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
      v8 = v73;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v41 = v8;
      v42 = v8;
      if (v8)
      {
        v19 = v42;
        outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
        v28 = v19;
      }
      else
      {
        lazy protocol witness table accessor for type VersionedKeyData and conformance VersionedKeyData();
        v9 = v41;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v38 = v9;
        v39 = v9;
        if (!v9)
        {
          v90 = v75;
          v91 = v76;
          v92 = v77;
          v93 = v78 & 1;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
          v37 = v38;
LABEL_13:
          v30 = v37;
          outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
          v29 = &v90;
          outlined init with copy of GPKGroupKey.RawKey.Key((uint64_t)&v90, v56);
          __swift_destroy_boxed_opaque_existential_1(v65);
          return outlined destroy of GPKGroupKey.RawKey.Key((uint64_t)v29);
        }
        v18 = v39;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
        outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
        v28 = v18;
      }
    }
  }
  v15[1] = v28;
  return __swift_destroy_boxed_opaque_existential_1(v65);
}

unint64_t lazy protocol witness table accessor for type [GPKGroupKey.RawKey.Key.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKGroupKey.RawKey.Key.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKGroupKey.RawKey.Key.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroupKey.RawKey.Key.CodingKeys]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroupKey.RawKey.Key.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<GPKGroupKey.RawKey.Key.CodingKeys>()
{
  swift_unknownObjectRelease();
}

uint64_t outlined init with copy of GPKGroupKey.RawKey.Key(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(*(_QWORD *)a1, v4, v5, v6);
  result = a2;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

uint64_t outlined destroy of GPKGroupKey.RawKey.Key(uint64_t a1)
{
  outlined consume of GPKGroupKey.RawKey.Key(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroupKey.RawKey.Key@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKGroupKey.RawKey.Key.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroupKey.RawKey.Key(uint64_t a1)
{
  return GPKGroupKey.RawKey.Key.encode(to:)(a1);
}

uint64_t GPKGroupKey.RawKey.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKGroupKey.RawKey.groupVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKGroupKey.RawKey() + 20));
}

uint64_t GPKGroupKey.RawKey.serviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GPKGroupKey.RawKey() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GPKGroupKey.RawKey.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupKey.RawKey();
  return outlined init with copy of GPKGroupKey.RawKey.Key(v1 + *(int *)(v2 + 28), a1);
}

uint64_t GPKGroupKey.RawKey.init(groupID:groupVersion:serviceName:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v33 = a6;
  v39 = a1;
  v30 = a2;
  v31 = a3;
  v38 = a4;
  v27 = a5;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v25[1] = 0;
  v26 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v29 = (uint64_t)v25 - v26;
  v32 = (int *)type metadata accessor for GPKGroupKey.RawKey();
  v28 = (*(_QWORD *)(*((_QWORD *)v32 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v39);
  v40 = (uint64_t)v25 - v28;
  v49 = (char *)v25 - v28;
  v48 = v6;
  v47 = v7;
  v45 = v8;
  v46 = v9;
  v37 = *(_QWORD *)v10;
  v34 = *(_QWORD *)(v10 + 8);
  v35 = *(_QWORD *)(v10 + 16);
  v36 = *(unsigned __int8 *)(v10 + 24);
  v41 = v37;
  v42 = v34;
  v43 = v35;
  v44 = v36;
  outlined init with copy of GPKGroupID(v6, v11);
  outlined init with take of GPKGroupID(v29, v40);
  *(_QWORD *)(v40 + v32[5]) = v30;
  swift_bridgeObjectRetain();
  v12 = v37;
  v13 = v34;
  v14 = v35;
  v15 = v36;
  v16 = v38;
  v17 = (_QWORD *)(v40 + v32[6]);
  *v17 = v31;
  v17[1] = v16;
  outlined copy of GPKGroupKey.RawKey.Key(v12, v13, v14, v15);
  v18 = v33;
  v19 = v34;
  v20 = v35;
  v21 = v36;
  v22 = v40;
  v23 = v40 + v32[7];
  *(_QWORD *)v23 = v37;
  *(_QWORD *)(v23 + 8) = v19;
  *(_QWORD *)(v23 + 16) = v20;
  *(_BYTE *)(v23 + 24) = v21;
  outlined init with copy of GPKGroupKey.RawKey(v22, v18);
  outlined consume of GPKGroupKey.RawKey.Key(v37, v34, v35, v36);
  swift_bridgeObjectRelease();
  outlined destroy of GPKGroupID(v39);
  return outlined destroy of GPKGroupKey.RawKey(v40);
}

uint64_t outlined init with copy of GPKGroupKey.RawKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v9 = (int *)type metadata accessor for GPKGroupKey.RawKey();
  *(_QWORD *)(a2 + v9[5]) = *(_QWORD *)(a1 + v9[5]);
  v3 = (_QWORD *)(a1 + v9[6]);
  v7 = (_QWORD *)(a2 + v9[6]);
  *v7 = *v3;
  v8 = v3[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v10 = v9[7];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  v13 = *(_QWORD *)(a1 + v10 + 16);
  v14 = *(_BYTE *)(a1 + v10 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(v11, v12, v13, v14);
  result = a2;
  v5 = a2 + v10;
  *(_QWORD *)v5 = v11;
  *(_QWORD *)(v5 + 8) = v12;
  *(_QWORD *)(v5 + 16) = v13;
  *(_BYTE *)(v5 + 24) = v14;
  return result;
}

void static GPKGroupKey.RawKey.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D28F5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D28F648
                                                                                       + *((int *)qword_23D28F6B0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D28F658()
{
  uint64_t v1;

  return v1 == 0;
}

void GPKGroupKey.RawKey.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D28F710()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKGroupKey.RawKey.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupVersion", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key", 3uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t GPKGroupKey.RawKey.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t GPKGroupKey.RawKey.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.CodingKeys, &type metadata for GPKGroupKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.CodingKeys, &type metadata for GPKGroupKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.CodingKeys, &type metadata for GPKGroupKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.CodingKeys, &type metadata for GPKGroupKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.CodingKeys, &type metadata for GPKGroupKey.RawKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKey.RawKey.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKGroupKey.RawKey.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D28FB70()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupKey.RawKey.CodingKeys(char *a1)
{
  char v1;

  static GPKGroupKey.RawKey.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupKey.RawKey.CodingKeys()
{
  return GPKGroupKey.RawKey.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance GPKGroupKey.RawKey.CodingKeys(uint64_t a1)
{
  char *v1;

  GPKGroupKey.RawKey.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupKey.RawKey.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKGroupKey.RawKey.CodingKeys()
{
  char *v0;

  GPKGroupKey.RawKey.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKGroupKey.RawKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKey.RawKey.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKGroupKey.RawKey.CodingKeys()
{
  return GPKGroupKey.RawKey.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKGroupKey.RawKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKGroupKey.RawKey.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupKey.RawKey.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKGroupKey.RawKey.CodingKeys()
{
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKGroupKey.RawKey.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[3];
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;

  v29 = a1;
  v50 = 0;
  v49 = 0;
  v38 = type metadata accessor for GPKGroupID();
  v28 = (*(_QWORD *)(*(_QWORD *)(v38 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v40 = (uint64_t)v10 - v28;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKGroupKey.RawKey.CodingKeys>);
  v30 = *(_QWORD *)(v37 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)v10 - v31;
  v50 = v2;
  v49 = v1;
  v32 = v2[3];
  v33 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v32);
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v35, v40);
  v36 = &v48;
  v48 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v39;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v41 = v3;
  v42 = v3;
  if (v3)
  {
    v11 = v42;
    outlined destroy of GPKGroupID(v40);
    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v37);
    v12 = v11;
  }
  else
  {
    outlined destroy of GPKGroupID(v40);
    v4 = type metadata accessor for GPKGroupKey.RawKey();
    v5 = v41;
    v25 = v4;
    v47 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v26 = v5;
    v27 = v5;
    if (v5)
    {
      v10[2] = v27;
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v37);
    }
    else
    {
      v6 = (uint64_t *)(v35 + *(int *)(v25 + 24));
      v21 = *v6;
      v22 = v6[1];
      swift_bridgeObjectRetain();
      v46 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v23 = 0;
      v24 = 0;
      swift_bridgeObjectRelease();
      v7 = v35 + *(int *)(v25 + 28);
      v13 = *(_QWORD *)v7;
      v14 = *(_QWORD *)(v7 + 8);
      v15 = *(_QWORD *)(v7 + 16);
      v16 = *(unsigned __int8 *)(v7 + 24);
      outlined copy of GPKGroupKey.RawKey.Key(v13, v14, v15, v16);
      v18 = v44;
      v44[0] = v13;
      v44[1] = v14;
      v44[2] = v15;
      v45 = v16;
      v17 = &v43;
      v43 = 3;
      lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key();
      v8 = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v19 = v8;
      v20 = v8;
      if (v8)
        v10[0] = v20;
      outlined destroy of GPKGroupKey.RawKey.Key((uint64_t)v44);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v37);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key, &type metadata for GPKGroupKey.RawKey.Key);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key;
  if (!lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKGroupKey.RawKey.Key, &type metadata for GPKGroupKey.RawKey.Key);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key);
    return v0;
  }
  return v2;
}

uint64_t GPKGroupKey.RawKey.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  _QWORD *v64;
  char v65;

  v38 = a2;
  v46 = a1;
  v64 = 0;
  v42 = 0;
  v39 = type metadata accessor for GPKGroupID();
  v40 = (*(_QWORD *)(*(_QWORD *)(v39 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (uint64_t)v19 - v40;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKGroupKey.RawKey.CodingKeys>);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v50 = (char *)v19 - v45;
  v47 = (int *)type metadata accessor for GPKGroupKey.RawKey();
  v48 = (*(_QWORD *)(*((_QWORD *)v47 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v46);
  v49 = (uint64_t)v19 - v48;
  v65 = 0;
  v64 = v2;
  v52 = v2[3];
  v53 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v52);
  lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
  v3 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v54 = v3;
  v55 = v3;
  if (v3)
  {
    v23 = v55;
  }
  else
  {
    v35 = &v63;
    v63 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v36 = v4;
    v37 = v4;
    if (v4)
    {
      v22 = v37;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v43);
      v23 = v22;
    }
    else
    {
      v31 = 1;
      v65 = 1;
      outlined init with take of GPKGroupID(v41, v49);
      v5 = v36;
      v62 = v31;
      v6 = KeyedDecodingContainer.decode(_:forKey:)();
      v32 = v5;
      v33 = v6;
      v34 = v5;
      if (v5)
      {
        v21 = v34;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v43);
        v23 = v21;
      }
      else
      {
        *(_QWORD *)(v49 + v47[5]) = v33;
        v61 = 2;
        v7 = KeyedDecodingContainer.decode(_:forKey:)();
        v27 = 0;
        v28 = v7;
        v29 = v8;
        v30 = 0;
        v9 = (uint64_t *)(v49 + v47[6]);
        v65 = 5;
        *v9 = v7;
        v9[1] = v8;
        v24 = &v56;
        v56 = 3;
        lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key and conformance GPKGroupKey.RawKey.Key();
        v10 = v27;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v25 = v10;
        v26 = v10;
        if (!v10)
        {
          v11 = v43;
          v12 = v50;
          v13 = v44;
          v14 = v58;
          v15 = v59;
          v16 = v60;
          v17 = v49 + v47[7];
          v65 = 13;
          *(_QWORD *)v17 = v57;
          *(_QWORD *)(v17 + 8) = v14;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v16;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
          outlined init with copy of GPKGroupKey.RawKey(v49, v38);
          __swift_destroy_boxed_opaque_existential_1(v46);
          return outlined destroy of GPKGroupKey.RawKey(v49);
        }
        v20 = v26;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v43);
        v23 = v20;
      }
    }
  }
  v19[1] = v23;
  result = __swift_destroy_boxed_opaque_existential_1(v46);
  if ((v65 & 1) != 0)
    result = outlined destroy of GPKGroupID(v49);
  if ((v65 & 4) != 0)
  {
    result = v49 + v47[6];
    outlined destroy of String();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroupKey.RawKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKGroupKey.RawKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroupKey.RawKey(uint64_t a1)
{
  return GPKGroupKey.RawKey.encode(to:)(a1);
}

unint64_t initializeBufferWithCopyOfBuffer for GPKGroupKey(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v7;
  uint64_t v8;
  void *v9;
  char v10;
  char *v11;
  uint64_t v12;
  int v17;

  v17 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v17 & 0x20000) != 0)
  {
    v12 = *a2;
    swift_retain();
    *a1 = v12;
    return *a1 + ((v17 + 16) & ~(unint64_t)v17);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    *(_QWORD *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v4 = a3[6];
    v7 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v8 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    v11 = (char *)a1 + a3[7];
    v5 = (char *)a2 + a3[7];
    v9 = *(void **)v5;
    v10 = v5[8];
    outlined copy of GPKGroupKey.Key(*(void **)v5);
    *(_QWORD *)v11 = v9;
    v11[8] = v10 & 1;
    return (unint64_t)a1;
  }
}

void destroy for GPKGroupKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  outlined consume of GPKGroupKey.Key(*(void **)(a1 + *(int *)(a2 + 28)));
}

uint64_t initializeWithCopy for GPKGroupKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  void *v12;
  char v13;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v7 = (_QWORD *)(a1 + a3[6]);
  *v7 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v11 = a3[7];
  v12 = *(void **)(a2 + v11);
  v13 = *(_BYTE *)(a2 + v11 + 8);
  outlined copy of GPKGroupKey.Key(v12);
  result = a1;
  v6 = a1 + v11;
  *(_QWORD *)v6 = v12;
  *(_BYTE *)(v6 + 8) = v13 & 1;
  return result;
}

uint64_t assignWithCopy for GPKGroupKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v12;
  void *v13;
  char v14;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v8 = (_QWORD *)(a1 + a3[6]);
  *v8 = *v4;
  v9 = v4[1];
  swift_bridgeObjectRetain();
  v8[1] = v9;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = *(void **)(a2 + v12);
  v14 = *(_BYTE *)(a2 + v12 + 8);
  outlined copy of GPKGroupKey.Key(v13);
  v5 = a1 + v12;
  v6 = *(void **)(a1 + v12);
  *(_QWORD *)v5 = v13;
  *(_BYTE *)(v5 + 8) = v14 & 1;
  outlined consume of GPKGroupKey.Key(v6);
  return a1;
}

__n128 initializeWithTake for GPKGroupKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  result = *(__n128 *)(a2 + a3[6]);
  *(__n128 *)(a1 + a3[6]) = result;
  v5 = a3[7];
  v6 = a1 + v5;
  *(_QWORD *)v6 = *(_QWORD *)(a2 + v5);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + v5 + 8);
  return result;
}

uint64_t assignWithTake for GPKGroupKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v5 = (_QWORD *)(a1 + a3[6]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v6 = a2 + a3[7];
  v7 = *(_QWORD *)v6;
  LOBYTE(v6) = *(_BYTE *)(v6 + 8);
  v8 = a1 + a3[7];
  v9 = *(void **)v8;
  *(_QWORD *)v8 = v7;
  *(_BYTE *)(v8 + 8) = v6 & 1;
  outlined consume of GPKGroupKey.Key(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D290DBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for GPKGroupKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D290EB8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKGroupKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for GPKGroupKey.Key(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  char v4;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of GPKGroupKey.Key(*(void **)a2);
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

void destroy for GPKGroupKey.Key(void **a1)
{
  outlined consume of GPKGroupKey.Key(*a1);
}

uint64_t initializeWithCopy for GPKGroupKey.Key(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  char v4;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of GPKGroupKey.Key(*(void **)a2);
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t assignWithCopy for GPKGroupKey.Key(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  char v5;

  v4 = *(void **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of GPKGroupKey.Key(*(void **)a2);
  v2 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5 & 1;
  outlined consume of GPKGroupKey.Key(v2);
  return a1;
}

uint64_t assignWithTake for GPKGroupKey.Key(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  outlined consume of GPKGroupKey.Key(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.Key(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 > 0xFE && *(_BYTE *)(a1 + 9))
    {
      v4 = *(_QWORD *)a1 + 254;
    }
    else
    {
      v2 = 255 - *(unsigned __int8 *)(a1 + 8);
      if (v2 >= 0xFE)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKGroupKey.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = result;
  v4 = (_BYTE *)(result + 9);
  if (a2 > 0xFE)
  {
    result = 0;
    *(_BYTE *)(v3 + 8) = 0;
    *(_QWORD *)v3 = a2 - 255;
    if (a3 >= 0xFF)
      *v4 = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *v4 = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKey.Key(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) & 1;
}

uint64_t destructiveInjectEnumTag for GPKGroupKey.Key(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKey.Key()
{
  return &type metadata for GPKGroupKey.Key;
}

unint64_t initializeBufferWithCopyOfBuffer for GPKGroupKey.RawKey(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  int v19;

  v19 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v19 & 0x20000) != 0)
  {
    v14 = *a2;
    swift_retain();
    *a1 = v14;
    return *a1 + ((v19 + 16) & ~(unint64_t)v19);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    *(_QWORD *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v4 = a3[6];
    v7 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v8 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    v12 = (char *)a1 + a3[7];
    v5 = (char *)a2 + a3[7];
    v9 = *(_QWORD *)v5;
    v10 = *((_QWORD *)v5 + 1);
    v11 = *((_QWORD *)v5 + 2);
    v13 = v5[24];
    outlined copy of GPKGroupKey.RawKey.Key(*(_QWORD *)v5, v10, v11, v13);
    *(_QWORD *)v12 = v9;
    *((_QWORD *)v12 + 1) = v10;
    *((_QWORD *)v12 + 2) = v11;
    v12[24] = v13;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPKGroupKey.RawKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  return outlined consume of GPKGroupKey.RawKey.Key(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 16), *(_BYTE *)(a1 + *(int *)(a2 + 28) + 24));
}

uint64_t initializeWithCopy for GPKGroupKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v7 = (_QWORD *)(a1 + a3[6]);
  *v7 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a2 + v11 + 8);
  v14 = *(_QWORD *)(a2 + v11 + 16);
  v15 = *(_BYTE *)(a2 + v11 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(v12, v13, v14, v15);
  result = a1;
  v6 = a1 + v11;
  *(_QWORD *)v6 = v12;
  *(_QWORD *)(v6 + 8) = v13;
  *(_QWORD *)(v6 + 16) = v14;
  *(_BYTE *)(v6 + 24) = v15;
  return result;
}

uint64_t assignWithCopy for GPKGroupKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v11 = (_QWORD *)(a1 + a3[6]);
  *v11 = *v4;
  v12 = v4[1];
  swift_bridgeObjectRetain();
  v11[1] = v12;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = *(_QWORD *)(a2 + v15);
  v17 = *(_QWORD *)(a2 + v15 + 8);
  v18 = *(_QWORD *)(a2 + v15 + 16);
  v19 = *(_BYTE *)(a2 + v15 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(v16, v17, v18, v19);
  v5 = a1 + v15;
  v6 = *(_QWORD *)(a1 + v15);
  v7 = *(_QWORD *)(a1 + v15 + 8);
  v8 = *(_QWORD *)(a1 + v15 + 16);
  v9 = *(_BYTE *)(a1 + v15 + 24);
  *(_QWORD *)v5 = v16;
  *(_QWORD *)(v5 + 8) = v17;
  *(_QWORD *)(v5 + 16) = v18;
  *(_BYTE *)(v5 + 24) = v19;
  outlined consume of GPKGroupKey.RawKey.Key(v6, v7, v8, v9);
  return a1;
}

__n128 initializeWithTake for GPKGroupKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v4 = a3[7];
  v5 = a1 + v4;
  *(_OWORD *)v5 = *(_OWORD *)(a2 + v4);
  result = *(__n128 *)(a2 + v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

uint64_t assignWithTake for GPKGroupKey.RawKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v4 = (_QWORD *)(a2 + a3[6]);
  v5 = (_QWORD *)(a1 + a3[6]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a2 + a3[7]);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  LOBYTE(v6) = *((_BYTE *)v6 + 24);
  v10 = a1 + a3[7];
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_BYTE *)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(v10 + 16) = v9;
  *(_BYTE *)(v10 + 24) = (_BYTE)v6;
  outlined consume of GPKGroupKey.RawKey.Key(v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.RawKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D291A68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for GPKGroupKey.RawKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D291B64(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GPKGroupKey.RawKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for GPKGroupKey.RawKey.Key(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GPKGroupKey.RawKey.Key(uint64_t a1)
{
  return outlined consume of GPKGroupKey.RawKey.Key(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for GPKGroupKey.RawKey.Key(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(*(_QWORD *)a2, v4, v5, v6);
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return result;
}

uint64_t assignWithCopy for GPKGroupKey.RawKey.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_BYTE *)(a2 + 24);
  outlined copy of GPKGroupKey.RawKey.Key(*(_QWORD *)a2, v8, v9, v10);
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = v10;
  outlined consume of GPKGroupKey.RawKey.Key(v2, v3, v4, v5);
  return a1;
}

uint64_t assignWithTake for GPKGroupKey.RawKey.Key(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of GPKGroupKey.RawKey.Key(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.RawKey.Key(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0x1FF && *(_BYTE *)(a1 + 25))
    {
      v4 = *(_DWORD *)a1 + 510;
    }
    else
    {
      v2 = ~((2 * ((*(_QWORD *)(a1 + 16) >> 60) & 3 | (4 * (*(_BYTE *)(a1 + 24) >> 1)))) | ((2
                                                                                           * *(unsigned __int8 *)(a1 + 24)) >> 8) & 1) & 0x1FF;
      if (v2 >= 0x1FE)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKGroupKey.RawKey.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 25);
  if (a2 > 0x1FE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 511;
    if (a3 >= 0x1FF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x1FF)
      *v3 = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)((-a2 >> 1) & 3) << 60;
      *(_BYTE *)(result + 24) = (((-a2 >> 1) - (a2 << 8)) >> 1) & 0xFE;
    }
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKey.RawKey.Key(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) >> 7) & 1;
}

uint64_t destructiveProjectEnumData for GPKGroupKey.RawKey.Key(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  v3 = *(_BYTE *)(result + 24) & 0x7F;
  *(_QWORD *)result = *(_QWORD *)result;
  *(_QWORD *)(result + 8) = v1;
  *(_QWORD *)(result + 16) = v2;
  *(_BYTE *)(result + 24) = v3;
  return result;
}

uint64_t destructiveInjectEnumTag for GPKGroupKey.RawKey.Key(uint64_t result, char a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_BYTE *)(result + 24) & 1;
  *(_QWORD *)result = *(_QWORD *)result;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = ((a2 & 1) << 7) | v4;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKey.RawKey.Key()
{
  return &type metadata for GPKGroupKey.RawKey.Key;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.RawKey.Key.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKey.RawKey.Key.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKey.RawKey.Key.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKGroupKey.RawKey.Key.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKey.RawKey.Key.CodingKeys()
{
  return &type metadata for GPKGroupKey.RawKey.Key.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.RawKey.Key.LatestCodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKey.RawKey.Key.LatestCodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return &type metadata for GPKGroupKey.RawKey.Key.LatestCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.RawKey.Key.HistoricalCodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKey.RawKey.Key.HistoricalCodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return &type metadata for GPKGroupKey.RawKey.Key.HistoricalCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKGroupKey.RawKey.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKGroupKey.RawKey.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for GPKGroupKey.RawKey.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKGroupKey.RawKey.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKGroupKey.RawKey.CodingKeys()
{
  return &type metadata for GPKGroupKey.RawKey.CodingKeys;
}

uint64_t type metadata accessor for PCSIdentitySetRef()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for PCSIdentitySetRef;
  if (!lazy cache variable for type metadata for PCSIdentitySetRef)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for PCSIdentitySetRef);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKey.RawKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKey.RawKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKGroupKey.RawKey.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.CodingKeys and conformance GPKGroupKey.RawKey.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKGroupKey.RawKey.Key.LatestCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.LatestCodingKeys and conformance GPKGroupKey.RawKey.Key.LatestCodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKGroupKey.RawKey.Key.HistoricalCodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.HistoricalCodingKeys and conformance GPKGroupKey.RawKey.Key.HistoricalCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKGroupKey.RawKey.Key.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKGroupKey.RawKey.Key.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKGroupKey.RawKey.Key.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKGroupKey.RawKey.Key.CodingKeys and conformance GPKGroupKey.RawKey.Key.CodingKeys();
}

uint64_t GPKGroupManager.fetchGroupKey(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  type metadata accessor for GPKGroupKeyRequest();
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t GPKGroupManager.fetchGroupKey(with:)()
{
  _QWORD *v0;
  char **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v6 = v0[8];
  v7 = v0[7];
  v5 = v0[6];
  v0[2] = v0;
  v1 = StaticString.fetchGroupKey.unsafeMutableAddressor();
  v12 = (uint64_t)*v1;
  v9 = (uint64_t)v1[1];
  v10 = *((_BYTE *)v1 + 16);
  outlined init with copy of GPKGroupKeyRequest(v5, v6);
  swift_retain();
  v11 = swift_task_alloc();
  v0[9] = v11;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v7;
  v2 = (_QWORD *)swift_task_alloc();
  v8[10] = v2;
  v3 = type metadata accessor for GPKGroupKey();
  *v2 = v8[2];
  v2[1] = GPKGroupManager.fetchGroupKey(with:);
  return signpost<A>(_:_:)(v8[5], v12, v9, v10, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.fetchGroupKey(with:), v11, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  outlined destroy of GPKGroupKeyRequest(v2);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *GPKGroupManager.fetchGroupKey(with:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v5 = v2 + 16;
  v6 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  v4 = *(_QWORD *)(v5 + 48);
  swift_task_dealloc();
  outlined destroy of GPKGroupKeyRequest(v4);
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
}

uint64_t closure #1 in GPKGroupManager.fetchGroupKey(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[12] = a3;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  type metadata accessor for GPKGroupKey.RawKey();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  type metadata accessor for GPKGroupKeyRequest();
  v3[15] = swift_task_alloc();
  v3[16] = type metadata accessor for FetchGroupKeyXPCMessage();
  v3[17] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.fetchGroupKey(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t GroupKeyXPCMessage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);

  v6 = v0[17];
  v1 = v0[15];
  v7 = v1;
  v8 = v0[12];
  v2 = v0[11];
  v0[7] = v0;
  outlined init with copy of GPKGroupKeyRequest(v2, v1);
  FetchGroupKeyXPCMessage.init(request:)(v7, v6);
  outlined init with copy of MessageSenderProtocol(v8 + 16, (uint64_t)(v0 + 2));
  v10 = v0[5];
  v11 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v10);
  v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8)
                                                                                           + **(int **)(v11 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  v9[18] = v3;
  GroupKeyXPCMessage = lazy protocol witness table accessor for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage();
  *v3 = v9[7];
  v3[1] = closure #1 in GPKGroupManager.fetchGroupKey(with:);
  return v12(v9[14], v9[17], v9[16], GroupKeyXPCMessage, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v1 = v0[19];
  v8 = v0[14];
  v10 = v0[13];
  v2 = v0[12];
  v9 = v0[10];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v3 = outlined init with copy of GPKGroupKey.RawKey(v8, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v3);
  GPKGroupKey.init(rawKey:keyConverter:)(v10, v11, v9);
  if (v1)
  {
    v5 = v7[17];
    outlined destroy of GPKGroupKey.RawKey(v7[14]);
    outlined destroy of FetchGroupKeyXPCMessage(v5);
  }
  else
  {
    v6 = v7[17];
    outlined destroy of GPKGroupKey.RawKey(v7[14]);
    outlined destroy of FetchGroupKeyXPCMessage(v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v7[7] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of FetchGroupKeyXPCMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.fetchGroupKey(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.fetchGroupKey(with:);
  return closure #1 in GPKGroupManager.fetchGroupKey(with:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in GPKGroupManager.fetchGroupKey(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t GPKGroupManager.fetchMemberStableKey(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  type metadata accessor for GPKMemberKeyRequest();
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t GPKGroupManager.fetchMemberStableKey(with:)()
{
  _QWORD *v0;
  char **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v6 = v0[8];
  v7 = v0[7];
  v5 = v0[6];
  v0[2] = v0;
  v1 = StaticString.fetchMemberStableKey.unsafeMutableAddressor();
  v12 = (uint64_t)*v1;
  v9 = (uint64_t)v1[1];
  v10 = *((_BYTE *)v1 + 16);
  outlined init with copy of GPKMemberKeyRequest(v5, v6);
  swift_retain();
  v11 = swift_task_alloc();
  v0[9] = v11;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v7;
  v2 = (_QWORD *)swift_task_alloc();
  v8[10] = v2;
  v3 = type metadata accessor for GPKMemberKey();
  *v2 = v8[2];
  v2[1] = GPKGroupManager.fetchMemberStableKey(with:);
  return signpost<A>(_:_:)(v8[5], v12, v9, v10, (uint64_t)&async function pointer to partial apply for closure #1 in GPKGroupManager.fetchMemberStableKey(with:), v11, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  outlined destroy of GPKMemberKeyRequest(v2);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *GPKGroupManager.fetchMemberStableKey(with:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v5 = v2 + 16;
  v6 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  v4 = *(_QWORD *)(v5 + 48);
  swift_task_dealloc();
  outlined destroy of GPKMemberKeyRequest(v4);
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
}

uint64_t closure #1 in GPKGroupManager.fetchMemberStableKey(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[12] = a3;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  type metadata accessor for GPKMemberKey.RawKey();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  type metadata accessor for GPKMemberKeyRequest();
  v3[15] = swift_task_alloc();
  v3[16] = type metadata accessor for FetchMemberKeyXPCMessage();
  v3[17] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in GPKGroupManager.fetchMemberStableKey(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t MemberKeyXPCMessage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);

  v6 = v0[17];
  v1 = v0[15];
  v7 = v1;
  v8 = v0[12];
  v2 = v0[11];
  v0[7] = v0;
  outlined init with copy of GPKMemberKeyRequest(v2, v1);
  FetchMemberKeyXPCMessage.init(request:)(v7, v6);
  outlined init with copy of MessageSenderProtocol(v8 + 16, (uint64_t)(v0 + 2));
  v10 = v0[5];
  v11 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v10);
  v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8)
                                                                                           + **(int **)(v11 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  v9[18] = v3;
  MemberKeyXPCMessage = lazy protocol witness table accessor for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage();
  *v3 = v9[7];
  v3[1] = closure #1 in GPKGroupManager.fetchMemberStableKey(with:);
  return v12(v9[14], v9[17], v9[16], MemberKeyXPCMessage, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v1 = v0[19];
  v8 = v0[14];
  v10 = v0[13];
  v2 = v0[12];
  v9 = v0[10];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v3 = outlined init with copy of GPKMemberKey.RawKey(v8, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v3);
  GPKMemberKey.init(rawKey:keyConverter:)(v10, v11, v9);
  if (v1)
  {
    v5 = v7[17];
    outlined destroy of GPKMemberKey.RawKey(v7[14]);
    outlined destroy of FetchMemberKeyXPCMessage(v5);
  }
  else
  {
    v6 = v7[17];
    outlined destroy of GPKMemberKey.RawKey(v7[14]);
    outlined destroy of FetchMemberKeyXPCMessage(v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v7[7] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of FetchMemberKeyXPCMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t partial apply for closure #1 in GPKGroupManager.fetchMemberStableKey(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GPKGroupManager.fetchMemberStableKey(with:);
  return closure #1 in GPKGroupManager.fetchMemberStableKey(with:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in GPKGroupManager.fetchMemberStableKey(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t one-time initialization function for defaultAssociatedData()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.groupkit.internal.encryption.associateddata.default", 0x37uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.defaultAssociatedData = result;
  qword_256C53790 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    v0 = MEMORY[0x2426331CC](MEMORY[0x24BEE0C58], MEMORY[0x24BEE0C50]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
    return v0;
  }
  return v2;
}

uint64_t *GPKConstant.defaultAssociatedData.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultAssociatedData != -1)
    swift_once();
  return &static GPKConstant.defaultAssociatedData;
}

uint64_t static GPKConstant.defaultAssociatedData.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v0 = GPKConstant.defaultAssociatedData.unsafeMutableAddressor();
  v2 = *v0;
  outlined copy of Data._Representation(*v0, v0[1]);
  return v2;
}

uint64_t one-time initialization function for defaultEntitlmentID()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.groupkit.internal.encryption.entitlement.default", 0x34uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.defaultEntitlmentID = result;
  qword_256C537A8 = v2;
  return result;
}

uint64_t *GPKConstant.defaultEntitlmentID.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultEntitlmentID != -1)
    swift_once();
  return &static GPKConstant.defaultEntitlmentID;
}

uint64_t static GPKConstant.defaultEntitlmentID.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v0 = GPKConstant.defaultEntitlmentID.unsafeMutableAddressor();
  v2 = *v0;
  outlined copy of Data._Representation(*v0, v0[1]);
  return v2;
}

uint64_t one-time initialization function for defaultKeyDiversifier()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.groupkit.internal.encryption.metadata.default", 0x31uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.defaultKeyDiversifier = result;
  qword_256C537C0 = v2;
  return result;
}

uint64_t *GPKConstant.defaultKeyDiversifier.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultKeyDiversifier != -1)
    swift_once();
  return &static GPKConstant.defaultKeyDiversifier;
}

uint64_t static GPKConstant.defaultKeyDiversifier.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v0 = GPKConstant.defaultKeyDiversifier.unsafeMutableAddressor();
  v2 = *v0;
  outlined copy of Data._Representation(*v0, v0[1]);
  return v2;
}

uint64_t one-time initialization function for internalEntitlementID()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.internal", 0x1BuLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.internalEntitlementID = result;
  qword_256C537D8 = v2;
  return result;
}

uint64_t *GPKConstant.internalEntitlementID.unsafeMutableAddressor()
{
  if (one-time initialization token for internalEntitlementID != -1)
    swift_once();
  return &static GPKConstant.internalEntitlementID;
}

uint64_t static GPKConstant.internalEntitlementID.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v0 = GPKConstant.internalEntitlementID.unsafeMutableAddressor();
  v2 = *v0;
  outlined copy of Data._Representation(*v0, v0[1]);
  return v2;
}

uint64_t one-time initialization function for metadataEncryptionDiversifier()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.internal.metadataEncryption", 0x2EuLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.metadataEncryptionDiversifier = result;
  qword_256C537F0 = v2;
  return result;
}

uint64_t *GPKConstant.metadataEncryptionDiversifier.unsafeMutableAddressor()
{
  if (one-time initialization token for metadataEncryptionDiversifier != -1)
    swift_once();
  return &static GPKConstant.metadataEncryptionDiversifier;
}

uint64_t static GPKConstant.metadataEncryptionDiversifier.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v0 = GPKConstant.metadataEncryptionDiversifier.unsafeMutableAddressor();
  v2 = *v0;
  outlined copy of Data._Representation(*v0, v0[1]);
  return v2;
}

uint64_t one-time initialization function for metadataFetchRequestDiversifier()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.internal.metadataFetchRequest", 0x30uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.metadataFetchRequestDiversifier = result;
  qword_256C53808 = v2;
  return result;
}

uint64_t *GPKConstant.metadataFetchRequestDiversifier.unsafeMutableAddressor()
{
  if (one-time initialization token for metadataFetchRequestDiversifier != -1)
    swift_once();
  return &static GPKConstant.metadataFetchRequestDiversifier;
}

uint64_t static GPKConstant.metadataFetchRequestDiversifier.getter()
{
  uint64_t *Request;
  uint64_t v2;

  Request = GPKConstant.metadataFetchRequestDiversifier.unsafeMutableAddressor();
  v2 = *Request;
  outlined copy of Data._Representation(*Request, Request[1]);
  return v2;
}

uint64_t one-time initialization function for metadataUpdateRequestDiversifier()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.internal.metadataUpdateRequest", 0x31uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.metadataUpdateRequestDiversifier = result;
  qword_256C53820 = v2;
  return result;
}

uint64_t *GPKConstant.metadataUpdateRequestDiversifier.unsafeMutableAddressor()
{
  if (one-time initialization token for metadataUpdateRequestDiversifier != -1)
    swift_once();
  return &static GPKConstant.metadataUpdateRequestDiversifier;
}

uint64_t static GPKConstant.metadataUpdateRequestDiversifier.getter()
{
  uint64_t *updated;
  uint64_t v2;

  updated = GPKConstant.metadataUpdateRequestDiversifier.unsafeMutableAddressor();
  v2 = *updated;
  outlined copy of Data._Representation(*updated, updated[1]);
  return v2;
}

uint64_t one-time initialization function for metadataGroupCreateRequestDiversifier()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.internal.groupCreate.metadataUpdate", 0x36uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.metadataGroupCreateRequestDiversifier = result;
  qword_256C53838 = v2;
  return result;
}

uint64_t *GPKConstant.metadataGroupCreateRequestDiversifier.unsafeMutableAddressor()
{
  if (one-time initialization token for metadataGroupCreateRequestDiversifier != -1)
    swift_once();
  return &static GPKConstant.metadataGroupCreateRequestDiversifier;
}

uint64_t static GPKConstant.metadataGroupCreateRequestDiversifier.getter()
{
  uint64_t *Request;
  uint64_t v2;

  Request = GPKConstant.metadataGroupCreateRequestDiversifier.unsafeMutableAddressor();
  v2 = *Request;
  outlined copy of Data._Representation(*Request, Request[1]);
  return v2;
}

uint64_t one-time initialization function for metadataGroupUpdateRequestDiversifier()
{
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v2;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.internal.groupUpdate.metadataUpdate", 0x36uLL, 1)._countAndFlagsBits;
  MEMORY[0x242632620](countAndFlagsBits);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  result = Data.init<A>(_:)();
  static GPKConstant.metadataGroupUpdateRequestDiversifier = result;
  qword_256C53850 = v2;
  return result;
}

uint64_t *GPKConstant.metadataGroupUpdateRequestDiversifier.unsafeMutableAddressor()
{
  if (one-time initialization token for metadataGroupUpdateRequestDiversifier != -1)
    swift_once();
  return &static GPKConstant.metadataGroupUpdateRequestDiversifier;
}

uint64_t static GPKConstant.metadataGroupUpdateRequestDiversifier.getter()
{
  uint64_t *updated;
  uint64_t v2;

  updated = GPKConstant.metadataGroupUpdateRequestDiversifier.unsafeMutableAddressor();
  v2 = *updated;
  outlined copy of Data._Representation(*updated, updated[1]);
  return v2;
}

void *GPKConstant.metadataProtocolVersion.unsafeMutableAddressor()
{
  return &static GPKConstant.metadataProtocolVersion;
}

uint64_t static GPKConstant.metadataProtocolVersion.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for GPKConstant()
{
  return &type metadata for GPKConstant;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GPKGroup.acceptInvite()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v13 = (char *)&v4 - v12;
  v17 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))() & 1) != 0)
  {
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 736))();
    if (v10)
    {
      v9 = v10;
      v8 = v10;
      v14 = 2;
      GPKMember.setInviteStatus(_:)((GroupKit::GPKMember::InviteStatus)&v14);
      swift_release();
    }
    v15 = 1;
    (*(void (**)(char *))(*(_QWORD *)v11 + 440))(&v15);
    v2 = v11;
    v7 = 0;
    v3 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v13, 1);
    (*(void (**)(char *))(*(_QWORD *)v2 + 488))(v13);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 512))(v7, 0xF000000000000000);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 696))(v7);
  }
  else
  {
    v5 = 0;
    type metadata accessor for InternalError();
    v16 = 11;
    v6 = InternalError.__allocating_init(_:internalInfo:)(&v16, v5);
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GPKGroup.declineInvite()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  char v6;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char v21;
  _BYTE v22[38];
  char v23;
  char v24;
  uint64_t v25;

  v25 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v19 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v20 = (char *)&v8 - v19;
  v25 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))() & 1) != 0)
  {
    v17 = (*(uint64_t (**)(void))(*(_QWORD *)v18 + 736))();
    if (v17)
    {
      v16 = v17;
      v15 = v17;
      v21 = 3;
      GPKMember.setInviteStatus(_:)((GroupKit::GPKMember::InviteStatus)&v21);
      swift_release();
    }
    v23 = 2;
    (*(void (**)(char *))(*(_QWORD *)v18 + 440))(&v23);
    v2 = v18;
    v11 = 0;
    v3 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v20, 1);
    (*(void (**)(char *))(*(_QWORD *)v2 + 488))(v20);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 512))(v11, 0xF000000000000000);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 696))(v11);
    v12 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 544))(v22);
    v13 = v4;
    v5 = __OFADD__(*v4, 1);
    v14 = *v4 + 1;
    v6 = v5;
    if ((v6 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v7 = (void (*)(_BYTE *, _QWORD))v12;
      *v13 = v14;
      v7(v22, 0);
    }
  }
  else
  {
    v9 = 0;
    type metadata accessor for InternalError();
    v24 = 12;
    v10 = InternalError.__allocating_init(_:internalInfo:)(&v24, v9);
    swift_willThrow();
  }
}

uint64_t GPKGroup.setGroupID(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1;
  v8 = 0;
  v7 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (char *)&v3 - v5;
  v8 = MEMORY[0x24BDAC7A8](v4);
  v7 = v1;
  outlined init with copy of GPKGroupID(v8, (uint64_t)&v3 - v5);
  return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 320))(v6);
}

uint64_t GPKGroup.setCreationDate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v6[1] = a1;
  v10 = 0;
  v9 = 0;
  v2 = type metadata accessor for Date();
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v8 = (char *)v6 - v7;
  v10 = v3;
  v9 = v1;
  (*(void (**)(void))(v4 + 16))();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 368))(v8);
}

uint64_t GPKGroup.setLastModifiedDate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v6[1] = a1;
  v10 = 0;
  v9 = 0;
  v2 = type metadata accessor for Date();
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v8 = (char *)v6 - v7;
  v10 = v3;
  v9 = v1;
  (*(void (**)(void))(v4 + 16))();
  return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 392))(v8);
}

Swift::Void __swiftcall GPKGroup.setVersion(_:)(Swift::Int64 a1)
{
  uint64_t v1;

  (*(void (**)(Swift::Int64))(*(_QWORD *)v1 + 416))(a1);
}

Swift::Void __swiftcall GPKGroup.setGroupDomain(_:)(Swift::String a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v1 + 296))(a1._countAndFlagsBits, a1._object);
}

Swift::Void __swiftcall GPKGroup.setJoinState(_:)(GroupKit::GPKGroup::JoinState a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;

  v4 = 0;
  v3 = 0;
  v4 = *(_BYTE *)a1;
  v3 = v1;
  v2 = v4;
  (*(void (**)(char *))(*(_QWORD *)v1 + 440))(&v2);
}

Swift::Void __swiftcall GPKGroup.setMembers(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  (*(void (**)(void *))(*(_QWORD *)v1 + 344))(a1._rawValue);
}

uint64_t GPKGroup.setGroupMode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 464))(a1, a2);
}

Swift::Void __swiftcall GPKGroup.setLastKnownRSVPQueueSeqNumber(_:)(Swift::Int64 a1)
{
  uint64_t v1;

  (*(void (**)(Swift::Int64))(*(_QWORD *)v1 + 536))(a1);
}

uint64_t GPKGroup.subtractingMembers(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = v1;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 336))();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v7 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GPKGroup.subtractingMembers(from:), 0, v5, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v6);
  outlined destroy of [GPKMember]();
  (*(void (**)(uint64_t *))(*(_QWORD *)a1 + 336))(&v8);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GPKGroup.subtractingMembers(from:), 0, v5, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v6);
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Set.init<A>(_:)();
  Set.subtracting<A>(_:)();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  type metadata accessor for GPKMember();
  lazy protocol witness table accessor for type Set<String> and conformance Set<A>();
  v3 = Sequence.compactMap<A>(_:)();
  swift_release();
  outlined destroy of Set<String>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t closure #1 in GPKGroup.subtractingMembers(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t closure #2 in GPKGroup.subtractingMembers(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t *closure #3 in GPKGroup.subtractingMembers(from:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  v3 = a1[1];
  v7 = *a1;
  v8 = v3;
  v6 = a2;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 336))();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  result = (uint64_t *)Sequence.first(where:)();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    result = &v5;
    outlined destroy of [GPKMember]();
  }
  return result;
}

uint64_t *partial apply for closure #3 in GPKGroup.subtractingMembers(from:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #3 in GPKGroup.subtractingMembers(from:)(a1, v1);
}

unint64_t lazy protocol witness table accessor for type Set<String> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<String> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE1718], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance Set<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<String>()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #3 in GPKGroup.subtractingMembers(from:)(uint64_t a1)
{
  char v2;

  (*(void (**)(void))(**(_QWORD **)a1 + 160))();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t GPKGroup.memberWithUserID(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v4 = a1[1];
  v3 = *a1;
  (*(void (**)(void))(*(_QWORD *)v1 + 336))();
  outlined copy of Data._Representation(v3, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Sequence.first(where:)();
  outlined consume of Data._Representation(v3, v4);
  outlined destroy of [GPKMember]();
  return v5;
}

uint64_t closure #1 in GPKGroup.memberWithUserID(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  v18 = 0;
  v16 = 0;
  v17 = 0;
  v18 = *a1;
  v16 = a2;
  v17 = a3;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 304))(&v14);
  v6 = v14;
  v7 = v15;
  outlined copy of GPKUserID?(v14, v15);
  outlined copy of Data._Representation(v8, *((unint64_t *)&v8 + 1));
  outlined copy of GPKUserID?(v8, *((unint64_t *)&v8 + 1));
  v12[0] = v6;
  v12[1] = v7;
  v13 = v8;
  if ((v7 & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*((_QWORD *)&v13 + 1) & 0xF000000000000000) == 0xF000000000000000)
    {
      outlined destroy of GPKUserID?((uint64_t)v12);
      v5 = 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  outlined init with copy of GPKUserID?(v12, (uint64_t)&v11);
  if ((*((_QWORD *)&v13 + 1) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of GPKUserID((uint64_t)&v11);
LABEL_8:
    outlined destroy of (GPKUserID?, GPKUserID?)((uint64_t)v12);
    v5 = 0;
    goto LABEL_7;
  }
  v10 = v11;
  v9 = v13;
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of GPKUserID((uint64_t)&v9);
  outlined destroy of GPKUserID((uint64_t)&v10);
  outlined destroy of GPKUserID?((uint64_t)v12);
  v5 = v4;
LABEL_7:
  outlined consume of GPKUserID?(v8, *((unint64_t *)&v8 + 1));
  outlined consume of GPKUserID?(v6, v7);
  return v5 & 1;
}

uint64_t partial apply for closure #1 in GPKGroup.memberWithUserID(_:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in GPKGroup.memberWithUserID(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t outlined destroy of (GPKUserID?, GPKUserID?)(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t partial apply for closure #1 in closure #3 in GPKGroup.subtractingMembers(from:)(uint64_t a1)
{
  return closure #1 in closure #3 in GPKGroup.subtractingMembers(from:)(a1) & 1;
}

uint64_t key path getter for GPKFetchGroupsRequest.joinState : GPKFetchGroupsRequest@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v2 = swift_retain();
  v7 = v4;
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v4 + 120))(&v6, v2);
  *a2 = v6;
  return swift_release();
}

uint64_t key path setter for GPKFetchGroupsRequest.joinState : GPKFetchGroupsRequest(char *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v3 = *a2;
  swift_retain();
  v6 = v3;
  v5 = v4;
  (*(void (**)(char *))(*(_QWORD *)v3 + 128))(&v5);
  return swift_release();
}

uint64_t GPKFetchGroupsRequest.joinState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 16);
  result = swift_endAccess();
  *a1 = v4;
  return result;
}

uint64_t GPKFetchGroupsRequest.joinState.setter(char *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v3;
  return swift_endAccess();
}

uint64_t (*GPKFetchGroupsRequest.joinState.modify())()
{
  swift_beginAccess();
  return GPKFetchGroupsRequest.joinState.modify;
}

uint64_t GPKFetchGroupsRequest.joinState.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKFetchGroupsRequest.groupID : GPKFetchGroupsRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  v5 = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v4 - v6;
  v7 = *(_QWORD *)MEMORY[0x24BDAC7A8](v5);
  v2 = swift_retain();
  v11 = v7;
  v10 = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v2);
  outlined init with take of GPKGroupID?(v8, v9);
  return swift_release();
}

uint64_t key path setter for GPKFetchGroupsRequest.groupID : GPKFetchGroupsRequest(uint64_t a1, uint64_t *a2)
{
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1;
  v7 = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (const void *)MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v4 - v6;
  outlined init with copy of GPKGroupID?(v2, (char *)&v4 - v6);
  v9 = *v7;
  swift_retain();
  v11 = v9;
  v10 = v9;
  (*(void (**)(char *))(*(_QWORD *)v9 + 152))(v8);
  return swift_release();
}

uint64_t GPKFetchGroupsRequest.groupID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;

  v3 = (const void *)(v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID);
  swift_beginAccess();
  outlined init with copy of GPKGroupID?(v3, a1);
  return swift_endAccess();
}

void *outlined init with copy of GPKGroupID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for GPKGroupID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v8 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  return a2;
}

uint64_t GPKFetchGroupsRequest.groupID.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  const void *v10;

  v7 = a1;
  v10 = 0;
  v9 = 0;
  v3 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (char *)&v3 - v3;
  v10 = (const void *)MEMORY[0x24BDAC7A8](v7);
  v9 = v1;
  outlined init with copy of GPKGroupID?(v10, (char *)&v3 - v3);
  v5 = (void *)(v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID);
  v6 = &v8;
  swift_beginAccess();
  outlined assign with take of GPKGroupID?(v4, v5);
  swift_endAccess();
  return outlined destroy of GPKGroupID?(v7);
}

void *outlined assign with take of GPKGroupID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (((unsigned int (*)(void *, uint64_t))v11)(a2, 1))
  {
    if (v11(a1, 1, v9))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v4 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *))(*(_QWORD *)(v4 - 8) + 32))(a2, a1);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
    }
  }
  else if (v11(a1, 1, v9))
  {
    outlined destroy of GPKGroupID((uint64_t)a2);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 40))(a2, a1);
  }
  return a2;
}

uint64_t (*GPKFetchGroupsRequest.groupID.modify())()
{
  swift_beginAccess();
  return GPKFetchGroupsRequest.groupID.modify;
}

uint64_t GPKFetchGroupsRequest.groupID.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKFetchGroupsRequest.groupMode : GPKFetchGroupsRequest@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 168))(v2);
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return swift_release();
}

uint64_t key path setter for GPKFetchGroupsRequest.groupMode : GPKFetchGroupsRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 176))(v3, v5 & 1);
  return swift_release();
}

uint64_t GPKFetchGroupsRequest.groupMode.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupMode);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GPKFetchGroupsRequest.groupMode.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v6;

  v6 = v2 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupMode;
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return swift_endAccess();
}

uint64_t (*GPKFetchGroupsRequest.groupMode.modify())()
{
  swift_beginAccess();
  return GPKFetchGroupsRequest.groupMode.modify;
}

uint64_t GPKFetchGroupsRequest.groupMode.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKFetchGroupsRequest.groupDomain : GPKFetchGroupsRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 192))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKFetchGroupsRequest.groupDomain : GPKFetchGroupsRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 200))(v4, v6);
  return swift_release();
}

uint64_t GPKFetchGroupsRequest.groupDomain.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupDomain);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t GPKFetchGroupsRequest.groupDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_bridgeObjectRetain();
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupDomain);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKFetchGroupsRequest.groupDomain.modify())()
{
  swift_beginAccess();
  return GPKFetchGroupsRequest.groupDomain.modify;
}

uint64_t GPKFetchGroupsRequest.groupDomain.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for GPKFetchGroupsRequest.serviceName : GPKFetchGroupsRequest@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for GPKFetchGroupsRequest.serviceName : GPKFetchGroupsRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 224))(v4, v6);
  return swift_release();
}

uint64_t GPKFetchGroupsRequest.serviceName.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_serviceName);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t GPKFetchGroupsRequest.serviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_bridgeObjectRetain();
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_serviceName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*GPKFetchGroupsRequest.serviceName.modify())()
{
  swift_beginAccess();
  return GPKFetchGroupsRequest.serviceName.modify;
}

uint64_t GPKFetchGroupsRequest.serviceName.modify()
{
  return swift_endAccess();
}

uint64_t GPKFetchGroupsRequest.__allocating_init()()
{
  swift_allocObject();
  return GPKFetchGroupsRequest.init()();
}

uint64_t GPKFetchGroupsRequest.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v0 + 16) = 6;
  v6 = OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID;
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0 + v6, 1);
  result = v7;
  v3 = v7 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupMode;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = (_QWORD *)(v7 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupDomain);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v7 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_serviceName);
  *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t GPKFetchGroupsRequest.__allocating_init(groupID:)(uint64_t a1)
{
  swift_allocObject();
  return GPKFetchGroupsRequest.init(groupID:)(a1);
}

uint64_t GPKFetchGroupsRequest.init(groupID:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a1;
  v22 = 0;
  v21 = 0;
  v9 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = (char *)&v9 - v9;
  v22 = MEMORY[0x24BDAC7A8](v18);
  v21 = v1;
  *(_BYTE *)(v1 + 16) = 6;
  v14 = &unk_256C57000;
  v10 = OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID;
  v12 = type metadata accessor for GPKGroupID();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v11 = 1;
  v13(v1 + v10, 1);
  v2 = v11;
  v3 = (uint64_t)v15;
  v4 = v18;
  v5 = v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupMode;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = v2 & 1;
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupDomain);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_serviceName);
  *v7 = 0;
  v7[1] = 0;
  outlined init with copy of GPKGroupID(v4, v3);
  ((void (*)(char *, _QWORD, _QWORD, uint64_t))v13)(v15, 0, v11, v12);
  v16 = (void *)(v1 + v14[490]);
  v17 = &v20;
  swift_beginAccess();
  outlined assign with take of GPKGroupID?(v15, v16);
  swift_endAccess();
  outlined destroy of GPKGroupID(v18);
  return v19;
}

void static GPKFetchGroupsRequest.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D297840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D297898
                                                                                       + *((int *)qword_23D297910 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D2978A8()
{
  uint64_t v1;

  return v1 == 0;
}

void GPKFetchGroupsRequest.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D297974()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKFetchGroupsRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("joinState", 9uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMode", 9uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDomain", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("serviceName", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t GPKFetchGroupsRequest.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t GPKFetchGroupsRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest.CodingKeys, &type metadata for GPKFetchGroupsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest.CodingKeys, &type metadata for GPKFetchGroupsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest.CodingKeys, &type metadata for GPKFetchGroupsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest.CodingKeys, &type metadata for GPKFetchGroupsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKFetchGroupsRequest.CodingKeys, &type metadata for GPKFetchGroupsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKFetchGroupsRequest.CodingKeys.intValue.getter()
{
  return 0;
}

void GPKFetchGroupsRequest.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D297E84()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("joinState", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GPKFetchGroupsRequest.CodingKeys(char *a1)
{
  char v1;

  static GPKFetchGroupsRequest.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKFetchGroupsRequest.CodingKeys()
{
  return GPKFetchGroupsRequest.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance GPKFetchGroupsRequest.CodingKeys(uint64_t a1)
{
  char *v1;

  GPKFetchGroupsRequest.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKFetchGroupsRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance GPKFetchGroupsRequest.CodingKeys()
{
  char *v0;

  GPKFetchGroupsRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKFetchGroupsRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKFetchGroupsRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKFetchGroupsRequest.CodingKeys()
{
  return GPKFetchGroupsRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKFetchGroupsRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKFetchGroupsRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKFetchGroupsRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKFetchGroupsRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKFetchGroupsRequest.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of GPKGroupID?(v0 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID);
  outlined destroy of String?();
  outlined destroy of String?();
  return v2;
}

uint64_t GPKFetchGroupsRequest.__deallocating_deinit()
{
  GPKFetchGroupsRequest.deinit();
  return swift_deallocClassInstance();
}

uint64_t GPKFetchGroupsRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;

  v42 = a1;
  v65 = 0;
  v64 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  v40 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v41 = (uint64_t)v21 - v40;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKFetchGroupsRequest.CodingKeys>);
  v43 = *(_QWORD *)(v50 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v42);
  v48 = (char *)v21 - v44;
  v65 = v3;
  v64 = v1;
  v45 = v3[3];
  v46 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v45);
  lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
  v4 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v47 + 120))(&v63, v4);
  v52 = &v62;
  v62 = v63;
  v49 = &v61;
  v61 = 0;
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v5 = v51;
  v6 = KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v53 = v5;
  v54 = v5;
  if (v5)
  {
    v24 = v54;
    result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v48, v50);
    v25 = v24;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 144))(v6);
    v36 = &v60;
    v60 = 1;
    v37 = type metadata accessor for GPKGroupID();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v7 = v53;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v38 = v7;
    v39 = v7;
    if (v7)
    {
      v23 = v39;
      outlined destroy of GPKGroupID?(v41);
      result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v48, v50);
      v25 = v23;
    }
    else
    {
      v8 = v47;
      v9 = outlined destroy of GPKGroupID?(v41);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 168))(v9);
      v33 = &v58;
      v58 = v10;
      v59 = v11 & 1;
      v32 = &v57;
      v57 = 2;
      lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
      v12 = v38;
      v13 = KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v34 = v12;
      v35 = v12;
      if (v12)
      {
        v22 = v35;
        result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v48, v50);
        v25 = v22;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 192))(v13);
        v14 = v34;
        v29 = v15;
        v56 = 3;
        KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
        v30 = v14;
        v31 = v14;
        if (v14)
        {
          v21[1] = v31;
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v48, v50);
        }
        else
        {
          v16 = v47;
          v17 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 216))(v17);
          v18 = v30;
          v26 = v19;
          v55 = 4;
          KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
          v27 = v18;
          v28 = v18;
          if (v18)
            v21[0] = v28;
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v48, v50);
        }
      }
    }
  }
  return result;
}

uint64_t GPKFetchGroupsRequest.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = GPKFetchGroupsRequest.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t GPKFetchGroupsRequest.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  char v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[32];
  _BYTE v84[32];
  char v85;
  char v86;
  uint64_t v87;
  unsigned __int8 v88;
  char v89;
  char v90;
  char v91;
  _BYTE v92[2];
  uint64_t v93;
  uint64_t v94;

  v76 = (_QWORD *)a1;
  v94 = 0;
  v93 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  v68 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v69 = (char *)v27 - v68;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKFetchGroupsRequest.CodingKeys>);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v76);
  v77 = (char *)v27 - v72;
  v94 = v3;
  v93 = v1;
  *(_BYTE *)(v1 + 16) = 6;
  v73 = OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID;
  v74 = type metadata accessor for GPKGroupID();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56);
  v75 = 1;
  v4(v1 + v73, 1);
  v5 = v75;
  v6 = v76;
  v7 = v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupMode;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = v5 & 1;
  v8 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupDomain);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_serviceName);
  *v9 = 0;
  v9[1] = 0;
  v79 = v6[3];
  v80 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v79);
  lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
  v10 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v81 = v10;
  v82 = v10;
  if (v10)
  {
    v33 = v82;
  }
  else
  {
    v64 = v92;
    v92[0] = 0;
    lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
    v11 = v81;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v65 = v11;
    v66 = v11;
    if (v11)
    {
      v32 = v66;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
      v33 = v32;
    }
    else
    {
      v59 = v92[1];
      v60 = &v91;
      swift_beginAccess();
      *(_BYTE *)(v67 + 16) = v59;
      swift_endAccess();
      v61 = &v90;
      v90 = 1;
      lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
      v12 = v65;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v62 = v12;
      v63 = v12;
      if (v12)
      {
        v31 = v63;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
        v33 = v31;
      }
      else
      {
        v54 = (void *)(v67 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupID);
        v55 = &v89;
        swift_beginAccess();
        outlined assign with take of GPKGroupID?(v69, v54);
        swift_endAccess();
        v56 = &v86;
        v86 = 2;
        lazy protocol witness table accessor for type GPKGroup.Mode and conformance GPKGroup.Mode();
        v13 = v62;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v57 = v13;
        v58 = v13;
        if (v13)
        {
          v30 = v58;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
          v33 = v30;
        }
        else
        {
          v46 = v87;
          v47 = v88;
          v48 = (_QWORD *)(v67 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupMode);
          v49 = &v85;
          swift_beginAccess();
          v14 = v47;
          v15 = v48;
          *v48 = v46;
          *((_BYTE *)v15 + 8) = v14 & 1;
          swift_endAccess();
          v16 = v57;
          v84[31] = 3;
          v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          v50 = v16;
          v51 = v17;
          v52 = v18;
          v53 = v16;
          if (v16)
          {
            v29 = v53;
            (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
            v33 = v29;
          }
          else
          {
            v40 = v52;
            v38 = v51;
            v39 = (uint64_t *)(v67 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_groupDomain);
            v41 = v84;
            swift_beginAccess();
            v19 = v39;
            v20 = v40;
            *v39 = v38;
            v19[1] = v20;
            swift_bridgeObjectRelease();
            swift_endAccess();
            v21 = v50;
            v83[31] = 4;
            v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
            v42 = v21;
            v43 = v22;
            v44 = v23;
            v45 = v21;
            if (!v21)
            {
              v36 = v44;
              v34 = v43;
              v35 = (uint64_t *)(v67 + OBJC_IVAR____TtC8GroupKit21GPKFetchGroupsRequest_serviceName);
              v37 = v83;
              swift_beginAccess();
              v24 = v35;
              v25 = v36;
              *v35 = v34;
              v24[1] = v25;
              swift_bridgeObjectRelease();
              swift_endAccess();
              (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
              return v67;
            }
            v28 = v45;
            (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
            v33 = v28;
          }
        }
      }
    }
  }
  v27[1] = v33;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  return v27[2];
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKFetchGroupsRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 264))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKFetchGroupsRequest()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t ObjC metadata update function for GPKFetchGroupsRequest()
{
  return type metadata accessor for GPKFetchGroupsRequest();
}

uint64_t type metadata accessor for GPKFetchGroupsRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKFetchGroupsRequest;
  if (!type metadata singleton initialization cache for GPKFetchGroupsRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata completion function for GPKFetchGroupsRequest()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for GPKGroupID?();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t method lookup function for GPKFetchGroupsRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.joinState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.joinState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.joinState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupMode.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 176))(a1, a2 & 1);
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupDomain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupDomain.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.groupDomain.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.serviceName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.serviceName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.serviceName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.__allocating_init(groupID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of GPKFetchGroupsRequest.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t type metadata accessor for GPKGroupID?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GPKGroupID?;
  if (!lazy cache variable for type metadata for GPKGroupID?)
  {
    type metadata accessor for GPKGroupID();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GPKGroupID?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for GPKFetchGroupsRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKFetchGroupsRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for GPKFetchGroupsRequest.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKFetchGroupsRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKFetchGroupsRequest.CodingKeys()
{
  return &type metadata for GPKFetchGroupsRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKFetchGroupsRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKFetchGroupsRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKFetchGroupsRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKFetchGroupsRequest.CodingKeys and conformance GPKFetchGroupsRequest.CodingKeys();
}

void *outlined init with take of GPKGroupID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for GPKGroupID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v8 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  return a2;
}

void *one-time initialization function for groupMembershipDidUpdate()
{
  Swift::String v0;
  id v1;
  void *result;
  void *v3;

  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.private.group.membership.update", 0x32uLL, 1);
  swift_bridgeObjectRetain();
  v3 = (void *)MEMORY[0x242632560](v0._countAndFlagsBits, v0._object);
  v1 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = v3;
  static NSNotificationName.groupMembershipDidUpdate = (uint64_t)v3;
  return result;
}

uint64_t *NSNotificationName.groupMembershipDidUpdate.unsafeMutableAddressor()
{
  if (one-time initialization token for groupMembershipDidUpdate != -1)
    swift_once();
  return &static NSNotificationName.groupMembershipDidUpdate;
}

void *static NSNotificationName.groupMembershipDidUpdate.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*NSNotificationName.groupMembershipDidUpdate.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

void *one-time initialization function for membershipManagementCompleted()
{
  Swift::String v0;
  id v1;
  void *result;
  void *v3;

  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.private.group.membershipManagementCompleted", 0x3EuLL, 1);
  swift_bridgeObjectRetain();
  v3 = (void *)MEMORY[0x242632560](v0._countAndFlagsBits, v0._object);
  v1 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = v3;
  static NSNotificationName.membershipManagementCompleted = (uint64_t)v3;
  return result;
}

uint64_t *NSNotificationName.membershipManagementCompleted.unsafeMutableAddressor()
{
  if (one-time initialization token for membershipManagementCompleted != -1)
    swift_once();
  return &static NSNotificationName.membershipManagementCompleted;
}

void *static NSNotificationName.membershipManagementCompleted.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*NSNotificationName.membershipManagementCompleted.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t GPKGroupID.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t GPKGroupID.hexString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Builtin::Word v15;
  int v16;
  uint64_t v17;
  Swift::String *v18;
  Swift::String *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  _QWORD v26[2];
  uint64_t v27;

  v27 = 0;
  v15 = 0;
  v11 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v11 - 8);
  v8 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v10 = (char *)&v7 - v8;
  v27 = v0;
  (*(void (**)(char *))(v1 + 16))((char *)&v7 - v8);
  v12 = UUID.uuidString.getter();
  v13 = v2;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v10, v11);
  v20 = v26;
  v26[0] = v12;
  v26[1] = v13;
  v16 = 1;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
  v19 = &v25;
  v25 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v15, v16 & 1);
  v18 = &v24;
  v24 = v4;
  v14 = lazy protocol witness table accessor for type String and conformance String();
  v17 = MEMORY[0x24BEE0D00];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v22 = v5;
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();
  v23 = String.lowercased()();
  swift_bridgeObjectRelease();
  return v23._countAndFlagsBits;
}

uint64_t GPKGroupID.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v8 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v8 - 8);
  v5 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (char *)&v4 - v5;
  v11 = v0;
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - v5);
  v9 = UUID.data.getter();
  v10 = v2;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v7, v8);
  return v9;
}

uint64_t GPKGroupID.init(uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v10 = a2;
  v13 = a1;
  v16 = 0;
  v15 = 0;
  v6[1] = 0;
  v12 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v12 - 8);
  v7 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v9 = (char *)v6 - v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v14 = (uint64_t)v6 - v8;
  v16 = (char *)v6 - v8;
  v15 = v3;
  (*(void (**)(uint64_t))(v4 + 16))(v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v9, v12);
  outlined init with copy of GPKGroupID(v14, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  return outlined destroy of GPKGroupID(v14);
}

uint64_t type metadata accessor for GPKGroupID()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKGroupID;
  if (!type metadata singleton initialization cache for GPKGroupID)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKGroupID.init(hexString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Builtin::Word v30;
  uint64_t v31;
  Swift::String *v32;
  Swift::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;

  v15 = a3;
  v22 = a1;
  v21 = a2;
  v47 = 0;
  v46 = 0;
  v44 = 0;
  v45 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v16 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v37 = (uint64_t)&v14 - v16;
  v30 = 0;
  v39 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v39 - 8);
  v17 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v30);
  v18 = (uint64_t)&v14 - v17;
  v19 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)&v14 - v19;
  v47 = (char *)&v14 - v19;
  v23 = type metadata accessor for GPKGroupID();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v22);
  v26 = (uint64_t)&v14 - v25;
  v27 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v28 = (uint64_t)&v14 - v27;
  v46 = (char *)&v14 - v27;
  v44 = v8;
  v45 = v9;
  v42 = v8;
  v43 = v9;
  v38 = 1;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
  v33 = &v41;
  v41 = v10;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, v38 & 1);
  v32 = &v40;
  v40 = v11;
  v29 = lazy protocol witness table accessor for type String and conformance String();
  v31 = MEMORY[0x24BEE0D00];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v34 = v12;
  outlined destroy of String();
  outlined destroy of String();
  UUID.init(hexString:)(v35, v34, v37);
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v36 + 48))(v37, v38, v39) == 1)
  {
    outlined destroy of UUID?(v37);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v15, 1, 1, v23);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v20, v37, v39);
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v18, v20, v39);
    GPKGroupID.init(uuid:)(v18, v26);
    outlined init with take of GPKGroupID(v26, v28);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v39);
    outlined init with copy of GPKGroupID(v28, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v23);
    swift_bridgeObjectRelease();
    return outlined destroy of GPKGroupID(v28);
  }
}

uint64_t GPKGroupID.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v10 = a1;
  v12 = 0;
  v3 = 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)&v3 - v4;
  v1 = type metadata accessor for GPKGroupID();
  v6 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  v5 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v9 = (uint64_t)&v3 - v5;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v3 - v5);
  v11 = (uint64_t)&v3 - v7;
  v12 = (char *)&v3 - v7;
  UUID.init()();
  GPKGroupID.init(uuid:)(v8, v9);
  outlined init with take of GPKGroupID(v9, v11);
  return outlined init with take of GPKGroupID(v11, v10);
}

uint64_t GPKGroupID.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  _QWORD v16[2];
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  Builtin::Word v21;
  void *object;
  int v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  Builtin::Word v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  char *v73;

  v44 = a2;
  v54 = a1;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v45 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v46 = (uint64_t)v16 - v45;
  v47 = 0;
  v48 = type metadata accessor for UUID();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)v16 - v50;
  v52 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)v16 - v52;
  v73 = (char *)v16 - v52;
  v55 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (_QWORD *)MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)v16 - v55;
  v72 = (char *)v16 - v55;
  v71 = v5;
  v59 = v5[3];
  v58 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v59);
  v6 = v57;
  dispatch thunk of Decoder.singleValueContainer()();
  v60 = v6;
  v61 = v6;
  if (v6)
  {
    v35 = v61;
  }
  else
  {
    v39 = v69;
    v38 = v70;
    __swift_project_boxed_opaque_existential_1(&v68, v69);
    v7 = v60;
    v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v40 = v7;
    v41 = v8;
    v42 = v9;
    v43 = v7;
    if (v7)
    {
      v17 = v43;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      v35 = v17;
    }
    else
    {
      v37 = v42;
      v36 = v41;
      v66 = v41;
      v67 = v42;
      swift_bridgeObjectRetain();
      UUID.init(hexString:)(v36, v37, v46);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v46, 1, v48) != 1)
      {
        v18 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
        v18(v53, v46, v48);
        (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v51, v53, v48);
        v18(v56, (uint64_t)v51, v48);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v48);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        outlined init with copy of GPKGroupID((uint64_t)v56, v44);
        __swift_destroy_boxed_opaque_existential_1(v54);
        return outlined destroy of GPKGroupID((uint64_t)v56);
      }
      outlined destroy of UUID?(v46);
      v28 = 0;
      v32 = type metadata accessor for DecodingError();
      v23 = 1;
      v34 = swift_allocError();
      v31 = v10;
      v33 = &v68;
      v20 = v69;
      v19 = v70;
      __swift_project_boxed_opaque_existential_1(&v68, v69);
      v29 = MEMORY[0x242632D70](v20, v19);
      v21 = 33;
      v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v25 = &v64;
      v64 = v11;
      v65 = v12;
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Could not decode GPKGroupID from ", v21, v23 & 1);
      object = v13._object;
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      v62 = v36;
      v63 = v37;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v28, v23 & 1);
      v24 = v14._object;
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      v27 = v64;
      v26 = v65;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v30 = String.init(stringInterpolation:)();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v32 - 8) + 104))(v31, *MEMORY[0x24BEE26D8]);
      swift_willThrow();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      v35 = v34;
    }
  }
  v16[1] = v35;
  return __swift_destroy_boxed_opaque_existential_1(v54);
}

uint64_t GPKGroupID.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = 0;
  v5 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  GPKGroupID.hexString.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t GPKGroupID.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a1;
  v6 = v1;
  v12 = 0;
  v11 = 0;
  v10 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v10 - 8);
  v7 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v9 = (char *)&v5 - v7;
  v12 = v5;
  v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  Hasher.combine<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v9, v10);
}

uint64_t GPKGroupID.description.getter()
{
  return GPKGroupID.hexString.getter();
}

BOOL static GPKGroupID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;

  v5[2] = a1;
  v9 = a2;
  v18 = 0;
  v17 = 0;
  v14 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v14 - 8);
  v7 = *(_QWORD *)(v11 + 64);
  v6 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v12 = (char *)v5 - v6;
  v8 = v6;
  MEMORY[0x24BDAC7A8]((char *)v5 - v6);
  v13 = (char *)v5 - v8;
  v18 = v2;
  v17 = v9;
  v10 = *(void (**)(void))(v3 + 16);
  v10();
  ((void (*)(char *, uint64_t, uint64_t))v10)(v12, v9, v14);
  v16 = static UUID.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v11 + 8);
  v15(v12, v14);
  v15(v13, v14);
  return (v16 & 1) != 0;
}

uint64_t GPKGroupID.hashValue.getter()
{
  type metadata accessor for GPKGroupID();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKGroupID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKGroupID.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKGroupID(_QWORD *a1)
{
  return GPKGroupID.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKGroupID()
{
  return GPKGroupID.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKGroupID(uint64_t a1)
{
  return GPKGroupID.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKGroupID(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKGroupID()
{
  return GPKGroupID.description.getter();
}

unint64_t base witness table accessor for Equatable in GPKGroupID()
{
  return lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKGroupID(uint64_t a1, uint64_t a2)
{
  return static GPKGroupID.== infix(_:_:)(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for GPKGroupID(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for GPKGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for GPKGroupID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D29B238(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for GPKGroupID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D29B294(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for GPKGroupID()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t GPKMetricsRequest.Event.AccurateCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t GPKMetricsRequest.Event.AccurateCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t GPKMetricsRequest.Event.AccurateCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMetricsRequest.Event.AccurateCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMetricsRequest.Event.AccurateCodingKeys()
{
  return GPKMetricsRequest.Event.AccurateCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMetricsRequest.Event.AccurateCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.Event.AccurateCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMetricsRequest.Event.AccurateCodingKeys()
{
  return GPKMetricsRequest.Event.AccurateCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMetricsRequest.Event.AccurateCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.Event.AccurateCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMetricsRequest.Event.AccurateCodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.AccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.AccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.AccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.AccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.AccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.AccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMetricsRequest.Event.AccurateCodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys();
  return CodingKey.debugDescription.getter();
}

BOOL static GPKMetricsRequest.Event.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKMetricsRequest.Event.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMetricsRequest.Event.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accurate", 8uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("inaccurate", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKMetricsRequest.Event.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKMetricsRequest.Event.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.CodingKeys, &type metadata for GPKMetricsRequest.Event.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.CodingKeys, &type metadata for GPKMetricsRequest.Event.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.CodingKeys, &type metadata for GPKMetricsRequest.Event.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.CodingKeys, &type metadata for GPKMetricsRequest.Event.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.CodingKeys, &type metadata for GPKMetricsRequest.Event.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMetricsRequest.Event.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMetricsRequest.Event.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("inaccurate", 0xAuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accurate", 8uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMetricsRequest.Event.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKMetricsRequest.Event.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMetricsRequest.Event.CodingKeys()
{
  return GPKMetricsRequest.Event.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMetricsRequest.Event.CodingKeys()
{
  return GPKMetricsRequest.Event.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMetricsRequest.Event.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL static GPKMetricsRequest.Event.InaccurateCodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t GPKMetricsRequest.Event.InaccurateCodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMetricsRequest.Event.InaccurateCodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("expected", 8uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("missing", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("extra", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GPKMetricsRequest.Event.InaccurateCodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GPKMetricsRequest.Event.InaccurateCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.InaccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.InaccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.InaccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.InaccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.InaccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.InaccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.InaccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.InaccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event.InaccurateCodingKeys, &type metadata for GPKMetricsRequest.Event.InaccurateCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMetricsRequest.Event.InaccurateCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMetricsRequest.Event.InaccurateCodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("expected", 8uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("missing", 7uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("extra", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMetricsRequest.Event.CodingKeys()
{
  _BYTE *v0;

  return GPKMetricsRequest.Event.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMetricsRequest.Event.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.Event.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMetricsRequest.Event.CodingKeys()
{
  return GPKMetricsRequest.Event.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMetricsRequest.Event.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.Event.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMetricsRequest.Event.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMetricsRequest.Event.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
  return CodingKey.debugDescription.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMetricsRequest.Event.InaccurateCodingKeys(char *a1, char *a2)
{
  return static GPKMetricsRequest.Event.InaccurateCodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return GPKMetricsRequest.Event.InaccurateCodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return GPKMetricsRequest.Event.InaccurateCodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMetricsRequest.Event.InaccurateCodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  char *v0;

  return GPKMetricsRequest.Event.InaccurateCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMetricsRequest.Event.InaccurateCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.Event.InaccurateCodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return GPKMetricsRequest.Event.InaccurateCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMetricsRequest.Event.InaccurateCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.Event.InaccurateCodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMetricsRequest.Event.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BYTE v45[4];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;

  v34 = a1;
  v51 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMetricsRequest.Event.InaccurateCodingKeys>);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)v6 - v28;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMetricsRequest.Event.AccurateCodingKeys>);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)v6 - v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMetricsRequest.Event.CodingKeys>);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v34);
  v41 = (char *)v6 - v37;
  v51 = v2;
  v38 = *v1;
  v39 = v1[1];
  v40 = v1[2];
  v44 = *((unsigned __int8 *)v1 + 24);
  v47 = v38;
  v48 = v39;
  v49 = v40;
  v50 = v44 & 1;
  v42 = v2[3];
  v43 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v42);
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v44 & 1) != 0)
  {
    v20 = v45;
    v45[0] = 0;
    lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    v21 = v25;
LABEL_7:
    v9 = v21;
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v41, v35);
  }
  v22 = v38;
  v23 = v39;
  v24 = v40;
  v14 = v40;
  v15 = v39;
  v17 = v38;
  v16 = &v46;
  v46 = 1;
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v3 = v25;
  v45[3] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v18 = v3;
  v19 = v3;
  if (v3)
  {
    v7 = v19;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v41, v35);
    v8 = v7;
  }
  else
  {
    v4 = v18;
    v45[2] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = v4;
    v13 = v4;
    if (!v4)
    {
      v45[1] = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v10 = 0;
      v11 = 0;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
      v21 = v10;
      goto LABEL_7;
    }
    v6[1] = v13;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v41, v35);
  }
  return result;
}

uint64_t GPKMetricsRequest.Event.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t countAndFlagsBits;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v79[4];
  char v80;
  _QWORD v81[4];
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;

  v60 = a2;
  v69 = a1;
  v88 = 0;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMetricsRequest.Event.InaccurateCodingKeys>);
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v64 = (char *)v16 - v63;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMetricsRequest.Event.AccurateCodingKeys>);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = (*(_QWORD *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v65);
  v68 = (char *)v16 - v67;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMetricsRequest.Event.CodingKeys>);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v69);
  v73 = (char *)v16 - v72;
  v88 = v2;
  v75 = v2[3];
  v76 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v75);
  lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
  v3 = v74;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v77 = v3;
  v78 = v3;
  if (v3)
  {
    v27 = v78;
  }
  else
  {
    v4 = KeyedDecodingContainer.allKeys.getter();
    v56 = &v83;
    v83 = v4;
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetricsRequest.Event.CodingKeys]);
    lazy protocol witness table accessor for type [GPKMetricsRequest.Event.CodingKeys] and conformance [A]();
    v84 = ArraySlice.init<A>(_:)();
    v85 = v5;
    v86 = v6;
    v87 = v7;
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<GPKMetricsRequest.Event.CodingKeys>);
    v58 = lazy protocol witness table accessor for type ArraySlice<GPKMetricsRequest.Event.CodingKeys> and conformance ArraySlice<A>();
    Collection<>.popFirst()();
    v59 = v82;
    if (v82 == 2)
      goto LABEL_12;
    v54 = v59;
    v47 = v59;
    v52 = v84;
    v48 = v85;
    v49 = v86;
    v50 = v87;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v51 = v81;
    v81[0] = v52;
    v81[1] = v48;
    v81[2] = v49;
    v81[3] = v50;
    v53 = Collection.isEmpty.getter();
    outlined destroy of ArraySlice<GPKMetricsRequest.Event.CodingKeys>();
    swift_unknownObjectRelease();
    if ((v53 & 1) == 0)
    {
LABEL_12:
      v21 = 0;
      v25 = type metadata accessor for DecodingError();
      v19 = 1;
      v26 = swift_allocError();
      v24 = v14;
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v20 = (char *)v24 + *(int *)(v15 + 48);
      *v24 = &type metadata for GPKMetricsRequest.Event;
      v22 = KeyedDecodingContainer.codingPath.getter();
      countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v19 & 1)._countAndFlagsBits;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v25 - 8) + 104))(v24, *MEMORY[0x24BEE26D0]);
      swift_willThrow();
      outlined destroy of ArraySlice<GPKMetricsRequest.Event.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
      v27 = v26;
    }
    else if ((v47 & 1) != 0)
    {
      v40 = &v80;
      v80 = v47 & 1;
      lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
      v9 = v77;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v41 = v9;
      v42 = v9;
      if (!v9)
      {
        v79[3] = 0;
        v10 = KeyedDecodingContainer.decode(_:forKey:)();
        v37 = 0;
        v38 = v10;
        v39 = 0;
        v33 = v10;
        v79[2] = 1;
        v11 = KeyedDecodingContainer.decode(_:forKey:)();
        v34 = 0;
        v35 = v11;
        v36 = 0;
        v29 = v11;
        v79[1] = 2;
        v12 = KeyedDecodingContainer.decode(_:forKey:)();
        v30 = 0;
        v31 = v12;
        v32 = 0;
        v89 = v33;
        v90 = v29;
        v91 = v12;
        v92 = 0;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
        v43 = v30;
        goto LABEL_11;
      }
      v17 = v42;
      outlined destroy of ArraySlice<GPKMetricsRequest.Event.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
      v27 = v17;
    }
    else
    {
      v44 = v79;
      v79[0] = v47 & 1;
      lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys();
      v8 = v77;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v45 = v8;
      v46 = v8;
      if (!v8)
      {
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 1;
        (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
        v43 = v45;
LABEL_11:
        v28 = v43;
        outlined destroy of ArraySlice<GPKMetricsRequest.Event.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
        outlined init with copy of GPKMetricsRequest.Event((uint64_t)&v89, v60);
        return __swift_destroy_boxed_opaque_existential_1(v69);
      }
      v18 = v46;
      outlined destroy of ArraySlice<GPKMetricsRequest.Event.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
      v27 = v18;
    }
  }
  v16[0] = v27;
  return __swift_destroy_boxed_opaque_existential_1(v69);
}

unint64_t lazy protocol witness table accessor for type [GPKMetricsRequest.Event.CodingKeys] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMetricsRequest.Event.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMetricsRequest.Event.CodingKeys] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMetricsRequest.Event.CodingKeys]);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMetricsRequest.Event.CodingKeys] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<GPKMetricsRequest.Event.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ArraySlice<GPKMetricsRequest.Event.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<GPKMetricsRequest.Event.CodingKeys> and conformance ArraySlice<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<GPKMetricsRequest.Event.CodingKeys>);
    v1 = MEMORY[0x2426331CC](MEMORY[0x24BEE2190], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<GPKMetricsRequest.Event.CodingKeys> and conformance ArraySlice<A>);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<GPKMetricsRequest.Event.CodingKeys>()
{
  swift_unknownObjectRelease();
}

__n128 outlined init with copy of GPKMetricsRequest.Event(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 9);
  *(__n128 *)(a2 + 9) = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMetricsRequest.Event@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKMetricsRequest.Event.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMetricsRequest.Event(uint64_t a1)
{
  return GPKMetricsRequest.Event.encode(to:)(a1);
}

uint64_t GPKMetricsRequest.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GPKGroupID(v1, a1);
}

uint64_t GPKMetricsRequest.event.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = type metadata accessor for GPKMetricsRequest();
  v3 = v1 + *(int *)(result + 20);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  LOBYTE(v3) = *(_BYTE *)(v3 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v3 & 1;
  return result;
}

uint64_t type metadata accessor for GPKMetricsRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GPKMetricsRequest;
  if (!type metadata singleton initialization cache for GPKMetricsRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GPKMetricsRequest.init(group:sourceMembers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE v25[12];
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[4];
  _QWORD v80[4];
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD __dst[3];
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  char v88[24];
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[4];
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;

  v63 = a3;
  v64 = a1;
  v71 = a2;
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v94 = 0;
  v73 = 0;
  v92 = 0;
  v91[0] = 0;
  v91[1] = 0;
  v87 = 0;
  v86 = 0;
  v65 = 0;
  v66 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v67 = &v25[-v66];
  v68 = type metadata accessor for GPKMetricsRequest();
  v69 = (*(_QWORD *)(*(_QWORD *)(v68 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v68);
  v70 = &v25[-v69];
  v99 = &v25[-v69];
  v98 = a1;
  v97 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberProperty);
  v72 = MEMORY[0x242632794](v71, v5);
  v96 = v72;
  v95 = 0;
  v93[1] = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 336))();
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v76 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GPKMetricsRequest.init(group:sourceMembers:), v73, v74, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v76, MEMORY[0x24BEE40A8], v75);
  v77 = 0;
  v78 = v6;
  v7 = v64;
  v56 = v6;
  outlined destroy of [GPKMember]();
  v58 = v93;
  v93[0] = v56;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v59 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v60 = MEMORY[0x24BEE0D00];
  v94 = Set.init<A>(_:)();
  v91[3] = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 712))();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GPKMetricsRequest.init(group:sourceMembers:), 0, v74, v60, MEMORY[0x24BEE4078], v76, MEMORY[0x24BEE40A8], v75);
  v61 = 0;
  v62 = v8;
  v53 = v8;
  outlined destroy of [GPKMember]();
  v91[2] = v53;
  v92 = Set.init<A>(_:)();
  swift_bridgeObjectRetain();
  v90 = v71;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMemberProperty]);
  lazy protocol witness table accessor for type [GPKMemberProperty] and conformance [A]();
  Collection<>.makeIterator()();
  for (i = v61; ; i = v52)
  {
    v52 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMemberProperty]>);
    IndexingIterator.next()();
    if (!v89)
      break;
    v39 = __dst;
    outlined init with take of GPKMemberProperty(v88, __dst);
    v43 = v94;
    swift_bridgeObjectRetain();
    v41 = v84;
    v40 = v85;
    __swift_project_boxed_opaque_existential_1(v39, v84);
    v12 = (*(uint64_t (**)(uint64_t))(v40 + 8))(v41);
    v42 = v82;
    v82[0] = v12;
    v82[1] = v13;
    v44 = Set.contains(_:)();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
    {
      v37 = v84;
      v36 = v85;
      __swift_project_boxed_opaque_existential_1(__dst, v84);
      v14 = (*(uint64_t (**)(uint64_t))(v36 + 8))(v37);
      v38 = v79;
      v79[0] = v14;
      v79[1] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
      Set.remove(_:)();
      outlined destroy of String();
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = v92;
      swift_bridgeObjectRetain();
      v32 = v84;
      v31 = v85;
      __swift_project_boxed_opaque_existential_1(__dst, v84);
      v16 = (*(uint64_t (**)(uint64_t))(v31 + 8))(v32);
      v33 = v81;
      v81[0] = v16;
      v81[1] = v17;
      v35 = Set.contains(_:)();
      outlined destroy of String();
      swift_bridgeObjectRelease();
      result = v35;
      if ((v35 & 1) != 0)
      {
        v29 = v84;
        v28 = v85;
        __swift_project_boxed_opaque_existential_1(__dst, v84);
        v18 = (*(uint64_t (**)(uint64_t))(v28 + 8))(v29);
        v30 = v80;
        v80[0] = v18;
        v80[1] = v19;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
        Set.remove(_:)();
        outlined destroy of String();
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = v95 + 1;
        if (__OFADD__(v95, 1))
          goto LABEL_25;
        v95 = v27;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
  }
  v9 = v64;
  outlined destroy of IndexingIterator<[GPKMemberProperty]>();
  (*(void (**)(_QWORD *))(*(_QWORD *)v9 + 312))(v91);
  outlined init with take of GPKGroupID((uint64_t)v67, (uint64_t)v70);
  v45 = v94;
  swift_bridgeObjectRetain();
  v46 = MEMORY[0x24BEE0D00];
  v47 = MEMORY[0x24BEE0D10];
  v50 = Set.count.getter();
  swift_bridgeObjectRelease();
  v48 = v92;
  swift_bridgeObjectRetain();
  v49 = Set.count.getter();
  swift_bridgeObjectRelease();
  result = v50;
  v51 = v50 + v49;
  if (__OFADD__(v50, v49))
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v87 = v51;
  if (v95)
    v26 = 0;
  else
    v26 = v51 == 0;
  v86 = v26;
  if (v26)
  {
    v21 = &v70[*(int *)(v68 + 20)];
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = 0;
    v21[24] = 1;
  }
  else
  {
    v22 = v51;
    v23 = v95;
    v24 = &v70[*(int *)(v68 + 20)];
    *(_QWORD *)v24 = v72;
    *((_QWORD *)v24 + 1) = v23;
    *((_QWORD *)v24 + 2) = v22;
    v24[24] = 0;
  }
  outlined destroy of Set<String>();
  outlined destroy of Set<String>();
  outlined init with copy of GPKMetricsRequest((uint64_t)v70, v63);
  swift_bridgeObjectRelease();
  swift_release();
  return outlined destroy of GPKMetricsRequest((uint64_t)v70);
}

uint64_t closure #1 in GPKMetricsRequest.init(group:sourceMembers:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t closure #2 in GPKMetricsRequest.init(group:sourceMembers:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  a2[1] = v3;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[GPKMemberProperty]>()
{
  swift_bridgeObjectRelease();
}

void *outlined init with take of GPKMemberProperty(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

BOOL static GPKMetricsRequest.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GPKMetricsRequest.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GPKMetricsRequest.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("event", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GPKMetricsRequest.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GPKMetricsRequest.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.CodingKeys, &type metadata for GPKMetricsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.CodingKeys, &type metadata for GPKMetricsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.CodingKeys, &type metadata for GPKMetricsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.CodingKeys, &type metadata for GPKMetricsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.CodingKeys, &type metadata for GPKMetricsRequest.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GPKMetricsRequest.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GPKMetricsRequest.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("event", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GPKMetricsRequest.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static GPKMetricsRequest.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GPKMetricsRequest.CodingKeys()
{
  return GPKMetricsRequest.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GPKMetricsRequest.CodingKeys()
{
  return GPKMetricsRequest.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GPKMetricsRequest.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GPKMetricsRequest.CodingKeys()
{
  _BYTE *v0;

  return GPKMetricsRequest.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GPKMetricsRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GPKMetricsRequest.CodingKeys()
{
  return GPKMetricsRequest.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GPKMetricsRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GPKMetricsRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GPKMetricsRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GPKMetricsRequest.CodingKeys()
{
  lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GPKMetricsRequest.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[3];
  char v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;

  v13 = a1;
  v32 = 0;
  v31 = 0;
  v22 = type metadata accessor for GPKGroupID();
  v12 = (*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (uint64_t)v10 - v12;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GPKMetricsRequest.CodingKeys>);
  v14 = *(_QWORD *)(v21 - 8);
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v10 - v15;
  v32 = v2;
  v31 = v1;
  v16 = v2[3];
  v17 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v16);
  lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID(v19, v24);
  v20 = &v30;
  v30 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v25 = v3;
  v26 = v3;
  if (v3)
  {
    v10[2] = v26;
    outlined destroy of GPKGroupID(v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v21);
  }
  else
  {
    outlined destroy of GPKGroupID(v24);
    v4 = v19 + *(int *)(type metadata accessor for GPKMetricsRequest() + 20);
    v5 = *(_QWORD *)v4;
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    LOBYTE(v4) = *(_BYTE *)(v4 + 24);
    v10[5] = v28;
    v28[0] = v5;
    v28[1] = v6;
    v28[2] = v7;
    v29 = v4 & 1;
    v10[4] = &v27;
    v27 = 1;
    lazy protocol witness table accessor for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event();
    v8 = v25;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[6] = v8;
    v11 = v8;
    if (v8)
      v10[1] = v11;
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v21);
  }
}

unint64_t lazy protocol witness table accessor for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event, &type metadata for GPKMetricsRequest.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event;
  if (!lazy protocol witness table cache variable for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event)
  {
    v0 = MEMORY[0x2426331CC](&protocol conformance descriptor for GPKMetricsRequest.Event, &type metadata for GPKMetricsRequest.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event);
    return v0;
  }
  return v2;
}

uint64_t GPKMetricsRequest.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  char v50;

  v25 = a2;
  v33 = a1;
  v49 = 0;
  v29 = 0;
  v26 = type metadata accessor for GPKGroupID();
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (uint64_t)&v14 - v27;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GPKMetricsRequest.CodingKeys>);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v37 = (char *)&v14 - v32;
  v34 = type metadata accessor for GPKMetricsRequest();
  v35 = (*(_QWORD *)(*(_QWORD *)(v34 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v33);
  v36 = (uint64_t)&v14 - v35;
  v50 = 0;
  v49 = v2;
  v39 = v2[3];
  v40 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v39);
  lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
  v3 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v41 = v3;
  v42 = v3;
  if (v3)
  {
    v17 = v42;
  }
  else
  {
    v22 = &v48;
    v48 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23 = v4;
    v24 = v4;
    if (v4)
    {
      v16 = v24;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
      v17 = v16;
    }
    else
    {
      v18 = 1;
      v50 = 1;
      outlined init with take of GPKGroupID(v28, v36);
      v19 = &v43;
      v43 = v18;
      lazy protocol witness table accessor for type GPKMetricsRequest.Event and conformance GPKMetricsRequest.Event();
      v5 = v23;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v20 = v5;
      v21 = v5;
      if (!v5)
      {
        v6 = v30;
        v7 = v37;
        v8 = v31;
        v9 = v45;
        v10 = v46;
        v11 = v47;
        v12 = v36 + *(int *)(v34 + 20);
        *(_QWORD *)v12 = v44;
        *(_QWORD *)(v12 + 8) = v9;
        *(_QWORD *)(v12 + 16) = v10;
        *(_BYTE *)(v12 + 24) = v11 & 1;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of GPKMetricsRequest(v36, v25);
        __swift_destroy_boxed_opaque_existential_1(v33);
        return outlined destroy of GPKMetricsRequest(v36);
      }
      v15 = v21;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
      v17 = v15;
    }
  }
  v14 = v17;
  result = __swift_destroy_boxed_opaque_existential_1(v33);
  if ((v50 & 1) != 0)
    return outlined destroy of GPKGroupID(v36);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GPKMetricsRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GPKMetricsRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GPKMetricsRequest(uint64_t a1)
{
  return GPKMetricsRequest.encode(to:)(a1);
}

unint64_t initializeBufferWithCopyOfBuffer for GPKMetricsRequest(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v7;
  int v12;

  v12 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = (_OWORD *)((char *)a1 + *(int *)(a3 + 20));
    v5 = (_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    *v4 = *v5;
    *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)v5 + 9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GPKMetricsRequest(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

__n128 initializeWithCopy for GPKMetricsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = a2 + *(int *)(a3 + 20);
  v5 = a1 + *(int *)(a3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 assignWithCopy for GPKMetricsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = a2 + *(int *)(a3 + 20);
  v5 = a1 + *(int *)(a3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 initializeWithTake for GPKMetricsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  v4 = a2 + *(int *)(a3 + 20);
  v5 = a1 + *(int *)(a3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

__n128 assignWithTake for GPKMetricsRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = a2 + *(int *)(a3 + 20);
  v5 = a1 + *(int *)(a3 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 9);
  *(__n128 *)(v5 + 9) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GPKMetricsRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D29EBB4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for GPKMetricsRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D29EC10(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for GPKMetricsRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for GPKMetricsRequest.Event(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t getEnumTagSinglePayload for GPKMetricsRequest.Event(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 25))
      v3 = *(_DWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GPKMetricsRequest.Event(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 25);
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (a3)
      *v3 = 1;
  }
  else if (a3)
  {
    *v3 = 0;
  }
  return result;
}

uint64_t getEnumTag for GPKMetricsRequest.Event(uint64_t a1)
{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expected: Int, missing: Int, extra: Int));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for GPKMetricsRequest.Event(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expected: Int, missing: Int, extra: Int));
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, a2, 1);
}

ValueMetadata *type metadata accessor for GPKMetricsRequest.Event()
{
  return &type metadata for GPKMetricsRequest.Event;
}

uint64_t getEnumTagSinglePayload for GPKMetricsRequest.Event.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMetricsRequest.Event.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMetricsRequest.Event.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMetricsRequest.Event.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMetricsRequest.Event.CodingKeys()
{
  return &type metadata for GPKMetricsRequest.Event.CodingKeys;
}

ValueMetadata *type metadata accessor for GPKMetricsRequest.Event.AccurateCodingKeys()
{
  return &type metadata for GPKMetricsRequest.Event.AccurateCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKMetricsRequest.Event.InaccurateCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMetricsRequest.Event.InaccurateCodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GPKMetricsRequest.Event.InaccurateCodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GPKMetricsRequest.Event.InaccurateCodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return &type metadata for GPKMetricsRequest.Event.InaccurateCodingKeys;
}

uint64_t getEnumTagSinglePayload for GPKMetricsRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GPKMetricsRequest.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GPKMetricsRequest.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GPKMetricsRequest.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GPKMetricsRequest.CodingKeys()
{
  return &type metadata for GPKMetricsRequest.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMetricsRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMetricsRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMetricsRequest.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.CodingKeys and conformance GPKMetricsRequest.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMetricsRequest.Event.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMetricsRequest.Event.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMetricsRequest.Event.InaccurateCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.InaccurateCodingKeys and conformance GPKMetricsRequest.Event.InaccurateCodingKeys();
}

unint64_t base witness table accessor for Equatable in GPKMetricsRequest.Event.CodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.CodingKeys and conformance GPKMetricsRequest.Event.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GPKMetricsRequest.Event.AccurateCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GPKMetricsRequest.Event.AccurateCodingKeys()
{
  return lazy protocol witness table accessor for type GPKMetricsRequest.Event.AccurateCodingKeys and conformance GPKMetricsRequest.Event.AccurateCodingKeys();
}

uint64_t one-time initialization function for shared()
{
  uint64_t result;

  type metadata accessor for DaemonConnection();
  result = DaemonConnection.__allocating_init()();
  static DaemonConnection.shared = result;
  return result;
}

{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  _QWORD v3[5];
  _BYTE v4[40];

  type metadata accessor for GPKGroupManager();
  v0 = DaemonMessageSender.shared.unsafeMutableAddressor();
  outlined init with copy of MessageSenderProtocol((uint64_t)v0, (uint64_t)v4);
  v2 = *DaemonConnection.shared.unsafeMutableAddressor();
  swift_retain();
  v3[3] = type metadata accessor for DaemonConnection();
  v3[4] = &protocol witness table for DaemonConnection;
  v3[0] = v2;
  result = GPKGroupManager.__allocating_init(daemonMessageSender:daemonBroadcaster:)((uint64_t)v4, v3);
  static GPKGroupManager.shared = result;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  v1 = type metadata accessor for MessageSender();
  type metadata accessor for XPCEncoder();
  XPCEncoder.__allocating_init()();
  type metadata accessor for XPCDecoder();
  XPCDecoder.__allocating_init()();
  DaemonConnection.shared.unsafeMutableAddressor();
  swift_retain();
  type metadata accessor for DaemonConnection();
  lazy protocol witness table accessor for type DaemonConnection and conformance DaemonConnection();
  result = MessageSender.__allocating_init<A, B, C>(encoder:decoder:transport:)();
  qword_2543185E0 = v1;
  qword_2543185E8 = (uint64_t)&protocol witness table for MessageSender;
  static DaemonMessageSender.shared = result;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  v1 = type metadata accessor for SyncMessageSender();
  type metadata accessor for XPCEncoder();
  XPCEncoder.__allocating_init()();
  type metadata accessor for XPCDecoder();
  XPCDecoder.__allocating_init()();
  DaemonConnection.shared.unsafeMutableAddressor();
  swift_retain();
  type metadata accessor for DaemonConnection();
  lazy protocol witness table accessor for type DaemonConnection and conformance DaemonConnection();
  result = SyncMessageSender.__allocating_init<A, B, C>(encoder:decoder:transport:)();
  qword_256C57FA0 = v1;
  qword_256C57FA8 = (uint64_t)&protocol witness table for SyncMessageSender;
  static SyncDaemonMessageSender.shared = result;
  return result;
}

uint64_t type metadata accessor for DaemonConnection()
{
  return objc_opt_self();
}

uint64_t DaemonConnection.__allocating_init()()
{
  uint64_t v0;
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(v0 + 160))(0);
  swift_retain();
  swift_release();
  return v2;
}

uint64_t *DaemonConnection.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static DaemonConnection.shared;
}

uint64_t static DaemonConnection.shared.getter()
{
  uint64_t v1;

  v1 = *DaemonConnection.shared.unsafeMutableAddressor();
  swift_retain();
  return v1;
}

uint64_t key path getter for DaemonConnection.broadcastHandler : DaemonConnection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for DaemonConnection.broadcastHandler : DaemonConnection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of DaemonBroadcastHandler?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v4, v6);
  return swift_release();
}

uint64_t DaemonConnection.broadcastHandler.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = MEMORY[0x2426332C8](v0 + 16);
  swift_endAccess();
  return v2;
}

uint64_t DaemonConnection.broadcastHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void (*DaemonConnection.broadcastHandler.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[5] = v1;
  swift_beginAccess();
  v2 = MEMORY[0x2426332C8](v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v6[3] = v2;
  v6[4] = v3;
  return DaemonConnection.broadcastHandler.modify;
}

void DaemonConnection.broadcastHandler.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v4[5];
    v2 = v4[4];
    swift_unknownObjectRetain();
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of DaemonBroadcastHandler?();
  }
  else
  {
    *(_QWORD *)(v4[5] + 24) = v4[4];
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DaemonBroadcastHandler?()
{
  swift_unknownObjectRelease();
}

uint64_t key path getter for DaemonConnection.connection : DaemonConnection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v2);
  return swift_release();
}

uint64_t key path setter for DaemonConnection.connection : DaemonConnection(id *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of NSXPCConnection?(a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 144))(v4);
  return swift_release();
}

void *DaemonConnection.connection.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v0 + 32);
  v1 = v3;
  swift_endAccess();
  return v3;
}

void DaemonConnection.connection.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v2 = a1;
  swift_beginAccess();
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

  swift_endAccess();
}

uint64_t (*DaemonConnection.connection.modify())()
{
  swift_beginAccess();
  return DaemonConnection.connection.modify;
}

uint64_t DaemonConnection.connection.modify()
{
  return swift_endAccess();
}

unint64_t type metadata accessor for NSLock()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSLock;
  if (!lazy cache variable for type metadata for NSLock)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSLock);
    return ObjCClassMetadata;
  }
  return v2;
}

NSLock __swiftcall NSLock.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSLock)@nonobjc NSLock.init()();
}

NSLock *DaemonConnection.__allocating_init(endpoint:)(void *a1)
{
  swift_allocObject();
  return DaemonConnection.init(endpoint:)(a1);
}

NSLock *DaemonConnection.init(endpoint:)(void *a1)
{
  uint64_t v1;
  id v2;
  NSLock *v5;

  *(_QWORD *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + 32) = 0;
  type metadata accessor for NSLock();
  v5[5].super.isa = NSLock.__allocating_init()().super.isa;
  v2 = a1;
  v5[6].super.isa = (Class)a1;

  return v5;
}

Class DaemonConnection.createConnection()()
{
  id v0;
  id v1;
  id v2;
  objc_class *v3;
  id v4;
  objc_class *v5;
  objc_class *v6;
  uint64_t v7;
  objc_class *v8;
  objc_class *v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  objc_class *v13;
  objc_class *v14;
  objc_class *v15;
  Class v17;
  const void *v18;
  Class v19;
  Class v20;
  uint64_t v21;
  const void *v22;
  Class v23;
  id v24;
  Class v25;
  Class v26;
  Class v27;
  id v28;
  Class v29;
  id v30;
  id listenerEndpoint;
  Swift::String machServiceName;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSXPCConnectionOptions v36;
  _QWORD v37[6];
  uint64_t aBlock;
  int v39;
  int v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  void (*v43)();
  uint64_t v44;
  id v45;
  Class isa;
  uint64_t v47;

  v47 = 0;
  isa = 0;
  v45 = 0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1);
  String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  v35 = os_variant_allows_internal_security_policies();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
  {
    v33 = *(void **)(v34 + 48);
    v0 = v33;
    type metadata accessor for NSXPCConnection();
    if (v33)
    {
      v1 = v33;
      isa = NSXPCConnection.__allocating_init(listenerEndpoint:)((NSXPCListenerEndpoint)v33).super.isa;

    }
    else
    {
      machServiceName = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.xpc.groupservice", 0x24uLL, 1);
      type metadata accessor for NSXPCConnectionOptions();
      _allocateUninitializedArray<A>(_:)();
      lazy protocol witness table accessor for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions();
      SetAlgebra<>.init(arrayLiteral:)();
      isa = NSXPCConnection.__allocating_init(machServiceName:options:)(machServiceName, v36).super.isa;
    }
  }
  else
  {
    type metadata accessor for NSXPCConnection();
    v30 = objc_msgSend((id)objc_opt_self(), sel_anonymousListener);
    listenerEndpoint = objc_msgSend(v30, sel_endpoint);

    isa = NSXPCConnection.__allocating_init(listenerEndpoint:)((NSXPCListenerEndpoint)listenerEndpoint).super.isa;
  }
  type metadata accessor for NSXPCInterface();
  v2 = &unk_256C5A538;
  v28 = @nonobjc NSXPCInterface.__allocating_init(with:)(&unk_256C5A538);
  v45 = v28;
  v3 = isa;
  v4 = v28;
  -[objc_class setRemoteObjectInterface:](isa, sel_setRemoteObjectInterface_, v28);

  v19 = isa;
  v5 = isa;
  swift_retain();
  v17 = isa;
  v6 = isa;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v34;
  *(_QWORD *)(v7 + 24) = v17;
  v43 = partial apply for closure #1 in DaemonConnection.createConnection();
  v44 = v7;
  v21 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v39 = 1107296256;
  v40 = 0;
  v41 = thunk for @escaping @callee_guaranteed () -> ();
  v42 = &block_descriptor_1;
  v18 = _Block_copy(&aBlock);
  swift_release();
  -[objc_class setInterruptionHandler:](v19, sel_setInterruptionHandler_, v18);
  _Block_release(v18);

  v23 = isa;
  v8 = isa;
  swift_retain();
  v20 = isa;
  v9 = isa;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v34;
  *(_QWORD *)(v10 + 24) = v20;
  v37[4] = partial apply for closure #2 in DaemonConnection.createConnection();
  v37[5] = v10;
  v37[0] = v21;
  v37[1] = 1107296256;
  v37[2] = thunk for @escaping @callee_guaranteed () -> ();
  v37[3] = &block_descriptor_6;
  v22 = _Block_copy(v37);
  swift_release();
  -[objc_class setInvalidationHandler:](v23, sel_setInvalidationHandler_, v22);
  _Block_release(v22);

  v25 = isa;
  v11 = isa;
  v12 = &unk_256C596D8;
  v24 = @nonobjc NSXPCInterface.__allocating_init(with:)(&unk_256C596D8);
  -[objc_class setExportedInterface:](v25, sel_setExportedInterface_);

  v26 = isa;
  v13 = isa;
  swift_retain();
  -[objc_class setExportedObject:](v26, sel_setExportedObject_);
  swift_unknownObjectRelease();

  v27 = isa;
  v14 = isa;
  -[objc_class resume](v27, sel_resume);

  v29 = isa;
  v15 = isa;

  return v29;
}

unint64_t type metadata accessor for NSXPCConnection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSXPCConnection;
  if (!lazy cache variable for type metadata for NSXPCConnection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSXPCConnection);
    return ObjCClassMetadata;
  }
  return v2;
}

NSXPCConnection __swiftcall NSXPCConnection.__allocating_init(listenerEndpoint:)(NSXPCListenerEndpoint listenerEndpoint)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSXPCConnection)@nonobjc NSXPCConnection.init(listenerEndpoint:)(listenerEndpoint.super.isa);
}

unint64_t type metadata accessor for NSXPCInterface()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSXPCInterface;
  if (!lazy cache variable for type metadata for NSXPCInterface)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSXPCInterface);
    return ObjCClassMetadata;
  }
  return v2;
}

NSXPCConnection __swiftcall NSXPCConnection.__allocating_init(machServiceName:options:)(Swift::String machServiceName, NSXPCConnectionOptions options)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSXPCConnection)@nonobjc NSXPCConnection.init(machServiceName:options:)();
}

id @nonobjc NSXPCInterface.__allocating_init(with:)(void *a1)
{
  id v3;

  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_interfaceWithProtocol_, a1);

  return v3;
}

void closure #1 in DaemonConnection.createConnection()(int a1, id a2)
{
  id v2;
  id v3;

  v2 = a2;
  v3 = a2;
  DaemonConnection.connectionWasInterrupted(connection:)(a2);

}

uint64_t sub_23D2A1128()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in DaemonConnection.createConnection()()
{
  uint64_t v0;

  closure #1 in DaemonConnection.createConnection()(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void closure #2 in DaemonConnection.createConnection()(int a1, id a2)
{
  id v2;
  id v3;

  v2 = a2;
  v3 = a2;
  DaemonConnection.connectionWasInvalidated(connection:)(a2);

}

uint64_t sub_23D2A1284()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in DaemonConnection.createConnection()()
{
  uint64_t v0;

  closure #2 in DaemonConnection.createConnection()(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t type metadata accessor for NSXPCConnectionOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSXPCConnectionOptions;
  if (!lazy cache variable for type metadata for NSXPCConnectionOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSXPCConnectionOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions;
  if (!lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions)
  {
    v0 = type metadata accessor for NSXPCConnectionOptions();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for NSXPCConnectionOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions;
  if (!lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions)
  {
    v0 = type metadata accessor for NSXPCConnectionOptions();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for NSXPCConnectionOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions;
  if (!lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions)
  {
    v0 = type metadata accessor for NSXPCConnectionOptions();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for NSXPCConnectionOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions;
  if (!lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions)
  {
    v0 = type metadata accessor for NSXPCConnectionOptions();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for NSXPCConnectionOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions;
  if (!lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions)
  {
    v0 = type metadata accessor for NSXPCConnectionOptions();
    v1 = MEMORY[0x2426331CC](&protocol conformance descriptor for NSXPCConnectionOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCConnectionOptions and conformance NSXPCConnectionOptions);
    return v1;
  }
  return v3;
}

Class DaemonConnection.getConnection()()
{
  _QWORD *v0;
  id v1;
  objc_class *v2;
  Class v4;
  id v5;
  uint64_t v6;
  objc_class *v7;
  Class v8;
  _QWORD *v9;

  v9 = v0;
  v5 = (id)v0[5];
  v1 = v5;
  objc_msgSend(v5, sel_lock);

  v7 = (objc_class *)(*(uint64_t (**)(void))(*v0 + 136))();
  swift_retain();
  if (v7)
  {
    v8 = v7;
  }
  else
  {
    v8 = DaemonConnection.createConnection()();
    outlined destroy of NSXPCConnection?((id *)&v7);
  }
  swift_release();
  v4 = v8;
  v2 = v8;
  (*(void (**)(Class))(*(_QWORD *)v6 + 144))(v4);
  $defer #1 () in DaemonConnection.getConnection()(v6);
  return v4;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSXPCConnection?(id *a1)
{

}

void $defer #1 () in DaemonConnection.getConnection()(uint64_t a1)
{
  id v1;
  id v2;

  v2 = *(id *)(a1 + 40);
  v1 = v2;
  objc_msgSend(v2, sel_unlock);

}

uint64_t DaemonConnection.connectionWasInvalidated(connection:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  Builtin::Word v19;
  void *object;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  Swift::String v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v21 = a1;
  v45 = 0;
  v44 = 0;
  v18 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v38 = (uint64_t)&v17 - v18;
  v45 = MEMORY[0x24BDAC7A8](v21);
  v44 = v1;
  v19 = 34;
  v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v27 = &v42;
  v42 = v2;
  v43 = v3;
  v36 = 1;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Daemon connection was invalidated ", v19, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = v21;
  v25 = objc_msgSend(v21, sel_debugDescription);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v6;

  v24 = v41;
  v41[0] = v22;
  v41[1] = v23;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();

  v35 = 0;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v36 & 1);
  v26 = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  v8 = v34;
  swift_bridgeObjectRelease();
  v29 = v42;
  v28 = v43;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v30 = String.init(stringInterpolation:)();
  v33 = v9;
  v31 = static os_log_type_t.error.getter();
  v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/DaemonConnection.swift", 0x1FuLL, v36 & 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v40);
  v10._countAndFlagsBits = v30;
  v10._object = v33;
  v39 = v40 & v36;
  gpklog(_:type:fileID:line:subsystem:)(v10, (os_log_type_t)v31, v32, 84, (GroupKit::LogSubsystem)&v39);
  swift_bridgeObjectRelease();
  v11 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 200))(v11);
  v12 = v34;
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v13 - 8) + 56))(v38, v36);
  swift_retain();
  v14 = (_QWORD *)swift_allocObject();
  v37 = v14;
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v38, (uint64_t)&async function pointer to partial apply for closure #1 in DaemonConnection.connectionWasInvalidated(connection:), (uint64_t)v37, v15);
  return swift_release();
}

uint64_t closure #1 in DaemonConnection.connectionWasInvalidated(connection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = a4;
  v4[6] = a1;
  v4[4] = v4;
  v4[5] = 0;
  v4[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in DaemonConnection.connectionWasInvalidated(connection:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v8;

  v1 = v0[7];
  v0[4] = v0;
  v0[2] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  v0[3] = v2;
  if (v0[2])
  {
    v6 = (_BYTE *)v8[6];
    v5 = v8[3];
    swift_unknownObjectRetain();
    outlined destroy of DaemonBroadcastHandler?();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(v5 + 16))(ObjectType);
    *v6 = 0;
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = (_BYTE *)v8[6];
    outlined destroy of DaemonBroadcastHandler?();
    *v7 = 1;
  }
  return (*(uint64_t (**)(void))(v8[4] + 8))();
}

uint64_t sub_23D2A19B4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DaemonConnection.connectionWasInvalidated(connection:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in DaemonConnection.connectionWasInvalidated(connection:);
  return closure #1 in DaemonConnection.connectionWasInvalidated(connection:)(a1, v5, v6, v7);
}

uint64_t partial apply for closure #1 in DaemonConnection.connectionWasInvalidated(connection:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  }
  v6 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v6)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a4;
  v5[3] = a2;
  v5[4] = a3;
  return swift_task_create();
}

uint64_t DaemonConnection.connectionWasInterrupted(connection:)(void *a1)
{
  uint64_t v1;
  Swift::String v2;
  id v3;
  uint64_t v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t _;
  os_log_type_t __12;
  Swift::String v17;
  void *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v25 = 0;
  v26 = a1;
  v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v24 = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Daemon connection was interrupted ", 0x22uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v3 = a1;
  v13 = objc_msgSend(a1, sel_debugDescription);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v4;

  v21 = v11;
  v22 = v12;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();

  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  _ = String.init(stringInterpolation:)();
  v18 = v6;
  __12 = static os_log_type_t.error.getter();
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/DaemonConnection.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v20);
  v7._countAndFlagsBits = _;
  v7._object = v18;
  v19 = v20 & 1;
  gpklog(_:type:fileID:line:subsystem:)(v7, __12, v17, 93, (GroupKit::LogSubsystem)&v19);
  swift_bridgeObjectRelease();
  v8 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 200))(v8);
}

Swift::Void __swiftcall DaemonConnection.invalidateConnection()()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;

  v3 = (id)v0[5];
  v1 = v3;
  objc_msgSend(v3, sel_lock);

  v4 = (void *)(*(uint64_t (**)(void))(*v0 + 136))();
  if (v4)
  {
    objc_msgSend(v4, sel_invalidate);
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 144))(0);

  }
  $defer #1 () in DaemonConnection.invalidateConnection()(v2);
}

void $defer #1 () in DaemonConnection.invalidateConnection()(uint64_t a1)
{
  id v1;
  id v2;

  v2 = *(id *)(a1 + 40);
  v1 = v2;
  objc_msgSend(v2, sel_unlock);

}

uint64_t DaemonConnection.deinit()
{
  id *v0;
  uint64_t v2;

  outlined destroy of weak DaemonBroadcastHandler?();
  outlined destroy of NSXPCConnection?(v0 + 4);

  outlined destroy of NSXPCListenerEndpoint?(v0 + 6);
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak DaemonBroadcastHandler?()
{
  swift_unknownObjectWeakDestroy();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSXPCListenerEndpoint?(id *a1)
{

}

uint64_t DaemonConnection.__deallocating_deinit()
{
  DaemonConnection.deinit();
  return swift_deallocClassInstance();
}

uint64_t DaemonConnection.send(_:completion:)(uint64_t a1, unint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  id v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(_QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  void *object;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v28 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v29 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v30 = (char *)&v19 - v29;
  v38 = MEMORY[0x24BDAC7A8](v28);
  v39 = v5;
  v36 = v6;
  v37 = v7;
  v35 = v4;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1)._object;
  v31 = String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  v33 = os_variant_allows_internal_security_policies();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
  {
    v8 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v30, 1);
    swift_retain();
    swift_retain();
    outlined copy of Data._Representation(v28, v25);
    v9 = swift_allocObject();
    v10 = v24;
    v11 = v26;
    v12 = v27;
    v13 = v28;
    v14 = v25;
    v15 = (_QWORD *)v9;
    v16 = (uint64_t)v30;
    v23 = v15;
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = v10;
    v15[5] = v11;
    v15[6] = v12;
    v15[7] = v13;
    v15[8] = v14;
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(v16, (uint64_t)&async function pointer to partial apply for closure #1 in DaemonConnection.send(_:completion:), (uint64_t)v15);
  }
  else
  {
    swift_retain();
    v21 = 0;
    type metadata accessor for GPKError();
    v19 = &v34;
    v34 = 12;
    v18 = default argument 1 of GPKError.init(code:userInfo:)();
    v20 = GPKError.__allocating_init(code:userInfo:)(v19, v18);
    v22 = 1;
    v26(v20, v21);
    outlined consume of Result<Data, Error>(v20, v21, v22 & 1);
  }
  return swift_release();
}

void outlined consume of Result<Data, Error>(void *a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    outlined consume of Data._Representation((uint64_t)a1, a2);
}

uint64_t closure #1 in DaemonConnection.send(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[55] = a8;
  v8[54] = a7;
  v8[53] = a6;
  v8[52] = a5;
  v8[51] = a4;
  v8[43] = v8;
  v8[44] = 0;
  v8[29] = 0;
  v8[30] = 0;
  v8[31] = 0;
  v8[32] = 0;
  v8[46] = 0;
  v8[47] = 0;
  v8[49] = 0;
  v8[41] = 0;
  v8[42] = 0;
  v8[44] = a4;
  v8[29] = a5;
  v8[30] = a6;
  v8[31] = a7;
  v8[32] = a8;
  return swift_task_switch();
}

uint64_t closure #1 in DaemonConnection.send(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  id v9;
  id v10;
  uint64_t v11;
  os_log_type_t v12;
  Swift::String fileID;
  void *_;
  unint64_t v15;
  uint64_t v16;
  Class isa;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Class v23;
  char v24;
  char v25;
  char v26;

  v21 = *(_QWORD *)(v0 + 424);
  v20 = *(_QWORD *)(v0 + 416);
  *(_QWORD *)(v0 + 344) = v0;
  v23 = DaemonConnection.getConnection()();
  swift_retain();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v20;
  *(_QWORD *)(v1 + 24) = v21;
  *(_QWORD *)(v0 + 112) = partial apply for closure #1 in closure #1 in DaemonConnection.send(_:completion:);
  *(_QWORD *)(v0 + 120) = v1;
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 88) = 1107296256;
  *(_DWORD *)(v0 + 92) = 0;
  *(_QWORD *)(v0 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  *(_QWORD *)(v0 + 104) = &block_descriptor_38;
  v22 = _Block_copy((const void *)(v0 + 80));
  swift_release();
  -[objc_class remoteObjectProxyWithErrorHandler:](v23, sel_remoteObjectProxyWithErrorHandler_, v22);
  _Block_release(v22);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any(v0 + 168, v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DaemonServiceProviding);
  if ((swift_dynamicCast() & 1) != 0)
    v18 = *(void **)(v19 + 360);
  else
    v18 = 0;
  *(_QWORD *)(v19 + 448) = v18;
  if (v18)
  {
    v15 = *(_QWORD *)(v19 + 440);
    v16 = *(_QWORD *)(v19 + 432);
    *(_QWORD *)(v19 + 376) = v18;
    *(_QWORD *)(v19 + 264) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v19 + 272) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Got remote object: ", 0x13uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    *(_QWORD *)(v19 + 384) = v18;
    *(_QWORD *)(v19 + 280) = String.init<A>(describing:)();
    *(_QWORD *)(v19 + 288) = v4;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v11 = String.init(stringInterpolation:)();
    _ = v6;
    fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/DaemonConnection.swift", 0x1FuLL, 1);
    v12 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v25);
    v7._countAndFlagsBits = v11;
    v7._object = _;
    v26 = v25 & 1;
    gpklog(_:type:fileID:line:subsystem:)(v7, v12, fileID, 126, (GroupKit::LogSubsystem)&v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getObjectType();
    outlined copy of Data._Representation(v16, v15);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v19 + 456) = isa;
    outlined consume of Data._Representation(v16, v15);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v19 + 344);
    *(_QWORD *)(v19 + 56) = v19 + 296;
    *(_QWORD *)(v19 + 24) = closure #1 in DaemonConnection.send(_:completion:);
    *(_QWORD *)(v19 + 160) = swift_continuation_init();
    *(_QWORD *)(v19 + 128) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v19 + 136) = 0x40000000;
    *(_DWORD *)(v19 + 140) = 0;
    *(_QWORD *)(v19 + 144) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> () with result type Data;
    *(_QWORD *)(v19 + 152) = &block_descriptor_39;
    objc_msgSend(v18, sel_sendMessageWith_completionHandler_, isa, v19 + 128);
    return __swift_continuation_await_point(v19 + 16);
  }
  else
  {
    type metadata accessor for InternalError();
    v24 = 1;
    v10 = InternalError.__allocating_init(_:internalInfo:)(&v24, 0);
    *(_QWORD *)(v19 + 368) = v10;
    type metadata accessor for GPKError();
    v9 = v10;
    GPKError.__allocating_init(internalError:)(v10);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_0(v19 + 168);
    return (*(uint64_t (**)(void))(*(_QWORD *)(v19 + 344) + 8))();
  }
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[43] = *v0;
  v1[58] = v1[6];
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  void (*v3)(void *, unint64_t);
  void *v4;
  unint64_t v5;

  v1 = (void *)v0[57];
  v3 = (void (*)(void *, unint64_t))v0[52];
  v0[43] = v0;
  v4 = (void *)v0[37];
  v5 = v0[38];
  v0[41] = v4;
  v0[42] = v5;

  swift_retain();
  outlined copy of Data._Representation((uint64_t)v4, v5);
  v3(v4, v5);
  outlined consume of Result<Data, Error>(v4, v5, 0);
  swift_release();
  outlined consume of Data._Representation((uint64_t)v4, v5);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 21));
  return (*(uint64_t (**)(void))(v0[43] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  id v7;
  id v9;
  uint64_t v10;
  os_log_type_t v11;
  Swift::String fileID;
  void *_;
  void (*v14)(id, _QWORD, uint64_t);
  id v15;
  void *v16;
  char v17;
  char v18;

  v16 = (void *)v0[58];
  v9 = (id)v0[57];
  v14 = (void (*)(id, _QWORD, uint64_t))v0[52];
  v0[43] = v0;
  swift_willThrow();

  v1 = v16;
  v0[49] = v16;
  v0[39] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[40] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error Sending message to remote object: ", 0x28uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[50] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v10 = String.init(stringInterpolation:)();
  _ = v5;
  v11 = static os_log_type_t.error.getter();
  fileID = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit/DaemonConnection.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(&v17);
  v6._countAndFlagsBits = v10;
  v6._object = _;
  v18 = v17 & 1;
  gpklog(_:type:fileID:line:subsystem:)(v6, v11, fileID, 132, (GroupKit::LogSubsystem)&v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  type metadata accessor for GPKError();
  v7 = v16;
  v15 = GPKError.__allocating_init(internalError:)(v16);
  v14(v15, 0, 1);
  outlined consume of Result<Data, Error>(v15, 0, 1);
  swift_release();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 21));
  return (*(uint64_t (**)(void))(v0[43] + 8))();
}

