uint64_t sub_2382CF69C@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int *v17;
  uint64_t v18;

  v17 = (int *)nullsub_1(a3 + 16, a3 + 32, a7, a10, a11);
  return sub_2382CF744(v17, v18, a1, a2, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2382CF744@<X0>(int *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint8x8_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t TupleTypeMetadata2;
  _QWORD *v82;
  uint64_t v83;
  _BYTE *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v75 = a6;
  v76 = a7;
  v80 = a3;
  v84 = a9;
  v85 = (char *)a2;
  v86 = a11;
  v83 = type metadata accessor for _HashNode.Builder(255, a8, a10, a12);
  v16 = sub_23835B334();
  v17 = *(_QWORD **)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v74 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v77 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v79 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v78 = (char *)&v74 - v22;
  v23 = type metadata accessor for _HashNode.Builder.Kind(0, a8, a10, a12);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v74 - v26;
  v82 = a4;
  v28 = *a4;
  v87 = a5;
  v29 = v28 >> a5;
  v30 = *a1;
  v31 = 1 << (v28 >> a5);
  if ((v31 & *a1) != 0)
  {
    v75 = v27;
    v76 = v24;
    v25.i32[0] = (v31 - 1) & v30;
    v32 = (uint8x8_t)vcnt_s8(v25);
    v32.i16[0] = vaddlv_u8(v32);
    v33 = v86;
    v34 = _HashNode.UnsafeHandle.itemPtr(at:)(v32.u32[0], (uint64_t)a1, (uint64_t)v85);
    v35 = _HashNode.UnsafeHandle.reverseItems.getter();
    v88 = v35;
    v89 = v36;
    MEMORY[0x24BDAC7A8](v35);
    *(&v74 - 6) = a8;
    *(&v74 - 5) = a10;
    *(&v74 - 4) = v33;
    *(&v74 - 3) = a12;
    v73 = v34;
    v37 = sub_23835B3A0();
    MEMORY[0x23B831670](MEMORY[0x24BEE1D40], v37);
    v38 = v92;
    sub_23835B1E4();
    v92 = v38;
    if (v91 == 1)
    {
      v39 = (uint64_t)v75;
      swift_storeEnumTagMultiPayload();
      v40 = v84;
      v41 = v84;
      v42 = v87;
      v43 = v39;
    }
    else
    {
      v86 = v87 & 0x3F;
      v57 = TupleTypeMetadata2;
      v58 = *(int *)(TupleTypeMetadata2 + 48);
      v59 = v78;
      v60 = &v78[v58];
      v80 = &v78[v58];
      v61 = v35 + *(_QWORD *)(v77 + 72) * v90 + v58;
      v62 = *(_QWORD *)(a8 - 8);
      (*(void (**)(char *))(v62 + 16))(v78);
      v63 = *(_QWORD *)(a10 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v60, v61, a10);
      LODWORD(v86) = (*v82 >> v86) & 0x1F;
      v64 = v79;
      v85 = &v79[*(int *)(v57 + 48)];
      v65 = (uint64_t)v85;
      v66 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
      v66(v79, v59, a8);
      v67 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
      v67(v65, v80, a10);
      v68 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      v69 = (uint64_t)v75;
      v70 = &v75[*(int *)(v57 + 48)];
      v66(v75, v64, a8);
      v67((uint64_t)v70, v85, a10);
      *(_BYTE *)(v69 + v68) = v86;
      swift_storeEnumTagMultiPayload();
      v40 = v84;
      v41 = v84;
      v42 = v87;
      v43 = v69;
    }
    _HashNode.Builder.init(_:_:)(v42, v43, a8, a10, a12, v41);
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v40, 0, 1);
  }
  else
  {
    TupleTypeMetadata2 = v16;
    v82 = v17;
    v44 = v86;
    v45 = a1[1];
    if ((v45 & v31) != 0)
    {
      v46 = v19;
      LODWORD(v80) = v29 & 0x1F;
      v25.i32[0] = v45 & (v31 - 1);
      v47 = (uint8x8_t)vcnt_s8(v25);
      v47.i16[0] = vaddlv_u8(v47);
      v48 = v87;
      v49 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v47.u32[0], a1, v85, a8, v86, a12);
      v50 = *v49;
      v51 = v49[1];
      swift_retain();
      _HashNode._intersection<A>(_:_:)((v48 + 5), v50, v51, v75, v76, a8, a10, v44, a12);
      v52 = swift_release();
      MEMORY[0x24BDAC7A8](v52);
      *(&v74 - 6) = a8;
      *(&v74 - 5) = a10;
      *(&v74 - 4) = v44;
      *(&v74 - 3) = a12;
      LOBYTE(v73) = v48;
      BYTE1(v73) = (_BYTE)v80;
      v53 = TupleTypeMetadata2;
      v54 = v92;
      sub_23828E824((void (*)(char *, char *))sub_2382D0358, (uint64_t)(&v74 - 8), MEMORY[0x24BEE4078], v83, v55, (uint64_t)v84);
      v92 = v54;
      return ((uint64_t (*)(char *, uint64_t))v82[1])(v46, v53);
    }
    else
    {
      v71 = (uint64_t)v27;
      swift_storeEnumTagMultiPayload();
      v72 = v84;
      _HashNode.Builder.init(_:_:)(v87, v71, a8, a10, a12, v84);
      return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v72, 0, 1);
    }
  }
}

uint64_t sub_2382CFC88@<X0>(int *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  _QWORD *v19;

  v18 = nullsub_1(a3 + 16, a3 + 32, a6, a8, a10);
  return sub_2382CFD34(v18, v19, a5, a1, a2, a3, a4, a6, a9, a7, a8, a10);
}

uint64_t sub_2382CFD34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, char *a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int8x8_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  _BYTE *v61;
  _BYTE *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint8x8_t v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v96 = a6;
  v97 = a7;
  v103 = a9;
  v104 = a5;
  v111 = a3;
  v99 = a1;
  v105 = a11;
  v15 = type metadata accessor for _HashNode.Builder(0, a8, a10, a12);
  v106 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v95 = (char *)&v93 - v16;
  v102 = v17;
  v18 = sub_23835B334();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v93 - v23;
  v108 = a12;
  v100 = type metadata accessor for _HashNode.Builder.Kind(0, a8, a10, a12);
  MEMORY[0x24BDAC7A8](v100);
  v101 = (uint64_t *)((char *)&v93 - v25);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v27 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v29 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v35 = (char *)&v93 - v34;
  v36 = (*a2 >> v32) & 0x1FLL;
  v37 = *a4;
  v38 = 1 << (*a2 >> v32);
  if ((v38 & *a4) != 0)
  {
    v95 = v35;
    v96 = v29;
    v97 = v30;
    v98 = v36;
    v33.i32[0] = (v38 - 1) & v37;
    v39 = (uint8x8_t)vcnt_s8(v33);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v108;
    v41 = _HashNode.UnsafeHandle.itemPtr(at:)(v39.u32[0], v31, v104);
    v42 = v105;
    v109 = _HashNode.UnsafeHandle.reverseItems.getter();
    v110 = v43;
    MEMORY[0x24BDAC7A8](v109);
    *(&v93 - 6) = a8;
    *(&v93 - 5) = a10;
    *(&v93 - 4) = (uint64_t)v42;
    *(&v93 - 3) = v40;
    v92 = v41;
    swift_getTupleTypeMetadata2();
    v44 = sub_23835B3A0();
    MEMORY[0x23B831670](MEMORY[0x24BEE1D30], v44);
    v45 = v107;
    v46 = a8;
    if ((sub_23835B01C() & 1) != 0)
    {
      v47 = v97;
      v48 = *(int *)(v97 + 48);
      v107 = v45;
      v49 = v95;
      v50 = &v95[v48];
      v51 = v41 + v48;
      v52 = *(_QWORD *)(a8 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v95, v41, a8);
      v53 = *(_QWORD *)(a10 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v50, v51, a10);
      v54 = v96;
      v105 = &v96[*(int *)(v47 + 48)];
      v55 = v105;
      v56 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      v56(v96, v49, v46);
      v57 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
      v57(v55, v50, a10);
      v58 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      v59 = v101;
      v60 = (char *)v101 + *(int *)(v47 + 48);
      v56((char *)v101, v54, v46);
      v57(v60, v105, a10);
      *((_BYTE *)v59 + v58) = v98;
      swift_storeEnumTagMultiPayload();
      v61 = v103;
      v62 = v103;
      v63 = v111;
      v64 = (uint64_t)v59;
    }
    else
    {
      v87 = v101;
      swift_storeEnumTagMultiPayload();
      v61 = v103;
      v62 = v103;
      v63 = v111;
      v64 = (uint64_t)v87;
    }
    _HashNode.Builder.init(_:_:)(v63, v64, v46, a10, v108, v62);
    goto LABEL_9;
  }
  v65 = a8;
  v94 = v22;
  v99 = v19;
  v66 = v105;
  v67 = v108;
  v68 = *(_DWORD *)(v31 + 4);
  if ((v68 & v38) == 0)
  {
    v89 = (uint64_t)v101;
    v90 = v32;
    swift_storeEnumTagMultiPayload();
    v61 = v103;
    _HashNode.Builder.init(_:_:)(v90, v89, v65, a10, v67, v103);
LABEL_9:
    v80 = v102;
    v79 = v106;
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v61, 0, 1, v80);
  }
  v69 = v18;
  v98 = v36;
  v33.i32[0] = v68 & (v38 - 1);
  v70 = (uint8x8_t)vcnt_s8(v33);
  v70.i16[0] = vaddlv_u8(v70);
  v71 = v32;
  v72 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v70.u32[0], v31, v104, v65, a10, v108);
  v74 = *v72;
  v73 = v72[1];
  swift_retain();
  _HashNode._intersection<A>(_:_:)((v71 + 5), v96, v97, v74, v73, v65, a10, v66, v67);
  swift_release();
  v75 = v99;
  v76 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  v77 = v94;
  v105 = v24;
  v78 = v69;
  v76(v94, v24, v69);
  v79 = v106;
  v80 = v102;
  v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48))(v77, 1, v102);
  v82 = v77;
  v61 = v103;
  if (v81 == 1)
  {
    v83 = *(void (**)(char *, uint64_t))(v75 + 8);
    v83(v82, v69);
    v84 = *v72;
    v85 = v72[1];
    swift_retain();
    v83(v105, v78);
    v79 = v106;
    v86 = (uint64_t)v101;
    *v101 = v84;
    *(_QWORD *)(v86 + 8) = v85;
    swift_storeEnumTagMultiPayload();
    _HashNode.Builder.init(_:_:)(v111, v86, v65, a10, v108, v61);
  }
  else
  {
    v91 = (uint64_t)v95;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v95, v82, v80);
    static _HashNode.Builder.childBranch(_:_:at:)(v111, v91, v98, v65, a10, v108, (uint64_t)v61);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v91, v80);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v105, v78);
  }
  return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v61, 0, 1, v80);
}

void sub_2382D0358(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  static _HashNode.Builder.childBranch(_:_:at:)(*(unsigned __int8 *)(v2 + 48), a1, *(unsigned __int8 *)(v2 + 49), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a2);
}

uint64_t Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  if (sub_23835B0D0() == a3)
    sub_23835B964();
  return sub_23835AFBC();
}

uint64_t static Array._isWCSIABroken()()
{
  sub_23835B964();
  return 0;
}

uint64_t sub_2382D0458()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];

  v2 = *v0;
  v1 = v0[1];
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v4 = 7;
  if (((v1 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  v5 = sub_2382666B0(v4 | (v3 << 16), *v0, v0[1]);
  if (v5 < 0x4000)
    goto LABEL_23;
  v6 = v5;
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_24:
    v16 = sub_23835ADC4();
    return sub_2382D1234(v16);
  }
  if ((v1 & 0x2000000000000000) != 0)
  {
    v18[0] = v2;
    v18[1] = v1 & 0xFFFFFFFFFFFFFFLL;
    v12 = (char *)v18 + (v5 >> 16);
    if ((*(v12 - 1) & 0xC0) == 0x80)
    {
      v9 = 0;
      v13 = v12 - 2;
      do
        v14 = v13[v9--] & 0xC0;
      while (v14 == 128);
      goto LABEL_18;
    }
LABEL_19:
    v15 = 1;
    goto LABEL_20;
  }
  if ((v2 & 0x1000000000000000) != 0)
    v7 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  else
    v7 = sub_23835B634();
  v8 = (v6 >> 16) + v7;
  if ((*(_BYTE *)(v8 - 1) & 0xC0) != 0x80)
    goto LABEL_19;
  v9 = 0;
  v10 = v8 - 2;
  do
    v11 = *(_BYTE *)(v10 + v9--) & 0xC0;
  while (v11 == 128);
LABEL_18:
  v15 = 1 - v9;
LABEL_20:
  v16 = (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  return sub_2382D1234(v16);
}

uint64_t sub_2382D05A4(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v5 = v4;
  v86 = a3;
  v9 = sub_23835BAFC();
  v82 = *(_QWORD *)(v9 - 8);
  v83 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v91 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = HIBYTE(a2) & 0xF;
  v71 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a2) & 0xF;
  else
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      return 11;
    else
      return 7;
  }
  v12 = v4[1];
  if ((v12 & 0x1000000000000000) != 0)
  {
LABEL_121:
    v13 = sub_23835AEA8();
  }
  else if ((v12 & 0x2000000000000000) != 0)
  {
    v13 = HIBYTE(v12) & 0xF;
  }
  else
  {
    v13 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  v79 = v13;
  v80 = 0;
  v81 = 4 * v11;
  v75 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v76 = a2 & 0xFFFFFFFFFFFFFFLL;
  v16 = 1;
  v14 = 15;
  v78 = (v13 << 16) | 4;
  v70 = v5;
  v69 = a1;
  v68 = a4;
  v67 = a2;
  while (1)
  {
    if (v81 <= v14 >> 14)
      return v14;
    sub_23826720C(v14, a1, a2);
    v87 = v14;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v17 = sub_23835B5A4();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v93 = a1;
        v94 = v76;
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((a1 & 0x1000000000000000) == 0)
          sub_23835B634();
        swift_bridgeObjectRetain();
      }
      v17 = sub_23835B640();
      swift_bridgeObjectRelease();
    }
    v18 = sub_23835BB08();
    v11 = v19;
    if ((v16 & 1) != 0)
      break;
LABEL_81:
    if (v17 > 0x7F)
    {
      v64 = (v17 & 0x3F) << 8;
      if (v17 >= 0x800)
      {
        v65 = (v64 | (v17 >> 6) & 0x3F) << 8;
        v66 = (((v65 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
        v44 = (v65 | (v17 >> 12)) + 8487393;
        if (HIWORD(v17))
          v44 = v66;
      }
      else
      {
        v44 = (v64 | (v17 >> 6)) + 33217;
      }
    }
    else
    {
      v44 = v17 + 1;
    }
    v93 = (v44 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v44) >> 3))));
    if (v18 == MEMORY[0x23B83074C](&v93) && v11 == v45)
      v47 = 1;
    else
      v47 = sub_23835B928();
    swift_bridgeObjectRelease();
    sub_23835AE90();
    v48 = sub_23835AF80();
    v50 = v49;
    v52 = v51;
    v54 = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23825B288(v48, v50, v52, v54);
    swift_bridgeObjectRelease_n();
    v55 = sub_23826720C(v87, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v14 = sub_23835ADB8();
      v57 = v79;
    }
    else
    {
      v56 = v55 >> 16;
      v57 = v79;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v93 = a1;
        v94 = v76;
        v59 = *((unsigned __int8 *)&v93 + v56);
      }
      else
      {
        v58 = v75;
        if ((a1 & 0x1000000000000000) == 0)
          v58 = sub_23835B634();
        v59 = *(unsigned __int8 *)(v58 + v56);
      }
      v60 = (char)v59;
      v61 = __clz(v59 ^ 0xFF) - 24;
      if (v60 >= 0)
        LOBYTE(v61) = 1;
      v14 = ((v56 + v61) << 16) | 5;
    }
    v11 = *v5;
    v62 = v5[1];
    if ((v62 & 0x1000000000000000) != 0)
    {
      MEMORY[0x23B83080C](15, v57, *v5, v5[1]);
    }
    else
    {
      if ((v57 & 0x8000000000000000) != 0)
      {
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      if ((v62 & 0x2000000000000000) != 0)
        v63 = HIBYTE(v62) & 0xF;
      else
        v63 = v11 & 0xFFFFFFFFFFFFLL;
      if (v63 < v57)
        goto LABEL_119;
    }
    v16 = v47 ^ 1;
    if (sub_23835AEF0() >= (uint64_t)a4)
      return v14;
  }
  v77 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v91, v86, v83);
  swift_bridgeObjectRetain();
  a4 = sub_23835AF80();
  v21 = v20;
  v23 = v22;
  a1 = v24;
  swift_bridgeObjectRelease();
  v25 = v80;
  v26 = sub_2382D10F4(a4, v21, v23, a1);
  v80 = v25;
  if ((v27 & 0x100) == 0)
  {
    if ((v27 & 1) == 0)
    {
      a2 = v26;
      swift_bridgeObjectRetain();
      v28 = sub_23835B430();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v29 = sub_23835B430();
      swift_bridgeObjectRelease_n();
      a4 = v28;
      if (v29 >> 14 < v28 >> 14)
        goto LABEL_120;
LABEL_78:
      v17 = v77;
      if (a4 < 0x4000)
        goto LABEL_80;
      goto LABEL_79;
    }
LABEL_76:
    swift_bridgeObjectRelease();
    v17 = v77;
LABEL_79:
    swift_bridgeObjectRelease();
    v18 = sub_23835BB08();
    v11 = v43;
LABEL_80:
    (*(void (**)(char *, uint64_t))(v82 + 8))(v91, v83);
    v5 = v70;
    a1 = v69;
    a4 = v68;
    a2 = v67;
    goto LABEL_81;
  }
  v89 = (uint64_t *)(a4 >> 14);
  v92 = v21 >> 14;
  if (a4 >> 14 >= v21 >> 14)
    goto LABEL_76;
  v30 = (v23 >> 59) & 1;
  if ((a1 & 0x1000000000000000) == 0)
    LOBYTE(v30) = 1;
  v31 = 4 << v30;
  v32 = HIBYTE(a1) & 0xF;
  v74 = v32;
  v73 = v23 & 0xFFFFFFFFFFFFLL;
  if ((a1 & 0x2000000000000000) == 0)
    v32 = v23 & 0xFFFFFFFFFFFFLL;
  v88 = v32;
  v84 = (a1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v85 = a1 & 0xFFFFFFFFFFFFFFLL;
  v5 = v89;
  v90 = v31;
  while (1)
  {
    v33 = a4 & 0xC;
    v34 = (a4 & 1) == 0 || v33 == v31;
    a2 = v34;
    if (v34)
    {
      v35 = a4;
      if (v33 == v31)
        v35 = sub_2382A6050(a4, v23, a1);
      if (v88 <= v35 >> 16)
      {
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      if ((v35 & 1) == 0)
        v35 = v35 & 0xC | sub_23826674C(v35, v23, a1) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    else
    {
      v35 = a4;
      if (v88 <= a4 >> 16)
        goto LABEL_115;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v39 = sub_23835ADB8();
      if (!(_DWORD)a2)
        goto LABEL_53;
    }
    else
    {
      v36 = v35 >> 16;
      if ((a1 & 0x2000000000000000) != 0)
      {
        v93 = v23;
        v94 = v85;
        v38 = *((unsigned __int8 *)&v93 + v36);
      }
      else
      {
        v37 = v84;
        if ((v23 & 0x1000000000000000) == 0)
          v37 = sub_23835B634();
        v38 = *(unsigned __int8 *)(v37 + v36);
      }
      v40 = (char)v38;
      v41 = __clz(v38 ^ 0xFF) - 24;
      if (v40 >= 0)
        LOBYTE(v41) = 1;
      v39 = ((v36 + v41) << 16) | 5;
      if (!(_DWORD)a2)
      {
LABEL_53:
        if (a4 >> 14 < (unint64_t)v89 || a4 >> 14 >= v92)
          goto LABEL_116;
LABEL_65:
        if ((a1 & 0x1000000000000000) != 0)
          goto LABEL_73;
        goto LABEL_66;
      }
    }
    v42 = a4;
    if (v33 == v90)
      v42 = sub_2382A6050(a4, v23, a1);
    if (v42 >> 14 < (unint64_t)v89 || v42 >> 14 >= v92)
      goto LABEL_117;
    if ((v42 & 1) != 0)
      goto LABEL_65;
    sub_23826674C(v42, v23, a1);
    if ((a1 & 0x1000000000000000) != 0)
    {
LABEL_73:
      sub_23835B5A4();
      goto LABEL_74;
    }
LABEL_66:
    if ((a1 & 0x2000000000000000) != 0)
    {
      v93 = v23;
      v94 = v85;
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v23 & 0x1000000000000000) == 0)
        sub_23835B634();
      swift_bridgeObjectRetain();
    }
    sub_23835B640();
    swift_bridgeObjectRelease();
LABEL_74:
    if ((sub_23835BAE4() & 1) != 0)
      break;
    v5 = (uint64_t *)(v39 >> 14);
    a4 = v39;
    v31 = v90;
    if (v39 >> 14 >= v92)
      goto LABEL_76;
  }
  result = swift_bridgeObjectRelease();
  if ((unint64_t)v5 <= v39 >> 14)
    goto LABEL_78;
  __break(1u);
  return result;
}

uint64_t sub_2382D0EA8(unint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = v2;
  v4 = *v2;
  v5 = v3[1];
  if ((v5 & 0x2000000000000000) != 0)
    v6 = HIBYTE(v5) & 0xF;
  else
    v6 = v4 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  if (v6)
  {
    do
    {
      swift_bridgeObjectRetain();
      v7 = sub_2382672A8(a1, a2);
      swift_bridgeObjectRelease();
      if ((v7 & 0x100000000) != 0)
        break;
      sub_23835ADE8();
      v8 = v5;
      v9 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v9 = v4;
      if (((v5 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0)
        v10 = 11;
      else
        v10 = 7;
      v11 = v10 | (v9 << 16);
      swift_bridgeObjectRetain();
      v12 = sub_23835AE3C();
      swift_bridgeObjectRelease();
      if (sub_23826648C(v12, v11, v4, v8) == 1)
      {
        swift_bridgeObjectRetain();
        sub_2382D1640(1uLL, a1, a2);
        swift_bridgeObjectRelease();
        sub_2382D16DC();
        sub_23835ADDC();
        swift_bridgeObjectRelease();
        *v3 = v4;
        v3[1] = v8;
        return swift_bridgeObjectRelease();
      }
      sub_2382D0458();
      sub_2382D0458();
      *v3 = v4;
      v3[1] = v8;
      sub_23835BB08();
      sub_2382D10B0();
      sub_23835AE9C();
      swift_bridgeObjectRelease();
      v4 = *v3;
      v5 = v3[1];
      v13 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v13 = *v3 & 0xFFFFFFFFFFFFLL;
    }
    while (v13);
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_2382D10B0()
{
  unint64_t result;

  result = qword_2568F1648;
  if (!qword_2568F1648)
  {
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2568F1648);
  }
  return result;
}

uint64_t sub_2382D10F4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t result;
  char v11;
  _QWORD v12[2];
  char v13;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v12[0] = a3;
    v12[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v9 = v12;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v9 = (_QWORD *)sub_23835B634();
  }
  result = sub_2382D14B0((uint64_t)v9, a1, a2, a3, a4);
  if (!v4)
  {
    v13 = v11 & 1;
LABEL_8:
    LOBYTE(v12[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_2382D11C8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_2382A6050(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

uint64_t sub_2382D1234(unint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;

  v4 = *v2;
  v3 = v2[1];
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = *v2 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    __break(1u);
    goto LABEL_24;
  }
  v1 = a1;
  v6 = sub_23826720C(a1, *v2, v2[1]);
  if ((v3 & 0x1000000000000000) != 0)
  {
LABEL_24:
    v9 = sub_23835B5A4();
    goto LABEL_12;
  }
  v7 = v6 >> 16;
  if ((v3 & 0x2000000000000000) != 0)
  {
    v19 = v4;
    v20 = v3 & 0xFFFFFFFFFFFFFFLL;
    v9 = *((unsigned __int8 *)&v19 + v7);
    if (*((char *)&v19 + v7) < 0)
      __asm { BR              X10 }
    goto LABEL_12;
  }
  if ((v4 & 0x1000000000000000) == 0)
    goto LABEL_27;
  for (i = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32; ; i = sub_23835B634())
  {
    v9 = *(unsigned __int8 *)(i + v7);
    if (*(char *)(i + v7) < 0)
      __asm { BR              X10 }
LABEL_12:
    v7 = *v2;
    v10 = v2[1];
    v11 = sub_23826720C(v1, *v2, v10);
    if ((v10 & 0x1000000000000000) != 0)
    {
      v17 = sub_23835ADB8();
    }
    else
    {
      v12 = v11 >> 16;
      if ((v10 & 0x2000000000000000) != 0)
      {
        v19 = v7;
        v20 = v10 & 0xFFFFFFFFFFFFFFLL;
        v14 = *((unsigned __int8 *)&v19 + v12);
      }
      else
      {
        v13 = (v7 & 0x1000000000000000) != 0 ? (v10 & 0xFFFFFFFFFFFFFFFLL) + 32 : sub_23835B634();
        v14 = *(unsigned __int8 *)(v13 + v12);
      }
      v15 = (char)v14;
      v16 = __clz(v14 ^ 0xFF) - 24;
      if (v15 >= 0)
        LOBYTE(v16) = 1;
      v17 = ((v12 + v16) << 16) | 5;
    }
    if (v17 >> 14 >= v1 >> 14)
      break;
    __break(1u);
LABEL_27:
    ;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1658);
  sub_2382D1720();
  sub_23835ADD0();
  return v9;
}

uint64_t sub_2382D14B0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = a2;
  v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v11 = a2 & 0xC;
  if (v11 == 4 << v9)
  {
    result = sub_2382A6050(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v12 = a2 >> 16;
      if (v11 != v10)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v13 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a5) & 0xF;
  if (v13 < a2 >> 16)
    goto LABEL_28;
  result = sub_23835AED8();
  v12 = result;
  if (v11 == v10)
  {
LABEL_14:
    result = sub_2382A6050(v8, a4, a5);
    v8 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v10)
  {
    result = sub_2382A6050(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v8 >> 16);
LABEL_21:
    if (__OFADD__(v12, result))
    {
      __break(1u);
    }
    else if (v12 + result >= v12)
    {
      return sub_23835BAD8();
    }
    __break(1u);
    goto LABEL_26;
  }
  v14 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v14 = a4 & 0xFFFFFFFFFFFFLL;
  if (v14 < v8 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= a3 >> 16)
  {
    result = sub_23835AED8();
    goto LABEL_21;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_2382D1640(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_238281D00(0xFuLL, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_23835ADF4();
  }
  __break(1u);
  return result;
}

unint64_t sub_2382D16DC()
{
  unint64_t result;

  result = qword_2568F1650;
  if (!qword_2568F1650)
  {
    result = MEMORY[0x23B831670](MEMORY[0x24BEE1D98], MEMORY[0x24BEE1D90]);
    atomic_store(result, (unint64_t *)&qword_2568F1650);
  }
  return result;
}

unint64_t sub_2382D1720()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F1660[0];
  if (!qword_2568F1660[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F1658);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE2AB0], v1);
    atomic_store(result, qword_2568F1660);
  }
  return result;
}

void BitArray.fill(in:with:)(unint64_t a1, unint64_t a2, char a3)
{
  char **v3;
  char **v4;
  char *v8;
  char isUniquelyReferenced_nonNull_native;

  v4 = v3;
  v8 = *v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_23826C260((uint64_t)v8);
    *v4 = v8;
  }
  if ((a3 & 1) != 0)
    sub_23834D518(a1, a2);
  else
    sub_23834D644(a1, a2);
  *v4 = v8;
}

Swift::Void __swiftcall BitArray.fill(with:)(Swift::Bool with)
{
  uint64_t v1;
  char *v2;
  char **v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_native;

  v3 = (char **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v1) = with;
    v2 = *v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  v2 = sub_23826C260((uint64_t)v2);
  *v3 = v2;
LABEL_3:
  if ((v1 & 1) != 0)
    sub_23834D518(0, v4);
  else
    sub_23834D644(0, v4);
  *v3 = v2;
}

void BitArray.fill<A>(in:with:)(uint64_t a1, char a2)
{
  char **v2;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;

  v4 = *v2;
  sub_2382C97B4();
  sub_23835B040();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_23826C260((uint64_t)v4);
    *v2 = v4;
  }
  if ((a2 & 1) != 0)
    sub_23834D518(v6, v7);
  else
    sub_23834D644(v6, v7);
  *v2 = v4;
}

void (*sub_2382D1988(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = sub_23835B9C4();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = sub_23835B2EC();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  sub_2382F7C8C(a2, a3, a4, v13);
  return sub_2382D1AC8;
}

void sub_2382D1AC8(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x23B831670](MEMORY[0x24BEE4238], v8);
    sub_23835B874();
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }
  else
  {
    MEMORY[0x23B831670](MEMORY[0x24BEE4238], v2[3]);
    sub_23835B874();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t OrderedDictionary.Values._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.Values._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Values._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Values.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[3];

  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v6 = type metadata accessor for OrderedDictionary.Values(0, a4, a5, a6);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v6);
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)v8, 0, 0, 0, v6);
}

uint64_t type metadata accessor for OrderedDictionary.Values(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Values);
}

uint64_t sub_2382D1D1C(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, OrderedDictionary.Values.description.getter);
}

uint64_t OrderedDictionary.Values.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  v9 = type metadata accessor for OrderedDictionary.Values(0, a4, a5, a6);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v9);
  v10 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v12, 1, 0xD000000000000012, 0x8000000238363510, v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_2382D1E6C(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, OrderedDictionary.Values.debugDescription.getter);
}

uint64_t OrderedDictionary.Values.elements.getter()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  swift_retain();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A48], v0);
  return sub_23835B0DC();
}

uint64_t OrderedDictionary.Values.withUnsafeBufferPointer<A>(_:)()
{
  return sub_23835B694();
}

_QWORD *OrderedDictionary.Values.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[3] = a4;
  v6 = *(_QWORD *)(a3 + 24);
  sub_23835B6E8();
  sub_23835B688();
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v10 = v7 + ((v9 + 32) & ~v9);
  v12[0] = v10;
  v12[1] = v8;
  a1(v12);
  return sub_23828CD3C(v12, v10, v8);
}

uint64_t sub_2382D1FD0(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, a1);
  return sub_23835B1F0();
}

uint64_t sub_2382D2004(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, a1);
  return sub_23835B1FC();
}

uint64_t sub_2382D2038@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23835B694();
  if (!v2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  return result;
}

uint64_t OrderedDictionary.Values.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23835B694();
  if (!v2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  return result;
}

uint64_t OrderedDictionary.Values.startIndex.getter()
{
  return 0;
}

uint64_t OrderedDictionary.Values.endIndex.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

Swift::Int __swiftcall OrderedDictionary.Values.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedDictionary.Values.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Values.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

void (*sub_2382D21D0(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  sub_23835B724();
  return sub_2382CB15C;
}

uint64_t sub_2382D223C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return sub_2382F7C8C(a1, a2, v6, a3);
}

uint64_t sub_2382D2284(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, a1);
  return sub_23835B16C();
}

uint64_t OrderedDictionary.Values.subscript.getter()
{
  return sub_23835B724();
}

void (*OrderedDictionary.Values.subscript.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_23835B6E8();
  v2[4] = sub_23835B718();
  return sub_2382D2360;
}

uint64_t OrderedDictionary.Values.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = sub_23835B6E8();
  sub_23835B688();
  v8 = *(_QWORD *)(v3 + 16);
  sub_2382E6D94(a2, v8);
  v9 = *(_QWORD *)(v6 - 8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v8+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * a2, a1, v6);
  nullsub_1(v7, v10, v11, v12, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v6);
}

Swift::Void __swiftcall OrderedDictionary.Values.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;

  v2 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v2);
  sub_23835ACE0();
}

uint64_t OrderedDictionary.Values.partition(by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v1);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v1);
  result = sub_23835AD04();
  if (!v0)
    return v3;
  return result;
}

_QWORD *OrderedDictionary.Values.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v16 = a3;
  v8 = *(_QWORD *)(a2 + 24);
  sub_23835B6E8();
  sub_23835B688();
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v15[0] = v12;
  v15[1] = v10;
  a1(v15);
  if (v5)
    return sub_23828CD3C(v15, v12, v10);
  v14 = v16;
  sub_23828CD3C(v15, v12, v10);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 0, 1, v14);
}

uint64_t sub_2382D2604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a3 + 24);
  sub_23835B6E8();
  v5 = (void (*)(uint64_t *, _QWORD))sub_23835B718();
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v7, a1, v4);
  v5(&v9, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

void (*sub_2382D2690(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_23835B6E8();
  v2[4] = sub_23835B718();
  return sub_2382D2360;
}

uint64_t sub_2382D2704()
{
  sub_2382D2E64();
  swift_release();
  swift_release();
  return swift_release();
}

void (*sub_2382D2750(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_2382D1988(v8, a2, a3, a4);
  return sub_2382C9030;
}

uint64_t sub_2382D27B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v3);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v3);
  result = sub_23835AD04();
  if (!v1)
    *a1 = v5;
  return result;
}

uint64_t sub_2382D2858()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v0);
  return sub_23835ACE0();
}

_QWORD *sub_2382D28BC@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v16 = a2;
  v8 = *(_QWORD *)(a3 + 24);
  sub_23835B6E8();
  sub_23835B688();
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v15[0] = v12;
  v15[1] = v10;
  a1(v15);
  if (v5)
    return sub_23828CD3C(v15, v12, v10);
  v14 = v16;
  sub_23828CD3C(v15, v12, v10);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 0, 1, v14);
}

uint64_t static OrderedDictionary.Values<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = type metadata accessor for OrderedDictionary.Values(0, a7, a8, a9);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v9);
  return sub_23835B028() & 1;
}

uint64_t sub_2382D2A3C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return static OrderedDictionary.Values<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4]) & 1;
}

uint64_t OrderedDictionary.Values<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[4];

  v8 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = v11;
  v21[2] = v12;
  v21[3] = v13;
  v17 = type metadata accessor for OrderedDictionary.Values(0, v14, v15, v16);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v17);
  sub_23835B208();
  sub_23835BA00();
  v21[0] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  if (_s19CollectionsInternal4HeapV5countSivg_0())
  {
    v18 = 0;
    while (1)
    {
      result = sub_23835B724();
      v20 = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      sub_23835ABFC();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a6);
      ++v18;
      if (v20 == _s19CollectionsInternal4HeapV5countSivg_0())
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.Values<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[72];

  sub_23835B9E8();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_23835BA48();
}

uint64_t sub_2382D2C80(uint64_t a1)
{
  uint64_t *v1;

  return OrderedDictionary.Values<>.hashValue.getter(*v1, v1[1], v1[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_2382D2C9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedDictionary.Values<>.hash(into:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_2382D2CB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  sub_23835B9E8();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return sub_23835BA48();
}

void sub_2382D2D14()
{
  JUMPOUT(0x23B831670);
}

void sub_2382D2D24()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382D2D34(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_2382D2D7C()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382D2D8C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2382D2DD4()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382D2DE4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4220], a1, &v3);
}

uint64_t sub_2382D2E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B831670](&protocol conformance descriptor for <> OrderedDictionary<A, B>.Values, a1, &v4);
}

uint64_t sub_2382D2E64()
{
  uint64_t v0;

  v0 = sub_23835B9C4();
  MEMORY[0x23B831670](MEMORY[0x24BEE4238], v0);
  return sub_23835B874();
}

uint64_t TreeSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v9 = *(_QWORD *)(a2 - 8);
  v33 = a1;
  v34 = v9;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  v31 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18 = (char *)&v30 - v17;
  v19 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for TreeSet(0, a2, a4, v22);
  if (v23 == a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, v33, a3);
    swift_dynamicCast();
  }
  else
  {
    v24 = v23;
    v35 = TreeSet.init()(a2, a4);
    v36 = v25;
    v37 = v26;
    v30 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v33, a3);
    sub_23835AF8C();
    v31 = a3;
    swift_getAssociatedConformanceWitness();
    sub_23835B484();
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    if (v27(v14, 1, a2) != 1)
    {
      v28 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      do
      {
        v28(v11, v14, a2);
        sub_238282E20((uint64_t)v11, v24);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
        sub_23835B484();
      }
      while (v27(v14, 1, a2) != 1);
    }
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v31);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, AssociatedTypeWitness);
  }
  return v35;
}

uint64_t TreeSet.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_2568F09D0 != -1)
    swift_once();
  v4 = _HashNode.init(storage:count:)(_emptySingleton, 0, a1, MEMORY[0x24BEE4AE0] + 8, a2);
  v6 = TreeSet.init(_new:)(v4, v5, a1, a2);
  swift_retain();
  return v6;
}

uint64_t TreeSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  _HashNode.mapValues<A>(_:)((void (*)(char *, char *))sub_2382D33A8, (uint64_t)v13, a1, a2, a4, a5, MEMORY[0x24BEE4AE0] + 8, a6);
  v9 = v8;
  v11 = v10;
  swift_release();
  return TreeSet.init(_new:)(v9, v11, a4, a6);
}

uint64_t sub_2382D32D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v13 - v10, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
}

uint64_t sub_2382D33A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382D32D0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t TreeDictionary.Keys._base.getter()
{
  return swift_retain();
}

uint64_t TreeDictionary.Keys._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*TreeDictionary.Keys._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t TreeDictionary.keys.getter()
{
  return swift_retain();
}

uint64_t TreeDictionary.Keys.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[3];

  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v6 = type metadata accessor for TreeDictionary.Keys(0, a4, a5, a6);
  MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>.Keys, v6);
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)v8, 0, 0, 0, v6);
}

uint64_t type metadata accessor for TreeDictionary.Keys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeDictionary.Keys);
}

uint64_t sub_2382D34E4(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, TreeDictionary.Keys.description.getter);
}

uint64_t TreeDictionary.Keys.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v13 = sub_238315BAC();
  v14 = v9;
  sub_23835AE90();
  v10 = type metadata accessor for TreeDictionary.Keys(0, a4, a5, a6);
  MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>.Keys, v10);
  v11 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v15, 1, v13, v14, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_2382D35C0(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, TreeDictionary.Keys.debugDescription.getter);
}

uint64_t TreeDictionary.Keys.Iterator._base.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for TreeDictionary.Iterator(0, a1[2], a1[3], a1[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

__n128 TreeDictionary.Keys.Iterator._base.setter(uint64_t a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[7];
  _OWORD v12[2];

  v3 = v1[7];
  v11[6] = v1[6];
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v1 + 123);
  v4 = v1[3];
  v11[2] = v1[2];
  v11[3] = v4;
  v5 = v1[5];
  v11[4] = v1[4];
  v11[5] = v5;
  v6 = v1[1];
  v11[0] = *v1;
  v11[1] = v6;
  sub_2382735AC((uint64_t)v11);
  v7 = *(_OWORD *)(a1 + 112);
  v1[6] = *(_OWORD *)(a1 + 96);
  v1[7] = v7;
  *(_OWORD *)((char *)v1 + 123) = *(_OWORD *)(a1 + 123);
  v8 = *(_OWORD *)(a1 + 48);
  v1[2] = *(_OWORD *)(a1 + 32);
  v1[3] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v9;
  result = *(__n128 *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = result;
  return result;
}

uint64_t (*TreeDictionary.Keys.Iterator._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

__n128 TreeDictionary.Keys.Iterator.init(_base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 123) = *(_OWORD *)(a1 + 123);
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TreeDictionary.Keys.Iterator.next()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = sub_23835B334();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15 - v9;
  v11 = (_QWORD *)type metadata accessor for TreeDictionary.Iterator(0, v4, v5, a1[4]);
  TreeDictionary.Iterator.next()(v11, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v10, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  }
  else
  {
    v13 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v14 = *(_QWORD *)(v4 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v10, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v13, v5);
  }
}

uint64_t TreeDictionary.Keys.makeIterator()@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[7];
  _OWORD v9[2];

  TreeDictionary.makeIterator()(a1, (uint64_t)v8);
  v3 = v9[0];
  a2[6] = v8[6];
  a2[7] = v3;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)((char *)v9 + 11);
  v4 = v8[3];
  a2[2] = v8[2];
  a2[3] = v4;
  v5 = v8[5];
  a2[4] = v8[4];
  a2[5] = v5;
  v6 = v8[1];
  *a2 = v8[0];
  a2[1] = v6;
  return swift_retain();
}

BOOL TreeDictionary.Keys._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = sub_238358A4C();
  return _HashNode.containsKey(_:_:_:)(0, a1, v13, a2, a3, a5, a6, a7);
}

BOOL TreeDictionary.Keys.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = sub_238358A4C();
  return _HashNode.containsKey(_:_:_:)(0, a1, v13, a2, a3, a5, a6, a7);
}

__n128 sub_2382D395C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[7];
  _OWORD v8[2];

  TreeDictionary.Keys.makeIterator()(*v1, v7);
  swift_release();
  v3 = v8[0];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v8 + 11);
  v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  v5 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v5;
  result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2382D39D4(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>.Keys, a1);
  return sub_23835B1F0();
}

BOOL sub_2382D3A08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return TreeDictionary.Keys._customContainsEquatableElement(_:)(a1, *v4, v4[1], a4, a2[2], a2[3], a2[4]);
}

uint64_t sub_2382D3A1C(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>.Keys, a1);
  return sub_23835B1FC();
}

double TreeDictionary.Keys.startIndex.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_2382D3A70((void (*)(__int128 *__return_ptr))TreeDictionary.startIndex.getter, a1);
}

double TreeDictionary.Keys.endIndex.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_2382D3A70((void (*)(__int128 *__return_ptr))TreeDictionary.endIndex.getter, a1);
}

double sub_2382D3A70@<D0>(void (*a1)(__int128 *__return_ptr)@<X6>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[22];

  a1(&v5);
  result = *(double *)&v5;
  v4 = *(_OWORD *)v6;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 30) = *(_QWORD *)&v6[14];
  return result;
}

uint64_t TreeDictionary.Keys.subscript.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TreeDictionary.subscript.getter(v4, (uint64_t)v6, v7, v8, v9, v10, v12, a1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a1);
}

__n128 TreeDictionary.Keys.index(after:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  __n128 result;
  _BYTE v12[38];

  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v12 = *(_OWORD *)a1;
  *(_OWORD *)&v12[16] = v6;
  *(_QWORD *)&v12[30] = *(_QWORD *)(a1 + 30);
  TreeDictionary.formIndex(after:)((uint64_t)v12, a2, a3, a4);
  v7 = *(_QWORD *)&v12[24];
  v8 = *(_DWORD *)&v12[32];
  v9 = v12[36];
  v10 = v12[37];
  result = *(__n128 *)&v12[8];
  *(_QWORD *)a5 = *(_QWORD *)v12;
  *(__n128 *)(a5 + 8) = result;
  *(_QWORD *)(a5 + 24) = v7;
  *(_DWORD *)(a5 + 32) = v8;
  *(_BYTE *)(a5 + 36) = v9;
  *(_BYTE *)(a5 + 37) = v10;
  return result;
}

double TreeDictionary.Keys.index(_:offsetBy:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double result;
  __int128 v7;
  __int128 v8;
  _BYTE v9[22];

  TreeDictionary.index(_:offsetBy:)(a1, a2, a3, a4, (uint64_t)&v8);
  result = *(double *)&v8;
  v7 = *(_OWORD *)v9;
  *(_OWORD *)a5 = v8;
  *(_OWORD *)(a5 + 16) = v7;
  *(_QWORD *)(a5 + 30) = *(_QWORD *)&v9[14];
  return result;
}

uint64_t TreeDictionary.Keys.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v12;
  _BYTE v14[40];

  TreeDictionary.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, a5, (uint64_t)v14);
  type metadata accessor for TreeDictionary.Index(255, a6, a7, a9);
  v12 = sub_23835B334();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a8, v14, v12);
}

double sub_2382D3C74@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2382D3C8C(a1, (void (*)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))TreeDictionary.Keys.startIndex.getter, a2);
}

double sub_2382D3C80@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2382D3C8C(a1, (void (*)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))TreeDictionary.Keys.endIndex.getter, a2);
}

double sub_2382D3C8C@<D0>(_QWORD *a1@<X0>, void (*a2)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  double result;
  __int128 v6;
  __int128 v7;
  _BYTE v8[22];

  a2(&v7, *v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
  result = *(double *)&v7;
  v6 = *(_OWORD *)v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 30) = *(_QWORD *)&v8[14];
  return result;
}

void (*sub_2382D3CE4(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t *v3;
  char *v7;
  __int128 v8;

  v7 = (char *)malloc(0x50uLL);
  *a1 = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v8;
  *(_QWORD *)(v7 + 30) = *(_QWORD *)(a2 + 30);
  *((_QWORD *)v7 + 9) = sub_2382D3D60((_QWORD *)v7 + 5, (uint64_t)v7, *v3, v3[1], v3[2], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  return sub_2382CB0A8;
}

void (*sub_2382D3D60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(_QWORD *a1)
{
  uint64_t v9;
  void *v10;

  v9 = *(_QWORD *)(a6 - 8);
  *a1 = a6;
  a1[1] = v9;
  v10 = malloc(*(_QWORD *)(v9 + 64));
  a1[2] = v10;
  TreeDictionary.Keys.subscript.getter(a7, (uint64_t)v10);
  return sub_2382CB15C;
}

uint64_t sub_2382D3E00(_QWORD *a1)
{
  _QWORD *v1;

  return TreeDictionary.Keys.isEmpty.getter(*v1, v1[1], v1[2], a1[2], a1[3], a1[4]);
}

uint64_t sub_2382D3E18(_QWORD *a1)
{
  _QWORD *v1;

  return TreeDictionary.Keys.count.getter(*v1, v1[1], v1[2], a1[2], a1[3], a1[4]);
}

void sub_2382D3E30(_QWORD *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_QWORD *)((char *)a1 + 30) = 0;
}

double sub_2382D3E44@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  __int128 v5;
  double result;
  __int128 v7;
  __int128 v8;
  _BYTE v9[22];
  __int128 v10;
  _OWORD v11[2];

  v5 = a1[1];
  v10 = *a1;
  v11[0] = v5;
  *(_QWORD *)((char *)v11 + 14) = *(_QWORD *)((char *)a1 + 30);
  TreeDictionary.Keys.index(_:offsetBy:)((uint64_t)&v10, a2, *v3, v3[2], (uint64_t)&v8);
  result = *(double *)&v8;
  v7 = *(_OWORD *)v9;
  *(_OWORD *)a3 = v8;
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 30) = *(_QWORD *)&v9[14];
  return result;
}

uint64_t sub_2382D3EAC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[40];
  __int128 v17;
  _OWORD v18[2];
  __int128 v19;
  _OWORD v20[2];

  v7 = a1[1];
  v17 = *a1;
  v18[0] = v7;
  *(_QWORD *)((char *)v18 + 14) = *(_QWORD *)((char *)a1 + 30);
  v8 = a3[1];
  v19 = *a3;
  v20[0] = v8;
  *(_QWORD *)((char *)v20 + 14) = *(_QWORD *)((char *)a3 + 30);
  v9 = *v5;
  v10 = v5[2];
  v11 = a4[2];
  v12 = a4[3];
  v13 = a4[4];
  TreeDictionary.Keys.index(_:offsetBy:limitedBy:)((uint64_t)&v17, a2, (uint64_t)&v19, v9, v10, v11, v12, (uint64_t)v16, v13);
  type metadata accessor for TreeDictionary.Index(255, v11, v12, v13);
  v14 = sub_23835B334();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a5, v16, v14);
}

uint64_t sub_2382D3F60(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  _OWORD v10[2];

  v4 = a1[1];
  v7 = *a1;
  v8[0] = v4;
  *(_QWORD *)((char *)v8 + 14) = *(_QWORD *)((char *)a1 + 30);
  v5 = a2[1];
  v9 = *a2;
  v10[0] = v5;
  *(_QWORD *)((char *)v10 + 14) = *(_QWORD *)((char *)a2 + 30);
  return ((uint64_t (*)(__int128 *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))TreeDictionary.Keys.distance(from:to:))(&v7, &v9, *v3, v3[1], v3[2], a3[2], a3[3], a3[4]);
}

double sub_2382D3FB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[22];

  TreeDictionary.Keys.index(after:)(a1, *v2, v2[1], v2[2], (uint64_t)&v6);
  result = *(double *)&v6;
  v5 = *(_OWORD *)v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 30) = *(_QWORD *)&v7[14];
  return result;
}

uint64_t sub_2382D400C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  return TreeDictionary.Keys.formIndex(after:)(a1, *v2, v2[1], v2[2], a2[2], a2[3], a2[4]);
}

uint64_t TreeDictionary.Keys.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_2382D40B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.intersection<A>(_:_:));
}

uint64_t TreeDictionary.Keys.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_2382D417C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.intersection<A>(_:_:));
}

uint64_t TreeDictionary.Keys.subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_2382D40B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.subtracting<A>(_:_:));
}

uint64_t sub_2382D40B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a4;
  v14 = a11(0, a1, a2, a4, a5, a7, a8, a9, a10);
  if (v14)
    return TreeDictionary.init(_new:)(v14, v15, a7, a8, a10);
  swift_retain();
  return v13;
}

uint64_t TreeDictionary.Keys.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_2382D417C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.subtracting<A>(_:_:));
}

uint64_t sub_2382D417C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a4;
  v13 = a10(0, a1, a2, a4, a5, a7, a8, MEMORY[0x24BEE4AE0] + 8, a9);
  if (v13)
    return TreeDictionary.init(_new:)(v13, v14, a7, a8, a9);
  swift_retain();
  return v12;
}

void sub_2382D4224()
{
  JUMPOUT(0x23B831670);
}

void sub_2382D4234()
{
  JUMPOUT(0x23B831670);
}

void sub_2382D4244()
{
  JUMPOUT(0x23B831670);
}

uint64_t type metadata accessor for TreeDictionary.Keys.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeDictionary.Keys.Iterator);
}

uint64_t _UnsafeBitSet.isSuperset(of:)(uint64_t result, unint64_t a2, uint64_t a3, int64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;

  if (result == a2)
    return 1;
  v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v5 = result;
  result = 0;
  if (v4 >= v5 && v4 >= a2)
  {
    v6 = v5 >> 6;
    v7 = a2 >> 6;
    v8 = v5 & 0x3F;
    if (v6 == a2 >> 6)
    {
      v9 = (-1 << a2) ^ (-1 << v8);
      v10 = (_QWORD *)(a3 + 8 * v6);
      return (v9 & ~*v10) == 0;
    }
    if (~*(_QWORD *)(a3 + 8 * v6) >> v8)
      return 0;
    if (v7 > v6)
    {
      if (v6 + 1 == v7)
      {
LABEL_13:
        if ((uint64_t)v7 >= a4)
          return 1;
        v9 = ~(-1 << a2);
        v10 = (_QWORD *)(a3 + 8 * v7);
        return (v9 & ~*v10) == 0;
      }
      if (v6 + 1 < v7)
      {
        if (*(_QWORD *)(a3 + 8 * (v6 + 1)) == -1)
        {
          v11 = (uint64_t *)(a3 + 8 * v6 + 16);
          for (i = v7 - v6 - 2; i; --i)
          {
            result = 0;
            v13 = *v11++;
            if (v13 != -1)
              return result;
          }
          goto LABEL_13;
        }
        return 0;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeBitSet.combineSharedPrefix(with:using:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (v3[1] >= a2)
    v4 = a2;
  else
    v4 = v3[1];
  if (v4 < 0)
  {
    __break(1u);
  }
  else if (v4)
  {
    v6 = (uint64_t *)result;
    v7 = *v3;
    do
    {
      v8 = *v6++;
      result = a3(v7, v8);
      v7 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t _UnsafeBitSet.formUnion(_:)(unint64_t result, unint64_t a2)
{
  uint64_t *v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a2;
  v4 = result >> 6;
  v5 = a2 >> 6;
  if (result >> 6 == a2 >> 6)
  {
    if ((uint64_t)v4 >= v2[1])
      return result;
    v6 = (-1 << a2) ^ (-1 << result);
    v7 = (_QWORD *)(*v2 + 8 * v4);
    goto LABEL_10;
  }
  v8 = *v2;
  *(_QWORD *)(*v2 + 8 * v4) |= -1 << result;
  if (v5 <= v4)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v4 + 1 != v5)
  {
    if (v4 + 1 < v5)
    {
      result = (unint64_t)memset((void *)(v8 + 8 * v4 + 8), 255, 8 * (v5 + ~v4));
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    return result;
  }
LABEL_8:
  if ((uint64_t)v5 >= v2[1])
    return result;
  v6 = ~(-1 << v3);
  v7 = (_QWORD *)(v8 + 8 * v5);
LABEL_10:
  *v7 |= v6;
  return result;
}

void _UnsafeBitSet.formIntersection(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = v3 << 6;
  if (v3 << 6 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  if (v4 >= a1)
    v5 = a1;
  else
    v5 = v3 << 6;
  if (v4 >= a2)
    v6 = a2;
  else
    v6 = v3 << 6;
  v7 = v5 >> 6;
  v8 = 8 * (v5 >> 6);
  if (v5 >= 0x40)
    bzero(*(void **)v2, 8 * (v5 >> 6));
  v9 = v6 >> 6;
  if (v7 == v6 >> 6)
  {
    if (v7 < v3)
      *(_QWORD *)(*(_QWORD *)v2 + v8) &= (-1 << v6) ^ (-1 << v5);
    return;
  }
  v10 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + v8) &= -1 << v5;
  if (v9 < v3)
  {
    v10[v9] &= ~(-1 << v6);
    if (v10)
    {
      v11 = v9 + 1;
      v12 = v3 - v11;
      if (v3 != v11)
      {
        if (v12 >= 1)
        {
          bzero(&v10[v11], 8 * v12);
          return;
        }
        goto LABEL_20;
      }
    }
  }
}

unint64_t _UnsafeBitSet.formSymmetricDifference(_:)(unint64_t result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  _QWORD *v12;

  v3 = result >> 6;
  v4 = a2 >> 6;
  if (result >> 6 == a2 >> 6)
  {
    if ((uint64_t)v3 < v2[1])
      *(_QWORD *)(*v2 + 8 * v3) ^= (-1 << a2) ^ (-1 << result);
    return result;
  }
  v5 = *v2;
  *(_QWORD *)(*v2 + 8 * v3) ^= -1 << result;
  if (v4 <= v3)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = v3 + 1;
  if (v3 + 1 != v4)
  {
    if (v3 + 1 < v4)
    {
      v7 = v4 + ~v3;
      if (v7 < 4)
        goto LABEL_11;
      v6 += v7 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = (int8x16_t *)(v5 + 8 * v3 + 24);
      v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v10 = vmvnq_s8(*v8);
        v8[-1] = vmvnq_s8(v8[-1]);
        *v8 = v10;
        v8 += 2;
        v9 -= 4;
      }
      while (v9);
      if (v7 != (v7 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_11:
        v11 = v4 - v6;
        v12 = (_QWORD *)(v5 + 8 * v6);
        do
        {
          *v12 = ~*v12;
          ++v12;
          --v11;
        }
        while (v11);
      }
      goto LABEL_13;
    }
LABEL_17:
    __break(1u);
    return result;
  }
LABEL_13:
  if ((uint64_t)v4 < v2[1])
    *(_QWORD *)(v5 + 8 * v4) = (-1 << a2) ^ ~*(_QWORD *)(v5 + 8 * v4);
  return result;
}

void _UnsafeBitSet.subtract(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = v2[1];
  v4 = v3 << 6;
  if (v3 << 6 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v4 >= a1)
    v5 = a1;
  else
    v5 = v3 << 6;
  if (v4 >= a2)
    v6 = a2;
  else
    v6 = v3 << 6;
  v7 = v5 >> 6;
  v8 = v6 >> 6;
  if (v5 >> 6 == v6 >> 6)
  {
    if ((uint64_t)v7 >= v3)
      return;
    v9 = (_QWORD *)(*v2 + 8 * v7);
    v10 = (-1 << v5) ^ ~(-1 << v6);
    goto LABEL_19;
  }
  v11 = *v2;
  *(_QWORD *)(v11 + 8 * v7) &= ~(-1 << v5);
  if (!v11)
  {
    if (v8 > v7)
      goto LABEL_17;
    goto LABEL_23;
  }
  if (v8 <= v7)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = v7 + 1;
  v13 = v8 - v12;
  if (v8 != v12)
  {
    if (v13 >= 1)
    {
      bzero((void *)(v11 + 8 * v12), 8 * v13);
      goto LABEL_17;
    }
LABEL_24:
    __break(1u);
    return;
  }
LABEL_17:
  if ((uint64_t)v8 >= v3)
    return;
  v10 = -1 << v6;
  v9 = (_QWORD *)(v11 + 8 * v8);
LABEL_19:
  *v9 &= v10;
}

BOOL _UnsafeBitSet.isDisjoint(with:)(_BOOL8 result, unint64_t a2, _QWORD *a3, int64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  if (!a4)
    return 1;
  v4 = result;
  if (!*a3)
  {
    if (a4 == 1)
      return 1;
    if (!a3[1])
    {
      v11 = a4 - 2;
      if (a4 == 2)
        return 1;
      v12 = a3 + 2;
      result = 1;
      while (!*v12++)
      {
        if (!--v11)
          return result;
      }
    }
  }
  v5 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    return result;
  }
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = a4 << 6;
  if (v5 >= a2)
    v7 = a2;
  else
    v7 = a4 << 6;
  if (v6 == v7)
    return 1;
  v8 = v6 >> 6;
  v9 = v7 >> 6;
  if (v6 >> 6 == v7 >> 6)
  {
    if (v8 < a4)
    {
      v10 = -1 << v6;
      return (a3[v8] & ((-1 << v7) ^ v10)) == 0;
    }
    return 1;
  }
  if (a3[v8] >> v6)
    return 0;
  v14 = v9 - v8;
  if (v9 <= v8)
    goto LABEL_37;
  if (v8 + 1 == v9)
    goto LABEL_27;
  if (v8 + 1 >= v9)
    goto LABEL_38;
  if (!a3[v8 + 1])
  {
    v15 = &a3[v8 + 2];
    v16 = v14 - 2;
    result = 0;
    while (v16)
    {
      v17 = *v15++;
      --v16;
      if (v17)
        return result;
    }
LABEL_27:
    if ((uint64_t)v9 < a4)
    {
      v10 = -1;
      v8 = v7 >> 6;
      return (a3[v8] & ((-1 << v7) ^ v10)) == 0;
    }
    return 1;
  }
  return 0;
}

unint64_t _UnsafeBitSet.isSubset(of:)(unint64_t result, unint64_t a2, _QWORD *a3, int64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;

  if (result == a2)
  {
    if (!a4)
      return 1;
    if (*a3)
      return 0;
    if (a4 == 1)
      return 1;
    if (a3[1])
      return 0;
    if (a4 == 2)
      return 1;
    v12 = a4 - 3;
    v13 = a3 + 2;
    do
    {
      v15 = *v13++;
      v14 = v15;
      result = v15 == 0;
      v17 = v12-- != 0;
    }
    while (!v14 && v17);
  }
  else
  {
    if (!a4)
      return 1;
    v4 = a4 << 6;
    if (((a4 << 6) & 0x8000000000000000) == 0)
    {
      if (v4 >= result)
        v5 = result;
      else
        v5 = a4 << 6;
      if (v4 >= a2)
        v4 = a2;
      v6 = v5 >> 6;
      if (v5 >= 0x40)
      {
        if (*a3)
          return 0;
        v7 = v6 - 1;
        if (v6 <= 1)
          v8 = 1;
        else
          v8 = v5 >> 6;
        v9 = v8 - 1;
        v10 = a3 + 1;
        result = 0;
        while (v7)
        {
          if (!v9)
          {
            __break(1u);
            goto LABEL_42;
          }
          v11 = *v10++;
          --v9;
          --v7;
          if (v11)
            return result;
        }
      }
      if ((uint64_t)v6 < a4)
      {
        if ((a3[v6] & ~(-1 << v5)) != 0)
          return 0;
        if ((uint64_t)(v4 >> 6) < a4)
          return a3[v4 >> 6] >> v4 == 0;
      }
      return 1;
    }
LABEL_42:
    __break(1u);
  }
  return result;
}

unint64_t _UnsafeBitSet.isEqualSet(to:)(unint64_t result, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t i;
  uint64_t v27;

  if (result == a2)
  {
    if (!a4)
      return 1;
    if (!*a3)
    {
      if (a4 == 1)
        return 1;
      if (!a3[1])
      {
        if (a4 == 2)
          return 1;
        v18 = a4 - 3;
        v19 = a3 + 2;
        do
        {
          v21 = *v19++;
          v20 = v21;
          v5 = v21 == 0;
          v23 = v18-- != 0;
        }
        while (!v20 && v23);
        return v5;
      }
    }
    return 0;
  }
  v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v5 = 0;
  if (v4 < result || v4 < a2)
    return v5;
  v6 = a2 >> 6;
  v7 = a2 & 0x3F;
  if (a2 < 0x40 || (a2 & 0x3F) != 0)
  {
    if (v6 != a4 - 1)
      return 0;
  }
  else
  {
    if (v6 != a4)
      return 0;
    --v6;
    v7 = 64;
  }
  v8 = result >> 6;
  if (result >= 0x40)
  {
    if (*a3)
      return 0;
    v13 = v8 - 1;
    if (v8 <= 1)
      v14 = 1;
    else
      v14 = result >> 6;
    v15 = v14 - 1;
    v16 = a3 + 1;
    v5 = 0;
    while (v13)
    {
      if (!v15)
        goto LABEL_54;
      v17 = *v16++;
      --v15;
      --v13;
      if (v17)
        return v5;
    }
  }
  v9 = result & 0x3F;
  if (v8 == v6)
  {
    if (v7 < 0x40)
      v10 = ~(-1 << v7);
    else
      v10 = -1;
    v11 = (-1 << v9) ^ ~v10;
    v12 = &a3[v8];
    return *v12 == v11;
  }
  if (a3[v8] != -1 << v9)
    return 0;
  v24 = v6 - v8;
  if (v6 <= (uint64_t)v8)
    goto LABEL_55;
  if (v8 + 1 == v6)
  {
LABEL_41:
    v11 = -1;
    if (v7 < 0x40)
      v11 = ~(-1 << v7);
    v12 = &a3[v6];
    return *v12 == v11;
  }
  if ((uint64_t)(v8 + 1) < v6)
  {
    if (a3[v8 + 1] == -1)
    {
      v25 = &a3[v8 + 2];
      for (i = v24 - 2; i; --i)
      {
        v5 = 0;
        v27 = *v25++;
        if (v27 != -1)
          return v5;
      }
      goto LABEL_41;
    }
    return 0;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t BitSet.Index._value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*BitSet.Index._value.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t BitSet.Index.description.getter()
{
  return sub_23835B880();
}

uint64_t sub_2382D4C14()
{
  return sub_23835B880();
}

uint64_t BitSet.Index.debugDescription.getter()
{
  _QWORD v1[2];

  sub_23835B5B0();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "BitSet.Index(");
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return v1[0];
}

uint64_t sub_2382D4CFC()
{
  return BitSet.Index.debugDescription.getter();
}

BOOL static BitSet.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL static BitSet.Index.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

uint64_t BitSet.Index.hash(into:)()
{
  return sub_23835BA00();
}

uint64_t BitSet.Index.hashValue.getter()
{
  sub_23835B9E8();
  sub_23835BA00();
  return sub_23835BA48();
}

unint64_t sub_2382D4D88()
{
  unint64_t result;

  result = qword_2568F17E8;
  if (!qword_2568F17E8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitSet.Index, &type metadata for BitSet.Index);
    atomic_store(result, (unint64_t *)&qword_2568F17E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for BitSet.Index()
{
  return &type metadata for BitSet.Index;
}

uint64_t sub_2382D4DE0(unint64_t *a1, _OWORD *a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[56];
  uint64_t v46;
  int v47;
  __int16 v48;
  __int128 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[40];
  _OWORD v57[2];
  uint64_t v58;
  uint64_t v59;

  v3 = v2;
  v6 = _s7BuilderVMa();
  result = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *((_QWORD *)v3 + 4);
  v12 = a1[4];
  v13 = 2 * (v11 & 0x1FFFFFFFFFFFFFLL);
  if (!*(_QWORD *)v3)
    v13 = 0;
  if (v13 < v12 >> 10)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[2];
  v17 = (uint64_t *)a1[3];
  if (v12 >> 10 == *a1 >> 10)
  {
    v18 = a2[1];
    *(_OWORD *)v45 = *a2;
    *(_OWORD *)&v45[16] = v18;
    *(_OWORD *)&v45[32] = a2[2];
    sub_238263E74((uint64_t)v45, (uint64_t)v57);
    sub_238263DDC((uint64_t)v57);
    return _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(a2, v14, v15, v16, (unint64_t)v17);
  }
  v19 = v3[1];
  *(_QWORD *)&v44 = a1[5];
  *(_QWORD *)&v43 = a1[6];
  v42 = (uint64_t *)a1[7];
  v41 = v14 >> 11;
  v40 = v12 >> 11;
  v20 = *((_QWORD *)v3 + 5);
  v57[0] = v10;
  v57[1] = v19;
  v58 = v11;
  v59 = v20;
  v21 = (unint64_t)&v9[*(int *)(v6 + 24)];
  v45[0] = 1;
  sub_2382600B8(v14, v15, v16, v17, 0x100000000uLL, v21);
  v22 = (unint64_t)&v9[*(int *)(v6 + 20)];
  v45[0] = 1;
  sub_2382600B8(v12, v44, v43, v42, 0x100000000uLL, v22);
  result = v41;
  if (v40 < v41)
    goto LABEL_10;
  sub_23825A61C(v41, v40, v23, (uint64_t)v45);
  v24 = v46;
  v25 = v47;
  v26 = v48;
  v27 = v50;
  v28 = v51;
  v29 = v52;
  v30 = *(_OWORD *)&v45[8];
  v31 = *(_OWORD *)&v45[24];
  v32 = *(_OWORD *)&v45[40];
  v33 = v49;
  *(_QWORD *)v9 = *(_QWORD *)v45;
  *(_OWORD *)(v9 + 8) = v30;
  *(_OWORD *)(v9 + 24) = v31;
  *(_OWORD *)(v9 + 40) = v32;
  *((_QWORD *)v9 + 7) = v24;
  *((_WORD *)v9 + 34) = v26;
  *((_DWORD *)v9 + 16) = v25;
  *(_OWORD *)(v9 + 72) = v33;
  *((_WORD *)v9 + 46) = v28;
  *((_DWORD *)v9 + 22) = v27;
  *((_QWORD *)v9 + 12) = v29;
  v34 = *a2;
  v35 = a2[1];
  *(_OWORD *)&v45[32] = a2[2];
  *(_OWORD *)&v45[16] = v35;
  *(_OWORD *)v45 = v34;
  sub_238263E74((uint64_t)v45, (uint64_t)v56);
  sub_238263DDC((uint64_t)v56);
  sub_23831B34C(a2);
  sub_2382B2104((uint64_t)v9, (uint64_t)v9);
  sub_238265C60((uint64_t *)v53);
  v44 = v53[0];
  v43 = v53[1];
  v36 = v54;
  v37 = v55;
  sub_238268088((uint64_t)v9);
  result = swift_unknownObjectRelease();
  v38 = v43;
  *v3 = v44;
  v3[1] = v38;
  *((_QWORD *)v3 + 4) = v36;
  *((_QWORD *)v3 + 5) = v37;
  return result;
}

uint64_t static BitSet._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t static TreeDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = a7;
  v13 = a8;
  v14 = a9;
  v15 = a10;
  return _HashNode.isEqualSet<A>(to:by:)(a4, a5, (uint64_t)sub_2382D5150, (uint64_t)v11, a1, a2, a7, a8, a8, a9) & 1;
}

uint64_t sub_2382D5150()
{
  return sub_23835AD40() & 1;
}

uint64_t sub_2382D517C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static TreeDictionary<>.== infix(_:_:)(*a1, a1[1], (uint64_t)a3, *a2, a2[1], a6, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8)) & 1;
}

uint64_t Deque.Iterator._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Deque.Iterator._storage.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Deque.Iterator._nextSlot.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Deque.Iterator._nextSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Deque.Iterator._nextSlot.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Deque.Iterator._endSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Deque.Iterator._endSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Deque.Iterator._endSlot.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Deque.Iterator.init(_base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_2382D9DA0(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t Deque.Iterator.init(_base:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_2382DA4D4(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t sub_2382D52CC@<X0>(Swift::Int forOffset@<X2>, CollectionsInternal::_DequeSlot *a2@<X0>, Swift::Int a3@<X3>, CollectionsInternal::_DequeSlot *a4@<X8>)
{
  CollectionsInternal::_DequeSlot v8;
  Swift::Int position;
  Swift::Int v10;

  v8.position = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  position = v8.position;
  v10 = a2[1].position;
  if (v10 != forOffset)
  {
    v8.position = Deque._UnsafeHandle.slot(_:offsetBy:)(a2[2], v10).position;
    if (position >= v8.position)
      v8.position = a2->position;
  }
  a4->position = a3;
  a4[1].position = position;
  a4[2].position = v8.position;
  return swift_retain();
}

Swift::Bool __swiftcall Deque.Iterator._swapSegment()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[16];
  uint64_t v6;
  CollectionsInternal::_DequeSlot (*v7)@<X0>(CollectionsInternal::_DequeSlot *@<X0>, char *@<X8>);
  char *v8;
  char v9;
  _BYTE v10[16];

  v2 = *v1;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = sub_2382DA588;
  v8 = &v9;
  swift_retain();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DA5F0, (uint64_t)v5, v2, (uint64_t)&type metadata for _DequeBufferHeader, v6, v3, MEMORY[0x24BEE1328], MEMORY[0x24BEE3F20], (uint64_t)v10);
  swift_release();
  return v10[15];
}

uint64_t Deque.Iterator.next()@<X0>(_BOOL8 a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];

  v3 = a1;
  v5 = v2[1];
  if (v5 != v2[2])
    goto LABEL_4;
  a1 = Deque.Iterator._swapSegment()();
  if (a1)
  {
    v5 = v2[1];
LABEL_4:
    v2[1] = v5 + 1;
    v6 = *v2;
    v7 = MEMORY[0x24BDAC7A8](a1);
    v18 = *(_QWORD *)(v3 + 16);
    v8 = v18;
    v19 = v9;
    MEMORY[0x24BDAC7A8](v7);
    v14 = v18;
    v15 = v18;
    v16 = sub_2382DA618;
    v17 = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DA654, (uint64_t)&v13, v6, (uint64_t)&type metadata for _DequeBufferHeader, v14, v11, v14, MEMORY[0x24BEE3F20], (uint64_t)v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t Deque.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = swift_retain();
  v6 = sub_2382D9DA0(v3, a2, v4, v5);
  swift_release();
  return v6;
}

uint64_t Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_2382D9F1C(a1, a2);
  swift_release();
  return v2;
}

uint64_t sub_2382D55F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t);
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v13 = a4;
  v14 = a1;
  v15 = a2;
  v9 = a4;
  v10 = sub_2382DB204;
  v11 = &v12;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DAA90, (uint64_t)v8, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v6, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v16);
}

uint64_t sub_2382D5698(_QWORD *a1, uint64_t a2, _OWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  void (*v15)(_OWORD *, uint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  _QWORD *v31;

  v31 = a4;
  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v27);
  v7 = v27;
  v8 = v28;
  v30[0] = *a3;
  v22[0] = v28;
  v9 = sub_23835B3A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F17F0);
  MEMORY[0x23B831670](MEMORY[0x24BEE1D28], v9);
  sub_2382DB1A0();
  sub_23835ACEC();
  *(_QWORD *)&v30[0] = v7;
  *((_QWORD *)&v30[0] + 1) = v8;
  v10 = sub_23835AD7C();
  v11 = MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v10);
  v12 = v31;
  result = sub_2382C66C4((uint64_t)v30, v23, v24, v25, v26, a5, v10, v11);
  if (__OFADD__(*v12, v8))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *v12 += v8;
  v14 = sub_23835B334();
  v15 = *(void (**)(_OWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v30, &v29, v14);
  result = ((uint64_t (*)(uint64_t *, _OWORD *, uint64_t))v15)(&v23, v30, v14);
  if ((v25 & 1) != 0)
    return result;
  v16 = v24;
  if (__OFADD__(v8, v24))
    goto LABEL_9;
  if (v8 + v24 < v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v17 = v23;
  v18 = sub_23835B3AC();
  v22[0] = v17;
  v22[1] = v16;
  result = sub_2382C66C4((uint64_t)v22, v18, v19, v20, v21, a5, v10, v11);
  if (__OFADD__(*v12, v16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *v12 += v16;
  return result;
}

uint64_t sub_2382D5898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23835B094();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    v1 = sub_23835B5C8();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      v2 = sub_23835B0D0();
      MEMORY[0x23B831670](MEMORY[0x24BEE12E0], v2);
      v1 = sub_23835B970();
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t Deque._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_2382D9E4C(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t sub_2382D5990@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(__int128 *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[32];
  uint64_t v48;

  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v44);
  v8 = v45;
  if (v45 >= a3)
    v9 = a3;
  else
    v9 = v45;
  *(_QWORD *)&v40 = a2;
  *((_QWORD *)&v40 + 1) = a3;
  v10 = sub_23835B3A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F17F0);
  MEMORY[0x23B831670](MEMORY[0x24BEE1D28], v10);
  sub_2382DB1A0();
  sub_23835ACEC();
  v48 = *((_QWORD *)&v42 + 1);
  v11 = sub_23835AD7C();
  MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v11);
  sub_23835B220();
  v38 = v40;
  v39 = v41;
  v12 = sub_23835B9C4();
  v13 = MEMORY[0x23B831670](MEMORY[0x24BEE4238], v12);
  v14 = v48;
  v15 = a4;
  v48 = v12;
  v37 = v13;
  sub_2382C66C4((uint64_t)&v38, v42, v14, v43, *((uint64_t *)&v43 + 1), a4, v12, v13);
  if (v8 >= a3)
    goto LABEL_13;
  v16 = sub_23835B334();
  v17 = *(uint64_t (**)(__int128 *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17((__int128 *)v47, &v46, v16);
  result = v17(&v38, (uint64_t *)v47, v16);
  if ((v39 & 1) != 0)
    goto LABEL_13;
  if (__OFSUB__(a3, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v19 = *((_QWORD *)&v38 + 1);
  if (a3 - v9 >= *((uint64_t *)&v38 + 1))
    v20 = *((_QWORD *)&v38 + 1);
  else
    v20 = a3 - v9;
  if (__OFADD__(v9, v20))
    goto LABEL_15;
  if (v9 + v20 >= v9)
  {
    v21 = v38;
    v9 += v20;
    v35 = sub_23835B3AC();
    v23 = v22;
    v25 = v24;
    v27 = v26;
    *(_QWORD *)&v40 = v21;
    *((_QWORD *)&v40 + 1) = v19;
    sub_23835B220();
    v40 = v42;
    v41 = v43;
    sub_2382C66C4((uint64_t)&v40, v35, v23, v25, v27, v15, v48, v37);
LABEL_13:
    v28 = swift_retain();
    v30 = sub_2382DA4D4(v28, v9, v15, v29);
    v32 = v31;
    v34 = v33;
    result = swift_release();
    *a5 = v30;
    a5[1] = v32;
    a5[2] = v34;
    a5[3] = v9;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t Deque.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = a4;
  v16 = a5;
  v17 = a1;
  v10 = a4;
  v11 = sub_23835B334();
  v12 = sub_2382DA678;
  v13 = &v14;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DA694, (uint64_t)v9, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v7, v11, MEMORY[0x24BEE3F20], (uint64_t)&v19);
}

uint64_t sub_2382D5D04@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = a1[2];
  v10 = a1[1] + result;
  if (*a1 < v10)
  {
    v11 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
  }
  if (v10 < result)
  {
    __break(1u);
    return result;
  }
  v12 = Deque._UnsafeHandle.buffer(for:)(result, v10);
  result = a2(v12);
  if (!v4)
  {
    v11 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
  }
  return result;
}

uint64_t sub_2382D5DA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = Deque.makeIterator()(*v2, *(_QWORD *)(a1 + 16));
  v6 = v5;
  v8 = v7;
  result = swift_release();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  return result;
}

uint64_t sub_2382D5E00(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, a1);
  return sub_23835B1F0();
}

uint64_t sub_2382D5E34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_2382D9F1C(*v1, *(_QWORD *)(a1 + 16));
  swift_release();
  return v2;
}

uint64_t sub_2382D5E6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_2382D9E4C(a2, a3, *v4, *(_QWORD *)(a4 + 16));
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_release();
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  return v12;
}

uint64_t sub_2382D5ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Deque.withContiguousStorageIfAvailable<A>(_:)(a1, a2, *v4, *(_QWORD *)(a4 + 16), a3);
}

uint64_t Deque.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_23827FD60((uint64_t)sub_23827FE58, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v3);
  return v4;
}

uint64_t Deque.startIndex.getter()
{
  return 0;
}

uint64_t Deque.endIndex.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_23827FD60((uint64_t)sub_23827FE58, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v3);
  return v4;
}

uint64_t Deque.indices.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v3);
  if ((v4 & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

Swift::Int __swiftcall Deque.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall Deque.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Int __swiftcall Deque.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall Deque.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall Deque.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall Deque.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  char v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v3 = sub_2382C9654(_, offsetBy, limitedBy);
  v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall Deque.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t Deque.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    result = sub_23827FD60((uint64_t)sub_23827FE58, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v10);
    if (v12 > v5)
    {
      v6 = MEMORY[0x24BDAC7A8](result);
      v10 = a3;
      v11 = v5;
      MEMORY[0x24BDAC7A8](v6);
      v9[2] = a3;
      v9[3] = a3;
      v9[4] = sub_2382DA6B4;
      v9[5] = v7;
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
      return sub_23827FF04((uint64_t)sub_2382DB288, (uint64_t)v9, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, v8, a3, MEMORY[0x24BEE3F20], (uint64_t)&v12);
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2382D9FA8(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*Deque.subscript.modify(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = (uint64_t)v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  result = (void (*)(uint64_t))malloc(*(_QWORD *)(v9 + 64));
  v7[5] = (uint64_t)result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = (uint64_t)result;
    result = (void (*)(uint64_t))sub_23827FD60((uint64_t)sub_23827FE58, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v12);
    if (*v7 > a2)
    {
      v7[1] = Deque._prepareForModify(at:)(v11, a2, a3);
      return sub_2382D6314;
    }
  }
  __break(1u);
  return result;
}

void sub_2382D6314(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v2 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  sub_2382D64F0(*(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)a1 + 8, (uint64_t)v2, v4);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v2, v4);
  free(v2);
  free(v1);
}

uint64_t Deque._prepareForModify(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20[8];

  v5 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = &v20[-v7 - 8];
  sub_23835B82C();
  v9 = sub_23835B820();
  if ((v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v5, v10, v11);
    Deque._Storage._makeUniqueCopy()();
  }
  v12 = *v3;
  v13 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v13);
  *(&v19 - 4) = v5;
  *(&v19 - 3) = TupleTypeMetadata2;
  v18 = v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DA694, (uint64_t)(&v19 - 6), v12, (uint64_t)&type metadata for _DequeBufferHeader, v5, v15, TupleTypeMetadata2, MEMORY[0x24BEE3F20], (uint64_t)v20);
  v16 = *(_QWORD *)v8;
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, &v8[*(int *)(TupleTypeMetadata2 + 48)], v5);
  return v16;
}

uint64_t sub_2382D64F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v11);
  v14 = type metadata accessor for Deque(0, a4, v12, v13);
  Deque._finalizeModify(_:_:)(v9, (uint64_t)v7, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a4);
}

uint64_t sub_2382D6594@<X0>(Swift::Int forOffset@<X2>, Swift::Int *a2@<X8>)
{
  Swift::Int position;

  position = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  swift_getTupleTypeMetadata2();
  *a2 = position;
  return sub_23835B328();
}

uint64_t Deque._finalizeModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v4 = *v3;
  v5 = *(_QWORD *)(a3 + 16);
  v13 = v5;
  v14 = a1;
  v15 = a2;
  v9 = v5;
  v10 = sub_2382DA72C;
  v11 = &v12;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v8, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, v6, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v16);
}

uint64_t sub_2382D66BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v9 + *(_QWORD *)(v8 + 72) * v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v12, v13);
  return sub_2382F7024((uint64_t)v7, v11, a5);
}

uint64_t Deque.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = sub_23827FD60((uint64_t)sub_23827FE58, 0, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v9);
    if (v10 >= a2)
    {
      v8 = type metadata accessor for Deque(0, a4, v6, v7);
      swift_retain();
      MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, v8);
      sub_23835B9AC();
      return v10;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6)
{
  sub_2382DA748(a1, a2, a3, a4, a5, a6);
  return swift_release();
}

uint64_t Deque.replaceSubrange<A>(_:with:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2382DA118(a1, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
}

void (*Deque.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[5] = a4;
  v9[6] = v4;
  v9[3] = a2;
  v9[4] = a3;
  *v9 = Deque.subscript.getter(a2, a3, *v4, *(_QWORD *)(a4 + 16));
  v9[1] = v10;
  v9[2] = v11;
  return sub_2382D6900;
}

void sub_2382D6900(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[5];
  v7 = (*a1)[3];
  v6 = (*a1)[4];
  v8 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_2382DA748(v3, v4, v8, v7, v6, v5);
    swift_release();
  }
  else
  {
    sub_2382DA748(**a1, v4, v8, v7, v6, v5);
  }
  swift_release();
  free(v2);
}

uint64_t sub_2382D69A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a1 + 16), MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v5);
  *a2 = v6;
  return result;
}

void (*sub_2382D6A18(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t *v7;

  v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)sub_2382D6A78(v7, *a2, *v3, *(_QWORD *)(a3 + 16));
  return sub_2382C9030;
}

void (*sub_2382D6A78(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a4 - 8);
  *a1 = a4;
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v7 + 64));
  Deque.subscript.getter(a2, a3, a4);
  return sub_2382CB15C;
}

uint64_t sub_2382D6AE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = Deque.subscript.getter(*a1, a1[1], *v3, *(_QWORD *)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t sub_2382D6B24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a1 + 16), MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v5);
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = 0;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_2382D6BA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  sub_23827FD60((uint64_t)sub_23827FE58, 0, *v1, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a1 + 16), MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v3);
  return v4;
}

Swift::Void __swiftcall Deque.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[10];
  Swift::Int v16;
  Swift::Int v17;

  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = *v3;
  v7 = *(_QWORD *)(v2 + 16);
  sub_23827FD60((uint64_t)sub_23827FE58, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v16);
  if (a2 < 0 || v17 <= a1)
    goto LABEL_9;
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v16);
  if (v17 <= a2)
  {
LABEL_10:
    __break(1u);
    return;
  }
  sub_23835B82C();
  v8 = sub_23835B820();
  if ((v8 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v7, v9, v10);
    Deque._Storage._makeUniqueCopy()();
  }
  v11 = *v3;
  v12 = MEMORY[0x24BDAC7A8](v8);
  v15[8] = v7;
  v15[9] = a1;
  v16 = a2;
  MEMORY[0x24BDAC7A8](v12);
  v15[2] = v7;
  v15[3] = sub_2382DA848;
  v15[4] = v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v7, v14, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v17);
}

uint64_t sub_2382D6DCC(int a1, int a2, Swift::Int forOffset, Swift::Int a4)
{
  Deque._UnsafeHandle.slot(forOffset:)(forOffset);
  Deque._UnsafeHandle.slot(forOffset:)(a4);
  sub_23835B358();
  return sub_23835B364();
}

uint64_t Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t (*v18)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  _QWORD *v19;
  _QWORD v20[6];
  uint64_t v21;

  v8 = *(_QWORD *)(a3 + 16);
  sub_23835B82C();
  v9 = sub_23835B820();
  if ((v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v8, v10, v11);
    Deque._Storage._makeUniqueCopy()();
  }
  v12 = *v4;
  v13 = MEMORY[0x24BDAC7A8](v9);
  v20[2] = v8;
  v20[3] = a4;
  v20[4] = a1;
  v20[5] = a2;
  MEMORY[0x24BDAC7A8](v13);
  v16[2] = v8;
  v17 = sub_23835B334();
  v18 = sub_2382DA864;
  v19 = v20;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DB274, (uint64_t)v16, v12, (uint64_t)&type metadata for _DequeBufferHeader, v8, v14, v17, MEMORY[0x24BEE3F20], (uint64_t)&v21);
}

uint64_t sub_2382D6FAC@<X0>(uint64_t *a1@<X0>, void (*a2)(_QWORD *)@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  result = a1[2];
  v10 = a1[1] + result;
  if (*a1 < v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 1, 1, a3);
  if (v10 < result)
  {
    __break(1u);
  }
  else
  {
    Deque._UnsafeHandle.buffer(for:)(result, v10);
    v11 = sub_23835B388();
    v13 = v12;
    v14[0] = v11;
    v14[1] = v12;
    a2(v14);
    if (!v4)
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 0, 1, a3);
    return sub_2382D70B0((uint64_t)v14, v11, v13);
  }
  return result;
}

uint64_t sub_2382D70B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = sub_23835AD4C();
  result = sub_23835AD4C();
  if (!v5)
  {
LABEL_5:
    if (result)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (!result)
    goto LABEL_8;
  if (v5 != result)
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  if (*(_QWORD *)(a1 + 8) == a3)
    return result;
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_2382D714C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2382D9C68(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD))sub_2382D9FA8);
}

void (*sub_2382D7158(uint64_t **a1, uint64_t *a2, uint64_t a3))(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = (uint64_t)v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  result = (void (*)(uint64_t))malloc(*(_QWORD *)(v9 + 64));
  v7[5] = (uint64_t)result;
  v11 = *a2;
  if (v11 < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = (uint64_t)result;
    result = (void (*)(uint64_t))sub_23827FD60((uint64_t)sub_23827FE58, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v13);
    if (v11 < *v7)
    {
      v7[1] = Deque._prepareForModify(at:)(v12, v11, a3);
      return sub_2382D6314;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2382D7240(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_2382DA748(*a1, a1[1], a1[2], *a2, a2[1], a3);
  return swift_release();
}

void (*sub_2382D727C(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = v3;
  v7[4] = a3;
  v8 = *a2;
  v9 = a2[1];
  v7[5] = *a2;
  v7[6] = v9;
  *v7 = Deque.subscript.getter(v8, v9, *v3, *(_QWORD *)(a3 + 16));
  v7[1] = v10;
  v7[2] = v11;
  return sub_2382D72EC;
}

void sub_2382D72EC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[5];
  v5 = (*a1)[6];
  v7 = (*a1)[4];
  v8 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_2382DA748(v3, v4, v8, v6, v5, v7);
    swift_release();
  }
  else
  {
    sub_2382DA748(**a1, v4, v8, v6, v5, v7);
  }
  swift_release();
  free(v2);
}

uint64_t sub_2382D7390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, a3);
  return sub_23835AD04();
}

void sub_2382D7400(Swift::Int *a1, Swift::Int *a2)
{
  Deque.swapAt(_:_:)(*a1, *a2);
}

uint64_t sub_2382D740C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_2382D742C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

Swift::Void __swiftcall Deque.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;

  v4 = *(_QWORD *)(v1 + 16);
  sub_23835B82C();
  v5 = sub_23835B820();
  sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v8);
  if (v9 < a1 || (v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v4, v6, v7);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, 1);
  }
}

Swift::Int sub_2382D7510(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CollectionsInternal::_DequeSlot *v50;
  uint64_t v51;

  v48 = a6;
  v49 = a8;
  v51 = a5;
  v36 = a4;
  v46 = a2;
  v50 = (CollectionsInternal::_DequeSlot *)a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = sub_23835B748();
  v41 = *(_QWORD *)(v17 - 8);
  v42 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v40 = (char *)&v35 - v18;
  v44 = a13;
  v47 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v20 = (char *)&v35 - v19;
  v21 = sub_23835B754();
  v22 = *(_QWORD *)(v21 - 8);
  result = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v35 - v24;
  v45 = a3;
  if (v51 < a3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v26 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  result = sub_23835AD40();
  if ((result & 1) == 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v38 = v26;
  v39 = a7;
  v37 = *(void (**)(char *))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16);
  v37(v25);
  MEMORY[0x23B831670](MEMORY[0x24BEE2C68], v21);
  sub_23835B244();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v27 = v47;
  v28 = swift_getAssociatedConformanceWitness();
  v29 = v45;
  v30 = v46;
  v31 = v51;
  v45 = a11;
  Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(v29, v51, (uint64_t)v20, &v50->position, v46, a11, v27, v28);
  result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v27);
  if (v49 < 0)
  {
    if (v36 < v31)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    return Deque._UnsafeHandle.uncheckedRemove(offsets:)(v31, v36, v50, v30, v45);
  }
  else if (v49)
  {
    v43 = v28;
    v32 = v39;
    result = sub_23835AD40();
    if ((result & 1) != 0)
    {
      v33 = v40;
      ((void (*)(char *, uint64_t, uint64_t))v37)(v40, v32, AssociatedTypeWitness);
      v34 = v42;
      MEMORY[0x23B831670](MEMORY[0x24BEE2C50], v42);
      sub_23835B244();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v34);
      return Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v20, v49, v31, (uint64_t)v50, v30, v45, v47, v43);
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t Deque.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_2382DA880(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;

  v6 = sub_2382DA980(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v6;
}

uint64_t Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t AssociatedTypeWitness;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  unsigned __int8 v64[24];

  v7 = *(_QWORD *)(a2 + 16);
  v8 = sub_23835B334();
  v46 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v44 - v10;
  v57 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58 = (char *)&v44 - v13;
  v60 = v7;
  v61 = a3;
  v62 = a4;
  v63 = v4;
  v14 = v4;
  if (sub_23835B0D0() == a3)
    sub_23835B964();
  result = sub_23835AFBC();
  if (v64[0] == 1)
  {
    v44 = v8;
    v16 = sub_23835AFA4();
    v17 = *v14;
    swift_retain();
    sub_23827FD60((uint64_t)sub_23827FE58, 0, v17, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v42);
    result = swift_release();
    v18 = *(_QWORD *)v64 + v16;
    if (!__OFADD__(*(_QWORD *)v64, v16))
    {
      v55 = a3;
      v53 = sub_23835B82C();
      v19 = sub_23835B820();
      v20 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v14, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v42);
      if (*(uint64_t *)v64 < v18 || (v19 & 1) == 0)
      {
        type metadata accessor for Deque._Storage(0, v7, v21, v22);
        Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v18, 0);
      }
      v54 = &v44;
      v23 = *v14;
      v24 = MEMORY[0x24BDAC7A8](v20);
      v25 = v55;
      *(&v44 - 4) = v7;
      *(&v44 - 3) = v25;
      MEMORY[0x24BDAC7A8](v24);
      v26 = AssociatedTypeWitness;
      *(&v44 - 4) = v7;
      *(&v44 - 3) = v26;
      v43 = v27;
      swift_retain();
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
      sub_23827FF04((uint64_t)sub_2382DB274, (uint64_t)(&v44 - 6), v23, (uint64_t)&type metadata for _DequeBufferHeader, v7, v52, v26, MEMORY[0x24BEE3F20], (uint64_t)v64);
      swift_release();
      v54 = a4;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      sub_23835B484();
      v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
      if (v50(v11, 1, v7) == 1)
      {
LABEL_9:
        (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v44);
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v58, AssociatedTypeWitness);
      }
      v28 = MEMORY[0x24BEE4078];
      v29 = MEMORY[0x24BEE40A8];
      v49 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v47 = MEMORY[0x24BEE4AE0] + 8;
      v48 = v11;
      v49(v56, v11, v7);
      while (1)
      {
        v36 = *v14;
        swift_retain();
        v37 = MEMORY[0x24BEE1768];
        sub_23827FD60((uint64_t)sub_23827FE58, 0, v36, (uint64_t)&type metadata for _DequeBufferHeader, v7, v28, MEMORY[0x24BEE1768], v29, v42);
        result = swift_release();
        v38 = *(_QWORD *)v64 + 1;
        if (__OFADD__(*(_QWORD *)v64, 1))
          break;
        v39 = sub_23835B820();
        v30 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v14, (uint64_t)&type metadata for _DequeBufferHeader, v7, v28, v37, v29, v42);
        if (*(uint64_t *)v64 < v38 || (v39 & 1) == 0)
        {
          type metadata accessor for Deque._Storage(0, v7, v40, v41);
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v38, 0);
        }
        v31 = *v14;
        v32 = MEMORY[0x24BDAC7A8](v30);
        v33 = v55;
        v34 = v56;
        *(&v44 - 6) = v7;
        *(&v44 - 5) = v33;
        *(&v44 - 4) = (uint64_t)v54;
        *(&v44 - 3) = (uint64_t)v34;
        MEMORY[0x24BDAC7A8](v32);
        *(&v44 - 4) = v7;
        *(&v44 - 3) = (uint64_t)sub_2382DAA24;
        swift_retain();
        sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)(&v44 - 6), v31, (uint64_t)&type metadata for _DequeBufferHeader, v7, v52, v47, MEMORY[0x24BEE3F20], (uint64_t)v64);
        swift_release();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v7);
        v11 = v48;
        sub_23835B484();
        v35 = v50(v11, 1, v7);
        v29 = MEMORY[0x24BEE40A8];
        if (v35 == 1)
          goto LABEL_9;
        v49(v34, v11, v7);
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[15];
  _BYTE v19[8];

  v8 = sub_23835B190();
  if (v8 < 1)
  {
    v17 = Deque._Storage.init()();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v17;
  }
  else
  {
    v11 = v8;
    v12 = Deque._Storage.init(minimumCapacity:)(v8, a2, v9, v10);
    v13 = MEMORY[0x24BDAC7A8](v12);
    v18[8] = a2;
    v18[9] = a3;
    v18[10] = a4;
    v18[11] = v11;
    v18[12] = a1;
    MEMORY[0x24BDAC7A8](v13);
    v18[2] = a2;
    v18[3] = sub_2382DAA44;
    v18[4] = v14;
    swift_retain();
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v18, v12, (uint64_t)&type metadata for _DequeBufferHeader, a2, v15, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v19);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v12;
  }
}

uint64_t sub_2382D80B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v15 = result;
    Deque._UnsafeHandle.buffer(for:)(0, a3);
    v12 = sub_23835B388();
    v14 = v13;
    MEMORY[0x24BDAC7A8](v12);
    if (sub_23835B0D0() == a6)
      sub_23835B964();
    result = sub_23835AFBC();
    if (v16 == 1)
      result = UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a4, v12, v14, a5, a6, a7);
    *(_QWORD *)(v15 + 8) = a3;
  }
  return result;
}

uint64_t sub_2382D81EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[1] = a2;
  v11[0] = a1;
  v8 = sub_23835AD7C();
  v9 = MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v8);
  return UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)((uint64_t)v11, a3, a4, a5, v8, v9);
}

uint64_t Deque.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  Swift::Int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v16);
  v6 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    sub_23835B82C();
    v7 = sub_23835B820();
    v8 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v16);
    if (v18 < v6 || (v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v9, v10);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v6, 0);
    }
    v11 = *v2;
    v12 = MEMORY[0x24BDAC7A8](v8);
    v16 = v4;
    v17 = a1;
    MEMORY[0x24BDAC7A8](v12);
    v15[2] = v4;
    v15[3] = sub_2382DAA60;
    v15[4] = v13;
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    return sub_23827FF04((uint64_t)sub_2382DAA90, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v4, v14, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v18);
  }
  return result;
}

uint64_t sub_2382D8434(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  Swift::Int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;

  v12 = *a3;
  swift_retain();
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
  result = swift_release();
  v14 = v26 + a2;
  if (__OFADD__(v26, a2))
  {
    __break(1u);
  }
  else
  {
    v25 = a1;
    sub_23835B82C();
    v15 = sub_23835B820();
    v16 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
    if (v26 < v14 || (v15 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, a4, v17, v18);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
    }
    v19 = *a3;
    v20 = MEMORY[0x24BDAC7A8](v16);
    v23[8] = a4;
    v23[9] = a5;
    v23[10] = a6;
    v23[11] = v25;
    v24 = a2;
    MEMORY[0x24BDAC7A8](v20);
    v23[2] = a4;
    v23[3] = sub_2382DB030;
    v23[4] = v21;
    swift_retain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v23, v19, (uint64_t)&type metadata for _DequeBufferHeader, a4, v22, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v26);
    return swift_release();
  }
  return result;
}

uint64_t sub_2382D865C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD);
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _BYTE v24[40];

  v12 = *(_QWORD *)(a4 - 8);
  v13 = (Swift::Int *)MEMORY[0x24BDAC7A8](a1);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Deque._UnsafeHandle.availableSegments()(v13, (uint64_t)v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a4);
  v18 = (void (*)(_QWORD, _QWORD))type metadata accessor for _UnsafeMutableWrappedBuffer(0, a3, v16, v17);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(a6, v15, v18, a4, a5);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = __OFADD__(v20, result);
  v22 = v20 + result;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(a1 + 8) = v22;
  return result;
}

uint64_t sub_2382D8744(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  Swift::Int v14;
  BOOL v15;
  Swift::Int v16;
  _BYTE v17[40];

  Deque._UnsafeHandle.uncheckedAppend(_:)(a3, (uint64_t)a1, a2, a5);
  Deque._UnsafeHandle.availableSegments()(a1, (uint64_t)v17);
  v10 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v8, v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(a4, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = a1[1];
  v15 = __OFADD__(v14, result);
  v16 = v14 + result;
  if (v15)
    __break(1u);
  else
    a1[1] = v16;
  return result;
}

uint64_t Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[12];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27[2];

  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v24 = v9;
  v25 = a3;
  v26 = a4;
  if (sub_23835B0D0() == a3)
    sub_23835B964();
  result = sub_23835AFBC();
  if (LOBYTE(v27[0]) == 1)
  {
    result = sub_23835B190();
    if (result >= 1)
    {
      v11 = result;
      v12 = *v4;
      swift_retain();
      sub_23827FD60((uint64_t)sub_23827FE58, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v23);
      result = swift_release();
      v13 = v27[0] + v11;
      if (__OFADD__(v27[0], v11))
      {
        __break(1u);
      }
      else
      {
        sub_23835B82C();
        v14 = sub_23835B820();
        v15 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v23);
        if (v27[0] < v13 || (v14 & 1) == 0)
        {
          type metadata accessor for Deque._Storage(0, v9, v16, v17);
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v13, 0);
        }
        v18 = *v5;
        v19 = MEMORY[0x24BDAC7A8](v15);
        v22[8] = v9;
        v22[9] = a3;
        v22[10] = a4;
        v22[11] = v11;
        v23 = a1;
        MEMORY[0x24BDAC7A8](v19);
        v22[2] = v9;
        v22[3] = sub_2382DAABC;
        v22[4] = v20;
        swift_retain();
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
        sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v22, v18, (uint64_t)&type metadata for _DequeBufferHeader, v9, v21, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v27);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_2382D8AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  Swift::Int *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _BYTE v24[40];
  _BYTE v25[40];

  v13 = *(_QWORD *)(a6 - 8);
  v14 = (Swift::Int *)MEMORY[0x24BDAC7A8](a1);
  v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Deque._UnsafeHandle.availableSegments()(v14, (uint64_t)v24);
  v19 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v17, v18);
  _UnsafeMutableWrappedBuffer.prefix(_:)(a3, (uint64_t)v25);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v16, a4, a6);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v16, v19, a6, a7);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = __OFADD__(v21, a3);
  v23 = v21 + a3;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(a1 + 8) = v23;
  return result;
}

uint64_t Deque.insert(_:at:)(uint64_t result, Swift::Int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;
  uint64_t *v19;
  Swift::Int v20;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = result;
  v6 = *v3;
  v7 = *(_QWORD *)(a3 + 16);
  swift_retain();
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v18);
  result = swift_release();
  if (v20 < a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v18);
  result = swift_release();
  v8 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  sub_23835B82C();
  v9 = sub_23835B820();
  v10 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v18);
  if (v20 < v8 || (v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v7, v11, v12);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v8, 0);
  }
  v13 = *v3;
  v14 = MEMORY[0x24BDAC7A8](v10);
  v17[8] = v7;
  v17[9] = a2;
  v18 = v5;
  v19 = v3;
  MEMORY[0x24BDAC7A8](v14);
  v17[2] = v7;
  v17[3] = sub_2382DAAFC;
  v17[4] = v15;
  swift_retain();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v17, v13, (uint64_t)&type metadata for _DequeBufferHeader, v7, v16, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v20);
  return swift_release();
}

uint64_t sub_2382D8E2C(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15)
    return Deque._UnsafeHandle.uncheckedPrepend(_:)(a4, a1, a2, a6);
  v16 = *v12;
  swift_retain();
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, a6, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v19);
  swift_release();
  if (v21 == a3)
    return Deque._UnsafeHandle.uncheckedAppend(_:)(a4, (uint64_t)a1, a2, a6);
  Deque._UnsafeHandle.openGap(ofSize:atOffset:)(1, a3, a1, (uint64_t)&v21);
  result = sub_23835AD4C();
  if (result)
  {
    v18 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, a6);
    return sub_2382F7024((uint64_t)v14, v18, a6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Deque.insert<A>(contentsOf:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2382DAB18(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_2382D8FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v18, v19);
  return Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v16, a4, a5, a1, a2, a6, a7, a8);
}

uint64_t Deque.remove(at:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];
  uint64_t v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = result;
  v4 = *v2;
  v5 = *(_QWORD *)(a2 + 16);
  swift_retain();
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v14);
  result = swift_release();
  if (v15 <= v3)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_23835B82C();
  v6 = sub_23835B820();
  if ((v6 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v5, v7, v8);
    Deque._Storage._makeUniqueCopy()();
  }
  v9 = *v2;
  v10 = MEMORY[0x24BDAC7A8](v6);
  v13[8] = v5;
  v13[9] = v2;
  v14 = v3;
  MEMORY[0x24BDAC7A8](v10);
  v13[2] = v5;
  v13[3] = v5;
  v13[4] = sub_2382DAD7C;
  v13[5] = v11;
  swift_retain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DA654, (uint64_t)v13, v9, (uint64_t)&type metadata for _DequeBufferHeader, v5, v12, v5, MEMORY[0x24BEE3F20], (uint64_t)&v15);
  return swift_release();
}

Swift::Int sub_2382D9238(CollectionsInternal::_DequeSlot *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int result;
  uint64_t v10;

  result = Deque.subscript.getter(a4, *a3, a5);
  v10 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
  }
  else if (v10 >= a4)
  {
    return Deque._UnsafeHandle.uncheckedRemove(offsets:)(a4, v10, a1, a2, a5);
  }
  __break(1u);
  return result;
}

uint64_t Deque.removeSubrange(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = result;
  v6 = *(_QWORD *)(a3 + 16);
  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v15);
  if (v16 < a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_23835B82C();
  v7 = sub_23835B820();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v6, v8, v9);
    Deque._Storage._makeUniqueCopy()();
  }
  v10 = *v3;
  v11 = MEMORY[0x24BDAC7A8](v7);
  v14[8] = v6;
  v14[9] = v5;
  v15 = a2;
  MEMORY[0x24BDAC7A8](v11);
  v14[2] = v6;
  v14[3] = sub_2382DAD98;
  v14[4] = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v6, v13, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v16);
}

uint64_t Deque._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[11];
  uint64_t v15;

  v15 = *v2;
  MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, a1);
  result = sub_23835B22C();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    sub_23835B82C();
    v7 = sub_23835B820();
    if ((v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v6, v8, v9);
      Deque._Storage._makeUniqueCopy()();
    }
    v10 = *v2;
    v11 = MEMORY[0x24BDAC7A8](v7);
    v14[8] = v6;
    MEMORY[0x24BDAC7A8](v11);
    v14[2] = v6;
    v14[3] = v6;
    v14[4] = sub_2382DADCC;
    v14[5] = v12;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB288, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v6, v13, v6, MEMORY[0x24BEE3F20], (uint64_t)&v15);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 1, v6);
  }
  return result;
}

Swift::Bool __swiftcall Deque._customRemoveLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = a1;
  v4 = *(_QWORD *)(v1 + 16);
  LOBYTE(a1) = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v14);
  if (v16 < v3)
  {
LABEL_7:
    __break(1u);
    return a1;
  }
  sub_23835B82C();
  v5 = sub_23835B820();
  if ((v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v4, v6, v7);
    Deque._Storage._makeUniqueCopy()();
  }
  v8 = *v2;
  v9 = MEMORY[0x24BDAC7A8](v5);
  v14 = v4;
  v15 = v3;
  MEMORY[0x24BDAC7A8](v9);
  v13[2] = v4;
  v13[3] = sub_2382DADF4;
  v13[4] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v16);
  LOBYTE(a1) = 1;
  return a1;
}

uint64_t Deque.removeFirst()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;

  v13 = *v1;
  MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, a1);
  result = sub_23835B22C();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    sub_23835B82C();
    v5 = sub_23835B820();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v6, v7);
      Deque._Storage._makeUniqueCopy()();
    }
    v8 = *v1;
    v9 = MEMORY[0x24BDAC7A8](v5);
    v12[8] = v4;
    MEMORY[0x24BDAC7A8](v9);
    v12[2] = v4;
    v12[3] = v4;
    v12[4] = sub_2382DAE24;
    v12[5] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    return sub_23827FF04((uint64_t)sub_2382DB288, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, v4, MEMORY[0x24BEE3F20], (uint64_t)&v13);
  }
  return result;
}

Swift::Void __swiftcall Deque.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v1 + 16);
  sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v13);
  if (v15 < a1)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_23835B82C();
  v5 = sub_23835B820();
  if ((v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v4, v6, v7);
    Deque._Storage._makeUniqueCopy()();
  }
  v8 = *v2;
  v9 = MEMORY[0x24BDAC7A8](v5);
  v13 = v4;
  v14 = a1;
  MEMORY[0x24BDAC7A8](v9);
  v12[2] = v4;
  v12[3] = sub_2382DAE4C;
  v12[4] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v15);
}

Swift::Void __swiftcall Deque.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[11];
  _BYTE v12[8];

  if (keepingCapacity)
  {
    v3 = *(_QWORD *)(v1 + 16);
    sub_23835B82C();
    v4 = sub_23835B820();
    if ((v4 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v3, v5, v6);
      Deque._Storage._makeUniqueCopy()();
    }
    v7 = *v2;
    v8 = MEMORY[0x24BDAC7A8](v4);
    v11[8] = v3;
    MEMORY[0x24BDAC7A8](v8);
    v11[2] = v3;
    v11[3] = sub_2382DAE7C;
    v11[4] = v9;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v11, v7, (uint64_t)&type metadata for _DequeBufferHeader, v3, v10, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v12);
  }
  else
  {
    swift_release();
    *v2 = Deque._Storage.init()();
  }
}

uint64_t sub_2382D9AA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = Deque.init()(*(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_2382D9AD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2382DA118(*a1, a1[1], a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t sub_2382D9B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_2382DA880(a1, a2, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t sub_2382D9B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = sub_2382DA980(a1, *(_QWORD *)(a4 + 16), a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a5 = v8;
  return result;
}

uint64_t sub_2382D9BD4(uint64_t a1, uint64_t a2)
{
  Deque.append(_:)(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t sub_2382D9C10(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  Deque.append<A>(contentsOf:)(a1, a4, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_2382D9C5C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2382D9C68(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD))Deque.insert(_:at:));
}

uint64_t sub_2382D9C68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD))
{
  a5(a1, *a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

uint64_t sub_2382D9CA8(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2382DAB18(a1, *a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t sub_2382D9CF8(uint64_t *a1, uint64_t a2)
{
  return Deque.remove(at:)(*a1, a2);
}

uint64_t sub_2382D9D00(uint64_t *a1, uint64_t a2)
{
  return Deque.removeSubrange(_:)(*a1, a1[1], a2);
}

uint64_t sub_2382D9D14(Swift::Int a1)
{
  Deque._customRemoveLast(_:)(a1);
  return 1;
}

uint64_t sub_2382D9D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, a3);
  return sub_23835B2D4();
}

uint64_t sub_2382D9DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)@<X0>(uint64_t *@<X0>, _QWORD *@<X8>);
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;

  v14 = a2;
  v15 = a1;
  v9 = a2;
  v10 = type metadata accessor for Deque.Iterator(0, a2, a3, a4);
  v11 = sub_2382DB23C;
  v12 = &v13;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DB274, (uint64_t)v8, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, v6, v10, MEMORY[0x24BEE3F20], (uint64_t)v16);
  return v17;
}

uint64_t sub_2382D9E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t (*v11)@<X0>(_QWORD *@<X0>, uint64_t *@<X8>);
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;

  v14 = a4;
  v15 = a1;
  v16 = a2;
  v17 = a3;
  v9 = a4;
  type metadata accessor for Deque.Iterator(255, a4, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = sub_2382DB184;
  v12 = &v13;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DA694, (uint64_t)v8, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v6, TupleTypeMetadata2, MEMORY[0x24BEE3F20], (uint64_t)v18);
  return v19;
}

uint64_t sub_2382D9F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_23827FD60((uint64_t)sub_23827FE58, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v3);
  return sub_2382D5898();
}

uint64_t sub_2382D9FA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = result;
  v6 = *(_QWORD *)(a3 + 16);
  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v15);
  if (v16 <= a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_23835B82C();
  v7 = sub_23835B820();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v6, v8, v9);
    Deque._Storage._makeUniqueCopy()();
  }
  v10 = *v3;
  v11 = MEMORY[0x24BDAC7A8](v7);
  v14[8] = v6;
  v14[9] = a2;
  v15 = v5;
  MEMORY[0x24BDAC7A8](v11);
  v14[2] = v6;
  v14[3] = sub_2382DB124;
  v14[4] = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v6, v13, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v16);
}

void sub_2382DA118(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  Swift::Int v50;
  Swift::Int v51;

  v50 = a2;
  v47 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v39 - v16;
  v48 = a1;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v46 = v15;
  v49 = v6;
  v18 = *v6;
  v19 = *(_QWORD *)(a4 + 16);
  sub_23827FD60((uint64_t)sub_23827FE58, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v38);
  if (v51 < v50)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v50 - v48;
  if (__OFSUB__(v50, v48))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v44 = a3;
  v45 = v17;
  v21 = sub_23835B190();
  v22 = v21 - v20;
  if (__OFSUB__(v21, v20))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v23 = v21;
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v18, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v38);
  v24 = v51 + v22;
  if (__OFADD__(v51, v22))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v42 = v22;
  v43 = AssociatedTypeWitness;
  sub_23835B82C();
  v25 = v49;
  v26 = sub_23835B820();
  sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v25, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v38);
  if (v51 < v24 || (v26 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v19, v27, v28);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v24, 0);
  }
  if (v23 >= v20)
    v23 = v20;
  v29 = v48;
  if (!__OFADD__(v48, v23))
  {
    v41 = 0;
    v30 = v44;
    v31 = v47;
    sub_23835B178();
    v32 = v45;
    sub_23835B1A8();
    v40 = (uint64_t (*)(char *, uint64_t))v46[1];
    v33 = v14;
    v34 = v43;
    v35 = v40(v33, v43);
    v46 = &v39;
    v49 = (uint64_t *)*v49;
    v36 = MEMORY[0x24BDAC7A8](v35);
    *(&v39 - 12) = v19;
    *(&v39 - 11) = a5;
    *(&v39 - 10) = v31;
    *(&v39 - 9) = v29;
    *(&v39 - 8) = v50;
    *(&v39 - 7) = v29 + v23;
    *(&v39 - 6) = v30;
    *(&v39 - 5) = (uint64_t)v32;
    *(&v39 - 4) = v42;
    *(&v39 - 3) = v23;
    MEMORY[0x24BDAC7A8](v36);
    *(&v39 - 4) = v19;
    *(&v39 - 3) = (uint64_t)sub_2382DB0E8;
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)(&v39 - 6), (uint64_t)v49, (uint64_t)&type metadata for _DequeBufferHeader, v19, v37, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v51);
    v40(v32, v34);
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_2382DA4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)@<X0>(CollectionsInternal::_DequeSlot *@<X0>, CollectionsInternal::_DequeSlot *@<X8>);
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;

  v14 = a3;
  v15 = a2;
  v16 = a1;
  v9 = a3;
  v10 = type metadata accessor for Deque.Iterator(0, a3, a3, a4);
  v11 = sub_2382DB220;
  v12 = &v13;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DA694, (uint64_t)v8, a1, (uint64_t)&type metadata for _DequeBufferHeader, a3, v6, v10, MEMORY[0x24BEE3F20], (uint64_t)v17);
  return v18;
}

CollectionsInternal::_DequeSlot sub_2382DA588@<X0>(CollectionsInternal::_DequeSlot *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  CollectionsInternal::_DequeSlot *v4;
  CollectionsInternal::_DequeSlot result;
  char v6;

  v4 = *(CollectionsInternal::_DequeSlot **)(v2 + 24);
  result.position = Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1].position).position;
  if (result.position && result.position != v4[1].position)
  {
    v4[1].position = 0;
    v4[2].position = result.position;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_2382DA5F0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_23827FEF0(a1, a2, *(uint64_t (**)(void))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 16), MEMORY[0x24BEE1328], a3);
}

uint64_t sub_2382DA618@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 72) * *(_QWORD *)(v2 + 24));
}

uint64_t sub_2382DA654(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_23827FEF0(a1, a2, *(uint64_t (**)(void))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_2382DA678@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2382D5D04(a1, *(uint64_t (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2382DA694(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_23827FEF0(a1, a2, *(uint64_t (**)(void))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_2382DA6B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  CollectionsInternal::_DequeSlot v6;

  v5 = *(_QWORD *)(v2 + 16);
  v6.position = Deque._UnsafeHandle.slot(forOffset:)(*(_QWORD *)(v2 + 24)).position;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1 + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * v6.position, v5);
}

uint64_t sub_2382DA714@<X0>(Swift::Int *a1@<X8>)
{
  uint64_t v1;

  return sub_2382D6594(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_2382DA72C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382D66BC(a1, a2, v2[3], v2[4], v2[2]);
}

void sub_2382DA748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23827FD60((uint64_t)sub_23827FE58, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a6 + 16), MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v15);
    if (v16[0] >= a5)
    {
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = a3;
      MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, a6);
      v13 = sub_23835B9C4();
      v14 = MEMORY[0x23B831670](MEMORY[0x24BEE4238], v13);
      sub_2382DA118(a4, a5, (uint64_t)v16, a6, v13, v14);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_2382DA848(int a1, int a2)
{
  uint64_t v2;

  return sub_2382D6DCC(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_2382DA864@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2382D6FAC(a1, *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2382DA880(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[13];
  char v11[8];

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    v6 = Deque.init(minimumCapacity:)(a2, a3);
    v7 = MEMORY[0x24BDAC7A8](v6);
    v10[8] = a3;
    v10[9] = a2;
    v10[10] = v5;
    MEMORY[0x24BDAC7A8](v7);
    v10[2] = a3;
    v10[3] = sub_2382DB098;
    v10[4] = v8;
    swift_retain();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v10, v6, (uint64_t)&type metadata for _DequeBufferHeader, a3, v9, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v11);
    swift_release();
    return v6;
  }
  return result;
}

uint64_t sub_2382DA980(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = Deque._Storage.init()();
  v10 = type metadata accessor for Deque(0, a2, v8, v9);
  Deque.append<A>(contentsOf:)(a1, v10, a3, a4);
  return v12;
}

uint64_t sub_2382DA9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382D8434(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_2382DAA08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_2382D865C(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_2382DAA24(Swift::Int *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382D8744(a1, a2, v2[5], v2[6], v2[2]);
}

uint64_t sub_2382DAA44(uint64_t a1, uint64_t a2)
{
  return sub_2382DAAD8(a1, a2, sub_2382D80B0);
}

uint64_t sub_2382DAA60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Deque._UnsafeHandle.uncheckedAppend(_:)(*(_QWORD *)(v2 + 24), a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382DAA90(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_23827FEF0(a1, a2, *(uint64_t (**)(void))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 16), MEMORY[0x24BEE4AE0] + 8, a3);
}

uint64_t sub_2382DAABC(uint64_t a1, uint64_t a2)
{
  return sub_2382DAAD8(a1, a2, sub_2382D8AD4);
}

uint64_t sub_2382DAAD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[5], v3[6], v3[2], v3[3], v3[4]);
}

uint64_t sub_2382DAAFC(Swift::Int *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382D8E2C(a1, a2, v2[3], v2[4], v2[5], v2[2]);
}

uint64_t sub_2382DAB18(uint64_t result, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  Swift::Int v27;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  v10 = result;
  v11 = *v6;
  v12 = *(_QWORD *)(a3 + 16);
  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
  if (v27 < a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v13 = sub_23835B190();
  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, v11, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
  v14 = v27 + v13;
  if (__OFADD__(v27, v13))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v26 = v10;
  sub_23835B82C();
  v15 = sub_23835B820();
  v16 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
  if (v27 < v14 || (v15 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v12, v17, v18);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
  }
  v19 = *v6;
  v20 = MEMORY[0x24BDAC7A8](v16);
  v23[8] = v12;
  v23[9] = a4;
  v23[10] = a5;
  v23[11] = v26;
  v24 = v13;
  v25 = a2;
  MEMORY[0x24BDAC7A8](v20);
  v23[2] = v12;
  v23[3] = sub_2382DB010;
  v23[4] = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  return sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v23, v19, (uint64_t)&type metadata for _DequeBufferHeader, v12, v22, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v27);
}

Swift::Int sub_2382DAD7C(CollectionsInternal::_DequeSlot *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382D9238(a1, a2, *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

Swift::Int sub_2382DAD98(CollectionsInternal::_DequeSlot *a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque._UnsafeHandle.uncheckedRemove(offsets:)(v2[3], v2[4], a1, a2, v2[2]);
}

uint64_t sub_2382DADCC(uint64_t a1)
{
  return Deque._UnsafeHandle.uncheckedRemoveLast()(a1);
}

void sub_2382DADF4()
{
  uint64_t v0;

  Deque._UnsafeHandle.uncheckedRemoveLast(_:)(*(_QWORD *)(v0 + 24));
}

uint64_t sub_2382DAE24(_QWORD *a1)
{
  return Deque._UnsafeHandle.uncheckedRemoveFirst()(a1);
}

void sub_2382DAE4C()
{
  uint64_t v0;

  Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(*(_QWORD *)(v0 + 24));
}

void sub_2382DAE7C()
{
  Deque._UnsafeHandle.uncheckedRemoveAll()();
}

void sub_2382DAEA4()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DAEB4()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382DAEC4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_2382DAF0C()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382DAF1C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2382DAF64()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382DAF74(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4220], a1, &v3);
}

uint64_t sub_2382DAFBC(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4240], a1, &v3);
}

uint64_t type metadata accessor for Deque.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque.Iterator);
}

uint64_t sub_2382DB010(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382D8FE8(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t sub_2382DB030(uint64_t *a1, uint64_t a2)
{
  return sub_2382DB064(a1, a2);
}

uint64_t sub_2382DB044(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382D81EC(a1, a2, v2[5], v2[6], v2[2]);
}

uint64_t sub_2382DB064(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

uint64_t sub_2382DB098(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >= 1)
    result = sub_23835B304();
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

Swift::Int sub_2382DB0E8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382D7510(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[2], v2[3], v2[4]);
}

uint64_t sub_2382DB124(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  CollectionsInternal::_DequeSlot v7;

  v5 = v2[2];
  v4 = v2[3];
  v6 = v2[4];
  v7.position = Deque._UnsafeHandle.slot(forOffset:)(v4).position;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2 + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * v7.position, v6, v5);
}

uint64_t sub_2382DB184@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_2382D5990(a1, v2[3], v2[4], v2[2], a2);
}

unint64_t sub_2382DB1A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F17F8[0];
  if (!qword_2568F17F8[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F17F0);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE2C68], v1);
    atomic_store(result, qword_2568F17F8);
  }
  return result;
}

uint64_t sub_2382DB1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382D55F8(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382DB204(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382D5698(a1, a2, *(_OWORD **)(v2 + 24), *(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382DB220@<X0>(CollectionsInternal::_DequeSlot *a1@<X0>, CollectionsInternal::_DequeSlot *a2@<X8>)
{
  uint64_t v2;

  return sub_2382D52CC(*(_QWORD *)(v2 + 24), a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_2382DB23C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1[2];
  v4 = a1[1] + v3;
  if (*a1 < v4)
    v4 = *a1;
  *a2 = *(_QWORD *)(v2 + 24);
  a2[1] = v3;
  a2[2] = v4;
  return swift_retain();
}

uint64_t sub_2382DB274(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_2382DA694(a1, a2, a3);
}

uint64_t sub_2382DB288(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_2382DA654(a1, a2, a3);
}

uint64_t sub_2382DB29C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_2382DAA90(a1, a2, a3);
}

uint64_t OrderedSet.count.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t OrderedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedSet.isEmpty.getter()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v0);
  return sub_23835B22C() & 1;
}

uint64_t OrderedSet.subscript.getter()
{
  return sub_23835B724();
}

BOOL OrderedSet._customContainsEquatableElement(_:)()
{
  char v0;

  OrderedSet._find(_:)();
  return (v0 & 1) == 0;
}

uint64_t OrderedSet._copyToContiguousArray()()
{
  uint64_t v0;

  v0 = sub_2382DBBB0();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v4);
  v5 = sub_23835B22C();
  if ((v5 & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](v5);
    sub_23835B694();
  }
  return a3;
}

uint64_t sub_2382DB474@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = sub_23835AD4C();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  result = sub_23835AD4C();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (a2 >= a1)
    a2 = a1;
  result = sub_23835B2F8();
  *a3 = a2;
  return result;
}

uint64_t OrderedSet.withContiguousStorageIfAvailable<A>(_:)()
{
  return sub_23835B64C();
}

uint64_t sub_2382DB530(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>, a1);
  return sub_23835B1F0();
}

BOOL sub_2382DB564()
{
  return OrderedSet._customContainsEquatableElement(_:)();
}

uint64_t sub_2382DB574()
{
  uint64_t v0;

  v0 = sub_2382DBBB0();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_2382DB5C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = OrderedSet._copyContents(initializing:)(a2, a3, *v3);
  a1[1] = v5;
  a1[2] = v6;
  return v7;
}

uint64_t sub_2382DB604()
{
  return OrderedSet.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t OrderedSet.indices.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v0);
  sub_23835B16C();
  return v2;
}

Swift::Int __swiftcall OrderedSet.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedSet.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedSet.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedSet.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedSet.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedSet.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedSet.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain();
  return a3;
}

uint64_t OrderedSet._customIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + 16);
  v9 = a2 + 32;
  swift_retain();
  sub_2382DB85C(v8, v9, a1, a3, a5, (uint64_t)&v11);
  swift_release();
  return v11;
}

uint64_t sub_2382DB85C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;

  v15 = a4;
  v11 = sub_23835B6E8();
  v12 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v11);
  result = _HashTable.UnsafeHandle._find<A>(_:in:)(a3, (uint64_t)&v15, a1, a2, v11, v12, a5);
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = v14 & 1;
  *(_BYTE *)(a6 + 9) = 0;
  return result;
}

uint64_t OrderedSet._customLastIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet._customIndexOfEquatableElement(_:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v5[1] = a3;
  v6 = a1;
  v5[0] = a2;
  v3 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v3);
  return sub_2382ACD4C((uint64_t)&v6, (uint64_t)v5);
}

void sub_2382DB97C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
}

void (*sub_2382DB98C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  sub_23835B724();
  return sub_2382CB15C;
}

uint64_t sub_2382DB9F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = OrderedSet.subscript.getter(*a1, a1[1], *v2);
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

double sub_2382DBA2C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v2);
  sub_23835B16C();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_2382DBAA4()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v0);
  return sub_23835B22C() & 1;
}

uint64_t sub_2382DBB00()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t sub_2382DBB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  char v6;
  char v7;

  result = OrderedSet._customIndexOfEquatableElement(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 9) = v7 & 1;
  return result;
}

uint64_t sub_2382DBB4C(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v5 = *a1;
  v4 = *a2;
  v2 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v2);
  return sub_2382ACD4C((uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_2382DBBB0()
{
  swift_retain();
  return sub_23835B664();
}

uint64_t sub_2382DBBD8@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2382DB474(a1, *(_QWORD *)(v2 + 40), a2);
}

void sub_2382DBBF4()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DBC04()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DBC14()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DBC24()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DBC34()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DBC44()
{
  JUMPOUT(0x23B831670);
}

uint64_t OrderedSet.UnorderedView._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedSet.UnorderedView._base.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.UnorderedView._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedSet.unordered.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

void (*OrderedSet.unordered.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = v2[1];
  *v5 = *v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v5[2] = v2;
  v5[3] = v7;
  v5[4] = v8;
  *v2 = OrderedSet.init()();
  v2[1] = v9;
  return sub_2382DBD70;
}

void sub_2382DBD70(_QWORD **a1)
{
  void *v1;

  v1 = *a1;
  sub_2382DBDB0((_QWORD *)(*a1)[2], *a1);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_2382DBDB0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.unordered.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  swift_retain();
  swift_retain();
  v5 = OrderedSet.init()();
  v7 = v6;
  swift_release();
  swift_release();
  *v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  sub_2382DBDB0(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_2382DBEB0(uint64_t a1)
{
  _QWORD *v1;

  return OrderedSet.UnorderedView.description.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t OrderedSet.UnorderedView.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  swift_retain();
  swift_retain();
  sub_23835B5B0();
  v6 = sub_23834ADF4();
  v8 = v7;
  swift_bridgeObjectRelease();
  sub_23835AE90();
  v10 = type metadata accessor for OrderedSet(0, a3, a4, v9);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>, v10);
  v11 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v13, 1, v6, v8, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_2382DBFE4(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.UnorderedView.debugDescription.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t OrderedSet.UnorderedView.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];

  v8 = sub_23835BA60();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0B10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[2] = a1;
  v20[3] = a2;
  v20[1] = a2;
  v14 = *MEMORY[0x24BEE4368];
  v15 = sub_23835BA54();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for OrderedSet.UnorderedView(0, a3, a4, v17);
  v18 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v18);
  sub_23829A850((uint64_t)v10);
  swift_retain();
  swift_retain_n();
  return sub_23835BA6C();
}

uint64_t type metadata accessor for OrderedSet.UnorderedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet.UnorderedView);
}

uint64_t sub_2382DC194(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.UnorderedView.customMirror.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t static OrderedSet.UnorderedView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  BOOL v20;
  _QWORD v22[2];

  v22[1] = a6;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 && a3 && a1 == a3)
    return 1;
  v15 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v15 != _s19CollectionsInternal4HeapV5countSivg_0())
    return 0;
  v16 = *(_QWORD *)(a2 + 16);
  if (!v16)
    return 1;
  swift_retain();
  swift_retain();
  sub_23835B724();
  v17 = OrderedSet.contains(_:)();
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, a5);
  if (v17)
  {
    v19 = 1;
    while (v16 != v19)
    {
      sub_23835B724();
      ++v19;
      v20 = OrderedSet.contains(_:)();
      v18(v13, a5);
      if (!v20)
        goto LABEL_11;
    }
    swift_release();
    v14 = 1;
  }
  else
  {
LABEL_11:
    swift_release();
    v14 = 0;
  }
  swift_release();
  return v14;
}

uint64_t sub_2382DC340(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.UnorderedView.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t OrderedSet.UnorderedView.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v8 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_OWORD *)(v9 + 48);
  v22 = *(_OWORD *)(v9 + 32);
  v23 = v12;
  v24 = *(_QWORD *)(v9 + 64);
  v13 = *(_OWORD *)(v9 + 16);
  v20 = *(_OWORD *)v9;
  v21 = v13;
  sub_23835BA3C();
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    v19[0] = a2;
    v19[1] = a1;
    swift_retain();
    swift_retain();
    v15 = 0;
    v16 = 0;
    do
    {
      sub_23835B724();
      ++v16;
      v17 = sub_23835ABF0();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a4);
      v15 ^= v17;
    }
    while (v14 != v16);
    swift_release();
    swift_release();
  }
  return sub_23835BA00();
}

uint64_t OrderedSet.UnorderedView.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[72];

  sub_23835B9E8();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v7, a1, a2, a3);
  return sub_23835BA48();
}

uint64_t sub_2382DC4FC(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.UnorderedView.hashValue.getter(*v1, v1[1], *(_QWORD *)(a1 + 16));
}

uint64_t sub_2382DC50C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedSet.UnorderedView.hash(into:)(a1, *v2, v2[1], *(_QWORD *)(a2 + 16));
}

uint64_t sub_2382DC51C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  sub_23835B9E8();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v5, *v2, v2[1], *(_QWORD *)(a2 + 16));
  return sub_23835BA48();
}

uint64_t OrderedSet.UnorderedView.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  uint64_t v8;

  v8 = a1;
  v5 = sub_23835B0D0();
  v6 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x23B831670](MEMORY[0x24BEE12D8], v5);
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, v6);
}

uint64_t sub_2382DC5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_23835B0D0();
  v7 = *(_QWORD *)(a2 + 24);
  v8 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x23B831670](MEMORY[0x24BEE12D8], v6);
  result = OrderedSet.init<A>(_:)((uint64_t)&v11, v5, v6, v7, v8);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t sub_2382DC640@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = OrderedSet.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_2382DC670()
{
  return OrderedSet.contains(_:)();
}

uint64_t sub_2382DC684@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = sub_2382DD238(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = v6;
  swift_release();
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_2382DD238(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_2382DC730@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = sub_2382DD23C(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = v6;
  swift_release();
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_2382DD23C(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_2382DC7E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = sub_2382DD2C8(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = v6;
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_2382DD2C8(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.UnorderedView.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;

  v5 = *(_QWORD *)(a3 + 16);
  type metadata accessor for OrderedSet(0, v5, *(_QWORD *)(a3 + 24), a4);
  v6 = OrderedSet._append(_:)(a2);
  sub_23835B724();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  return v6 & 1;
}

uint64_t sub_2382DC950@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return OrderedSet.remove(_:)(v4, a3);
}

uint64_t OrderedSet.UnorderedView.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return OrderedSet.remove(_:)(v4, a3);
}

uint64_t OrderedSet.UnorderedView.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a2 + 16);
  type metadata accessor for OrderedSet(0, v7, *(_QWORD *)(a2 + 24), a3);
  if ((OrderedSet._append(_:)(a1) & 1) != 0)
  {
    v9 = *(_QWORD *)(v7 - 8);
    v10 = 1;
  }
  else
  {
    v11 = v8;
    sub_23835B724();
    v12 = sub_23835B6E8();
    sub_23835B688();
    v13 = *(_QWORD *)(v4 + 8);
    sub_2382E6D94(v11, v13);
    v9 = *(_QWORD *)(v7 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v13+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v11, a1, v7);
    nullsub_1(v12, v14, v15, v16, v17);
    v10 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1, v7);
}

uint64_t sub_2382DCADC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  sub_238283D24(v4, v5, v6);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  sub_238283D24(a1, a2, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_2382DCB7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.formIntersection(_:)(*a1, a1[1], a2, a4);
}

uint64_t OrderedSet.UnorderedView.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return OrderedSet.formIntersection(_:)(a1, a2, v6);
}

uint64_t sub_2382DCBCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2382DD2CC(*a1, a1[1], a2, a4);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2382DD2CC(a1, a2, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_2382DCC44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;

  result = OrderedSet.UnorderedView.subtracting(_:)(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t OrderedSet.UnorderedView.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v10 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>, v10);
  return OrderedSet._subtracting<A>(_:)((uint64_t)v12, a3, a4, a5, v10, a6);
}

uint64_t sub_2382DCD04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2382DCD30(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedSet.UnorderedView.isSubset(of:));
}

uint64_t sub_2382DCD14(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2382DCD30(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedSet.UnorderedView.isDisjoint(with:));
}

uint64_t sub_2382DCD24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2382DCD30(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedSet.UnorderedView.isSuperset(of:));
}

uint64_t sub_2382DCD30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(*a1, a1[1], *v4, v4[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_2382DCD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  v13 = OrderedSet.init<A>(_:)((uint64_t)v12, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
  v15 = v14;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
  *a5 = v13;
  a5[1] = v15;
  return result;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  v13 = OrderedSet.init<A>(_:)((uint64_t)v12, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  return v13;
}

uint64_t sub_2382DCEC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.subtract(_:)(*a1, a1[1], a2, a4);
}

uint64_t OrderedSet.UnorderedView.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];

  v5 = *v4;
  v6 = v4[1];
  v12[0] = a1;
  v12[1] = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = type metadata accessor for OrderedSet(0, v7, v8, a4);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>, v9);
  result = OrderedSet._subtracting<A>(_:)((uint64_t)v12, v5, v6, v7, v9, v8);
  *v4 = result;
  v4[1] = v11;
  return result;
}

uint64_t OrderedSet.UnorderedView.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_238283900(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_238283A18(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t OrderedSet.UnorderedView.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2382DD14C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))j___s19CollectionsInternal10OrderedSetV6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF);
}

uint64_t OrderedSet.UnorderedView.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;

  v9 = sub_238302690(a1, a2, a3, a4, a5, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v9;
}

uint64_t OrderedSet.UnorderedView.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_2382EEE40(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.UnorderedView.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return OrderedSet.formIntersection<A>(_:)(a1, v6, a3);
}

uint64_t OrderedSet.UnorderedView.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = sub_23830AB44(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2382DD14C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238271D5C);
}

uint64_t sub_2382DD14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  a5(a1, v9, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t OrderedSet.UnorderedView.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  result = OrderedSet._subtracting<A>(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  *v3 = result;
  v3[1] = v5;
  return result;
}

uint64_t OrderedSet.UnorderedView.isEqualSet(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static OrderedSet.UnorderedView.== infix(_:_:)(a3, a4, a1, a2, a5, a6);
}

uint64_t sub_2382DD23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  swift_retain();
  swift_retain();
  v12 = sub_2382EECD4(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v12;
}

uint64_t sub_2382DD2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return sub_238271D04(a1, a2, v6);
}

void sub_2382DD30C()
{
  JUMPOUT(0x23B831670);
}

void sub_2382DD31C()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382DD330()
{
  swift_release();
  return swift_release();
}

_QWORD *sub_2382DD358(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_2382DD38C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_2382DD3E8(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_2382DD424(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2382DD46C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _UnsafePath.isOnItem.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (a3 >> 40) & 1;
}

uint64_t _UnsafePath.currentItemSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _HashNode.path(to:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v13 = 0;
  for (i = 0; ; i = (i + 5))
  {
    v15 = nullsub_1(a3 + 16, a3 + 32, a5, a6, a7);
    v17 = _HashNode.UnsafeHandle.find(_:_:_:)(i, a1, a2, v15, v16, a5, a6, a7);
    if (v17 == 2)
      break;
    v18 = HIDWORD(v17);
    if ((v17 & 1) == 0)
      return v13;
    a3 = *(_QWORD *)(a3 + 32 + 16 * v18);
    v13 |= v18 << i;
  }
  return 0;
}

uint64_t _UnsafePath.childSlot(at:)(char a1, unint64_t a2)
{
  return (a2 >> a1) & 0x1F;
}

uint64_t _UnsafePath.init(root:)()
{
  swift_beginAccess();
  return 0;
}

uint64_t _UnsafePath.selectItem(at:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 21) = 1;
  return result;
}

Swift::Void __swiftcall _UnsafePath.selectEnd()()
{
  uint64_t v0;
  uint64_t v1;
  uint8x8_t v2;
  __int32 v3;

  v1 = *(_QWORD *)(v0 + 8);
  swift_beginAccess();
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v1 + 20));
  v2.i16[0] = vaddlv_u8(v2);
  v3 = v2.i32[0];
  if (*(_DWORD *)(v1 + 16) == *(_DWORD *)(v1 + 20))
    v3 = 0;
  *(_DWORD *)(v0 + 16) = v3;
  *(_BYTE *)(v0 + 21) = 0;
}

uint64_t _UnsafePath.descendToChild(_:at:)(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char v4;
  uint64_t result;

  v4 = *(_BYTE *)(v2 + 20);
  *(_QWORD *)v2 |= (unint64_t)a2 << v4;
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = 0;
  result = swift_beginAccess();
  *(_BYTE *)(v2 + 21) = *(_DWORD *)(a1 + 16) != 0;
  *(_BYTE *)(v2 + 20) = v4 + 5;
  return result;
}

unint64_t static _UnsafePath.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a3 & 0xFFFFFFFFFFLL) == (a6 & 0xFFFFFFFFFFLL) && a1 == a4)
    return ((a3 & 0x10000000000) == 0) ^ (a6 >> 40) & 1;
  else
    return 0;
}

BOOL static _UnsafePath.< infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2382DFAF0(a1, a3, BYTE4(a3), BYTE5(a3) & 1, a4, a6, BYTE4(a6), BYTE5(a6) & 1);
}

uint64_t _UnsafePath.description.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;

  if (BYTE4(a3))
  {
    v4 = 0;
    v5 = HIDWORD(a3);
    do
    {
      sub_23835B880();
      sub_23835AE90();
      swift_bridgeObjectRelease();
      sub_23835AE90();
      swift_bridgeObjectRelease();
      v4 += 5;
    }
    while (v4 < v5);
  }
  if ((a3 & 0x10000000000) != 0)
  {
    swift_beginAccess();
    goto LABEL_12;
  }
  swift_beginAccess();
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    v6.i32[0] = *(_DWORD *)(a2 + 20);
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (a3 < (unint64_t)v7.u32[0])
    {
      sub_23835B880();
      sub_23835AE90();
      swift_bridgeObjectRelease();
LABEL_13:
      sub_23835AE90();
      swift_bridgeObjectRelease();
      return 64;
    }
    if (v7.i32[0] != (_DWORD)a3)
      return 64;
LABEL_12:
    sub_23835B880();
    sub_23835AE90();
    swift_bridgeObjectRelease();
    sub_23835AE90();
    goto LABEL_13;
  }
  if (!(_DWORD)a3)
    goto LABEL_12;
  return 64;
}

Swift::Void __swiftcall _UnsafePath.descendToLeftMostItem()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  char v10;
  int v11;

  if ((*(_BYTE *)(v0 + 21) & 1) == 0)
  {
    v1 = *(unsigned int *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 8);
    swift_beginAccess();
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v2 + 20));
    v3.i16[0] = vaddlv_u8(v3);
    if (*(_DWORD *)(v2 + 16) != *(_DWORD *)(v2 + 20) && v1 < v3.i32[0])
    {
      v5 = *(_QWORD *)(v2 + 16 * v1 + 32);
      v6 = *(_BYTE *)(v0 + 20);
      *(_QWORD *)v0 |= v1 << v6;
      *(_QWORD *)(v0 + 8) = v5;
      *(_DWORD *)(v0 + 16) = 0;
      swift_beginAccess();
      v7 = *(_DWORD *)(v5 + 16);
      *(_BYTE *)(v0 + 21) = v7 != 0;
      *(_BYTE *)(v0 + 20) = v6 + 5;
      if (!v7)
      {
        do
        {
          swift_beginAccess();
          v8 = *(_DWORD *)(v5 + 20);
          if (*(_DWORD *)(v5 + 16) == v8 || v8 == 0)
            break;
          v5 = *(_QWORD *)(v5 + 32);
          *(_QWORD *)(v0 + 8) = v5;
          v10 = *(_BYTE *)(v0 + 20);
          *(_DWORD *)(v0 + 16) = 0;
          swift_beginAccess();
          v11 = *(_DWORD *)(v5 + 16);
          *(_BYTE *)(v0 + 21) = v11 != 0;
          *(_BYTE *)(v0 + 20) = v10 + 5;
        }
        while (!v11);
      }
    }
  }
}

uint64_t _UnsafePath.findSuccessorItem(under:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint8x8_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  uint8x8_t v20;
  BOOL v21;
  int8x8_t v22;
  uint8x8_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  int v32;
  int v33;
  char v35;
  int v36;
  int v37;
  uint8x8_t v38;
  __int32 v39;
  uint64_t v41;
  unint64_t v42;

  v2 = *((unsigned __int8 *)v1 + 21);
  if ((_DWORD)v2 == 1)
  {
    v4 = *((_DWORD *)v1 + 4) + 1;
    *((_DWORD *)v1 + 4) = v4;
    v5 = v1[1];
    swift_beginAccess();
    v6 = *(_DWORD *)(v5 + 16);
    v7 = *(_DWORD *)(v5 + 20);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.i32[0];
    if (v6 == v7)
      v9 = *(_DWORD *)(v5 + 16);
    if (v4 >= v9)
    {
      *((_DWORD *)v1 + 4) = 0;
      *((_BYTE *)v1 + 21) = 0;
      v10 = v6 == v7 || v7 == 0;
      if (v10)
      {
        v11 = *((unsigned __int8 *)v1 + 20);
        if (!*((_BYTE *)v1 + 20))
          goto LABEL_42;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v41 = a1;
        v42 = *v1;
        do
        {
          v17 = v13;
          swift_beginAccess();
          v18 = (int8x8_t)*(unsigned int *)(a1 + 20);
          if (v12 < 0x40u)
            v19 = ~(-1 << (v12 & 0x3F));
          else
            v19 = -1;
          v20 = (uint8x8_t)vcnt_s8(v18);
          v20.i16[0] = vaddlv_u8(v20);
          v21 = *(_DWORD *)(a1 + 16) == v18.i32[0] || ((v42 >> v12) & 0x1F) + 1 >= v20.i32[0];
          if (!v21)
            v17 = v19 & v42;
          v13 = v17;
          if (!v21)
          {
            v14 = a1;
            v15 = (v42 >> v12) & 0x1F;
            v16 = v12;
          }
          a1 = *(_QWORD *)(a1 + 16 * ((v42 >> v12) & 0x1F) + 32);
          v12 += 5;
        }
        while (v11 > v12);
        v2 = 1;
        a1 = v41;
        if (v14)
        {
          *v1 = v17;
          v1[1] = v14;
          *((_DWORD *)v1 + 4) = v15;
          *((_BYTE *)v1 + 20) = v16;
          *((_BYTE *)v1 + 21) = 0;
          swift_beginAccess();
          v22 = (int8x8_t)*(unsigned int *)(v14 + 20);
          if (*(_DWORD *)(v14 + 16) != v22.i32[0])
          {
            v23 = (uint8x8_t)vcnt_s8(v22);
            v23.i16[0] = vaddlv_u8(v23);
            if (v15 < v23.i32[0])
              *((_DWORD *)v1 + 4) = ++v15;
          }
          swift_beginAccess();
          v24 = (int8x8_t)*(unsigned int *)(v14 + 20);
          if (*(_DWORD *)(v14 + 16) != v24.i32[0])
          {
            v25 = (uint8x8_t)vcnt_s8(v24);
            v25.i16[0] = vaddlv_u8(v25);
            if (v15 < v25.i32[0])
            {
              v26 = *(_QWORD *)(v14 + 16 * v15 + 32);
              v27 = ((unint64_t)v15 << v16) | v17;
              *v1 = v27;
              v1[1] = v26;
              *((_DWORD *)v1 + 4) = 0;
              swift_beginAccess();
              v28 = *(_DWORD *)(v26 + 16);
              *((_BYTE *)v1 + 21) = v28 != 0;
              v29 = v16 + 5;
              *((_BYTE *)v1 + 20) = v16 + 5;
              if (!v28)
              {
                do
                {
                  swift_beginAccess();
                  v30 = *(_DWORD *)(v26 + 20);
                  if (*(_DWORD *)(v26 + 16) == v30 || v30 == 0)
                    break;
                  v26 = *(_QWORD *)(v26 + 32);
                  *v1 = v27;
                  v1[1] = v26;
                  *((_DWORD *)v1 + 4) = 0;
                  swift_beginAccess();
                  v32 = *(_DWORD *)(v26 + 16);
                  *((_BYTE *)v1 + 21) = v32 != 0;
                  v29 += 5;
                  *((_BYTE *)v1 + 20) = v29;
                }
                while (!v32);
              }
            }
          }
        }
        else
        {
LABEL_42:
          swift_beginAccess();
          v37 = *(_DWORD *)(a1 + 16);
          *v1 = 0;
          v1[1] = a1;
          *((_DWORD *)v1 + 4) = 0;
          *((_BYTE *)v1 + 20) = 0;
          *((_BYTE *)v1 + 21) = v37 != 0;
          v10 = v37 == *(_DWORD *)(a1 + 20);
          v38 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
          v38.i16[0] = vaddlv_u8(v38);
          v39 = v38.i32[0];
          if (v10)
            v39 = 0;
          *((_DWORD *)v1 + 4) = v39;
          *((_BYTE *)v1 + 21) = 0;
        }
      }
      else
      {
        do
        {
          swift_beginAccess();
          v33 = *(_DWORD *)(v5 + 20);
          if (*(_DWORD *)(v5 + 16) == v33 || v33 == 0)
            break;
          v5 = *(_QWORD *)(v5 + 32);
          v1[1] = v5;
          v35 = *((_BYTE *)v1 + 20);
          *((_DWORD *)v1 + 4) = 0;
          swift_beginAccess();
          v36 = *(_DWORD *)(v5 + 16);
          *((_BYTE *)v1 + 21) = v36 != 0;
          *((_BYTE *)v1 + 20) = v35 + 5;
        }
        while (!v36);
      }
    }
  }
  return v2;
}

uint64_t _RawHashNode.distance(_:from:to:)(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  int v16;
  uint64_t v17;
  unint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  int8x8_t v23;
  __int32 v24;
  uint8x8_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[3];

  v16 = result;
  v17 = a9;
  if ((a4 & 0x10000000000) == 0)
  {
    result = swift_beginAccess();
    LODWORD(v20) = *(_DWORD *)(a3 + 16);
    if ((_DWORD)v20 == *(_DWORD *)(a3 + 20))
    {
      if ((_DWORD)a4)
        goto LABEL_4;
LABEL_20:
      if ((a7 & 0x10000000000) != 0)
        goto LABEL_36;
      swift_beginAccess();
      LODWORD(v20) = *(_DWORD *)(a6 + 16);
      v24 = *(_DWORD *)(a6 + 20);
      if ((_DWORD)v20 != v24)
        goto LABEL_35;
      if ((_DWORD)a7)
        goto LABEL_36;
      goto LABEL_39;
    }
    v19.i32[0] = *(_DWORD *)(a3 + 20);
    v22 = (uint8x8_t)vcnt_s8(v19);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] == (_DWORD)a4)
      goto LABEL_20;
  }
LABEL_4:
  if ((a7 & 0x10000000000) == 0)
  {
    result = swift_beginAccess();
    if (*(_DWORD *)(a6 + 16) == *(_DWORD *)(a6 + 20))
    {
      if ((_DWORD)a7)
        goto LABEL_7;
    }
    else
    {
      v21.i32[0] = *(_DWORD *)(a6 + 20);
      v25 = (uint8x8_t)vcnt_s8(v21);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.i32[0] != (_DWORD)a7)
        goto LABEL_7;
    }
    if ((a4 & 0x10000000000) == 0)
    {
      swift_beginAccess();
      if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a3 + 20))
      {
        if (!(_DWORD)a4)
          goto LABEL_49;
      }
      else
      {
        v26.i32[0] = *(_DWORD *)(a3 + 20);
        v28 = (uint8x8_t)vcnt_s8(v26);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.i32[0] == (_DWORD)a4)
          goto LABEL_49;
      }
    }
    if (BYTE4(a4) <= v16)
    {
      v17 = a4;
    }
    else
    {
      sub_2382DEDE4((unsigned int *)(a8 + 16), a8 + 32, (a2 >> v16) & 0x1F, v16, a2, a3, a4 & 0x1FFFFFFFFFFLL, &v31);
      v17 = v31;
    }
LABEL_49:
    result = a9 - v17;
    if (__OFSUB__(a9, v17))
    {
      __break(1u);
      goto LABEL_52;
    }
    return result;
  }
LABEL_7:
  v20 = HIDWORD(a7);
  if (BYTE4(a4) == BYTE4(a7) && a2 == a5)
  {
    if (a3 == a6)
    {
      if (a4 >= a7)
        return -(uint64_t)(a4 - a7);
      else
        return (a7 - a4);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v18 = HIDWORD(a4);
    if (BYTE4(a4) >= BYTE4(a7))
    {
      if (BYTE4(a7))
        goto LABEL_30;
      goto LABEL_32;
    }
    if (!BYTE4(a4))
      goto LABEL_56;
    if ((a4 & 0xC000000000) == 0)
      goto LABEL_55;
    if (a2 == a5)
    {
LABEL_56:
      sub_2382DF338((unsigned int *)(a3 + 16), a3 + 32, a4, v18, a5, a6, a7 & 0x1FFFFFFFFFFLL, v32);
      return v32[0];
    }
    else
    {
      if ((a7 & 0xC000000000) != 0)
        goto LABEL_43;
LABEL_42:
      while (a2 << -(char)v20 == a5 << -(char)v20)
      {
LABEL_32:
        sub_2382DF338((unsigned int *)(a6 + 16), a6 + 32, a7, v20, a2, a3, a4 & 0x1FFFFFFFFFFLL, v32);
        v24 = v32[0];
        result = -v32[0];
        if (!__OFSUB__(0, v32[0]))
          return result;
        __break(1u);
LABEL_35:
        v23.i32[0] = v24;
        v27 = (uint8x8_t)vcnt_s8(v23);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.i32[0] != (_DWORD)a7)
        {
LABEL_36:
          if (BYTE4(a7) <= v16)
          {
            v17 = a7;
          }
          else
          {
            sub_2382DEDE4((unsigned int *)(a8 + 16), a8 + 32, (a5 >> v16) & 0x1F, v16, a5, a6, a7 & 0x1FFFFFFFFFFLL, v32);
            v17 = v32[0];
          }
        }
LABEL_39:
        result = v17 - a9;
        if (!__OFSUB__(v17, a9))
          return result;
        __break(1u);
      }
LABEL_43:
      while (!sub_2382DFAF0(a2, a4, v18, BYTE5(a4) & 1, a5, a7, v20, BYTE5(a7) & 1))
      {
LABEL_52:
        v29 = sub_2382DF0DC(v16, a5, a6, a7 & 0x1FFFFFFFFFFLL, a2, a3, a4 & 0x1FFFFFFFFFFLL, a8);
        v30 = __OFSUB__(0, v29);
        result = -v29;
        if (!v30)
          return result;
        __break(1u);
LABEL_55:
        if (a2 << -(char)v18 == a5 << -(char)v18)
          goto LABEL_56;
LABEL_30:
        if ((a7 & 0xC000000000) == 0)
          goto LABEL_42;
        if (a2 == a5)
          goto LABEL_32;
      }
      return sub_2382DF0DC(v16, a2, a3, a4 & 0x1FFFFFFFFFFLL, a5, a6, a7 & 0x1FFFFFFFFFFLL, a8);
    }
  }
  return result;
}

BOOL _RawHashNode.seek(_:_:offsetBy:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a3;
  if ((sub_2382DF410(a1, a2, &v7, a4) & 1) != 0)
    return 1;
  return a3 > 0 && v7 == 0;
}

uint64_t _RawHashNode.seek(_:_:offsetBy:limitedBy:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  unsigned int v8;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  char v25;
  int8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  int v29;
  uint64_t v32[3];
  uint64_t v33;

  v8 = a6;
  v14 = HIDWORD(a6);
  v15 = a6 & 0x10000000000;
  if (a3 < 1)
  {
    if (a3 < 0)
    {
      if (sub_2382DFAF0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20), *(_BYTE *)(a2 + 21), a4, a6, BYTE4(a6), v15 != 0))
      {
        goto LABEL_3;
      }
      v33 = a3;
      if ((sub_2382DF410(a1, a2, &v33, a7) & 1) != 0)
      {
        v20 = v15 != 0;
        v22 = *(_QWORD *)a2;
        v23 = *(_DWORD *)(a2 + 16);
        v17 = *(_BYTE *)(a2 + 21);
        v24 = *(_BYTE *)(a2 + 20);
        v18 = a4;
        v19 = v8;
        v21 = v14;
        goto LABEL_10;
      }
      v25 = 1;
LABEL_12:
      v16 = 0;
      *(_QWORD *)a2 = a4;
      *(_QWORD *)(a2 + 8) = a5;
      *(_DWORD *)(a2 + 16) = v8;
      *(_BYTE *)(a2 + 20) = v14;
      *(_BYTE *)(a2 + 21) = BYTE5(v15);
      if ((v25 & 1) == 0 && !v33 && !v15)
      {
        swift_beginAccess();
        v27 = 0;
        if (*(_DWORD *)(a5 + 16) != *(_DWORD *)(a5 + 20))
        {
          v26.i32[0] = *(_DWORD *)(a5 + 20);
          v28 = (uint8x8_t)vcnt_s8(v26);
          v28.i16[0] = vaddlv_u8(v28);
          v27 = v28.u32[0];
        }
        v16 = v27 == v8;
      }
      goto LABEL_18;
    }
    v33 = a3;
    if ((sub_2382DF410(a1, a2, &v33, a7) & 1) != 0)
    {
      v16 = 1;
LABEL_18:
      v29 = 256;
      return v29 | v16;
    }
LABEL_11:
    v25 = 0;
    goto LABEL_12;
  }
  if (!sub_2382DFAF0(a4, a6, BYTE4(a6), v15 != 0, *(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20), *(_BYTE *)(a2 + 21)))
  {
    v33 = a3;
    if ((sub_2382DF410(a1, a2, &v33, a7) & 1) != 0)
    {
      v17 = v15 != 0;
      v18 = *(_QWORD *)a2;
      v19 = *(_DWORD *)(a2 + 16);
      v20 = *(_BYTE *)(a2 + 21);
      v21 = *(_BYTE *)(a2 + 20);
      v22 = a4;
      v23 = v8;
      v24 = v14;
LABEL_10:
      v16 = !sub_2382DFAF0(v22, v23, v24, v17, v18, v19, v21, v20);
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_3:
  v32[0] = a3;
  v16 = (sub_2382DF410(a1, a2, v32, a7) & 1) != 0 || a3 > 0 && v32[0] == 0;
  v29 = 0;
  return v29 | v16;
}

uint64_t _UnsafePath.ancestors.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UnsafePath.ancestors.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _UnsafePath.node.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _UnsafePath.node.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_UnsafePath.node.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _UnsafePath.nodeSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafePath.nodeSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafePath.nodeSlot.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

unint64_t _UnsafePath.level.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIDWORD(a3);
}

uint64_t _UnsafePath.level.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = result;
  return result;
}

uint64_t (*_UnsafePath.level.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _UnsafePath._isItem.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (a3 >> 40) & 1;
}

uint64_t _UnsafePath._isItem.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 21) = result;
  return result;
}

uint64_t (*_UnsafePath._isItem.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _UnsafePath.init(_:_:_:itemSlot:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2382DE518(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;

  v4 = *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
    && *(_QWORD *)a1 == *(_QWORD *)a2
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v4 & (*(unsigned __int8 *)(a2 + 21) ^ *(unsigned __int8 *)(a1 + 21) ^ 1u);
}

uint64_t _UnsafePath.hash(into:)()
{
  sub_23835BA00();
  sub_23835BA24();
  sub_23835BA0C();
  return sub_23835BA0C();
}

uint64_t _UnsafePath.hashValue.getter()
{
  sub_23835B9E8();
  sub_23835BA00();
  sub_23835BA24();
  sub_23835BA0C();
  sub_23835BA0C();
  return sub_23835BA48();
}

uint64_t sub_2382DE61C()
{
  sub_23835B9E8();
  sub_23835BA00();
  sub_23835BA24();
  sub_23835BA0C();
  sub_23835BA0C();
  return sub_23835BA48();
}

uint64_t sub_2382DE6A0()
{
  sub_23835BA00();
  sub_23835BA24();
  sub_23835BA0C();
  return sub_23835BA0C();
}

uint64_t sub_2382DE6FC()
{
  sub_23835B9E8();
  sub_23835BA00();
  sub_23835BA24();
  sub_23835BA0C();
  sub_23835BA0C();
  return sub_23835BA48();
}

BOOL sub_2382DE77C(uint64_t a1, uint64_t a2)
{
  return sub_2382DFAF0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_BYTE *)(a1 + 20), *(_BYTE *)(a1 + 21), *(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20), *(_BYTE *)(a2 + 21));
}

BOOL sub_2382DE7A8(uint64_t a1, uint64_t a2)
{
  return !sub_2382DFAF0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20), *(_BYTE *)(a2 + 21), *(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_BYTE *)(a1 + 20), *(_BYTE *)(a1 + 21));
}

BOOL sub_2382DE7EC(uint64_t a1, uint64_t a2)
{
  return !sub_2382DFAF0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_BYTE *)(a1 + 20), *(_BYTE *)(a1 + 21), *(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20), *(_BYTE *)(a2 + 21));
}

BOOL sub_2382DE830(uint64_t a1, uint64_t a2)
{
  return sub_2382DFAF0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20), *(_BYTE *)(a2 + 21), *(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_BYTE *)(a1 + 20), *(_BYTE *)(a1 + 21));
}

BOOL _UnsafePath.isPlaceholder.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned __int32 v6;
  uint8x8_t v7;

  if ((a3 & 0x10000000000) == 0)
    return 0;
  v4 = a3;
  swift_beginAccess();
  v6 = *(_DWORD *)(a2 + 16);
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v6 != *(_DWORD *)(a2 + 20))
    v6 = v7.i32[0];
  return v6 == v4;
}

BOOL _UnsafePath.isOnChild.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;

  if ((a3 & 0x10000000000) != 0)
    return 0;
  v3 = a3;
  swift_beginAccess();
  v6 = 0;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    v5.i32[0] = *(_DWORD *)(a2 + 20);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    v6 = v7.u32[0];
  }
  return v6 > v3;
}

BOOL _UnsafePath.isOnNodeEnd.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int8x8_t v5;
  uint64_t v6;
  uint8x8_t v7;

  if ((a3 & 0x10000000000) != 0)
    return 0;
  v3 = a3;
  swift_beginAccess();
  v6 = 0;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    v5.i32[0] = *(_DWORD *)(a2 + 20);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    v6 = v7.u32[0];
  }
  return v6 == v3;
}

uint64_t sub_2382DE9A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0x10000000000;
  if (!*(_BYTE *)(v0 + 21))
    v1 = 0;
  return _UnsafePath.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | v1);
}

uint64_t _UnsafePath.currentChild.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_QWORD *)(a2 + 16 * a3 + 32);
}

uint64_t _UnsafePath.selectChild(at:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 21) = 0;
  return result;
}

Swift::Void __swiftcall _UnsafePath.descend()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int *)(v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16 * v1 + 32);
  v3 = *(_BYTE *)(v0 + 20);
  *(_QWORD *)v0 |= v1 << v3;
  *(_QWORD *)(v0 + 8) = v2;
  *(_DWORD *)(v0 + 16) = 0;
  swift_beginAccess();
  *(_BYTE *)(v0 + 21) = *(_DWORD *)(v2 + 16) != 0;
  *(_BYTE *)(v0 + 20) = v3 + 5;
}

uint64_t _UnsafePath.findPredecessorItem(under:)(uint64_t a1)
{
  uint64_t *v1;
  __int32 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  int8x8_t v8;
  unsigned __int8 v9;
  __int32 v10;
  uint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint8x8_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint8x8_t v26;
  uint64_t result;
  unsigned int v28;

  v3 = *((_DWORD *)v1 + 4);
  if (*((_BYTE *)v1 + 21) == 1)
  {
    if (v3)
    {
LABEL_28:
      *((_DWORD *)v1 + 4) = v3 - 1;
      result = 1;
      *((_BYTE *)v1 + 21) = 1;
      return result;
    }
  }
  else
  {
    if (v3)
    {
      v4 = (v3 - 1);
      *((_DWORD *)v1 + 4) = v4;
      *((_BYTE *)v1 + 21) = 0;
      v5 = *((_BYTE *)v1 + 20);
      v6 = *(_QWORD *)(v1[1] + 16 * v4 + 32);
      i = (v4 << v5) | *v1;
      swift_beginAccess();
      v9 = v5 + 5;
      v3 = *(_DWORD *)(v6 + 16);
      v10 = *(_DWORD *)(v6 + 20);
      if (v3 != v10)
      {
        if (!v10)
        {
LABEL_27:
          *((_BYTE *)v1 + 20) = v9;
          *v1 = i;
          v1[1] = v6;
          v8.i32[0] = v3;
          v26 = (uint8x8_t)vcnt_s8(v8);
          v26.i16[0] = vaddlv_u8(v26);
          v3 = v26.i32[0];
          goto LABEL_28;
        }
        while (1)
        {
          v8.i32[0] = v10;
          v24 = (uint8x8_t)vcnt_s8(v8);
          v24.i16[0] = vaddlv_u8(v24);
          v25 = (v24.i32[0] - 1);
          v6 = *(_QWORD *)(v6 + 16 * v25 + 32);
          i |= v25 << v9;
          swift_beginAccess();
          v9 += 5;
          v3 = *(_DWORD *)(v6 + 16);
          v10 = *(_DWORD *)(v6 + 20);
          if (v3 == v10)
            break;
          if (!v10)
            goto LABEL_27;
        }
      }
      goto LABEL_6;
    }
    v11 = v1[1];
    swift_beginAccess();
    v3 = *(_DWORD *)(v11 + 16);
    if (v3)
    {
LABEL_8:
      v12.i32[0] = v3;
      v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v3 != *(_DWORD *)(v11 + 20))
        v3 = v13.i32[0];
      goto LABEL_28;
    }
  }
  if (*((_BYTE *)v1 + 20))
  {
    v14 = 0;
    v15 = 0;
    v11 = 0;
    v16 = 0;
    v9 = 0;
    v28 = *((unsigned __int8 *)v1 + 20);
    v17 = *v1;
    do
    {
      swift_beginAccess();
      if (v14 < 0x40u)
        v18 = ~(-1 << (v14 & 0x3F));
      else
        v18 = -1;
      v19 = v18 & v17;
      if (*(_DWORD *)(a1 + 16) | (v17 >> v14) & 0x1F)
      {
        v15 = v19;
        v11 = a1;
        v16 = (v17 >> v14) & 0x1F;
        v9 = v14;
      }
      a1 = *(_QWORD *)(a1 + 16 * ((v17 >> v14) & 0x1F) + 32);
      v14 += 5;
    }
    while (v28 > v14);
    if (v11)
    {
      *v1 = v15;
      v1[1] = v11;
      *((_DWORD *)v1 + 4) = v16;
      *((_BYTE *)v1 + 20) = v9;
      *((_BYTE *)v1 + 21) = 0;
      if (v16)
      {
        v20 = (v16 - 1);
        *((_DWORD *)v1 + 4) = v20;
        v6 = *(_QWORD *)(v11 + 16 * v20 + 32);
        for (i = (v20 << v9) | v15; ; i |= v23 << v9)
        {
          swift_beginAccess();
          v9 += 5;
          v3 = *(_DWORD *)(v6 + 16);
          v21 = *(_DWORD *)(v6 + 20);
          if (v3 == v21)
            break;
          if (!v21)
            goto LABEL_27;
          v8.i32[0] = *(_DWORD *)(v6 + 20);
          v22 = (uint8x8_t)vcnt_s8(v8);
          v22.i16[0] = vaddlv_u8(v22);
          v23 = (v22.i32[0] - 1);
          v6 = *(_QWORD *)(v6 + 16 * v23 + 32);
        }
LABEL_6:
        *((_BYTE *)v1 + 20) = v9;
        *v1 = i;
        v1[1] = v6;
        goto LABEL_28;
      }
      swift_beginAccess();
      v3 = *(_DWORD *)(v11 + 16);
      if (v3)
        goto LABEL_8;
    }
  }
  return 0;
}

uint64_t sub_2382DED14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x8_t v12;
  uint8x8_t v13;
  uint64_t v15;

  if ((a4 & 0x10000000000) == 0)
  {
    swift_beginAccess();
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a3 + 20))
    {
      if (!(_DWORD)a4)
        return a6;
    }
    else
    {
      v12.i32[0] = *(_DWORD *)(a3 + 20);
      v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.i32[0] == (_DWORD)a4)
        return a6;
    }
  }
  if (BYTE4(a4) <= a1)
    return a4;
  sub_2382DEDE4(&v15, a5 + 16, a5 + 32, (a2 >> a1) & 0x1F, a1, a2, a3, a4 & 0x1FFFFFFFFFFLL);
  return v15;
}

unsigned int *sub_2382DEDE4@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint8x8_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = (uint8x8_t)vcnt_s8((int8x8_t)*result);
  v11.i16[0] = vaddlv_u8(v11);
  if (*result == result[1])
    v12 = *result;
  else
    v12 = v11.u32[0];
  if (a3)
  {
    v13 = (uint64_t *)(a2 + 8);
    v14 = a3;
    while (1)
    {
      v15 = *v13;
      v13 += 2;
      v16 = __OFADD__(v12, v15);
      v12 += v15;
      if (v16)
        break;
      if (!--v14)
        goto LABEL_8;
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    v17 = (uint64_t *)(a2 + 16 * a3);
    v18 = *v17;
    v19 = v17[1];
    v20 = (a4 + 5);
    v21 = a7 & 0x1FFFFFFFFFFLL;
    swift_retain();
    v22 = sub_2382DED14(v20, a5, a6, v21, v18, v19);
    result = (unsigned int *)swift_release();
    if (!__OFADD__(v12, v22))
    {
      *a8 = v12 + v22;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2382DEEB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  __int32 v6;
  int8x8_t v7;
  BOOL v8;
  int8x8_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  __int32 v21;

  v3 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 20);
  result = swift_beginAccess();
  v7 = (int8x8_t)*(unsigned int *)(v3 + 16);
  v6 = *(_DWORD *)(v3 + 20);
  v8 = v7.i32[0] == v6;
  v9 = vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
  if (v7.i32[0] == v6)
    v7 = (int8x8_t)v7.u32[0];
  else
    v7 = (int8x8_t)v9.u32[0];
  if (*(_QWORD *)&v7 <= a1)
  {
    v10 = v3;
    v11 = v4;
    while (1)
    {
      a1 -= *(_QWORD *)&v7;
      if (v8 || !v6)
        break;
      v12 = *(_QWORD *)(v10 + 40);
      if (a1 >= v12)
      {
        v13 = 0;
        v9.i32[0] = v6;
        v14 = (uint8x8_t)vcnt_s8(v9);
        v14.i16[0] = vaddlv_u8(v14);
        v15 = v14.u32[0];
        if (v14.u32[0] <= 1uLL)
          v15 = 1;
        v16 = v15 - 1;
        v17 = (uint64_t *)(v10 + 56);
        while (1)
        {
          a1 -= v12;
          if (v14.u32[0] - 1 == v13)
            goto LABEL_22;
          if (v16 == v13)
          {
            __break(1u);
            return result;
          }
          v18 = *v17;
          v17 += 2;
          v12 = v18;
          ++v13;
          if (a1 < v18)
            goto LABEL_17;
        }
      }
      v13 = 0;
LABEL_17:
      v10 = *(_QWORD *)(v10 + 32 + 16 * v13);
      *v1 |= (unint64_t)v13 << v11;
      v1[1] = v10;
      *((_DWORD *)v1 + 4) = 0;
      swift_beginAccess();
      *((_BYTE *)v1 + 21) = *(_DWORD *)(v10 + 16) != 0;
      v11 += 5;
      *((_BYTE *)v1 + 20) = v11;
      result = swift_beginAccess();
      v7 = (int8x8_t)*(unsigned int *)(v10 + 16);
      v6 = *(_DWORD *)(v10 + 20);
      v8 = v7.i32[0] == v6;
      v9 = vcnt_s8(v7);
      v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
      if (v7.i32[0] == v6)
        v7 = (int8x8_t)v7.u32[0];
      else
        v7 = (int8x8_t)v9.u32[0];
      if (a1 < *(_QWORD *)&v7)
        goto LABEL_5;
    }
LABEL_22:
    if (*((unsigned __int8 *)v1 + 20) == v4)
    {
      v3 = v1[1];
    }
    else
    {
      *((_BYTE *)v1 + 20) = v4;
      v1[1] = v3;
      v19 = *v1;
      *((_DWORD *)v1 + 4) = ((unint64_t)*v1 >> v4) & 0x1F;
      if (v4 <= 0x3F)
        *v1 = v19 & ~(-1 << (v4 & 0x3F));
      *((_BYTE *)v1 + 21) = 0;
    }
    swift_beginAccess();
    result = 0;
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v3 + 20));
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    if (*(_DWORD *)(v3 + 16) == *(_DWORD *)(v3 + 20))
      v21 = 0;
    *((_DWORD *)v1 + 4) = v21;
    *((_BYTE *)v1 + 21) = 0;
  }
  else
  {
LABEL_5:
    *((_DWORD *)v1 + 4) = a1;
    result = 1;
    *((_BYTE *)v1 + 21) = 1;
  }
  return result;
}

uint64_t sub_2382DF0DC(int a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v13 = (a2 >> a1) & 0x1F;
  v14 = (a5 >> a1) & 0x1F;
  if ((_DWORD)v13 == (_DWORD)v14)
  {
    v15 = *(_QWORD *)(a8 + 16 * ((a2 >> a1) & 0x1F) + 32);
    v16 = (a1 + 5);
    v17 = a4 & 0x1FFFFFFFFFFLL;
    v18 = a7 & 0x1FFFFFFFFFFLL;
    swift_retain();
    v19 = sub_2382DF0DC(v16, a2, a3, v17, a5, a6, v18, v15);
    swift_release();
    return v19;
  }
  else
  {
    sub_2382DF1D0(a8 + 32, v13, a1, a2, a3, a4 & 0x1FFFFFFFFFFLL, v14, &v21, a5, a6, a7 & 0x1FFFFFFFFFFLL);
    return v21;
  }
}

uint64_t sub_2382DF1D0@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unsigned int a7@<W7>, _QWORD *a8@<X8>, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v16 = 16 * a2;
  v17 = *(_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a1 + v16 + 8);
  v19 = *v18;
  v20 = (a3 + 5);
  v21 = a6 & 0x1FFFFFFFFFFLL;
  swift_retain();
  v22 = sub_2382DED14(v20, a4, a5, v21, v17, v19);
  result = swift_release();
  if (a2 >= a7)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a2 + 1 != a7)
  {
    v24 = 0;
    v25 = ~(unint64_t)a2 + a7;
    v26 = (uint64_t *)(a1 + 16 * a2 + 24);
    while (1)
    {
      v27 = *v26;
      v26 += 2;
      v28 = __OFADD__(v24, v27);
      v24 += v27;
      if (v28)
        break;
      if (!--v25)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_12;
  }
  v24 = 0;
LABEL_7:
  v29 = (uint64_t *)(a1 + 16 * a7);
  v30 = *v29;
  v31 = v29[1];
  swift_retain();
  v32 = sub_2382DED14(v20, a9, a10, a11 & 0x1FFFFFFFFFFLL, v30, v31);
  result = swift_release();
  v33 = *v18 - v22;
  if (__OFSUB__(*v18, v22))
    goto LABEL_13;
  v28 = __OFADD__(v33, v24);
  v34 = v33 + v24;
  if (v28)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v28 = __OFADD__(v34, v32);
  v35 = v34 + v32;
  if (!v28)
  {
    *a8 = v35;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

unsigned int *sub_2382DF338@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  LODWORD(v11) = *result;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)*result);
  v12.i16[0] = vaddlv_u8(v12);
  if (*result == result[1])
    v11 = v11;
  else
    v11 = v12.u32[0];
  v13 = v11 - a3;
  v14 = (a5 >> a4) & 0x1F;
  if (v14)
  {
    v15 = (uint64_t *)(a2 + 8);
    v16 = (a5 >> a4) & 0x1F;
    while (1)
    {
      v17 = *v15;
      v15 += 2;
      v18 = __OFADD__(v13, v17);
      v13 += v17;
      if (v18)
        break;
      if (!--v16)
        goto LABEL_8;
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    v19 = (uint64_t *)(a2 + 16 * v14);
    v20 = *v19;
    v21 = v19[1];
    v22 = (a4 + 5);
    v23 = a7 & 0x1FFFFFFFFFFLL;
    swift_retain();
    v24 = sub_2382DED14(v22, a5, a6, v23, v20, v21);
    result = (unsigned int *)swift_release();
    if (!__OFADD__(v13, v24))
    {
      *a8 = v13 + v24;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2382DF410(int a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  int8x8_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint8x8_t v17;
  __int32 v18;
  unsigned __int8 v19;
  char v20[24];

  v4 = *a3;
  if (!*a3)
    return 1;
  if (v4 < 1)
  {
    v12 = *(unsigned int *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 21) & 1) == 0)
    {
      v13 = *(_QWORD *)(a2 + 8);
      swift_beginAccess();
      if (*(_DWORD *)(v13 + 16) == *(_DWORD *)(v13 + 20))
      {
        if (!(_DWORD)v12)
          goto LABEL_16;
      }
      else
      {
        v14.i32[0] = *(_DWORD *)(v13 + 20);
        v15 = (uint8x8_t)vcnt_s8(v14);
        v15.i16[0] = vaddlv_u8(v15);
        if ((_DWORD)v12 == v15.i32[0])
        {
LABEL_16:
          sub_2382DF844(a4 + 16, a4 + 32, a1, (uint64_t *)a2, a3, a4, (char *)&v19);
          return v19;
        }
      }
    }
    *a3 = v4 + v12;
    if (v4 + v12 >= 0)
    {
      *(_DWORD *)(a2 + 16) = v4 + v12;
      result = 1;
      *(_BYTE *)(a2 + 21) = 1;
      *a3 = 0;
      return result;
    }
    goto LABEL_16;
  }
  if (*(_BYTE *)(a2 + 21) != 1)
    return 0;
  if ((sub_2382DEEB4(v4 + *(unsigned int *)(a2 + 16)) & 1) != 0)
    return 1;
  *a3 = v9;
  if (*(unsigned __int8 *)(a2 + 20) <= a1)
  {
    v16 = *(_QWORD *)(a2 + 8);
    swift_beginAccess();
    result = 0;
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v16 + 20));
    v17.i16[0] = vaddlv_u8(v17);
    v18 = v17.i32[0];
    if (*(_DWORD *)(v16 + 16) == *(_DWORD *)(v16 + 20))
      v18 = 0;
    *(_DWORD *)(a2 + 16) = v18;
    *(_BYTE *)(a2 + 21) = 0;
  }
  else
  {
    sub_2382DF5B0((_DWORD *)(a4 + 16), a4 + 32, (uint64_t *)a2, a1, a3, a4, v20, v10);
    return v20[0];
  }
  return result;
}

uint64_t sub_2382DF5B0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>, int8x8_t a8@<D0>)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  uint64_t v30;
  uint8x8_t v31;
  __int32 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint8x8_t v44;
  __int32 v45;
  char *v47;
  _QWORD v49[3];

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v12 = a2;
  a8.i32[0] = a1[1];
  v14 = (uint8x8_t)vcnt_s8(a8);
  v14.i16[0] = vaddlv_u8(v14);
  if (*a1 == a1[1])
    v15 = 0;
  else
    v15 = v14.u32[0];
  v16 = ((unint64_t)*a3 >> a4) & 0x1F;
  LOBYTE(v17) = a4 + 5;
  if (*((unsigned __int8 *)a3 + 20) <= (a4 + 5))
  {
    v30 = a3[1];
    swift_beginAccess();
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v30 + 20));
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.i32[0];
    if (*(_DWORD *)(v30 + 16) == *(_DWORD *)(v30 + 20))
      v32 = 0;
    *((_DWORD *)a3 + 4) = v32;
    *((_BYTE *)a3 + 21) = 0;
  }
  else
  {
    v18 = (uint64_t *)(a2 + 16 * v16);
    v47 = a7;
    v20 = *v18;
    v19 = v18[1];
    v21 = ((unint64_t)*a3 >> a4) & 0x1F;
    v23 = (a4 + 5);
    v24 = *v18 + 16;
    v25 = *v18 + 32;
    swift_retain();
    v26 = v24;
    v17 = v23;
    v9 = a5;
    v16 = v21;
    v27 = v19;
    a7 = v47;
    v12 = a2;
    sub_2382DF5B0(v49, v26, v25, a3, v17, v9, v20, v27);
    v8 = a6;
    result = swift_release();
    if ((v49[0] & 1) != 0)
    {
      v29 = 1;
LABEL_25:
      *a7 = v29;
      return result;
    }
  }
  v33 = v10 & 0x3F;
  if (*((unsigned __int8 *)a3 + 20) != v10)
  {
    *((_BYTE *)a3 + 20) = v10;
    a3[1] = v8;
    v34 = *a3;
    *((_DWORD *)a3 + 4) = ((unint64_t)*a3 >> v33) & 0x1F;
    if (v10 <= 0x3Fu)
      *a3 = v34 & ~(-1 << v33);
    *((_BYTE *)a3 + 21) = 0;
  }
  v35 = v16 + 1;
  if (v16 + 1 >= v15)
  {
LABEL_22:
    v43 = a3[1];
    result = swift_beginAccess();
    v29 = 0;
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v43 + 20));
    v44.i16[0] = vaddlv_u8(v44);
    v45 = v44.i32[0];
    if (*(_DWORD *)(v43 + 16) == *(_DWORD *)(v43 + 20))
      v45 = 0;
    *((_DWORD *)a3 + 4) = v45;
    *((_BYTE *)a3 + 21) = 0;
    goto LABEL_25;
  }
  v36 = *(_QWORD *)(v12 + 16 * v35 + 8);
  v37 = *v9;
  if (*v9 >= v36)
  {
    v38 = v16 + 2;
    v39 = (uint64_t *)(v12 + 16 * v16 + 40);
    while (1)
    {
      v37 -= v36;
      *v9 = v37;
      if (v15 == v38)
        goto LABEL_22;
      v40 = *v39;
      v39 += 2;
      v36 = v40;
      ++v38;
      if (v37 < v40)
      {
        v41 = *((_BYTE *)a3 + 20);
        v33 = v41 & 0x3F;
        LOBYTE(v17) = v41 + 5;
        v35 = v38 - 1;
        break;
      }
    }
  }
  v42 = *(_QWORD *)(v12 + 16 * v35);
  *a3 |= (unint64_t)v35 << v33;
  a3[1] = v42;
  *((_DWORD *)a3 + 4) = 0;
  swift_beginAccess();
  *((_BYTE *)a3 + 21) = *(_DWORD *)(v42 + 16) != 0;
  *((_BYTE *)a3 + 20) = v17;
  result = sub_2382DEEB4(*v9);
  if ((result & 1) != 0)
  {
    *v9 = 0;
    v29 = 1;
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_2382DF844@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  unsigned int *v38;
  uint64_t v40[3];

  v9 = a2;
  v10 = (unsigned int *)result;
  v11 = a7;
  if (*((unsigned __int8 *)a4 + 20) <= a3)
  {
    if ((*((_BYTE *)a4 + 21) & 1) != 0)
      goto LABEL_33;
    v22 = *((_DWORD *)a4 + 4);
    v23 = a4[1];
    result = swift_beginAccess();
    if (*(_DWORD *)(v23 + 16) == *(_DWORD *)(v23 + 20))
    {
      if (v22)
        goto LABEL_33;
      v25 = *a5;
      goto LABEL_27;
    }
    v24.i32[0] = *(_DWORD *)(v23 + 20);
    v26 = (uint8x8_t)vcnt_s8(v24);
    v26.i16[0] = vaddlv_u8(v26);
    if (v22 != v26.i32[0])
      goto LABEL_33;
    v25 = *a5;
    if (v22)
      goto LABEL_17;
LABEL_27:
    LODWORD(v34) = *v10;
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)*v10);
    v35.i16[0] = vaddlv_u8(v35);
    if (*v10 == v10[1])
      v34 = v34;
    else
      v34 = v35.u32[0];
    v36 = v25 + v34;
    *a5 = v36;
    if (v36 >= 0)
    {
      *((_DWORD *)a4 + 4) = v36;
      *((_BYTE *)a4 + 21) = 1;
      goto LABEL_32;
    }
LABEL_33:
    v21 = 0;
    goto LABEL_34;
  }
  v13 = a3;
  v38 = (unsigned int *)result;
  v14 = (unint64_t)*a4 >> a3;
  v15 = (uint64_t *)(a2 + 16 * (v14 & 0x1F));
  v16 = *v15;
  v17 = v15[1];
  v18 = (a3 + 5);
  v19 = *v15 + 16;
  v20 = *v15 + 32;
  swift_retain();
  sub_2382DF844(v40, v19, v20, v18, a4, a5, v16, v17);
  result = swift_release();
  if ((v40[0] & 1) != 0)
  {
    v21 = 1;
    v11 = a7;
LABEL_34:
    *v11 = v21;
    return result;
  }
  v22 = v14 & 0x1F;
  if (*((unsigned __int8 *)a4 + 20) != v13)
  {
    *((_BYTE *)a4 + 20) = v13;
    a4[1] = a6;
    v27 = *a4;
    *((_DWORD *)a4 + 4) = ((unint64_t)*a4 >> (v13 & 0x3F)) & 0x1F;
    v10 = v38;
    v11 = a7;
    v9 = a2;
    if (v13 <= 0x3Fu)
      *a4 = v27 & ~(-1 << (v13 & 0x3F));
    *((_BYTE *)a4 + 21) = 0;
    v25 = *a5;
    if (v22)
      goto LABEL_17;
    goto LABEL_27;
  }
  v10 = v38;
  v11 = a7;
  v9 = a2;
  v25 = *a5;
  if (!v22)
    goto LABEL_27;
LABEL_17:
  v28 = (v22 - 1);
  v29 = *(_QWORD *)(v9 + 16 * v28 + 8);
  if (__OFADD__(v29, v25))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v29 + v25 < 0)
  {
    v30 = (_QWORD *)(v9 + 16 * v28 - 8);
    while (1)
    {
      v31 = __OFADD__(v25, v29);
      v25 += v29;
      if (v31)
        break;
      *a5 = v25;
      if (!v28)
        goto LABEL_27;
      v29 = *v30;
      v32 = *v30 + v25;
      if (__OFADD__(*v30, v25))
        goto LABEL_36;
      v30 -= 2;
      --v28;
      if ((v32 & 0x8000000000000000) == 0)
        goto LABEL_24;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_24:
  v33 = *(_QWORD *)(v9 + 16 * v28);
  v10 = (unsigned int *)*((unsigned __int8 *)a4 + 20);
  *a4 |= v28 << (char)v10;
  a4[1] = v33;
  *((_DWORD *)a4 + 4) = 0;
  swift_beginAccess();
  *((_BYTE *)a4 + 21) = *(_DWORD *)(v33 + 16) != 0;
  *((_BYTE *)a4 + 20) = (_BYTE)v10 + 5;
  result = v29 + *a5;
  if (!__OFADD__(v29, *a5))
  {
    result = sub_2382DEEB4(result);
    if ((result & 1) != 0)
    {
LABEL_32:
      *a5 = 0;
      v21 = 1;
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_38:
  __break(1u);
  return result;
}

BOOL sub_2382DFAF0(unint64_t a1, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, unint64_t a5, unsigned int a6, unsigned __int8 a7, unsigned __int8 a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  BOOL v11;
  BOOL v13;
  char v14;

  if (a3)
  {
    if (a7)
    {
      LODWORD(v8) = a1 & 0x1F;
      LODWORD(v9) = a5 & 0x1F;
      if ((_DWORD)v8 == (_DWORD)v9)
      {
        v10 = 0;
        while (1)
        {
          v10 += 5;
          if (v10 >= a3)
            break;
          if (v10 >= a7)
          {
            if ((a8 & 1) == 0)
              goto LABEL_24;
            return 0;
          }
          v8 = (a1 >> v10) & 0x1F;
          v9 = (a5 >> v10) & 0x1F;
          if ((_DWORD)v8 != (_DWORD)v9)
            goto LABEL_8;
        }
        if (v10 >= a7)
          goto LABEL_19;
        if ((a4 & 1) != 0)
          return 1;
        return ((a5 >> v10) & 0x1F) > a2;
      }
LABEL_8:
      v11 = v8 >= v9;
    }
    else
    {
      v10 = 0;
      if ((a8 & 1) != 0)
        return 0;
LABEL_24:
      v11 = ((a1 >> v10) & 0x1F) >= a6;
    }
    v14 = !v11;
    return v14 & 1;
  }
  else
  {
    if (a7)
    {
      if ((a4 & 1) != 0)
        return 1;
      v10 = 0;
      return ((a5 >> v10) & 0x1F) > a2;
    }
LABEL_19:
    v13 = a2 < a6;
    if (((a4 ^ a8) & 1) != 0)
      return a4;
    return v13;
  }
}

unint64_t sub_2382DFBE8()
{
  unint64_t result;

  result = qword_2568F1880;
  if (!qword_2568F1880)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafePath, &type metadata for _UnsafePath);
    atomic_store(result, (unint64_t *)&qword_2568F1880);
  }
  return result;
}

__n128 __swift_memcpy22_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 14) = *(_QWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s6_ChunkVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 22))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s6_ChunkVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 22) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 22) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _UnsafePath()
{
  return &type metadata for _UnsafePath;
}

BOOL OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[2];

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v11 >= _s19CollectionsInternal4HeapV5countSivg_0())
  {
    v13 = *(_QWORD *)(a4 + 16);
    if (v13)
    {
      v18[1] = a3;
      swift_retain();
      swift_retain();
      v14 = 0;
      v15 = v13 - 1;
      do
      {
        sub_23835B724();
        v12 = OrderedSet.contains(_:)();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a5);
        if (!v12)
          break;
      }
      while (v15 != v14++);
      swift_release();
      swift_release();
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v12;
}

uint64_t OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23835B10C();
  if (v9 >= _s19CollectionsInternal4HeapV5countSivg_0())
  {
    v11 = *(_QWORD *)(a3 + 16);
    if (v11)
    {
      swift_retain();
      swift_retain();
      v12 = 0;
      v13 = v11 - 1;
      do
      {
        sub_23835B724();
        v10 = sub_23835B130();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
        if ((v10 & 1) == 0)
          break;
      }
      while (v13 != v12++);
      swift_release();
      swift_release();
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t OrderedSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];

  v42 = a7;
  v43 = a1;
  v39 = a2;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v38 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v40 = (char *)&v38 - v18;
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v23;
  v45[0] = v23;
  v24 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v24);
  if ((sub_23835B22C() & 1) != 0)
  {
LABEL_2:
    v26 = 1;
    return v26 & 1;
  }
  result = type metadata accessor for OrderedSet(0, a4, a6, v25);
  if (result == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v43, a5);
    swift_dynamicCast();
    v26 = OrderedSet.isSubset(of:)(v45[0], v45[1], v39, v44, a4);
    swift_release();
    goto LABEL_10;
  }
  v28 = v44;
  v29 = *(_QWORD *)(v44 + 16);
  if (!v29)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v41 = a6;
  v30 = v39;
  swift_retain();
  swift_retain();
  sub_23835B724();
  v32 = v42;
  v31 = v43;
  v33 = sub_23835AFB0();
  if (v33 != 2)
  {
    if ((v33 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v40, a4);
      swift_release();
LABEL_17:
      swift_release();
      v26 = 0;
      return v26 & 1;
    }
    v35 = 1;
    while (v29 != v35)
    {
      sub_23835B724();
      ++v35;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v13, a4);
      v36 = sub_23835B034();
      v37 = *(void (**)(char *, uint64_t))(v10 + 8);
      v37(v16, a4);
      if ((v36 & 1) == 0)
      {
        v37(v40, a4);
        swift_release();
        goto LABEL_17;
      }
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v40, a4);
    swift_release();
    swift_release();
    goto LABEL_2;
  }
  v34 = _s19CollectionsInternal4HeapV5countSivg_0();
  result = MEMORY[0x24BDAC7A8](v34);
  *(&v38 - 8) = a4;
  *(&v38 - 7) = a5;
  *(&v38 - 6) = v41;
  *(&v38 - 5) = v32;
  *(&v38 - 4) = v31;
  *(&v38 - 3) = v30;
  *(&v38 - 2) = v28;
  if (result < 0)
    goto LABEL_21;
  LOBYTE(v45[0]) = 2;
  result = (uint64_t)sub_238329EE0((unint64_t)(result + 63) >> 6, v45, (_QWORD *(*)(char *__return_ptr, _BYTE **))sub_2382E05B8);
  if (LOBYTE(v45[0]) != 2)
  {
    v26 = v45[0] & 1;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v40, a4);
    swift_release();
LABEL_10:
    swift_release();
    return v26 & 1;
  }
LABEL_22:
  __break(1u);
  return result;
}

unint64_t sub_2382E02D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unint64_t result;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v38 = a8;
  v36[1] = a3;
  v36[2] = a7;
  v43 = a4;
  v45 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v40 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23835B334();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v36 - v14;
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)v36 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v45, a6);
  sub_23835AF8C();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v44 = v21;
  v45 = AssociatedTypeWitness;
  sub_23835B484();
  v23 = v39;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  if (v24(v15, 1, a5) != 1)
  {
    v41 = v24;
    v42 = AssociatedConformanceWitness;
    v28 = 0;
    v29 = v23;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v11, v15, a5);
    while (1)
    {
      result = OrderedSet._find(_:)();
      if ((v32 & 1) != 0)
        goto LABEL_4;
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
      v33 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
      v34 = *(_QWORD *)(*v40 + v33);
      *(_QWORD *)(*v40 + v33) = v34 | (1 << result);
      if ((v34 & (1 << result)) != 0)
      {
LABEL_4:
        (*(void (**)(char *, uint64_t))(v29 + 8))(v11, a5);
      }
      else
      {
        ++v28;
        v35 = _s19CollectionsInternal4HeapV5countSivg_0();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v11, a5);
        if (v28 == v35)
        {
          v25 = 1;
LABEL_13:
          v27 = v38;
          v26 = v37;
          goto LABEL_14;
        }
      }
      sub_23835B484();
      if (v41(v15, 1, a5) == 1)
      {
        v25 = 0;
        goto LABEL_13;
      }
      v30(v11, v15, a5);
    }
  }
  v25 = 0;
  v26 = v37;
  v27 = v38;
LABEL_14:
  result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v44, v45);
  *v27 = v25;
  return result;
}

unint64_t sub_2382E05B8@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_2382E02D4(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

uint64_t _HashTable.UnsafeHandle.idealBucket<A>(for:)(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  result = sub_23835ABF0();
  v4 = 1 << *a2;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (!v5)
    return v6 & result;
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator(startingAt:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance(until:)(Swift::Int until)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  for (i = v1[3]; i; i = v1[3])
  {
    v4 = -1 << *(_QWORD *)*v1;
    v5 = (v4 ^ ~i) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v5 >= ~v4)
      v6 = ~v4;
    else
      v6 = 0;
    if (v5 - v6 == until)
      break;
    _HashTable.BucketIterator.advance()();
  }
}

BOOL _HashTable.BucketIterator.isOccupied.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) != 0;
}

uint64_t _HashTable.BucketIterator.currentBucket.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _HashTable.BucketIterator._currentBucket.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _HashTable.BucketIterator._currentBucket.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._currentBucket.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashTable.BucketIterator.init(hashTable:startingAt:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, a1, a2);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

uint64_t _HashTable.UnsafeHandle.idealBucket(forHashValue:)(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = 1 << *a2;
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (!v3)
    return v4 & result;
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator<A>(for:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_23835ABF0();
  v7 = 1 << *a1;
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    v10 = v9 & result;
    result = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & result, a1, a2);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
    *(_QWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 40) = v12;
    *(_BYTE *)(a3 + 48) = 0;
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.startFind(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  result = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  if (result)
  {
    v11 = -1 << *a2;
    v12 = (v11 ^ ~result) + ((uint64_t)a2[1] >> 6);
    if (v12 >= ~v11)
      v13 = ~v11;
    else
      v13 = 0;
    v14 = v12 - v13;
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = v14;
  *(_BYTE *)(a4 + 64) = result == 0;
  return result;
}

uint64_t (*_HashTable.BucketIterator.currentValue.modify(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = v1[3];
  if (v2)
  {
    v3 = -1 << *(_QWORD *)*v1;
    v4 = (v3 ^ ~v2) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v4 >= ~v3)
      v5 = ~v3;
    else
      v5 = 0;
    v6 = v4 - v5;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v2 == 0;
  return sub_2382E08D8;
}

uint64_t sub_2382E08D8(uint64_t a1)
{
  return _HashTable.BucketIterator.currentValue.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

Swift::Int_optional __swiftcall _HashTable.BucketIterator.findNext()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Bool v6;
  Swift::Int_optional result;

  _HashTable.BucketIterator.advance()();
  v1 = v0[3];
  if (v1)
  {
    v2 = -1 << *(_QWORD *)*v0;
    v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
    if (v3 >= ~v2)
      v4 = ~v2;
    else
      v4 = 0;
    v5 = v3 - v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = v1 == 0;
  result.value = v5;
  result.is_nil = v6;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advanceToNextUnoccupiedBucket()()
{
  uint64_t v0;

  while (*(_QWORD *)(v0 + 24))
    _HashTable.BucketIterator.advance()();
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14BucketIteratorVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s14BucketIteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.BucketIterator()
{
  return &type metadata for _HashTable.BucketIterator;
}

uint64_t BitArray.init()()
{
  return MEMORY[0x24BEE4AF8];
}

Swift::Void __swiftcall BitArray.reserveCapacity(_:)(Swift::Int a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v5;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = (unint64_t)(a1 + 63) >> 6;
    v3 = *v1;
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v2 > *((_QWORD *)v3 + 3) >> 1)
    {
      if (*((_QWORD *)v3 + 2) <= v2)
        v5 = v2;
      else
        v5 = *((_QWORD *)v3 + 2);
      v3 = sub_23826C3AC(isUniquelyReferenced_nonNull_native, v5, 0, v3);
    }
    *v1 = v3;
  }
}

unint64_t sub_2382E0ACC(unint64_t result, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result != a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = v2[1];
      if (v4 > result)
      {
        if ((a2 & 0x8000000000000000) == 0)
        {
          if (v4 > a2)
          {
            v5 = *v2 + 32;
            v6 = *(_QWORD *)(v5 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> (result & 0x3F);
            BitArray.subscript.setter((*(_QWORD *)(v5 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1, result);
            return BitArray.subscript.setter(v6 & 1, a2);
          }
          goto LABEL_10;
        }
LABEL_9:
        __break(1u);
LABEL_10:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

void sub_2382E0B74(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
}

uint64_t sub_2382E0B84(int64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  return BitArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a3);
}

uint64_t BitArray.replaceSubrange<A>(_:with:)(int64_t a1, int64_t a2, uint64_t a3, ValueMetadata *a4)
{
  int64_t *v4;
  unint64_t v5;
  void (**Description)(uint64_t (**)(uint64_t, ValueMetadata *), uint64_t, ValueMetadata *);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (**v15)(uint64_t, ValueMetadata *);
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  char *v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;

  v5 = (unint64_t)v4;
  Description = (void (**)(uint64_t (**)(uint64_t, ValueMetadata *), uint64_t, ValueMetadata *))a4[-1].Description;
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t (**)(uint64_t, ValueMetadata *))((char *)&v30 - v14);
  v31 = v16;
  v17 = sub_23835B190();
  v32 = a1;
  sub_2382E210C(a1, a2, v17);
  if (a4 == &type metadata for BitArray)
  {
    Description[2](v15, a3, &type metadata for BitArray);
    swift_dynamicCast();
    v5 = v34;
    if ((v34 & 0x8000000000000000) == 0)
    {
      v13 = v33 + 32;
      v15 = (uint64_t (**)(uint64_t, ValueMetadata *))*((_QWORD *)v33 + 2);
      v17 = *v4;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v4 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(v17 + 16);
        v22 = v4[1];
        v36 = v17 + 32;
        v37 = v21;
        v38 = v22;
        sub_23835843C(0, v5, (uint64_t)v13, (uint64_t)v15, v32);
        *v4 = v17;
        swift_bridgeObjectRelease_n();
        return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a3, &type metadata for BitArray);
      }
LABEL_15:
      v17 = (int64_t)sub_23826C260(v17);
      *v4 = v17;
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = (uint64_t (**)(uint64_t, ValueMetadata *))Description;
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568F14E0) != a4)
  {
    v18 = v32 + v17;
    if (__OFADD__(v32, v17))
    {
      __break(1u);
    }
    else if (v18 >= v32)
    {
      sub_2383582CC(a3, v32, v18, (uint64_t)a4);
      return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a3, a4);
    }
    __break(1u);
    goto LABEL_14;
  }
  Description[2]((uint64_t (**)(uint64_t, ValueMetadata *))v13, a3, a4);
  swift_dynamicCast();
  v23 = v38;
  v30 = v37;
  v31 = v36;
  v24 = *(_QWORD *)(v38 + 16);
  v25 = (char *)*v4;
  swift_bridgeObjectRetain();
  v26 = swift_isUniquelyReferenced_nonNull_native();
  *v4 = (int64_t)v25;
  v27 = v32;
  if ((v26 & 1) == 0)
  {
    v25 = sub_23826C260((uint64_t)v25);
    *v4 = (int64_t)v25;
  }
  v28 = *((_QWORD *)v25 + 2);
  v29 = v4[1];
  v33 = v25 + 32;
  v34 = v28;
  v35 = v29;
  sub_23835843C(v31, v30, v23 + 32, v24, v27);
  *v4 = (int64_t)v25;
  swift_bridgeObjectRelease_n();
  return v15[1](a3, a4);
}

uint64_t sub_2382E0E88@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = _s19CollectionsInternal8BitArrayV9repeating5countACSb_SitcfC_0(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_2382E0EB4@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = BitArray.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t BitArray.init<A>(_:)(uint64_t a1, ValueMetadata *a2, char *a3)
{
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;

  Description = (void (**)(char *, _QWORD, ValueMetadata *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == &type metadata for BitArray)
  {
    Description[4](v8, a1, &type metadata for BitArray);
    swift_dynamicCast();
    return (uint64_t)v12;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568F14E0) == a2)
  {
    Description[2](v8, a1, a2);
    swift_dynamicCast();
    v11 = sub_2382E2C68((uint64_t)v12, v13, v14);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
    return v11;
  }
  v13 = 0;
  result = sub_23835AFA4();
  if ((result & 0x8000000000000000) == 0)
  {
    v12 = sub_23826C3AC(0, (unint64_t)(result + 63) >> 6, 0, MEMORY[0x24BEE4AF8]);
    Description[2](v8, a1, a2);
    BitArray.append<A>(contentsOf:)((unint64_t)v8, a2, a3);
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

void sub_2382E107C(Swift::Bool *a1)
{
  BitArray.append(_:)(*a1);
}

Swift::Void __swiftcall BitArray.append(_:)(Swift::Bool a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;

  v3 = a1;
  v4 = v1[1];
  if ((v4 & 0x3F) == 0)
  {
    v2 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = (unint64_t)sub_23826C3AC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
    v6 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    if (v6 >= v5 >> 1)
      v2 = (unint64_t)sub_23826C3AC((char *)(v5 > 1), v6 + 1, 1, (char *)v2);
    *(_QWORD *)(v2 + 16) = v6 + 1;
    *(_QWORD *)(v2 + 8 * v6 + 32) = 0;
    *v1 = v2;
  }
  if (v4 == -1)
  {
    __break(1u);
LABEL_13:
    v3 = (uint64_t)sub_23826C260(v3);
    *v1 = v3;
    goto LABEL_10;
  }
  v1[1] = v4 + 1;
  if ((v3 & 1) == 0)
    return;
  v2 = v4 >> 6;
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_13;
LABEL_10:
  *(_QWORD *)(v3 + 8 * v2 + 32) |= 1 << (v4 & 0x3F);
  *v1 = v3;
}

int64_t BitArray.append<A>(contentsOf:)(unint64_t a1, ValueMetadata *a2, char *a3)
{
  char **v3;
  char **v4;
  unint64_t AssociatedTypeWitness;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t Description;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, ValueMetadata *);
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  int64_t result;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  char **v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t (*v43)(char **, unint64_t);
  uint64_t v44;
  char **v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char **)((char *)&v44 - v11);
  Description = (uint64_t)a2[-1].Description;
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v44 - v17;
  if (a2 == &type metadata for BitArray)
  {
    (*(void (**)(char *, unint64_t, ValueMetadata *))(Description + 16))((char *)&v44 - v17, a1, &type metadata for BitArray);
    swift_dynamicCast();
    BitArray.append(contentsOf:)((int64_t)v52, (unint64_t)v53);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(unint64_t, ValueMetadata *))(Description + 8))(a1, &type metadata for BitArray);
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F14E0);
  v20 = *(void (**)(char *, unint64_t, ValueMetadata *))(Description + 16);
  v48 = Description;
  if ((ValueMetadata *)v19 != a2)
  {
    v20(v18, a1, a2);
    sub_23835AF8C();
    v21 = (unint64_t)v4[1];
    v47 = v9;
    if ((v21 & 0x3F) == 0)
    {
      v46 = a1;
      swift_getAssociatedConformanceWitness();
      a1 = v21;
      goto LABEL_20;
    }
    swift_getAssociatedConformanceWitness();
    v22 = sub_2382A6F48(64 - (v21 & 0x3F));
    if (!v23)
    {
      (*(void (**)(unint64_t, ValueMetadata *))(v48 + 8))(a1, a2);
      v43 = *(uint64_t (**)(char **, unint64_t))(v47 + 8);
      return v43(v12, AssociatedTypeWitness);
    }
    v24 = v23;
    v46 = a1;
    a1 = v21 + v23;
    if (__CFADD__(v21, v23))
    {
      __break(1u);
    }
    else
    {
      v25 = (char **)v22;
      v4[1] = (char *)a1;
      a3 = *v4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v4 = a3;
      v45 = v25;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_7:
        v27 = *((_QWORD *)a3 + 2);
        v52 = a3 + 32;
        v53 = (char *)v27;
        v54 = a1;
        sub_238358378((unint64_t)v45, v24, v21);
        *v4 = a3;
        v9 = v47;
LABEL_20:
        v36 = sub_2382A6F48(64);
        if (v37)
        {
          Description = v36;
          v30 = v37;
          v45 = v4;
          v29 = *v4;
          while (1)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v29 = sub_23826C3AC(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
            v39 = *((_QWORD *)v29 + 2);
            v38 = *((_QWORD *)v29 + 3);
            v40 = v39 + 1;
            if (v39 >= v38 >> 1)
              v29 = sub_23826C3AC((char *)(v38 > 1), v39 + 1, 1, v29);
            *((_QWORD *)v29 + 2) = v40;
            *(_QWORD *)&v29[8 * v39 + 32] = 0;
            v4 = (char **)(a1 + v30);
            if (__CFADD__(a1, v30))
              break;
            v52 = v29 + 32;
            v53 = (char *)v40;
            v54 = a1 + v30;
            sub_238358378(Description, v30, a1);
            Description = sub_2382A6F48(64);
            v30 = v41;
            a1 = (unint64_t)v4;
            if (!v41)
            {
              v42 = v45;
              *v45 = v29;
              v42[1] = (char *)v4;
              v9 = v47;
              goto LABEL_29;
            }
          }
          __break(1u);
          goto LABEL_33;
        }
LABEL_29:
        (*(void (**)(unint64_t, ValueMetadata *))(v48 + 8))(v46, a2);
        v43 = *(uint64_t (**)(char **, unint64_t))(v9 + 8);
        return v43(v12, AssociatedTypeWitness);
      }
    }
    a3 = sub_23826C260((uint64_t)a3);
    *v4 = a3;
    goto LABEL_7;
  }
  v20(v16, a1, a2);
  result = swift_dynamicCast();
  v12 = (char **)v52;
  v29 = v53;
  v30 = v53 - v52;
  if (__OFSUB__(v53, v52))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v31 = v54;
  AssociatedTypeWitness = (unint64_t)v4[1];
  if (v30 < 1)
  {
LABEL_15:
    if ((AssociatedTypeWitness & 0x8000000000000000) == 0)
    {
      if (!__OFSUB__(AssociatedTypeWitness, v30))
      {
        v46 = AssociatedTypeWitness - v30;
        v47 = (unint64_t)v29;
        v30 = (uint64_t)v12;
        v33 = v4;
        v4 = (char **)(v31 + 32);
        Description = *(_QWORD *)(v31 + 16);
        v29 = *v33;
        swift_bridgeObjectRetain();
        v34 = swift_isUniquelyReferenced_nonNull_native();
        v12 = v33;
        *v33 = v29;
        if ((v34 & 1) != 0)
        {
LABEL_18:
          v35 = *((_QWORD *)v29 + 2);
          v49 = v29 + 32;
          v50 = v35;
          v51 = AssociatedTypeWitness;
          sub_23835843C(v30, v47, (uint64_t)v4, Description, v46);
          *v12 = v29;
          swift_bridgeObjectRelease_n();
          return (*(uint64_t (**)(unint64_t, ValueMetadata *))(v48 + 8))(a1, a2);
        }
LABEL_36:
        v29 = sub_23826C260((uint64_t)v29);
        *v12 = v29;
        goto LABEL_18;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v32 = __CFADD__(AssociatedTypeWitness, v30);
  AssociatedTypeWitness += v30;
  if (v32)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (AssociatedTypeWitness >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = ((AssociatedTypeWitness + 63) >> 6) - *((_QWORD *)*v4 + 2);
  if (result >= 0)
  {
    sub_23829E648(result, 0);
    v4[1] = (char *)AssociatedTypeWitness;
    goto LABEL_15;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_2382E167C(Swift::Bool *a1, Swift::Int *a2)
{
  BitArray.insert(_:at:)(*a1, *a2);
}

Swift::Void __swiftcall BitArray.insert(_:at:)(Swift::Bool _, Swift::Int at)
{
  char *v2;
  char *v3;
  char **v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;

  v4 = (char **)v2;
  v7 = *((_QWORD *)v2 + 1);
  if ((v7 & 0x3F) != 0)
    goto LABEL_6;
  v2 = *(char **)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_15;
  while (1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v8 = *((_QWORD *)v2 + 3);
    v3 = (char *)(v9 + 1);
    if (v9 >= v8 >> 1)
      v2 = sub_23826C3AC((char *)(v8 > 1), v9 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v3;
    *(_QWORD *)&v2[8 * v9 + 32] = 0;
    *v4 = v2;
LABEL_6:
    if (v7 < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = (char *)(v7 + 1);
      v4[1] = (char *)(v7 + 1);
      v3 = *v4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v4 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_8;
    }
    v3 = sub_23826C260((uint64_t)v3);
    *v4 = v3;
LABEL_8:
    if (v7 < at)
    {
      __break(1u);
      goto LABEL_14;
    }
    if (!__OFADD__(at, 1))
      break;
LABEL_14:
    __break(1u);
LABEL_15:
    v2 = sub_23826C3AC(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  }
  sub_23835843C(at, v7, (uint64_t)(v3 + 32), *((_QWORD *)v3 + 2), at + 1);
  sub_23834D4D4(_, at);
  *v4 = v3;
}

uint64_t sub_2382E17CC(int64_t a1, unint64_t *a2, ValueMetadata *a3)
{
  return BitArray.insert<A>(contentsOf:at:)(a1, *a2, a3);
}

uint64_t BitArray.insert<A>(contentsOf:at:)(int64_t a1, unint64_t a2, ValueMetadata *a3)
{
  char *v3;
  char **v4;
  unint64_t v5;
  int64_t v8;
  unint64_t Description;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;

  v8 = a1;
  Description = (unint64_t)a3[-1].Description;
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v36 - v14;
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (unint64_t)v4[1];
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v36 = v13;
  v17 = sub_23835B190();
  if (v17 < 1)
    return (*(uint64_t (**)(int64_t, ValueMetadata *))(Description + 8))(v8, a3);
  v3 = (char *)v17;
  v38 = Description;
  Description = v17 + v5;
  if (v17 + v5 >= 0xFFFFFFFFFFFFFFC0)
    goto LABEL_24;
  v18 = ((v17 + v5 + 63) >> 6) - *((_QWORD *)*v4 + 2);
  if (v18 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_23829E648(v18, 0);
  v4[1] = (char *)Description;
  if ((Description & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v37 = v8;
  v8 = (int64_t)&v3[a2];
  if (!__OFADD__(a2, v3))
  {
    v3 = *v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  v3 = sub_23826C260((uint64_t)v3);
  *v4 = v3;
LABEL_10:
  v20 = *((_QWORD *)v3 + 2);
  v42 = v3 + 32;
  v43 = v20;
  v44 = Description;
  sub_23835843C(a2, v5, (uint64_t)(v3 + 32), v20, v8);
  *v4 = v3;
  if (a3 == &type metadata for BitArray)
  {
    v8 = v37;
    (*(void (**)(char *, uint64_t, ValueMetadata *))(v38 + 16))(v15, v37, &type metadata for BitArray);
    swift_dynamicCast();
    v22 = v40;
    if ((v40 & 0x8000000000000000) == 0)
    {
      v12 = v39 + 32;
      v15 = (char *)*((_QWORD *)v39 + 2);
      v5 = (unint64_t)*v4;
      swift_bridgeObjectRetain();
      v25 = swift_isUniquelyReferenced_nonNull_native();
      *v4 = (char *)v5;
      if ((v25 & 1) != 0)
      {
LABEL_17:
        v26 = *(_QWORD *)(v5 + 16);
        v27 = v4[1];
        v42 = (char *)(v5 + 32);
        v43 = v26;
        v44 = (unint64_t)v27;
        sub_23835843C(0, v22, (uint64_t)v12, (uint64_t)v15, a2);
        *v4 = (char *)v5;
        swift_bridgeObjectRelease_n();
        return (*(uint64_t (**)(int64_t, ValueMetadata *))(v38 + 8))(v8, &type metadata for BitArray);
      }
LABEL_31:
      v5 = (unint64_t)sub_23826C260(v5);
      *v4 = (char *)v5;
      goto LABEL_17;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F14E0);
  v22 = v38;
  if ((ValueMetadata *)v21 != a3)
  {
    if (v8 >= (uint64_t)a2)
    {
      v23 = v37;
      sub_2383582CC(v37, a2, v8, (uint64_t)a3);
      return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v22 + 8))(v23, a3);
    }
    __break(1u);
    goto LABEL_30;
  }
  (*(void (**)(char *, uint64_t, ValueMetadata *))(v38 + 16))(v12, v37, a3);
  swift_dynamicCast();
  v28 = (unint64_t)v42;
  v29 = v43;
  v30 = v44;
  v31 = *(_QWORD *)(v44 + 16);
  v32 = *v4;
  swift_bridgeObjectRetain();
  v33 = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v32;
  if ((v33 & 1) == 0)
  {
    v32 = sub_23826C260((uint64_t)v32);
    *v4 = v32;
  }
  v34 = *((_QWORD *)v32 + 2);
  v35 = v4[1];
  v39 = v32 + 32;
  v40 = v34;
  v41 = v35;
  sub_23835843C(v28, v29, v30 + 32, v31, a2);
  *v4 = v32;
  swift_bridgeObjectRelease_n();
  return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v38 + 8))(v37, a3);
}

BOOL sub_2382E1B70@<W0>(Swift::Int *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = BitArray.remove(at:)(*a1);
  *a2 = result;
  return result;
}

Swift::Bool __swiftcall BitArray.remove(at:)(Swift::Int at)
{
  char **v1;
  char **v2;
  Swift::Int v3;
  unint64_t v4;
  int64_t v5;
  char *v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;

  if (at < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v1 = v2;
  v3 = at;
  v4 = (unint64_t)v2[1];
  if (v4 <= at)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = at + 1;
  if (__OFADD__(at, 1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((uint64_t)v4 < v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = *v2;
  v7 = *(_QWORD *)&(*v2)[(((unint64_t)at >> 3) & 0xFFFFFFFFFFFFF8) + 32];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_13:
    v6 = sub_23826C260((uint64_t)v6);
    *v1 = v6;
  }
  sub_23835843C(v5, v4, (uint64_t)(v6 + 32), *((_QWORD *)v6 + 2), v3);
  *v1 = v6;
  sub_2382AB30C();
  return (v7 >> v3) & 1;
}

uint64_t sub_2382E1C84(uint64_t a1)
{
  return BitArray.removeSubrange(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t BitArray.removeSubrange(_:)(unint64_t a1, int64_t a2)
{
  char **v2;
  char **v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = v3;
  v6 = (int64_t)v3[1];
  if (v6 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a2;
  if (v6 >= a2)
  {
    v5 = a1;
    v7 = *v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  v7 = sub_23826C260((uint64_t)v7);
  *v2 = v7;
LABEL_5:
  sub_23835843C(v4, v6, (uint64_t)(v7 + 32), *((_QWORD *)v7 + 2), v5);
  *v2 = v7;
  result = v4 - v5;
  if (!__OFSUB__(v4, v5))
    return sub_2382AAF58(result);
  __break(1u);
  return result;
}

Swift::Bool_optional sub_2382E1D48@<W0>(Swift::Bool_optional *a1@<X8>)
{
  Swift::Bool_optional result;

  result.value = BitArray._customRemoveLast()().value;
  a1->value = result.value;
  return result;
}

Swift::Bool_optional __swiftcall BitArray._customRemoveLast()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Bool_optional result;

  v1 = v0[1];
  if (v1)
  {
    if ((v1 & 0x8000000000000000) == 0)
    {
      v2 = *(_QWORD *)(*v0 + (((unint64_t)(v1 - 1) >> 3) & 0xFFFFFFFFFFFFF8) + 32) >> (v1 - 1);
      sub_2382AB30C();
      return (Swift::Bool_optional)(v2 & 1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_2382E1DBC(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 >= result)
  {
    sub_2382AAF58(result);
    return 1;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall BitArray._customRemoveLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  unint64_t v2;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < a1)
  {
LABEL_7:
    __break(1u);
    return a1;
  }
  sub_2382AAF58(a1);
  LOBYTE(a1) = 1;
  return a1;
}

BOOL sub_2382E1E2C@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = BitArray.removeFirst()();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall BitArray.removeFirst()()
{
  char **v0;
  char **v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = (unint64_t)v1[1];
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v0 = v1;
  v2 = *v1;
  v3 = *((_QWORD *)*v1 + 4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_7:
    v2 = sub_23826C260((uint64_t)v2);
    *v0 = v2;
  }
  sub_23835843C(1uLL, v4, (uint64_t)(v2 + 32), *((_QWORD *)v2 + 2), 0);
  *v0 = v2;
  sub_2382AB30C();
  return v3 & 1;
}

Swift::Void __swiftcall BitArray.removeFirst(_:)(Swift::Int a1)
{
  char **v1;
  char **v2;
  Swift::Int v3;
  unint64_t v4;
  char *v5;
  char isUniquelyReferenced_nonNull_native;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v1 = v2;
  v3 = a1;
  v4 = (unint64_t)v2[1];
  if (!a1 || v4 >= a1)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4 >= a1)
      {
        v5 = *v2;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v2 = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_7:
          sub_23835843C(v3, v4, (uint64_t)(v5 + 32), *((_QWORD *)v5 + 2), 0);
          *v1 = v5;
          sub_2382AAF58(v3);
          return;
        }
LABEL_11:
        v5 = sub_23826C260((uint64_t)v5);
        *v1 = v5;
        goto LABEL_7;
      }
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall BitArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t *v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (!keepingCapacity)
  {
    *v1 = MEMORY[0x24BEE4AF8];
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = *v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    if (*(_QWORD *)(v3 + 24) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_2568F0A00);
      v4 = (_QWORD *)swift_allocObject();
      v5 = _swift_stdlib_malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = 0;
      v4[3] = 2 * (v6 >> 3);
    }
    else
    {
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    *v1 = (uint64_t)v4;
    goto LABEL_11;
  }
  sub_2382E2A7C(0, *(_QWORD *)(v3 + 16));
LABEL_12:
  v1[1] = 0;
}

int64_t sub_2382E2084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t result;
  int64_t v4;

  result = sub_2382E2810(a1);
  if (!v2)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if (v4 < 0)
    {
      __break(1u);
    }
    else if (v4 >= result)
    {
      return BitArray.removeSubrange(_:)(result, v4);
    }
    __break(1u);
  }
  return result;
}

uint64_t BitArray.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_2382E2C68(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

int64_t sub_2382E210C(int64_t result, int64_t a2, int64_t a3)
{
  char **v3;
  char **v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  char isUniquelyReferenced_nonNull_native;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v3 = v4;
  v7 = (int64_t)v4[1];
  if (v7 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = a2;
  if (v7 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = result;
  v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v5 = a3;
  if (v10 < a3)
  {
    v11 = a3 - v10;
    if (__OFSUB__(a3, v10))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= 1)
    {
      v12 = v7 + v11;
      v13 = __CFADD__(v7 + v11, 64);
      v14 = v7 + v11 + 64;
      if (v13)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      result = ((unint64_t)(v14 - 1) >> 6) - *((_QWORD *)*v4 + 2);
      if (result < 0)
      {
LABEL_26:
        __break(1u);
        return result;
      }
      sub_23829E648(result, 0);
      v4[1] = (char *)v12;
    }
  }
  v15 = __OFADD__(v8, v5);
  v8 += v5;
  if (!v15)
  {
    v9 = *v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  v9 = sub_23826C260((uint64_t)v9);
  *v3 = v9;
LABEL_13:
  sub_23835843C(v6, v7, (uint64_t)(v9 + 32), *((_QWORD *)v9 + 2), v8);
  *v3 = v9;
  result = v10 - v5;
  if (v10 > v5)
  {
    if (!__OFSUB__(v10, v5))
      return sub_2382AAF58(result);
    goto LABEL_24;
  }
  return result;
}

uint64_t BitArray.replaceSubrange(_:with:)(int64_t a1, int64_t a2, uint64_t a3, int64_t a4)
{
  uint64_t v4;
  char **v5;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;

  if (a4 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v6 = v5;
  v7 = a4;
  v4 = a3;
  v8 = a1;
  sub_2382E210C(a1, a2, a4);
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *v5;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    v10 = sub_23826C260((uint64_t)v10);
    *v6 = v10;
  }
  sub_23835843C(0, v7, v4 + 32, v9, v8);
  *v6 = v10;
  return swift_bridgeObjectRelease_n();
}

uint64_t BitArray.replaceSubrange(_:with:)(int64_t a1, int64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char **v6;
  char **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v13;
  int64_t v14;
  char isUniquelyReferenced_nonNull_native;

  v13 = __OFSUB__(a4, a3);
  v14 = a4 - a3;
  if (v13)
  {
    __break(1u);
    goto LABEL_5;
  }
  v7 = v6;
  v5 = a5;
  v8 = a4;
  v9 = a1;
  sub_2382E210C(a1, a2, v14);
  v10 = *(_QWORD *)(v5 + 16);
  v11 = *v6;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    v11 = sub_23826C260((uint64_t)v11);
    *v7 = v11;
  }
  sub_23835843C(a3, v8, v5 + 32, v10, v9);
  *v7 = v11;
  return swift_bridgeObjectRelease_n();
}

int64_t BitArray.append(contentsOf:)(int64_t result, unint64_t a2)
{
  char **v2;
  char **v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char isUniquelyReferenced_nonNull_native;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v2 = v3;
  v5 = a2;
  v4 = result;
  v8 = (unint64_t)v3[1];
  if (!a2)
  {
LABEL_7:
    if ((v8 & 0x8000000000000000) == 0)
    {
      v6 = *(_QWORD *)(v4 + 16);
      v7 = *v3;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v3 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_9:
        sub_23835843C(0, v5, v4 + 32, v6, v8 - v5);
        *v2 = v7;
        return swift_bridgeObjectRelease();
      }
LABEL_12:
      v7 = sub_23826C260((uint64_t)v7);
      *v2 = v7;
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v9 = __CFADD__(v8, a2);
  v8 += a2;
  if (v9)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v8 >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = ((v8 + 63) >> 6) - *((_QWORD *)*v3 + 2);
  if (result >= 0)
  {
    sub_23829E648(result, 0);
    v3[1] = (char *)v8;
    goto LABEL_7;
  }
LABEL_15:
  __break(1u);
  return result;
}

int64_t BitArray.append(contentsOf:)(int64_t result, unint64_t a2, uint64_t a3)
{
  char **v3;
  char **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  char isUniquelyReferenced_nonNull_native;

  v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = v4;
  v5 = a3;
  v6 = a2;
  v7 = result;
  v11 = (unint64_t)v4[1];
  if (v10 < 1)
  {
LABEL_7:
    if ((v11 & 0x8000000000000000) == 0)
    {
      v13 = __OFSUB__(v11, v10);
      v10 = v11 - v10;
      if (!v13)
      {
        v8 = *(_QWORD *)(v5 + 16);
        v9 = *v4;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v4 = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_10:
          sub_23835843C(v7, v6, v5 + 32, v8, v10);
          *v3 = v9;
          return swift_bridgeObjectRelease();
        }
LABEL_14:
        v9 = sub_23826C260((uint64_t)v9);
        *v3 = v9;
        goto LABEL_10;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v12 = __CFADD__(v11, v10);
  v11 += v10;
  if (v12)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v11 >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = ((v11 + 63) >> 6) - *((_QWORD *)*v4 + 2);
  if (result >= 0)
  {
    sub_23829E648(result, 0);
    v4[1] = (char *)v11;
    goto LABEL_7;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t BitArray.insert(contentsOf:at:)(uint64_t result, unint64_t a2, int64_t a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) == 0)
    return BitArray.insert(contentsOf:at:)(0, a2, result, a4, a3);
  __break(1u);
  return result;
}

uint64_t BitArray.insert(contentsOf:at:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;

  v13 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3;
  if (v13 < 1)
    return swift_bridgeObjectRelease();
  v7 = v6;
  v14 = v6[1];
  v15 = v14 + v13;
  if (__CFADD__(v14, v13))
    goto LABEL_15;
  if (v15 >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = a1;
  v16 = ((v15 + 63) >> 6) - *(_QWORD *)(*v6 + 16);
  if (v16 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = a5;
  v9 = a2;
  sub_23829E648(v16, 0);
  v6[1] = v15;
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = v15 - v13;
  if ((uint64_t)(v15 - v13) < v8)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = v8 + v13;
  if (__OFADD__(v8, v13))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = *v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_21:
    v13 = (uint64_t)sub_23826C260(v13);
    *v7 = v13;
  }
  sub_23835843C(v8, v11, v13 + 32, *(_QWORD *)(v13 + 16), v12);
  *v7 = v13;
  v18 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  v19 = swift_isUniquelyReferenced_nonNull_native();
  *v7 = v13;
  if ((v19 & 1) == 0)
  {
    v13 = (uint64_t)sub_23826C260(v13);
    *v7 = v13;
  }
  sub_23835843C(v10, v9, v5 + 32, v18, v8);
  *v7 = v13;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_2382E2810(uint64_t result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(char *);
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t i;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  char v28;

  v3 = v1[1];
  if (((unint64_t)v3 & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!v3)
    return 0;
  v4 = (uint64_t (*)(char *))result;
  v5 = (uint64_t)(*v1 + 32);
  v26 = *v1;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    v28 = (*(_QWORD *)(v5 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1;
    v7 = v4(&v28);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
    if ((v7 & 1) != 0)
      break;
    if (v3 == (char *)++v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    if ((char *)(v6 + 1) == v3)
      return v6;
    for (i = v6 + 1; i < (unint64_t)v3; ++i)
    {
      v9 = v26 + 32;
      v10 = i >> 6;
      v11 = 1 << i;
      v27 = (*(_QWORD *)&v26[8 * (i >> 6) + 32] & (1 << i)) != 0;
      result = v4((char *)&v27);
      if ((result & 1) == 0)
      {
        if (i != v6)
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_36;
          if (v6 >= (unint64_t)v3)
            goto LABEL_37;
          v24 = *(_QWORD *)&v9[8 * (v6 >> 6)];
          v25 = *(_QWORD *)&v9[8 * v10];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v1 = v26;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v26 = sub_23826C260((uint64_t)v26);
            *v1 = v26;
          }
          v13 = 1 << (v6 & 0x3F);
          v14 = &v26[8 * (v6 >> 6)];
          v15 = *((_QWORD *)v14 + 4);
          v16 = v15 | v13;
          v17 = v15 & ~v13;
          if ((v25 & v11) != 0)
            v17 = v16;
          *((_QWORD *)v14 + 4) = v17;
          *v1 = v26;
          result = swift_isUniquelyReferenced_nonNull_native();
          *v1 = v26;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23826C260((uint64_t)v26);
            v26 = (char *)result;
            *v1 = (char *)result;
          }
          v18 = &v26[8 * v10];
          v19 = *((_QWORD *)v18 + 4);
          v20 = v19 | v11;
          v21 = v19 & ~v11;
          if ((v24 & (1 << (v6 & 0x3F))) != 0)
            v21 = v20;
          *((_QWORD *)v18 + 4) = v21;
          *v1 = v26;
        }
        if (__OFADD__(v6++, 1))
          goto LABEL_35;
      }
      v23 = (char *)(i + 1);
      if (__OFADD__(i, 1))
        goto LABEL_33;
      if (v23 == v3)
        return v6;
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_2382E2A7C(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_23826C3AC((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal8BitArrayV9repeating5countACSb_SitcfC_0(uint64_t result, unint64_t a2)
{
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t *v11;
  unint64_t v12;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = result;
  v4 = (a2 + 63) >> 6;
  if (!a2)
  {
    result = MEMORY[0x24BEE4AF8];
    goto LABEL_11;
  }
  v5 = result << 63 >> 63;
  result = sub_23835B088();
  *(_QWORD *)(result + 16) = v4;
  v6 = (unint64_t *)(result + 32);
  if (a2 < 0xC1)
  {
    v7 = 0;
LABEL_9:
    v12 = v4 - v7;
    do
    {
      *v6++ = v5;
      --v12;
    }
    while (v12);
    goto LABEL_11;
  }
  v8 = 0;
  v7 = v4 & 0x3FFFFFFFFFFFFFCLL;
  v9 = 8 * (v4 & 0x3FFFFFFFFFFFFFCLL);
  v6 = (unint64_t *)((char *)v6 + v9);
  v10 = vdupq_n_s64(v5);
  do
  {
    v11 = (int64x2_t *)(result + v8);
    v11[2] = v10;
    v11[3] = v10;
    v8 += 32;
  }
  while (v9 != v8);
  if (v4 != v7)
    goto LABEL_9;
LABEL_11:
  if ((v3 & 1) != 0 && (a2 & 0x3F) != 0)
  {
    if (v4 <= *(_QWORD *)(result + 16))
    {
      *(_QWORD *)(result + 8 * v4 + 24) = ~(-1 << (a2 & 0x3F));
      return result;
    }
LABEL_17:
    __break(1u);
  }
  return result;
}

uint64_t sub_2382E2C68(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v6 = result;
  if (v3)
  {
    v7 = (v3 + 63) >> 6;
    v8 = sub_23835B088();
    *(_QWORD *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), 8 * v7);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  sub_23835843C(v6, a2, a3 + 32, v9, 0);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_2382E2D54()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2568F1888;
  if (!qword_2568F1888)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F14E0);
    v2 = sub_2382E2DB8();
    result = MEMORY[0x23B831670](MEMORY[0x24BEE4240], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568F1888);
  }
  return result;
}

unint64_t sub_2382E2DB8()
{
  unint64_t result;

  result = qword_2568F1890;
  if (!qword_2568F1890)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_2568F1890);
  }
  return result;
}

unint64_t BitSet.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_2382E3450(a1, a2);
  swift_bridgeObjectRetain();
  return v2;
}

char *BitSet.init(reservingCapacity:)(uint64_t a1)
{
  return sub_23826C3AC(0, ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6, 0, MEMORY[0x24BEE4AF8]);
}

Swift::Void __swiftcall BitSet.reserveCapacity(_:)(Swift::Int a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v5;

  v2 = ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6;
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v2 > *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v3 + 2) <= v2)
      v5 = v2;
    else
      v5 = *((_QWORD *)v3 + 2);
    v3 = sub_23826C3AC(isUniquelyReferenced_nonNull_native, v5, 0, v3);
  }
  *v1 = v3;
}

uint64_t BitSet.subscript.getter(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0 || a1 >> 6 >= *(_QWORD *)(a2 + 16))
    return 0;
  else
    return (*(_QWORD *)(a2 + 8 * (a1 >> 6) + 32) >> a1) & 1;
}

_BYTE *BitSet.subscript.setter(_BYTE *result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v5 = (char)result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if ((result & 1) == 0)
      return result;
    __break(1u);
LABEL_9:
    v6 = (char *)*v2;
    if (v3 >= *(_QWORD *)(*v2 + 16) << 6)
      return result;
    goto LABEL_10;
  }
  v3 = a2;
  v4 = a2 >> 6;
  if ((result & 1) == 0)
    goto LABEL_9;
  v6 = (char *)*v2;
  v7 = *(_QWORD *)(*v2 + 16);
  v8 = v4 >= v7;
  v9 = v4 - v7;
  if (v8)
  {
    if (v9 < -1)
    {
      __break(1u);
      return result;
    }
    sub_23829E648(v9 + 1, 0);
    v6 = (char *)*v2;
  }
LABEL_10:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_23826C260((uint64_t)v6);
  v10 = *((_QWORD *)v6 + 2);
  v11 = v6 + 32;
  v12 = 1 << v3;
  if ((v5 & 1) != 0)
    v13 = *(_QWORD *)&v11[8 * v4] | v12;
  else
    v13 = *(_QWORD *)&v11[8 * v4] & ~v12;
  *(_QWORD *)&v11[8 * v4] = v13;
  v14 = v4 == v10 - 1;
  *v2 = (uint64_t)v6;
  return sub_2382FC0D0(&v14, v2);
}

_BYTE *(*BitSet.subscript.modify(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0 || a2 >> 6 >= *(_QWORD *)(*(_QWORD *)v2 + 16))
    LOBYTE(v3) = 0;
  else
    v3 = (*(_QWORD *)(*(_QWORD *)v2 + 8 * (a2 >> 6) + 32) >> a2) & 1;
  *(_BYTE *)(a1 + 16) = v3;
  return sub_2382E3038;
}

_BYTE *sub_2382E3038(uint64_t a1)
{
  return BitSet.subscript.setter((_BYTE *)*(unsigned __int8 *)(a1 + 16), *(_QWORD *)a1);
}

unint64_t BitSet.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;

  sub_2382E30BC(a3 + 32, *(_QWORD *)(a3 + 16), a1, a2, &v5);
  v3 = v5;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t sub_2382E30BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t result;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  if (a4 <= 0)
    result = 0;
  else
    result = a3 & ~(a3 >> 63);
  v8 = a2 << 6;
  if (a2 << 6 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = a4 & ~(a4 >> 63);
    v11 = a2 << 6;
    if (result < v8)
    {
      if ((uint64_t)(result >> 6) >= a2 || ((*(_QWORD *)(a1 + 8 * (result >> 6)) >> result) & 1) == 0)
        result = _UnsafeBitSet.index(after:)(result, a1, a2);
      v11 = result;
    }
    result = v11;
    if (v11 < v10)
    {
      result = v8;
      if (v10 < v8)
      {
        if ((uint64_t)(v10 >> 6) < a2 && ((*(_QWORD *)(a1 + 8 * (v10 >> 6)) >> v10) & 1) != 0)
          result = v10;
        else
          result = _UnsafeBitSet.index(after:)(v10, a1, a2);
      }
    }
    *a5 = v11;
    a5[1] = result;
  }
  return result;
}

_BYTE *BitSet.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *result;
  BOOL v8;

  v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_23826C260((uint64_t)v3);
  if (a1 >> 6 >= *((_QWORD *)v3 + 2))
  {
    v8 = 0;
    *v1 = (uint64_t)v3;
    result = sub_2382FC0D0(&v8, v1);
  }
  else
  {
    v4 = &v3[8 * (a1 >> 6)];
    v5 = *((_QWORD *)v4 + 4);
    v6 = v5 & (1 << a1);
    *((_QWORD *)v4 + 4) = v5 & ~(1 << a1);
    v8 = v6 != 0;
    *v1 = (uint64_t)v3;
    result = sub_2382FC0D0(&v8, v1);
    if (v6)
      return (_BYTE *)a1;
  }
  __break(1u);
  return result;
}

int64_t BitSet.filter(_:)(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int64_t v7;
  uint64_t v9[2];

  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = sub_23835B088();
    *(_QWORD *)(v7 + 16) = v6;
    bzero((void *)(v7 + 32), 8 * v6);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
    v6 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  }
  v9[0] = v7 + 32;
  v9[1] = v6;
  sub_2382E3304(v9, a3, a1);
  if (v3)
    return swift_bridgeObjectRelease();
  else
    return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(v7);
}

uint64_t sub_2382E3304(uint64_t *a1, uint64_t a2, uint64_t (*a3)(unint64_t))
{
  uint64_t v3;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *a1;
  v7 = (unint64_t *)(a2 + 32);
  if (*(_QWORD *)(a2 + 16))
    v8 = *v7;
  else
    v8 = 0;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (v8)
  {
    if (v10 << 6 < 0)
      goto LABEL_23;
    v11 = __rbit64(v8);
    v8 &= v8 - 1;
    v12 = (v10 << 6) | __clz(v11);
LABEL_17:
    result = a3(v12);
    if (v3)
      return swift_bridgeObjectRelease();
    if ((result & 1) != 0)
    {
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_24;
      *(_QWORD *)(v6 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
    goto LABEL_25;
  v14 = *(_QWORD *)(a2 + 16);
  if (v13 >= v14)
    return swift_bridgeObjectRelease();
  v15 = v7[v13];
  if (v15)
  {
    ++v10;
LABEL_15:
    if (v10 << 6 < 0)
      goto LABEL_26;
    v8 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_17;
  }
  while (1)
  {
    v10 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v10 >= v14)
      return swift_bridgeObjectRelease();
    v15 = v7[v10];
    ++v13;
    if (v15)
      goto LABEL_15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_2382E3450(uint64_t a1, uint64_t a2)
{
  unint64_t v4[2];

  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0);
  sub_2382E34EC();
  sub_23835B040();
  sub_2382E30BC(a2 + 32, *(_QWORD *)(a2 + 16), v4[0], v4[1], v4);
  return v4[0];
}

unint64_t sub_2382E34EC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_2568F1520;
  if (!qword_2568F1520)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F0BA0);
    v2 = sub_2382ACF74();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x23B831670](MEMORY[0x24BEE1BD8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_2568F1520);
  }
  return result;
}

uint64_t BitSet.init()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t BitSet.init<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, ValueMetadata *);
  uint64_t result;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char *v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v19 - v6;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](v5);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    Description[4](v11, a1, &type metadata for BitSet);
LABEL_7:
    swift_dynamicCast();
    return v22;
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    Description[4](v11, a1, &type metadata for BitSet.Counted);
    goto LABEL_7;
  }
  v20 = v9;
  v24 = (char *)MEMORY[0x24BEE4AF8];
  v12 = Description[2];
  v21 = a1;
  v12(v11, a1, a2);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  result = sub_23835B484();
  if ((v23 & 1) != 0)
  {
LABEL_4:
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(v21, a2);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, AssociatedTypeWitness);
    return (uint64_t)v24;
  }
  else
  {
    v14 = v22;
    v15 = (char *)MEMORY[0x24BEE4AF8];
    while ((v14 & 0x8000000000000000) == 0)
    {
      v16 = *((_QWORD *)v15 + 2);
      v17 = v14 >> 6 >= v16;
      v18 = (v14 >> 6) - v16;
      if (v17)
      {
        if (v18 < -1)
          goto LABEL_19;
        sub_23829E648(v18 + 1, 0);
      }
      v15 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_23826C260((uint64_t)v15);
      *(_QWORD *)&v15[8 * (v14 >> 6) + 32] |= 1 << v14;
      v24 = v15;
      result = sub_23835B484();
      v14 = v22;
      if ((v23 & 1) != 0)
        goto LABEL_4;
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

int64_t BitSet.init<A>(words:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v10;

  v10 = sub_2382E41A8(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v10;
}

uint64_t sub_2382E3820(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_23835B334();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_23835AFA4();
  v57 = sub_23835ABC0();
  v53 = sub_23835B6E8();
  sub_23835B67C();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_23835AF8C();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_23835B484();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_23835B6AC();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_23835B484();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_23835B6AC();
      sub_23835B484();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

int64_t BitSet.init<A>(bitPattern:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v16 - v6;
  sub_23835B4CC();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = sub_2382E41A8((uint64_t)v7, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8) + 8), v9, v10, v11, v12, v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v14;
}

uint64_t BitSet.init<A>(_validMembersOf:)(uint64_t a1, ValueMetadata *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v20 - v7;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    Description[4](v11, a1, &type metadata for BitSet);
LABEL_17:
    swift_dynamicCast();
    return v21;
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    Description[4](v11, a1, &type metadata for BitSet.Counted);
    goto LABEL_17;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0) == a2)
  {
    Description[2](v11, a1, a2);
    swift_dynamicCast();
    if (v22 <= 0)
      v19 = 0;
    else
      v19 = v21 & ~(v21 >> 63);
    v18 = _s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(v19, v22 & ~(v22 >> 63));
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
    return (uint64_t)v18;
  }
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v23 = (char *)MEMORY[0x24BEE4AF8];
  Description[2](v11, a1, a2);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    do
    {
      result = sub_23835B484();
      if (v22 == 1)
      {
        ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
        return (uint64_t)v23;
      }
      v14 = v21;
    }
    while (v21 < 0);
    v20 = a1;
    v15 = *((_QWORD *)v12 + 2);
    v16 = (unint64_t)v21 >> 6 >= v15;
    v17 = ((unint64_t)v21 >> 6) - v15;
    if (v16)
      break;
LABEL_11:
    v12 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_23826C260((uint64_t)v12);
    *(_QWORD *)&v12[8 * (v14 >> 6) + 32] |= 1 << v14;
    v23 = v12;
    a1 = v20;
  }
  if (v17 >= -1)
  {
    sub_23829E648(v17 + 1, 0);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t BitSet.init(_:)(unint64_t a1, unint64_t a2)
{
  if (((a2 | a1) & 0x8000000000000000) == 0)
    return (unint64_t)_s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(a1, a2);
  __break(1u);
  return a1;
}

int64_t _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(int64_t result)
{
  int64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v7;

  v7 = result;
  v1 = *(_QWORD *)(result + 16);
  v2 = v1 - 1;
  if (!v1)
    goto LABEL_4;
  v3 = v1 - 1;
  if (*(_QWORD *)(result + 32 + 8 * v2))
    goto LABEL_5;
  v3 = v1 - 2;
  if ((unint64_t)v1 < 2)
    goto LABEL_4;
  if (!*(_QWORD *)(result + 32 + 8 * v3))
  {
    v5 = *(_QWORD *)(result + 16);
    while (v5 - 2 >= 1)
    {
      if (*(_QWORD *)(result + 8 + 8 * v5--))
      {
        v3 = v5 - 2;
        goto LABEL_5;
      }
    }
LABEL_4:
    v3 = -1;
  }
LABEL_5:
  v4 = v2 - v3;
  if (v4 < 1)
    return result;
  result = v1 - v4;
  if (v1 < v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v1 < result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  sub_2382E2A7C(result, v1);
  return v7;
}

int64_t sub_2382E41A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v8;

  v8 = sub_2382E3820((void (*)(char *, char *))sub_23826B2E4, 0, a2, (uint64_t)&type metadata for _UnsafeBitSet._Word, MEMORY[0x24BEE4078], a3, MEMORY[0x24BEE40A8], a8);
  return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(v8);
}

char *_s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(unint64_t a1, unint64_t a2)
{
  char v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = a1;
  v14 = MEMORY[0x24BEE4AF8];
  v4 = a1 >> 6;
  if (a1 >= 0x40)
    sub_23829E648(a1 >> 6, 0);
  v5 = v3 & 0x3F;
  v6 = (a2 >> 6) - v4;
  if (v6)
  {
    v8 = (char *)v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_23826C3AC(0, *(_QWORD *)(v14 + 16) + 1, 1, (char *)v14);
    v10 = *((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    if (v10 >= v9 >> 1)
      v8 = sub_23826C3AC((char *)(v9 > 1), v10 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v10 + 1;
    *(_QWORD *)&v8[8 * v10 + 32] = -1 << v5;
    if (v6 >= 1)
      sub_23829E648(v6 - 1, 0xFFFFFFFFFFFFFFFFLL);
    v7 = ~(-1 << a2);
  }
  else
  {
    v7 = (-1 << a2) ^ (-1 << v5);
    v8 = (char *)v14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_23826C3AC(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  v12 = *((_QWORD *)v8 + 2);
  v11 = *((_QWORD *)v8 + 3);
  if (v12 >= v11 >> 1)
    v8 = sub_23826C3AC((char *)(v11 > 1), v12 + 1, 1, v8);
  *((_QWORD *)v8 + 2) = v12 + 1;
  *(_QWORD *)&v8[8 * v12 + 32] = v7;
  sub_2382FC010();
  return v8;
}

uint64_t OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2382E43DC(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_2382E6DB0);
}

{
  return sub_2382E43DC(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_2382E7290);
}

uint64_t sub_2382E43DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t OrderedDictionary.updateValue<A>(forKey:default:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(unint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v7 = v6;
  v24 = *(_QWORD *)(*(_QWORD *)(a6 + 24) - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 32);
  swift_retain();
  swift_retain();
  v12 = OrderedSet._find(_:)();
  v14 = v13;
  v16 = v15;
  swift_release();
  swift_release();
  if ((v14 & 1) == 0)
  {
    sub_23835B6E8();
    result = sub_23835B688();
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v19 = *(_QWORD *)(v7 + 16);
      if (*(_QWORD *)(v19 + 16) > v12)
      {
        v20 = v19
            + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
            + *(_QWORD *)(v24 + 72) * v12;
        return a4(v20);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  type metadata accessor for OrderedSet(0, v10, v11, v17);
  OrderedSet._appendNew(_:in:)(a1, v16);
  a2();
  sub_23835B6E8();
  sub_23835B6AC();
  v21 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16);
  result = sub_23835B688();
  if (!v21)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v22 = *(_QWORD *)(v7 + 16);
  if (*(_QWORD *)(v22 + 16) > (unint64_t)(v21 - 1))
  {
    v20 = v22
        + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
        + *(_QWORD *)(v24 + 72) * (v21 - 1);
    return a4(v20);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.values.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.count.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t OrderedDictionary.isEmpty.getter()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v0);
  return sub_23835B22C() & 1;
}

uint64_t OrderedDictionary._keys.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary._keys.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedDictionary._keys.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary._values.getter()
{
  return swift_retain();
}

uint64_t OrderedDictionary._values.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*OrderedDictionary._values.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.keys.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

void (*OrderedDictionary.values.modify(_QWORD *a1, _QWORD *a2))(_QWORD **a1)
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(_QWORD *)v5 = *(_QWORD *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  v6 = a2[2];
  v7 = a2[3];
  *((_QWORD *)v5 + 3) = v2;
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 5) = v7;
  swift_getTupleTypeMetadata2();
  v8 = sub_23835B070();
  v9 = a2[4];
  *((_QWORD *)v5 + 6) = v9;
  v10 = sub_23829E2AC(v8, v6, v7, v9);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v10;
  *(_QWORD *)(v2 + 8) = v12;
  *(_QWORD *)(v2 + 16) = v14;
  return sub_2382E4888;
}

void sub_2382E4888(_QWORD **a1)
{
  void *v1;

  v1 = *a1;
  sub_2382ABC3C((_QWORD *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t OrderedDictionary.values.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[3];

  v5 = v4;
  v9 = a4[2];
  v10 = a4[3];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getTupleTypeMetadata2();
  v11 = sub_23835B070();
  v12 = sub_23829E2AC(v11, v9, v10, a4[4]);
  v14 = v13;
  v16 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *v5 = v12;
  v5[1] = v14;
  v5[2] = v16;
  v19[0] = a1;
  v19[1] = a2;
  v19[2] = a3;
  sub_2382ABC3C(v5, v19);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;

  OrderedSet._find(_:)();
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    sub_23835B724();
    v5 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v5, 1, a1);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v51 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v47 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v54 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v50 = (char *)&v46 - v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2568F07B0);
  v14 = sub_23835B334();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = (char *)&v46 - v16;
  v49 = v3;
  v18 = *(_QWORD *)(a3 + 32);
  swift_retain();
  swift_retain();
  v52 = (char *)a2;
  v53 = v6;
  v19 = OrderedSet._find(_:)();
  LOBYTE(v6) = v20;
  v22 = v21;
  swift_release();
  v23 = v55;
  swift_release();
  v24 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  *(_QWORD *)v17 = v19;
  v17[8] = v6 & 1;
  v25 = v54;
  v26 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v23, v14);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v10);
  if ((v6 & 1) != 0)
  {
    if (v27 == 1)
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v23, v14);
    }
    v39 = v22;
    v40 = v50;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v50, v24, v10);
    v41 = v53;
    type metadata accessor for OrderedSet(0, v53, v18, v42);
    v43 = (uint64_t)v52;
    OrderedSet._appendNew(_:in:)((uint64_t)v52, v39);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v48, v40, v10);
    sub_23835B6E8();
    sub_23835B6AC();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v43, v41);
    goto LABEL_11;
  }
  if (v27 == 1)
  {
    v30 = v22;
    v31 = v53;
    v32 = type metadata accessor for OrderedSet(0, v53, v18, v28);
    v33 = v47;
    OrderedSet._removeExistingMember(at:in:)(v19, v30, v32);
    v34 = v25;
    v35 = *(void (**)(char *, uint64_t))(v51 + 8);
    v35(v33, v31);
    sub_23835B6E8();
    v36 = v10;
    v37 = v14;
    v38 = v50;
    sub_23835B6C4();
    v35(v52, v31);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v36);
  }
  v40 = v50;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v50, v24, v10);
  v44 = v49;
  sub_23835B6E8();
  result = sub_23835B688();
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v45 = *(_QWORD *)(v44 + 16);
  if (*(_QWORD *)(v45 + 16) <= v19)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  (*(void (**)(unint64_t, char *, uint64_t))(v25 + 24))(v45+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v19, v40, v10);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
LABEL_11:
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v40, v10);
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 24);
  v7[2] = v3;
  v7[3] = v8;
  v9 = sub_23835B334();
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[5] = v10;
  v11 = malloc(*(_QWORD *)(v10 + 64));
  v7[6] = v11;
  (*(void (**)(void))(*(_QWORD *)(v8 - 8) + 56))();
  v12 = OrderedDictionary._prepareForKeyingModify(_:_:)(a2, (uint64_t)v11, a3);
  *((_BYTE *)v7 + 72) = v13;
  v7[7] = v12;
  v7[8] = v14;
  return sub_2382E4F14;
}

void sub_2382E4F14(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v1 = *a1;
  v2 = (*a1)[7];
  v3 = (*a1)[8];
  v5 = (*a1)[5];
  v4 = (void *)(*a1)[6];
  v6 = (*a1)[4];
  v7 = **a1;
  v8 = (*a1)[9] & 1;
  v9 = type metadata accessor for OrderedDictionary(0, *(_QWORD *)((*a1)[1] + 16), (*a1)[3], *(_QWORD *)((*a1)[1] + 32));
  OrderedDictionary._finalizeKeyingModify(_:_:_:_:)(v7, v2, v8, v3, (uint64_t)v4, v9);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  free(v4);
  free(v1);
}

uint64_t OrderedDictionary._prepareForKeyingModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = OrderedSet._find(_:)();
  if ((v6 & 1) != 0)
    return v5;
  v7 = *(_QWORD *)(a3 + 24);
  v8 = sub_23835B334();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
  result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (!__OFSUB__(result, 1))
  {
    v10 = sub_23835B6E8();
    MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v10);
    sub_23835ACE0();
    MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v10);
    MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v10);
    sub_23835B2B0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1, v7);
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary._finalizeKeyingModify(_:_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v35 = a1;
  v10 = a3 & 1;
  v38 = *(_QWORD *)(a6 + 16);
  v39 = a4;
  v37 = *(_QWORD *)(v38 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v36 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)&v35 - v18;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2568F07B0);
  v19 = sub_23835B334();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v23 = (char *)&v35 - v22;
  v24 = &v23[*(int *)(v21 + 48)];
  v25 = a2;
  *(_QWORD *)v23 = a2;
  v23[8] = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v24, a5, v19);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v24, 1, v14);
  if ((a3 & 1) != 0)
  {
    if ((_DWORD)result == 1)
      return result;
    v27 = v41;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v41, v24, v14);
    type metadata accessor for OrderedSet(0, v38, *(_QWORD *)(a6 + 32), v28);
    OrderedSet._appendNew(_:in:)(v35, v39);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v27, v14);
    sub_23835B6E8();
    sub_23835B6AC();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v27, v14);
  }
  if ((_DWORD)result != 1)
  {
    v27 = v41;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v41, v24, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v27, v14);
    v34 = sub_23835B6E8();
    sub_23835B6AC();
    v43 = v25;
    result = _s19CollectionsInternal4HeapV5countSivg_0();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    v42 = result - 1;
    MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v34);
    sub_23835ACE0();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v27, v14);
  }
  if (_s19CollectionsInternal4HeapV5countSivg_0() > a2)
  {
    sub_23835B6E8();
    v30 = v41;
    sub_23835B6C4();
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v30, v14);
    sub_23835B6AC();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v30, v14);
  }
  v31 = v38;
  v32 = type metadata accessor for OrderedSet(0, v38, *(_QWORD *)(a6 + 32), v29);
  v33 = v36;
  OrderedSet._removeExistingMember(at:in:)(a2, v39, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v33, v31);
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  char v4;

  v3 = OrderedSet._find(_:)();
  if ((v4 & 1) != 0)
    return a2(v3);
  else
    return sub_23835B724();
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;

  v11 = malloc(0x38uLL);
  *a1 = v11;
  *v11 = a5;
  v11[1] = v5;
  v12 = *(_QWORD *)(a5 + 24);
  v11[2] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[3] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v15 = malloc(v14);
  v11[4] = v15;
  v16 = malloc(v14);
  v11[5] = v16;
  v11[6] = OrderedDictionary._prepareForDefaultedModify(_:_:)((uint64_t)v15, a2, a3, a4, a5);
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v16, v15, v12);
  return sub_2382E55AC;
}

void sub_2382E55AC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = type metadata accessor for OrderedDictionary(0, *(_QWORD *)(**(_QWORD **)a1 + 16), v6, *(_QWORD *)(**(_QWORD **)a1 + 32));
  OrderedDictionary._finalizeDefaultedModify(_:_:)(v3, (uint64_t)v2, v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v2, v6);
  free(v2);
  free(v4);
  free(v1);
}

uint64_t OrderedDictionary._prepareForDefaultedModify(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v6 = v5;
  v9 = *(_QWORD *)(*(_QWORD *)(a5 + 24) - 8);
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for OrderedSet(0, *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 32), v11);
  v12 = OrderedSet._append(_:)(a2);
  v14 = v13;
  if ((v12 & 1) != 0)
  {
    a3(v12);
    sub_23835B6E8();
    sub_23835B6AC();
  }
  sub_23835B6E8();
  sub_23835B688();
  v15 = *(_QWORD *)(v6 + 16);
  v16 = *(_QWORD *)(v15 + 16);
  v19[0] = v15 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v17 = v19[0];
  v19[1] = v16;
  sub_2382E58D0();
  sub_23828CD3C(v19, v17, v16);
  return v14;
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v23 = a4;
  v24 = a2;
  v8 = *(_QWORD *)(a5 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v17);
  v18 = OrderedDictionary._prepareForDefaultedModify(_:_:)((uint64_t)v12, (uint64_t)v17, a3, v23, a5);
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v12, a1, v8);
  v19 = type metadata accessor for OrderedDictionary(0, v14, v8, *(_QWORD *)(a5 + 32));
  OrderedDictionary._finalizeDefaultedModify(_:_:)(v18, (uint64_t)v12, v19);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v21 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v21(v24, v14);
  v20(a1, v8);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v14);
}

uint64_t sub_2382E58D0()
{
  uint64_t result;

  result = sub_23835AD4C();
  if (result)
    return sub_23835B328();
  __break(1u);
  return result;
}

_QWORD *OrderedDictionary._finalizeDefaultedModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v7 = *(_QWORD *)(a3 + 24);
  sub_23835B6E8();
  sub_23835B688();
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  v11 = v8 + ((v10 + 32) & ~v10);
  v13[0] = v11;
  v13[1] = v9;
  sub_2382E59F8((uint64_t)v13, a1, a2, *(_QWORD *)(a3 + 16), v7);
  return sub_23828CD3C(v13, v11, v9);
}

uint64_t sub_2382E59F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_23835AD4C();
  if (result)
  {
    v12 = result + *(_QWORD *)(v8 + 72) * a2;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, a5);
    return sub_2382F7024((uint64_t)v10, v12, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a1;
  v24 = a4;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_retain();
  v22 = a2;
  v13 = OrderedSet._find(_:)();
  LOBYTE(a2) = v14;
  v21 = v15;
  swift_release();
  swift_release();
  if ((a2 & 1) != 0)
  {
    type metadata accessor for OrderedSet(0, v11, v12, v16);
    OrderedSet._appendNew(_:in:)(v22, v21);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, v6);
    sub_23835B6E8();
    sub_23835B6AC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v24, 1, 1, v6);
  }
  else
  {
    v18 = v23;
    v17 = v24;
    v19 = v4 + 16;
    sub_23835B724();
    sub_23835B6E8();
    result = sub_23835B688();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(*(_QWORD *)v19 + 16) > v13)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(*(_QWORD *)v19+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13, v18, v6);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
    }
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.updateValue(_:forKey:insertingAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v10 = *(_QWORD *)(a5 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OrderedSet(0, *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 32), v15);
  v17 = OrderedSet.insert(_:at:)(a3, a4, v16);
  v19 = v18;
  if ((v17 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    sub_23835B6E8();
    sub_23835B6B8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
    return v19;
  }
  v20 = v5 + 16;
  sub_23835B724();
  sub_23835B6E8();
  result = sub_23835B688();
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v20 + 16) > v19)
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(*(_QWORD *)v20+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v19, a2, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    return v19;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.updateValue<A>(forKey:insertingDefault:at:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, unint64_t a4, uint64_t (*a5)(unint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;

  v8 = v7;
  v24 = *(_QWORD *)(*(_QWORD *)(a7 + 24) - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_retain();
  v13 = OrderedSet._find(_:)();
  v15 = v14;
  v17 = v16;
  swift_release();
  swift_release();
  if ((v15 & 1) == 0)
  {
    sub_23835B6E8();
    result = sub_23835B688();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }
    v20 = *(_QWORD *)(v8 + 16);
    if (*(_QWORD *)(v20 + 16) > v13)
      return a5(v20+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v13);
    __break(1u);
  }
  v21 = type metadata accessor for OrderedSet(0, v11, v12, v18);
  v13 = a4;
  OrderedSet._insertNew(_:at:in:)(a1, a4, v17, v21);
  a2();
  sub_23835B6E8();
  sub_23835B6B8();
  result = sub_23835B688();
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v20 = *(_QWORD *)(v8 + 16);
  if (*(_QWORD *)(v20 + 16) > a4)
    return a5(v20+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v13);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = a2[2];
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2[4];
  v10 = OrderedSet._find(_:)();
  if ((v13 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2[3] - 8) + 56))(a3, 1, 1);
  v14 = v10;
  v15 = v11;
  v16 = type metadata accessor for OrderedSet(0, v5, v9, v12);
  OrderedSet._removeExistingMember(at:in:)(v14, v15, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = a2[3];
  sub_23835B6E8();
  sub_23835B6C4();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 0, 1, v17);
}

uint64_t sub_2382E60E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;

  v9 = *(_QWORD *)(a6 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v10, v13);
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, a6);
  }
  return result;
}

uint64_t OrderedDictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2382E61EC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2382E6DB0);
}

{
  return sub_2382E61EC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2382E7290);
}

uint64_t sub_2382E61EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t result;
  uint64_t v18;

  v14 = type metadata accessor for OrderedDictionary(0, a7, a8, a10);
  swift_retain();
  swift_retain();
  swift_retain();
  a12(a1, a2, a3, v14, a9, a11);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 8))(a1, a9);
  result = a4;
  if (v18)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.filter(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD, _QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, char *);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;

  v66 = a4;
  v67 = a5;
  v69 = a1;
  v70 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v73 = TupleTypeMetadata2;
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v58 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v58 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v72 = (uint64_t)&v58 - v18;
  v19 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v58 - v20;
  swift_getTupleTypeMetadata2();
  v22 = sub_23835B070();
  v23 = sub_23829E2AC(v22, a6, a7, a8);
  v25 = v24;
  v63 = v26;
  v27 = v13;
  swift_bridgeObjectRelease();
  v79 = v23;
  v80 = v25;
  v81 = v63;
  v75 = a3;
  v76 = v66;
  v77 = v67;
  v78 = 0;
  v59 = a8;
  v28 = type metadata accessor for OrderedDictionary.Iterator(0, a6, a7, a8);
  v29 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  OrderedDictionary.Iterator.next()(v28, v21);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v30(v21, 1, v29) == 1)
  {
LABEL_2:
    swift_release();
    swift_release();
    swift_release();
    return v79;
  }
  else
  {
    v61 = v30;
    v62 = v28;
    v32 = *(_QWORD **)(a6 - 8);
    v66 = (void (*)(_QWORD, _QWORD, _QWORD))v32[4];
    v67 = a7;
    v33 = v72;
    v68 = v27;
    v63 = v32;
    v64 = v21;
    v65 = a6;
    while (1)
    {
      v35 = *(int *)(v29 + 48);
      v36 = v33 + v35;
      v37 = &v21[v35];
      v66(v33, v21, a6);
      v38 = v67;
      v39 = *(_QWORD *)(v67 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v36, v37, v67);
      v40 = *(int *)(v29 + 48);
      v41 = v71;
      v42 = &v71[v40];
      v43 = v33;
      v44 = (void (*)(char *, uint64_t, uint64_t))v32[2];
      v44(v71, v43, a6);
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v45(v42, v36, v38);
      v46 = v74;
      v47 = v69(v41, v42);
      v74 = v46;
      if (v46)
        break;
      v48 = v47;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
      v49 = (void (*)(char *, uint64_t))v32[1];
      v50 = v65;
      v49(v41, v65);
      if ((v48 & 1) != 0)
      {
        v52 = type metadata accessor for OrderedSet(0, v50, v59, v51);
        v53 = v72;
        OrderedSet._appendNew(_:)(v72, v52);
        v29 = v73;
        v54 = *(int *)(v73 + 48);
        v55 = v38;
        v56 = v58;
        v60 = v49;
        v57 = &v58[v54];
        v44(v58, v53, v50);
        v33 = v53;
        v45(v57, v36, v55);
        sub_23835B6E8();
        sub_23835B6AC();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v53, v29);
        v60(v56, v50);
      }
      else
      {
        v33 = v72;
        v29 = v73;
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v73);
      }
      a6 = v50;
      v21 = v64;
      OrderedDictionary.Iterator.next()(v62, v64);
      v34 = v61(v21, 1, v29);
      v32 = v63;
      if (v34 == 1)
        goto LABEL_2;
    }
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v73);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    return ((uint64_t (*)(char *, uint64_t))v32[1])(v41, v65);
  }
}

uint64_t OrderedDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[9];
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v19[2] = a6;
  v19[3] = a7;
  v19[4] = a8;
  v19[5] = a9;
  v19[6] = a1;
  v19[7] = a2;
  v12 = sub_23835B6E8();
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  v14 = MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v12);
  v15 = sub_23826B2F0((void (*)(char *, char *))sub_2382E747C, (uint64_t)v19, v12, a8, v13, v14, MEMORY[0x24BEE3F20], (uint64_t)&v20);
  if (v9)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v16 = v15;
    swift_release();
    v21 = v16;
    v17 = sub_23835B0D0();
    MEMORY[0x23B831670](MEMORY[0x24BEE12C8], v17);
    sub_23835B0DC();
  }
  return a3;
}

uint64_t OrderedDictionary.compactMapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v10 = v9;
  v52 = a5;
  v61 = a4;
  v53 = a3;
  v63 = a2;
  v64 = a1;
  v60 = a9;
  v59 = sub_23835B334();
  v58 = *(_QWORD *)(v59 - 8);
  v14 = MEMORY[0x24BDAC7A8](v59);
  v65 = (char *)&v51 - v15;
  v62 = *(_QWORD *)(a8 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v57 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v56 = (char *)&v51 - v19;
  v20 = *(_QWORD *)(a7 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v72 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v70 = (uint64_t)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = sub_23835B334();
  v68 = *(_QWORD *)(v25 - 8);
  v69 = v25;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v67 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v51 - v28;
  v73 = a6;
  swift_getTupleTypeMetadata2();
  v30 = sub_23835B070();
  v31 = sub_23829E2AC(v30, a6, a8, a9);
  v33 = v32;
  v66 = v34;
  swift_bridgeObjectRelease();
  v78 = v31;
  v79 = v33;
  v80 = v66;
  v74 = v53;
  v75 = v61;
  v76 = v52;
  v77 = 0;
  v66 = type metadata accessor for OrderedDictionary.Iterator(0, v73, a7, v60);
  swift_retain();
  swift_retain();
  swift_retain();
  v55 = v20;
  v54 = TupleTypeMetadata2;
  while (1)
  {
    v35 = v67;
    OrderedDictionary.Iterator.next()(v66, v67);
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v29, v35, v69);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v29, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return v78;
    }
    v36 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v37 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v70, v29, v73);
    v38 = v72;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v72, v36, a7);
    v39 = v65;
    v64(v38);
    if (v10)
      break;
    v40 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v39, 1, a8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v72, a7);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v73);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v59);
    }
    else
    {
      v41 = v56;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v56, v39, a8);
      v42 = a7;
      v43 = v73;
      v45 = type metadata accessor for OrderedSet(0, v73, v60, v44);
      v61 = 0;
      v46 = v70;
      OrderedSet._appendNew(_:)(v70, v45);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v57, v41, a8);
      sub_23835B6E8();
      sub_23835B6AC();
      v10 = v61;
      v47 = v41;
      v20 = v55;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v47, a8);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v72, v42);
      v48 = v46;
      TupleTypeMetadata2 = v54;
      v49 = v43;
      a7 = v42;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v48, v49);
    }
    v29 = v37;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v72, a7);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v73);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t sub_2382E6D94(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2382E6DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t AssociatedConformanceWitness;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t TupleTypeMetadata2;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;

  v7 = v6;
  v64 = a2;
  v65 = a3;
  v83 = a1;
  v10 = *(_QWORD *)(a4 + 24);
  v81 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v68 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v80 = (char *)&v61 - v14;
  v72 = v15;
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) - 8);
  v62 = *(_QWORD *)(v15 + 16);
  v84 = v16;
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = sub_23835B334();
  v77 = *(_QWORD *)(v19 - 8);
  v78 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v76 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v75 = (char *)&v61 - v23;
  v24 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29 = (char *)&v61 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v31 = v10;
  v32 = v18;
  v30(v26, v83, a5);
  v82 = v29;
  v33 = v62;
  v34 = a6;
  sub_23835AF8C();
  v35 = sub_23835B6E8();
  sub_23835B688();
  v70 = v35;
  v71 = v7 + 16;
  sub_23835B688();
  v66 = a5;
  v67 = v34;
  v36 = v80;
  v37 = v81;
  v38 = v75;
  v83 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v63 = v18;
  v69 = v31;
  while (1)
  {
    v40 = v76;
    sub_23835B484();
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v38, v40, v78);
    v41 = TupleTypeMetadata2;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v38, 1, TupleTypeMetadata2) == 1)return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v82, v83);
    v42 = &v38[*(int *)(v41 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v32, v38, v33);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v42, v31);
    swift_retain();
    v43 = *(_QWORD *)(v72 + 32);
    swift_retain();
    v44 = v33;
    v45 = OrderedSet._find(_:)();
    v46 = (uint64_t)v32;
    v48 = v47;
    v50 = v49;
    swift_release();
    swift_release();
    if ((v48 & 1) != 0)
    {
      type metadata accessor for OrderedSet(0, v44, v43, v51);
      OrderedSet._appendNew(_:in:)(v46, v50);
      v39 = v80;
      v37 = v81;
      v31 = v69;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v68, v80, v69);
      sub_23835B6AC();
      v33 = v44;
      v36 = v39;
      v32 = (char *)v46;
      goto LABEL_3;
    }
    v52 = v44;
    v54 = (uint64_t)v80;
    v53 = v81;
    v55 = v69;
    v56 = v71;
    result = sub_23835B688();
    if ((v45 & 0x8000000000000000) != 0)
      break;
    if (*(_QWORD *)(*(_QWORD *)v56 + 16) <= v45)
      goto LABEL_14;
    v37 = v53;
    v58 = *(_QWORD *)v56
        + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
        + *(_QWORD *)(v53 + 72) * v45;
    v33 = v52;
    v59 = v52;
    v31 = v55;
    v60 = v73;
    sub_2382E60E0(v58, v64, v65, v54, v59, v55);
    if (v60)
    {
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v63, v33);
      return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v82, v83);
    }
    v73 = 0;
    v36 = (char *)v54;
    v32 = v63;
LABEL_3:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v31);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v32, v33);
    v38 = v75;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_2382E7290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v26 = a2;
  v9 = sub_23835B5BC();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a4 + 24);
  v21 = *(_QWORD *)(a4 + 16);
  v22 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_23835B730();
  v24 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - v14;
  sub_23835AFF8();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v21;
  v16[3] = v12;
  v17 = v22;
  v18 = *(_QWORD *)(v22 + 32);
  v16[4] = a5;
  v16[5] = v18;
  v16[6] = a6;
  MEMORY[0x23B831670](MEMORY[0x24BEE25B0], v9);
  sub_23835B808();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  v19 = MEMORY[0x23B831670](MEMORY[0x24BEE2B40], v13);
  sub_2382E6DB0((uint64_t)v15, v26, v27, v17, v13, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v13);
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

uint64_t sub_2382E747C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_2382E74AC()
{
  return swift_deallocObject();
}

BOOL Rope.isValid(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return *(_QWORD *)(v4 + *(int *)(a4 + 36)) == a1;
}

uint64_t Rope.formIndex(before:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for Rope._Node(255, v7, v8, a4);
  v45 = sub_23835B334();
  v42 = *(_QWORD *)(v45 - 8);
  v10 = MEMORY[0x24BDAC7A8](v45);
  v41 = (char *)&v36 - v11;
  v39 = v9;
  v44 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)&v36 - v13;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = a1[1];
  v19 = a1[2];
  Rope.validate(_:)(*a1, v20, v21, a2);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v43 = v4;
  v22(v16, v4, a2);
  v37 = v7;
  v38 = v8;
  v24 = type metadata accessor for Rope.Index(0, v7, v8, v23);
  v49 = v17;
  v50 = v18;
  v51 = v19;
  v46 = Rope.startIndex.getter(a2);
  v47 = v25;
  v48 = v26;
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>.Index, v24);
  v27 = sub_23835AC98();
  v28 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a2);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!a1[2]
    || (MEMORY[0x24BDAC7A8](v28),
        v29 = v37,
        v30 = v38,
        *(&v36 - 4) = v37,
        *(&v36 - 3) = v30,
        *(&v36 - 2) = (uint64_t)a1,
        result = Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_2382E8610, (uint64_t)(&v36 - 6), v31, v29, MEMORY[0x24BEE1328]), (v49 & 1) == 0))
  {
    v24 = (uint64_t)v41;
    v17 = v42;
    v27 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v43, v45);
    v33 = v44;
    v34 = v39;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v24, 1, v39) == 1)
    {
LABEL_9:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v24, v27);
      __break(1u);
      return result;
    }
    v27 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v40, v24, v34);
    v35 = Rope._Node.formPredecessor(of:)((uint64_t)a1, v34);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v27, v34);
    if ((v35 & 1) != 0)
      return result;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t Rope.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v36 = a3;
  v37 = a2;
  v38 = a5;
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(a4 + 24);
  v10 = type metadata accessor for Rope._Item(0, v8, v9, a4);
  MEMORY[0x24BDAC7A8](v10);
  v33 = (char *)&v33 - v11;
  v13 = type metadata accessor for Rope._Node(255, v8, v9, v12);
  v14 = sub_23835B334();
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v33 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v33 - v19;
  v23 = Rope.validate(_:)(a1, v21, v22, a4);
  if (v36)
  {
    MEMORY[0x24BDAC7A8](v23);
    *(&v33 - 6) = (char *)v8;
    *(&v33 - 5) = (char *)v9;
    v24 = (char *)v37;
    *(&v33 - 4) = (char *)a1;
    *(&v33 - 3) = v24;
    *(&v33 - 2) = v25;
    return Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_2382E876C, (uint64_t)(&v33 - 8), v25, v8, v8);
  }
  else
  {
    v27 = (uint64_t)v33;
    v28 = v34;
    v30 = v37;
    v29 = v38;
    v31 = v5;
    v32 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v17, v31, v35);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v32);
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, v13);
      Rope._Node.subscript.getter(v30, v13, v27);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v13);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v29, v27, v8);
    }
  }
  return result;
}

uint64_t Rope.formIndex(after:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v7 = *(_QWORD *)(a2 + 16);
  v48 = *(_QWORD *)(a2 + 24);
  v49 = v7;
  v8 = type metadata accessor for Rope._Node(255, v7, v48, a4);
  v45 = sub_23835B334();
  v43 = *(_QWORD *)(v45 - 8);
  v9 = MEMORY[0x24BDAC7A8](v45);
  v42 = (char *)&v41 - v10;
  v46 = v8;
  v44 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v41 - v12;
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = a1[1];
  v18 = a1[2];
  Rope.validate(_:)(*a1, v19, v20, a2);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v47 = v4;
  v21(v15, v4, a2);
  v22 = Rope.endIndex.getter(a2);
  v24 = v23;
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28 = v15;
  v29 = v48;
  v30 = v49;
  v27(v28, a2);
  v31 = static Rope.Index.< infix(_:_:)(v16, v17, v18, v22, v24, v26, v30, v29);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v32 = v47;
  if (!a1[2]
    || (MEMORY[0x24BDAC7A8](v31),
        *(&v41 - 4) = (char *)v30,
        *(&v41 - 3) = (char *)v29,
        *(&v41 - 2) = (char *)a1,
        result = Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_2382E877C, (uint64_t)(&v41 - 6), v33, v30, MEMORY[0x24BEE1328]), (v50 & 1) == 0))
  {
    v18 = (uint64_t)v42;
    v17 = v43;
    v22 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v32, v45);
    v35 = v44;
    v36 = v46;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v18, 1, v46) != 1)
    {
      v37 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v41, v18, v36);
      v38 = Rope._Node.formSuccessor(of:)((uint64_t)a1, v36);
      result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v36);
      if ((v38 & 1) == 0)
      {
        result = Rope.endIndex.getter(a2);
        *a1 = result;
        a1[1] = v39;
        a1[2] = v40;
      }
      return result;
    }
LABEL_9:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v22);
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Rope._invalidateIndices()()
{
  uint64_t v0;
  uint64_t v1;

  ++*(_QWORD *)(v1 + *(int *)(v0 + 36));
}

uint64_t Rope.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  __int16 v21;
  uint64_t result;
  uint64_t v23;
  char *v24;

  v5 = type metadata accessor for Rope._Node(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v24 = (char *)&v23 - v7;
  v8 = sub_23835B334();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v23 = v4;
  v15((char *)&v23 - v13, v4, v8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v17 = 1;
  v18 = v16(v14, 1, v5);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  if (v18 == 1)
    return v17;
  v15(v12, v23, v8);
  if (v16(v12, 1, v5) != 1)
  {
    v20 = v24;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v24, v12, v5);
    v21 = Rope._Node.header.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
    return v21 == 0;
  }
  result = ((uint64_t (*)(char *, uint64_t))v19)(v12, v8);
  __break(1u);
  return result;
}

uint64_t Rope.validate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  v9 = *(_QWORD *)&v8[*(int *)(a4 + 36)];
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
  if (v9 != a1)
    __break(1u);
  return result;
}

uint64_t Rope.endIndex.getter(uint64_t a1)
{
  return sub_2382E7E58(a1, (uint64_t (*)(void))Rope._endPath.getter);
}

uint64_t Rope.startIndex.getter(uint64_t a1)
{
  return sub_2382E7E58(a1, (uint64_t (*)(void))Rope._startPath.getter);
}

uint64_t sub_2382E7E58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + *(int *)(a1 + 36));
  v5 = a2();
  return Rope.Index.init(version:path:leaf:)(v4, v5, 0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t Rope.index(after:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2382E83BC(result, a2, a3, a4, (void (*)(_QWORD *, uint64_t))Rope.formIndex(after:));
  return result;
}

uint64_t Rope.update<A>(at:by:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[2];
  void (*v26)(char *);
  uint64_t v27;

  v7 = v6;
  v26 = a2;
  v27 = a5;
  v25[0] = a6;
  v25[1] = a3;
  v11 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  v12 = type metadata accessor for Rope._Node._ModifyState(0, v11, v10, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (_QWORD *)((char *)v25 - v15);
  v17 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v7, a4);
  Rope.validate(_:)(*(_QWORD *)a1, v20, v21, a4);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a4);
  v23 = type metadata accessor for Rope._Node(0, v11, v10, v22);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v7, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    Rope._Node._prepareModify(at:)(*(_QWORD *)(a1 + 8), v23, v16);
    v26((char *)v16 + *(int *)(v12 + 36));
    sub_2382E8AB4(v7, (_QWORD *)a1, v16, v11, v27, v10);
    return (*(uint64_t (**)(unint64_t *, uint64_t))(v13 + 8))(v16, v12);
  }
  return result;
}

uint64_t Rope._height.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = v4;
  v6 = type metadata accessor for Rope._Node(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = sub_23835B334();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, v5, v7);
  v11 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = Rope._Node.header.getter() >> 16;
    v8 = v11;
    v7 = v6;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

uint64_t Rope._endPath.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for Rope._Node(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = sub_23835B334();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v32 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v32 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return Rope._startPath.getter(a1, v15, v16, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v6);
    v22 = Rope._height.getter(a1, v19, v20, v21);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v33 = _RopePath.init(height:)(v22);
    v28 = Rope._height.getter(a1, v25, v26, v27);
    v29 = (unsigned __int16)Rope._Node.header.getter();
    v31 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, AssociatedConformanceWitness, v30);
    _RopePath.subscript.setter(v29, v28, v31);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
    return v33;
  }
}

uint64_t Rope.grease(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v5 = a1[1];
  v6 = a1[2];
  result = Rope.validate(_:)(*a1, a2, a3, a2);
  if (!v6)
  {
    result = Rope._unmanagedLeaf(at:)(v5, a2, v8, v9);
    a1[2] = result;
  }
  return result;
}

uint64_t Rope._startPath.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = Rope._height.getter(a1, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.init(height:)(v4);
}

uint64_t Rope.index(before:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2382E83BC(result, a2, a3, a4, (void (*)(_QWORD *, uint64_t))Rope.formIndex(before:));
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_2382E83BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t))
{
  _QWORD v5[3];

  v5[1] = a2;
  v5[2] = a3;
  a5(v5, a4);
}

uint64_t sub_2382E83F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;

  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_BYTE *)(a1 + 2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = _RopePath.subscript.getter(v10, v9, AssociatedTypeWitness, AssociatedConformanceWitness) + 1;
  v15 = type metadata accessor for Rope._Item(0, a3, a4, v14);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v15);
  result = Rope._UnsafeHandle.childCount.getter((unsigned __int16 *)a1);
  if (v13 >= result)
  {
    v20 = 0;
  }
  else
  {
    v18 = *(_BYTE *)(a1 + 2);
    v19 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
    result = _RopePath.subscript.setter(v13, v18, v19);
    v20 = 1;
  }
  *a5 = v20;
  return result;
}

uint64_t sub_2382E8524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;

  v5 = *(_BYTE *)(a1 + 2);
  v6 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = _RopePath.subscript.getter(v5, v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = result - 1;
  if (result < 1)
  {
    v14 = 0;
  }
  else
  {
    v12 = *(_BYTE *)(a1 + 2);
    v13 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
    result = _RopePath.subscript.setter(v11, v12, v13);
    v14 = 1;
  }
  *a3 = v14;
  return result;
}

uint64_t sub_2382E8610@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_2382E8524(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_2382E861C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a6;
  v11 = type metadata accessor for Rope._Item(0, a4, a5, a3);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v21 - v13;
  v15 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v11);
  v16 = Rope._UnsafeHandle.children.getter((unsigned __int16 *)a1, a2, a4, v11, a5, v15);
  LOBYTE(a1) = *(_BYTE *)(a1 + 2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = _RopePath.subscript.getter(a1, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16 + *(_QWORD *)(v12 + 72) * v19, v11);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v22, v14, a4);
}

uint64_t sub_2382E876C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2382E861C(a1, a2, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_2382E877C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_2382E83F0(a1, v2[4], v2[2], v2[3], a2);
}

void (*Rope.subscript.modify(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = v5;
  v11 = malloc(0x70uLL);
  *a1 = v11;
  v11[8] = v6;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = malloc(*(_QWORD *)(v12 + 64));
  v11[9] = v13;
  (*(void (**)(void))(v12 + 16))();
  Rope.validate(_:)(a2, v14, v15, a5);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v13, a5);
  v18 = Rope.root.modify((uint64_t)v11, a5, v16, v17);
  v19 = *(_QWORD *)(a5 + 16);
  v20 = *(_QWORD *)(a5 + 24);
  v11[10] = v18;
  v11[11] = v19;
  v11[12] = v20;
  v22 = type metadata accessor for Rope._Node(0, v19, v20, v21);
  v11[13] = Rope._Node.subscript.modify(v11 + 4, a3, v22);
  return sub_2382E886C;
}

void sub_2382E886C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void *, _QWORD);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v4 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v5 = *(void **)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(*(_QWORD *)a1 + 32, 0);
  v4(v1, 0);
  v8 = type metadata accessor for Rope(0, v3, v2, v7);
  ++*(_QWORD *)(v6 + *(int *)(v8 + 36));
  free(v5);
  free(v1);
}

uint64_t Rope.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = v5;
  v28 = a3;
  v29 = a1;
  v9 = *(_QWORD *)(a5 + 16);
  v10 = *(_QWORD *)(a5 + 24);
  v11 = type metadata accessor for Rope._Node._ModifyState(0, v9, v10, a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - v14;
  v16 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v6, a5);
  Rope.validate(_:)(a2, v19, v20, a5);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
  v22 = type metadata accessor for Rope._Node(0, v9, v10, v21);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v6, 1, v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    Rope._Node._prepareModify(at:)(v28, v22, v15);
    v24 = *(_QWORD *)(v9 - 8);
    v25 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 24))(&v15[*(int *)(v11 + 36)], v29, v9);
    sub_2382BECC0(v6, v15, v9, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v27 = type metadata accessor for Rope(0, v9, v10, v26);
    ++*(_QWORD *)(v6 + *(int *)(v27 + 36));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v9);
  }
  return result;
}

uint64_t sub_2382E8A98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2382E8E34(a1, a2, Rope.index(before:), a3);
}

uint64_t sub_2382E8AB4(uint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v21 - v13;
  v16 = type metadata accessor for Rope(0, a4, a6, v15);
  *a2 = ++*(_QWORD *)(a1 + *(int *)(v16 + 36));
  v18 = type metadata accessor for Rope._Node(0, a4, a6, v17);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(a1, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v20 = Rope._Node._finalizeModify(_:)((uint64_t)v14, a3, v18);
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    a2[2] = v20;
  }
  return result;
}

uint64_t sub_2382E8BD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = Rope.startIndex.getter(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_2382E8BFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = Rope.endIndex.getter(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

void (*sub_2382E8C24(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_2382E8C84(v6, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), a3);
  return sub_2382C9030;
}

void (*sub_2382E8C84(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v10 = *(_QWORD *)(a5 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  *a1 = v10;
  a1[1] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  a1[2] = v12;
  Rope.subscript.getter(a2, a3, a4, a5, (uint64_t)v12);
  return sub_2382CB15C;
}

void sub_2382E8D0C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 2;
}

uint64_t sub_2382E8D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>, a3);
  return sub_23835AC2C();
}

uint64_t sub_2382E8D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>, a4);
  return sub_23835AC20();
}

uint64_t sub_2382E8DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>, a3);
  return sub_23835AC44();
}

uint64_t sub_2382E8E28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2382E8E34(a1, a2, Rope.index(after:), a3);
}

uint64_t sub_2382E8E34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = a3(*a1, a1[1], a1[2], a2);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  return result;
}

uint64_t static Rope._maxHeight.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (result)
    return 56 / result;
  __break(1u);
  return result;
}

uint64_t static Rope._minimumCapacity.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v3 = 56 / result;
  if (56 / result < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v3)
  {
    v6 = 2;
    goto LABEL_15;
  }
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  result = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
  v5 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < 0)
    v5 = result + 2;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  while (--v3)
  {
    result = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
    v7 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    if (v7 < 0)
      v7 = result + 2;
    v8 = v7 >> 1;
    v9 = (unsigned __int128)(v6 * (__int128)v8) >> 64;
    v6 *= v8;
    if (v9 != v6 >> 63)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_15:
  result = v6 - 1;
  if (__OFSUB__(v6, 1))
LABEL_21:
    __break(1u);
  return result;
}

uint64_t static Rope._maximumCapacity.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = 56 / result;
  if (56 / result < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  result = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
  v5 = result;
  if (v3)
  {
    while (1)
    {
      v6 = v4(AssociatedTypeWitness, AssociatedConformanceWitness);
      result = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
        break;
      v5 *= v6;
      if (!--v3)
        return result;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t Rope.count<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t result;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v5 = v4;
  v24 = a3;
  v25 = a4;
  v23[1] = a1;
  v6 = type metadata accessor for Rope._Node(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - v8;
  v10 = sub_23835B334();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v23 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v23[0] = v5;
  v17((char *)v23 - v15, v5, v10);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v19 = v18(v16, 1, v6);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  v21 = 0;
  if (v19 == 1)
    return v21;
  v17(v14, v23[0], v10);
  if (v18(v14, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, v6);
    v21 = (*(uint64_t (**)(char *, uint64_t))(v25 + 24))(&v9[*(int *)(v6 + 36)], v24);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v21;
  }
  result = ((uint64_t (*)(char *, uint64_t))v20)(v14, v10);
  __break(1u);
  return result;
}

uint64_t Rope._Node.count<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(v4 + *(int *)(a2 + 36), a3, a4);
}

uint64_t Rope.distance<A>(from:to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v76 = a7;
  v82 = a6;
  v83 = (void (*)(char *, uint64_t))a3;
  v84 = a2;
  v85 = a5;
  v15 = *(_QWORD *)(a8 + 16);
  v14 = *(_QWORD *)(a8 + 24);
  v16 = type metadata accessor for Rope._Node(0, v15, v14, a4);
  v78 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v74 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v73 = (char *)&v68 - v19;
  v79 = v20;
  v21 = sub_23835B334();
  v77 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v72 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v71 = (char *)&v68 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v68 - v27;
  v29 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v68 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rope.validate(_:)(a1, v32, v33, a8);
  Rope.validate(_:)(a4, v34, v35, a8);
  v80 = (void (*)(char *, uint64_t))v15;
  v81 = a1;
  v36 = a1;
  v75 = (void (*)(char *, uint64_t))a4;
  v37 = v82;
  v38 = v15;
  v39 = v14;
  v40 = static Rope.Index.== infix(_:_:)(v36, v84, (uint64_t)v83, a4, v85, v82, v38, v14);
  v41 = 0;
  if ((v40 & 1) != 0)
    return v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v10, a8);
  v42 = v77;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v28, v31, v21);
  v44 = v78;
  v43 = v79;
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  v46 = v45(v28, 1, v79);
  v47 = v28;
  v48 = v21;
  v68 = *(void (**)(char *, uint64_t))(v42 + 8);
  v68(v47, v21);
  if (v46 == 1)
  {
    __break(1u);
  }
  else
  {
    v49 = v44;
    v50 = v42;
    v70 = a9;
    v51 = v83;
    if (v83)
    {
      if (v37)
      {
        v52 = static Rope._UnmanagedLeaf.== infix(_:_:)((uint64_t)v83, v37);
        if (v52)
        {
          MEMORY[0x24BDAC7A8](v52);
          v53 = (uint64_t)v80;
          v54 = v70;
          *(&v68 - 10) = v80;
          *(&v68 - 9) = (void (*)(char *, uint64_t))v54;
          v55 = v81;
          *(&v68 - 8) = (void (*)(char *, uint64_t))a10;
          *(&v68 - 7) = (void (*)(char *, uint64_t))v55;
          *(&v68 - 6) = (void (*)(char *, uint64_t))v84;
          *(&v68 - 5) = v51;
          v56 = v85;
          *(&v68 - 4) = v75;
          *(&v68 - 3) = (void (*)(char *, uint64_t))v56;
          v66 = v37;
          v67 = v76;
          Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_2382EBD74, (uint64_t)(&v68 - 12), v51, v53, MEMORY[0x24BEE1768]);
          return v86;
        }
      }
    }
    v69 = a10;
    v57 = (uint64_t)v75;
    v58 = static Rope.Index.< infix(_:_:)(v81, v84, (uint64_t)v51, (uint64_t)v75, v85, v37, (uint64_t)v80, v39);
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    if ((v58 & 1) != 0)
    {
      v39 = (uint64_t)v71;
      v59(v71, v10, v48);
      if (v45((char *)v39, 1, v43) != 1)
      {
        v60 = v73;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v73, v39, v43);
        v41 = Rope._Node.distance<A>(from:to:in:)(v81, v84, (uint64_t)v51, v57, v85, v37, v76, v43, v70, v69);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v60, v43);
        return v41;
      }
      goto LABEL_15;
    }
    v61 = v72;
    v59(v72, v10, v48);
    if (v45(v61, 1, v43) == 1)
    {
      v65 = (uint64_t)v61;
      goto LABEL_17;
    }
    v62 = v74;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v74, v61, v43);
    v63 = Rope._Node.distance<A>(from:to:in:)(v57, v85, v37, v81, v84, (uint64_t)v51, v76, v43, v70, v69);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v62, v43);
    v41 = -v63;
    if (!__OFSUB__(0, v63))
      return v41;
  }
  __break(1u);
LABEL_15:
  v65 = v39;
LABEL_17:
  result = ((uint64_t (*)(uint64_t, uint64_t))v68)(v65, v48);
  __break(1u);
  return result;
}

uint64_t sub_2382E974C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t a3@<X6>, uint64_t *a4@<X8>, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = *(_BYTE *)(a1 + 2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = swift_getAssociatedConformanceWitness();
  v12 = _RopePath.subscript.getter(v8, a2, AssociatedTypeWitness, v11);
  v13 = _RopePath.subscript.getter(v8, a3, AssociatedTypeWitness, v11);
  v15 = type metadata accessor for Rope._Item(0, a6, AssociatedConformanceWitness, v14);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v15);
  result = Rope._UnsafeHandle.distance<A>(from:to:in:)(v12, v13);
  *a4 = result;
  return result;
}

uint64_t Rope._Node.distance<A>(from:to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t result;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  Swift::Bool v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v60 = a4;
  v61 = a7;
  v58 = a3;
  v59 = a6;
  v64 = a2;
  v65 = a5;
  v57 = a1;
  v12 = *(_QWORD *)(a8 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v56 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v53 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v53 - v18;
  v20 = Rope._Node.header.getter() >> 16;
  v21 = *(_QWORD *)(a8 + 16);
  v22 = *(_QWORD *)(a8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = v22;
  v63 = v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = _RopePath.subscript.getter(v20, v64, AssociatedTypeWitness, AssociatedConformanceWitness);
  v26 = Rope._Node.header.getter();
  v27 = _RopePath.subscript.getter(BYTE2(v26), v65, AssociatedTypeWitness, AssociatedConformanceWitness);
  v28 = *(void (**)(char *, uint64_t *, uint64_t))(v12 + 16);
  v29 = v10;
  v28(v19, v10, a8);
  v30 = (unsigned __int16)Rope._Node.header.getter();
  v54 = v12;
  v31 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  result = v31(v19, a8);
  v55 = v25;
  if (v25 >= v30)
  {
    __break(1u);
    goto LABEL_12;
  }
  v28(v17, v29, a8);
  v33 = (unsigned __int16)Rope._Node.header.getter();
  result = v31(v17, a8);
  if (v27 > v33)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v27 == (unsigned __int16)Rope._Node.header.getter())
  {
    v34 = v56;
    v28(v56, v29, a8);
    v35 = Rope._Node.header.getter();
    v36 = Rope.Index._isEmpty(below:)(BYTE2(v35));
    result = v31(v34, a8);
    if (v36)
      return Rope._Node.distanceToEnd<A>(from:in:)(v57, v64, v58, v61, a8, a9, a10);
    goto LABEL_13;
  }
  v37 = v27;
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    v39 = *v29 + 16;
    v40 = *v29 + ((*(unsigned __int8 *)(v54 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a8);
    v41 = v40;
    v42 = v63;
    v43 = (unsigned __int16 *)nullsub_1(v39, v41, v63, a8, v62);
    v45 = v44;
    swift_unknownObjectRetain();
    sub_2382EA510(v43, v45, v55, v37, v57, v64, v58, v60, &v66, v65, v59, v61, v42, a9, a10);
  }
  else
  {
    v46 = *v29;
    v47 = *v29 + 16;
    v48 = v62;
    v49 = v63;
    v50 = type metadata accessor for Rope._Item(0, v63, v62, v38);
    v51 = *(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80);
    v52 = v46 + ((v51 + 19) & ~v51);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v50);
    nullsub_1(v47, v52, v49, v50, v48);
    swift_unknownObjectRetain();
    sub_2382EA43C(v55, v37, v49, &v66);
  }
  swift_unknownObjectRelease();
  return v66;
}

uint64_t Rope.offset<A>(of:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a6;
  v36 = a7;
  v33 = a3;
  v34 = a4;
  v32 = a2;
  v10 = type metadata accessor for Rope._Node(0, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v29 = (char *)&v29 - v12;
  v13 = sub_23835B334();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - v18;
  v30 = a1;
  Rope.validate(_:)(a1, v20, v21, a5);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v22(v19, v7, v13);
  v31 = v11;
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v11) = v23(v19, 1, v10);
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v19, v13);
  v25 = 0;
  if ((_DWORD)v11 == 1)
    return v25;
  v22(v17, v7, v13);
  if (v23(v17, 1, v10) != 1)
  {
    v26 = v31;
    v27 = v29;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v29, v17, v10);
    v25 = Rope._Node.distanceFromStart<A>(to:in:)(v30, v32, v33, v34, v10, v35, v36);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v10);
    return v25;
  }
  result = ((uint64_t (*)(char *, uint64_t))v24)(v17, v13);
  __break(1u);
  return result;
}

uint64_t Rope._Node.distanceFromStart<A>(to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t result;
  char *v26;
  uint64_t v27;
  Swift::Bool v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = v7;
  v48 = a4;
  v49 = a7;
  v46 = a3;
  v47 = a6;
  v44 = a1;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v43 - v14;
  v16 = Rope._Node.header.getter() >> 16;
  v17 = *(_QWORD *)(a5 + 16);
  v18 = *(_QWORD *)(a5 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = v18;
  v51 = v17;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v45 = a2;
  v21 = _RopePath.subscript.getter(v16, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v22(v15, v8, a5);
  v23 = (unsigned __int16)Rope._Node.header.getter();
  v24 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  result = v24(v15, a5);
  if (v21 > v23)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v21 == (unsigned __int16)Rope._Node.header.getter())
  {
    v26 = v43;
    v22(v43, v8, a5);
    v27 = Rope._Node.header.getter();
    v28 = Rope.Index._isEmpty(below:)(BYTE2(v27));
    result = v24(v26, a5);
    if (v28)
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 24))(&v8[*(int *)(a5 + 36)], v47);
    goto LABEL_11;
  }
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    v30 = *(_QWORD *)v8 + 16;
    v31 = *(_QWORD *)v8 + ((*(unsigned __int8 *)(v11 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a5);
    v32 = v51;
    v33 = (unsigned __int16 *)nullsub_1(v30, v31, v51, a5, v50);
    v35 = v34;
    swift_unknownObjectRetain();
    sub_2382EA210(v33, v35, v21, v48, v44, v45, v46, v32, &v52, v47, v49);
  }
  else
  {
    v36 = *(_QWORD *)v8;
    v37 = *(_QWORD *)v8 + 16;
    v39 = v50;
    v38 = v51;
    v40 = type metadata accessor for Rope._Item(0, v51, v50, v29);
    v41 = *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80);
    v42 = v36 + ((v41 + 19) & ~v41);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v40);
    nullsub_1(v37, v42, v38, v40, v39);
    swift_unknownObjectRetain();
    sub_2382EA140(v21, v38, &v52);
  }
  swift_unknownObjectRelease();
  return v52;
}

uint64_t sub_2382EA140@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Rope._Item(0, a2, AssociatedConformanceWitness, v7);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v8);
  result = Rope._UnsafeHandle.distance<A>(from:to:in:)(0, a1);
  *a3 = result;
  return result;
}

uint64_t sub_2382EA210@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v32 = a7;
  v29 = a4;
  v30 = a5;
  v25 = a9;
  v27 = a11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for Rope._Node(0, a8, AssociatedConformanceWitness, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v25 - v18;
  v24 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v16);
  v20 = v29;
  v26 = Rope._UnsafeHandle.distance<A>(from:to:in:)(0, a3);
  v21 = Rope._UnsafeHandle.children.getter(a1, a2, a8, v16, AssociatedConformanceWitness, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v21 + *(_QWORD *)(v17 + 72) * a3, v16);
  v22 = Rope._Node.distanceFromStart<A>(to:in:)(v30, v31, v32, v20, v16, a10, v27);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (__OFADD__(v26, v22))
    __break(1u);
  else
    *v25 = v26 + v22;
  return result;
}

uint64_t Rope._Node.distanceToEnd<A>(from:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t result;

  v8 = v7;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 24))(v8 + *(int *)(a5 + 36), a6, a7);
  v17 = Rope._Node.distanceFromStart<A>(to:in:)(a1, a2, a3, a4, a5, a6, a7);
  v18 = __OFSUB__(v16, v17);
  result = v16 - v17;
  if (v18)
    __break(1u);
  return result;
}

uint64_t sub_2382EA43C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Rope._Item(0, a3, AssociatedConformanceWitness, v9);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v10);
  result = Rope._UnsafeHandle.distance<A>(from:to:in:)(a1, a2);
  *a4 = result;
  return result;
}

uint64_t sub_2382EA510@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a8;
  v43 = a5;
  v44 = a6;
  v45 = a7;
  v39 = a9;
  v48 = a12;
  v40 = a10;
  v41 = a11;
  v46 = a14;
  v47 = a15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for Rope._Node(0, a13, AssociatedConformanceWitness, v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v21);
  v37[1] = a1;
  v37[2] = a2;
  v26 = Rope._UnsafeHandle.children.getter(a1, a2, a13, v21, AssociatedConformanceWitness, v25);
  v27 = *(_QWORD *)(v22 + 72);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v28(v24, v26 + v27 * a3, v21);
  v38 = a4;
  if (a3 == a4)
  {
    v29 = Rope._Node.distance<A>(from:to:in:)(v43, v44, v45, v42, v40, v41, v48, v21, v46, v47);
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
LABEL_6:
    *v39 = v29;
    return result;
  }
  v31 = v46;
  v45 = Rope._Node.distanceToEnd<A>(from:in:)(v43, v44, v45, v48, v21, v46, v47);
  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v24, v21);
  result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  v33 = v38;
  result = Rope._UnsafeHandle.distance<A>(from:to:in:)(result, v38);
  v34 = v45 + result;
  if (__OFADD__(v45, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v28(v24, v26 + v27 * v33, v21);
  v35 = Rope._Node.distanceFromStart<A>(to:in:)(v42, v40, v41, v48, v21, v31, v47);
  result = ((uint64_t (*)(char *, uint64_t))v32)(v24, v21);
  v36 = __OFADD__(v34, v35);
  v29 = v34 + v35;
  if (!v36)
    goto LABEL_6;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Rope.formIndex<A>(_:offsetBy:in:preferEnd:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  uint64_t result;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;

  v59 = a6;
  v60 = a7;
  v62 = a4;
  v63 = a3;
  v11 = *(_QWORD *)(a5 + 24);
  v53 = *(uint64_t (**)(char *, uint64_t))(a5 + 16);
  v54 = v11;
  v12 = type metadata accessor for Rope._Node(0, (uint64_t)v53, v11, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v51 - v16;
  v17 = sub_23835B334();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v55 = (uint64_t *)((char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v51 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v51 - v24;
  v58 = a1;
  Rope.validate(_:)(*a1, v26, v27, a5);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v61 = v7;
  v28(v25, v7, v17);
  v57 = v13;
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v30 = v29(v25, 1, v12);
  v51 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  result = v51(v25, v17);
  v32 = *a2;
  if (v30 == 1)
  {
    if (!v32)
      return result;
    __break(1u);
  }
  v33 = a2;
  if (v32 <= 0)
  {
    v44 = __OFSUB__(0, v32);
    v45 = -v32;
    v47 = v59;
    v46 = v60;
    if (v44)
    {
      __break(1u);
    }
    else
    {
      *v33 = v45;
      v28(v23, v61, v17);
      if (v29(v23, 1, v12) == 1)
      {
        v50 = (uint64_t *)v23;
        goto LABEL_20;
      }
      v48 = v57;
      v17 = (uint64_t)v52;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v52, v23, v12);
      v49 = Rope._Node.seekBackward<A>(from:by:in:preferEnd:)((uint64_t)v58, v33, v63, v62 & 1, v12, v47, v46);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v17, v12);
      if ((v49 & 1) != 0)
        return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v35 = v58;
  v34 = v59;
  v36 = v33;
  v37 = v60;
  if (!v58[2])
    goto LABEL_23;
  MEMORY[0x24BDAC7A8](result);
  v38 = (uint64_t)v53;
  *(&v51 - 8) = v53;
  *(&v51 - 7) = (uint64_t (*)(char *, uint64_t))v34;
  *(&v51 - 6) = (uint64_t (*)(char *, uint64_t))v37;
  *(&v51 - 5) = (uint64_t (*)(char *, uint64_t))v35;
  v39 = v63;
  *(&v51 - 4) = (uint64_t (*)(char *, uint64_t))v33;
  *(&v51 - 3) = (uint64_t (*)(char *, uint64_t))v39;
  *((_BYTE *)&v51 - 16) = v62 & 1;
  result = Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_2382EBDAC, (uint64_t)(&v51 - 10), v40, v38, MEMORY[0x24BEE1328]);
  if ((v64 & 1) == 0)
  {
LABEL_23:
    v33 = v55;
    v28((char *)v55, v61, v17);
    if (v29((char *)v33, 1, v12) == 1)
    {
LABEL_18:
      v50 = v33;
LABEL_20:
      result = v51((char *)v50, v17);
      __break(1u);
      return result;
    }
    v41 = v56;
    v17 = v57;
    (*(void (**)(char *, uint64_t *, uint64_t))(v57 + 32))(v56, v33, v12);
    v33 = (uint64_t *)Rope._Node.seekForward<A>(from:by:in:preferEnd:)((uint64_t)v35, (uint64_t)v36, v63, v62 & 1, v12, v34, v37);
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v41, v12);
    if ((v33 & 1) == 0)
    {
      if (!*v36)
      {
        result = Rope.endIndex.getter(a5);
        *v35 = result;
        v35[1] = v42;
        v35[2] = v43;
        return result;
      }
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;

  if (*a2 <= 0 && (a4 & 1) == 0)
    return 1;
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    v17 = *v7 + 16;
    v18 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80);
    v34 = a1;
    v36 = a3;
    v19 = *v7 + ((v18 + 19) & ~v18);
    v33 = a6;
    v20 = *(_QWORD *)(a5 + 16);
    v21 = *(_QWORD *)(a5 + 24);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a5);
    v22 = (unsigned __int16 *)nullsub_1(v17, v19, v20, a5, v21);
    v24 = v23;
    swift_unknownObjectRetain();
    sub_2382EB978(v22, v24, v34, (uint64_t)v7, a2, v36, a4 & 1, v20, (char *)&v38, v33, a7);
    swift_unknownObjectRelease();
    return v38;
  }
  else
  {
    v25 = *v7;
    v27 = *(_QWORD *)(a5 + 16);
    v26 = *(_QWORD *)(a5 + 24);
    v28 = type metadata accessor for Rope._Item(0, v27, v26, v16);
    v29 = *(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80);
    v35 = v25 + ((v29 + 19) & ~v29);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v28);
    v30 = nullsub_1(v25 + 16, v35, v27, v28, v26);
    v32 = v31;
    swift_unknownObjectRetain();
    sub_2382EB894(v30, v32, a1, (uint64_t)a2, a3, a4 & 1, v27, a6, &v37, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:));
    swift_unknownObjectRelease();
    return v37;
  }
}

uint64_t Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, uint64_t *a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v52 = a4;
  v51 = a3;
  v53 = a11;
  v54 = a9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v42 - v20;
  v45 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = AssociatedConformanceWitness;
  v26 = v25;
  v49 = Rope._UnsafeHandle.children.getter(a5, a6, a7, a8, v24, a10);
  v28 = v27;
  v29 = *a1;
  v30 = swift_getAssociatedConformanceWitness();
  v31 = _RopePath.subscript.getter(0, v29, v26, v30);
  v32 = 0;
  v55 = v31;
  if (v31 < v28)
  {
    v33 = v28;
    v47 = v26;
    v48 = a10;
    v43 = a1;
    v44 = a7;
    v46 = *(void (**)(uint64_t, uint64_t))(a10 + 24);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 24);
    v35 = *(_QWORD *)(v45 + 72);
    v36 = v45;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    do
    {
      v38 = v33;
      v37(v23, v49 + v35 * v31, a8);
      v46(a8, v48);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, a8);
      v39 = v34(v21, v54, v53);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v47);
      v40 = *a2;
      if ((v52 & 1) != 0)
      {
        if (v40 <= v39)
          goto LABEL_7;
      }
      else if (v40 < v39)
      {
LABEL_7:
        v32 = 1;
        goto LABEL_9;
      }
      *a2 = v40 - v39;
      v31 = v55 + 1;
      v55 = v31;
      v33 = v38;
    }
    while (v31 < v38);
    v32 = 0;
LABEL_9:
    a1 = v43;
  }
  sub_2382EB158((uint64_t)a1, &v55);
  return v32;
}

uint64_t Rope._Node.seekForward<A>(from:by:in:preferEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  unsigned __int8 v39;
  unsigned __int8 v40;

  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    v14 = *v7;
    v35 = (uint64_t *)a2;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80);
    v16 = a4;
    v17 = *v7 + ((v15 + 19) & ~v15);
    v18 = *(_QWORD *)(a5 + 16);
    v19 = *(_QWORD *)(a5 + 24);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a5);
    v20 = (unsigned __int16 *)nullsub_1(v14 + 16, v17, v18, a5, v19);
    v22 = v21;
    swift_unknownObjectRetain();
    sub_2382EB4C4(v20, v22, a1, (uint64_t)v7, v35, a3, v16 & 1, v18, (char *)&v40, a6, a7);
    swift_unknownObjectRelease();
    return v40;
  }
  else
  {
    v24 = *v7;
    v34 = *v7 + 16;
    v26 = *(_QWORD *)(a5 + 16);
    v25 = *(_QWORD *)(a5 + 24);
    v27 = type metadata accessor for Rope._Item(0, v26, v25, v13);
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80);
    v36 = a4;
    v29 = v24 + ((v28 + 19) & ~v28);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v27);
    v30 = nullsub_1(v34, v29, v26, v27, v25);
    v32 = v31;
    swift_unknownObjectRetain();
    sub_2382EB894(v30, v32, a1, a2, a3, v36 & 1, v26, a6, &v39, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:));
    swift_unknownObjectRelease();
    v23 = v39;
    if (v39 == 1)
      *(_QWORD *)(a1 + 16) = Rope._Node.asUnmanagedLeaf.getter();
  }
  return v23;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Rope.index<A>(_:offsetBy:in:preferEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10[3];

  v10[1] = a2;
  v10[2] = a3;
  v9 = a4;
  Rope.formIndex<A>(_:offsetBy:in:preferEnd:)(v10, &v9, a5, a6, a7, a8, a9);
}

uint64_t sub_2382EB158(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  return _RopePath.subscript.setter(v2, 0, v6);
}

uint64_t Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, uint64_t *a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v61 = a6;
  v60 = a4;
  v59 = a3;
  v16 = a10;
  v58 = a9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v55 = (char *)&v46 - v20;
  v21 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v54 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = AssociatedConformanceWitness;
  v24 = a1;
  v25 = Rope._UnsafeHandle.children.getter(a5, v61, a7, a8, v23, a10);
  v26 = *a1;
  v56 = a8;
  v27 = swift_getAssociatedConformanceWitness();
  v61 = AssociatedTypeWitness;
  v28 = _RopePath.subscript.getter(0, v26, AssociatedTypeWitness, v27);
  if (v28 - 1 >= 0)
  {
    v29 = v28;
    v47 = v27;
    v48 = v24;
    v52 = *(void (**)(uint64_t, uint64_t))(a10 + 24);
    v53 = a11;
    v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a11 + 24);
    v31 = *(_QWORD *)(v21 + 72);
    v50 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    v51 = v30;
    v32 = v25 + v31 * (v28 - 1);
    v49 = -v31;
    v33 = v21;
    v35 = v55;
    v34 = v56;
    do
    {
      v37 = v54;
      v50(v54, v32, v34);
      v38 = v16;
      v52(v34, v16);
      v39 = v33;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v37, v34);
      v40 = v51(v35, v58, v53);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v61);
      v42 = a2;
      v43 = *a2;
      if ((v60 & 1) != 0)
      {
        if (v43 < v40)
        {
LABEL_7:
          v44 = type metadata accessor for _RopePath(0, v61, v47, v41);
          _RopePath.subscript.setter(v29 - 1, 0, v44);
          *v42 = v40 - v43;
          return 1;
        }
      }
      else if (v40 >= v43)
      {
        goto LABEL_7;
      }
      v36 = v43 - v40;
      a2 = v42;
      *v42 = v36;
      --v29;
      v32 += v49;
      v16 = v38;
      v33 = v39;
    }
    while (v29 > 0);
  }
  return 0;
}

uint64_t sub_2382EB4C4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned __int8 v54;
  uint64_t v55;
  Swift::UInt8 v56;
  uint64_t v57;
  Swift::UInt8 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;

  v78 = a7;
  v79 = a6;
  v73 = a5;
  v74 = a2;
  v70 = a1;
  v67 = a9;
  v76 = a10;
  v77 = a11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)&v62 - v16;
  v19 = type metadata accessor for Rope._Node(0, a8, AssociatedConformanceWitness, v18);
  v20 = *(_QWORD **)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v68 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v62 - v23;
  v25 = Rope._Node.header.getter() >> 16;
  v72 = a3;
  v26 = a3 + 8;
  v27 = *(_QWORD *)(a3 + 8);
  v65 = v26;
  v69 = AssociatedConformanceWitness;
  v28 = v20;
  v71 = a8;
  v29 = swift_getAssociatedConformanceWitness();
  v30 = _RopePath.subscript.getter(v25, v27, AssociatedTypeWitness, v29);
  v31 = (void (*)(char *, uint64_t, uint64_t))v28[2];
  v31(v24, a4, v19);
  v32 = (unsigned __int16)Rope._Node.header.getter();
  v33 = (uint64_t (*)(char *, uint64_t))v28[1];
  result = v33(v24, v19);
  if (v30 >= v32)
  {
    __break(1u);
    goto LABEL_17;
  }
  v64 = v29;
  v35 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v19);
  v36 = Rope._UnsafeHandle.children.getter(v70, v74, v71, v19, v69, v35);
  v38 = v37;
  v39 = v28[9];
  v74 = v30;
  v66 = v36;
  v40 = v36 + v39 * v30;
  v41 = v68;
  v31(v68, v40, v19);
  v42 = v77;
  v43 = Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v72, v73, v79, v78 & 1, v19, v76, v77);
  result = v33(v41, v19);
  if ((v43 & 1) != 0)
  {
    v44 = 1;
    goto LABEL_14;
  }
  v63 = v33;
  v45 = v74 + 1;
  if (v74 + 1 >= v38)
  {
LABEL_13:
    v44 = 0;
LABEL_14:
    v61 = v67;
LABEL_15:
    *v61 = v44;
    return result;
  }
  v74 = v38;
  v62 = v31;
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 24);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v48 = v66 + v39 * v45;
  v49 = v73;
  v47(v17, v48 + *(int *)(v19 + 36), AssociatedTypeWitness);
  while (1)
  {
    v50 = v46(v17, v76, v77);
    result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v17, AssociatedTypeWitness);
    v52 = *v49;
    if ((v78 & 1) != 0)
      break;
    if (v52 < v50)
      goto LABEL_11;
LABEL_7:
    *v49 = v52 - v50;
    ++v45;
    v48 += v39;
    if (v74 == v45)
      goto LABEL_13;
    v47(v17, v48 + *(int *)(v19 + 36), AssociatedTypeWitness);
  }
  if (v52 > v50)
    goto LABEL_7;
LABEL_11:
  v53 = v70;
  v54 = *((_BYTE *)v70 + 2);
  v55 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, v64, v51);
  _RopePath.subscript.setter(v45, v54, v55);
  v56 = *((_BYTE *)v53 + 2);
  type metadata accessor for Rope.Index(0, v71, v69, v57);
  v58 = v56;
  v59 = v72;
  Rope.Index._clear(below:)(v58);
  v60 = v68;
  v62(v68, v48, v19);
  LOBYTE(v59) = Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v59, v49, v79, v78 & 1, v19, v76, v77);
  result = v63(v60, v19);
  v61 = v67;
  if ((v59 & 1) != 0)
  {
    v44 = 1;
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_2382EB894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v17 = a3 + 8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = type metadata accessor for Rope._Item(0, a7, AssociatedConformanceWitness, v19);
  v21 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v20);
  result = a11(v17, a4, a5, a6, a1, a2, a7, v20, a8, v21, a10);
  *a9 = result & 1;
  return result;
}

void sub_2382EB978(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  unsigned __int16 *v53;
  unsigned __int8 v54;
  uint64_t v55;
  Swift::UInt8 v56;
  uint64_t v57;
  Swift::UInt8 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;

  v78 = a7;
  v79 = a6;
  v70 = a5;
  v71 = a9;
  v72 = a2;
  v73 = a1;
  v80 = a11;
  v77 = a10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)&v63 - v16;
  v19 = type metadata accessor for Rope._Node(0, a8, AssociatedConformanceWitness, v18);
  v20 = *(_QWORD **)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v68 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v63 - v23;
  v25 = Rope._Node.header.getter() >> 16;
  v69 = a3;
  v26 = a3 + 8;
  v27 = *(_QWORD *)(a3 + 8);
  v66 = v26;
  v28 = swift_getAssociatedConformanceWitness();
  v75 = AssociatedTypeWitness;
  v65 = v28;
  v29 = _RopePath.subscript.getter(v25, v27, AssociatedTypeWitness, v28);
  v30 = (void (*)(char *, uint64_t, uint64_t))v20[2];
  v74 = a4;
  v67 = v30;
  v30(v24, a4, v19);
  v31 = (unsigned __int16)Rope._Node.header.getter();
  v32 = (void (*)(char *, uint64_t))v20[1];
  v32(v24, v19);
  if (v29 > v31)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v33 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v19);
  v34 = v72;
  v72 = AssociatedConformanceWitness;
  v35 = Rope._UnsafeHandle.children.getter(v73, v34, a8, v19, AssociatedConformanceWitness, v33);
  if (v29 < (unsigned __int16)Rope._Node.header.getter())
  {
    v36 = v68;
    v67(v68, v35 + v20[9] * v29, v19);
    v37 = Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(v69, v70, v79, v78 & 1, v19, v77, v80);
    v32(v36, v19);
    if ((v37 & 1) != 0)
      goto LABEL_16;
  }
  v74 = v19;
  v38 = v29 - 1;
  if (__OFSUB__(v29, 1))
    goto LABEL_20;
  if (v38 < 0)
  {
LABEL_13:
    v52 = 0;
    goto LABEL_17;
  }
  v63 = v32;
  v64 = a8;
  v39 = v70;
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 24);
  v41 = v20[9];
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
  v43 = v35 + v41 * v38;
  v44 = -v41;
  while (1)
  {
    v45 = v75;
    v42(v17, v43 + *(int *)(v74 + 36), v75);
    v46 = v40(v17, v77, v80);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v45);
    v48 = v39;
    v49 = *v39;
    if ((v78 & 1) == 0)
      break;
    if (v49 < v46)
      goto LABEL_14;
LABEL_11:
    v50 = __OFSUB__(v49, v46);
    v51 = v49 - v46;
    if (v50)
    {
      __break(1u);
      goto LABEL_19;
    }
    *v39 = v51;
    --v29;
    v43 += v44;
    if (v29 <= 0)
      goto LABEL_13;
  }
  if (v46 < v49)
    goto LABEL_11;
LABEL_14:
  v53 = v73;
  v54 = *((_BYTE *)v73 + 2);
  v55 = type metadata accessor for _RopePath(0, v75, v65, v47);
  _RopePath.subscript.setter(v29 - 1, v54, v55);
  v56 = *((_BYTE *)v53 + 2);
  type metadata accessor for Rope.Index(0, v64, v72, v57);
  v58 = v56;
  v59 = v69;
  Rope.Index._clear(below:)(v58);
  if (__OFSUB__(v46, *v48))
    goto LABEL_21;
  *v48 = v46 - *v48;
  v60 = v68;
  v61 = v74;
  v67(v68, v43, v74);
  v62 = Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v59, (uint64_t)v48, v79, v78 & 1, v61, v77, v80);
  v63(v60, v61);
  if ((v62 & 1) == 0)
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_16:
  v52 = 1;
LABEL_17:
  *v71 = v52;
}

uint64_t sub_2382EBD74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2382E974C(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 72), a2, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382EBDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return sub_2382EB894(a1, a2, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(unsigned __int8 *)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3, *(_QWORD *)(v3 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:));
}

void sub_2382EBDE4()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382EBDF4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>);
  return MEMORY[0x23B831670](MEMORY[0x24BEE0658], a1, &v3);
}

uint64_t sub_2382EBE3C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>);
  return MEMORY[0x23B831670](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2382EBE84()
{
  JUMPOUT(0x23B831670);
}

void sub_2382EBE94()
{
  JUMPOUT(0x23B831670);
}

uint64_t OrderedSet.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;

  v10 = OrderedSet.init()();
  type metadata accessor for OrderedSet(0, a3, a4, v8);
  OrderedSet._reserveCapacity(_:persistent:)(a1, a2);
  return v10;
}

Swift::Void __swiftcall OrderedSet._reserveCapacity(_:persistent:)(Swift::Int _, Swift::Bool persistent)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;

  if (_ < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v3 = v2;
  sub_23835B6E8();
  sub_23835B67C();
  v6 = *v2;
  v7 = OrderedSet._scale.getter(*v2);
  v8 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(_);
  v9 = v8;
  if (!persistent)
    v9 = OrderedSet._reservedScale.getter(v6);
  if (v7 < v8)
  {
    v10 = v8;
LABEL_12:
    OrderedSet._regenerateHashTable(scale:reservedScale:)(v10, v9);
    return;
  }
  v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  v10 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v11);
  if (v9 <= v8)
    v12 = v8;
  else
    v12 = v9;
  if (v10 <= v12)
    v10 = v12;
  if (v10 < v7)
    goto LABEL_12;
  OrderedSet._ensureUnique()();
  v13 = *v3;
  if (OrderedSet._reservedScale.getter(*v3) != v9)
  {
    if (v13)
    {
      swift_beginAccess();
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFFFFC0 | v9 & 0x3F;
      return;
    }
LABEL_18:
    __break(1u);
  }
}

Swift::Void __swiftcall OrderedSet.reserveCapacity(_:)(Swift::Int a1)
{
  OrderedSet._reserveCapacity(_:persistent:)(a1, 0);
}

Swift::Void __swiftcall Rope._dump(heightLimit:firstPrefix:restPrefix:)(Swift::Int heightLimit, Swift::String firstPrefix, Swift::String restPrefix)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::String v24;
  Swift::String v25;

  v25 = restPrefix;
  v24 = firstPrefix;
  v23 = heightLimit;
  v5 = type metadata accessor for Rope._Node(0, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), restPrefix._countAndFlagsBits);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - v7;
  v9 = sub_23835B334();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22 = v4;
  v16((char *)&v22 - v14, v4, v9);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v18 = v17(v15, 1, v5);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  if (v18 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
    v20 = swift_allocObject();
    v21 = MEMORY[0x24BEE0D00];
    *(_OWORD *)(v20 + 16) = xmmword_23835CD60;
    *(_QWORD *)(v20 + 56) = v21;
    *(_QWORD *)(v20 + 32) = 0x3E7974706D453CLL;
    *(_QWORD *)(v20 + 40) = 0xE700000000000000;
    sub_23835B9DC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16(v13, v22, v9);
    if (v17(v13, 1, v5) == 1)
    {
      v19(v13, v9);
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v13, v5);
      Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(v23, v24, v25);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

Swift::Void __swiftcall Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(Swift::Int heightLimit, Swift::String firstPrefix, Swift::String restPrefix)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v6 = v3;
  object = restPrefix._object;
  countAndFlagsBits = restPrefix._countAndFlagsBits;
  v9 = firstPrefix._object;
  v10 = firstPrefix._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23835CD60;
  swift_bridgeObjectRetain();
  Rope._Node.description.getter();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = v9;
  sub_23835B9DC();
  swift_bridgeObjectRelease();
  if (heightLimit >= 1)
  {
    v13 = Rope._Node.header.getter();
    v15 = *v5;
    if ((v13 & 0xFF0000) != 0)
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
      v17 = v15 + ((v16 + 19) & ~v16);
      v18 = *(_QWORD *)(v6 + 16);
      v19 = *(_QWORD *)(v6 + 24);
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v6);
      v20 = (unsigned __int16 *)nullsub_1(v15 + 16, v17, v18, v6, v19);
      v22 = v21;
      swift_unknownObjectRetain();
      sub_2382ECAD4(v20, v22, heightLimit, countAndFlagsBits, object, v18, v19);
    }
    else
    {
      v24 = *(_QWORD *)(v6 + 16);
      v23 = *(_QWORD *)(v6 + 24);
      v25 = type metadata accessor for Rope._Item(0, v24, v23, v14);
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80);
      v27 = v15 + ((v26 + 19) & ~v26);
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v25);
      v28 = (unsigned __int16 *)nullsub_1(v15 + 16, v27, v24, v25, v23);
      v30 = v29;
      swift_unknownObjectRetain();
      sub_2382ECCB0(v28, v30, countAndFlagsBits, (uint64_t)object, v24, v23);
    }
    swift_unknownObjectRelease();
  }
}

uint64_t Rope._UnmanagedLeaf.description.getter()
{
  sub_23826C710();
  sub_23835AF50();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t sub_2382EC530()
{
  return Rope._UnmanagedLeaf.description.getter();
}

uint64_t Rope._nodeCount.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = v4;
  v6 = type metadata accessor for Rope._Node(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = sub_23835B334();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, v5, v7);
  v11 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = Rope._Node.nodeCount.getter(v6);
    v8 = v11;
    v7 = v6;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

uint64_t Rope._Node.nodeCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((Rope._Node.header.getter() & 0xFF0000) == 0)
    return 1;
  v3 = *v1;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v3 + ((v4 + 19) & ~v4);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a1);
  v8 = (unsigned __int16 *)nullsub_1(v3 + 16, v5, v6, a1, v7);
  v10 = v9;
  swift_unknownObjectRetain();
  sub_2382EC6DC(v8, v10, v6, v7);
  swift_unknownObjectRelease();
  return v12;
}

uint64_t sub_2382EC6DC(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = type metadata accessor for Rope._Node(0, a3, a4, a4);
  v9 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v8);
  Rope._UnsafeHandle.children.getter(a1, a2, a3, v8, a4, v9);
  v10 = sub_23835AD7C();
  MEMORY[0x23B831670](MEMORY[0x24BEE09D8], v10);
  return sub_23835B004();
}

uint64_t sub_2382EC7C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for Rope._Node(0, a3, a4, a4);
  result = Rope._Node.nodeCount.getter(v5);
  if (__OFADD__(*a1, result))
    __break(1u);
  else
    *a1 += result;
  return result;
}

uint64_t Rope._Node.description.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  sub_23835B5B0();
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    Rope._Node.header.getter();
    sub_23835B880();
    sub_23835AE90();
    swift_bridgeObjectRelease();
  }
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23826C710();
  sub_23835AF50();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23835B8F8();
  sub_23835AE90();
  Rope._Node.header.getter();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return 0;
}

uint64_t sub_2382ECAD4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v28;
  Swift::Int v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;

  v14 = type metadata accessor for Rope._Node(0, a6, a7, a4);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v29 - v16;
  v18 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v14);
  result = Rope._UnsafeHandle.children.getter(a1, a2, a6, v14, a7, v18);
  if (v20 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!v20)
    return result;
  v21 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v22 = result;
  v23 = 0;
  v24 = *(_QWORD *)(v15 + 72);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v31 = v24;
  v29 = v21;
  v32 = v20;
  do
  {
    v33 = v23 + 1;
    v30(v17, v22, v14);
    v35._countAndFlagsBits = a4;
    v35._object = a5;
    v34 = v23;
    swift_bridgeObjectRetain();
    sub_23835B880();
    sub_23835AE90();
    swift_bridgeObjectRelease();
    sub_23835AE90();
    v25 = v15;
    countAndFlagsBits = v35._countAndFlagsBits;
    object = v35._object;
    v35._countAndFlagsBits = a4;
    v35._object = a5;
    swift_bridgeObjectRetain();
    sub_23835AE90();
    v28._countAndFlagsBits = countAndFlagsBits;
    v28._object = object;
    Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(v29, v28, v35);
    v15 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v17, v14);
    v22 += v31;
    v23 = v33;
  }
  while (v32 != v33);
  return result;
}

uint64_t sub_2382ECCB0(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v10 = type metadata accessor for Rope._Item(0, a5, a6, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - v12;
  v14 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v10);
  result = Rope._UnsafeHandle.children.getter(a1, a2, a5, v10, a6, v14);
  if (v16 < 0)
  {
    __break(1u);
  }
  else if (v16)
  {
    v17 = result;
    v18 = 0;
    v22 = xmmword_23835CD60;
    v23 = v16;
    do
    {
      v24 = v18 + 1;
      __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = v22;
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_23835AE90();
      v25 = v18;
      sub_23835B880();
      sub_23835AE90();
      swift_bridgeObjectRelease();
      sub_23835AE90();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v17 + *(_QWORD *)(v11 + 72) * v18, v10);
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v10);
      sub_23835B904();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v20 = v26;
      v21 = v27;
      *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v19 + 32) = v20;
      *(_QWORD *)(v19 + 40) = v21;
      sub_23835B9DC();
      result = swift_bridgeObjectRelease();
      v18 = v24;
    }
    while (v23 != v24);
  }
  return result;
}

uint64_t sub_2382ECEC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382EC7C0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

double BigString.init(stringLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  sub_238264D30(a1, a2, v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

double sub_2382ECF1C@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  sub_238264D30(*a1, a1[1], v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

unint64_t sub_2382ECF64()
{
  unint64_t result;

  result = qword_2568F1898;
  if (!qword_2568F1898)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, (unint64_t *)&qword_2568F1898);
  }
  return result;
}

unint64_t sub_2382ECFAC()
{
  unint64_t result;

  result = qword_2568F18A0[0];
  if (!qword_2568F18A0[0])
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, qword_2568F18A0);
  }
  return result;
}

uint64_t OrderedSet._UnstableInternals.base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedSet._UnstableInternals.base.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet._UnstableInternals.base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedSet.__unstable.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

void (*OrderedSet.__unstable.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *v2;
  v7 = v2[1];
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v5[2] = v2;
  v5[3] = v8;
  v5[4] = v9;
  *v5 = v6;
  v5[1] = v7;
  *v2 = OrderedSet.init()();
  v2[1] = v10;
  return sub_2382DBD70;
}

uint64_t OrderedSet.__unstable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  swift_retain();
  swift_retain();
  v5 = OrderedSet.init()();
  v7 = v6;
  swift_release();
  swift_release();
  *v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  sub_2382DBDB0(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for OrderedSet._UnstableInternals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet._UnstableInternals);
}

uint64_t sub_2382ED1C8(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v2 = (uint64_t)v1;
  v3 = *v1;
  if (*(_BYTE *)(v3 + 18))
  {
    v5 = v3 + 40 * ((a1 >> ((4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C)) & 0xF);
    v6 = *(_OWORD *)(v5 + 24);
    v7 = *(_OWORD *)(v5 + 40);
    v10 = *(_QWORD *)(v5 + 56);
    v9[0] = v6;
    v9[1] = v7;
    sub_238263DDC(v2);
    sub_238263DDC((uint64_t)v9);
    v3 = sub_2382ED1C8(a1);
    sub_23825B804((uint64_t)v9);
    sub_23825B804(v2);
  }
  return v3;
}

Swift::Void __swiftcall BigString.write(_:)(Swift::String a1)
{
  swift_bridgeObjectRetain();
  BigString.append(contentsOf:)();
}

unint64_t sub_2382ED2A8()
{
  swift_bridgeObjectRetain();
  return BigString.append(contentsOf:)();
}

uint64_t BigString.write<A>(to:)()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[48];
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;

  v1 = (uint64_t)v0;
  v2 = v0[1];
  v58 = *v0;
  *(_OWORD *)v68 = v58;
  *(_OWORD *)&v68[16] = v2;
  v3 = v0[1];
  *(_OWORD *)&v68[32] = v0[2];
  v54 = v0[2];
  v56 = v3;
  v4 = v58;
  v60 = *(_QWORD *)&v68[40];
  if ((_QWORD)v58)
  {
    v5 = *(unsigned __int8 *)(v58 + 18);
    swift_unknownObjectRetain_n();
  }
  else
  {
    v5 = 0;
  }
  swift_unknownObjectRetain();
  if (sub_238269C7C() <= v5)
  {
    sub_23825B804((uint64_t)v0);
    sub_23825B804((uint64_t)v0);
    v6 = 0;
  }
  else
  {
    v75 = v58;
    v76 = *(_OWORD *)&v68[8];
    v77 = *(_OWORD *)&v68[24];
    swift_unknownObjectRetain();
    v6 = sub_2382ED1C8(v5);
    sub_23825B804(v1);
    sub_23825B804(v1);
    sub_23825B804(v1);
  }
  v62 = v58;
  v63 = v56;
  v64 = v54;
  v65 = *(_QWORD *)&v68[40];
  v66 = v5;
  v67 = v6;
  if (!v6)
    return sub_23825B804(v1);
  v59 = v58 + 24;
  while (v65 == v60)
  {
    v7 = v66;
    if (!v4)
      goto LABEL_55;
    v8 = *(unsigned __int8 *)(v4 + 18);
    sub_238263DDC(v1);
    sub_238263DDC(v1);
    sub_238263DDC(v1);
    sub_238263DDC(v1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    v9 = *(unsigned __int16 *)(v4 + 16);
    v10 = *(_BYTE *)(v4 + 18);
    sub_23825B804(v1);
    result = sub_23825B804(v1);
    if (v7 >= (((-15 << ((4 * v10 + 8) & 0x3C)) - 1) & v8 | (unint64_t)(v9 << ((4 * v10 + 8) & 0x3C))))
      goto LABEL_56;
    v12 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    v13 = ((v7 >> v12) & 0xF) + 1;
    if (v13 < *(unsigned __int16 *)(v6 + 16))
    {
      v66 = (v13 << v12) | ((-15 << v12) - 1) & v7;
LABEL_10:
      sub_23825B804(v1);
      goto LABEL_11;
    }
    v14 = (4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C;
    v15 = (v7 >> v14) & 0xF;
    if (*(_BYTE *)(v4 + 18))
    {
      v16 = *(_QWORD *)(v59 + 40 * ((v7 >> v14) & 0xF));
      v17 = (4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C;
      v18 = (v7 >> v17) & 0xF;
      if (*(_BYTE *)(v16 + 18))
      {
        v19 = v16 + 24;
        v20 = *(_QWORD *)(v16 + 24 + 40 * ((v7 >> v17) & 0xF));
        v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
        v22 = (v7 >> v21) & 0xF;
        if (!*(_BYTE *)(v20 + 18))
        {
          if (v22 + 1 < (unint64_t)*(unsigned __int16 *)(v20 + 16))
          {
            v66 = ((v22 + 1) << v21) | ((-15 << v21) - 1) & v7;
            v67 = v20;
            v6 = v20;
            sub_238263DDC(v1);
            swift_unknownObjectRetain();
            goto LABEL_38;
          }
          v55 = v16 + 24;
          v53 = (4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C;
          sub_238263DDC(v1);
          swift_unknownObjectRetain();
          goto LABEL_40;
        }
        v57 = *(_QWORD *)(v59 + 40 * ((v7 >> v14) & 0xF));
        v6 = *(_QWORD *)(v20 + 24 + 40 * ((v7 >> v21) & 0xF));
        v23 = *(unsigned __int8 *)(v6 + 18);
        v24 = (4 * v23 + 8) & 0x3C;
        v61 = (v7 >> v24) & 0xF;
        if (v23)
        {
          v49 = v21;
          v50 = v20 + 24;
          v55 = v19;
          v53 = v17;
          v52 = (v7 >> v21) & 0xF;
          v25 = v20;
          sub_238263DDC(v1);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          v26 = sub_2382EDABC(v6 + 24, (uint64_t *)&v61, (uint64_t)&v65, v6, v23);
          swift_unknownObjectRelease();
          if ((v26 & 1) != 0)
          {
            v6 = v67;
            goto LABEL_32;
          }
LABEL_35:
          v29 = v52 + 1;
          if (v52 + 1 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
          {
            v30 = (__int128 *)(v50 + 40 * v29);
            v32 = *v30;
            v31 = v30[1];
            v74 = *((_QWORD *)v30 + 4);
            v73[0] = v32;
            v73[1] = v31;
            v33 = *(unsigned __int8 *)(v32 + 18) + 1;
            if (((v33 >> 8) & 1) != 0)
              goto LABEL_54;
            v66 = ((-256 << (4 * (v33 & 0xF))) | 0xFF) & (v66 & ((-15 << v49) - 1) | (v29 << v49));
            v34 = v66;
            swift_unknownObjectRetain();
            v6 = sub_2382ED1C8(v34);
            sub_23825B804((uint64_t)v73);
            v67 = v6;
            swift_unknownObjectRelease();
            goto LABEL_38;
          }
          swift_unknownObjectRelease();
          v16 = v57;
LABEL_40:
          v35 = v18 + 1;
          if (v18 + 1 < (unint64_t)*(unsigned __int16 *)(v16 + 16))
          {
            v36 = (__int128 *)(v55 + 40 * v35);
            v38 = *v36;
            v37 = v36[1];
            v72 = *((_QWORD *)v36 + 4);
            v71[0] = v38;
            v71[1] = v37;
            v39 = *(unsigned __int8 *)(v38 + 18) + 1;
            if (((v39 >> 8) & 1) != 0)
              goto LABEL_53;
            v66 = ((-256 << (4 * (v39 & 0xF))) | 0xFF) & (v66 & ((-15 << v53) - 1) | (v35 << v53));
            v40 = v66;
            swift_unknownObjectRetain();
            v6 = sub_2382ED1C8(v40);
            sub_23825B804((uint64_t)v71);
            v67 = v6;
            swift_unknownObjectRelease();
            goto LABEL_47;
          }
          swift_unknownObjectRelease();
LABEL_44:
          v41 = v15 + 1;
          if (v15 + 1 >= (unint64_t)*(unsigned __int16 *)(v4 + 16))
          {
            sub_23825B804(v1);
            v27 = *(unsigned __int8 *)(v4 + 18);
            goto LABEL_49;
          }
          v42 = (__int128 *)(v59 + 40 * v41);
          v44 = *v42;
          v43 = v42[1];
          v70 = *((_QWORD *)v42 + 4);
          v69[0] = v44;
          v69[1] = v43;
          v45 = *(unsigned __int8 *)(v44 + 18) + 1;
          if (((v45 >> 8) & 1) != 0)
            goto LABEL_52;
          v66 = ((-256 << (4 * (v45 & 0xF))) | 0xFF) & (v66 & ((-15 << v14) - 1) | (v41 << v14));
          v46 = v66;
          swift_unknownObjectRetain();
          v6 = sub_2382ED1C8(v46);
          sub_23825B804((uint64_t)v69);
          v67 = v6;
          goto LABEL_47;
        }
        v51 = v20;
        v28 = ((v7 >> v24) & 0xF) + 1;
        if (v28 >= *(unsigned __int16 *)(v6 + 16))
        {
          v52 = (v7 >> v21) & 0xF;
          v49 = v21;
          v50 = v20 + 24;
          v55 = v19;
          v53 = v17;
          sub_238263DDC(v1);
          swift_unknownObjectRetain();
          v25 = v51;
          swift_unknownObjectRetain();
          goto LABEL_35;
        }
        v66 = (v28 << v24) | ((-15 << v24) - 1) & v7;
        v67 = v6;
        sub_238263DDC(v1);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
LABEL_32:
        swift_unknownObjectRelease();
LABEL_38:
        swift_unknownObjectRelease();
      }
      else
      {
        if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v16 + 16))
        {
          swift_unknownObjectRetain();
          goto LABEL_44;
        }
        v66 = ((v18 + 1) << v17) | ((-15 << v17) - 1) & v7;
        v67 = v16;
        swift_unknownObjectRetain();
        v6 = v16;
      }
LABEL_47:
      sub_23825B804(v1);
      goto LABEL_10;
    }
    if (v15 + 1 >= (unint64_t)*(unsigned __int16 *)(v4 + 16))
    {
      v27 = 0;
LABEL_49:
      v47 = *(unsigned __int16 *)(v4 + 16);
      v48 = *(_BYTE *)(v4 + 18);
      swift_unknownObjectRetain();
      sub_23825B804(v1);
      sub_23825B804(v1);
      v6 = 0;
      v65 = v60;
      v66 = ((-15 << ((4 * v48 + 8) & 0x3C)) - 1) & v27 | (unint64_t)(v47 << ((4 * v48 + 8) & 0x3C));
      v67 = 0;
      goto LABEL_11;
    }
    v66 = ((v15 + 1) << v14) | ((-15 << v14) - 1) & v7;
    sub_23825B804(v1);
    v67 = v4;
    v6 = v4;
LABEL_11:
    sub_23835AE54();
    swift_bridgeObjectRelease();
    if (!v6)
      return sub_23825B804(v1);
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  result = swift_bridgeObjectRetain();
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_2382EDA84()
{
  return BigString.write<A>(to:)();
}

uint64_t sub_2382EDABC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v10 = a1 + 40 * *a2;
  v11 = *(_OWORD *)(v10 + 16);
  v23[0] = *(_OWORD *)v10;
  v23[1] = v11;
  v24 = *(_QWORD *)(v10 + 32);
  swift_unknownObjectRetain();
  v12 = sub_23826A744(a3);
  result = sub_23825B804((uint64_t)v23);
  if ((v12 & 1) != 0)
    return 1;
  v14 = *a2 + 1;
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  *a2 = v14;
  if (v14 < *(unsigned __int16 *)(a4 + 16))
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      v15 = *(_QWORD *)(a3 + 8) & ((-15 << ((4 * a5 + 8) & 0x3C)) - 1) | (v14 << ((4 * a5 + 8) & 0x3C));
      *(_QWORD *)(a3 + 8) = v15;
      v16 = a1 + 40 * *a2;
      v22 = *(_QWORD *)(v16 + 32);
      v17 = *(_OWORD *)(v16 + 16);
      v21[0] = *(_OWORD *)v16;
      v21[1] = v17;
      result = *(_QWORD *)&v21[0];
      v18 = *(unsigned __int8 *)(*(_QWORD *)&v21[0] + 18) + 1;
      if (((v18 >> 8) & 1) == 0)
      {
        v19 = ((-256 << (4 * (v18 & 0xF))) | 0xFF) & v15;
        *(_QWORD *)(a3 + 8) = v19;
        swift_unknownObjectRetain();
        v20 = sub_2382ED1C8(v19);
        sub_23825B804((uint64_t)v21);
        *(_QWORD *)(a3 + 16) = v20;
        return 1;
      }
      goto LABEL_12;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t TreeSet.intersection(_:)(char *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TreeSet._intersection<A>(_:)(a1, a2, a4, a5, a6, a7, (char *)(MEMORY[0x24BEE4AE0] + 8), a8);
}

uint64_t TreeSet._intersection<A>(_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = a3;
  v11 = _HashNode.intersection<A>(_:_:)(0, a1, a2, a3, a4, a6, MEMORY[0x24BEE4AE0] + 8, a7, a8);
  if (v11)
    return TreeSet.init(_new:)(v11, v12, a6, a8);
  swift_retain();
  return (uint64_t)v10;
}

uint64_t TreeSet.intersection<A>(_:)(char *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  return TreeSet._intersection<A>(_:)(a1, a2, a4, a5, a6, a7, a8, a9);
}

uint64_t TreeSet.intersection<A>(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedConformanceWitness;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t AssociatedTypeWitness;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v82 = a4;
  v86 = a3;
  v88 = a2;
  AssociatedConformanceWitness = a1;
  v84 = (char *)(MEMORY[0x24BEE4AE0] + 8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v77 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v78 = TupleTypeMetadata2;
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v76 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)&v70 - v15;
  v83 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)&v70 - v16;
  v18 = sub_23835B334();
  v80 = *(_QWORD *)(v18 - 8);
  v81 = (void (*)(char *, char *, uint64_t))v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v70 - v23;
  v25 = *(_QWORD *)(a5 - 8);
  v26 = MEMORY[0x24BDAC7A8](v22);
  v87 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v72 = (char *)&v70 - v29;
  v30 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for TreeSet(0, a5, a7, v33);
  if (v34 == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, AssociatedConformanceWitness, a6);
    swift_dynamicCast();
    v36 = TreeSet._intersection<A>(_:)(v89, v90, v88, v86, v82, a5, v84, a7);
    swift_release();
  }
  else
  {
    v70 = v30;
    v74 = a6;
    v89 = v88;
    v90 = v86;
    v91 = v82;
    MEMORY[0x23B831670](&protocol conformance descriptor for TreeSet<A>, v34);
    sub_23835B214();
    v84 = *(char **)(v25 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v84)(v24, 1, a5) == 1)
    {
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v80 + 8))(v24, v81);
      return TreeSet.init()(a5, a7);
    }
    else
    {
      v81 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
      v81(v72, v24, a5);
      v37 = v25;
      v38 = AssociatedConformanceWitness;
      v39 = v74;
      v40 = v83;
      v41 = sub_23835AFB0();
      if (v41 != 2)
      {
        MEMORY[0x24BDAC7A8](v41);
        *(&v70 - 6) = a5;
        *(&v70 - 5) = v39;
        *(&v70 - 4) = a7;
        *(&v70 - 3) = v40;
        *(&v70 - 2) = v38;
        v36 = TreeSet.filter(_:)((uint64_t)sub_2382EE41C, (uint64_t)(&v70 - 8), (uint64_t)v88, v86, v82, a5, a7);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v72, a5);
        return v36;
      }
      v82 = v37;
      v42 = v86;
      v43 = v88;
      if (qword_2568F09D0 != -1)
        swift_once();
      v80 = MEMORY[0x24BEE4AE0] + 8;
      v89 = (char *)_HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x24BEE4AE0] + 8, a7);
      v90 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v32, AssociatedConformanceWitness, v39);
      swift_retain();
      sub_23835AF8C();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      sub_23835B484();
      v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v84)(v21, 1, a5);
      v46 = (uint64_t)v87;
      if (v45 != 1)
      {
        v73 = v21;
        v48 = (uint64_t)v75;
        do
        {
          v81((char *)v46, v21, a5);
          v50 = sub_238358A4C();
          v51 = _HashNode.lookup(_:_:_:)(0, v46, v50, (uint64_t)v43, v42, a5, v80, a7);
          if (v51)
          {
            v53 = v52;
            v54 = MEMORY[0x24BEE4AE0] + 8;
            v55 = nullsub_1(v51 + 16, v51 + 32, a5, MEMORY[0x24BEE4AE0] + 8, a7);
            v57 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v53, v55, v56, a5, v54, a7);
            v58 = swift_getTupleTypeMetadata2();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v48, v57, v58);
            v59 = v17;
            v60 = v82;
            v61 = v76;
            v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 16))(v76, v48, a5);
            MEMORY[0x24BDAC7A8](v62);
            v63 = v74;
            *(&v70 - 6) = a5;
            *(&v70 - 5) = v63;
            v64 = v83;
            *(&v70 - 4) = a7;
            *(&v70 - 3) = v64;
            *(&v70 - 2) = (uint64_t)v61;
            v65 = (uint64_t *)type metadata accessor for _HashNode(0, a5, v54, a7);
            _HashNode.updateValue(_:forKey:_:_:)(0, v48, v50, (uint64_t)sub_23826F498, (uint64_t)(&v70 - 8), v65);
            v42 = v86;
            v66 = v78;
            v67 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
            v67(v48, v78);
            v68 = *(void (**)(char *, uint64_t))(v60 + 8);
            v17 = v59;
            v21 = v73;
            v68(v87, a5);
            v69 = v61;
            v46 = (uint64_t)v87;
            v67((uint64_t)v69, v66);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v46, a5);
          }
          sub_23835B484();
          v49 = ((uint64_t (*)(char *, uint64_t, uint64_t))v84)(v21, 1, a5);
          v43 = v88;
        }
        while (v49 != 1);
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v17, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v72, a5);
      return TreeSet.init(_new:)((uint64_t)v89, v90, a5, a7);
    }
  }
  return v36;
}

uint64_t sub_2382EE41C()
{
  return sub_23835B034() & 1;
}

uint64_t OrderedDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a7;
  v34 = *(_QWORD *)(a6 - 8);
  v35 = a8;
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = sub_23835B334();
  v38 = *(_QWORD *)(v21 - 8);
  v39 = v21;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v37 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v31 - v24;
  _s19CollectionsInternal4HeapV5countSivg_0();
  v33 = a1;
  sub_23835BA00();
  v41 = a2;
  v42 = a3;
  v43 = a4;
  v44 = 0;
  v36 = type metadata accessor for OrderedDictionary.Iterator(0, a5, a6, v40);
  swift_retain();
  swift_retain();
  swift_retain();
  v26 = v34;
  while (1)
  {
    v27 = v37;
    OrderedDictionary.Iterator.next()(v36, v37);
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v25, v27, v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)break;
    v28 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
    v29 = v32;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v19, v25, a5);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v16, v28, a6);
    sub_23835ABFC();
    sub_23835ABFC();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, a6);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v19, a5);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t OrderedDictionary<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE v15[72];

  sub_23835B9E8();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return sub_23835BA48();
}

uint64_t sub_2382EE740(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedDictionary<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(_QWORD *)(a2 - 8));
}

uint64_t sub_2382EE75C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return OrderedDictionary<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8));
}

uint64_t sub_2382EE778(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  _BYTE v7[72];

  v5 = *(_QWORD *)(a3 - 8);
  sub_23835B9E8();
  OrderedDictionary<>.hash(into:)((uint64_t)v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return sub_23835BA48();
}

uint64_t sub_2382EE7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B831670](&protocol conformance descriptor for <> OrderedDictionary<A, B>, a1, &v4);
}

uint64_t TreeSet.subtract(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = TreeSet.subtracting(_:)(a1, a2, a3, *v4, v4[1], v4[2], *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
  *v4 = result;
  v4[1] = v6;
  v4[2] = v7;
  return result;
}

uint64_t TreeSet.subtract<A>(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = TreeSet.subtracting<A>(_:)(a1, a2, a3, *v5, v5[1], v5[2], *(_QWORD *)(a4 + 16), a5, *(_QWORD *)(a4 + 24));
  *v5 = result;
  v5[1] = v7;
  v5[2] = v8;
  return result;
}

uint64_t TreeSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = TreeSet.subtracting<A>(_:)(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24), a4);
  *v4 = result;
  v4[1] = v6;
  v4[2] = v7;
  return result;
}

uint64_t OrderedSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_2382EECD4(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

{
  uint64_t v6;

  v6 = sub_2382EECD4(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_2382EEE40(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

Swift::Int sub_2382EE990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Swift::Int *a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  int8x8_t *v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int result;
  Swift::Int *v29;
  Swift::Int v30;
  uint64_t (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;

  v45 = a4;
  v46 = a7;
  v49 = a3;
  v44 = a2;
  v38 = a8;
  v39 = *(_QWORD *)(a5 - 8);
  v40 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23835B334();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v36 - v14;
  v43 = *(char **)(a6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v20 = (char *)&v36 - v19;
  (*((void (**)(char *, uint64_t, uint64_t))v43 + 2))(v17, v44, a6);
  sub_23835AF8C();
  v21 = v39;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v43 = v20;
  v44 = AssociatedTypeWitness;
  v42 = AssociatedConformanceWitness;
  sub_23835B484();
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v41(v15, 1, a5) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v44);
    v23 = *(int8x8_t **)v40;
    v24 = *(_QWORD *)(v40 + 8);
    v25 = sub_2382838F8();
    v26 = v49;
    swift_retain();
    v27 = v45;
    swift_retain();
    result = OrderedSet._extractSubset(using:count:extraCapacity:)(v23, v24, 0, 1, v25, v26, v27, a5, v46);
    v29 = v38;
    *v38 = result;
    v29[1] = v30;
    return result;
  }
  v31 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
  v32 = v45;
  for (i = v31(v11, v15, a5); ; i = v31(v11, v15, a5))
  {
    MEMORY[0x24BDAC7A8](i);
    v34 = v46;
    *(&v36 - 6) = a5;
    *(&v36 - 5) = v34;
    *(&v36 - 4) = v49;
    *(&v36 - 3) = v32;
    v35 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F09C8);
    result = sub_23835B694();
    if ((v48 & 1) != 0)
      goto LABEL_4;
    if ((v47 & 0x8000000000000000) != 0)
      break;
    *(_QWORD *)(*(_QWORD *)v40 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, a5);
    sub_23835B484();
    if (v41(v15, 1, a5) == 1)
      goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2382EECD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v22[1] = a2;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v22 - v14;
  result = OrderedSet.init()();
  v23 = result;
  v24 = v17;
  v18 = *(_QWORD *)(a4 + 16);
  if (v18)
  {
    v22[0] = a3;
    swift_retain();
    swift_retain();
    for (i = 0; i != v18; ++i)
    {
      sub_23835B724();
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, a5);
      if (OrderedSet.contains(_:)())
      {
        v21 = type metadata accessor for OrderedSet(0, a5, a6, v20);
        OrderedSet._appendNew(_:)((uint64_t)v13, v21);
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a5);
    }
    swift_release();
    swift_release();
    return v23;
  }
  return result;
}

uint64_t sub_2382EEE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = (unint64_t)(v8 + 63) >> 6;
    v12 = 0;
    v13 = 0;
    MEMORY[0x24BDAC7A8](v8);
    type metadata accessor for OrderedSet(0, a4, a6, v10);
    sub_238329A40(v9, (void (*)(char **))sub_238280D68);
  }
  __break(1u);
  result = sub_238280D84(v12, v13);
  __break(1u);
  return result;
}

Swift::Int sub_2382EEF48@<X0>(uint64_t a1@<X0>, Swift::Int *a2@<X8>)
{
  uint64_t *v2;

  return sub_2382EE990(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

uint64_t _HashTreeIterator.init(root:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint8x8_t v6;
  __int32 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  unsigned __int32 v15;
  uint8x8_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[27];

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a1;
  LODWORD(v18) = 0;
  swift_beginAccess();
  v5 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.i32[0];
  if (v5 == v4)
    v7 = *(_DWORD *)(a1 + 16);
  DWORD1(v18) = v7;
  *((_QWORD *)&v18 + 1) = 0;
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a1;
  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a1;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a1;
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = a1;
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = a1;
  *(_QWORD *)v24 = a1;
  *(_QWORD *)&v24[8] = a1;
  *(_QWORD *)&v24[16] = a1;
  *(_WORD *)&v24[24] = 0;
  v24[26] = 0;
  if (!v5)
  {
    if (v4)
    {
      sub_2382EF580(0);
      if (!DWORD1(v18))
      {
        v12 = v24[24];
        v13 = v24[25];
        v14 = *((_QWORD *)&v17 + 1);
        do
        {
          *((_QWORD *)&v19 + v12) = v14;
          v13 += 5;
          v14 = *(_QWORD *)(v14 + 32);
          swift_beginAccess();
          v15 = *(_DWORD *)(v14 + 16);
          v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v15 != *(_DWORD *)(v14 + 20))
            v15 = v16.i32[0];
          ++v12;
        }
        while (!v15);
        LODWORD(v18) = 0;
        DWORD1(v18) = v15;
        *((_QWORD *)&v17 + 1) = v14;
        v24[25] = v13;
        v24[24] = v12;
      }
    }
    else
    {
      v24[26] = 1;
    }
  }
  v8 = *(_OWORD *)v24;
  a2[6] = v23;
  a2[7] = v8;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)&v24[11];
  v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  v10 = v22;
  a2[4] = v21;
  a2[5] = v10;
  *a2 = v17;
  a2[1] = v18;
  return swift_retain();
}

uint64_t _HashTreeIterator.next()()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t result;

  v1 = *(_DWORD *)(v0 + 16);
  if (v1 >= *(_DWORD *)(v0 + 20))
    return _HashTreeIterator._next()();
  result = *(_QWORD *)(v0 + 8);
  *(_DWORD *)(v0 + 16) = v1 + 1;
  return result;
}

uint64_t _HashTreeIterator._Opaque.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 88) = result;
  *(_QWORD *)(a2 + 96) = result;
  *(_QWORD *)(a2 + 104) = result;
  *(_WORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 114) = 0;
  return result;
}

uint64_t _HashTreeIterator.root.getter()
{
  return swift_retain();
}

uint64_t _HashTreeIterator.node.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _HashTreeIterator.node.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTreeIterator.node.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashTreeIterator.slot.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t _HashTreeIterator.slot.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_HashTreeIterator.slot.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashTreeIterator.endSlot.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t _HashTreeIterator.endSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*_HashTreeIterator.endSlot.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

__n128 _HashTreeIterator._o.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  char v8;

  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 24) = v2;
  v3 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 56) = v3;
  result = *(__n128 *)(v1 + 96);
  v5 = *(_OWORD *)(v1 + 112);
  *(__n128 *)(a1 + 72) = result;
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_WORD *)(v1 + 136);
  v8 = *(_BYTE *)(v1 + 138);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_WORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 114) = v8;
  return result;
}

__n128 _HashTreeIterator._o.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 88) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 104) = v2;
  *(_OWORD *)(v1 + 120) = *(_OWORD *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v3;
  result = *(__n128 *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 56) = result;
  *(_DWORD *)(v1 + 135) = *(_DWORD *)(a1 + 111);
  *(_OWORD *)(v1 + 72) = v5;
  return result;
}

uint64_t (*_HashTreeIterator._o.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashTreeIterator._next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  unsigned __int32 v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  unsigned __int32 v24;
  uint8x8_t v25;
  unsigned __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  char v29;
  unsigned __int32 v30;
  uint8x8_t v31;
  unsigned __int32 v32;
  uint8x8_t v33;
  char v35;

  if ((*(_BYTE *)(v0 + 138) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)(v0 + 8);
  swift_beginAccess();
  v3 = *(_DWORD *)(v2 + 20);
  v4 = *(unsigned __int8 *)(v0 + 137);
  if (*(_DWORD *)(v2 + 16) != v3 && v3 != 0)
  {
    v20 = *(_QWORD *)(v0 + 24);
    v21 = *(unsigned __int8 *)(v0 + 136);
    *(_QWORD *)(v0 + 32 + 8 * v21) = v2;
    v22 = v21 + 1;
    *(_BYTE *)(v0 + 136) = v21 + 1;
    v23 = v4 + 5;
    *(_BYTE *)(v0 + 137) = v4 + 5;
    v1 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v0 + 8) = v1;
    *(_DWORD *)(v0 + 16) = 0;
    swift_beginAccess();
    v24 = *(_DWORD *)(v1 + 16);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v24 != *(_DWORD *)(v1 + 20))
      v24 = v25.i32[0];
    *(_DWORD *)(v0 + 20) = v24;
    if (!v24)
    {
      do
      {
        *(_QWORD *)(v0 + 32 + 8 * v22) = v1;
        v23 += 5;
        v1 = *(_QWORD *)(v1 + 32);
        swift_beginAccess();
        v26 = *(_DWORD *)(v1 + 16);
        v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
        v27.i16[0] = vaddlv_u8(v27);
        if (v26 != *(_DWORD *)(v1 + 20))
          v26 = v27.i32[0];
        ++v22;
      }
      while (!v26);
      *(_DWORD *)(v0 + 20) = v26;
      *(_QWORD *)(v0 + 8) = v1;
      *(_BYTE *)(v0 + 137) = v23;
      *(_BYTE *)(v0 + 136) = v22;
      *(_QWORD *)(v0 + 24) = v20;
    }
LABEL_36:
    *(_DWORD *)(v0 + 16) = 1;
    return v1;
  }
  if (*(_BYTE *)(v0 + 137))
  {
    v6 = v0 + 32;
    v7 = *(_BYTE *)(v0 + 136);
    while (1)
    {
      v35 = v4;
      v8 = v4 - 5;
      v9 = *(_QWORD *)(v0 + 24);
      v10 = (v4 - 5) & 0x3F;
      v11 = v9;
      if ((v4 - 5) <= 0x3Fu)
      {
        v11 = ((-31 << v10) - 1) & v9;
        *(_QWORD *)(v0 + 24) = v11;
      }
      v12 = v7 - 1;
      v13 = (v7 - 1);
      v14 = v6;
      v2 = *(_QWORD *)(v6 + 8 * v13);
      v15 = ((v9 >> v8) & 0x1F) + 1;
      swift_beginAccess();
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v2 + 20));
      v16.i16[0] = vaddlv_u8(v16);
      if (*(_DWORD *)(v2 + 16) != *(_DWORD *)(v2 + 20) && v15 < v16.i32[0])
        break;
      v4 = v8;
      --v7;
      v6 = v14;
      if (!(_BYTE)v8)
      {
        *(_BYTE *)(v0 + 137) = 0;
        *(_QWORD *)(v0 + 8) = v2;
        *(_BYTE *)(v0 + 136) = v12;
        goto LABEL_19;
      }
    }
    *(_QWORD *)(v0 + 8) = v2;
    v28 = v11 | (v15 << v10);
    *(_QWORD *)(v0 + 24) = v28;
    *(_QWORD *)(v14 + 8 * v13) = v2;
    *(_BYTE *)(v0 + 136) = v7;
    v29 = v35;
    *(_BYTE *)(v0 + 137) = v35;
    v1 = *(_QWORD *)(v2 + 16 * v15 + 32);
    *(_QWORD *)(v0 + 8) = v1;
    *(_DWORD *)(v0 + 16) = 0;
    swift_beginAccess();
    v30 = *(_DWORD *)(v1 + 16);
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v30 != *(_DWORD *)(v1 + 20))
      v30 = v31.i32[0];
    *(_DWORD *)(v0 + 20) = v30;
    if (!v30)
    {
      do
      {
        *(_QWORD *)(v14 + 8 * v7) = v1;
        v29 += 5;
        v1 = *(_QWORD *)(v1 + 32);
        swift_beginAccess();
        v32 = *(_DWORD *)(v1 + 16);
        v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v33.i16[0] = vaddlv_u8(v33);
        if (v32 != *(_DWORD *)(v1 + 20))
          v32 = v33.i32[0];
        ++v7;
      }
      while (!v32);
      *(_DWORD *)(v0 + 20) = v32;
      *(_QWORD *)(v0 + 8) = v1;
      *(_BYTE *)(v0 + 137) = v29;
      *(_BYTE *)(v0 + 136) = v7;
      *(_QWORD *)(v0 + 24) = v28;
    }
    goto LABEL_36;
  }
LABEL_19:
  swift_beginAccess();
  v1 = 0;
  v18 = *(_DWORD *)(v2 + 16);
  v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v18 != *(_DWORD *)(v2 + 20))
    v18 = v19.i32[0];
  *(_DWORD *)(v0 + 16) = v18;
  *(_DWORD *)(v0 + 20) = v18;
  *(_BYTE *)(v0 + 138) = 1;
  return v1;
}

uint64_t sub_2382EF538@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(v1 + 16);
  if (v3 >= *(_DWORD *)(v1 + 20))
  {
    result = _HashTreeIterator._next()();
    v3 = 0;
  }
  else
  {
    result = *(_QWORD *)(v1 + 8);
    *(_DWORD *)(v1 + 16) = v3 + 1;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_2382EF580(unsigned int a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int32 v7;
  uint8x8_t v8;

  v2 = *(_BYTE *)(v1 + 137);
  *(_QWORD *)(v1 + 24) |= (unint64_t)a1 << v2;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 136);
  *(_QWORD *)(v1 + 8 * v4 + 32) = v3;
  *(_BYTE *)(v1 + 136) = v4 + 1;
  *(_BYTE *)(v1 + 137) = v2 + 5;
  v5 = *(_QWORD *)(v3 + 16 * a1 + 32);
  *(_QWORD *)(v1 + 8) = v5;
  *(_DWORD *)(v1 + 16) = 0;
  result = swift_beginAccess();
  v7 = *(_DWORD *)(v5 + 16);
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v7 != *(_DWORD *)(v5 + 20))
    v7 = v8.i32[0];
  *(_DWORD *)(v1 + 20) = v7;
  return result;
}

ValueMetadata *type metadata accessor for _HashTreeIterator()
{
  return &type metadata for _HashTreeIterator;
}

__n128 __swift_memcpy115_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_DWORD *)(a1 + 111) = *(_DWORD *)((char *)a2 + 111);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _HashTreeIterator._Opaque(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 115))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTreeIterator._Opaque(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 114) = 0;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 115) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 115) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTreeIterator._Opaque()
{
  return &type metadata for _HashTreeIterator._Opaque;
}

__n128 TreeDictionary.makeIterator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[7];
  _OWORD v8[2];

  TreeDictionary.Iterator.init(_root:)(a1, v7);
  v3 = v8[0];
  *(_OWORD *)(a2 + 96) = v7[6];
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 123) = *(_OWORD *)((char *)v8 + 11);
  v4 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v4;
  v5 = v7[5];
  *(_OWORD *)(a2 + 64) = v7[4];
  *(_OWORD *)(a2 + 80) = v5;
  result = (__n128)v7[1];
  *(_OWORD *)a2 = v7[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TreeDictionary.Iterator.next()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *(unsigned int *)(v2 + 16);
  if (v5 >= *(_DWORD *)(v2 + 20))
  {
    v6 = _HashTreeIterator._next()();
    if (!v6)
    {
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56);
      v17 = a2;
      v18 = 1;
      return v16(v17, v18, 1, TupleTypeMetadata2);
    }
    v5 = v7;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 16) = v5 + 1;
  }
  v8 = a1[2];
  v9 = a1[3];
  v10 = a1[4];
  v11 = nullsub_1(v6 + 16, v6 + 32, v8, v9, v10);
  v13 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v5, v11, v12, v8, v9, v10);
  v14 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a2, v13, v14);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56);
  v17 = a2;
  v18 = 0;
  return v16(v17, v18, 1, TupleTypeMetadata2);
}

uint64_t TreeDictionary.Iterator._it.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2382A3384(v1, a1);
}

__n128 TreeDictionary.Iterator._it.setter(uint64_t a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[7];
  _OWORD v12[2];

  v3 = v1[7];
  v11[6] = v1[6];
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v1 + 123);
  v4 = v1[3];
  v11[2] = v1[2];
  v11[3] = v4;
  v5 = v1[5];
  v11[4] = v1[4];
  v11[5] = v5;
  v6 = v1[1];
  v11[0] = *v1;
  v11[1] = v6;
  sub_2382735AC((uint64_t)v11);
  v7 = *(_OWORD *)(a1 + 112);
  v1[6] = *(_OWORD *)(a1 + 96);
  v1[7] = v7;
  *(_OWORD *)((char *)v1 + 123) = *(_OWORD *)(a1 + 123);
  v8 = *(_OWORD *)(a1 + 48);
  v1[2] = *(_OWORD *)(a1 + 32);
  v1[3] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v9;
  result = *(__n128 *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = result;
  return result;
}

uint64_t (*TreeDictionary.Iterator._it.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

__n128 TreeDictionary.Iterator.init(_root:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint8x8_t v6;
  __int32 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  unsigned __int32 v15;
  uint8x8_t v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[27];

  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a1;
  v18.n128_u32[0] = 0;
  swift_beginAccess();
  v5 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.i32[0];
  if (v5 == v4)
    v7 = *(_DWORD *)(a1 + 16);
  v18.n128_u32[1] = v7;
  v18.n128_u64[1] = 0;
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a1;
  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a1;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a1;
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = a1;
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = a1;
  *(_QWORD *)v24 = a1;
  *(_QWORD *)&v24[8] = a1;
  *(_QWORD *)&v24[16] = a1;
  *(_WORD *)&v24[24] = 0;
  v24[26] = 0;
  if (!v5)
  {
    if (v4)
    {
      sub_2382EF580(0);
      if (!v18.n128_u32[1])
      {
        v12 = v24[24];
        v13 = v24[25];
        v14 = *((_QWORD *)&v17 + 1);
        do
        {
          *((_QWORD *)&v19 + v12) = v14;
          v13 += 5;
          v14 = *(_QWORD *)(v14 + 32);
          swift_beginAccess();
          v15 = *(_DWORD *)(v14 + 16);
          v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v15 != *(_DWORD *)(v14 + 20))
            v15 = v16.i32[0];
          ++v12;
        }
        while (!v15);
        v18.n128_u32[0] = 0;
        v18.n128_u32[1] = v15;
        *((_QWORD *)&v17 + 1) = v14;
        v24[25] = v13;
        v24[24] = v12;
      }
    }
    else
    {
      v24[26] = 1;
    }
  }
  v8 = *(_OWORD *)v24;
  a2[6] = v23;
  a2[7] = v8;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)&v24[11];
  v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  v10 = v22;
  a2[4] = v21;
  a2[5] = v10;
  result = v18;
  *a2 = v17;
  a2[1] = v18;
  return result;
}

uint64_t TreeDictionary.underestimatedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 sub_2382EFA98@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[7];
  _OWORD v8[2];

  TreeDictionary.makeIterator()(*v1, (uint64_t)v7);
  v3 = v8[0];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v8 + 11);
  v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  v5 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v5;
  result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2382EFAFC(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>, a1);
  return sub_23835B1FC();
}

void sub_2382EFB34()
{
  JUMPOUT(0x23B831670);
}

uint64_t type metadata accessor for TreeDictionary.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeDictionary.Iterator);
}

uint64_t static TreeSet._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

Swift::Void __swiftcall TreeSet._dump(iterationOrder:)(Swift::Bool iterationOrder)
{
  Swift::String v1;
  Swift::String v2;

  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(iterationOrder, 0x7FFFFFFFFFFFFFFFLL, v1, v2, 0);
}

uint64_t static TreeSet._maxDepth.getter()
{
  return 13;
}

double TreeSet._statistics.getter@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_23834AF20(0, &v12, a1, a2, a3, MEMORY[0x24BEE4AE0] + 8, a4);
  result = *(double *)&v12;
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  v11 = v17;
  *a5 = v12;
  a5[1] = v7;
  a5[2] = v8;
  a5[3] = v9;
  a5[4] = v10;
  a5[5] = v11;
  return result;
}

BOOL BitSet.isDisjoint(with:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[2] >= a2[2])
    v2 = a2[2];
  else
    v2 = a1[2];
  if (!v2)
    return 1;
  if ((a1[4] & a2[4]) != 0)
    return 0;
  v4 = a2 + 5;
  v5 = a1 + 5;
  v6 = v2 - 1;
  do
  {
    result = v6 == 0;
    if (!v6)
      break;
    v8 = *v4++;
    v7 = v8;
    v9 = *v5++;
    --v6;
  }
  while ((v9 & v7) == 0);
  return result;
}

BOOL BitSet.isDisjoint(with:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return BitSet.isDisjoint(with:)(a1, a3);
}

BOOL BitSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 <= 0)
    v3 = 0;
  else
    v3 = a1 & ~(a1 >> 63);
  return _UnsafeBitSet.isDisjoint(with:)(v3, a2 & ~(a2 >> 63), (_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16));
}

BOOL BitSet.isDisjoint<A>(with:)(uint64_t a1, _QWORD *a2, ValueMetadata *a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, ValueMetadata *);
  BOOL v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v23 - v9;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a3[-1].Description;
  v12 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  if (a3 == &type metadata for BitSet)
  {
    Description[2]((char *)&v23 - v15, a1, &type metadata for BitSet);
LABEL_8:
    swift_dynamicCast();
    v19 = BitSet.isDisjoint(with:)((_QWORD *)v23, a2);
    swift_bridgeObjectRelease();
    return v19;
  }
  if (a3 == &type metadata for BitSet.Counted)
  {
    Description[2]((char *)&v23 - v15, a1, &type metadata for BitSet.Counted);
    goto LABEL_8;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0);
  v18 = Description[2];
  if ((ValueMetadata *)v17 == a3)
  {
    v18(v14, a1, a3);
    swift_dynamicCast();
    if (v24 <= 0)
      v21 = 0;
    else
      v21 = v23 & ~(v23 >> 63);
    return _UnsafeBitSet.isDisjoint(with:)(v21, v24 & ~(v24 >> 63), a2 + 4, a2[2]);
  }
  else
  {
    v18(v16, a1, a3);
    sub_23835AF8C();
    swift_getAssociatedConformanceWitness();
    sub_23835B484();
    if ((v24 & 1) != 0)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
      return 1;
    }
    else
    {
      v22 = v23;
      while ((v22 & 0x8000000000000000) != 0 || v22 >> 6 >= a2[2] || ((a2[(v22 >> 6) + 4] >> v22) & 1) == 0)
      {
        sub_23835B484();
        v22 = v23;
        if ((v24 & 1) != 0)
          goto LABEL_5;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
      return 0;
    }
  }
}

uint64_t BitSet.subtracting(_:)(uint64_t result, int8x16_t *a2)
{
  int8x16_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int8 *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;

  v3 = (int8x16_t *)result;
  v4 = a2[1].u64[0];
  v5 = *(_QWORD *)(result + 16);
  if (v5 <= v4)
    v6 = a2[1].i64[0];
  else
    v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    result = sub_23835B088();
    v7 = result;
    *(_QWORD *)(result + 16) = v6;
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  if (v5 >= v4)
    v8 = v4;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 < 8)
    {
      v9 = 0;
LABEL_13:
      v10 = v8 - v9;
      v11 = 8 * v9 + 32;
      v12 = (uint64_t *)(v7 + v11);
      v13 = (uint64_t *)((char *)v3->i64 + v11);
      v14 = (uint64_t *)((char *)a2->i64 + v11);
      do
      {
        v16 = *v14++;
        v15 = v16;
        v17 = *v13++;
        *v12++ = v15 & ~v17;
        --v10;
      }
      while (v10);
      goto LABEL_15;
    }
    v9 = 0;
    if ((unint64_t)(v7 - (_QWORD)a2) < 0x20)
      goto LABEL_13;
    if ((unint64_t)(v7 - (_QWORD)v3) < 0x20)
      goto LABEL_13;
    v9 = v8 & 0x7FFFFFFFFFFFFFFCLL;
    v31 = a2 + 3;
    v32 = v3 + 3;
    v33 = (int8x16_t *)(v7 + 48);
    v34 = v8 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = vbicq_s8(*v31, *v32);
      v33[-1] = vbicq_s8(v31[-1], v32[-1]);
      *v33 = v35;
      v31 += 2;
      v32 += 2;
      v33 += 2;
      v34 -= 4;
    }
    while (v34);
    if (v8 != v9)
      goto LABEL_13;
  }
LABEL_15:
  v18 = v4 - v5;
  if (v4 < v5)
  {
    bzero((void *)(v7 + 8 * v4 + 32), 8 * (v5 - v4));
    goto LABEL_26;
  }
  if (v5 == v4)
  {
LABEL_26:
    if (v6)
    {
      if (*(_QWORD *)(v7 + 32 + 8 * v6 - 8))
      {
        v30 = v6;
LABEL_41:
        *(_QWORD *)(v7 + 16) = v30;
        return v7;
      }
      v36 = v6;
      while (1)
      {
        v30 = v36 - 1;
        if (v36 - 1 < 1)
          break;
        if (*(_QWORD *)(v7 + 16 + 8 * v36--))
        {
          if (v6 >= v30)
            goto LABEL_41;
          __break(1u);
          break;
        }
      }
    }
    v30 = 0;
    goto LABEL_41;
  }
  if (v5 < v4)
  {
    if (v18 < 0xC)
      goto LABEL_24;
    v19 = 8 * v5;
    if (8 * v5 + v7 - ((unint64_t)a2 + 8 * v5) < 0x20)
      goto LABEL_24;
    v5 += v18 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = v19 + 48;
    v21 = (_OWORD *)(v7 + v19 + 48);
    v22 = &a2->i8[v20];
    v23 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 += 2;
      v22 += 32;
      v23 -= 4;
    }
    while (v23);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_24:
      v25 = v4 - v5;
      v26 = 8 * v5 + 32;
      v27 = (_QWORD *)(v7 + v26);
      v28 = (uint64_t *)((char *)a2->i64 + v26);
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.subtracting(_:)(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  return BitSet.subtracting(_:)(a1, a3);
}

uint64_t BitSet.subtracting(_:)(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7[2];
  char v8;

  if (a2 <= 0)
    v4 = 0;
  else
    v4 = a1 & ~(a1 >> 63);
  v5 = a2 & ~(a2 >> 63);
  if (v4 == v5)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 1;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a3 = sub_23826C260((uint64_t)a3);
    v7[1] = *((_QWORD *)a3 + 2);
    _UnsafeBitSet.subtract(_:)(v4, v5);
    v7[0] = (uint64_t)a3;
    sub_2382FC0D0(&v8, v7);
    return v7[0];
  }
  return (uint64_t)a3;
}

uint64_t BitSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t v5;

  v5 = sub_2382F0274(a1, a2, a3);
  (*((void (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
  return v5;
}

uint64_t sub_2382F0274(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  swift_bridgeObjectRetain();
  BitSet.subtract<A>(_:)(a1, a3);
  return a2;
}

uint64_t Rope.forEachWhile<A>(from:in:_:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v29)(char *, char *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = v7;
  v31 = a6;
  v32 = a7;
  v29 = a3;
  v30 = a4;
  v28 = a2;
  v33 = a1;
  v9 = type metadata accessor for Rope._Node(0, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - v11;
  v13 = sub_23835B334();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v26 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v27 = v8;
  v20((char *)&v26 - v18, v8, v13);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v21(v19, 1, v9);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if ((_DWORD)v8 == 1)
  {
    if (!v33)
    {
      v23 = 1;
      return v23 & 1;
    }
    __break(1u);
  }
  else
  {
    v24 = v33;
    v20(v17, v27, v13);
    if (v21(v17, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v17, v9);
      v23 = Rope._Node.forEachWhile<A>(from:in:_:)(v24, v28, v29, v30, v9, v31, v32);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return v23 & 1;
    }
  }
  result = ((uint64_t (*)(char *, uint64_t))v22)(v17, v13);
  __break(1u);
  return result;
}

uint64_t Rope.forEachWhile(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  char v18;
  int v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *);
  uint64_t v26;

  v5 = v4;
  v25 = a1;
  v26 = a2;
  v6 = type metadata accessor for Rope._Node(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)&v23 - v8;
  v9 = sub_23835B334();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v23 = v5;
  v16((char *)&v23 - v14, v5, v9);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v18 = 1;
  v19 = v17(v15, 1, v6);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v15, v9);
  if (v19 == 1)
    return v18 & 1;
  v16(v13, v23, v9);
  if (v17(v13, 1, v6) != 1)
  {
    v21 = v24;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v24, v13, v6);
    v18 = Rope._Node.forEachWhile(_:)(v25, v26, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
    return v18 & 1;
  }
  result = ((uint64_t (*)(char *, uint64_t))v20)(v13, v9);
  __break(1u);
  return result;
}

uint64_t sub_2382F062C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 18))
  {
    sub_238263DDC(a1);
    v5 = sub_2382F0BD4((_WORD *)(v4 + 16), v4 + 24, a2);
  }
  else
  {
    v6 = *(unsigned __int16 *)(v4 + 16);
    if (*(_WORD *)(v4 + 16))
    {
      sub_238263DDC(a1);
      v7 = v4 + 32;
      do
      {
        swift_bridgeObjectRetain();
        v8 = sub_23835AF80();
        v10 = v9;
        v12 = v11;
        v14 = v13;
        swift_bridgeObjectRelease();
        sub_238332138(v8, v10, v12, v14);
        swift_bridgeObjectRelease();
        v7 += 24;
        --v6;
      }
      while (v6);
      v5 = 1;
      v3 = a1;
    }
    else
    {
      sub_238263DDC(a1);
      v5 = 1;
    }
  }
  sub_23825B804(v3);
  return v5 & 1;
}

uint64_t Rope._Node.forEachWhile(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;

  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    v8 = *v3;
    v9 = *(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80);
    v10 = v8 + ((v9 + 19) & ~v9);
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 24);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
    v13 = (unsigned __int16 *)nullsub_1(v8 + 16, v10, v11, a3, v12);
    v15 = v14;
    swift_unknownObjectRetain();
    sub_2382F0D64(v13, v15, (uint64_t)a1, a2, v11, v12, (char *)&v27);
    swift_unknownObjectRelease();
    return v27;
  }
  else
  {
    v17 = *v3;
    v19 = *(_QWORD *)(a3 + 16);
    v18 = *(_QWORD *)(a3 + 24);
    v20 = type metadata accessor for Rope._Item(0, v19, v18, v7);
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80);
    v22 = v17 + ((v21 + 19) & ~v21);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v20);
    v23 = (unsigned __int16 *)nullsub_1(v17 + 16, v22, v19, v20, v18);
    v25 = v24;
    swift_unknownObjectRetain();
    sub_2382F0A8C(v23, v25, a1, a2, v19, v18, (char *)&v26);
    swift_unknownObjectRelease();
    return v26;
  }
}

uint64_t Rope._Node.forEachWhile<A>(from:in:_:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v35;
  unsigned __int8 v36;

  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    v14 = *v7;
    v15 = *v7 + 16;
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80);
    v17 = v14 + ((v16 + 19) & ~v16);
    v18 = *(_QWORD *)(a5 + 16);
    v19 = *(_QWORD *)(a5 + 24);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a5);
    v20 = (unsigned __int16 *)nullsub_1(v15, v17, v18, a5, v19);
    v22 = v21;
    swift_unknownObjectRetain();
    sub_2382F14B0(v20, v22, a1, (uint64_t)a2, (uint64_t)a3, a4, v18, a6, (char *)&v36, a7);
    swift_unknownObjectRelease();
    return v36;
  }
  else
  {
    v24 = *v7;
    v26 = *(_QWORD *)(a5 + 16);
    v25 = *(_QWORD *)(a5 + 24);
    v27 = type metadata accessor for Rope._Item(0, v26, v25, v13);
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80);
    v29 = v24 + ((v28 + 19) & ~v28);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v27);
    v30 = (unsigned __int16 *)nullsub_1(v24 + 16, v29, v26, v27, v25);
    v32 = v31;
    swift_unknownObjectRetain();
    sub_2382F0EB0(v30, v32, a1, a2, a3, a4, v26, a6, (char *)&v35, a7);
    swift_unknownObjectRelease();
    return v35;
  }
}

uint64_t sub_2382F0A8C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char v24;
  char v25;
  uint64_t v26;
  char *v27;

  v13 = type metadata accessor for Rope._Item(0, a5, a6, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - v15;
  v17 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v13);
  result = Rope._UnsafeHandle.children.getter(a1, a2, a5, v13, a6, v17);
  if (v19 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v20 = v19;
  if (v19)
  {
    v21 = result;
    v27 = a7;
    v22 = *(_QWORD *)(v14 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    while (v20)
    {
      v23(v16, v21, v13);
      v24 = a3(v16);
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(v16, a5);
      if ((v24 & 1) == 0)
      {
        v25 = 0;
        goto LABEL_10;
      }
      v21 += v22;
      if (!--v20)
      {
        v25 = 1;
LABEL_10:
        a7 = v27;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  v25 = 1;
LABEL_11:
  *a7 = v25;
  return result;
}

uint64_t sub_2382F0BD4(_WORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2382F0BE0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2382F0BD4);
}

uint64_t sub_2382F0BE0(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = (unsigned __int16)*a1;
  if (!*a1)
    return 1;
  v6 = a2;
  v7 = 0;
  v20 = (unsigned __int16)*a1;
  while (1)
  {
    v9 = *(_QWORD *)(v6 + 40 * v7);
    if (!*(_BYTE *)(v9 + 18))
    {
      v10 = *(unsigned __int16 *)(v9 + 16);
      if (*(_WORD *)(v9 + 16))
      {
        swift_unknownObjectRetain();
        v11 = v9 + 32;
        do
        {
          swift_bridgeObjectRetain();
          v12 = sub_23835AF80();
          v14 = v13;
          v16 = v15;
          v18 = v17;
          swift_bridgeObjectRelease();
          sub_238332138(v12, v14, v16, v18);
          swift_bridgeObjectRelease();
          v11 += 24;
          --v10;
        }
        while (v10);
      }
      else
      {
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRelease();
      v4 = v20;
      v6 = a2;
      goto LABEL_4;
    }
    swift_unknownObjectRetain();
    v8 = a4(v9 + 16, v9 + 24, a3);
    swift_unknownObjectRelease();
    if ((v8 & 1) == 0)
      return 0;
LABEL_4:
    if (++v7 == v4)
      return 1;
  }
}

uint64_t sub_2382F0D64@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char v25;
  char v26;
  uint64_t v27;
  char *v28;

  v14 = type metadata accessor for Rope._Node(0, a5, a6, a4);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v27 - v16;
  v18 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v14);
  result = Rope._UnsafeHandle.children.getter(a1, a2, a5, v14, a6, v18);
  if (v20 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v21 = v20;
  if (v20)
  {
    v22 = result;
    v28 = a7;
    v23 = *(_QWORD *)(v15 + 72);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    while (v21)
    {
      v24(v17, v22, v14);
      v25 = Rope._Node.forEachWhile(_:)(a3, a4, v14);
      result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      if ((v25 & 1) == 0)
      {
        v26 = 0;
        goto LABEL_10;
      }
      v22 += v23;
      if (!--v21)
      {
        v26 = 1;
LABEL_10:
        a7 = v28;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  v26 = 1;
LABEL_11:
  *a7 = v26;
  return result;
}

uint64_t sub_2382F0EB0@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *);
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, char *);
  uint64_t v63;

  v52 = a2;
  v53 = (char *)a8;
  v62 = a5;
  v63 = a6;
  v60 = a3;
  v51 = a9;
  v58 = a4;
  v59 = (void (*)(char *, uint64_t, uint64_t))a10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = AssociatedTypeWitness;
  v61 = sub_23835B334();
  v54 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v15 = (char *)&v48 - v14;
  v56 = a7;
  v17 = type metadata accessor for Rope._Item(0, a7, AssociatedConformanceWitness, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v48 - v20;
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v48 - v22;
  v24 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v17);
  v25 = v52;
  v26 = Rope._UnsafeHandle.children.getter(a1, v52, a7, v17, AssociatedConformanceWitness, v24);
  v50 = v27;
  v28 = v25;
  v29 = (uint64_t)v53;
  v30 = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v60, (uint64_t)v58, 0, a1, v28, a7, v17, (uint64_t)v53, v24, (uint64_t)v59);
  v32 = v31;
  v60 = *(_QWORD *)(v18 + 72);
  v49 = v26;
  v52 = v30;
  v33 = v26 + v30 * v60;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v35 = v55;
  v34(v21, v33, v17);
  (*((void (**)(uint64_t, char *, uint64_t))v59 + 4))(v32, v21, v29);
  v36 = *(void (**)(char *))(*(_QWORD *)(v56 - 8) + 8);
  v36(v21);
  v59 = v34;
  v34(v21, v33, v17);
  v37 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v53 = v23;
  v38 = v57;
  v37(v15, v23, v57);
  v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
  v58(v15, 0, 1, v38);
  LOBYTE(v38) = v62(v21, v15);
  v39 = *(void (**)(char *, uint64_t))(v54 + 8);
  v39(v15, v61);
  v40 = v56;
  result = ((uint64_t (*)(char *))v36)(v21);
  if ((v38 & 1) == 0)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v53, v57);
    goto LABEL_10;
  }
  v42 = v57;
  v43 = v52 + 1;
  if (!__OFADD__(v52, 1))
  {
    if (v43 >= v50)
    {
LABEL_7:
      result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v53, v42);
      v47 = 1;
LABEL_11:
      *v51 = v47;
      return result;
    }
    v44 = ~v52 + v50;
    v45 = v49 + v60 * v43;
    while (1)
    {
      v59(v21, v45, v17);
      v58(v15, 1, 1, v42);
      v46 = v62(v21, v15);
      v39(v15, v61);
      ((void (*)(char *, uint64_t))v36)(v21, v40);
      if ((v46 & 1) == 0)
        break;
      v45 += v60;
      if (!--v44)
        goto LABEL_7;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v53, v42);
LABEL_10:
    v47 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_2382F1248(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = a3;
  v6 = a2;
  v7 = *(unsigned __int16 *)result;
  if (*(_WORD *)result)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = __OFSUB__(a3, v8);
    v10 = a3 - v8;
    if (!v9)
    {
      if (__OFADD__(v10, 1))
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if (v10 + 1 <= 0)
      {
        v11 = 0;
        goto LABEL_15;
      }
      if ((_DWORD)v7 == 1)
      {
        v5 = v10;
        goto LABEL_13;
      }
      v12 = (uint64_t *)(a2 + 48);
      v11 = 1;
      while (1)
      {
        v13 = *v12;
        v12 += 5;
        v5 = v10 - v13;
        if (__OFSUB__(v10, v13))
          break;
        if (__OFADD__(v5, 1))
          goto LABEL_35;
        if (v5 + 1 < 1)
        {
          v5 = v10;
          goto LABEL_15;
        }
        ++v11;
        v10 = v5;
        if (v7 == v11)
          goto LABEL_13;
      }
      __break(1u);
LABEL_35:
      __break(1u);
    }
    __break(1u);
    goto LABEL_37;
  }
LABEL_13:
  if (v5)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  v11 = *(unsigned __int16 *)result;
LABEL_15:
  v14 = *(_QWORD *)(a2 + 40 * v11);
  v15 = *(unsigned __int8 *)(v14 + 18);
  swift_unknownObjectRetain();
  v16 = v14 + 16;
  v17 = v14 + 24;
  if (v15)
    v18 = sub_2382F1248(v16, v17, v5, a4);
  else
    v18 = sub_2382F170C(v16, v17, v5, a4);
  v19 = v18;
  result = swift_unknownObjectRelease();
  if ((v19 & 1) == 0)
    return 0;
  v20 = v11 + 1;
  if (__OFADD__(v11, 1))
    goto LABEL_39;
  if (v20 < v7)
  {
    v32 = v7;
    v33 = v6;
    do
    {
      v22 = *(_QWORD *)(v6 + 40 * v20);
      if (*(_BYTE *)(v22 + 18))
      {
        swift_unknownObjectRetain();
        v21 = sub_2382F0BD4((_WORD *)(v22 + 16), v22 + 24, a4);
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0)
          return 0;
      }
      else
      {
        v23 = *(unsigned __int16 *)(v22 + 16);
        if (*(_WORD *)(v22 + 16))
        {
          swift_unknownObjectRetain();
          v24 = v22 + 32;
          do
          {
            swift_bridgeObjectRetain();
            v25 = sub_23835AF80();
            v27 = v26;
            v29 = v28;
            v31 = v30;
            swift_bridgeObjectRelease();
            sub_238332138(v25, v27, v29, v31);
            swift_bridgeObjectRelease();
            v24 += 24;
            --v23;
          }
          while (v23);
        }
        else
        {
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRelease();
        v7 = v32;
        v6 = v33;
      }
      ++v20;
    }
    while (v20 != v7);
  }
  return 1;
}

uint64_t sub_2382F14B0@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t (*v33)(char *, uint64_t);
  uint64_t result;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a8;
  v51 = a5;
  v52 = a6;
  v47 = a4;
  v48 = a9;
  v49 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Rope._Node(0, a7, AssociatedConformanceWitness, v14);
  v16 = *(_QWORD **)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v45 - v17;
  v19 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v15);
  v20 = a2;
  v21 = Rope._UnsafeHandle.children.getter(a1, a2, a7, v15, AssociatedConformanceWitness, v19);
  v46 = v22;
  v23 = v49;
  v24 = v47;
  v49 = a7;
  v25 = a7;
  v26 = v50;
  v27 = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v23, v47, 0, a1, v20, v25, v15, v50, v19, a10);
  v29 = v28;
  v30 = v16[9];
  v45 = v21;
  v31 = v21 + v27 * v30;
  v32 = (void (*)(char *, uint64_t, uint64_t))v16[2];
  v32(v18, v31, v15);
  LOBYTE(v29) = Rope._Node.forEachWhile<A>(from:in:_:)(v29, v24, v51, v52, v15, v26, a10);
  v33 = (uint64_t (*)(char *, uint64_t))v16[1];
  result = v33(v18, v15);
  v35 = v48;
  v36 = 0;
  if ((v29 & 1) == 0)
  {
LABEL_11:
    *v35 = v36;
    return result;
  }
  v37 = v27 + 1;
  if (!__OFADD__(v27, 1))
  {
    if (v37 >= v46)
    {
      v36 = 1;
    }
    else
    {
      v38 = ~v27 + v46;
      v39 = v45 + v30 * v37;
      while (1)
      {
        v40 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v18, v39, v15);
        MEMORY[0x24BDAC7A8](v40);
        v41 = v50;
        *(&v45 - 6) = v49;
        *(&v45 - 5) = v41;
        v42 = v51;
        *(&v45 - 4) = a10;
        *(&v45 - 3) = v42;
        v44 = v52;
        v43 = Rope._Node.forEachWhile(_:)((uint64_t (*)(char *))sub_2382F19F4, (uint64_t)(&v45 - 8), v15);
        result = v33(v18, v15);
        if ((v43 & 1) == 0)
          break;
        v39 += v30;
        if (!--v38)
        {
          v36 = 1;
          goto LABEL_10;
        }
      }
      v36 = 0;
LABEL_10:
      v35 = v48;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_2382F170C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v10 = sub_23835BAFC();
  v11 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(unsigned __int16 *)a1;
  if (*(_WORD *)a1)
  {
    v17 = *(unsigned __int8 *)(a2 + 19);
    v18 = __OFSUB__(a3, v17);
    v19 = a3 - v17;
    if (v18)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (__OFADD__(v19, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v19 + 1 <= 0)
    {
      v20 = 0;
      goto LABEL_15;
    }
    if ((_DWORD)v16 != 1)
    {
      v21 = (unsigned __int8 *)(a2 + 43);
      v20 = 1;
      while (1)
      {
        v22 = *v21;
        v21 += 24;
        a3 = v19 - v22;
        if (__OFSUB__(v19, v22))
          break;
        if (__OFADD__(a3, 1))
          goto LABEL_28;
        if (a3 + 1 < 1)
        {
          a3 = v19;
          goto LABEL_15;
        }
        ++v20;
        v19 = a3;
        if (v16 == v20)
          goto LABEL_13;
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    a3 = v19;
  }
LABEL_13:
  if (a3)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  v20 = *(unsigned __int16 *)a1;
LABEL_15:
  v5 = a2 + 24 * v20;
  if (a3 >= *(unsigned __int8 *)(v5 + 19))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v4 = *(_QWORD *)v5;
  a1 = *(_QWORD *)(v5 + 8);
  v13 = *(unsigned __int8 *)(v5 + 20);
  v44 = a2;
  v45 = result;
  if ((a1 & 0x1000000000000000) != 0)
  {
LABEL_30:
    v24 = MEMORY[0x23B83080C](15, v13, v4, a1);
    goto LABEL_21;
  }
  v23 = HIBYTE(a1) & 0xF;
  if ((a1 & 0x2000000000000000) == 0)
    v23 = v4 & 0xFFFFFFFFFFFFLL;
  if (v23 < v13)
  {
    __break(1u);
    goto LABEL_32;
  }
  v24 = (v13 << 16) | 4;
LABEL_21:
  swift_bridgeObjectRetain();
  sub_23825E150(v24, v4, a1);
  v25 = sub_23835B418();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)v5;
  v27 = *(_QWORD *)(v5 + 8);
  swift_bridgeObjectRetain();
  v28 = sub_23825E150(v25, v26, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRelease();
  sub_23825ACC0(v28, v30, v32, v34);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a4, v15, v45);
  if (__OFADD__(v20, 1))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 + 1 < v16)
  {
    v35 = ~v20 + v16;
    v36 = v44 + 24 * v20 + 32;
    do
    {
      swift_bridgeObjectRetain();
      v37 = sub_23835AF80();
      v39 = v38;
      v41 = v40;
      v43 = v42;
      swift_bridgeObjectRelease();
      sub_238332138(v37, v39, v41, v43);
      swift_bridgeObjectRelease();
      v36 += 24;
      --v35;
    }
    while (v35);
  }
  return 1;
}

uint64_t sub_2382F19F4(uint64_t a1)
{
  uint64_t v1;

  return sub_2382B2000(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 40));
}

uint64_t static Heap._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t TreeSet.formIntersection(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = TreeSet._intersection<A>(_:)(a1, a2, *(char **)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(a4 + 16), (char *)(MEMORY[0x24BEE4AE0] + 8), *(_QWORD *)(a4 + 24));
  v7 = v6;
  v9 = v8;
  result = swift_release();
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v7;
  *(_QWORD *)(v4 + 16) = v9;
  return result;
}

uint64_t TreeSet.formIntersection<A>(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = TreeSet._intersection<A>(_:)(a1, a2, *(char **)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(a4 + 16), a5, *(_QWORD *)(a4 + 24));
  v8 = v7;
  v10 = v9;
  result = swift_release();
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v8;
  *(_QWORD *)(v5 + 16) = v10;
  return result;
}

uint64_t TreeSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = TreeSet.intersection<A>(_:)(a1, *(char **)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24), a4);
  v7 = v6;
  v9 = v8;
  result = swift_release();
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v7;
  *(_QWORD *)(v4 + 16) = v9;
  return result;
}

uint64_t static Rope.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2382F1B94(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static _RopePath.< infix(_:_:)) & 1;
}

uint64_t static Rope.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2382F1B94(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static _RopePath.== infix(_:_:)) & 1;
}

uint64_t sub_2382F1B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return a9(a2, a5, AssociatedTypeWitness, AssociatedConformanceWitness);
}

Swift::Bool __swiftcall Rope.Index._isEmpty(below:)(Swift::UInt8 below)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.isEmpty(below:)(below);
}

Swift::Void __swiftcall Rope.Index._clear(below:)(Swift::UInt8 below)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for _RopePath(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  _RopePath.clear(below:)(below);
}

uint64_t Rope.Index._version.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Rope.Index._version.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Rope.Index._path.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Rope.Index._path.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Rope.Index._path.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Rope.Index._leaf.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Rope.Index._leaf.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Rope.Index._leaf.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t static Rope.Index._invalid.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  _RopePath.init(_value:)(-1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return 0;
}

BOOL Rope.Index._isValid.getter(uint64_t a1, uint64_t a2)
{
  return a2 != -1;
}

uint64_t sub_2382F1E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Rope.Index.== infix(_:_:)(a1, *(_QWORD *)(a1 + 8), a3, a4, *(_QWORD *)(a2 + 8), a6, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Rope.Index.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.hash(into:)();
}

uint64_t Rope.Index.hashValue.getter()
{
  sub_23835B9E8();
  Rope.Index.hash(into:)();
  return sub_23835BA48();
}

uint64_t sub_2382F1F3C()
{
  return Rope.Index.hashValue.getter();
}

uint64_t sub_2382F1F48()
{
  return Rope.Index.hash(into:)();
}

uint64_t sub_2382F1F54()
{
  sub_23835B9E8();
  Rope.Index.hash(into:)();
  return sub_23835BA48();
}

uint64_t sub_2382F1F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Rope.Index.< infix(_:_:)(a1, *(_QWORD *)(a1 + 8), a3, a4, *(_QWORD *)(a2 + 8), a6, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Rope.Index.description.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  MEMORY[0x23B831670](&protocol conformance descriptor for _RopePath<A>, v3);
  sub_23835B904();
  return 0;
}

uint64_t sub_2382F2068()
{
  return Rope.Index.description.getter();
}

uint64_t Rope.Index._height.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return _RopePath.height.getter(a2, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void sub_2382F20F8()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382F2108(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_2382F2164(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t type metadata accessor for Rope.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Rope.Index);
}

unint64_t *sub_2382F21C4(unint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = result[4];
  v5 = 2 * (v3[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v3)
    v5 = 0;
  if (v5 < v4 >> 10)
  {
    __break(1u);
  }
  else
  {
    v6 = *result;
    if (v4 >> 10 == *result >> 10)
      return result;
    result = (unint64_t *)(v6 >> 11);
    if (v4 >> 11 >= v6 >> 11)
      return (unint64_t *)sub_2382FEC48((uint64_t)result, v4 >> 11, a3);
  }
  __break(1u);
  return result;
}

unint64_t _s19CollectionsInternal9BigStringV17UnicodeScalarViewV6remove2ats0E0O0F0VAC5IndexV_tF_0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[7];

  v11 = *(_QWORD *)v4;
  v12 = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)v4)
    v13 = 2 * (v12 & 0x1FFFFFFFFFFFFFLL) > a1 >> 10;
  else
    v13 = 0;
  if (v13)
  {
    v9 = *(_QWORD *)(v4 + 8);
    v10 = *(_QWORD *)(v4 + 16);
    v5 = *(_QWORD *)(v4 + 24);
    v8 = *(_QWORD *)(v4 + 40);
    v44[0] = *(_QWORD *)v4;
    v44[1] = v9;
    v44[2] = v10;
    v44[3] = v5;
    v44[4] = v12;
    v44[5] = v8;
    v4 = (unint64_t)v44;
    result = sub_2382644F4(a1, a2, a3, a4);
    if (v17 == 1)
    {
      __break(1u);
      return result;
    }
    if (v15 == v8)
    {
      v7 = result;
      v6 = v17;
      v29 = v16;
      v30 = v8;
      v8 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
      if (v17)
      {
        v18 = v17 + 24 * ((v16 >> ((4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C)) & 0xF);
        v12 = *(_QWORD *)(v18 + 24);
        v4 = *(_QWORD *)(v18 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        v39 = v11;
        v40 = v9;
        v41 = v10;
        v42 = v5;
        v43 = v12;
        v5 = v16;
        swift_unknownObjectRetain();
        sub_238261C98(v5, (uint64_t)&v31);
        swift_unknownObjectRelease();
        v12 = v31;
        v4 = v32;
      }
      v10 = v7;
      v9 = v7 >> 10;
      sub_23826720C(v8, v12, v4);
      if ((v4 & 0x1000000000000000) == 0)
      {
        if ((v4 & 0x2000000000000000) == 0)
        {
          v28 = v7;
          v5 = v7 >> 10;
          if ((v12 & 0x1000000000000000) != 0)
            goto LABEL_14;
          goto LABEL_30;
        }
        v28 = v6;
        v31 = v12;
        v32 = v4 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        v10 = v7;
        v19 = sub_23835B640();
        swift_bridgeObjectRelease();
        v20 = sub_23826720C(v8, v12, v4) >> 16;
        v31 = v12;
        v32 = v4 & 0xFFFFFFFFFFFFFFLL;
        v5 = *((unsigned __int8 *)&v31 + v20);
        goto LABEL_18;
      }
      goto LABEL_28;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_28:
  v19 = sub_23835B5A4();
  sub_23826720C(v8, v12, v4);
  v8 = sub_23835ADB8();
  swift_bridgeObjectRelease();
  while (1)
  {
    v26 = (v7 >> 11) - v10 + (v8 >> 16);
    v27 = (v8 & 0xC000) != 0 ? (v26 << 11) | 0x400 : v26 << 11;
    if (v9 <= v27 >> 10)
      break;
    __break(1u);
LABEL_30:
    sub_23835B634();
LABEL_14:
    swift_bridgeObjectRetain();
    v19 = sub_23835B640();
    swift_bridgeObjectRelease();
    v20 = sub_23826720C(v8, v12, v4) >> 16;
    if ((v12 & 0x1000000000000000) != 0)
      v21 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v21 = sub_23835B634();
    v9 = v5;
    v10 = v28;
    v5 = *(unsigned __int8 *)(v21 + v20);
LABEL_18:
    swift_bridgeObjectRelease();
    v24 = __clz(v5 ^ 0xFF) - 24;
    if ((v5 & 0x80u) == 0)
      v25 = 1;
    else
      v25 = v24;
    v8 = ((v20 + v25) << 16) | 5;
  }
  v31 = v7;
  v32 = v30;
  v33 = v29;
  v34 = v6;
  v35 = v27 | BYTE2(v8);
  v36 = v30;
  v37 = v29;
  v38 = v6;
  BigString.removeSubrange(_:)(&v31, v22, v23);
  return v19;
}

uint64_t Deque._UnsafeHandle.copyElements()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[16];
  _BYTE v14[16];

  type metadata accessor for _DequeBuffer(0, a3, a3, a4);
  v13[14] = a1;
  v13[15] = a2;
  sub_23835B610();
  swift_retain();
  v7 = sub_23835B814();
  v8 = v7;
  if (*(uint64_t *)(a1 + 8) < 1)
  {
    swift_release();
  }
  else
  {
    v9 = MEMORY[0x24BDAC7A8](v7);
    v13[8] = a3;
    v13[9] = a1;
    v13[10] = a2;
    MEMORY[0x24BDAC7A8](v9);
    v13[2] = a3;
    v13[3] = sub_2382F43D4;
    v13[4] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DAA90, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, a3, v11, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v14);
    swift_release();
  }
  return v8;
}

uint64_t Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[16];
  _BYTE v15[16];

  v7 = *(_QWORD *)(a2 + 8);
  type metadata accessor for _DequeBuffer(0, a4, a3, a4);
  v14[14] = v7;
  sub_23835B610();
  swift_retain();
  v8 = sub_23835B814();
  v9 = v8;
  if (v7 >= 1)
  {
    v10 = MEMORY[0x24BDAC7A8](v8);
    v14[8] = a4;
    v14[9] = a2;
    v14[10] = a3;
    MEMORY[0x24BDAC7A8](v10);
    v14[2] = a4;
    v14[3] = sub_2382F46A0;
    v14[4] = v11;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v14, v9, (uint64_t)&type metadata for _DequeBufferHeader, a4, v12, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v15);
    *(_QWORD *)(a2 + 8) = 0;
  }
  swift_release();
  return v9;
}

uint64_t Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[16];
  _BYTE v14[16];

  type metadata accessor for _DequeBuffer(0, a4, a3, a4);
  v13[14] = a2;
  v13[15] = a3;
  sub_23835B610();
  swift_retain();
  v7 = sub_23835B814();
  v8 = v7;
  if (*(uint64_t *)(a2 + 8) < 1)
  {
    swift_release();
  }
  else
  {
    v9 = MEMORY[0x24BDAC7A8](v7);
    v13[8] = a4;
    v13[9] = a2;
    v13[10] = a3;
    MEMORY[0x24BDAC7A8](v9);
    v13[2] = a4;
    v13[3] = sub_2382F4700;
    v13[4] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, a4, v11, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v14);
    swift_release();
  }
  return v8;
}

uint64_t Deque._UnsafeHandle.startSlot.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t Deque._UnsafeHandle.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t Deque._UnsafeHandle.limSlot.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(forOffset:)(Swift::Int forOffset)
{
  Swift::Int *v1;
  Swift::Int v2;
  Swift::Int v3;

  v2 = v1[2] + forOffset;
  v3 = *v1;
  if (v2 < *v1)
    v3 = 0;
  return (CollectionsInternal::_DequeSlot)(v2 - v3);
}

CollectionsInternal::_DequeSlot Deque._UnsafeHandle.endSlot.getter(CollectionsInternal::_DequeSlot *a1)
{
  return Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1].position);
}

uint64_t Deque._UnsafeHandle.ptr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a1;
}

_QWORD *Deque._UnsafeHandle.segments()@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  v3 = result[2];
  v4 = *result - v3;
  if (__OFSUB__(*result, v3))
  {
    __break(1u);
  }
  else
  {
    v5 = result[1];
    if (v4 >= v5)
    {
      result = (_QWORD *)_UnsafeWrappedBuffer.init(start:count:)((uint64_t)v8);
      goto LABEL_6;
    }
    if (!__OFSUB__(v5, v4))
    {
      result = (_QWORD *)_UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)v8);
LABEL_6:
      v6 = v9;
      v7 = v8[1];
      *(_OWORD *)a2 = v8[0];
      *(_OWORD *)(a2 + 16) = v7;
      *(_BYTE *)(a2 + 32) = v6;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.capacity.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t Deque._UnsafeHandle.buffer(for:)(uint64_t result, uint64_t a2)
{
  if (!__OFSUB__(a2, result))
    return sub_23835AD58();
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.mutableBuffer.getter()
{
  return sub_23835B358();
}

uint64_t Deque._UnsafeHandle.mutableBuffer(for:)(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    sub_23835AD58();
    return sub_23835B388();
  }
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[6];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _QWORD v35[4];
  char v36;
  uint64_t v37;
  uint64_t v38;

  if (result != a2)
  {
    v37 = v8;
    v38 = v9;
    Deque._UnsafeHandle.segments(forOffsets:)(result, a2, a4, (uint64_t)&v32);
    v14 = sub_23835B388();
    v16 = v15;
    sub_23835AD7C();
    v17 = sub_23835B334();
    v18 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v34, &v33, v17);
    v19 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v18)(v35, v34, v17);
    MEMORY[0x24BDAC7A8](v19);
    v28[2] = a6;
    v20 = sub_23835B3A0();
    sub_23828E824((void (*)(char *, char *))sub_2382F471C, (uint64_t)v28, MEMORY[0x24BEE4078], v20, v21, (uint64_t)&v29);
    v24 = v29;
    if (v30)
      v25 = v29;
    else
      v25 = 0;
    if (v30)
      v26 = v31;
    else
      v26 = 1;
    if (!v31)
      v24 = v25;
    v35[0] = v14;
    v35[1] = v16;
    v35[2] = v24;
    v35[3] = v30;
    v36 = v26;
    v27 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a6, v22, v23);
    return _UnsafeMutableWrappedBuffer.assign<A>(from:)(a3, v27, a7, a8);
  }
  return result;
}

Swift::Int Deque._UnsafeHandle.uncheckedRemove(offsets:)(uint64_t a1, uint64_t a2, CollectionsInternal::_DequeSlot *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[4];
  char v30;

  Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, &a3->position, (uint64_t)&v26);
  v9 = sub_23835B388();
  v11 = v10;
  sub_23835AD7C();
  v12 = sub_23835B334();
  v13 = *(void (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v28, &v27, v12);
  v13(v29, v28, v12);
  v22[2] = a5;
  v14 = sub_23835B3A0();
  sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v22, MEMORY[0x24BEE4078], v14, v15, (uint64_t)&v23);
  v18 = v23;
  if (v24)
    v19 = v23;
  else
    v19 = 0;
  if (v24)
    v20 = v25;
  else
    v20 = 1;
  if (!v25)
    v18 = v19;
  v29[0] = v9;
  v29[1] = v11;
  v29[2] = v18;
  v29[3] = v24;
  v30 = v20;
  type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v16, v17);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  return Deque._UnsafeHandle.closeGap(offsets:)(a1, a2, a3);
}

uint64_t Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[40];

  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = &v23[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v13 >= 1)
  {
    Deque._UnsafeHandle.openGap(ofSize:atOffset:)(v13, v14, v15, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a1, a7);
    v20 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a6, v18, v19);
    _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v17, v20, a7, a8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a7);
}

uint64_t Deque._UnsafeHandle.count.setter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  CollectionsInternal::_DequeSlot *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3 + *(_QWORD *)(v8 + 72) * Deque._UnsafeHandle.slot(_:offsetBy:)(v11[2], v11[1].position).position;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
  result = sub_2382F7024((uint64_t)v10, v12, a4);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(a2 + 8) = v16;
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _QWORD v33[4];
  char v34;

  if (a2 < 1)
    return result;
  v6 = result;
  result = a3[1];
  v7 = __OFADD__(result, a2);
  v8 = result + a2;
  if (v7)
  {
    __break(1u);
    goto LABEL_15;
  }
  a3[1] = v8;
  if (v8 < result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  Deque._UnsafeHandle.segments(forOffsets:)(result, v8, a3, (uint64_t)&v30);
  v10 = sub_23835B388();
  v12 = v11;
  v13 = sub_23835AD7C();
  v14 = sub_23835B334();
  v15 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v32, &v31, v14);
  v16 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v15)(v33, v32, v14);
  MEMORY[0x24BDAC7A8](v16);
  v26[2] = a5;
  v17 = sub_23835B3A0();
  sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v26, MEMORY[0x24BEE4078], v17, v18, (uint64_t)&v27);
  v21 = v27;
  if (v28)
    v22 = v27;
  else
    v22 = 0;
  if (v28)
    v23 = v29;
  else
    v23 = 1;
  if (!v29)
    v21 = v22;
  v33[0] = v10;
  v33[1] = v12;
  v33[2] = v21;
  v33[3] = v28;
  v34 = v23;
  v27 = v6;
  v28 = a2;
  v24 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v19, v20);
  v25 = MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v13);
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)&v27, v24, v13, v25);
}

CollectionsInternal::_DequeSlot Deque._UnsafeHandle.availableSegments()@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int v4;
  Swift::Int v5;
  CollectionsInternal::_DequeSlot result;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int position;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = a1[1];
  v4 = a1[2];
  result.position = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v4, v5).position;
  v7 = *a1;
  if (v5 >= *a1)
  {
    result.position = sub_23835B358();
    goto LABEL_6;
  }
  if (result.position < v4)
  {
    if (!__OFSUB__(v4, result.position))
    {
      sub_23835AD58();
      result.position = sub_23835B388();
LABEL_6:
      position = result.position;
      v10 = v8;
      v11 = 0;
      v12 = 0;
      v13 = 1;
LABEL_13:
      *(_QWORD *)a2 = position;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 24) = v12;
      *(_BYTE *)(a2 + 32) = v13;
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v7 < result.position)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(v7, result.position))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_23835AD58();
  result.position = sub_23835B388();
  v10 = v14;
  if ((a1[2] & 0x8000000000000000) == 0)
  {
    position = result.position;
    sub_23835AD58();
    result.position = sub_23835B388();
    v13 = v12 == 0;
    if (v12)
      v11 = result.position;
    else
      v11 = 0;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedPrepend(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  result = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[2];
  if (!v11)
  {
LABEL_5:
    v12 = *a2 - 1;
    if (__OFSUB__(*a2, 1))
      goto LABEL_9;
    goto LABEL_6;
  }
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  v13 = v7 + v12 * *(_QWORD *)(v8 + 72);
  (*(void (**)(char *))(v8 + 16))(v10);
  result = sub_2382F7024((uint64_t)v10, v13, a4);
  a2[2] = v12;
  v14 = a2[1];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (!v15)
  {
    a2[1] = v16;
    return result;
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.openGap(ofSize:atOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t position;
  Swift::Int v10;
  CollectionsInternal::_DequeSlot v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  Swift::Int v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  CollectionsInternal::_DequeSlot v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::Int v29;
  Swift::Int v30;
  BOOL v31;
  Swift::Int v32;
  Swift::Int v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  char v39;
  __int128 v40;
  _OWORD v42[2];
  char v43;

  v4 = a3[1];
  v5 = v4 - a2;
  if (__OFSUB__(v4, a2))
  {
    __break(1u);
    goto LABEL_81;
  }
  v7 = a2;
  v8 = result;
  position = a3[2];
  if (v5 <= a2)
  {
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v4).position;
    if (__OFADD__(v4, v8))
    {
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v10 = result;
    position = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v4 + v8).position;
    v22 = a3[2] + v7;
    v23 = *a3;
    if (v22 < *a3)
      v23 = 0;
    v14 = v22 - v23;
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)(v22 - v23), v8).position;
    v11.position = result;
    v18 = *a3;
    if (v10 <= 0)
      v24 = *a3;
    else
      v24 = v10;
    if (position <= 0)
      v25 = *a3;
    else
      v25 = position;
    if (v24 >= v14)
    {
      if (v25 < result)
      {
        if (__OFSUB__(0, v8))
        {
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        if (position >= 1)
        {
          v7 = v18 - v8;
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v7, position);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, position).position;
        }
        v31 = __OFSUB__(v5, position);
        v5 -= position;
        if (v31)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
    }
    else
    {
      if (v25 < result)
      {
        if (v10 >= 1)
        {
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v10);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v8, v10).position;
        }
        if (__OFSUB__(0, v8))
          goto LABEL_86;
        if (v8 >= 1)
        {
          v26.position = *a3 - v8;
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v26, v8);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v8).position;
        }
        v27 = v5 - v8;
        if (__OFSUB__(v5, v8))
          goto LABEL_87;
        v5 = v27 - v10;
        if (__OFSUB__(v27, v10))
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        if (v5 < 1)
          goto LABEL_66;
LABEL_65:
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v14, v5);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v5).position;
LABEL_66:
        v33 = a3[1];
        v31 = __OFADD__(v33, v8);
        v34 = v33 + v8;
        if (!v31)
        {
          a3[1] = v34;
          if (v11.position <= 0)
            v35 = *a3;
          else
            v35 = v11.position;
          v36 = v14;
          goto LABEL_79;
        }
        goto LABEL_83;
      }
      if (v10 >= 1)
      {
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)(0, v10);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v8, v10).position;
        v18 = *a3;
      }
      v5 = v18 - v14;
      if (__OFSUB__(v18, v14))
        goto LABEL_92;
    }
    if (v5 <= 0)
      goto LABEL_66;
    goto LABEL_65;
  }
  v10 = -result;
  if (__OFSUB__(0, result))
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v11.position = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, -result).position;
  v12 = a3[2] + v7;
  v13 = *a3;
  if (v12 < *a3)
    v13 = 0;
  v14 = v12 - v13;
  result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)(v12 - v13), -v8).position;
  v5 = result;
  v15 = *a3;
  if (v14 <= 0)
    v16 = *a3;
  else
    v16 = v14;
  if (result <= 0)
    v17 = *a3;
  else
    v17 = result;
  if (v16 >= position)
  {
    if (v17 >= v11.position)
    {
      if (v7 < 1)
        goto LABEL_74;
      sub_23835B31C();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      v29 = v11.position;
      v30 = v7;
      goto LABEL_73;
    }
    v28 = v15 - v11.position;
    if (__OFSUB__(v15, v11.position))
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    if (v28 < 1)
      goto LABEL_47;
    sub_23835B31C();
    Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v28);
    v20 = v11.position;
    v21 = v28;
    goto LABEL_46;
  }
  v7 = v15 - position;
  LOBYTE(v18) = __OFSUB__(v15, position);
  if (v17 < v11.position)
  {
    if ((v18 & 1) != 0)
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v7 >= 1)
    {
      sub_23835B31C();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }
    if (v8 < 1)
      goto LABEL_47;
    v19 = *a3 - v8;
    sub_23835B31C();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0, v8);
    v20 = v19;
    v21 = v8;
LABEL_46:
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v20, v21).position;
LABEL_47:
    if (v5 < 1)
      goto LABEL_74;
    sub_23835B31C();
    Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v8, v5);
    v29 = 0;
    v30 = v5;
    goto LABEL_73;
  }
LABEL_56:
  if ((v18 & 1) == 0)
  {
    if (v7 >= 1)
    {
      sub_23835B31C();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }
    if (v14 < 1)
    {
LABEL_74:
      a3[2] = v11.position;
      v37 = a3[1];
      v31 = __OFADD__(v37, v8);
      v38 = v37 + v8;
      if (!v31)
      {
        a3[1] = v38;
        if (v14 <= 0)
          v35 = *a3;
        else
          v35 = v14;
        v36 = v5;
LABEL_79:
        result = Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(v36, v35, a3, (uint64_t)v42);
        v39 = v43;
        v40 = v42[1];
        *(_OWORD *)a4 = v42[0];
        *(_OWORD *)(a4 + 16) = v40;
        *(_BYTE *)(a4 + 32) = v39;
        return result;
      }
      goto LABEL_84;
    }
    v32 = *a3 + v10;
    sub_23835B31C();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0, v14);
    v29 = v32;
    v30 = v14;
LABEL_73:
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v29, v30).position;
    goto LABEL_74;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedRemoveLast()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (__OFSUB__(*(_QWORD *)(result + 8), 1))
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    result = sub_23835B328();
    v2 = *(_QWORD *)(v1 + 8);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (!v3)
    {
      *(_QWORD *)(v1 + 8) = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveLast(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _QWORD v31[4];
  char v32;

  if (a1 >= 1)
  {
    v3 = v1;
    v5 = v1[1];
    v6 = __OFSUB__(v5, a1);
    v7 = v5 - a1;
    if (v6)
    {
      __break(1u);
    }
    else if (v5 >= v7)
    {
      v8 = v2;
      Deque._UnsafeHandle.segments(forOffsets:)(v7, v5, v3, (uint64_t)&v28);
      v9 = sub_23835B388();
      v11 = v10;
      sub_23835AD7C();
      v12 = sub_23835B334();
      v13 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(v30, &v29, v12);
      v14 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v13)(v31, v30, v12);
      MEMORY[0x24BDAC7A8](v14);
      v24[2] = v8;
      v15 = sub_23835B3A0();
      sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v24, MEMORY[0x24BEE4078], v15, v16, (uint64_t)&v25);
      v19 = v25;
      if (v26)
        v20 = v25;
      else
        v20 = 0;
      if (v26)
        v21 = v27;
      else
        v21 = 1;
      if (!v27)
        v19 = v20;
      v31[0] = v9;
      v31[1] = v11;
      v31[2] = v19;
      v31[3] = v26;
      v32 = v21;
      type metadata accessor for _UnsafeMutableWrappedBuffer(0, v8, v17, v18);
      _UnsafeMutableWrappedBuffer.deinitialize()();
      v22 = v3[1];
      v6 = __OFSUB__(v22, a1);
      v23 = v22 - a1;
      if (!v6)
      {
        v3[1] = v23;
        return;
      }
LABEL_17:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t Deque._UnsafeHandle.uncheckedRemoveFirst()(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_23835B328();
  v3 = a1[2];
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    v6 = a1[1];
    if (v5 >= *a1)
      v5 = 0;
    a1[2] = v5;
    if (!__OFSUB__(v6, 1))
    {
      a1[1] = v6 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  CollectionsInternal::_DequeSlot *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::Int position;
  BOOL v20;
  Swift::Int v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _QWORD v29[4];
  char v30;

  if (a1 >= 1)
  {
    v3 = v2;
    v4 = (CollectionsInternal::_DequeSlot *)v1;
    Deque._UnsafeHandle.segments(forOffsets:)(0, a1, v1, (uint64_t)&v26);
    v6 = sub_23835B388();
    v8 = v7;
    sub_23835AD7C();
    v9 = sub_23835B334();
    v10 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v28, &v27, v9);
    v11 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v10)(v29, v28, v9);
    MEMORY[0x24BDAC7A8](v11);
    v22[2] = v3;
    v12 = sub_23835B3A0();
    sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v22, MEMORY[0x24BEE4078], v12, v13, (uint64_t)&v23);
    v16 = v23;
    if (v24)
      v17 = v23;
    else
      v17 = 0;
    if (v24)
      v18 = v25;
    else
      v18 = 1;
    if (!v25)
      v16 = v17;
    v29[0] = v6;
    v29[1] = v8;
    v29[2] = v16;
    v29[3] = v24;
    v30 = v18;
    type metadata accessor for _UnsafeMutableWrappedBuffer(0, v3, v14, v15);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    v4[2].position = Deque._UnsafeHandle.slot(_:offsetBy:)(v4[2], a1).position;
    position = v4[1].position;
    v20 = __OFSUB__(position, a1);
    v21 = position - a1;
    if (v20)
      __break(1u);
    else
      v4[1].position = v21;
  }
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveAll()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _QWORD v24[4];
  char v25;

  v2 = v0 + 1;
  if ((uint64_t)v0[1] >= 1)
  {
    v3 = v1;
    Deque._UnsafeHandle.segments()(v0, (uint64_t)&v21);
    v4 = sub_23835B388();
    v6 = v5;
    sub_23835AD7C();
    v7 = sub_23835B334();
    v8 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(v23, &v22, v7);
    v9 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v8)(v24, v23, v7);
    MEMORY[0x24BDAC7A8](v9);
    v17[2] = v3;
    v10 = sub_23835B3A0();
    sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v17, MEMORY[0x24BEE4078], v10, v11, (uint64_t)&v18);
    v14 = v18;
    if (v19)
      v15 = v18;
    else
      v15 = 0;
    if (v19)
      v16 = v20;
    else
      v16 = 1;
    if (!v20)
      v14 = v15;
    v24[0] = v4;
    v24[1] = v6;
    v24[2] = v14;
    v24[3] = v19;
    v25 = v16;
    type metadata accessor for _UnsafeMutableWrappedBuffer(0, v3, v12, v13);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    *v2 = 0;
    v2[1] = 0;
  }
}

uint64_t Deque._UnsafeHandle._elements.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Deque._UnsafeHandle.header.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *(*Deque._UnsafeHandle.count.modify(_QWORD *a1, uint64_t a2))(_QWORD *result)
{
  *a1 = *(_QWORD *)(a2 + 8);
  a1[1] = a2;
  return sub_2382F3E14;
}

_QWORD *sub_2382F3E14(_QWORD *result)
{
  *(_QWORD *)(result[1] + 8) = *result;
  return result;
}

uint64_t Deque._UnsafeHandle.startSlot.setter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

_QWORD *(*Deque._UnsafeHandle.startSlot.modify(_QWORD *a1, uint64_t a2))(_QWORD *result)
{
  *a1 = *(_QWORD *)(a2 + 16);
  a1[1] = a2;
  return sub_2382F3E44;
}

_QWORD *sub_2382F3E44(_QWORD *result)
{
  *(_QWORD *)(result[1] + 16) = *result;
  return result;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(after:)(CollectionsInternal::_DequeSlot after)
{
  _QWORD *v1;

  if (__OFADD__(after.position, 1))
  {
    __break(1u);
  }
  else if (after.position + 1 >= *v1)
  {
    return 0;
  }
  else
  {
    ++after.position;
  }
  return after;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(before:)(CollectionsInternal::_DequeSlot before)
{
  _QWORD *v1;
  BOOL v2;
  CollectionsInternal::_DequeSlot result;

  if (before.position)
  {
    v2 = __OFSUB__(before.position, 1);
    result.position = before.position - 1;
    if (!v2)
      return result;
    __break(1u);
  }
  result.position = *v1 - 1;
  if (__OFSUB__(*v1, 1))
    __break(1u);
  return result;
}

CollectionsInternal::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(_:offsetBy:)(CollectionsInternal::_DequeSlot _, Swift::Int offsetBy)
{
  Swift::Int *v2;
  CollectionsInternal::_DequeSlot result;
  BOOL v4;

  v4 = __OFADD__(_.position, offsetBy);
  result.position = _.position + offsetBy;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (offsetBy < 0)
  {
LABEL_7:
    if ((result.position & 0x8000000000000000) == 0)
      return result;
    v4 = __OFADD__(result.position, *v2);
    result.position += *v2;
    if (!v4)
      return result;
LABEL_11:
    __break(1u);
    return result;
  }
  v4 = __OFSUB__(result.position, *v2);
  if (result.position >= *v2)
  {
    result.position -= *v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t Deque._UnsafeHandle.segments(forOffsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;

  v5 = a3[2];
  v6 = v5 + result;
  v7 = *a3;
  if (v5 + result >= *a3)
    v8 = *a3;
  else
    v8 = 0;
  v9 = v5 + a2;
  if (v9 >= v7)
    v10 = *a3;
  else
    v10 = 0;
  v11 = __OFSUB__(a2, result);
  v12 = a2 - result;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    v13 = v6 - v8;
    if (!v12 || v13 < v9 - v10)
    {
      result = _UnsafeWrappedBuffer.init(start:count:)((uint64_t)v16);
      goto LABEL_13;
    }
    if (!__OFSUB__(v7, v13))
    {
      result = _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)v16);
LABEL_13:
      v14 = v17;
      v15 = v16[1];
      *(_OWORD *)a4 = v16[0];
      *(_OWORD *)(a4 + 16) = v15;
      *(_BYTE *)(a4 + 32) = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.mutableSegments()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[4];
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v22);
  v5 = sub_23835B388();
  v7 = v6;
  sub_23835AD7C();
  v8 = sub_23835B334();
  v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v24, &v23, v8);
  v9((uint64_t *)v18, v24, v8);
  v17[2] = a2;
  v10 = sub_23835B3A0();
  result = sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v17, MEMORY[0x24BEE4078], v10, v11, (uint64_t)&v19);
  v13 = v19;
  v14 = v20;
  if (v20)
    v15 = v19;
  else
    v15 = 0;
  if (v20)
    v16 = v21;
  else
    v16 = 1;
  if (!v21)
    v13 = v15;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v14;
  *(_BYTE *)(a3 + 32) = v16;
  return result;
}

uint64_t Deque._UnsafeHandle.mutableSegments(forOffsets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a3, (uint64_t)&v24);
  v7 = sub_23835B388();
  v9 = v8;
  sub_23835AD7C();
  v10 = sub_23835B334();
  v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v26, &v25, v10);
  v11((uint64_t *)v20, v26, v10);
  v19[2] = a4;
  v12 = sub_23835B3A0();
  result = sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v19, MEMORY[0x24BEE4078], v12, v13, (uint64_t)&v21);
  v15 = v21;
  v16 = v22;
  if (v22)
    v17 = v21;
  else
    v17 = 0;
  if (v22)
    v18 = v23;
  else
    v18 = 1;
  if (!v23)
    v15 = v17;
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v16;
  *(_BYTE *)(a5 + 32) = v18;
  return result;
}

uint64_t Deque._UnsafeHandle.initialize(at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2382F41E0(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE0990], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1BE8]);
}

uint64_t Deque._UnsafeHandle.moveInitialize(at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2382F41E0(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1CB0], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1C08]);
}

uint64_t sub_2382F41E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  BOOL v14;

  if (a3 < 1)
    return a1;
  result = a7(a2, a3, a6);
  if (result)
  {
    result = a8(result, a3, a5 + *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72) * a1, a6);
    v14 = __OFADD__(a1, a3);
    a1 += a3;
    if (!v14)
      return a1;
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_source_CollectionsInternal__DequeSlot_target_CollectionsInternal__DequeSlot __swiftcall Deque._UnsafeHandle.move(from:to:count:)(CollectionsInternal::_DequeSlot from, CollectionsInternal::_DequeSlot to, Swift::Int count)
{
  Swift::Int position;
  Swift::Int v7;
  Swift::tuple_source_CollectionsInternal__DequeSlot_target_CollectionsInternal__DequeSlot result;

  if (count >= 1)
  {
    sub_23835B31C();
    from.position = Deque._UnsafeHandle.slot(_:offsetBy:)(from, count).position;
    to.position = Deque._UnsafeHandle.slot(_:offsetBy:)(to, count).position;
  }
  position = from.position;
  v7 = to.position;
  result.target.position = v7;
  result.source.position = position;
  return result;
}

__n128 sub_2382F42E8@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v2;
  unint64_t v3;
  __n128 result;

  v2 = *(__n128 **)(v1 + 16);
  v3 = v2[1].n128_u64[0];
  result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t sub_2382F4300(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16[2];
  char v17;

  Deque._UnsafeHandle.segments()(a3, (uint64_t)v13);
  Deque._UnsafeHandle.initialize(at:from:)(a3[2], v13[0], v13[1], v8, a2, a5);
  sub_23835AD7C();
  v9 = sub_23835B334();
  v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v15, &v14, v9);
  result = v10(v16, v15, v9);
  if ((v17 & 1) == 0)
    return Deque._UnsafeHandle.initialize(at:from:)(0, v16[0], v16[1], v12, a2, a5);
  return result;
}

uint64_t sub_2382F43D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382F4300(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382F43F0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16[2];
  char v17;

  Deque._UnsafeHandle.segments()(a3, (uint64_t)v13);
  v8 = Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v7, a2, a5);
  sub_23835AD7C();
  v9 = sub_23835B334();
  v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v15, &v14, v9);
  result = v10(v16, v15, v9);
  if ((v17 & 1) == 0)
    return Deque._UnsafeHandle.initialize(at:from:)(v8, v16[0], v16[1], v12, a2, a5);
  return result;
}

uint64_t sub_2382F44CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  result = sub_23835B61C();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  return result;
}

uint64_t sub_2382F450C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD v16[4];
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  Deque._UnsafeHandle.segments()(a3, (uint64_t)&v21);
  sub_23835B388();
  v7 = v6;
  sub_23835AD7C();
  v8 = sub_23835B334();
  v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v23, &v22, v8);
  v9((uint64_t *)v17, v23, v8);
  v16[2] = a5;
  v10 = sub_23835B3A0();
  result = sub_23828E824((void (*)(char *, char *))sub_2382F5008, (uint64_t)v16, MEMORY[0x24BEE4078], v10, v11, (uint64_t)&v18);
  v13 = v19;
  if (v19)
    v14 = v20;
  else
    v14 = 1;
  if (v7 >= 1)
  {
    result = sub_23835AD4C();
    if (!result)
    {
      __break(1u);
      goto LABEL_15;
    }
    result = sub_23835B31C();
  }
  if (v13 < 1)
    v15 = 1;
  else
    v15 = v14;
  if ((v15 & 1) == 0)
  {
    result = sub_23835AD4C();
    if (result)
      return sub_23835B31C();
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_2382F46A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382F450C(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382F46BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = sub_23835B61C();
  v5 = *(_QWORD *)(v3 + 8);
  *a1 = result;
  a1[1] = v5;
  a1[2] = 0;
  return result;
}

uint64_t sub_2382F4700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2382F43F0(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_2382F471C@<X0>(uint64_t *a1@<X8>)
{
  return sub_23828ED0C(a1);
}

CollectionsInternal::_DequeSlot Deque._UnsafeHandle.withUnsafeSegment<A>(startingAt:maximumCount:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, CollectionsInternal::_DequeSlot *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  CollectionsInternal::_DequeSlot result;
  Swift::Int v26;
  Swift::Int position;
  Swift::Int v28;
  Swift::Int v29;
  BOOL v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a10;
  v39 = *(_QWORD *)(a10 - 8);
  v40 = a1;
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v21 = (char *)&v35 - v20;
  v23 = *(_QWORD *)(v22 + 8);
  if (v23 <= v24)
    goto LABEL_17;
  v16 = v18;
  v36 = v17;
  v37 = v19;
  v38 = a5;
  result.position = Deque._UnsafeHandle.slot(_:offsetBy:)(a7[2], v23).position;
  v26 = a7[2].position + a2;
  position = a7->position;
  if (v26 >= a7->position)
    v28 = a7->position;
  else
    v28 = 0;
  v29 = v26 - v28;
  if (v29 < result.position)
    position = result.position;
  v30 = __OFSUB__(position, v29);
  v31 = (void (*)(uint64_t))(position - v29);
  if (!v30)
  {
    v32 = 0x7FFFFFFFFFFFFFFFLL;
    if ((v16 & 1) == 0)
      v32 = v36;
    if ((uint64_t)v31 >= v32)
      a5 = (void (*)(uint64_t))v32;
    else
      a5 = v31;
    v33 = sub_23835AD58();
    v38(v33);
    if (v10)
      return (CollectionsInternal::_DequeSlot)v23;
    v23 = (Swift::Int)a5 + a2;
    if (!__OFADD__(a2, a5))
    {
LABEL_19:
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v21, v41);
      return (CollectionsInternal::_DequeSlot)v23;
    }
    __break(1u);
LABEL_17:
    v34 = sub_23835AD58();
    a5(v34);
    v21 = v16;
    if (v10)
      return (CollectionsInternal::_DequeSlot)v23;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

Swift::Int Deque._UnsafeHandle.uncheckedPrepend(contentsOf:)(Swift::Int result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _BYTE v19[40];

  if (a2 >= 1)
  {
    v8 = result;
    v9 = a3[2];
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v9, -a2).position;
    a3[2] = result;
    v10 = a3[1];
    v11 = __OFADD__(v10, a2);
    v12 = v10 + a2;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      a3[1] = v12;
      Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(result, v9, a3, (uint64_t)v19);
      v18[0] = v8;
      v18[1] = a2;
      v15 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v13, v14);
      v16 = sub_23835AD7C();
      v17 = MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v16);
      return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v18, v15, v16, v17);
    }
  }
  return result;
}

uint64_t Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (result >= a2)
  {
    if (!__OFSUB__(*a3, result))
    {
      v5 = sub_23835B358();
      v7 = v11;
      result = sub_23835B358();
      v10 = v9 == 0;
      if (v9)
        v8 = result;
      else
        v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    if (!__OFSUB__(a2, result))
    {
      result = sub_23835B358();
      v5 = result;
      v7 = v6;
      v8 = 0;
      v9 = 0;
      v10 = 1;
LABEL_8:
      *(_QWORD *)a4 = v5;
      *(_QWORD *)(a4 + 8) = v7;
      *(_QWORD *)(a4 + 16) = v8;
      *(_QWORD *)(a4 + 24) = v9;
      *(_BYTE *)(a4 + 32) = v10;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int Deque._UnsafeHandle.closeGap(offsets:)(Swift::Int result, uint64_t a2, CollectionsInternal::_DequeSlot *a3)
{
  Swift::Int v3;
  Swift::Int v5;
  CollectionsInternal::_DequeSlot v6;
  Swift::Int position;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  CollectionsInternal::_DequeSlot v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  Swift::Int v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  CollectionsInternal::_DequeSlot v25;
  Swift::Int v26;
  CollectionsInternal::_DequeSlot v27;
  Swift::Int v28;
  BOOL v29;
  CollectionsInternal::_DequeSlot v30;
  CollectionsInternal::_DequeSlot v31;
  Swift::Int v32;
  BOOL v33;
  Swift::Int v34;
  Swift::Int v35;
  Swift::Int v36;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v3 < 1)
    return result;
  v5 = result;
  position = a3[1].position;
  v6.position = a3[2].position;
  v8 = a3->position;
  if (v6.position + result >= a3->position)
    v9 = a3->position;
  else
    v9 = 0;
  if (v6.position + a2 < v8)
    v8 = 0;
  v10 = position - a2;
  if (__OFSUB__(position, a2))
    goto LABEL_83;
  v11 = v6.position + result - v9;
  v12 = v6.position + a2 - v8;
  if (v10 > result)
  {
    result = Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v3).position;
    v10 = result;
    if (!v5)
      goto LABEL_68;
    v13 = a3->position;
    if (v12 <= 0)
      v14 = a3->position;
    else
      v14 = v12;
    if (v11 <= 0)
      v15 = a3->position;
    else
      v15 = v11;
    if (v6.position >= v15)
    {
      if (v14 < result)
      {
        if (v11 >= 1)
        {
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v11);
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v3, v11);
          v13 = a3->position;
        }
        v27.position = v13 - v3;
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)(v27, v3);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v3).position;
        v11 = v5 - v12;
        if (__OFSUB__(v5, v12))
          goto LABEL_88;
        if (v11 < 1)
          goto LABEL_68;
        v12 = a3[2].position;
        goto LABEL_66;
      }
      if (__OFSUB__(0, v11))
      {
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v11 >= 1)
      {
        v12 -= v11;
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)(0, v11);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v11).position;
      }
      v33 = __OFSUB__(v5, v11);
      v11 = v5 - v11;
      if (v33)
        goto LABEL_91;
      goto LABEL_64;
    }
    if (v14 >= result)
    {
      if (v5 >= 1)
      {
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)(v6, v5);
        v31.position = v10;
        v32 = v5;
LABEL_67:
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(v31, v32).position;
        goto LABEL_68;
      }
      goto LABEL_68;
    }
    if (v12 >= 1)
    {
      v16.position = v13 - v3;
      sub_23835B31C();
      Deque._UnsafeHandle.slot(_:offsetBy:)(v16, v12);
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v12).position;
    }
    v11 = v5 - v12;
    if (!__OFSUB__(v5, v12))
    {
LABEL_64:
      if (v11 >= 1)
      {
        v12 = a3[2].position;
LABEL_66:
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v11);
        v31.position = v10;
        v32 = v11;
        goto LABEL_67;
      }
LABEL_68:
      a3[2].position = v10;
      v34 = a3[1].position;
      v33 = __OFSUB__(v34, v3);
      v35 = v34 - v3;
      if (!v33)
        goto LABEL_80;
      __break(1u);
      goto LABEL_71;
    }
    __break(1u);
  }
  result = Deque._UnsafeHandle.slot(_:offsetBy:)(v6, position).position;
  if (__OFSUB__(position, v3))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v17 = a3[2].position + position - v3;
  v18 = a3->position;
  if (v17 >= a3->position)
    v19 = a3->position;
  else
    v19 = 0;
  if (v10)
  {
    v20 = result;
    v21 = v17 - v19;
    if (v17 - v19 <= 0)
      v22 = a3->position;
    else
      v22 = v17 - v19;
    if (result <= 0)
      v23 = a3->position;
    else
      v23 = result;
    if (v12 >= v23)
    {
      v28 = v18 - v12;
      v29 = __OFSUB__(v18, v12);
      if (v22 >= v11)
      {
        if (v29)
        {
LABEL_92:
          __break(1u);
          return result;
        }
        if (v28 >= 1)
        {
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v28);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v28).position;
          v11 = result;
        }
        if (v20 >= 1)
        {
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v20);
          v25.position = v11;
          v26 = v20;
          goto LABEL_78;
        }
      }
      else
      {
        if (v29)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (v28 >= 1)
        {
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v28);
          v11 = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v28).position;
        }
        sub_23835B31C();
        v30.position = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v3).position;
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v3).position;
        if (v21 >= 1)
        {
          sub_23835B31C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v30, v21);
          v25.position = 0;
          v26 = v21;
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (v22 >= v11)
      {
LABEL_71:
        if (v10 < 1)
          goto LABEL_79;
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v10);
        v25.position = v11;
        v26 = v10;
        goto LABEL_78;
      }
      v24 = v18 - v11;
      if (__OFSUB__(v18, v11))
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if (v24 >= 1)
      {
        sub_23835B31C();
        v12 = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v24).position;
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v24).position;
      }
      if (__OFSUB__(v10, v24))
        goto LABEL_87;
      if (v10 - v24 >= 1)
      {
        sub_23835B31C();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v10 - v24);
        v25.position = 0;
        v26 = v10 - v24;
LABEL_78:
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(v25, v26).position;
      }
    }
  }
LABEL_79:
  v36 = a3[1].position;
  v33 = __OFSUB__(v36, v3);
  v35 = v36 - v3;
  if (v33)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
LABEL_80:
  a3[1].position = v35;
  return result;
}

uint64_t type metadata accessor for Deque._UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque._UnsafeHandle);
}

uint64_t sub_2382F5008@<X0>(uint64_t *a1@<X8>)
{
  return sub_2382F471C(a1);
}

uint64_t TreeSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a6;
  v37 = a5;
  v38 = a2;
  v40 = a4;
  v11 = MEMORY[0x24BEE4AE0] + 8;
  v12 = type metadata accessor for _HashNode.Builder(0, a7, MEMORY[0x24BEE4AE0] + 8, a8);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v33 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v34 = (char *)&v33 - v16;
  v17 = sub_23835B334();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v33 - v22;
  v36 = a8;
  v32 = a8;
  v24 = a7;
  v39 = a1;
  _HashNode.symmetricDifference<A>(_:_:)(0, a1, v38, v40, v37, a7, v11, v11, (_BYTE *)&v33 - v22, v32);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    swift_release();
    v25 = *(void (**)(char *, uint64_t))(v18 + 8);
    v25(v23, v17);
    v25(v21, v17);
    return swift_retain();
  }
  else
  {
    v27 = v34;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v34, v21, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v33, v27, v12);
    sub_2383058C8(v12);
    v29 = v28;
    v31 = v30;
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    return TreeSet.init(_new:)(v29, v31, v24, v36);
  }
}

uint64_t TreeSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a2;
  v39 = a8;
  v35 = a6;
  v37 = a5;
  v41 = a4;
  v11 = MEMORY[0x24BEE4AE0] + 8;
  v12 = type metadata accessor for _HashNode.Builder(0, a7, MEMORY[0x24BEE4AE0] + 8, a9);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v33 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v34 = (char *)&v32 - v16;
  v17 = sub_23835B334();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v32 - v22;
  v36 = a9;
  v24 = v38;
  v40 = a1;
  v38 = a7;
  _HashNode.symmetricDifference<A>(_:_:)(0, a1, v24, v41, v37, a7, v11, v39, (_BYTE *)&v32 - v22, a9);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    swift_release();
    v25 = *(void (**)(char *, uint64_t))(v18 + 8);
    v25(v23, v17);
    v25(v21, v17);
    return swift_retain();
  }
  else
  {
    v27 = v34;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v34, v21, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v33, v27, v12);
    sub_2383058C8(v12);
    v29 = v28;
    v31 = v30;
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    return TreeSet.init(_new:)(v29, v31, v38, v36);
  }
}

uint64_t TreeSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD), void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t AssociatedConformanceWitness;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  uint64_t AssociatedTypeWitness;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD, _QWORD, _QWORD);

  v64 = a4;
  v65 = a3;
  v66 = a2;
  updated = type metadata accessor for _HashNode.ValueUpdateState(0, a5, MEMORY[0x24BEE4AE0] + 8, a7);
  v62 = *(_QWORD *)(updated - 8);
  v14 = MEMORY[0x24BDAC7A8](updated);
  v61 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v55 - v17;
  v69 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v21);
  v68 = (char *)&v55 - v22;
  v63 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v70 = (char *)&v55 - v24;
  v25 = *(_QWORD *)(a6 - 8);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v55 - v29;
  v32 = type metadata accessor for TreeSet(0, a5, a7, v31);
  v33 = v25;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  if (v32 == a6)
  {
    v48 = v33;
    v34(v30, a1, a6);
    swift_dynamicCast();
    v47 = TreeSet.symmetricDifference(_:)(v71, (uint64_t)v72, v49, v66, (uint64_t)v65, (uint64_t)v64, a5, a7);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(a1, a6);
  }
  else
  {
    v58 = v33;
    v59 = a7;
    v34(v28, a1, a6);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0D00);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
      v71 = v66;
      v72 = v65;
      v56 = a1;
      v34(v30, a1, a6);
      swift_retain();
      sub_23835AF8C();
      v57 = a6;
      v35 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v37 = v68;
      v66 = AssociatedConformanceWitness;
      sub_23835B484();
      v38 = v69;
      v65 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v69 + 48);
      v39 = v65(v37, 1, a5);
      v40 = v59;
      v42 = (uint64_t)v61;
      v41 = v62;
      if (v39 != 1)
      {
        v64 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
        v63 = MEMORY[0x24BEE4AE0] + 8;
        do
        {
          v64(v20, v37, a5);
          v43 = sub_238358A4C();
          v44 = (uint64_t *)type metadata accessor for _HashNode(0, a5, v63, v40);
          v45 = v43;
          v37 = v68;
          _HashNode.prepareValueUpdate(_:_:)((uint64_t)v20, v45, v44, (uint64_t)v18);
          v18[*(int *)(updated + 44)] = v18[*(int *)(updated + 56)];
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v42, v18, updated);
          v46 = v44;
          v35 = AssociatedTypeWitness;
          _HashNode.finalizeValueUpdate(_:)(v42, v46);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v18, updated);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v20, a5);
          sub_23835B484();
        }
        while (v65(v37, 1, a5) != 1);
      }
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v70, v35);
      return TreeSet.init(_new:)(v71, (uint64_t)v72, a5, v40);
    }
    else
    {
      v34(v30, a1, a6);
      v50 = v59;
      v51 = TreeSet.init<A>(_:)((uint64_t)v30, a5, a6, v59, v63);
      v47 = TreeSet.symmetricDifference(_:)(v51, v52, v53, v66, (uint64_t)v65, (uint64_t)v64, a5, v50);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(a1, a6);
    }
  }
  return v47;
}

uint64_t BitSet.union(_:)(int8x16_t *a1, int8x16_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int8 *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int8 *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  uint64_t v46;
  int8x16_t v47;
  uint64_t v48;

  v4 = a2[1].u64[0];
  v5 = a1[1].u64[0];
  if (v5 <= v4)
    v6 = a2[1].i64[0];
  else
    v6 = a1[1].i64[0];
  if (v6)
  {
    result = sub_23835B088();
    *(_QWORD *)(result + 16) = v6;
  }
  else
  {
    result = MEMORY[0x24BEE4AF8];
  }
  v8 = v5 - v4;
  if (v5 >= v4)
    v9 = v4;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 < 0xA)
    {
      v10 = 0;
LABEL_13:
      v11 = v9 - v10;
      v12 = 8 * v10 + 32;
      v13 = (uint64_t *)(result + v12);
      v14 = (uint64_t *)((char *)a1->i64 + v12);
      v15 = (uint64_t *)((char *)a2->i64 + v12);
      do
      {
        v17 = *v15++;
        v16 = v17;
        v18 = *v14++;
        *v13++ = v18 | v16;
        --v11;
      }
      while (v11);
      goto LABEL_15;
    }
    v10 = 0;
    if ((unint64_t)(result - (_QWORD)a2) < 0x20)
      goto LABEL_13;
    if ((unint64_t)(result - (_QWORD)a1) < 0x20)
      goto LABEL_13;
    v10 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    v43 = a2 + 3;
    v44 = a1 + 3;
    v45 = (int8x16_t *)(result + 48);
    v46 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v47 = vorrq_s8(*v44, *v43);
      v45[-1] = vorrq_s8(v44[-1], v43[-1]);
      *v45 = v47;
      v43 += 2;
      v44 += 2;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (v9 != v10)
      goto LABEL_13;
  }
LABEL_15:
  v19 = v4 - v5;
  if (v4 < v5)
  {
    if (v8 < 0xC)
      goto LABEL_21;
    v20 = 8 * v4;
    if (8 * v4 + result - ((unint64_t)a1 + 8 * v4) < 0x20)
      goto LABEL_21;
    v4 += v8 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = v20 + 48;
    v22 = (_OWORD *)(result + v20 + 48);
    v23 = &a1->i8[v21];
    v24 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 += 2;
      v23 += 32;
      v24 -= 4;
    }
    while (v24);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      v26 = v5 - v4;
      v27 = 8 * v4 + 32;
      v28 = (_QWORD *)(result + v27);
      v29 = (uint64_t *)((char *)a1->i64 + v27);
      do
      {
        v30 = *v29++;
        *v28++ = v30;
        --v26;
      }
      while (v26);
    }
    goto LABEL_33;
  }
  if (v5 == v4)
    goto LABEL_33;
  if (v5 < v4)
  {
    if (v19 < 0xC)
      goto LABEL_31;
    v31 = 8 * v5;
    if (8 * v5 + result - ((unint64_t)a2 + 8 * v5) < 0x20)
      goto LABEL_31;
    v5 += v19 & 0xFFFFFFFFFFFFFFFCLL;
    v32 = v31 + 48;
    v33 = (_OWORD *)(result + v31 + 48);
    v34 = &a2->i8[v32];
    v35 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *v33 = v36;
      v33 += 2;
      v34 += 32;
      v35 -= 4;
    }
    while (v35);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      v37 = v4 - v5;
      v38 = 8 * v5 + 32;
      v39 = (_QWORD *)(result + v38);
      v40 = (uint64_t *)((char *)a2->i64 + v38);
      do
      {
        v41 = *v40++;
        *v39++ = v41;
        --v37;
      }
      while (v37);
    }
LABEL_33:
    if (v6)
    {
      if (*(_QWORD *)(result + 32 + 8 * v6 - 8))
      {
        v42 = v6;
LABEL_48:
        *(_QWORD *)(result + 16) = v42;
        return result;
      }
      v48 = v6;
      while (1)
      {
        v42 = v48 - 1;
        if (v48 - 1 < 1)
          break;
        if (*(_QWORD *)(result + 16 + 8 * v48--))
        {
          if (v6 >= v42)
            goto LABEL_48;
          __break(1u);
          break;
        }
      }
    }
    v42 = 0;
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.union(_:)(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  return BitSet.union(_:)(a1, a3);
}

char *BitSet.union(_:)(char *result, unint64_t a2, uint64_t a3)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (((a2 | (unint64_t)result) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = (char *)a3;
  v4 = a2;
  v5 = (unint64_t)result;
  if (result == (char *)a2)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  v6 = (a2 + 63) >> 6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = v6 - v7;
  if (v6 <= v7)
  {
    swift_bridgeObjectRetain();
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_9:
      _UnsafeBitSet.formUnion(_:)(v5, v4);
      return v3;
    }
LABEL_12:
    v3 = sub_23826C260((uint64_t)v3);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 - v7) >= 0)
  {
    swift_bridgeObjectRetain();
    sub_23829E648(v8, 0);
    v3 = (char *)a3;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

char *BitSet.union<A>(_:)(uint64_t a1, int8x16_t *a2, ValueMetadata *a3)
{
  ValueMetadata *v3;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v12[2];

  v3 = a3;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a3[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == &type metadata for BitSet)
  {
    v3 = &type metadata for BitSet;
    Description[2](v8, a1, &type metadata for BitSet);
LABEL_7:
    swift_dynamicCast();
    v10 = BitSet.union(_:)((int8x16_t *)v12[0], a2);
    swift_bridgeObjectRelease();
LABEL_9:
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, v3);
    return (char *)v10;
  }
  if (v3 == &type metadata for BitSet.Counted)
  {
    v3 = &type metadata for BitSet.Counted;
    Description[2](v8, a1, &type metadata for BitSet.Counted);
    goto LABEL_7;
  }
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0) == v3)
  {
    Description[2](v8, a1, v3);
    swift_dynamicCast();
    v10 = (uint64_t)BitSet.union(_:)(v12[0], (unint64_t)v12[1], (uint64_t)a2);
    goto LABEL_9;
  }
  v12[0] = (char *)a2;
  Description[2](v8, a1, v3);
  swift_bridgeObjectRetain();
  BitSet.formUnion<A>(_:)((uint64_t)v8, v3);
  ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, v3);
  return v12[0];
}

uint64_t BitSet.formUnion(_:)(int8x16_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  int8x16_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint64_t v14;
  int8x16_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = a1[1].u64[0];
  if (v4 << 6 >= 0xFFFFFFFFFFFFFFC0)
  {
    __break(1u);
LABEL_24:
    result = (uint64_t)sub_23826C260(v1);
    v1 = result;
LABEL_6:
    v8 = *(_QWORD *)(v1 + 16);
    if (v4 < v8)
      v8 = v4;
    if (!v8)
      goto LABEL_22;
    if (v8 >= 6
      && ((v9 = 8 * v8 + 32, v1 + 32 < (unint64_t)v3->u64 + v9)
        ? (v10 = (unint64_t)&v3[2] >= v1 + v9)
        : (v10 = 1),
          v10))
    {
      v11 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      v12 = v3 + 3;
      v13 = (int8x16_t *)(v1 + 48);
      v14 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v15 = vorrq_s8(*v13, *v12);
        v13[-1] = vorrq_s8(v13[-1], v12[-1]);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v8 == v11)
        goto LABEL_22;
    }
    else
    {
      v11 = 0;
    }
    v16 = v8 - v11;
    v17 = 8 * v11 + 32;
    v18 = (_QWORD *)(v1 + v17);
    v19 = (uint64_t *)((char *)v3->i64 + v17);
    do
    {
      v20 = *v19++;
      *v18++ |= v20;
      --v16;
    }
    while (v16);
LABEL_22:
    *v2 = v1;
    return result;
  }
  v3 = a1;
  v5 = ((v4 << 6) + 63) >> 6;
  v1 = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  result = v5 - v6;
  if (v5 <= v6)
  {
LABEL_5:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_6;
    goto LABEL_24;
  }
  if ((uint64_t)(v5 - v6) >= 0)
  {
    sub_23829E648(result, 0);
    v1 = *v2;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t BitSet.formUnion(_:)(unint64_t result, unint64_t a2)
{
  char **v2;
  char **v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;

  if (((a2 | result) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    v6 = sub_23826C260((uint64_t)v6);
    goto LABEL_7;
  }
  v4 = a2;
  v5 = result;
  if (result == a2)
    return result;
  v2 = v3;
  v7 = (a2 + 63) >> 6;
  v6 = *v3;
  v8 = *((_QWORD *)*v3 + 2);
  result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_23829E648(result, 0);
    v6 = *v3;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_10;
LABEL_7:
  result = _UnsafeBitSet.formUnion(_:)(v5, v4);
  *v2 = v6;
  return result;
}

uint64_t BitSet.formUnion<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  char **v2;
  char **v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  unint64_t v24;

  v3 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v21 - v8;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    a2 = &type metadata for BitSet;
    Description[2](v13, a1, &type metadata for BitSet);
LABEL_8:
    swift_dynamicCast();
    BitSet.formUnion(_:)(v23);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    a2 = &type metadata for BitSet.Counted;
    Description[2](v13, a1, &type metadata for BitSet.Counted);
    goto LABEL_8;
  }
  v22 = v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0);
  Description[2](v13, a1, a2);
  if ((ValueMetadata *)v14 == a2)
  {
    swift_dynamicCast();
    BitSet.formUnion(_:)((unint64_t)v23, v24);
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
  }
  v21 = a1;
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  result = sub_23835B484();
  if ((v24 & 1) != 0)
  {
LABEL_5:
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(v21, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, AssociatedTypeWitness);
  }
  else
  {
    v16 = (unint64_t)v23;
    while ((v16 & 0x8000000000000000) == 0)
    {
      v17 = *v3;
      v18 = *((_QWORD *)*v3 + 2);
      v19 = v16 >> 6 >= v18;
      v20 = (v16 >> 6) - v18;
      if (v19)
      {
        if (v20 < -1)
          goto LABEL_22;
        sub_23829E648(v20 + 1, 0);
        v17 = *v3;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_23826C260((uint64_t)v17);
      *(_QWORD *)&v17[8 * (v16 >> 6) + 32] |= 1 << v16;
      *v3 = v17;
      result = sub_23835B484();
      v16 = (unint64_t)v23;
      if (v24 == 1)
        goto LABEL_5;
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall TreeDictionary._invalidateIndices()()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t TreeDictionary.Index.init(_root:version:path:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_DWORD *)(a6 + 32) = a5;
  *(_BYTE *)(a6 + 36) = BYTE4(a5);
  *(_BYTE *)(a6 + 37) = BYTE5(a5) & 1;
  return result;
}

BOOL TreeDictionary._isValid(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *a1 == a2 && a1[1] == a4;
}

BOOL TreeDictionary.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t TreeDictionary.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t TreeDictionary.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  BOOL v11;

  result = swift_beginAccess();
  if (*(_DWORD *)(a1 + 16))
  {
    v7 = 0;
    v8 = 1;
    v9 = a1;
  }
  else
  {
    v7 = 0;
    v9 = a1;
    do
    {
      result = swift_beginAccess();
      v10 = *(_DWORD *)(v9 + 20);
      v11 = *(_DWORD *)(v9 + 16) == v10 || v10 == 0;
      v8 = !v11;
      if (v11)
        break;
      v9 = *(_QWORD *)(v9 + 32);
      result = swift_beginAccess();
      v7 += 5;
    }
    while (!*(_DWORD *)(v9 + 16));
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v9;
  *(_DWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = v7;
  *(_BYTE *)(a3 + 37) = v8;
  return result;
}

uint64_t TreeDictionary.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint8x8_t v7;
  __int32 v8;

  result = swift_beginAccess();
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.i32[0];
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20))
    v8 = 0;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 32) = v8;
  *(_WORD *)(a3 + 36) = 0;
  return result;
}

uint64_t TreeDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v19 = (char *)&v25 - v18;
  if (*(_QWORD *)a3 != a4 || *(_QWORD *)(a3 + 8) != a6 || (*(_BYTE *)(a3 + 37) & 1) == 0)
  {
    __break(1u);
  }
  else
  {
    v22 = nullsub_1(*(_QWORD *)(a3 + 24) + 16, *(_QWORD *)(a3 + 24) + 32, a7, a8, a9);
    sub_2382F6B98(v22, v23, a3, a7, a8, a9, (uint64_t)v19);
    v24 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a1, v19, a7);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a8 - 8) + 32))(a2, v24, a8);
  }
  return result;
}

uint64_t TreeDictionary.formIndex(after:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)result == a2 && *(_QWORD *)(result + 8) == a4)
  {
    result = _UnsafePath.findSuccessorItem(under:)(a2);
    if ((result & 1) != 0)
      return result;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _BYTE v6[38];

  *(_OWORD *)v6 = *(_OWORD *)result;
  *(_OWORD *)&v6[16] = *(_OWORD *)(result + 16);
  *(_QWORD *)&v6[30] = *(_QWORD *)(result + 30);
  if (*(_QWORD *)result == a2 && *(_QWORD *)&v6[8] == a3)
  {
    result = _UnsafePath.findSuccessorItem(under:)(a2);
    if ((result & 1) != 0)
    {
      *(_QWORD *)a4 = *(_QWORD *)v6;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)&v6[8];
      *(_QWORD *)(a4 + 24) = *(_QWORD *)&v6[24];
      *(_DWORD *)(a4 + 32) = *(_DWORD *)&v6[32];
      *(_BYTE *)(a4 + 36) = v6[36];
      *(_BYTE *)(a4 + 37) = v6[37];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[38];

  if (*(_QWORD *)result == a3 && *(_QWORD *)(result + 8) == a4)
  {
    v8 = *(_OWORD *)(result + 16);
    *(_OWORD *)v15 = *(_OWORD *)result;
    *(_OWORD *)&v15[16] = v8;
    *(_QWORD *)&v15[30] = *(_QWORD *)(result + 30);
    v14 = a2;
    result = sub_2382DF410(0, (uint64_t)&v15[16], &v14, a3);
    if ((result & 1) != 0 || a2 >= 1 && !v14)
    {
      v9 = *(_QWORD *)&v15[24];
      v10 = *(_DWORD *)&v15[32];
      v11 = v15[36];
      v12 = v15[37];
      v13 = *(_OWORD *)&v15[8];
      *(_QWORD *)a5 = *(_QWORD *)v15;
      *(_OWORD *)(a5 + 8) = v13;
      *(_QWORD *)(a5 + 24) = v9;
      *(_DWORD *)(a5 + 32) = v10;
      *(_BYTE *)(a5 + 36) = v11;
      *(_BYTE *)(a5 + 37) = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeDictionary.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[38];

  if (*(_QWORD *)result == a4 && *(_QWORD *)(result + 8) == a5 && *(_QWORD *)a3 == a4 && *(_QWORD *)(a3 + 8) == a5)
  {
    *(_OWORD *)v16 = *(_OWORD *)result;
    *(_OWORD *)&v16[16] = *(_OWORD *)(result + 16);
    *(_QWORD *)&v16[30] = *(_QWORD *)(result + 30);
    if (*(_BYTE *)(a3 + 37))
      v10 = 0x10000000000;
    else
      v10 = 0;
    result = _RawHashNode.seek(_:_:offsetBy:limitedBy:)(0, (uint64_t)&v16[16], a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(unsigned int *)(a3 + 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 36) << 32) | v10, a4);
    if ((result & 1) != 0)
    {
      v11 = *(_QWORD *)v16;
      v14 = *(_OWORD *)&v16[8];
      v12 = *(_QWORD *)&v16[24];
      if (v16[37])
        v15 = 0x10000000000;
      else
        v15 = 0;
      v13 = *(unsigned int *)&v16[32] | ((unint64_t)v16[36] << 32) | v15;
    }
    else
    {
      if ((result & 0x100) == 0)
        goto LABEL_23;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0uLL;
    }
    *(_QWORD *)a6 = v11;
    *(_OWORD *)(a6 + 8) = v14;
    *(_QWORD *)(a6 + 24) = v12;
    *(_DWORD *)(a6 + 32) = v13;
    *(_WORD *)(a6 + 36) = WORD2(v13);
    return result;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t TreeDictionary.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)result == a3 && *(_QWORD *)(result + 8) == a5 && *(_QWORD *)a2 == a3 && *(_QWORD *)(a2 + 8) == a5)
  {
    v8 = 0x10000000000;
    if (*(_BYTE *)(result + 37))
      v9 = 0x10000000000;
    else
      v9 = 0;
    if (!*(_BYTE *)(a2 + 37))
      v8 = 0;
    return _RawHashNode.distance(_:from:to:)(0, *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(unsigned int *)(result + 32) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32) | v8, a3, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TreeDictionary.Index._root.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TreeDictionary.Index._version.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TreeDictionary.Index._version.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*TreeDictionary.Index._version.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t TreeDictionary.Index._path.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t TreeDictionary.Index._path.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = result;
  *(_QWORD *)(v3 + 24) = a2;
  *(_DWORD *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 36) = BYTE4(a3);
  *(_BYTE *)(v3 + 37) = BYTE5(a3) & 1;
  return result;
}

uint64_t (*TreeDictionary.Index._path.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t static TreeDictionary.Index.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)result == *(_QWORD *)a2 && *(_QWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
  {
    if (*(unsigned __int8 *)(result + 36) == *(unsigned __int8 *)(a2 + 36)
      && *(_QWORD *)(result + 16) == *(_QWORD *)(a2 + 16)
      && *(_DWORD *)(result + 32) == *(_DWORD *)(a2 + 32))
    {
      return (((*(_BYTE *)(result + 37) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 37)) & 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL static TreeDictionary.Index.< infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if (*(_QWORD *)result == *(_QWORD *)a2 && *(_QWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
    return sub_2382DFAF0(*(_QWORD *)(result + 16), *(_DWORD *)(result + 32), *(_BYTE *)(result + 36), *(_BYTE *)(result + 37) & 1, *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 32), *(_BYTE *)(a2 + 36), *(_BYTE *)(a2 + 37) & 1);
  __break(1u);
  return result;
}

uint64_t TreeDictionary.Index.hash(into:)()
{
  sub_23835BA00();
  sub_23835BA24();
  sub_23835BA0C();
  return sub_23835BA0C();
}

uint64_t TreeDictionary.Index.hashValue.getter()
{
  sub_23835B9E8();
  TreeDictionary.Index.hash(into:)();
  return sub_23835BA48();
}

uint64_t sub_2382F6B2C()
{
  sub_23835B9E8();
  TreeDictionary.Index.hash(into:)();
  return sub_23835BA48();
}

uint64_t _s19CollectionsInternal14TreeDictionaryV5IndexV11descriptionSSvg_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0x10000000000;
  if (!*(_BYTE *)(v0 + 37))
    v1 = 0;
  return _UnsafePath.description.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32) | v1);
}

uint64_t sub_2382F6B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t TupleTypeMetadata2;

  v8 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(*(unsigned int *)(a3 + 32), a1, a2, a4, a5, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 16))(a7, v8, TupleTypeMetadata2);
}

uint64_t sub_2382F6C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return TreeDictionary.startIndex.getter(*v1, v1[2], a1);
}

uint64_t sub_2382F6C2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return TreeDictionary.endIndex.getter(*v1, v1[2], a1);
}

void (*sub_2382F6C38(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  __int128 v13;
  void (*v14)(_QWORD *);
  uint64_t v15;
  uint64_t v16;

  v7 = malloc(0x68uLL);
  *a1 = v7;
  v9 = a3[2];
  v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[9] = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[10] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[11] = v12;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v13;
  *(_QWORD *)((char *)v7 + 30) = *(_QWORD *)(a2 + 30);
  v14 = sub_2382F6D9C(v7 + 5, (uint64_t)v7, *v3, v3[1], v3[2], v9, v8, a3[4]);
  v16 = v15;
  v7[12] = v14;
  (*(void (**)(char *))(*(_QWORD *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v16, v8);
  return sub_2382F6D44;
}

void sub_2382F6D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *a1;
  v4 = *a1 + 40;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 80) + 8))(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*a1 + 72));
  v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*sub_2382F6D9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v16 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v16;
  v17 = malloc(*(_QWORD *)(v16 + 64));
  a1[2] = (uint64_t)v17;
  TreeDictionary.subscript.getter((uint64_t)v17, (uint64_t)v17 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, v18, a5, a6, a7, a8);
  return sub_2382CB15C;
}

BOOL sub_2382F6E6C(uint64_t a1)
{
  uint64_t v1;

  return TreeDictionary.isEmpty.getter(a1, *(_QWORD *)(v1 + 8));
}

double sub_2382F6E74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  double result;
  __int128 v6;
  __int128 v7;
  _BYTE v8[22];

  TreeDictionary.index(_:offsetBy:)(a1, a2, *v3, v3[2], (uint64_t)&v7);
  result = *(double *)&v7;
  v6 = *(_OWORD *)v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 30) = *(_QWORD *)&v8[14];
  return result;
}

uint64_t sub_2382F6EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[40];

  v7 = *v5;
  v8 = v5[2];
  v9 = a4[2];
  v10 = a4[3];
  v11 = a4[4];
  TreeDictionary.index(_:offsetBy:limitedBy:)(a1, a2, a3, v7, v8, (uint64_t)v14);
  type metadata accessor for TreeDictionary.Index(255, v9, v10, v11);
  v12 = sub_23835B334();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a5, v14, v12);
}

uint64_t sub_2382F6F3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return TreeDictionary.distance(from:to:)(a1, a2, *v2, v2[1], v2[2]);
}

__n128 sub_2382F6F48@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  __n128 result;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;

  v4 = a1[3];
  v5 = *((_DWORD *)a1 + 8);
  v6 = *((_BYTE *)a1 + 36);
  v7 = *((_BYTE *)a1 + 37);
  v8 = *v2;
  v9 = v2[1];
  v10 = v2[2];
  v16 = *a1;
  v17 = *(__n128 *)(a1 + 1);
  v18 = v4;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  TreeDictionary.formIndex(after:)((uint64_t)&v16, v8, v9, v10);
  v11 = v18;
  v12 = v19;
  v13 = v20;
  v14 = v21;
  result = v17;
  *(_QWORD *)a2 = v16;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 36) = v13;
  *(_BYTE *)(a2 + 37) = v14;
  return result;
}

uint64_t sub_2382F6FDC(uint64_t a1)
{
  uint64_t *v1;

  return TreeDictionary.formIndex(after:)(a1, *v1, v1[1], v1[2]);
}

void sub_2382F6FE8()
{
  JUMPOUT(0x23B831670);
}

void sub_2382F6FF8()
{
  JUMPOUT(0x23B831670);
}

void sub_2382F7008()
{
  JUMPOUT(0x23B831670);
}

uint64_t type metadata accessor for TreeDictionary.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeDictionary.Index);
}

uint64_t sub_2382F7024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
}

uint64_t _HashNode.replaceItem(at:_:with:)(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;

  v26 = a4;
  v29 = a1;
  v30 = a2;
  v7 = a5[2];
  v8 = a5[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v25 - v14;
  v16 = (char *)&v25 + *(int *)(v13 + 48) - v14;
  v17 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))((char *)&v25 - v14, a3, v7);
  v18 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v16, v26, v8);
  v19 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v12, v15, v7);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v19, v16, v8);
  v20 = a5[4];
  v21 = nullsub_1(*v27 + 16, *v27 + 32, v7, v8, v20);
  sub_2382F7A24(v21, v22, v29, v30, (uint64_t)v12, v7, v8, v20);
  v23 = *(void (**)(char *, uint64_t))(v28 + 8);
  v23(v15, TupleTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v12, TupleTypeMetadata2);
}

void _HashNode.replacingChild(_:at:_:with:)(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD v36[14];
  uint64_t TupleTypeMetadata2;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a6;
  v45 = a2;
  v38 = a3;
  v43 = a1;
  v42 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v36[11] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v36[8] = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v36[7] = (char *)v36 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v36[10] = (char *)v36 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v36[9] = (char *)v36 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v36[6] = (char *)v36 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v36[12] = (char *)v36 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  MEMORY[0x24BDAC7A8](v26);
  v36[13] = (char *)v36 - v27;
  v28 = type metadata accessor for _HashNode.Builder.Kind(0, a7, a8, a10);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v40 = (char *)v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)v36 - v32;
  nullsub_1(a5 + 16, a5 + 32, a7, a8, a10);
  v34 = *(int *)(type metadata accessor for _HashNode.Builder(0, a7, a8, a10) + 44);
  v41 = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v33, a4 + v34, v28);
  v39 = v28;
  v35 = (char *)&loc_2382F7404 + dword_2382F79B4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2382F7414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  void (*v40)(uint64_t, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int8x8_t v45;
  uint8x8_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;

  v8 = *(_QWORD *)(v7 - 184);
  v9 = *(int *)(*(_QWORD *)(v7 - 176) + 48);
  v10 = v8 + v9;
  v11 = v1 + v9;
  v12 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v7 - 264) = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  *(_QWORD *)(v7 - 248) = v13;
  v13(v8, v1, v3);
  v14 = *(_QWORD *)(v0 - 8);
  *(_QWORD *)(v7 - 272) = v14;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v15(v10, v11, v0);
  v16 = *(_QWORD *)(v7 - 120);
  if ((_HashNode.hasSingletonChild.getter(v5, v16, v3, v0, v2) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(*(_QWORD *)(v7 - 144), v4);
    v17 = *(_QWORD *)(v7 - 176);
    v18 = v15;
    v19 = v6 + *(int *)(v17 + 48);
    v20 = v8;
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 248);
    v21(v6, v20, v3);
    v18(v19, v10, v0);
    v22 = *(_QWORD *)(v7 - 192);
    v23 = v22 + *(int *)(v17 + 48);
    *(_QWORD *)(v7 - 120) = v23;
    v21(v22, v6, v3);
    v18(v23, v19, v0);
    v24 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    v25 = *(_QWORD *)(v7 - 152);
    v26 = v25 + *(int *)(v17 + 48);
    v21(v25, v22, v3);
    v18(v26, *(_QWORD *)(v7 - 120), v0);
    *(_BYTE *)(v25 + v24) = *(_QWORD *)(v7 - 112);
    swift_storeEnumTagMultiPayload();
    v27 = *(_BYTE **)(v7 - 136);
    v28 = *(_DWORD *)(v7 - 124);
    v29 = v25;
  }
  else
  {
    *(_QWORD *)(v7 - 280) = v10;
    *(_QWORD *)(v7 - 256) = v15;
    v30 = *(_QWORD *)(*(_QWORD *)(v7 - 200) + 72);
    v31 = __OFSUB__(v30, 16);
    v32 = v30 - 16;
    if (v31)
    {
      __break(1u);
      JUMPOUT(0x2382F79B4);
    }
    v33 = _HashNode.copy(withFreeSpace:)(v32 & ~(v32 >> 63), v5, v16, v3, v0, v2);
    *(_QWORD *)(v7 - 104) = v33;
    *(_QWORD *)(v7 - 96) = v34;
    v35 = (_QWORD *)type metadata accessor for _HashNode(0, v3, v0, v2);
    _HashNode.removeChild(at:_:)(*(_QWORD *)(v7 - 112), *(unsigned int *)(v7 - 168), v35);
    swift_release();
    v36 = *(_QWORD *)(v7 - 184);
    v37 = *(_QWORD *)(v7 - 176);
    v38 = v6 + *(int *)(v37 + 48);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 264) + 16);
    *(_QWORD *)(v7 - 168) = v39;
    v39(v6, v36, v3);
    v40 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 272) + 16);
    *(_QWORD *)(v7 - 120) = v40;
    v40(v38, *(_QWORD *)(v7 - 280), v0);
    v41 = *(_QWORD *)(v7 - 192);
    v42 = v41 + *(int *)(v37 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 248))(v41, v6, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 256))(v42, v38, v0);
    v43 = (_DWORD *)nullsub_1(v33 + 16, v33 + 32, v3, v0, v2);
    *(_QWORD *)(v7 - 272) = v43;
    *(_QWORD *)(v7 - 264) = v44;
    v45.i32[0] = *v43 & ~(-1 << *(_QWORD *)(v7 - 112));
    v46 = (uint8x8_t)vcnt_s8(v45);
    v46.i16[0] = vaddlv_u8(v46);
    *(_DWORD *)(v7 - 280) = v46.i32[0];
    v47 = *(_QWORD *)(v7 - 240);
    v48 = v47 + *(int *)(v37 + 48);
    v49 = *(void (**)(void))(v7 - 168);
    ((void (*)(uint64_t, uint64_t, uint64_t))v49)(v47, v41, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 120))(v48, v42, v0);
    v50 = *(_QWORD *)(v7 - 216) + *(int *)(v37 + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 - 248))(*(_QWORD *)(v7 - 216), v47, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 256))(v50, v48, v0);
    ++*(_QWORD *)(v7 - 96);
    v51 = *(_QWORD *)(v7 - 208) + *(int *)(v37 + 48);
    v49();
    v52 = v50;
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 120);
    v53(v51, v52, v0);
    *(_QWORD *)(v7 - 112) = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(*(_DWORD *)(v7 - 280), *(_QWORD *)(v7 - 112), *(int **)(v7 - 272), *(_QWORD *)(v7 - 264));
    v54 = *(_QWORD *)(v7 - 232);
    v55 = v54 + *(int *)(v37 + 48);
    v56 = *(_QWORD *)(v7 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 168))(v54, v56, v3);
    v53(v55, v51, v0);
    v57 = *(_QWORD *)(v7 - 224);
    v58 = v57 + *(int *)(v37 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 248))(v57, v54, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 256))(v58, v55, v0);
    v59 = *(_QWORD *)(v7 - 200);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v59 + 32))(*(_QWORD *)(v7 - 112), v57, v37);
    v60 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v60(*(_QWORD *)(v7 - 216), v37);
    v60(v56, v37);
    v60(*(_QWORD *)(v7 - 192), v37);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(*(_QWORD *)(v7 - 144), v4);
    v60(*(_QWORD *)(v7 - 184), v37);
    v61 = *(_QWORD *)(v7 - 96);
    v62 = *(_QWORD **)(v7 - 152);
    *v62 = *(_QWORD *)(v7 - 104);
    v62[1] = v61;
    swift_storeEnumTagMultiPayload();
    v27 = *(_BYTE **)(v7 - 136);
    v28 = *(_DWORD *)(v7 - 124);
    v29 = (uint64_t)v62;
  }
  return _HashNode.Builder.init(_:_:)(v28, v29, v3, v0, v2, v27);
}

uint64_t _HashNode.replaceChild(at:with:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = sub_2382F7BFC(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t _HashNode.replaceChild(at:_:with:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;

  v5 = sub_2382F7B4C(a1, a2, a3, a4, a5);
  swift_release();
  return v5;
}

uint64_t sub_2382F7A24(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v25 = a8;
  v23 = a4;
  v22 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v22 - v13;
  v15 = *(int *)(v12 + 48);
  v16 = &v14[v15];
  v17 = a5 + v15;
  v18 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, a5, a6);
  v19 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v16, v17, a7);
  v20 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v23, v22, v24, a6, a7, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 40))(v20, v14, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 40))(v20 + *(int *)(TupleTypeMetadata2 + 48), v16, a7);
}

uint64_t sub_2382F7B4C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v9 = nullsub_1(*v5 + 16, *v5 + 32, a5[2], a5[3], a5[4]);
  v11 = (_QWORD *)_HashNode.UnsafeHandle.childPtr(at:)(a2, v9, v10);
  v12 = a4 - v11[1];
  *v11 = a3;
  v11[1] = a4;
  swift_retain();
  swift_release();
  v5[1] += v12;
  return v12;
}

uint64_t sub_2382F7BFC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  int8x8_t v9;
  uint8x8_t v10;

  v9.i32[0] = *(_DWORD *)(nullsub_1(*v4 + 16, *v4 + 32, a4[2], a4[3], a4[4]) + 4) & ~(-1 << a1);
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  return sub_2382F7B4C(a1, v10.u32[0], a2, a3, a4);
}

uint64_t OrderedDictionary.Elements.SubSequence.init(_base:bounds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_2382F7C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t TupleTypeMetadata2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v48 = a1;
  v49 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v40 - v12;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v40 - v17;
  swift_getAssociatedConformanceWitness();
  v45 = sub_23835B2EC();
  v43 = *(_QWORD *)(v45 - 8);
  v19 = MEMORY[0x24BDAC7A8](v45);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v40 = (char *)&v40 - v22;
  sub_23835B178();
  v46 = a2;
  v47 = v4;
  v44 = v6;
  sub_23835B1CC();
  result = sub_23835AC8C();
  if ((result & 1) != 0)
  {
    v25 = v41;
    v24 = TupleTypeMetadata2;
    v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v27(v13, v18, AssociatedTypeWitness);
    v27(v26, v16, AssociatedTypeWitness);
    v28 = &v10[*(int *)(v24 + 48)];
    v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v10, v13, AssociatedTypeWitness);
    v29(v28, v26, AssociatedTypeWitness);
    v27(v21, v10, AssociatedTypeWitness);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v28, AssociatedTypeWitness);
    v31 = &v10[*(int *)(v24 + 48)];
    v27(v10, v13, AssociatedTypeWitness);
    v27(v31, v26, AssociatedTypeWitness);
    v32 = v45;
    v27(&v21[*(int *)(v45 + 36)], v31, AssociatedTypeWitness);
    v30(v10, AssociatedTypeWitness);
    v33 = v43;
    v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v21, v32);
    v36 = v47;
    v35 = v48;
    v37 = v46;
    sub_23835B184();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    v38 = sub_23835B9C4();
    v39 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(&v49[*(int *)(v38 + 40)], v36, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v32);
    v27(v39, v34, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t))v27)(&v39[*(int *)(v38 + 36)], &v34[*(int *)(v32 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._bounds.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence.description.getter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v3 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v3;
  v9 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements.SubSequence, a1);
  return _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v8, 0, 0, 0, v4, v5, a1, v6);
}

uint64_t OrderedDictionary.Elements.SubSequence.debugDescription.getter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;

  v3 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v3;
  v13 = *(_QWORD *)(v1 + 32);
  sub_23835B5B0();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = sub_2383084F4();
  v8 = v7;
  swift_bridgeObjectRelease();
  sub_23835AE90();
  v9 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements.SubSequence, a1);
  v10 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v12, 1, v6, v8, v4, v5, a1, v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t OrderedDictionary.Elements.SubSequence.keys.getter()
{
  uint64_t *v0;

  return OrderedSet.subscript.getter(v0[3], v0[4], *v0);
}

__n128 OrderedDictionary.Elements.SubSequence.values.getter@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;

  v4 = *v2;
  v9 = *(_OWORD *)(v2 + 3);
  v10 = v4;
  v11 = *(_OWORD *)(v2 + 1);
  v5 = type metadata accessor for OrderedDictionary.Values(0, a1[2], a1[3], a1[4]);
  v6 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v5);
  sub_2382F7C8C((uint64_t)&v9, v5, v6, (char *)&v12);
  v7 = v13;
  result = v14;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.index(forKey:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = OrderedSet._find(_:)();
  if ((v2 & 1) == 0 && (result < *(_QWORD *)(v0 + 24) || result >= *(_QWORD *)(v0 + 32)))
    return 0;
  return result;
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8ElementsV11SubSequenceV5_baseACyxq_Gvg_0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8ElementsV11SubSequenceV5_baseACyxq_Gvs_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._end.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._index.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

int8x16_t OrderedDictionary.Elements.SubSequence.Iterator.init(_base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(int8x16_t *)(a2 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = TupleTypeMetadata2;
  if (v3 >= v4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a1, 1, 1, TupleTypeMetadata2);
  sub_23835B724();
  sub_23835B724();
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 0, 1, v6);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    *(_QWORD *)(v1 + 32) = v10;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  swift_retain();
  swift_retain();
  return swift_retain();
}

int8x16_t sub_2382F8514@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int8x16_t result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t sub_2382F8534(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements.SubSequence, a1);
  return sub_23835B1F0();
}

uint64_t sub_2382F8568(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements.SubSequence, a1);
  return sub_23835B1FC();
}

uint64_t OrderedDictionary.Elements.SubSequence.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.indices.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(v3 + 24) > a3 || *(_QWORD *)(v3 + 32) <= a3)
  {
    __break(1u);
  }
  else
  {
    sub_23835B724();
    return sub_23835B724();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (v3[3] > result || v3[4] < a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *v3;
    v6 = v3[1];
    v7 = v3[2];
    *a3 = v5;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = result;
    a3[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

BOOL OrderedDictionary.Elements.SubSequence.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == *(_QWORD *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

void sub_2382F8754(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

void sub_2382F8760(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
}

void (*sub_2382F876C(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;

  v7 = malloc(0x68uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[9] = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[10] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[11] = v12;
  v13 = *a2;
  v14 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v14;
  v7[4] = *(_QWORD *)(v3 + 32);
  v15 = sub_2382F886C(v7 + 5, v13);
  v17 = v16;
  v7[12] = v15;
  (*(void (**)(char *))(*(_QWORD *)(v8 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v17, v9);
  return sub_2382F6D44;
}

void (*sub_2382F886C(uint64_t *a1, uint64_t a2))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  void *v6;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  v6 = malloc(*(_QWORD *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  OrderedDictionary.Elements.SubSequence.subscript.getter((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return sub_2382CB15C;
}

double sub_2382F8900@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  OrderedDictionary.Elements.SubSequence.subscript.getter(*a1, a1[1], v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

__n128 sub_2382F8948@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL sub_2382F8954()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == *(_QWORD *)(v0 + 32);
}

uint64_t sub_2382F8964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

void sub_2382F8978()
{
  JUMPOUT(0x23B831670);
}

void sub_2382F8988()
{
  JUMPOUT(0x23B831670);
}

void sub_2382F8998()
{
  JUMPOUT(0x23B831670);
}

void sub_2382F89A8()
{
  JUMPOUT(0x23B831670);
}

void sub_2382F89B8()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2382F89CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Elements.SubSequence);
}

_QWORD *sub_2382F8A50(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_2382F8AD4(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t sub_2382F8B28(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2382F8B70(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Elements.SubSequence.Iterator);
}

uint64_t static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, int64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;

  v14 = sub_23835B190();
  v15 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v14);
  v16 = 0;
  if ((a3 & 1) != 0)
    v17 = 0;
  else
    v17 = a2;
  if (v17 <= v15)
    v17 = v15;
  if (v17 <= a4)
    v18 = a4;
  else
    v18 = v17;
  if (v18 >= 5)
  {
    v16 = _s19CollectionsInternal10_HashTableV5scale13reservedScaleACSi_SitcfC_0(v18, a4);
    _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (_QWORD *)(v16 + 16), v16 + 32, a5, a6, a7);
  }
  return v16;
}

uint64_t static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(char *, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t *, _QWORD);
  void (*v41)(char *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t TupleTypeMetadata2;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61[4];
  uint64_t v62;

  v58 = a8;
  v52 = a7;
  v53 = a5;
  LODWORD(v54) = a4;
  v55 = a3;
  v49 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v48 = (char *)&v43 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v43 - v16;
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v43 - v18;
  v20 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v43 - v21;
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v23);
  v46 = (char *)&v43 - v24;
  v45 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v57 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v59 = (char *)&v43 - v25;
  v26 = a2;
  v27 = sub_23835B190();
  v28 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v27);
  v29 = v55;
  if ((v54 & 1) != 0)
    v29 = 0;
  if (v29 <= v28)
    v29 = v28;
  if (v29 <= v53)
    v30 = v53;
  else
    v30 = v29;
  if (v30 <= 4)
  {
    if (sub_23835B190() > 1)
    {
      v62 = sub_23835B070();
      sub_23835B190();
      v33 = sub_23835B0D0();
      v55 = a2;
      v48 = (char *)v33;
      sub_23835B058();
      v54 = a6;
      sub_23835B1B4();
      sub_23835AF8C();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v35 = v48;
      v53 = AssociatedConformanceWitness;
      sub_23835B484();
      v36 = v60;
      v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
      v37 = v52(v22, 1, AssociatedTypeWitness);
      v38 = v47;
      if (v37 != 1)
      {
        v39 = *(_QWORD *)(v36 + 32);
        v50 = v22;
        TupleTypeMetadata2 = v39;
        while (1)
        {
          ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v19, v22, AssociatedTypeWitness);
          v40 = (void (*)(uint64_t *, _QWORD))sub_23835B274();
          v41 = *(void (**)(char *))(v38 + 16);
          v41(v17);
          v40(v61, 0);
          v61[0] = v62;
          MEMORY[0x23B831670](MEMORY[0x24BEE12C8], v35);
          if ((sub_23835B034() & 1) != 0)
            break;
          ((void (*)(char *, char *, uint64_t))v41)(v56, v17, v12);
          v22 = v50;
          sub_23835B0B8();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v12);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v19, AssociatedTypeWitness);
          sub_23835B484();
          if (v52(v22, 1, AssociatedTypeWitness) == 1)
            goto LABEL_16;
        }
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v12);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v59, v57);
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2)(v49, v19, AssociatedTypeWitness);
        return 0;
      }
LABEL_16:
      (*(void (**)(char *, uint64_t))(v44 + 8))(v59, v57);
      swift_bridgeObjectRelease();
    }
    sub_23835B1CC();
    return 0;
  }
  v31 = _s19CollectionsInternal10_HashTableV5scale13reservedScaleACSi_SitcfC_0(v30, v53);
  v32 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
  _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(v32, v26, (_QWORD *)(v31 + 16), v31 + 32, a6, (uint64_t)v52, v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v49, v32, AssociatedTypeWitness);
  return v31;
}

uint64_t _HashTable.update<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_2382F923C(a1, a2, a3);
}

uint64_t _HashTable.read<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_2382F923C(a1, a2, a3);
}

uint64_t sub_2382F923C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 16, a3 + 32);
}

uint64_t _HashTable._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_HashTable._storage.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashTable.Storage.deinit()
{
  uint64_t v0;

  return v0;
}

_QWORD *_HashTable.copy()(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = result[2];
  v2 = (v1 & 0x3F) << v1;
  v3 = __OFADD__(v2, 64);
  v4 = v2 + 64;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    v7 = v4 - 1;
    v6 = v4 < 1;
    v8 = result + 4;
    v9 = v4 + 62;
    if (!v6)
      v9 = v7;
    v10 = v9 >> 6;
    type metadata accessor for _HashTable.Storage();
    v11 = (_QWORD *)swift_allocObject();
    v12 = v5[3];
    v11[2] = v1;
    v11[3] = v12;
    memcpy(v11 + 4, v8, 8 * v10);
    return v11;
  }
  return result;
}

uint64_t _HashTable.header.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(_QWORD *)(a1 + 16);
}

uint64_t (*_HashTable.header.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t _HashTable.header.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t _HashTable.capacity.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  double v4;

  result = swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16) & 0x3FLL;
  if (v3 < 5)
    return 15;
  v4 = (double)(1 << v3) * 0.75;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return (uint64_t)v4;
}

uint64_t _HashTable.minimumCapacity.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  double v5;

  swift_beginAccess();
  result = 0;
  v3 = *(_QWORD *)(a1 + 16) & 0x3FLL;
  if (v3 >= 5 && v3 != (*(_QWORD *)(a1 + 24) & 0x3FLL))
  {
    v5 = (double)(1 << v3) * 0.25;
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18)
          return (uint64_t)v5;
LABEL_12:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _HashTable.scale.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(_QWORD *)(a1 + 16) & 0x3FLL;
}

uint64_t _HashTable.reservedScale.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(_QWORD *)(a1 + 24) & 0x3FLL;
}

uint64_t _HashTable.bias.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(uint64_t *)(a1 + 24) >> 6;
}

ValueMetadata *type metadata accessor for _HashTable()
{
  return &type metadata for _HashTable;
}

uint64_t sub_2382F9630()
{
  return type metadata accessor for _HashTable.Storage();
}

uint64_t sub_2382F9638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_23835BAFC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v25 = a1;
  v14(v13, a1, a2);
  v15 = sub_23835B478();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_23835BAF0();
  *a3 = v15;
  a3[1] = v17;
  a3[2] = v19;
  a3[3] = v21;
  if ((v21 & 0x1000000000000000) != 0)
    sub_2382F977C();
  a3[4] = v15;
  v22 = _s9_IngesterVMa();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)a3 + *(int *)(v22 + 24), v10, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v25, a2);
}

unint64_t sub_2382F977C()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;

  v1 = *v0;
  v2 = v0[2];
  v3 = v0[3];
  v4 = sub_2382666B0(0xFuLL, v2, v3);
  result = sub_2382666B0(v1, v2, v3);
  v6 = result >> 14;
  if (v4 >> 14 < result >> 14)
  {
    v7 = 0;
    while (1)
    {
      v8 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      if ((v3 & 0x1000000000000000) != 0)
      {
        result = sub_23835ADB8();
        v4 = result;
      }
      else
      {
        v9 = v4 >> 16;
        if ((v3 & 0x2000000000000000) != 0)
        {
          v66 = v2;
          v67 = v3 & 0xFFFFFFFFFFFFFFLL;
          v10 = *((unsigned __int8 *)&v66 + v9);
        }
        else
        {
          result = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v2 & 0x1000000000000000) == 0)
            result = sub_23835B634();
          v10 = *(unsigned __int8 *)(result + v9);
        }
        v11 = (char)v10;
        v12 = __clz(v10 ^ 0xFF) - 24;
        if (v11 >= 0)
          LOBYTE(v12) = 1;
        v4 = ((v9 + v12) << 16) | 5;
      }
      ++v7;
      if (v6 <= v4 >> 14)
        goto LABEL_35;
    }
    __break(1u);
    goto LABEL_148;
  }
  if (v6 < v4 >> 14)
  {
    v8 = 0;
    while (1)
    {
      v13 = __OFSUB__(v8--, 1);
      if (v13)
        goto LABEL_153;
      if ((v3 & 0x1000000000000000) == 0)
        break;
      result = sub_23835ADC4();
      v4 = result;
LABEL_18:
      if (v6 >= v4 >> 14)
        goto LABEL_35;
    }
    v14 = v4 >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v66 = v2;
      v67 = v3 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v66 + v14 - 1) & 0xC0) == 0x80)
      {
        v15 = 0;
        do
          v17 = *((_BYTE *)&v65 + v14 + v15-- + 6) & 0xC0;
        while (v17 == 128);
        goto LABEL_31;
      }
    }
    else
    {
      result = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000) == 0)
        result = sub_23835B634();
      if ((*(_BYTE *)(v14 + result - 1) & 0xC0) == 0x80)
      {
        v15 = 0;
        do
          v16 = *(_BYTE *)(result + v14 - 2 + v15--) & 0xC0;
        while (v16 == 128);
LABEL_31:
        v18 = 1 - v15;
LABEL_33:
        v4 = (v4 - (v18 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_18;
      }
    }
    v18 = 1;
    goto LABEL_33;
  }
  v8 = 0;
LABEL_35:
  v19 = v65[1];
  v20 = v65[2];
  v21 = v65[3];
  v22 = sub_2382666B0(*v65, v20, v21);
  result = sub_2382666B0(v19, v20, v21);
  v23 = result >> 14;
  if (v22 >> 14 < result >> 14)
  {
    v24 = 0;
    while (1)
    {
      v25 = v24 + 1;
      if (__OFADD__(v24, 1))
        break;
      if ((v21 & 0x1000000000000000) != 0)
      {
        result = sub_23835ADB8();
        v22 = result;
      }
      else
      {
        v26 = v22 >> 16;
        if ((v21 & 0x2000000000000000) != 0)
        {
          v66 = v20;
          v67 = v21 & 0xFFFFFFFFFFFFFFLL;
          v27 = *((unsigned __int8 *)&v66 + v26);
        }
        else
        {
          result = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v20 & 0x1000000000000000) == 0)
            result = sub_23835B634();
          v27 = *(unsigned __int8 *)(result + v26);
        }
        v28 = (char)v27;
        v29 = __clz(v27 ^ 0xFF) - 24;
        if (v28 >= 0)
          LOBYTE(v29) = 1;
        v22 = ((v26 + v29) << 16) | 5;
      }
      ++v24;
      if (v23 <= v22 >> 14)
        goto LABEL_69;
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  if (v23 < v22 >> 14)
  {
    v25 = 0;
    while (1)
    {
      v13 = __OFSUB__(v25--, 1);
      if (v13)
        goto LABEL_154;
      if ((v21 & 0x1000000000000000) == 0)
        break;
      result = sub_23835ADC4();
      v22 = result;
LABEL_52:
      if (v23 >= v22 >> 14)
        goto LABEL_69;
    }
    if ((v21 & 0x2000000000000000) != 0)
    {
      v66 = v20;
      v67 = v21 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v66 + (v22 >> 16) - 1) & 0xC0) == 0x80)
      {
        v30 = 0;
        do
          v32 = *((_BYTE *)&v65 + (v22 >> 16) + v30-- + 6) & 0xC0;
        while (v32 == 128);
        goto LABEL_65;
      }
    }
    else
    {
      result = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v20 & 0x1000000000000000) == 0)
        result = sub_23835B634();
      if ((*(_BYTE *)((v22 >> 16) + result - 1) & 0xC0) == 0x80)
      {
        v30 = 0;
        do
          v31 = *(_BYTE *)(result + (v22 >> 16) - 2 + v30--) & 0xC0;
        while (v31 == 128);
LABEL_65:
        v33 = 1 - v30;
LABEL_67:
        v22 = (v22 - (v33 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_52;
      }
    }
    v33 = 1;
    goto LABEL_67;
  }
  v25 = 0;
LABEL_69:
  swift_bridgeObjectRetain();
  v34 = sub_238266994();
  v36 = v35;
  swift_bridgeObjectRelease();
  result = sub_2382666B0(0xFuLL, v34, v36);
  v37 = result;
  if (v8 < 0)
  {
    v43 = 0;
    while (1)
    {
      if (v37 < 0x10000)
        goto LABEL_151;
      if ((v36 & 0x1000000000000000) == 0)
        break;
      result = sub_23835ADC4();
      v37 = result;
LABEL_88:
      if (v8 >= --v43)
        goto LABEL_104;
    }
    v44 = v37 >> 16;
    if ((v36 & 0x2000000000000000) != 0)
    {
      v66 = v34;
      v67 = v36 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v66 + v44 - 1) & 0xC0) == 0x80)
      {
        v45 = 0;
        do
          v47 = *((_BYTE *)&v65 + v44 + v45-- + 6) & 0xC0;
        while (v47 == 128);
        goto LABEL_101;
      }
    }
    else
    {
      result = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v34 & 0x1000000000000000) == 0)
        result = sub_23835B634();
      if ((*(_BYTE *)(v44 + result - 1) & 0xC0) == 0x80)
      {
        v45 = 0;
        do
          v46 = *(_BYTE *)(result + v44 - 2 + v45--) & 0xC0;
        while (v46 == 128);
LABEL_101:
        v48 = 1 - v45;
LABEL_103:
        v37 = ((v44 - v48) << 16) | 5;
        goto LABEL_88;
      }
    }
    v48 = 1;
    goto LABEL_103;
  }
  if (v8)
  {
    if ((v36 & 0x2000000000000000) != 0)
      v38 = HIBYTE(v36) & 0xF;
    else
      v38 = v34 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v39 = v37 >> 16;
      if (v37 >> 16 >= v38)
        goto LABEL_149;
      if ((v36 & 0x1000000000000000) != 0)
      {
        result = sub_23835ADB8();
        v37 = result;
        if (!--v8)
          break;
      }
      else
      {
        if ((v36 & 0x2000000000000000) != 0)
        {
          v66 = v34;
          v67 = v36 & 0xFFFFFFFFFFFFFFLL;
          v40 = *((unsigned __int8 *)&v66 + v39);
        }
        else
        {
          result = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v34 & 0x1000000000000000) == 0)
            result = sub_23835B634();
          v40 = *(unsigned __int8 *)(result + v39);
        }
        v41 = (char)v40;
        v42 = __clz(v40 ^ 0xFF) - 24;
        if (v41 >= 0)
          LOBYTE(v42) = 1;
        v37 = ((v39 + v42) << 16) | 5;
        if (!--v8)
          break;
      }
    }
  }
LABEL_104:
  result = sub_2382666B0(v37, v34, v36);
  if (v25 < 0)
  {
    v55 = 0;
    while (1)
    {
      if (result < 0x10000)
        goto LABEL_152;
      if ((v36 & 0x1000000000000000) == 0)
        break;
      result = sub_23835ADC4();
LABEL_123:
      if (v25 >= --v55)
        goto LABEL_139;
    }
    v56 = result >> 16;
    if ((v36 & 0x2000000000000000) != 0)
    {
      v66 = v34;
      v67 = v36 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v66 + v56 - 1) & 0xC0) == 0x80)
      {
        v58 = 0;
        do
          v60 = *((_BYTE *)&v65 + v56 + v58-- + 6) & 0xC0;
        while (v60 == 128);
        goto LABEL_136;
      }
    }
    else
    {
      v57 = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v34 & 0x1000000000000000) == 0)
        v57 = sub_23835B634();
      if ((*(_BYTE *)(v56 + v57 - 1) & 0xC0) == 0x80)
      {
        v58 = 0;
        do
          v59 = *(_BYTE *)(v57 + v56 - 2 + v58--) & 0xC0;
        while (v59 == 128);
LABEL_136:
        v61 = 1 - v58;
LABEL_138:
        result = ((v56 - v61) << 16) | 5;
        goto LABEL_123;
      }
    }
    v61 = 1;
    goto LABEL_138;
  }
  if (v25)
  {
    if ((v36 & 0x2000000000000000) != 0)
      v49 = HIBYTE(v36) & 0xF;
    else
      v49 = v34 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v50 = result >> 16;
      if (result >> 16 >= v49)
        goto LABEL_150;
      if ((v36 & 0x1000000000000000) != 0)
      {
        result = sub_23835ADB8();
        if (!--v25)
          break;
      }
      else
      {
        if ((v36 & 0x2000000000000000) != 0)
        {
          v66 = v34;
          v67 = v36 & 0xFFFFFFFFFFFFFFLL;
          v52 = *((unsigned __int8 *)&v66 + v50);
        }
        else
        {
          v51 = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v34 & 0x1000000000000000) == 0)
            v51 = sub_23835B634();
          v52 = *(unsigned __int8 *)(v51 + v50);
        }
        v53 = (char)v52;
        v54 = __clz(v52 ^ 0xFF) - 24;
        if (v53 >= 0)
          LOBYTE(v54) = 1;
        result = ((v50 + v54) << 16) | 5;
        if (!--v25)
          break;
      }
    }
  }
LABEL_139:
  v62 = v65;
  if ((*(_BYTE *)v65 & 2) != 0)
    v63 = v37 | 3;
  else
    v63 = v37;
  if ((v65[1] & 2) != 0)
    v64 = result | 3;
  else
    v64 = result;
  if (v64 >> 14 >= v63 >> 14)
  {
    result = swift_bridgeObjectRelease();
    *v62 = v63;
    v62[1] = v64;
    v62[2] = v34;
    v62[3] = v36;
    return result;
  }
LABEL_155:
  __break(1u);
  return result;
}

uint64_t *sub_2382F9F7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    a1[4] = a2[4];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23835BAFC();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_2382FA028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23835BAFC();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_2382FA0A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23835BAFC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_2382FA13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23835BAFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_2382FA1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23835BAFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_2382FA21C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2382FA228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23835BAFC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_2382FA2A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2382FA2B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_23835BAFC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t _arrayDescription<A>(for:debug:typeName:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v27 = a3;
  v31 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v27 - v10;
  v12 = sub_23835B334();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v27 - v14;
  v28 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v19 = (char *)&v27 - v18;
  v35 = 0;
  v36 = 0xE000000000000000;
  v30 = a4;
  if (a4)
  {
    v33 = v27;
    v34 = a4;
    swift_bridgeObjectRetain();
    sub_23835AE90();
    v27 = a1;
    sub_23835AE90();
    a1 = v27;
    swift_bridgeObjectRelease();
  }
  sub_23835AE90();
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v17, a1, a5);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  sub_23835B484();
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v15, 1, AssociatedTypeWitness) != 1)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v22(v11, v15, AssociatedTypeWitness);
    if ((v31 & 1) == 0)
      goto LABEL_9;
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_23835CD60;
    *(_QWORD *)(v23 + 56) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v23 + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    sub_23835B580();
    while (1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      sub_23835B484();
      if (v20(v15, 1, AssociatedTypeWitness) == 1)
        break;
      v22(v11, v15, AssociatedTypeWitness);
      sub_23835AE90();
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_23835CD60;
      *(_QWORD *)(v25 + 56) = AssociatedTypeWitness;
      v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v25 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v26, v11, AssociatedTypeWitness);
      sub_23835B9D0();
    }
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v32);
  sub_23835AE90();
  if (v30)
    sub_23835AE90();
  return v35;
}

uint64_t _addressString(for:)()
{
  sub_23826C710();
  sub_23835AF50();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  return 30768;
}

{
  sub_23826C710();
  sub_23835AF50();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t _dictionaryDescription<A, B, C>(for:debug:typeName:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  int v47;
  uint64_t AssociatedConformanceWitness;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v47 = a2;
  v14 = *(_QWORD *)(a6 - 8);
  AssociatedConformanceWitness = a1;
  v49 = v14;
  v15 = MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = sub_23835B334();
  v51 = *(_QWORD *)(v22 - 8);
  v52 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v50 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v40 - v26;
  v41 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v42 = (char *)&v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v46 = a8;
  v43 = *(_QWORD *)(a8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v53 = (char *)&v40 - v29;
  v58 = 0;
  v59 = 0xE000000000000000;
  v45 = a4;
  if (a4)
  {
    v56 = a3;
    v57 = a4;
    swift_bridgeObjectRetain();
    sub_23835AE90();
    sub_23835AE90();
    a4 = v45;
    swift_bridgeObjectRelease();
  }
  v30 = AssociatedConformanceWitness;
  if ((sub_23835B1C0() & 1) != 0)
  {
    sub_23835AE90();
    if (!a4)
      return v58;
    goto LABEL_15;
  }
  sub_23835AE90();
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v30, a7);
  sub_23835AF8C();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31 = 1;
  v46 = xmmword_23835CD60;
  while (1)
  {
    v32 = v50;
    sub_23835B484();
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v27, v32, v52);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v27, 1, TupleTypeMetadata2) == 1)break;
    v33 = &v27[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v20, v27, a5);
    v34 = v49;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v17, v33, a6);
    if ((v31 & 1) == 0)
      sub_23835AE90();
    if ((v47 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v46;
      *(_QWORD *)(v35 + 56) = a5;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v35 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 16))(boxed_opaque_existential_1, v20, a5);
      sub_23835B580();
      swift_bridgeObjectRelease();
      sub_23835AE90();
      v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = v46;
      *(_QWORD *)(v37 + 56) = a6;
      v38 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v37 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(v38, v17, a6);
      sub_23835B580();
    }
    else
    {
      v56 = 0;
      v57 = 0xE000000000000000;
      sub_23835B8F8();
      sub_23835AE90();
      sub_23835B8F8();
      sub_23835AE90();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v17, a6);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v20, a5);
    v31 = 0;
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v53, AssociatedTypeWitness);
  sub_23835AE90();
  if (v45)
LABEL_15:
    sub_23835AE90();
  return v58;
}

uint64_t _addressString<A>(for:)()
{
  sub_23826C710();
  sub_23835AF50();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t Rope._UnsafeHandle.mutableChildren.getter(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2382FADF4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _QWORD, uint64_t))MEMORY[0x24BEE1CC8]);
}

uint64_t Rope._UnsafeHandle.childCount.getter(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t Rope._UnsafeHandle.mutableChildPtr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a3 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1;
}

uint64_t Rope._UnsafeHandle._removeChild(at:)(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = sub_23835B328();
  v5 = (unsigned __int16)*a2;
  v6 = __OFSUB__(v5, a1);
  v7 = v5 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFSUB__(v7, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = sub_23835B31C();
  if (*a2)
  {
    --*a2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle.children.getter(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2382FADF4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _QWORD, uint64_t))MEMORY[0x24BEE0998]);
}

uint64_t sub_2382FADF4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD, uint64_t))
{
  return a7(a2, *a1, a4);
}

uint64_t Rope._UnsafeHandle._appendChild(_:)(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2382FBE4C(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

void Rope._UnsafeHandle.copy()()
{
  type metadata accessor for Rope._Storage();
}

uint64_t sub_2382FAE70()
{
  __int16 *v0;
  uint64_t v1;
  __int16 v2;

  v1 = static Rope._Storage.create(height:)();
  v2 = *v0;
  swift_beginAccess();
  *(_WORD *)(v1 + 16) = v2;
  sub_23835B2F8();
  return v1;
}

void Rope._UnsafeHandle.copy(slots:)()
{
  type metadata accessor for Rope._Storage();
}

uint64_t sub_2382FAF30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = static Rope._Storage.create(height:)();
  if (__OFSUB__(v0, v2))
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
    sub_2382FB808((_WORD *)(result + 16), result + ((v7 + 19) & ~v7), v0 - v2, v3, v1, v2, v0);
    return v6;
  }
  return result;
}

uint64_t Rope._UnsafeHandle.init(isMutable:header:start:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return nullsub_1(a2, a3, a4, a5, a6);
}

uint64_t Rope._UnsafeHandle._insertChild(_:at:)(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2382FBEF0(a1, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
}

uint64_t Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  if (a3 >= 1)
  {
    sub_23835B31C();
    result = sub_23835B31C();
    v8 = (unsigned __int16)*a4;
    v9 = __OFADD__(v8, a3);
    v10 = v8 + a3;
    if (v9)
    {
      __break(1u);
    }
    else if ((v10 & 0x8000000000000000) == 0)
    {
      if (!(v10 >> 16))
      {
        *a4 = v10;
        v11 = (unsigned __int16)*a1 - a3;
        if (v11 >= 0)
        {
          *a1 = v11;
          sub_23835AD58();
          v12 = sub_23835AD7C();
          MEMORY[0x23B831670](MEMORY[0x24BEE09D0], v12);
          sub_23835AC38();
          MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v12);
          v13 = sub_23835B9C4();
          MEMORY[0x23B831670](MEMORY[0x24BEE4228], v13);
          return Sequence<>._sum()();
        }
        goto LABEL_12;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  if (a3 >= 1)
  {
    sub_23835B31C();
    result = sub_23835B31C();
    v8 = (unsigned __int16)*a4;
    v9 = __OFADD__(v8, a3);
    v10 = v8 + a3;
    if (v9)
    {
      __break(1u);
    }
    else if ((v10 & 0x8000000000000000) == 0)
    {
      if (!(v10 >> 16))
      {
        *a4 = v10;
        v11 = (unsigned __int16)*a1 - a3;
        if (v11 >= 0)
        {
          *a1 = v11;
          sub_23835AD58();
          v12 = sub_23835AD7C();
          MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v12);
          sub_23835B220();
          v13 = sub_23835B9C4();
          MEMORY[0x23B831670](MEMORY[0x24BEE4228], v13);
          return Sequence<>._sum()();
        }
        goto LABEL_12;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_2382FB3C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a2 + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1, a3);
}

uint64_t Rope._UnsafeHandle.height.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 >= a1)
    goto LABEL_5;
  sub_23835AD58();
  v7 = sub_23835AD88();
  MEMORY[0x24BDAC7A8](v7);
  v2 = sub_23835AD7C();
  MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v2);
  v3 = sub_23835B9C4();
  MEMORY[0x23B831670](MEMORY[0x24BEE4228], v3);
  sub_23835B004();
  result = -v9;
  if (__OFSUB__(0, v9))
  {
    __break(1u);
LABEL_5:
    sub_23835AD58();
    v8 = sub_23835AD88();
    MEMORY[0x24BDAC7A8](v8);
    v5 = sub_23835AD7C();
    MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v5);
    v6 = sub_23835B9C4();
    MEMORY[0x23B831670](MEMORY[0x24BEE4228], v6);
    sub_23835B004();
    return v9;
  }
  return result;
}

uint64_t Rope._UnsafeHandle._start.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Rope._UnsafeHandle.capacity.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

unint64_t Rope._UnsafeHandle.childCount.setter(unint64_t result, _WORD *a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (!(result >> 16))
  {
    *a2 = result;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *(*Rope._UnsafeHandle.childCount.modify(_QWORD *a1, unsigned __int16 *a2))(unint64_t *result, char a2)
{
  *a1 = *a2;
  a1[1] = a2;
  return sub_2382FB6C8;
}

unint64_t *sub_2382FB6C8(unint64_t *result, char a2)
{
  unint64_t v2;

  v2 = *result;
  if ((a2 & 1) != 0)
  {
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }
    if (!(v2 >> 16))
    {
LABEL_7:
      *(_WORD *)result[1] = v2;
      return result;
    }
    __break(1u);
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (!(v2 >> 16))
    goto LABEL_7;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle.child(at:)@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a4 - 8);
  if (*a2 <= a1)
  {
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a5, a3 + *(_QWORD *)(v7 + 72) * a1, a4);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a5, v8, 1, a4);
}

uint64_t Rope._UnsafeHandle.mutableBuffer.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return sub_23835B358();
}

_WORD *sub_2382FB808(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a3 >> 16)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *result = a3;
  if (!__OFSUB__(a7, a6))
  {
    sub_23835B2F8();
    sub_23835AD58();
    v7 = sub_23835AD7C();
    MEMORY[0x23B831670](MEMORY[0x24BEE09D8], v7);
    return (_WORD *)Sequence<>._sum()();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle._removePrefix(_:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a5;
  v28 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v25 - v12;
  v34 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness);
  result = sub_23835B358();
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v26 = a2;
  v27 = a1;
  v30 = a6;
  v32 = AssociatedConformanceWitness;
  if (a1)
  {
    v18 = result;
    v29 = *(void (**)(uint64_t, uint64_t))(v33 + 24);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 48);
    v20 = *(_QWORD *)(v34 + 72);
    v21 = v27;
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 32);
    do
    {
      v22(v15, v18, a4);
      v29(a4, v33);
      v19(v13, AssociatedTypeWitness, v32);
      v23 = v34;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, AssociatedTypeWitness);
      result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v15, a4);
      v18 += v20;
      --v21;
    }
    while (v21);
  }
  v24 = (unsigned __int16)*v26 - v27;
  if (v24 < 0)
    goto LABEL_9;
  if (!((unint64_t)v24 >> 16))
  {
    *v26 = v24;
    return sub_23835B31C();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t Rope._UnsafeHandle._removeSuffix(_:)(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v35 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v27 - v12;
  v36 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  result = sub_23835B358();
  v18 = *a2;
  v19 = v18 - a1;
  v20 = __OFSUB__(v18, a1);
  if (__OFSUB__(v18, a1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v19 > v18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v19 == v18)
    goto LABEL_13;
  if (v19 < v18)
  {
    v28 = a1;
    v29 = a2;
    v21 = *(void (**)(uint64_t, uint64_t))(v35 + 24);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    v34 = v21;
    v32 = AssociatedConformanceWitness;
    v22 = *(_QWORD *)(v36 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
    v23 = result + v22 * v19;
    v24 = v30;
    do
    {
      v31(v15, v23, a5);
      v34(a5, v35);
      v33(v13, AssociatedTypeWitness, v32);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v13, AssociatedTypeWitness);
      result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v15, a5);
      v23 += v22;
      --a1;
    }
    while (a1);
    a2 = v29;
    v25 = *v29;
    v26 = __OFSUB__(v25, v28);
    v19 = v25 - v28;
    v20 = v26;
LABEL_13:
    if (!v20)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        if (!((unint64_t)v19 >> 16))
        {
          *a2 = v19;
          return result;
        }
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_2382FBD24(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a5;
  v20 = a3;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v18 - v14;
  (*(void (**)(uint64_t, uint64_t))(a7 + 24))(v19, a7);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a8 + 24))(v15, a6, a8);
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  if (__OFADD__(*a1, v16))
    __break(1u);
  else
    *a1 += v16;
  return result;
}

uint64_t sub_2382FBE4C(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v10 + *(_QWORD *)(v9 + 72) * (unsigned __int16)*a2;
  (*(void (**)(char *))(v9 + 16))(v8);
  result = sub_2382F7024((uint64_t)v8, v11, a5);
  v13 = (unsigned __int16)*a2;
  if (v13 == 0xFFFF)
    __break(1u);
  else
    *a2 = v13 + 1;
  return result;
}

uint64_t sub_2382FBEF0(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a6 - 8);
  result = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(*v15, v11))
  {
    __break(1u);
  }
  else
  {
    v16 = v12 + *(_QWORD *)(v9 + 72) * v11;
    sub_23835B31C();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, a6);
    result = sub_2382F7024((uint64_t)v14, v16, a6);
    v17 = (unsigned __int16)*a3;
    if (v17 != 0xFFFF)
    {
      *a3 = v17 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2382FBFC0(_QWORD *a1, uint64_t a2)
{
  return sub_2382FBFD4(a1, a2);
}

uint64_t sub_2382FBFD4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2382FBD24(a1, a2, v2[7], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void type metadata accessor for Rope._UnsafeHandle()
{
  JUMPOUT(0x23B831604);
}

uint64_t BitSet._capacity.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) << 6;
}

void sub_2382FC010()
{
  uint64_t v0;
  int64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = v1 - 1;
  if (v1)
  {
    v3 = v1 - 1;
    if (*(_QWORD *)(*(_QWORD *)v0 + 8 * v2 + 32))
      goto LABEL_8;
    v4 = *(_QWORD *)(*(_QWORD *)v0 + 16);
    while (1)
    {
      v3 = v4 - 2;
      if (v4 - 1 < 1)
        break;
      if (*(_QWORD *)(*(_QWORD *)v0 + 16 + 8 * v4--))
        goto LABEL_8;
    }
  }
  v3 = -1;
LABEL_8:
  v6 = v2 - v3;
  if (v6 >= 1)
  {
    v7 = v1 - v6;
    if (v1 < v6)
    {
      __break(1u);
    }
    else if (v1 >= v7)
    {
      sub_2382E2A7C(v7, v1);
      return;
    }
    __break(1u);
  }
}

uint64_t BitSet._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*BitSet._storage.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for BitSet()
{
  return &type metadata for BitSet;
}

_BYTE *sub_2382FC0D0(_BYTE *result, uint64_t *a2)
{
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;

  if (*result == 1)
  {
    v2 = *a2;
    v3 = *(_QWORD *)(*a2 + 16);
    v4 = v3 - 1;
    if (v3)
    {
      v5 = v3 - 1;
      if (*(_QWORD *)(v2 + 32 + 8 * v4))
        goto LABEL_6;
      v5 = v3 - 2;
      if ((unint64_t)v3 >= 2)
      {
        if (*(_QWORD *)(v2 + 32 + 8 * v5))
        {
LABEL_6:
          v6 = v4 - v5;
          if (v6 < 1)
            return result;
          result = (_BYTE *)(v3 - v6);
          if (v3 < v6)
          {
            __break(1u);
          }
          else if (v3 >= (uint64_t)result)
          {
            return (_BYTE *)sub_2382E2A7C((unint64_t)result, v3);
          }
          __break(1u);
          return result;
        }
        v7 = v2 + 8;
        v8 = v3;
        while (v8 - 2 >= 1)
        {
          if (*(_QWORD *)(v7 + 8 * v8--))
          {
            v5 = v8 - 2;
            goto LABEL_6;
          }
        }
      }
    }
    v5 = -1;
    goto LABEL_6;
  }
  return result;
}

uint64_t Heap._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Heap._storage.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Heap.init()()
{
  sub_23835B070();
  return sub_23835B670();
}

uint64_t Heap.isEmpty.getter()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v0);
  return sub_23835B22C() & 1;
}

uint64_t Heap.unordered.getter()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  swift_retain();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A48], v0);
  return sub_23835B0DC();
}

_QWORD *Heap.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v3 + 16))((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23835B6E8();
  sub_23835B6AC();
  sub_23835B688();
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v6 = *(_QWORD *)v2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8[0] = v6;
  v8[1] = v5;
  sub_2382FC398(v6, v5);
  return sub_23828CD3C(v8, v6, v5);
}

void sub_2382FC398(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFFFFFFFFFELL)
  {
    v3 = __clz(a2) ^ 0x3F;
    Heap._UnsafeHandle.bubbleUp(_:)(*(CollectionsInternal::_HeapNode *)&v2);
    return;
  }
  __break(1u);
}

uint64_t Heap.min()()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v0);
  return sub_23835B214();
}

uint64_t Heap.max()()
{
  sub_23835B334();
  return sub_23835B694();
}

uint64_t sub_2382FC498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  _QWORD v19[4];

  v7 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v19 - v12;
  if (v11 < 3)
  {
    v19[0] = a1;
    v19[1] = v11;
    v18 = sub_23835AD7C();
    MEMORY[0x23B831670](MEMORY[0x24BEE09D0], v18);
    return sub_23835AC14();
  }
  else
  {
    v14 = *(_QWORD *)(v7 + 72);
    v19[3] = v3;
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v15((char *)v19 - v12, a1 + v14, a2);
    v15(v10, a1 + 2 * v14, a2);
    sub_23835B988();
    v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, a2);
    v16(v13, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, a2);
  }
}

uint64_t Heap.popMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s19CollectionsInternal4HeapV5countSivg_0() < 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v8 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v8);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v8);
  sub_23835B2B0();
  if (_s19CollectionsInternal4HeapV5countSivg_0() >= 1)
  {
    sub_23835B688();
    v9 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    v12[0] = *(_QWORD *)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v10 = v12[0];
    v12[1] = v9;
    sub_2382FCBEC();
    sub_23828CD3C(v12, v10, v9);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Heap.popMax()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  v9 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v9);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v9);
  if (v8 < 3)
    JUMPOUT(0x23B830C08);
  sub_23835B2B0();
  sub_23835B688();
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v11 = *(_QWORD *)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v13[0] = v11;
  v13[1] = v10;
  sub_2382FC944(v11, v10, (uint64_t)v7, v4);
  sub_23828CD3C(v13, v11, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_2382FC944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  Swift::Int v20;
  CollectionsInternal::_HeapNode v21;
  uint64_t v22;

  v7 = *(_QWORD **)(a4 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - v11;
  v13 = v7[9];
  if (v14 == 2)
  {
    v15 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    v15((char *)&v22 - v11, a1 + v13, a4);
    v15(v10, a3, a4);
    v16 = sub_23835AC68();
    v17 = (void (*)(char *, uint64_t))v7[1];
    v17(v10, a4);
    v17(v12, a4);
    if ((v16 & 1) != 0)
    {
      sub_23835AD4C();
      sub_23835B994();
    }
  }
  else
  {
    v18 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    v18((char *)&v22 - v11, a1 + 2 * v13, a4);
    v18(v10, a1 + v13, a4);
    LOBYTE(v18) = sub_23835AC74();
    v19 = (void (*)(char *, uint64_t))v7[1];
    v19(v10, a4);
    v19(v12, a4);
    if ((v18 & 1) != 0)
      v20 = 1;
    else
      v20 = 2;
    sub_23835AD4C();
    sub_23835B994();
    v21.offset = v20;
    v21.level = 1;
    Heap._UnsafeHandle.trickleDownMax(_:)(v21);
  }
}

uint64_t Heap.removeMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2382FCB2C(a1, (void (*)(uint64_t))Heap.popMin(), a2);
}

uint64_t Heap.removeMax()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2382FCB2C(a1, (void (*)(uint64_t))Heap.popMax(), a2);
}

uint64_t sub_2382FCB2C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  a2(a1);
  v10 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v9, v6);
  __break(1u);
  return result;
}

uint64_t Heap.replaceMin(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2382FCC60(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_2382FCBEC, a3);
}

void sub_2382FCBEC()
{
  sub_23835AD4C();
  sub_23835B994();
  Heap._UnsafeHandle.trickleDownMin(_:)((CollectionsInternal::_HeapNode)0);
}

uint64_t Heap.replaceMax(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2382FCC60(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_2382FCD74, a3);
}

uint64_t sub_2382FCC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];

  v6 = v4;
  v15[0] = *v4;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v11);
  result = sub_23835B22C();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a4, a1, v10);
    sub_23835B688();
    v14 = *(_QWORD *)(*v4 + 16);
    v15[0] = *v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15[1] = v14;
    a3(v15[0], v14, a4, v10, *(_QWORD *)(a2 + 24));
    return (uint64_t)sub_23828CD3C(v15, v15[0], v14);
  }
  return result;
}

void sub_2382FCD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  CollectionsInternal::_HeapNode v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  Swift::Int v18;
  CollectionsInternal::_HeapNode v19;
  CollectionsInternal::_HeapNode v20;
  uint64_t v21;

  v7 = *(_QWORD **)(a4 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - v11;
  if (v13 == 2)
  {
    sub_23835AD4C();
    sub_23835B994();
    v14.offset = 1;
    v14.level = 1;
    Heap._UnsafeHandle.bubbleUp(_:)(v14);
  }
  else if (a2 == 1)
  {
    sub_23835AD4C();
    sub_23835B994();
  }
  else
  {
    v15 = v7[9];
    v16 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    v16((char *)&v21 - v11, a1 + v15, a4);
    v16(v10, a1 + 2 * v15, a4);
    LOBYTE(v16) = sub_23835AC74();
    v17 = (void (*)(char *, uint64_t))v7[1];
    v17(v10, a4);
    v17(v12, a4);
    if ((v16 & 1) != 0)
      v18 = 2;
    else
      v18 = 1;
    sub_23835AD4C();
    sub_23835B994();
    v19.offset = v18;
    v19.level = 1;
    Heap._UnsafeHandle.bubbleUp(_:)(v19);
    v20.offset = v18;
    v20.level = 1;
    Heap._UnsafeHandle.trickleDownMax(_:)(v20);
  }
}

uint64_t Heap.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[2];
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v8 = sub_23835B0DC();
  v16 = v8;
  swift_retain();
  v9 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  if (v9 < 2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a3);
  }
  else
  {
    sub_23835B6E8();
    sub_23835B688();
    v10 = *(_QWORD *)(v16 + 16);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
    v12 = v16 + ((v11 + 32) & ~v11);
    v15[0] = v12;
    v15[1] = v10;
    Heap._UnsafeHandle.heapify()();
    sub_23828CD3C(v15, v12, v10);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a3);
    return v16;
  }
  return v8;
}

uint64_t Heap.insert<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;
  char *v38;

  v5 = v4;
  v36 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v31 - v12;
  AssociatedConformanceWitness = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)&v31 - v17;
  v35 = a3;
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v5;
  if (_s19CollectionsInternal4HeapV5countSivg_0())
  {
    v32 = v18;
    v22 = _s19CollectionsInternal4HeapV5countSivg_0();
    result = sub_23835AFA4();
    if (__OFADD__(v22, result))
    {
      __break(1u);
    }
    else
    {
      v31 = v15;
      sub_23835B6E8();
      sub_23835B67C();
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v20, v36, v35);
      sub_23835AF8C();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      sub_23835B484();
      v24 = v33;
      v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
      v26 = v25(v13, 1, v8);
      v27 = AssociatedTypeWitness;
      v28 = v34;
      if (v26 != 1)
      {
        v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
        do
        {
          v29(v10, v13, v8);
          Heap.insert(_:)((uint64_t)v10, v28);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
          sub_23835B484();
        }
        while (v25(v13, 1, v8) != 1);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v38, v27);
    }
  }
  else
  {
    swift_release();
    v30 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v36, v35);
    result = Heap.init<A>(_:)((uint64_t)v20, v8, v30);
    *v21 = result;
  }
  return result;
}

uint64_t sub_2382FD3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2382FC498(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for Heap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Heap);
}

Swift::Void __swiftcall OrderedDictionary.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), v2);
  OrderedSet.reserveCapacity(_:)(a1);
  sub_23835B6E8();
  sub_23835B67C();
}

Swift::Void __swiftcall OrderedDictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), v2);
  OrderedSet.removeAll(keepingCapacity:)(keepingCapacity);
  sub_23835B6E8();
  sub_23835B6D0();
}

uint64_t OrderedDictionary.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 32), a4);
  OrderedSet.remove(at:)(a3, v5);
  sub_23835B6E8();
  return sub_23835B6C4();
}

uint64_t OrderedDictionary.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  OrderedSet.removeSubrange(_:)(a1, a2, v6);
  v7 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v7);
  return sub_23835B298();
}

uint64_t OrderedDictionary.removeSubrange<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for OrderedDictionary.Elements(0, a2[2], a2[3], a2[4]);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v3);
  sub_23835B040();
  return OrderedDictionary.removeSubrange(_:)(v6, v7, (uint64_t)a2, v4);
}

uint64_t OrderedDictionary.removeLast()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v6);
  result = sub_23835B22C();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    result = _s19CollectionsInternal4HeapV5countSivg_0();
    if (!__OFSUB__(result, 1))
      return OrderedDictionary.remove(at:)(a1, a2, result - 1, a3);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    if (_s19CollectionsInternal4HeapV5countSivg_0() >= a1)
    {
      type metadata accessor for OrderedSet(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), v4);
      OrderedSet.removeLast(_:)(a1);
      v5 = sub_23835B6E8();
      MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v5);
      MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v5);
      sub_23835B2BC();
      return;
    }
  }
  __break(1u);
}

uint64_t OrderedDictionary.removeFirst()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v6);
  result = sub_23835B22C();
  if ((result & 1) == 0)
    return OrderedDictionary.remove(at:)(a1, a2, 0, a3);
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    if (_s19CollectionsInternal4HeapV5countSivg_0() >= a1)
    {
      type metadata accessor for OrderedSet(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), v4);
      OrderedSet.removeFirst(_:)(a1);
      v5 = sub_23835B6E8();
      MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v5);
      sub_23835B28C();
      return;
    }
  }
  __break(1u);
}

_QWORD *OrderedDictionary.removeAll(where:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  uint64_t v15;

  v8 = a3[3];
  sub_23835B6E8();
  sub_23835B688();
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v14[0] = v12;
  v14[1] = v10;
  sub_2382FDA14(v14, a1, a2, a3[2], v8, a3[4], &v15);
  if (v4)
    return sub_23828CD3C(v14, v12, v10);
  sub_23828CD3C(v14, v12, v10);
  v14[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1D28);
  sub_2382FDA9C();
  return (_QWORD *)OrderedDictionary.removeSubrange<A>(_:)((uint64_t)v14, a3);
}

uint64_t sub_2382FDA14@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = *a1;
  v13 = a1[1];
  v14 = type metadata accessor for OrderedSet(0, a4, a6, a3);
  result = OrderedSet._halfStablePartition<A>(values:by:)(v12, v13, a2, a3, v14, a5);
  if (!v7)
    *a7 = result;
  return result;
}

unint64_t sub_2382FDA9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F1D30;
  if (!qword_2568F1D30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F1D28);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE2C50], v1);
    atomic_store(result, (unint64_t *)&qword_2568F1D30);
  }
  return result;
}

uint64_t BigString.replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  void (**Description)(uint64_t, _QWORD, __n128);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[40];

  Description = (void (**)(uint64_t, _QWORD, __n128))a3[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x24BEE0D00])
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    v13 = sub_2382FE358(a1, v11, v12);
    Description[1](a2, MEMORY[0x24BEE0D00], v13);
    return swift_bridgeObjectRelease();
  }
  if (a3 == (ValueMetadata *)MEMORY[0x24BEE1E08])
  {
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    v18 = sub_2382FE768(a1, v14, v15, v16, v17);
    Description[1](a2, MEMORY[0x24BEE1E08], v18);
    return swift_bridgeObjectRelease();
  }
  if (a3 == &type metadata for BigString)
  {
    v19 = *(_OWORD *)(a2 + 16);
    v23 = *(__n128 *)a2;
    v24 = v19;
    v25 = *(_OWORD *)(a2 + 32);
    v26 = v23;
    v27 = v19;
    v28 = v25;
    sub_238265C1C((uint64_t)&v26, (uint64_t)v30, qword_2542CB1E0);
    sub_238263DDC((uint64_t)v30);
    sub_2382D4DE0(a1, &v23);
    sub_23825B804((uint64_t)&v23);
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a2, &type metadata for BigString);
  }
  else if (a3 == &type metadata for BigSubstring)
  {
    v20 = *(_OWORD *)(a2 + 16);
    v23 = *(__n128 *)a2;
    v24 = v20;
    v21 = *(__n128 *)(a2 + 48);
    v25 = *(_OWORD *)(a2 + 32);
    v26 = v21;
    v22 = *(_OWORD *)(a2 + 80);
    v27 = *(_OWORD *)(a2 + 64);
    v28 = v22;
    v29 = *(_OWORD *)(a2 + 96);
    swift_unknownObjectRetain();
    sub_23825F734(a1, (__int128 *)&v23, v26.n128_u64);
    swift_unknownObjectRelease();
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a2, &type metadata for BigSubstring);
  }
  else
  {
    ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v8, a2, a3);
    BigString.init<A>(_:)((uint64_t)v8, a3, &v26);
    sub_2382D4DE0(a1, &v26);
    sub_23825B804((uint64_t)&v26);
    return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a2, a3);
  }
}

__n128 BigString.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, __n128 *a3@<X8>)
{
  void (**Description)(uint64_t, _QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, ValueMetadata *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(uint64_t, ValueMetadata *);
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __n128 result;
  __n128 v25;
  __n128 v26;
  _OWORD v27[2];
  unint64_t v28;
  unint64_t v29;
  __int128 v30[3];
  __n128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;

  Description = (void (**)(uint64_t, _QWORD))a2[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x24BEE0D00])
  {
    v13 = *(_QWORD *)a1;
    v14 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    sub_238264D30(v13, v14, &v31);
    v25 = v31;
    v26 = v32;
    v11 = *((_QWORD *)&v33 + 1);
    v10 = v33;
    Description[1](a1, MEMORY[0x24BEE0D00]);
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x24BEE1E08])
  {
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_23825C1A0(v15, v16, v17, v18, &v31);
    v25 = v31;
    v26 = v32;
    v11 = *((_QWORD *)&v33 + 1);
    v10 = v33;
    Description[1](a1, MEMORY[0x24BEE1E08]);
  }
  else if (a2 == &type metadata for BigString)
  {
    v19 = *(__n128 *)(a1 + 16);
    v25 = *(__n128 *)a1;
    v26 = v19;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v20 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    swift_unknownObjectRetain();
    v20(a1, &type metadata for BigString);
  }
  else if (a2 == &type metadata for BigSubstring)
  {
    v21 = *(_OWORD *)(a1 + 16);
    v30[0] = *(_OWORD *)a1;
    v30[1] = v21;
    v22 = *(__n128 *)(a1 + 48);
    v30[2] = *(_OWORD *)(a1 + 32);
    v31 = v22;
    v23 = *(_OWORD *)(a1 + 80);
    v32 = *(__n128 *)(a1 + 64);
    v33 = v23;
    v34 = *(_OWORD *)(a1 + 96);
    swift_unknownObjectRetain();
    sub_238342810(v30, v31.n128_u64, v27);
    v25 = (__n128)v27[0];
    v26 = (__n128)v27[1];
    v10 = v28;
    v11 = v29;
    ((void (**)(uint64_t, ValueMetadata *))Description)[1](a1, &type metadata for BigSubstring);
  }
  else
  {
    ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v8, a1, a2);
    sub_238342A24((uint64_t)v8, (uint64_t)a2, &v31);
    v25 = v31;
    v26 = v32;
    v11 = *((_QWORD *)&v33 + 1);
    v10 = v33;
    v12 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    v12((uint64_t)v8, a2);
    v12(a1, a2);
  }
  result = v26;
  *a3 = v25;
  a3[1] = result;
  a3[2].n128_u64[0] = v10;
  a3[2].n128_u64[1] = v11;
  return result;
}

double BigString.init(repeating:count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v6;
  double result;
  __int128 v8[3];
  _OWORD v9[2];
  __int128 v10;

  sub_238264D30(a1, a2, v8);
  sub_2382FF278(v8, a3, (uint64_t)v9);
  v6 = v9[1];
  *a4 = v9[0];
  a4[1] = v6;
  result = *(double *)&v10;
  a4[2] = v10;
  return result;
}

double BigString.init<A>(repeating:count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, _OWORD *a4@<X8>)
{
  double v7;
  __int128 v8;
  double result;
  _OWORD v10[2];
  __int128 v11;

  v7 = sub_2382FFD4C(a1, a2, a3, v10);
  (*((void (**)(uint64_t, ValueMetadata *, double))a3[-1].Description + 1))(a1, a3, v7);
  v8 = v10[1];
  *a4 = v10[0];
  a4[1] = v8;
  result = *(double *)&v11;
  a4[2] = v11;
  return result;
}

double BigString.init(repeating:count:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  sub_2382FF278(a1, a2, (uint64_t)v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13[3];
  _OWORD v14[2];
  __int128 v15;
  _OWORD v16[4];
  __int128 v17[3];

  v6 = a1[1];
  v17[0] = *a1;
  v17[1] = v6;
  v7 = a1[3];
  v17[2] = a1[2];
  v8 = a1[4];
  v9 = a1[5];
  v16[0] = v7;
  v16[1] = v8;
  v10 = a1[6];
  v16[2] = v9;
  v16[3] = v10;
  sub_238263DDC((uint64_t)a1);
  sub_238342810(v17, (unint64_t *)v16, v13);
  sub_2382FF278(v13, a2, (uint64_t)v14);
  sub_23825B804((uint64_t)a1);
  v11 = v14[1];
  *a3 = v14[0];
  a3[1] = v11;
  result = *(double *)&v15;
  a3[2] = v15;
  return result;
}

unint64_t BigString.insert(_:at:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  return BigString.insert(contentsOf:at:)(a1, a2, a3, a4, a5, a6);
}

uint64_t BigString.insert<A>(contentsOf:at:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, ValueMetadata *a6)
{
  sub_2382FFE04(a1, a2, a3, a4, a5, a6);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a6[-1].Description + 1))(a1, a6);
}

uint64_t BigString.remove(at:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = v4[1];
  v23 = *v4;
  v24 = v5;
  v25 = v4[2];
  v6 = sub_238264714(a1, a2, a3, a4, 0);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  result = sub_23825D9F4(v6, v7, v9, v11, v19);
  v16 = v20;
  if ((unint64_t)v20 >> 10 < v6 >> 10)
  {
    __break(1u);
  }
  else
  {
    v17 = v19[0];
    v18 = v21;
    v19[0] = v6;
    v19[1] = v8;
    *(_QWORD *)&v20 = v10;
    *((_QWORD *)&v20 + 1) = v12;
    v21 = v16;
    v22 = v18;
    sub_2382F21C4((unint64_t *)v19, v14, v15);
    return v17;
  }
  return result;
}

unint64_t *BigString.removeSubrange(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = result[4];
  v5 = 2 * (v3[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v3)
    v5 = 0;
  if (v5 < v4 >> 10)
  {
    __break(1u);
  }
  else
  {
    v6 = *result;
    if (v4 >> 10 == *result >> 10)
      return result;
    result = (unint64_t *)(v6 >> 11);
    if (v4 >> 11 >= v6 >> 11)
      return (unint64_t *)sub_2382FEC48((uint64_t)result, v4 >> 11, a3);
  }
  __break(1u);
  return result;
}

unint64_t BigString.insert(contentsOf:at:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = sub_23835AF80();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease();
  return _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v10, v12, v14, v16, a3, a4, a5, a6);
}

__n128 sub_2382FE358(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 result;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  __n128 v57;
  __int128 v58;
  _BYTE v59[40];
  __int128 v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  __int128 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v4 = v3;
  v8 = sub_23835BAFC();
  v56 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s9_IngesterVMa();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (unint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = _s7BuilderVMa();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v4;
  v17 = *((_QWORD *)v4 + 4);
  v18 = a1[4];
  v19 = 2 * (v17 & 0x1FFFFFFFFFFFFFLL);
  if (!*(_QWORD *)v4)
    v19 = 0;
  if (v19 < v18 >> 10)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v57.n128_u64[0] = a2;
  *(_QWORD *)&v58 = a3;
  v53 = v10;
  v54 = v8;
  v20 = *a1;
  a2 = a1[1];
  v8 = a1[2];
  v21 = (uint64_t *)a1[3];
  if (v18 >> 10 == *a1 >> 10)
  {
    v22 = v58;
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v57.n128_i64[0], v22, v20, a2, v8, (unint64_t)v21);
    return result;
  }
  v24 = v4[1];
  v52 = a1[5];
  v51 = a1[6];
  v50 = (uint64_t *)a1[7];
  v49 = v20 >> 11;
  v48 = v18 >> 11;
  v25 = *((_QWORD *)v4 + 5);
  v68 = v16;
  v69 = v24;
  v70 = v17;
  v71 = v25;
  v26 = (unint64_t)&v15[*(int *)(v13 + 24)];
  v59[0] = 1;
  v47 = v26;
  sub_2382600B8(v20, a2, v8, v21, 0x100000000uLL, v26);
  v27 = (unint64_t)&v15[*(int *)(v13 + 20)];
  v59[0] = 1;
  sub_2382600B8(v18, v52, v51, v50, 0x100000000uLL, v27);
  if (v48 < v49)
    goto LABEL_10;
  sub_23825A61C(v49, v48, v28, (uint64_t)v59);
  v29 = v61;
  v30 = v62;
  v31 = v63;
  v32 = v65;
  v33 = v66;
  v34 = v67;
  v35 = *(_OWORD *)&v59[8];
  v36 = *(_OWORD *)&v59[24];
  v37 = v60;
  v38 = v64;
  *(_QWORD *)v15 = *(_QWORD *)v59;
  *(_OWORD *)(v15 + 8) = v35;
  *(_OWORD *)(v15 + 24) = v36;
  *(_OWORD *)(v15 + 40) = v37;
  *((_QWORD *)v15 + 7) = v29;
  *((_WORD *)v15 + 34) = v31;
  *((_DWORD *)v15 + 16) = v30;
  *(_OWORD *)(v15 + 72) = v38;
  *((_WORD *)v15 + 46) = v33;
  *((_DWORD *)v15 + 22) = v32;
  *((_QWORD *)v15 + 12) = v34;
  *(_QWORD *)v59 = v57.n128_u64[0];
  *(_QWORD *)&v59[8] = v58;
  swift_bridgeObjectRetain();
  v8 = sub_23835B478();
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v13 = v56;
  v18 = (unint64_t)v55;
  a2 = v54;
  (*(void (**)(char *, unint64_t, unint64_t))(v56 + 16))(v55, v47, v54);
  *v12 = v8;
  v12[1] = v40;
  v12[2] = v42;
  v12[3] = v44;
  if ((v44 & 0x1000000000000000) != 0)
LABEL_11:
    sub_2382F977C();
  v12[4] = v8;
  (*(void (**)(char *, unint64_t, unint64_t))(v13 + 32))((char *)v12 + *(int *)(v53 + 24), v18, a2);
  sub_23831A680(v12);
  sub_2382B2104((uint64_t)v15, (uint64_t)v15);
  sub_238265C60((uint64_t *)v59);
  v58 = *(_OWORD *)v59;
  v57 = *(__n128 *)&v59[16];
  v45 = *(_QWORD *)&v59[32];
  v46 = v60;
  sub_238265FE8((uint64_t)v12, (uint64_t (*)(_QWORD))_s9_IngesterVMa);
  sub_238265FE8((uint64_t)v15, (uint64_t (*)(_QWORD))_s7BuilderVMa);
  swift_unknownObjectRelease();
  result = v57;
  *v4 = v58;
  v4[1] = (__int128)result;
  *((_QWORD *)v4 + 4) = v45;
  *((_QWORD *)v4 + 5) = v46;
  return result;
}

__n128 sub_2382FE768(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __n128 result;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  __int128 v62;
  _BYTE v63[40];
  __int128 v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  __int128 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v6 = v5;
  *(_QWORD *)&v62 = a3;
  v61.n128_u64[0] = a2;
  v10 = sub_23835BAFC();
  v58 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v57 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s9_IngesterVMa();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (unint64_t *)((char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = _s7BuilderVMa();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v6;
  v19 = *((_QWORD *)v6 + 4);
  v20 = a1[4];
  v21 = 2 * (v19 & 0x1FFFFFFFFFFFFFLL);
  if (!*(_QWORD *)v6)
    v21 = 0;
  if (v21 < v20 >> 10)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v59 = a4;
  v60 = a5;
  v55 = v12;
  v56 = v10;
  v22 = *a1;
  a4 = a1[1];
  v10 = a1[2];
  v23 = (uint64_t *)a1[3];
  if (v20 >> 10 == *a1 >> 10)
  {
    v24 = v60;
    swift_bridgeObjectRetain();
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v61.n128_u64[0], v62, v59, v24, v22, a4, v10, (unint64_t)v23);
    return result;
  }
  v26 = v6[1];
  v54 = a1[5];
  v53 = a1[6];
  v52 = (uint64_t *)a1[7];
  v51 = v22 >> 11;
  v50 = v20 >> 11;
  v27 = *((_QWORD *)v6 + 5);
  v72 = v18;
  v73 = v26;
  v74 = v19;
  v75 = v27;
  v28 = (unint64_t)&v17[*(int *)(v15 + 24)];
  v63[0] = 1;
  v49 = v28;
  sub_2382600B8(v22, a4, v10, v23, 0x100000000uLL, v28);
  v29 = (unint64_t)&v17[*(int *)(v15 + 20)];
  v63[0] = 1;
  sub_2382600B8(v20, v54, v53, v52, 0x100000000uLL, v29);
  if (v50 < v51)
    goto LABEL_10;
  sub_23825A61C(v51, v50, v30, (uint64_t)v63);
  v31 = v65;
  v32 = v66;
  v33 = v67;
  v34 = v69;
  v35 = v70;
  v36 = v71;
  v37 = *(_OWORD *)&v63[8];
  v38 = *(_OWORD *)&v63[24];
  v39 = v64;
  v40 = v68;
  *(_QWORD *)v17 = *(_QWORD *)v63;
  *(_OWORD *)(v17 + 8) = v37;
  *(_OWORD *)(v17 + 24) = v38;
  *(_OWORD *)(v17 + 40) = v39;
  *((_QWORD *)v17 + 7) = v31;
  *((_WORD *)v17 + 34) = v33;
  *((_DWORD *)v17 + 16) = v32;
  *(_OWORD *)(v17 + 72) = v40;
  *((_WORD *)v17 + 46) = v35;
  *((_DWORD *)v17 + 22) = v34;
  *((_QWORD *)v17 + 12) = v36;
  *(_QWORD *)v63 = v61.n128_u64[0];
  *(_QWORD *)&v63[8] = v62;
  *(_QWORD *)&v63[16] = v59;
  *(_QWORD *)&v63[24] = v60;
  sub_23825C900();
  swift_bridgeObjectRetain();
  v10 = sub_23835B478();
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v15 = v58;
  v20 = (unint64_t)v57;
  a4 = v56;
  (*(void (**)(char *, unint64_t, unint64_t))(v58 + 16))(v57, v49, v56);
  *v14 = v10;
  v14[1] = v42;
  v14[2] = v44;
  v14[3] = v46;
  if ((v46 & 0x1000000000000000) != 0)
LABEL_11:
    sub_2382F977C();
  v14[4] = v10;
  (*(void (**)(char *, unint64_t, uint64_t))(v15 + 32))((char *)v14 + *(int *)(v55 + 24), v20, a4);
  sub_23831A680(v14);
  sub_2382B2104((uint64_t)v17, (uint64_t)v17);
  sub_238265C60((uint64_t *)v63);
  v62 = *(_OWORD *)v63;
  v61 = *(__n128 *)&v63[16];
  v47 = *(_QWORD *)&v63[32];
  v48 = v64;
  sub_238265FE8((uint64_t)v14, (uint64_t (*)(_QWORD))_s9_IngesterVMa);
  sub_238265FE8((uint64_t)v17, (uint64_t (*)(_QWORD))_s7BuilderVMa);
  swift_unknownObjectRelease();
  result = v61;
  *v6 = v62;
  v6[1] = (__int128)result;
  *((_QWORD *)v6 + 4) = v47;
  *((_QWORD *)v6 + 5) = v48;
  return result;
}

unint64_t BigString.append(contentsOf:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v0 = sub_23835AF80();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  swift_bridgeObjectRelease();
  return _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v0, v2, v4, v6);
}

uint64_t sub_2382FEC48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v7[3];

  ++*(_QWORD *)(v3 + 40);
  if (result < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)v3)
    v4 = *(_QWORD *)(v3 + 32);
  else
    v4 = 0;
  if (v4 < a2)
    goto LABEL_10;
  if (result != a2)
  {
    sub_23825A61C(result, a2, a3, (uint64_t)&v6);
    swift_unknownObjectRelease();
    sub_238265C60((uint64_t *)v7);
    v5 = v7[1];
    *(_OWORD *)v3 = v7[0];
    *(_OWORD *)(v3 + 16) = v5;
    *(_OWORD *)(v3 + 32) = v7[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  sub_2382FE358(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2382FE768(a1, a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, _OWORD *a2)
{
  sub_2382D4DE0(a1, a2);
  return sub_23825B804((uint64_t)a2);
}

uint64_t BigString.replaceSubrange(_:with:)(unint64_t *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  __int128 v10[3];

  v3 = a2[1];
  v10[0] = *a2;
  v10[1] = v3;
  v4 = a2[3];
  v10[2] = a2[2];
  v5 = a2[4];
  v6 = a2[5];
  v9[0] = v4;
  v9[1] = v5;
  v7 = a2[6];
  v9[2] = v6;
  v9[3] = v7;
  sub_23825F734(a1, v10, (unint64_t *)v9);
  return sub_23825B804((uint64_t)a2);
}

uint64_t BigString.append<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2)
{
  sub_23830001C(a1, a2);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

__n128 BigString.append(contentsOf:)(__int128 *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[4];
  __int128 v8[3];

  v1 = a1[1];
  v8[0] = *a1;
  v8[1] = v1;
  v2 = a1[3];
  v8[2] = a1[2];
  v3 = a1[4];
  v4 = a1[5];
  v7[0] = v2;
  v7[1] = v3;
  v5 = a1[6];
  v7[2] = v4;
  v7[3] = v5;
  sub_23825FDA4(v8, (unint64_t *)v7);
  return result;
}

__n128 BigString.insert(contentsOf:at:)(__int128 *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[4];
  __int128 v12[3];

  v5 = a1[1];
  v12[0] = *a1;
  v12[1] = v5;
  v6 = a1[3];
  v12[2] = a1[2];
  v7 = a1[4];
  v8 = a1[5];
  v11[0] = v6;
  v11[1] = v7;
  v9 = a1[6];
  v11[2] = v8;
  v11[3] = v9;
  sub_23825FABC(v12, (unint64_t *)v11, a2, a3, a4, a5);
  return result;
}

Swift::Void __swiftcall BigString.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease();
  v3 = 0;
  MEMORY[0x23B831730](&v3, 8);
  v2 = v3;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v2;
}

double sub_2382FEF68@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  v4 = 0;
  MEMORY[0x23B831730](&v4, 8);
  v2 = v4;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v2;
  return result;
}

uint64_t sub_2382FEFAC(_OWORD *a1, uint64_t a2, ValueMetadata *a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[4];

  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  return BigString.replaceSubrange<A>(_:with:)((unint64_t *)v6, a2, a3);
}

double sub_2382FEFE0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v5;
  double result;
  __int128 v7[3];
  _OWORD v8[2];
  __int128 v9;

  sub_238264D30(*a1, a1[1], v7);
  sub_2382FF278(v7, a2, (uint64_t)v8);
  v5 = v8[1];
  *a3 = v8[0];
  a3[1] = v5;
  result = *(double *)&v9;
  a3[2] = v9;
  return result;
}

double sub_2382FF038@<D0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  double result;
  __n128 v6[2];
  __int128 v7;

  BigString.init<A>(_:)(a1, a2, v6);
  v4 = v6[1];
  *(__n128 *)a3 = v6[0];
  *(__n128 *)(a3 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a3 + 32) = v7;
  return result;
}

unint64_t sub_2382FF074()
{
  return BigString.append(contentsOf:)();
}

uint64_t sub_2382FF080(uint64_t a1, ValueMetadata *a2)
{
  sub_23830001C(a1, a2);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

unint64_t sub_2382FF0BC(uint64_t *a1, uint64_t a2)
{
  return BigString.insert(contentsOf:at:)(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_2382FF0D4(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  sub_2382FFE04(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
}

uint64_t sub_2382FF128@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = v2[1];
  v28 = *v2;
  v29 = v8;
  v30 = v2[2];
  v9 = sub_238264714(v5, v4, v6, v7, 0);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  result = sub_23825D9F4(v9, v10, v12, v14, (uint64_t *)&v23);
  v19 = v25;
  if ((unint64_t)v25 >> 10 < v9 >> 10)
  {
    __break(1u);
  }
  else
  {
    v20 = v23;
    v21 = v24;
    v22 = v26;
    v23 = v9;
    v24 = v11;
    *(_QWORD *)&v25 = v13;
    *((_QWORD *)&v25 + 1) = v15;
    v26 = v19;
    v27 = v22;
    result = (uint64_t)sub_2382F21C4(&v23, v17, v18);
    *a2 = v20;
    a2[1] = v21;
  }
  return result;
}

void sub_2382FF1F4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_2382FF1FC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_23832E908();
  *a1 = v2;
  a1[1] = v3;
}

double sub_2382FF224()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  swift_unknownObjectRelease();
  v3 = 0;
  MEMORY[0x23B831730](&v3, 8);
  v1 = v3;
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = v1;
  return result;
}

uint64_t sub_2382FF264(uint64_t (*a1)(_QWORD *))
{
  return sub_23832E004(a1);
}

uint64_t sub_2382FF278@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(unint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[2];
  uint64_t v125;
  uint64_t v126;
  _OWORD v127[3];
  _BYTE v128[56];
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _OWORD v134[3];
  _OWORD v135[2];
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD v152[6];
  _OWORD v153[2];
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[6];
  __int128 v157;
  __int128 v158;
  uint64_t v159;

  v6 = sub_23835BAFC();
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v98 = (unint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v97 = (char *)&v77 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v92 = (unint64_t)&v77 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v91 = (char *)&v77 - v13;
  if (a2 < 0)
    goto LABEL_56;
  v96 = a2;
  if (!a2)
  {
    v156[0] = 0;
    MEMORY[0x23B831730](v156, 8);
    result = sub_23825B804((uint64_t)a1);
    v75 = 0;
    v76 = v156[0];
    v73 = 0uLL;
    v74 = 0uLL;
LABEL_54:
    *(_OWORD *)a3 = v73;
    *(_OWORD *)(a3 + 16) = v74;
    *(_QWORD *)(a3 + 32) = v75;
    *(_QWORD *)(a3 + 40) = v76;
    return result;
  }
  v86 = a3;
  v156[0] = 0;
  MEMORY[0x23B831730](v156, 8);
  v118 = 0u;
  v119 = 0u;
  *(_QWORD *)&v120 = 0;
  *((_QWORD *)&v120 + 1) = v156[0];
  v14 = a1[1];
  v115 = *a1;
  v116 = v14;
  v85 = a1;
  v117 = a1[2];
  v127[1] = v14;
  v127[2] = v117;
  v127[0] = v115;
  sub_238265C1C((uint64_t)v127, (uint64_t)v128, qword_2542CB1E0);
  sub_238263DDC((uint64_t)v128);
  v15 = 0;
  v16 = 1;
  v17 = v96;
  while (1)
  {
    if ((v16 & v17) != 0)
    {
      v18 = v115;
      if (!(_QWORD)v115)
        goto LABEL_23;
      v19 = *((_QWORD *)&v115 + 1);
      v20 = v116;
      v21 = v117;
      v157 = v115;
      v158 = v116;
      v159 = v117;
      if (!(_QWORD)v117)
        goto LABEL_23;
      v99 = v15;
      if ((_QWORD)v118)
      {
        *(_QWORD *)&v93 = v120;
        if ((_QWORD)v120)
        {
          *((_QWORD *)&v89 + 1) = *((_QWORD *)&v117 + 1);
          *(_QWORD *)&v90 = v118;
          v88 = *((_QWORD *)&v119 + 1);
          *(_QWORD *)&v89 = *((_QWORD *)&v118 + 1);
          v22 = *(unsigned __int8 *)(v115 + 18);
          swift_unknownObjectRetain();
          sub_238261C98(v22, (uint64_t)&v112);
          v23 = sub_2382672A8(v112, *((unint64_t *)&v112 + 1));
          swift_bridgeObjectRelease();
          if ((v23 & 0x100000000) != 0)
            goto LABEL_60;
          *(_QWORD *)&v112 = v18;
          *((_QWORD *)&v112 + 1) = v19;
          v113 = v20;
          v114 = v21;
          swift_unknownObjectRetain();
          v24 = v91;
          sub_23835BAF0();
          v25 = v88;
          v26 = v89;
          v156[0] = v90;
          v156[1] = v89;
          v156[2] = *((_QWORD *)&v21 + 1);
          v156[3] = v88;
          v27 = v92;
          v156[4] = v93;
          v156[5] = *((_QWORD *)&v120 + 1);
          v87 = *((_QWORD *)&v120 + 1);
          LOBYTE(v100) = 0;
          v28 = sub_2382600B8(((_QWORD)v93 << 11) | 0x300, 0, 0, (uint64_t *)1, v23, v92);
          v29 = *(unsigned __int8 *)(v18 + 18);
          v30 = *((_QWORD *)&v89 + 1);
          v109 = *((_QWORD *)&v89 + 1);
          v110 = v29;
          v111 = 0;
          MEMORY[0x24BDAC7A8](v28);
          *(&v77 - 2) = (uint64_t)v24;
          *(&v77 - 1) = v27;
          v107 = 0;
          v108 = 1;
          sub_238294E18(&v100, (uint64_t)&v109, &v112, (uint64_t)&v107, (void (*)(_QWORD *__return_ptr))sub_238300210, (uint64_t)(&v77 - 4));
          v31 = v30 + 1;
          v32 = *((_QWORD *)&v113 + 1);
          v33 = v114;
          v153[0] = v112;
          v153[1] = v113;
          v154 = v114;
          v155 = v31;
          if ((_QWORD)v112)
          {
            v144 = v112;
            v145 = v113;
            v146 = v114;
            v34 = *(unsigned __int16 *)(v112 + 16);
            if (*(_WORD *)(v112 + 16))
            {
              v147 = v90;
              v148 = v26;
              v149 = *((_QWORD *)&v21 + 1);
              v150 = v25;
              v151 = v93;
              v35 = *(unsigned __int16 *)(v90 + 16);
              if (!*(_WORD *)(v90 + 16))
              {
                v60 = v112;
                v61 = v113;
                v62 = *((_QWORD *)&v112 + 1);
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                *(_QWORD *)&v118 = v60;
                *((_QWORD *)&v118 + 1) = v62;
                *(_QWORD *)&v119 = v61;
                *((_QWORD *)&v119 + 1) = v32;
                *(_QWORD *)&v120 = v33;
                *((_QWORD *)&v120 + 1) = v31;
                goto LABEL_19;
              }
              if (v34 != 1 || *(_BYTE *)(v112 + 18))
              {
                if ((uint64_t)v93 > 123)
                {
                  v152[0] = v90;
                  v152[1] = v26;
                  v152[2] = *((_QWORD *)&v21 + 1);
                  v152[3] = v25;
                  v152[4] = v93;
                  v152[5] = v87;
                  swift_unknownObjectRetain();
                  sub_23835270C((uint64_t)v152, (uint64_t *)v153, (uint64_t *)v121);
                  v93 = v121[0];
                  v90 = v121[1];
                  v70 = v122;
                  v71 = v123;
                  swift_unknownObjectRelease();
                  v118 = v93;
                  v119 = v90;
                  *(_QWORD *)&v120 = v70;
                  *((_QWORD *)&v120 + 1) = v71;
                  goto LABEL_19;
                }
                v63 = *((_QWORD *)&v112 + 1);
                v89 = v113;
                *(_QWORD *)&v93 = v31;
                v64 = *(unsigned __int8 *)(v90 + 18);
                v65 = ((-15 << ((4 * v64 + 8) & 0x3C)) - 1) & v64 | (unint64_t)(v35 << ((4 * v64 + 8) & 0x3C));
                v66 = v112;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                if (v65 == v64)
                  goto LABEL_62;
                swift_unknownObjectRetain();
                sub_238261C98(v64, (uint64_t)&v100);
                swift_unknownObjectRelease_n();
                v87 = *((_QWORD *)&v100 + 1);
                v88 = v100;
                v67 = v101;
                v68 = v102;
                v82 = v103;
                v79 = v104;
                v78 = v105;
                v69 = v106;
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                *(_QWORD *)&v118 = v66;
                *((_QWORD *)&v118 + 1) = v63;
                v119 = v89;
                *(_QWORD *)&v120 = v33;
                *((_QWORD *)&v120 + 1) = v93;
                v80 = v80 & 0xFFFF000000000000 | v67 | (v68 << 8) | (v82 << 16) | (v79 << 24) | (v78 << 32) | (v69 << 40);
                sub_2383568B4((void *)v88, v87, v80);
                swift_unknownObjectRelease();
              }
              else
              {
                v36 = ((-15 << ((4 * *(_BYTE *)(v112 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v112 + 18) | ((unint64_t)*(unsigned __int16 *)(v112 + 16) << ((4 * *(_BYTE *)(v112 + 18) + 8) & 0x3C));
                swift_unknownObjectRetain();
                if (!v36)
                  goto LABEL_58;
                swift_unknownObjectRetain();
                sub_238261C98(0, (uint64_t)&v100);
                swift_unknownObjectRelease();
                v81 = v81 & 0xFFFF000000000000 | v101 | ((unint64_t)v102 << 8) | ((unint64_t)v103 << 16) | ((unint64_t)v104 << 24) | ((unint64_t)v105 << 32) | ((unint64_t)v106 << 40);
                sub_23825981C(v100, *((uint64_t *)&v100 + 1), v81);
                swift_unknownObjectRelease();
              }
            }
          }
          swift_unknownObjectRelease();
LABEL_19:
          v37 = v95;
          v38 = *(void (**)(unint64_t, uint64_t))(v94 + 8);
          v38(v92, v95);
          v38((unint64_t)v91, v37);
          swift_unknownObjectRelease();
          v17 = v96;
LABEL_22:
          v15 = v99;
LABEL_23:
          v15 |= v16;
          goto LABEL_24;
        }
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
      }
      *(_QWORD *)&v118 = v18;
      *((_QWORD *)&v118 + 1) = v19;
      v119 = v20;
      v120 = v21;
      goto LABEL_22;
    }
LABEL_24:
    v138 = v115;
    v139 = v116;
    v140 = v117;
    v39 = v115;
    if ((_QWORD)v115)
    {
      v40 = *((_QWORD *)&v138 + 1);
      v41 = v139;
      v42 = v140;
      v141 = v138;
      v142 = v139;
      v143 = v140;
      if ((_QWORD)v140)
      {
        v99 = v15;
        v43 = *(unsigned __int8 *)(v115 + 18);
        swift_unknownObjectRetain();
        sub_238261C98(v43, (uint64_t)&v112);
        v44 = sub_2382672A8(v112, *((unint64_t *)&v112 + 1));
        swift_bridgeObjectRelease();
        if ((v44 & 0x100000000) != 0)
          goto LABEL_59;
        *(_QWORD *)&v112 = v39;
        *((_QWORD *)&v112 + 1) = v40;
        v113 = v41;
        v114 = v42;
        swift_unknownObjectRetain();
        v45 = v97;
        sub_23835BAF0();
        LOBYTE(v100) = 0;
        v46 = v98;
        v47 = sub_2382600B8(((_QWORD)v42 << 11) | 0x300, 0, 0, (uint64_t *)1, v44, v98);
        v48 = *(unsigned __int8 *)(v39 + 18);
        v109 = *((_QWORD *)&v42 + 1);
        v110 = v48;
        v111 = 0;
        MEMORY[0x24BDAC7A8](v47);
        *(&v77 - 2) = (uint64_t)v45;
        *(&v77 - 1) = v46;
        v107 = 0;
        v108 = 1;
        sub_238294E18(&v100, (uint64_t)&v109, &v112, (uint64_t)&v107, (void (*)(_QWORD *__return_ptr))sub_238263370, (uint64_t)(&v77 - 4));
        v49 = v112;
        v50 = v113;
        v51 = v114;
        v135[0] = v112;
        v135[1] = v113;
        v136 = v114;
        v137 = *((_QWORD *)&v42 + 1) + 1;
        if (!(_QWORD)v112)
          goto LABEL_42;
        *(_OWORD *)&v128[40] = v112;
        v129 = v113;
        v130 = v114;
        v52 = *(unsigned __int16 *)(v112 + 16);
        if (!*(_WORD *)(v112 + 16))
          goto LABEL_42;
        if ((_QWORD)v115)
        {
          v131 = v115;
          v132 = v116;
          v133 = v117;
          if (*(_WORD *)(v115 + 16))
          {
            if (v52 == 1 && !*(_BYTE *)(v112 + 18))
            {
              v53 = ((-15 << ((4 * *(_BYTE *)(v112 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v112 + 18) | ((unint64_t)*(unsigned __int16 *)(v112 + 16) << ((4 * *(_BYTE *)(v112 + 18) + 8) & 0x3C));
              swift_unknownObjectRetain();
              if (!v53)
                goto LABEL_57;
              swift_unknownObjectRetain();
              sub_238261C98(0, (uint64_t)&v100);
              swift_unknownObjectRelease();
              v84 = v84 & 0xFFFF000000000000 | v101 | ((unint64_t)v102 << 8) | ((unint64_t)v103 << 16) | ((unint64_t)v104 << 24) | ((unint64_t)v105 << 32) | ((unint64_t)v106 << 40);
              sub_23825981C(v100, *((uint64_t *)&v100 + 1), v84);
              goto LABEL_41;
            }
            if ((uint64_t)v117 > 123)
            {
              v134[0] = v115;
              v134[1] = v116;
              v134[2] = v117;
              swift_unknownObjectRetain();
              sub_23835270C((uint64_t)v134, (uint64_t *)v135, (uint64_t *)v124);
              v93 = v124[0];
              v90 = v124[1];
              v58 = v125;
              v59 = v126;
              sub_23825B804((uint64_t)&v138);
              v115 = v93;
              v116 = v90;
              *(_QWORD *)&v117 = v58;
              *((_QWORD *)&v117 + 1) = v59;
            }
            else
            {
              v54 = *(unsigned __int8 *)(v115 + 18);
              *(_QWORD *)&v93 = ((-15 << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v115 + 16) << ((4 * v54 + 8) & 0x3C));
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              *(_QWORD *)&v90 = v54;
              if ((_QWORD)v93 == v54)
                goto LABEL_61;
              swift_unknownObjectRetain();
              sub_238261C98(v90, (uint64_t)&v100);
              swift_unknownObjectRelease_n();
              *(_QWORD *)&v93 = v100;
              *((_QWORD *)&v89 + 1) = v101;
              *(_QWORD *)&v90 = *((_QWORD *)&v100 + 1);
              *(_QWORD *)&v89 = v102;
              v88 = v103;
              v87 = v104;
              v82 = v105;
              v55 = v106;
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              v115 = v49;
              v116 = v50;
              *(_QWORD *)&v117 = v51;
              *((_QWORD *)&v117 + 1) = *((_QWORD *)&v42 + 1) + 1;
              v83 = v83 & 0xFFFF000000000000 | *((_QWORD *)&v89 + 1) | ((_QWORD)v89 << 8) | (v88 << 16) | (v87 << 24) | (v82 << 32) | (v55 << 40);
              sub_2383568B4((void *)v93, v90, v83);
LABEL_41:
              swift_unknownObjectRelease();
LABEL_42:
              sub_23825B804((uint64_t)&v138);
            }
LABEL_43:
            v56 = v95;
            v57 = *(void (**)(unint64_t, uint64_t))(v94 + 8);
            v57(v98, v95);
            v57((unint64_t)v97, v56);
            swift_unknownObjectRelease();
            v17 = v96;
            v15 = v99;
            goto LABEL_44;
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
        }
        sub_23825B804((uint64_t)&v138);
        v115 = v49;
        v116 = v50;
        *(_QWORD *)&v117 = v51;
        *((_QWORD *)&v117 + 1) = *((_QWORD *)&v42 + 1) + 1;
        goto LABEL_43;
      }
    }
LABEL_44:
    if (v16 + 0x4000000000000000 < 0)
      break;
    v16 *= 2;
    if (v15 >= v17)
    {
      sub_23825B804((uint64_t)v85);
      result = swift_unknownObjectRelease();
      v73 = v118;
      v74 = v119;
      v76 = *((_QWORD *)&v120 + 1);
      v75 = v120;
      a3 = v86;
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_unknownObjectRelease();
  __break(1u);
LABEL_62:
  result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

double sub_2382FFD4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  double result;
  __n128 v12[3];
  _OWORD v13[2];
  __int128 v14;

  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  BigString.init<A>(_:)((uint64_t)v8, a3, v12);
  sub_2382FF278((__int128 *)v12, a2, (uint64_t)v13);
  v10 = v13[1];
  *a4 = v13[0];
  a4[1] = v10;
  result = *(double *)&v14;
  a4[2] = v14;
  return result;
}

void sub_2382FFE04(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, ValueMetadata *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[40];

  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15 == MEMORY[0x24BEE0D00])
  {
    v17 = *(_QWORD *)v11;
    v18 = *(_QWORD *)(v11 + 8);
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v17, v18, a2, a3, a4, a5);
    return;
  }
  if (a6 == (ValueMetadata *)MEMORY[0x24BEE1E08])
  {
    v19 = *(_QWORD *)v11;
    v20 = *(_QWORD *)(v11 + 8);
    v21 = *(_QWORD *)(v11 + 16);
    v22 = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v19, v20, v21, v22, a2, a3, a4, a5);
    return;
  }
  if (a6 == &type metadata for BigString)
  {
    v23 = *(_OWORD *)(v11 + 16);
    v27 = *(__n128 *)v11;
    v28 = v23;
    v29 = *(_OWORD *)(v11 + 32);
    v30 = v27;
    v31 = v23;
    v32 = v29;
    sub_238265C1C((uint64_t)&v30, (uint64_t)v34, qword_2542CB1E0);
    sub_238263DDC((uint64_t)v34);
    v16 = &v27;
    goto LABEL_9;
  }
  if (a6 != &type metadata for BigSubstring)
  {
    (*(void (**)(char *))(v12 + 16))(v14);
    BigString.init<A>(_:)((uint64_t)v14, a6, &v30);
    v16 = &v30;
LABEL_9:
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(v16, a2, a3, a4, a5);
    return;
  }
  v24 = *(_OWORD *)(v11 + 16);
  v27 = *(__n128 *)v11;
  v28 = v24;
  v25 = *(__n128 *)(v11 + 48);
  v29 = *(_OWORD *)(v11 + 32);
  v30 = v25;
  v26 = *(_OWORD *)(v11 + 80);
  v31 = *(_OWORD *)(v11 + 64);
  v32 = v26;
  v33 = *(_OWORD *)(v11 + 96);
  swift_unknownObjectRetain();
  sub_23825FABC((__int128 *)&v27, v30.n128_u64, a2, a3, a4, a5);
}

void sub_23830001C(uint64_t a1, ValueMetadata *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[40];

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == (ValueMetadata *)MEMORY[0x24BEE0D00])
  {
    swift_bridgeObjectRetain();
    v8 = sub_23835AF80();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v8, v10, v12, v14);
    return;
  }
  if (a2 == (ValueMetadata *)MEMORY[0x24BEE1E08])
  {
    v15 = *(_QWORD *)v3;
    v16 = *(_QWORD *)(v3 + 8);
    v17 = *(_QWORD *)(v3 + 16);
    v18 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain();
    _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v15, v16, v17, v18);
    return;
  }
  if (a2 == &type metadata for BigString)
  {
    v19 = *(_OWORD *)(v3 + 16);
    v23 = *(__n128 *)v3;
    v24 = v19;
    v25 = *(_OWORD *)(v3 + 32);
    v26 = v23;
    v27 = v19;
    v28 = v25;
    sub_238265C1C((uint64_t)&v26, (uint64_t)v30, qword_2542CB1E0);
    sub_238263DDC((uint64_t)v30);
    v7 = &v23;
    goto LABEL_9;
  }
  if (a2 != &type metadata for BigSubstring)
  {
    (*(void (**)(char *))(v4 + 16))(v6);
    BigString.init<A>(_:)((uint64_t)v6, a2, &v26);
    v7 = &v26;
LABEL_9:
    _s19CollectionsInternal9BigStringV6append10contentsOfyACn_tF_0((uint64_t)v7);
    return;
  }
  v20 = *(_OWORD *)(v3 + 16);
  v23 = *(__n128 *)v3;
  v24 = v20;
  v21 = *(__n128 *)(v3 + 48);
  v25 = *(_OWORD *)(v3 + 32);
  v26 = v21;
  v22 = *(_OWORD *)(v3 + 80);
  v27 = *(_OWORD *)(v3 + 64);
  v28 = v22;
  v29 = *(_OWORD *)(v3 + 96);
  swift_unknownObjectRetain();
  sub_23825FDA4((__int128 *)&v23, v26.n128_u64);
}

uint64_t TreeSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _HashNode.isSubset<A>(_:of:)(0, a1, a2, a4, a5, a7, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4AE0] + 8, a8) & 1;
}

uint64_t TreeSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _HashNode.isSubset<A>(_:of:)(0, a1, a2, a4, a5, a7, MEMORY[0x24BEE4AE0] + 8, a8, a9);
}

uint64_t TreeSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int i;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t AssociatedTypeWitness;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[3];

  v67 = a4;
  v74 = a2;
  v75 = a3;
  v69 = a1;
  v68 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v70 = (char *)&v56 - v11;
  v12 = sub_23835B334();
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v62 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v60 = (char *)&v56 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v56 - v18;
  v20 = *(_QWORD *)(a5 - 8);
  v21 = MEMORY[0x24BDAC7A8](v17);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v56 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v65 = (char *)&v56 - v28;
  v29 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet(0, a5, a7, v32) == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v69, a6);
    swift_dynamicCast();
    v36 = _HashNode.isSubset<A>(_:of:)(0, v86, *((uint64_t *)&v86 + 1), v74, v75, a5, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4AE0] + 8, a7);
    swift_release();
    return v36 & 1;
  }
  v57 = v29;
  v58 = v31;
  v59 = a6;
  TreeSet.makeIterator()(v74, &v86);
  v33 = a7;
  v35 = type metadata accessor for TreeSet.Iterator(0, a5, a7, v34);
  TreeSet.Iterator.next()(v35, (uint64_t)v19);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v66(v19, 1, a5) != 1)
  {
    v72 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v73 = v20;
    v72(v65, v19, a5);
    v37 = v69;
    v38 = v59;
    v39 = sub_23835AFB0();
    if (v39 == 2)
    {
      if (qword_2568F09D0 != -1)
        swift_once();
      v40 = MEMORY[0x24BEE4AE0] + 8;
      v76 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x24BEE4AE0] + 8, v33);
      v77 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v58, v37, v38);
      swift_retain();
      sub_23835AF8C();
      swift_getAssociatedConformanceWitness();
      v42 = v62;
      sub_23835B484();
      v43 = v66;
      for (i = v66(v42, 1, a5); i != 1; i = v43(v42, 1, a5))
      {
        v72(v23, v42, a5);
        v45 = sub_238358A4C();
        if (_HashNode.containsKey(_:_:_:)(0, (uint64_t)v23, v45, v74, v75, a5, v40, v33))
        {
          v46 = (_QWORD *)type metadata accessor for _HashNode(0, a5, MEMORY[0x24BEE4AE0] + 8, v33);
          v48 = _HashNode.insert(_:_:_:)(0, (uint64_t)v23, v47, v45, v46);
          v49 = *(void (**)(char *, uint64_t))(v73 + 8);
          v49(v23, a5);
          if ((v48 & 1) != 0)
          {
            v50 = v77;
            if (v50 == TreeSet.count.getter(v74, v75))
            {
              (*(void (**)(char *, uint64_t))(v61 + 8))(v70, AssociatedTypeWitness);
              v49(v65, a5);
              v84 = v92;
              v85[0] = v93[0];
              *(_OWORD *)((char *)v85 + 11) = *(_OWORD *)((char *)v93 + 11);
              v80 = v88;
              v81 = v89;
              v82 = v90;
              v83 = v91;
              v78 = v86;
              v79 = v87;
              sub_2382735AC((uint64_t)&v78);
              swift_release();
              goto LABEL_4;
            }
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v73 + 8))(v23, a5);
        }
        sub_23835B484();
      }
      (*(void (**)(char *, uint64_t))(v61 + 8))(v70, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v65, a5);
      v84 = v92;
      v85[0] = v93[0];
      *(_OWORD *)((char *)v85 + 11) = *(_OWORD *)((char *)v93 + 11);
      v80 = v88;
      v81 = v89;
      v82 = v90;
      v83 = v91;
      v78 = v86;
      v79 = v87;
      sub_2382735AC((uint64_t)&v78);
      swift_release();
    }
    else
    {
      if ((v39 & 1) != 0)
      {
        v52 = (uint64_t)v60;
        while (1)
        {
          TreeSet.Iterator.next()(v35, v52);
          if (v66((char *)v52, 1, a5) == 1)
            break;
          v72(v26, (char *)v52, a5);
          v53 = sub_23835B034();
          v54 = *(void (**)(char *, uint64_t))(v73 + 8);
          v54(v26, a5);
          if ((v53 & 1) == 0)
          {
            v54(v65, a5);
            v84 = v92;
            v85[0] = v93[0];
            v51 = *(_OWORD *)((char *)v93 + 11);
            goto LABEL_24;
          }
        }
        (*(void (**)(char *, uint64_t))(v73 + 8))(v65, a5);
        v84 = v92;
        v85[0] = v93[0];
        *(_OWORD *)((char *)v85 + 11) = *(_OWORD *)((char *)v93 + 11);
        v80 = v88;
        v81 = v89;
        v82 = v90;
        v83 = v91;
        v78 = v86;
        v79 = v87;
        sub_2382735AC((uint64_t)&v78);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v52, v64);
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v73 + 8))(v65, a5);
      v84 = v92;
      v85[0] = v93[0];
      v51 = *(_OWORD *)((char *)v93 + 11);
LABEL_24:
      *(_OWORD *)((char *)v85 + 11) = v51;
      v80 = v88;
      v81 = v89;
      v82 = v90;
      v83 = v91;
      v78 = v86;
      v79 = v87;
      sub_2382735AC((uint64_t)&v78);
    }
    v36 = 0;
    return v36 & 1;
  }
  v84 = v92;
  v85[0] = v93[0];
  *(_OWORD *)((char *)v85 + 11) = *(_OWORD *)((char *)v93 + 11);
  v80 = v88;
  v81 = v89;
  v82 = v90;
  v83 = v91;
  v78 = v86;
  v79 = v87;
  sub_2382735AC((uint64_t)&v78);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v19, v64);
LABEL_4:
  v36 = 1;
  return v36 & 1;
}

uint64_t OrderedSet.SubSequence._slice.getter()
{
  return sub_23835B70C();
}

uint64_t OrderedSet.SubSequence._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedSet.SubSequence._base.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.SubSequence._base.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedSet.SubSequence._bounds.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*OrderedSet.SubSequence._bounds.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedSet.SubSequence._index(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v8;
  uint64_t v11;

  result = OrderedSet._find(_:)();
  if (result < a4 || result >= a5)
    v11 = 0;
  else
    v11 = result;
  if ((v8 & 1) == 0)
    return v11;
  return result;
}

uint64_t OrderedSet.SubSequence.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v6 = type metadata accessor for OrderedSet.SubSequence(0, a5, a6, a4);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>.SubSequence, v6);
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)v8, 0, 0, 0, v6);
}

uint64_t type metadata accessor for OrderedSet.SubSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet.SubSequence);
}

uint64_t sub_238300B34(uint64_t a1, uint64_t a2)
{
  return sub_238300C14(a1, a2, OrderedSet.SubSequence.description.getter);
}

uint64_t OrderedSet.SubSequence.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = a4;
  v13 = sub_23834ADF4();
  v14 = v8;
  sub_23835AE90();
  v10 = type metadata accessor for OrderedSet.SubSequence(0, a5, a6, v9);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>.SubSequence, v10);
  v11 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)v15, 1, v13, v14, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_238300C08(uint64_t a1, uint64_t a2)
{
  return sub_238300C14(a1, a2, OrderedSet.SubSequence.debugDescription.getter);
}

uint64_t sub_238300C14(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], v3[3], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL OrderedSet.SubSequence._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;

  v7 = OrderedSet._find(_:)();
  return (v8 & 1) == 0 && v7 >= a4 && v7 < a5;
}

uint64_t OrderedSet.SubSequence._copyToContiguousArray()()
{
  uint64_t v0;

  v0 = sub_238301A9C();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.SubSequence._copyContents(initializing:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];
  uint64_t v15;

  v10 = 0;
  v11 = a3;
  if (a3 != a4
    && (v12 = sub_23835B70C(),
        v14[1] = v14,
        MEMORY[0x24BDAC7A8](v12),
        sub_23835B514(),
        result = swift_unknownObjectRelease(),
        v10 = v15,
        v11 = a3 + v15,
        __OFADD__(a3, v15)))
  {
    __break(1u);
  }
  else
  {
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    a5[4] = v11;
    a5[5] = v10;
  }
  return result;
}

BOOL OrderedSet.SubSequence.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t sub_238300DD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_23835AD4C();
  if (result)
  {
    if (a2 >= a1)
      a2 = a1;
    if (a2 < 1)
      goto LABEL_7;
    result = sub_23835AD4C();
    if (result)
    {
      result = sub_23835B2F8();
LABEL_7:
      *a3 = a2;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.SubSequence.withContiguousStorageIfAvailable<A>(_:)()
{
  sub_23835B70C();
  sub_23835B52C();
  return swift_unknownObjectRelease();
}

__n128 sub_238300F24@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1->n128_u64[1];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u64[1] = v2;
  result = v1[1];
  a1[1] = result;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t sub_238300F3C(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>.SubSequence, a1);
  return sub_23835B1F0();
}

BOOL sub_238300F70(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.SubSequence._customContainsEquatableElement(_:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_238300F84()
{
  uint64_t v0;

  v0 = sub_238301A9C();
  swift_release();
  swift_release();
  return v0;
}

__n128 sub_238300FD4(__n128 *a1)
{
  uint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  _QWORD v6[2];
  __n128 v7;
  unint64_t v8;

  OrderedSet.SubSequence._copyContents(initializing:)(*v1, v1[1], v1[2], v1[3], v6);
  v3 = v6[1];
  v4 = v8;
  result = v7;
  a1->n128_u64[0] = v6[0];
  a1->n128_u64[1] = v3;
  a1[1] = result;
  a1[2].n128_u64[0] = v4;
  return result;
}

uint64_t sub_238301034()
{
  return OrderedSet.SubSequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.SubSequence.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.SubSequence.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedSet.SubSequence.indices.getter()
{
  uint64_t v0;
  uint64_t v2;

  sub_23835B70C();
  v0 = sub_23835B544();
  MEMORY[0x23B831670](MEMORY[0x24BEE2188], v0);
  sub_23835B16C();
  swift_unknownObjectRelease();
  return v2;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedSet.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedSet.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v6;
  Swift::Bool v7;
  Swift::Int v8;
  Swift::Int_optional result;

  sub_23835B70C();
  v6 = swift_unknownObjectRelease();
  v8 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v8 > 0 || v8 <= offsetBy)
    {
LABEL_9:
      v6 = _ + offsetBy;
      if (!__OFADD__(_, offsetBy))
      {
        v7 = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8 < 0 || v8 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  v6 = 0;
  v7 = 1;
LABEL_13:
  result.value = v6;
  result.is_nil = v7;
  return result;
}

Swift::Int __swiftcall OrderedSet.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedSet.SubSequence.subscript.getter()
{
  sub_23835B70C();
  sub_23835B550();
  return swift_unknownObjectRelease();
}

uint64_t OrderedSet.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6 < a5)
  {
    __break(1u);
  }
  else
  {
    sub_23835B70C();
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    return a3;
  }
  return result;
}

uint64_t OrderedSet.SubSequence._failEarlyRangeCheck(_:bounds:)()
{
  sub_23835B70C();
  return swift_unknownObjectRelease();
}

{
  sub_23835B70C();
  return swift_unknownObjectRelease();
}

uint64_t OrderedSet.SubSequence.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = a4 - a3;
  if (__OFSUB__(a4, a3))
    __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal10OrderedSetV11SubSequenceV30_customIndexOfEquatableElementySiSgSgxF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v8;
  uint64_t v11;

  result = OrderedSet._find(_:)();
  if (result < a4 || result >= a5)
    v11 = 0;
  else
    v11 = result;
  if ((v8 & 1) == 0)
    return v11;
  return result;
}

uint64_t OrderedSet.SubSequence._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;

  sub_23835B70C();
  v8[1] = a3;
  v9 = a1;
  v8[0] = a2;
  v6 = sub_23835B544();
  MEMORY[0x23B831670](MEMORY[0x24BEE2190], v6);
  sub_2382ACD4C((uint64_t)&v9, (uint64_t)v8);
  return swift_unknownObjectRelease();
}

void sub_238301448(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void (*sub_238301454(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  OrderedSet.SubSequence._slice.getter();
  sub_23835B550();
  swift_unknownObjectRelease();
  return sub_2382CB15C;
}

uint64_t *sub_2383014F8@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (v2[3] < v2[2])
  {
    __break(1u);
  }
  else
  {
    v6 = v2;
    v4 = *v2;
    v5 = v6[1];
    v8 = *result;
    v7 = result[1];
    OrderedSet.SubSequence._slice.getter();
    swift_unknownObjectRelease();
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v8;
    a2[3] = v7;
    swift_retain();
    return (uint64_t *)swift_retain();
  }
  return result;
}

double sub_238301560@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;

  OrderedSet.SubSequence._slice.getter();
  v2 = sub_23835B544();
  MEMORY[0x23B831670](MEMORY[0x24BEE2188], v2);
  sub_23835B16C();
  swift_unknownObjectRelease();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

BOOL sub_2383015F8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) == *(_QWORD *)(v0 + 24);
}

uint64_t sub_238301608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

uint64_t sub_238301620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  char v5;

  result = OrderedSet.SubSequence._index(of:)(a1, *v2, v2[1], v2[2], v2[3]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5 & 1;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_238301660@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;

  v6 = *a1;
  v7 = *a3;
  OrderedSet.SubSequence._slice.getter();
  v8 = sub_2382ACEE8(v6, a2, v7);
  LOBYTE(v6) = v9;
  result = swift_unknownObjectRelease();
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_2383016DC()
{
  OrderedSet.SubSequence._slice.getter();
  return swift_unknownObjectRelease();
}

uint64_t sub_238301700(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  v4 = a2[1];
  OrderedSet.SubSequence._slice.getter();
  v7[1] = v4;
  v8 = v2;
  v7[0] = v3;
  v5 = sub_23835B544();
  MEMORY[0x23B831670](MEMORY[0x24BEE2190], v5);
  sub_2382ACD4C((uint64_t)&v8, (uint64_t)v7);
  return swift_unknownObjectRelease();
}

uint64_t static OrderedSet.SubSequence.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  v10 = type metadata accessor for OrderedSet.SubSequence(0, a9, a10, a4);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>.SubSequence, v10);
  return sub_23835B028() & 1;
}

uint64_t sub_23830181C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.SubSequence.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24)) & 1;
}

uint64_t OrderedSet.SubSequence.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14 - v13;
  if (__OFSUB__(v14, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_23835BA00();
  if (a4 == a5)
    return result;
  if (a4 >= a5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v17[1] = a2;
  swift_retain();
  swift_retain();
  v16 = a4;
  do
  {
    sub_23835B70C();
    sub_23835B550();
    swift_unknownObjectRelease();
    ++v16;
    sub_23835ABFC();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a6);
  }
  while (a5 != v16);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.SubSequence.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[72];

  sub_23835B9E8();
  OrderedSet.SubSequence.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_23835BA48();
}

uint64_t sub_238301A2C(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.SubSequence.hashValue.getter(*v1, v1[1], v1[2], v1[3], *(_QWORD *)(a1 + 16));
}

uint64_t sub_238301A40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedSet.SubSequence.hash(into:)(a1, *v2, v2[1], v2[2], v2[3], *(_QWORD *)(a2 + 16));
}

uint64_t sub_238301A54(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  sub_23835B9E8();
  OrderedSet.SubSequence.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], v2[3], *(_QWORD *)(a2 + 16));
  return sub_23835BA48();
}

uint64_t sub_238301A9C()
{
  sub_23835B70C();
  return sub_23835B4FC();
}

uint64_t sub_238301AD0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_238300DD8(a1, *(_QWORD *)(v2 + 40), a2);
}

void sub_238301AEC()
{
  JUMPOUT(0x23B831670);
}

void sub_238301AFC()
{
  JUMPOUT(0x23B831670);
}

void sub_238301B0C()
{
  JUMPOUT(0x23B831670);
}

void sub_238301B1C()
{
  JUMPOUT(0x23B831670);
}

void sub_238301B2C()
{
  JUMPOUT(0x23B831670);
}

void sub_238301B3C()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_238301B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_238301B88(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *sub_238301BF4(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t _RawHashNode.UnsafeHandle._memory.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static _RawHashNode.UnsafeHandle.read<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return a2(a1 + 16, a1 + 32);
}

ValueMetadata *type metadata accessor for _RawHashNode.UnsafeHandle()
{
  return &type metadata for _RawHashNode.UnsafeHandle;
}

uint64_t Rope._UnmanagedLeaf.read<A>(body:)(uint64_t (*a1)(uint64_t), uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_238301CFC(a3, a1, a2, a5);
}

uint64_t Rope._UnmanagedLeaf._ref.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Rope._UnmanagedLeaf._ref.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

BOOL static Rope._UnmanagedLeaf.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_238301CF0(uint64_t *a1, uint64_t *a2)
{
  return static Rope._UnmanagedLeaf.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_238301CFC(_QWORD *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(*a1 + class metadata base offset for Rope._Storage);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4[1] - 8) + 80);
  return sub_238301D54((uint64_t)(a1 + 2), (uint64_t)a1 + ((v5 + 19) & ~v5), a2, a3, *v4, a4, v4[2]);
}

uint64_t sub_238301D54(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for Rope._Item(0, a5, a7, a4);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v12);
  v13 = nullsub_1(a1, a2, a5, v12, a7);
  return a3(v13);
}

BOOL BigString.isIdentical(to:)(_OWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _OWORD v8[6];

  v2 = (uint64_t)v1;
  v4 = v1[1];
  v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  v8[2] = a1[2];
  sub_238263DDC((uint64_t)v1);
  sub_238263DDC((uint64_t)a1);
  v6 = sub_238263BF8((uint64_t)v8);
  sub_23825B804((uint64_t)a1);
  sub_23825B804(v2);
  return v6;
}

uint64_t sub_238301E84(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s19CollectionsInternal9BigStringV2eeoiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t sub_238301EC8(uint64_t *a1, unint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];
  _BYTE v51[40];
  _OWORD v52[3];
  _BYTE v53[48];

  v4 = *a2;
  v5 = (a2[4] >> 11) - (*a2 >> 11);
  v6 = *a4;
  if (v5 == (a4[4] >> 11) - (*a4 >> 11))
  {
    v30 = a4[2];
    v9 = a2[2];
    v8 = a2[3];
    v10 = a2[1];
    v11 = a1[5];
    v25 = *(_OWORD *)(a1 + 1);
    v26 = *(_OWORD *)(a1 + 3);
    v12 = *a1;
    v32 = a4[3];
    v33 = a3[5];
    v31 = *(_OWORD *)(a3 + 3);
    v29 = *(_OWORD *)(a3 + 1);
    v27 = *a3;
    v28 = a4[1];
    v13 = *((_OWORD *)a1 + 2);
    v14 = *(_OWORD *)a1;
    v52[1] = *((_OWORD *)a1 + 1);
    v52[2] = v13;
    v52[0] = v14;
    sub_238263E74((uint64_t)v52, (uint64_t)v53);
    sub_238263DDC((uint64_t)v53);
    v42 = v12;
    v43 = v25;
    v44 = v26;
    v45 = v11;
    v46 = sub_2382685C4(v4, v10, v9, v8);
    v47 = v15;
    v48 = v16;
    v49 = v17;
    v18 = *((_OWORD *)a3 + 1);
    v50[0] = *(_OWORD *)a3;
    v50[1] = v18;
    v50[2] = *((_OWORD *)a3 + 2);
    sub_238263E74((uint64_t)v50, (uint64_t)v51);
    sub_238263DDC((uint64_t)v51);
    v34 = v27;
    v35 = v29;
    v36 = v31;
    v37 = v33;
    v38 = sub_2382685C4(v6, v28, v30, v32);
    v39 = v19;
    v40 = v20;
    v41 = v21;
    if (v5 < 1)
    {
LABEL_6:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 1;
    }
    while (1)
    {
      v22 = sub_23830ADEC(v5, &v42, &v34);
      if (v22 < 1)
        break;
      v23 = v5 <= v22;
      v5 -= v22;
      if (v23)
        goto LABEL_6;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t sub_23830209C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[10];
  _QWORD v38[10];
  _BYTE v39[48];
  _BYTE v40[48];

  v34 = a2[1];
  v35 = *a2;
  v32 = a2[3];
  v33 = a2[2];
  v4 = a2[5];
  v36 = a2[4];
  v6 = *a1;
  v5 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v40 = *(_OWORD *)a1;
  *(_OWORD *)&v40[16] = v11;
  *(_OWORD *)&v40[32] = *((_OWORD *)a1 + 2);
  v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)v39 = *(_OWORD *)a2;
  *(_OWORD *)&v39[16] = v12;
  *(_OWORD *)&v39[32] = *((_OWORD *)a2 + 2);
  sub_238263DDC((uint64_t)a1);
  sub_238263DDC((uint64_t)a2);
  v13 = sub_238263BF8((uint64_t)v39);
  sub_23825B804((uint64_t)a2);
  sub_23825B804((uint64_t)a1);
  if (v13)
    return 1;
  v30 = v10;
  v31 = v8;
  v16 = *(_QWORD *)v40;
  v17 = *(_QWORD *)&v40[32];
  if (*(_QWORD *)v40)
  {
    v18 = *(int64x2_t *)&v40[8];
    v19 = *(int64x2_t *)&v40[24];
  }
  else
  {
    v18 = 0uLL;
    v19 = 0uLL;
  }
  v14.i64[0] = 0;
  v15.i64[0] = *(_QWORD *)v39;
  v20 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v15, v14)).i64[0], 0);
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v18, (int64x2_t)vandq_s8(*(int8x16_t *)&v39[8], v20)), (int32x4_t)vceqq_s64(v19, (int64x2_t)vandq_s8(*(int8x16_t *)&v39[24], v20)))), 0xFuLL))) & 1) == 0)return 0;
  swift_unknownObjectRetain();
  v38[0] = v6;
  v38[1] = v5;
  v38[2] = v31;
  v38[3] = v7;
  v38[4] = v9;
  v38[5] = v30;
  v38[6] = sub_2382685C4(0x300uLL, 0, 0, 1);
  v38[7] = v22;
  v38[8] = v23;
  v38[9] = v24;
  swift_unknownObjectRetain();
  v37[0] = v35;
  v37[1] = v34;
  v37[2] = v33;
  v37[3] = v32;
  v37[4] = v36;
  v37[5] = v4;
  v37[6] = sub_2382685C4(0x300uLL, 0, 0, 1);
  v37[7] = v25;
  v37[8] = v26;
  v37[9] = v27;
  if (!v16 || v17 < 1)
  {
LABEL_12:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 1;
  }
  while (1)
  {
    v28 = sub_23830ADEC(v17, v38, v37);
    if (v28 < 1)
      break;
    v29 = v17 <= v28;
    v17 -= v28;
    if (v29)
      goto LABEL_12;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return 0;
}

uint64_t _s19CollectionsInternal9BigStringV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  BOOL v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20[5];
  unint64_t v21;
  unint64_t v22;
  __n128 v23[5];
  unint64_t v24;
  unint64_t v25;
  _OWORD v26[3];
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  unint64_t v43;

  v4 = *(_OWORD *)(a1 + 16);
  v27 = *(__n128 *)a1;
  v28 = v4;
  v29 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v5;
  v26[2] = *(_OWORD *)(a2 + 32);
  sub_238263DDC(a1);
  sub_238263DDC(a2);
  v6 = sub_238263BF8((uint64_t)v26);
  sub_23825B804(a2);
  sub_23825B804(a1);
  if (v6)
    return 1;
  v8 = v27.n128_u64[1];
  if (!v27.n128_u64[0])
    v8 = 0;
  if (*(_QWORD *)&v26[0])
  {
    if (v8 != *((_QWORD *)&v26[0] + 1))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  swift_unknownObjectRetain();
  sub_23830F850((__n128 *)a1, v23);
  swift_unknownObjectRetain();
  sub_23830F850((__n128 *)a2, v20);
  while (1)
  {
    if ((v25 ^ v24) >= 0x4000)
    {
      v37 = v23[0];
      v38 = v23[1];
      v39 = v23[2];
      v40 = v23[3];
      v41 = v23[4];
      v42 = v24;
      v43 = v25;
      sub_23830EA80();
      v13 = v14;
      v12 = v15;
      if ((sub_23830F018(v14, v15) & 1) == 0)
        v24 = v25;
      v10 = v21;
      v11 = v22;
      if ((v22 ^ v21) < 0x4000)
      {
        if (v12)
          goto LABEL_27;
        goto LABEL_30;
      }
    }
    else
    {
      v10 = v21;
      v11 = v22;
      if ((v22 ^ v21) < 0x4000)
        goto LABEL_30;
      v12 = 0;
      v13 = 0;
    }
    v30 = v20[0];
    v31 = v20[1];
    v32 = v20[2];
    v33 = v20[3];
    v34 = v20[4];
    v35 = v10;
    v36 = v11;
    sub_23830EA80();
    v17 = v16;
    v19 = v18;
    if ((sub_23830F018(v16, v18) & 1) == 0)
      v21 = v22;
    if (!v12)
      break;
    if (!v19)
      goto LABEL_27;
    if (v13 == v17 && v12 == v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = sub_23835B928();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
        goto LABEL_28;
    }
  }
  if (v19)
  {
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_30:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return 1;
}

uint64_t OrderedSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_238302634(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

{
  uint64_t v8;

  v8 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  sub_238283D24(a1, a2, v8);
  swift_release();
  swift_release();
  return a3;
}

uint64_t OrderedSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;

  v9 = sub_238302690(a1, a2, a3, a4, a5, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v9;
}

uint64_t sub_238302634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  sub_238283D24(a1, a2, v8);
  return a3;
}

uint64_t sub_238302690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;

  v10 = type metadata accessor for OrderedSet(0, a4, a6, a4);
  j___s19CollectionsInternal10OrderedSetV6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF(a1, v10, a5, a7);
  return a2;
}

uint64_t UnsafeBufferPointer._ptr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23835AD4C() + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a1;
}

uint64_t _HashNode.Builder.init(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;

  v14 = type metadata accessor for _HashNode.Builder.Kind(0, a4, a5, a6);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  *a7 = a1;
  if (a3)
  {
    if (!_HashNode.isCollisionNode.getter(a2, a3, a4, a5, a6)
      && (_HashNode.hasSingletonItem.getter(a2, a3, a4, a5, a6) & 1) != 0)
    {
      v18 = (unsigned int *)nullsub_1(a2 + 16, a2 + 32, a4, a5, a6);
      sub_238304E60(v18, v19, a4, a5, a6, (uint64_t)v17);
      swift_release();
      v20 = type metadata accessor for _HashNode.Builder(0, a4, a5, a6);
      return (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v15 + 32))(&a7[*(int *)(v20 + 44)], v17, v14);
    }
    v22 = (uint64_t *)&a7[*(int *)(type metadata accessor for _HashNode.Builder(0, a4, a5, a6) + 44)];
    *v22 = a2;
    v22[1] = a3;
  }
  else
  {
    swift_release();
    type metadata accessor for _HashNode.Builder(0, a4, a5, a6);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for _HashNode.Builder.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _HashNode.Builder.Kind);
}

uint64_t static _HashNode.Builder.empty(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _HashNode.Builder.Kind(0, a2, a3, a4);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v14 - v11;
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(a1, (uint64_t)v12, a2, a3, a4, a5);
}

void _HashNode.Builder.addNewChildNode(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[5];
  uint64_t TupleTypeMetadata2;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = a4;
  v19 = a3;
  v20 = a2;
  v15[4] = a1;
  v8 = *(_QWORD *)(a5 + 16);
  v7 = *(_QWORD *)(a5 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15[3] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v9);
  v18 = *(_QWORD *)(a5 + 32);
  v10 = type metadata accessor for _HashNode.Builder.Kind(0, v8, v7, v18);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v15 - v13, v5 + *(int *)(a5 + 44), v10);
  v14 = (char *)sub_238302B04 + 4 * byte_238360D10[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_238302B04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(_QWORD *)(v8 - 136);
  v10 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v11 = *(int *)(v9 + 48);
  v12 = v7 + v11;
  *(_QWORD *)(v8 - 168) = v5 + v11;
  *(_QWORD *)(v8 - 160) = v7 + v11;
  v13 = *(_QWORD *)(v4 - 8);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  *(_DWORD *)(v8 - 144) = *(unsigned __int8 *)(v5 + v10);
  v14(v7, v5, v4);
  v15 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 32))(v12, *(_QWORD *)(v8 - 168), v3);
  v16 = v2 + *(int *)(*(_QWORD *)(v8 - 136) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v2, v7, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v16, *(_QWORD *)(v8 - 160), v3);
  v17 = sub_238312E18(v2, v16, *(_DWORD *)(v8 - 144), *(_QWORD *)(v8 - 104), *(_QWORD *)(v8 - 112), *(_DWORD *)(v8 - 124), v4, v3, *(_QWORD *)(v8 - 120));
  v19 = v18;
  swift_release();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 152) + 8))(v7, *(_QWORD *)(v8 - 136));
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v1, v0);
  *v1 = v17;
  v1[1] = v19;
  return swift_storeEnumTagMultiPayload();
}

void _HashNode.Builder.mapValuesToVoid()(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];

  if (a1[3] == MEMORY[0x24BEE4AE0] + 8)
  {
    v7 = *(_QWORD *)(*(a1 - 1) + 64);
    v8 = type metadata accessor for _HashNode.Builder(0, a1[2], MEMORY[0x24BEE4AE0] + 8, a1[4]);
    v9 = *(_QWORD *)(v8 - 8);
    if (v7 == *(_QWORD *)(v9 + 64))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v2, v8);
    else
      __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v10[2] = *(_QWORD *)(v4 + 16);
    v10[3] = v5;
    v10[4] = *(_QWORD *)(v4 + 32);
    _HashNode.Builder.mapValues<A>(_:)((uint64_t)sub_2383058BC, (uint64_t)v10, v4, v6, a2);
  }
}

uint64_t _HashNode.Builder.addNewChildBranch(_:_:at:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;

  v30 = a3;
  v8 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v29 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - v13;
  v15 = type metadata accessor for _HashNode.Builder.Kind(0, v8, v7, *(_QWORD *)(a4 + 32));
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v26 - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v26 - v16, a2 + *(int *)(a4 + 44), v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    v28 = a1;
    if (!EnumCaseMultiPayload)
    {
      v20 = *(int *)(TupleTypeMetadata2 + 48);
      v21 = &v14[v20];
      v26 = (char *)v17 + v20;
      v27 = a2;
      v22 = *(_QWORD *)(v8 - 8);
      (*(void (**)(char *, uint64_t *, uint64_t))(v22 + 32))(v14, v17, v8);
      v23 = *(_QWORD *)(v7 - 8);
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v21, v26, v7);
      v24 = (uint64_t)&v12[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v12, v14, v8);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v24, v21, v7);
      _HashNode.Builder.addNewItem(_:_:at:)(v28, (uint64_t)v12, v24, v30, a4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v27, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, TupleTypeMetadata2);
    }
  }
  else
  {
    _HashNode.Builder.addNewChildNode(_:_:at:)(a1, *v17, v17[1], v30, a4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
}

void _HashNode.Builder.addNewItem(_:_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a3;
  v31 = a4;
  v24[2] = a1;
  v7 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(a5 + 24);
  v26 = *(_QWORD *)(a5 + 32);
  v9 = type metadata accessor for _HashNode.Builder.Kind(0, v7, v8, v26);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v27 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v24[1] = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v24[0] = (char *)v24 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v29 = (char *)v24 - v19;
  v35 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v24 + *(int *)(v35 + 48) - v20;
  v28 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))((char *)v24 - v20, a2, v7);
  v25 = *(_QWORD *)(v8 - 8);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
  v30 = v21;
  v22(v21, v32, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33 + *(int *)(a5 + 44), v9);
  v34 = v9;
  v23 = (char *)sub_2383032D8 + 4 * byte_238360D14[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2383032D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);

  v9 = *(_QWORD *)(v8 - 104);
  v10 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v11 = *(int *)(v9 + 48);
  v12 = *(_QWORD *)(v8 - 152);
  v13 = v12 + v11;
  *(_QWORD *)(v8 - 192) = v12 + v11;
  *(_QWORD *)(v8 - 128) = v7 + v11;
  *(_DWORD *)(v8 - 120) = *(unsigned __int8 *)(v7 + v10);
  v3(v12, v7, v1);
  v6(v13, *(_QWORD *)(v8 - 128), v2);
  v14 = *(_QWORD *)(v8 - 104);
  v15 = *(_QWORD *)(v8 - 208);
  v16 = v15 + *(int *)(v14 + 48);
  *(_QWORD *)(v8 - 128) = v16;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 16);
  *(_QWORD *)(v8 - 160) = v17;
  v17(v15, v12, v1);
  v18 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 184) + 16);
  v18(v16, *(_QWORD *)(v8 - 192), v2);
  v19 = *(_QWORD *)(v8 - 200);
  v20 = v19 + *(int *)(v14 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 160))(v19, v5, v1);
  v18(v20, *(_QWORD *)(v8 - 144), v2);
  v21 = static _HashNode._regularNode(_:_:_:_:)(v15, *(_QWORD *)(v8 - 128), *(_DWORD *)(v8 - 120), v19, v20, *(_DWORD *)(v8 - 132), v1, v2, *(_QWORD *)(v8 - 176));
  v23 = v22;
  v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 168) + 8);
  v24(*(_QWORD *)(v8 - 152), v14);
  v24(v5, v14);
  (*(void (**)(uint64_t *, _QWORD))(v0 + 8))(v4, *(_QWORD *)(v8 - 112));
  *v4 = v21;
  v4[1] = v23;
  return swift_storeEnumTagMultiPayload();
}

uint64_t static _HashNode.Builder.node(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  return sub_238303BC0(a1, a2, a3, a4, a5, a6, a7);
}

void _HashNode.Builder.addNewCollision(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a3;
  v29 = a4;
  v26[3] = a1;
  v7 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(a5 + 24);
  v30 = *(_QWORD *)(a5 + 32);
  v9 = type metadata accessor for _HashNode.Builder.Kind(0, v7, v8, v30);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v26 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v26[2] = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v26[1] = (char *)v26 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v34 = (char *)v26 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v26 + *(int *)(v20 + 48) - v21;
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))((char *)v26 - v21, a2, v7);
  v27 = *(_QWORD *)(v8 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
  v33 = v22;
  v23(v22, v35, v8);
  v24 = v36 + *(int *)(a5 + 44);
  v35 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v24, v9);
  v36 = v9;
  v25 = (char *)sub_2383038AC + 4 * byte_238360D18[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2383038AC()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  void (*v15)(uint64_t, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  v8 = *(_QWORD *)(v7 - 136);
  v9 = *(int *)(v8 + 48);
  v10 = *(_QWORD *)(v7 - 120);
  v11 = v10 + v9;
  *(_QWORD *)(v7 - 208) = v10 + v9;
  *(_QWORD *)(v7 - 184) = v0 + v9;
  v6(v10, v0, v2);
  v1(v11, *(_QWORD *)(v7 - 184), v3);
  v12 = *(_QWORD *)(v7 - 200);
  v13 = v12 + *(int *)(v8 + 48);
  *(_QWORD *)(v7 - 184) = v13;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 144) + 16);
  v14(v12, v10, v2);
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 176) + 16);
  v15(v13, *(_QWORD *)(v7 - 208), v3);
  v16 = *(_QWORD *)(v7 - 192);
  v17 = v16 + *(int *)(v8 + 48);
  v14(v16, v5, v2);
  v15(v17, *(_QWORD *)(v7 - 128), v3);
  v18 = static _HashNode._collisionNode(_:_:_:)(*(_QWORD *)(v7 - 160), v12, *(_QWORD *)(v7 - 184), v16, v17, v2, v3, *(_QWORD *)(v7 - 152));
  v20 = v19;
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 8);
  v21(*(_QWORD *)(v7 - 120), v8);
  v21(v5, v8);
  (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v7 - 112) + 8))(v4, *(_QWORD *)(v7 - 104));
  *v4 = v18;
  v4[1] = v20;
  return swift_storeEnumTagMultiPayload();
}

void sub_238303B68()
{
  sub_23835B7CC();
  __break(1u);
}

uint64_t type metadata accessor for _HashNode.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _HashNode.Builder);
}

uint64_t static _HashNode.Builder.collisionNode(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  return sub_238303BC0(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_238303BC0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v14 = type metadata accessor for _HashNode.Builder.Kind(0, a4, a5, a6);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v18 - v15);
  *v16 = a2;
  v16[1] = a3;
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(a1, (uint64_t)v16, a4, a5, a6, a7);
}

void _HashNode.Builder.finalize(_:)(uint64_t a1, uint64_t a2)
{
  sub_2383058C8(a2);
}

void _HashNode.Builder.copyItems(_:from:upTo:)(unsigned int a1, _DWORD *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;

  v27 = a1;
  v9 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(a5 + 24);
  v28 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v24 - v11;
  v13 = *a2 & ~(-1 << a4);
  if (v13)
  {
    v14 = v8;
    v15 = 0;
    v25 = *(_QWORD *)(v28 + 32);
    v26 = TupleTypeMetadata2;
    do
    {
      v29 = __clz(__rbit32(v13));
      v13 &= v13 - 1;
      v16 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v15, a2, a3, v9, v14, v25);
      v17 = *(int *)(TupleTypeMetadata2 + 48);
      v18 = a2;
      v19 = &v12[v17];
      v20 = a3;
      v21 = v16 + v17;
      (*(void (**)(char *))(*(_QWORD *)(v9 - 8) + 16))(v12);
      v22 = v21;
      a3 = v20;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v19, v22, v14);
      v23 = (uint64_t)v19;
      a2 = v18;
      TupleTypeMetadata2 = v26;
      _HashNode.Builder.addNewItem(_:_:at:)(v27, (uint64_t)v12, v23, v29, v28);
      v15 = (v15 + 1);
    }
    while (v13);
  }
}

void _HashNode.Builder.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v3 = type metadata accessor for _HashNode.Builder.Kind(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  MEMORY[0x24BDAC7A8](v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - v5, v1 + *(int *)(a1 + 44), v3);
  v6 = (char *)sub_238303E98 + 4 * byte_238360D1C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_238303E98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_release();
  return v1;
}

uint64_t _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(unsigned int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  unsigned int *v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;

  v31 = a4;
  v34 = a1;
  v7 = *(_QWORD *)(a5 + 16);
  v8 = *(_QWORD *)(a5 + 24);
  v33 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v31 - v12;
  v14 = *a2;
  v35 = a3;
  v36 = a2;
  if (v14)
  {
    result = 0;
    v32 = *(_QWORD *)(v33 + 32);
    do
    {
      v15 = __clz(__rbit32(v14));
      v14 &= v14 - 1;
      v16 = (result + 1);
      v17 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(result, v36, a3, v7, v8, v32);
      v18 = *(int *)(TupleTypeMetadata2 + 48);
      v19 = (uint64_t)&v13[v18];
      v20 = v17 + v18;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v13, v17, v7);
      v21 = v20;
      a3 = v35;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v19, v21, v8);
      _HashNode.Builder.addNewItem(_:_:at:)(v34, (uint64_t)v13, v19, v15, v33);
      v11 = v36;
      result = v16;
    }
    while (v14);
  }
  v22 = v11[1] & ~(-1 << v31);
  v23 = v33;
  if (v22)
  {
    result = 0;
    v24 = *(_QWORD *)(v33 + 32);
    do
    {
      v25 = __clz(__rbit32(v22));
      v22 &= v22 - 1;
      v26 = (result + 1);
      v27 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(result, v36, a3, v7, v8, v24);
      v28 = *v27;
      v29 = v27[1];
      swift_retain();
      v30 = v28;
      a3 = v35;
      _HashNode.Builder.addNewChildNode(_:_:at:)(v34, v30, v29, v25, v23);
      result = v26;
    }
    while (v22);
  }
  return result;
}

uint64_t _HashNode.Builder.copyCollisions(from:upTo:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;

  v24 = a2;
  v25 = a4;
  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(a4 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v21 - v11;
  if (a3)
  {
    result = 0;
    v13 = *v24;
    v22 = *(_QWORD *)(v25 + 32);
    v23 = v13;
    do
    {
      v14 = (result + 1);
      v26 = *v4;
      v15 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(result, a1, v24, v7, v8, v22);
      v16 = *(int *)(TupleTypeMetadata2 + 48);
      v17 = a1;
      v18 = &v12[v16];
      v19 = v15 + v16;
      (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v12);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v18, v19, v8);
      v20 = (uint64_t)v18;
      a1 = v17;
      _HashNode.Builder.addNewCollision(_:_:_:)(v26, (uint64_t)v12, v20, v23, v25);
      result = v14;
    }
    while (a3 != (_DWORD)v14);
  }
  return result;
}

uint64_t static _HashNode.Builder.item(_:_:at:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t);
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  _BYTE *v23;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;

  v27 = a7;
  v28 = a8;
  v26 = a4;
  v29 = a1;
  v12 = type metadata accessor for _HashNode.Builder.Kind(0, a5, a6, a7);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v25[-v13];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = &v25[-v17];
  v19 = &v25[*(int *)(v16 + 48) - v17];
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32);
  v20(&v25[-v17], a2, a5);
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32);
  v21(v19, a3, a6);
  v22 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v23 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  v20(v14, (uint64_t)v18, a5);
  v21(v23, (uint64_t)v19, a6);
  v14[v22] = v26;
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(v29, (uint64_t)v14, a5, a6, v27, v28);
}

void static _HashNode.Builder.childBranch(_:_:at:)(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[5];
  int v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v22 = a3;
  v25 = a1;
  v24 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v21[4] = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for _HashNode.Builder.Kind(0, a4, a5, a6);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v21 - v17;
  v26 = a6;
  v19 = type metadata accessor for _HashNode.Builder(0, a4, a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2 + *(int *)(v19 + 44), v14);
  v20 = (char *)sub_23830451C + 4 * byte_238360D20[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23830451C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *(int *)(*(_QWORD *)(v6 - 112) + 48);
  v8 = v3 + v7;
  *(_QWORD *)(v6 - 152) = v5 + v7;
  *(_QWORD *)(v6 - 144) = v3 + v7;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32);
  v9(v3, v5, v1);
  v10 = v9;
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 32);
  *(_QWORD *)(v6 - 160) = v11;
  v11(v8, *(_QWORD *)(v6 - 152), v0);
  v12 = *(_QWORD *)(v6 - 112);
  v13 = v2 + *(int *)(v12 + 48);
  *(_QWORD *)(v6 - 152) = v13;
  *(_QWORD *)(v6 - 136) = v10;
  v10(v2, v3, v1);
  v14 = v13;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 160);
  v15(v14, *(_QWORD *)(v6 - 144), v0);
  v16 = *(_QWORD *)(v6 - 128);
  v17 = v16 + *(int *)(v12 + 48);
  v10(v16, v2, v1);
  v15(v17, *(_QWORD *)(v6 - 152), v0);
  v18 = *(_QWORD *)(v6 - 112);
  v19 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v20 = v4 + *(int *)(v18 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 136))(v4, v16, v1);
  v15(v20, v17, v0);
  *(_BYTE *)(v4 + v19) = *(_DWORD *)(v6 - 116);
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(*(_DWORD *)(v6 - 92), v4, v1, v0, *(_QWORD *)(v6 - 88), *(_BYTE **)(v6 - 104));
}

uint64_t _HashNode.Builder.level.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _HashNode.Builder.level.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashNode.Builder.level.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashNode.Builder.kind.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = type metadata accessor for _HashNode.Builder.Kind(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t _HashNode.Builder.kind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = type metadata accessor for _HashNode.Builder.Kind(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*_HashNode.Builder.kind.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashNode.Builder.init(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  _BYTE *v10;
  uint64_t v11;

  *a6 = a1;
  v10 = &a6[*(int *)(type metadata accessor for _HashNode.Builder(0, a3, a4, a5) + 44)];
  v11 = type metadata accessor for _HashNode.Builder.Kind(0, a3, a4, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
}

Swift::Void __swiftcall _HashNode.Builder.dump()()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD v14[8];
  uint64_t v15;
  unint64_t v16;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14[3] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14[4] = TupleTypeMetadata2;
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v6);
  v7 = *(_QWORD *)(v2 + 32);
  v14[5] = (char *)v14 - v8;
  v14[6] = v7;
  v9 = type metadata accessor for _HashNode.Builder.Kind(0, v3, v4, v7);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v14 - v11;
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  v15 = 0x287265646C697542;
  v16 = 0xEF203A6C6576656CLL;
  v14[7] = (13108 * *v1 + 52432) >> 16;
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v10 + 16))(v12, &v1[*(int *)(v2 + 44)], v9);
  v13 = (char *)sub_2383049B8 + 4 * byte_238360D24[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2383049B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(v6 - 128);
  *(_DWORD *)(v6 - 148) = *(unsigned __int8 *)(v3 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v8 = *(int *)(v7 + 48);
  v9 = *(_QWORD *)(v6 - 120) + v8;
  *(_QWORD *)(v6 - 144) = v1;
  v10 = v3 + v8;
  v11 = *(_QWORD *)(v0 - 8);
  (*(void (**)(void))(v11 + 32))();
  v12 = *(_QWORD *)(v2 - 8);
  v13 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v9, v10, v2);
  __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23835CD60;
  *(_QWORD *)(v6 - 96) = 0;
  *(_QWORD *)(v6 - 88) = 0xE000000000000000;
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 - 96) = 0x286D657469;
  *(_QWORD *)(v6 - 88) = 0xE500000000000000;
  v15 = v5 + *(int *)(v7 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v5, *(_QWORD *)(v6 - 120), v0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v13, v2);
  sub_238296B68(v5, v15, v0, v2, *(_QWORD *)(v6 - 112));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v5, v0);
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  *(_BYTE *)(v6 - 104) = *(_DWORD *)(v6 - 148);
  sub_238305B90();
  sub_23835AF50();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 144);
  *(_QWORD *)(v6 - 88) = v4;
  swift_bridgeObjectRetain();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v6 - 96);
  v17 = *(_QWORD *)(v6 - 88);
  *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v17;
  sub_23835B9DC();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 136) + 8))(*(_QWORD *)(v6 - 120), *(_QWORD *)(v6 - 128));
}

BOOL _HashNode.Builder.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BOOL8 v7;
  uint64_t v9;

  v3 = type metadata accessor for _HashNode.Builder.Kind(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, v1 + *(int *)(a1 + 44), v3);
  v7 = swift_getEnumCaseMultiPayload() == 3;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t sub_238304E60@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v14 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, a2, a3, a4, a5);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 16))(a6, v14, TupleTypeMetadata2);
  if (*a1)
  {
    *(_BYTE *)(a6 + v13) = __clz(__rbit32(*a1));
    type metadata accessor for _HashNode.Builder.Kind(0, a3, a4, a5);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _HashNode.applyReplacement(_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(char *, uint64_t *, uint64_t);
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t TupleTypeMetadata2;

  v44 = a1;
  v46 = a4;
  v8 = a3[2];
  v7 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v40 - v12;
  v14 = a3[4];
  v15 = type metadata accessor for _HashNode.Builder.Kind(0, v8, v7, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v40 - v17);
  swift_release();
  v19 = type metadata accessor for _HashNode.Builder(0, v8, v7, v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v18, a2 + *(int *)(v19 + 44), v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 2)
  {
    v21 = v18[1];
    *v4 = *v18;
    v4[1] = v21;
    v22 = v46;
LABEL_11:
    v33 = TupleTypeMetadata2;
    v34 = v45;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v22, 1, 1, v33);
  }
  if (EnumCaseMultiPayload)
  {
    v22 = v46;
    if (qword_2568F09D0 != -1)
      swift_once();
    *v4 = _HashNode.init(storage:count:)(_emptySingleton, 0, v8, v7, v14);
    v4[1] = v32;
    swift_retain();
    goto LABEL_11;
  }
  v23 = TupleTypeMetadata2;
  v41 = *((unsigned __int8 *)v18 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v24 = *(int *)(v23 + 48);
  v25 = &v13[v24];
  v26 = (char *)v18 + v24;
  v40 = *(_QWORD *)(v8 - 8);
  v43 = *(void (**)(char *, uint64_t *, uint64_t))(v40 + 32);
  v43(v13, v18, v8);
  v27 = *(_QWORD *)(v7 - 8);
  v42 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v42(v25, v26, v7);
  v22 = v46;
  if (!(_BYTE)v44)
  {
    v35 = (uint64_t)&v11[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v11, v13, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v35, v25, v7);
    v36 = static _HashNode._regularNode(_:_:)((uint64_t)v11, v35, v41, v8, v7, v14);
    v38 = v37;
    v34 = v45;
    v39 = TupleTypeMetadata2;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, TupleTypeMetadata2);
    *v4 = v36;
    v4[1] = v38;
    v33 = v39;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v22, 1, 1, v33);
  }
  if (qword_2568F09D0 != -1)
    swift_once();
  *v4 = _HashNode.init(storage:count:)(_emptySingleton, 0, v8, v7, v14);
  v4[1] = v28;
  v29 = TupleTypeMetadata2;
  v30 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
  v43(v22, (uint64_t *)v13, v8);
  v42(v30, v25, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v22, 0, 1, v29);
  return swift_retain();
}

void _HashNode.Builder.mapValues<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD v22[9];
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = v5;
  v24 = a1;
  v25 = a2;
  v30 = a5;
  v9 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v22[8] = (char *)v22 - v11;
  v22[7] = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v22[6] = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = swift_getTupleTypeMetadata2();
  v15 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  v16 = *(_QWORD *)(a3 + 32);
  v26 = a4;
  v28 = type metadata accessor for _HashNode.Builder.Kind(0, v9, a4, v16);
  MEMORY[0x24BDAC7A8](v28);
  v29 = v16;
  v17 = type metadata accessor for _HashNode.Builder.Kind(0, v9, v13, v16);
  MEMORY[0x24BDAC7A8](v17);
  v18 = *(int *)(a3 + 44);
  v27 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)v22 - v20, v6 + v18, v17);
  v21 = (char *)sub_2383054F0 + 4 * byte_238360D28[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2383054F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_DWORD *)(v7 - 180) = *(unsigned __int8 *)(v2 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v8 = *(int *)(v4 + 48);
  v9 = v5 + v8;
  *(_QWORD *)(v7 - 224) = v2 + v8;
  v10 = *(_QWORD *)(v1 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  *(_QWORD *)(v7 - 216) = v10;
  *(_QWORD *)(v7 - 192) = v11;
  v11(v5, v2, v1);
  v12 = *(_QWORD *)(v0 - 8);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 32);
  *(_QWORD *)(v7 - 208) = v9;
  *(_QWORD *)(v7 - 200) = v13;
  v13(v9, *(_QWORD *)(v7 - 224), v0);
  v14 = v6 + *(int *)(v4 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v6, v5, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v9, v0);
  v15 = *(_QWORD *)(v7 - 176);
  (*(void (**)(uint64_t, uint64_t))(v7 - 144))(v6, v14);
  v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v7 - 136) = v16;
  v16(v14, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 216) + 8))(v6, v1);
  v17 = v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v7 - 144) = v17;
  *(_DWORD *)(v7 - 120) = **(unsigned __int8 **)(v7 - 120);
  v18 = v5;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 192);
  v19(v6, v18, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 - 200))(v17, *(_QWORD *)(v7 - 208), v0);
  v20 = *(_QWORD *)(v7 - 160);
  v21 = *(_QWORD *)(v7 - 152);
  v22 = v20 + *(int *)(v21 + 48);
  v19(v20, v6, v1);
  v23 = v19;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 32);
  v25 = v15;
  v26 = *(_QWORD *)(v7 - 128);
  v24(v22, v25, v26);
  v27 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v28 = v3 + *(int *)(v21 + 48);
  v23(v3, v20, v1);
  v24(v28, v22, v26);
  *(_BYTE *)(v3 + v27) = *(_DWORD *)(v7 - 180);
  swift_storeEnumTagMultiPayload();
  _HashNode.Builder.init(_:_:)(*(_DWORD *)(v7 - 120), v3, v1, v26, *(_QWORD *)(v7 - 104), *(_BYTE **)(v7 - 96));
  return (*(uint64_t (**)(_QWORD, uint64_t))(v7 - 136))(*(_QWORD *)(v7 - 144), v0);
}

uint64_t sub_2383057EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v13 - v10, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
}

uint64_t sub_2383058BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2383057EC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_2383058C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[6];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11[5] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for _HashNode.Builder.Kind(0, v3, v4, *(_QWORD *)(a1 + 32));
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v11 - v9, v1 + *(int *)(a1 + 44), v7);
  v10 = (char *)sub_2383059E0 + 4 * byte_238360D2C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2383059E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
  return *(_QWORD *)v2;
}

unint64_t sub_238305B90()
{
  unint64_t result;

  result = qword_2568F1D38[0];
  if (!qword_2568F1D38[0])
  {
    result = MEMORY[0x23B831670](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, qword_2568F1D38);
  }
  return result;
}

uint64_t sub_238305BD4(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for _HashNode.Builder.Kind(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_238305C54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80);
  v9 = v8 & 0xF8 | 7u;
  v10 = ~v9;
  v11 = *(_QWORD *)(v5 + 64) + v7;
  v12 = (v11 & ~v7) + *(_QWORD *)(v6 + 64);
  if ((unint64_t)(v12 + 1) > 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if ((v8 & 0x1000F8) != 0 || v13 + 1 + ((v9 + 1) & (unint64_t)~v9) > 0x18)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v9 + 16) & v10));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v17 = (_QWORD *)((unint64_t)(a1 + 1) & v10);
    v18 = (_QWORD *)((unint64_t)(a2 + 1) & v10);
    v19 = *((unsigned __int8 *)v18 + v13);
    if (v19 >= 3)
    {
      if (v13 <= 3)
        v20 = v13;
      else
        v20 = 4;
      __asm { BR              X15 }
    }
    if (v19 == 2)
    {
      *v17 = *v18;
      *(_QWORD *)(((unint64_t)(a1 + 1) & v10) + 8) = *(_QWORD *)(((unint64_t)(a2 + 1) & v10) + 8);
      *((_BYTE *)v17 + v13) = 2;
    }
    else
    {
      if (v19 != 1)
      {
        v21 = ~v7;
        (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(v17, v18);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v17 + v11) & v21, ((unint64_t)v18 + v11) & v21, v4);
        *((_BYTE *)v17 + v12) = *((_BYTE *)v18 + v12);
        *((_BYTE *)v17 + v13) = 0;
        return v3;
      }
      *v17 = *v18;
      *(_QWORD *)(((unint64_t)(a1 + 1) & v10) + 8) = *(_QWORD *)(((unint64_t)(a2 + 1) & v10) + 8);
      *((_BYTE *)v17 + v13) = 1;
    }
  }
  swift_retain();
  return v3;
}

uint64_t sub_238305E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(_DWORD *)(v4 + 80) | *(_DWORD *)(v3 + 80)) & 0xF8 | 7u;
  v6 = *(_DWORD *)(v4 + 80);
  v7 = (a1 + v5 + 1) & ~v5;
  v8 = *(_QWORD *)(v3 + 64) + v6;
  v9 = *(_QWORD *)(v4 + 64) + (v8 & ~v6);
  if ((unint64_t)(v9 + 1) > 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  v11 = *(unsigned __int8 *)(v7 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X15 }
  }
  if (v11 == 2 || v11 == 1)
    return swift_release();
  v13 = ~v6;
  (*(void (**)(uint64_t))(v3 + 8))(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))((v8 + v7) & v13, v2);
}

_BYTE *sub_238305F9C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80)) & 0xF8 | 7u;
  v9 = (_QWORD *)((unint64_t)&a1[v8 + 1] & ~v8);
  v10 = (_QWORD *)((unint64_t)&a2[v8 + 1] & ~v8);
  v11 = *(_QWORD *)(v5 + 64) + v7;
  v12 = (v11 & ~v7) + *(_QWORD *)(v6 + 64);
  if ((unint64_t)(v12 + 1) > 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  v14 = *((unsigned __int8 *)v10 + v13);
  if (v14 >= 3)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X14 }
  }
  if (v14 == 2)
  {
    *v9 = *v10;
    *(_QWORD *)(((unint64_t)&a1[v8 + 1] & ~v8) + 8) = *(_QWORD *)(((unint64_t)&a2[v8 + 1] & ~v8) + 8);
    v17 = 2;
LABEL_14:
    *((_BYTE *)v9 + v13) = v17;
    swift_retain();
    return a1;
  }
  if (v14 == 1)
  {
    *v9 = *v10;
    *(_QWORD *)(((unint64_t)&a1[v8 + 1] & ~v8) + 8) = *(_QWORD *)(((unint64_t)&a2[v8 + 1] & ~v8) + 8);
    v17 = 1;
    goto LABEL_14;
  }
  v16 = ~v7;
  (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(v9, v10);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v9 + v11) & v16, ((unint64_t)v10 + v11) & v16, v4);
  *((_BYTE *)v9 + v12) = *((_BYTE *)v10 + v12);
  *((_BYTE *)v9 + v13) = 0;
  return a1;
}

_BYTE *sub_238306154(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0xF8 | 7u;
  v9 = (_QWORD *)((unint64_t)&a1[v8 + 1] & ~v8);
  v10 = (_QWORD *)((unint64_t)&a2[v8 + 1] & ~v8);
  if (v9 != v10)
  {
    v11 = *(_DWORD *)(v7 + 80);
    v21 = *(_QWORD *)(v6 + 64);
    v12 = ((v21 + v11) & ~v11) + *(_QWORD *)(v7 + 64);
    if ((unint64_t)(v12 + 1) > 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    v14 = *((unsigned __int8 *)v9 + v13);
    if (v14 >= 3)
    {
      if (v13 <= 3)
        v15 = v13;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v20 = ~v11;
    if (v14 == 2 || v14 == 1)
    {
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v9 + v11 + v21) & v20, v4);
    }
    v16 = *((unsigned __int8 *)v10 + v13);
    if (v16 >= 3)
    {
      if (v13 <= 3)
        v17 = v13;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 2)
    {
      *v9 = *v10;
      v9[1] = v10[1];
      v18 = 2;
    }
    else
    {
      if (v16 != 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(v9, v10, v5);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v9 + v11 + v21) & v20, ((unint64_t)v10 + v11 + v21) & v20, v4);
        *((_BYTE *)v9 + v12) = *((_BYTE *)v10 + v12);
        *((_BYTE *)v9 + v13) = 0;
        return a1;
      }
      *v9 = *v10;
      v9[1] = v10[1];
      v18 = 1;
    }
    *((_BYTE *)v9 + v13) = v18;
    swift_retain();
  }
  return a1;
}

_BYTE *sub_2383063EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80)) & 0xF8 | 7u;
  v9 = (_OWORD *)((unint64_t)&a1[v8 + 1] & ~v8);
  v10 = (_OWORD *)((unint64_t)&a2[v8 + 1] & ~v8);
  v11 = *(_QWORD *)(v5 + 64) + v7;
  v12 = (v11 & ~v7) + *(_QWORD *)(v6 + 64);
  if ((unint64_t)(v12 + 1) > 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  v14 = *((unsigned __int8 *)v10 + v13);
  if (v14 >= 3)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X14 }
  }
  if (v14 == 2)
  {
    *v9 = *v10;
    *((_BYTE *)v9 + v13) = 2;
  }
  else if (v14 == 1)
  {
    *v9 = *v10;
    *((_BYTE *)v9 + v13) = 1;
  }
  else
  {
    v16 = ~v7;
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(v9, v10);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v9 + v11) & v16, ((unint64_t)v10 + v11) & v16, v4);
    *((_BYTE *)v9 + v12) = *((_BYTE *)v10 + v12);
    *((_BYTE *)v9 + v13) = 0;
  }
  return a1;
}

_BYTE *sub_238306594(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0xF8 | 7u;
  v9 = (_OWORD *)((unint64_t)&a1[v8 + 1] & ~v8);
  v10 = (_OWORD *)((unint64_t)&a2[v8 + 1] & ~v8);
  if (v9 != v10)
  {
    v11 = *(_DWORD *)(v7 + 80);
    v20 = *(_QWORD *)(v6 + 64);
    v12 = ((v20 + v11) & ~v11) + *(_QWORD *)(v7 + 64);
    if ((unint64_t)(v12 + 1) > 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    v14 = *((unsigned __int8 *)v9 + v13);
    if (v14 >= 3)
    {
      if (v13 <= 3)
        v15 = v13;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v19 = ~v11;
    if (v14 == 2 || v14 == 1)
    {
      swift_release();
    }
    else
    {
      (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(v9, v5);
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v9 + v11 + v20) & v19, v4);
    }
    v16 = *((unsigned __int8 *)v10 + v13);
    if (v16 >= 3)
    {
      if (v13 <= 3)
        v17 = v13;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 2)
    {
      *v9 = *v10;
      *((_BYTE *)v9 + v13) = 2;
    }
    else if (v16 == 1)
    {
      *v9 = *v10;
      *((_BYTE *)v9 + v13) = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(v9, v10, v5);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v9 + v11 + v20) & v19, ((unint64_t)v10 + v11 + v20) & v19, v4);
      *((_BYTE *)v9 + v12) = *((_BYTE *)v10 + v12);
      *((_BYTE *)v9 + v13) = 0;
    }
  }
  return a1;
}

uint64_t sub_23830681C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + ((*(_QWORD *)(v3 + 64) + v5) & ~(unint64_t)v5);
  if (v6 + 1 > 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (!a2)
    return 0;
  v8 = (*(_DWORD *)(v3 + 80) | v5) & 0xF8 | 7u;
  if (a2 < 0xFD)
    goto LABEL_24;
  v9 = v7 + ((v8 + 1) & ~v8) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 252) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_24:
      v16 = *(unsigned __int8 *)(((a1 + v8 + 1) & ~v8) + v7);
      if (v16 >= 4)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_24;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return (v14 + 253);
  if (v9 <= 3)
    v15 = v9;
  else
    v15 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23830691C + 4 * byte_238360D58[v15 - 1]))();
}

void sub_238306980(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v7) & ~(unint64_t)v7);
  if (v8 + 1 > 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  v10 = (*(_DWORD *)(v5 + 80) | v7) & 0xF8 | 7u;
  v11 = v9 + ((v10 + 1) & ~v10) + 1;
  if (a3 < 0xFD)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 252) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X13 }
  v13 = a2 - 253;
  if (v11 < 4)
  {
    if ((_DWORD)v9 + (((_DWORD)v10 + 1) & ~(_DWORD)v10) != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *a1 = v15;
        *((_BYTE *)a1 + 2) = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *a1 = v15;
      }
      else
      {
        *(_BYTE *)a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v9 + ((v10 + 1) & ~v10) + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_238306B74()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v5;
  char *v6;
  void *v7;
  void *v8;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      v6 = &v5;
      v7 = &unk_238360DC8;
      v8 = &unk_238360DC8;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

_QWORD *sub_238306C3C(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v10 + 1) > 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  v12 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80);
  if ((v12 & 0x1000F8) != 0 || (unint64_t)(v11 + 1) > 0x18)
  {
    v14 = *__src;
    *v4 = *__src;
    v4 = (_QWORD *)(v14 + (((v12 & 0xF8 | 7u) + 16) & ~(unint64_t)(v12 & 0xF8 | 7u)));
  }
  else
  {
    v16 = *((unsigned __int8 *)__src + v11);
    if (v16 >= 3)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X15 }
    }
    if (v16 == 2)
    {
      v19 = __src[1];
      *__dst = *__src;
      __dst[1] = v19;
      *((_BYTE *)__dst + v11) = 2;
    }
    else
    {
      if (v16 != 1)
      {
        v18 = ~v8;
        (*(void (**)(_QWORD *, _QWORD *))(v6 + 16))(__dst, __src);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v18, ((unint64_t)__src + v9) & v18, v5);
        *((_BYTE *)v4 + v10) = *((_BYTE *)__src + v10);
        *((_BYTE *)v4 + v11) = 0;
        return v4;
      }
      v20 = __src[1];
      *__dst = *__src;
      __dst[1] = v20;
      *((_BYTE *)__dst + v11) = 1;
    }
  }
  swift_retain();
  return v4;
}

uint64_t sub_238306DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v4 + 64) + v6;
  v8 = *(_QWORD *)(v5 + 64) + (v7 & ~v6);
  if ((unint64_t)(v8 + 1) > 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  v10 = *(unsigned __int8 *)(a1 + v9);
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X15 }
  }
  if (v10 == 2 || v10 == 1)
    return swift_release();
  v12 = ~v6;
  (*(void (**)(uint64_t))(v4 + 8))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))((v7 + a1) & v12, v3);
}

_QWORD *sub_238306F30(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v10 + 1) > 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  v12 = *((unsigned __int8 *)__src + v11);
  if (v12 >= 3)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 2)
  {
    v15 = __src[1];
    *__dst = *__src;
    __dst[1] = v15;
    v16 = 2;
LABEL_14:
    *((_BYTE *)__dst + v11) = v16;
    swift_retain();
    return __dst;
  }
  if (v12 == 1)
  {
    v17 = __src[1];
    *__dst = *__src;
    __dst[1] = v17;
    v16 = 1;
    goto LABEL_14;
  }
  v14 = ~v8;
  (*(void (**)(_QWORD *, _QWORD *))(v6 + 16))(__dst, __src);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)__dst + v9) & v14, ((unint64_t)__src + v9) & v14, v5);
  *((_BYTE *)__dst + v10) = *((_BYTE *)__src + v10);
  *((_BYTE *)__dst + v11) = 0;
  return __dst;
}

_QWORD *sub_2383070A4(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;

  if (__dst != __src)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v5 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v7 + 64) + v9;
    v11 = (v10 & ~v9) + *(_QWORD *)(v8 + 64);
    if ((unint64_t)(v11 + 1) > 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    v13 = *((unsigned __int8 *)__dst + v12);
    if (v13 >= 3)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    v15 = ~v9;
    if (v13 == 2 || v13 == 1)
    {
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD))(v7 + 8))(__dst, *(_QWORD *)(a3 + 16));
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)__dst + v10) & v15, v5);
    }
    v16 = *((unsigned __int8 *)__src + v12);
    if (v16 >= 3)
    {
      if (v12 <= 3)
        v17 = v12;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 2)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      v18 = 2;
    }
    else
    {
      if (v16 != 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(__dst, __src, v6);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)__dst + v10) & v15, ((unint64_t)__src + v10) & v15, v5);
        *((_BYTE *)__dst + v11) = *((_BYTE *)__src + v11);
        *((_BYTE *)__dst + v12) = 0;
        return __dst;
      }
      *__dst = *__src;
      __dst[1] = __src[1];
      v18 = 1;
    }
    *((_BYTE *)__dst + v12) = v18;
    swift_retain();
  }
  return __dst;
}

_BYTE *sub_2383072E8(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v10 + 1) > 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  v12 = __src[v11];
  if (v12 >= 3)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 2)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[v11] = 2;
  }
  else if (v12 == 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[v11] = 1;
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(_BYTE *, unsigned __int8 *))(v6 + 32))(__dst, __src);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))((unint64_t)&__dst[v9] & v14, (unint64_t)&__src[v9] & v14, v5);
    __dst[v10] = __src[v10];
    __dst[v11] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_23830745C(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  if (__dst != __src)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v5 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v7 + 64) + v9;
    v11 = (v10 & ~v9) + *(_QWORD *)(v8 + 64);
    if ((unint64_t)(v11 + 1) > 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    v13 = __dst[v12];
    if (v13 >= 3)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    v15 = ~v9;
    if (v13 == 2 || v13 == 1)
    {
      swift_release();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v7 + 8))(__dst, *(_QWORD *)(a3 + 16));
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&__dst[v10] & v15, v5);
    }
    v16 = __src[v12];
    if (v16 >= 3)
    {
      if (v12 <= 3)
        v17 = v12;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 2)
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v12] = 2;
    }
    else if (v16 == 1)
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v12] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((unint64_t)&__dst[v10] & v15, (unint64_t)&__src[v10] & v15, v5);
      __dst[v11] = __src[v11];
      __dst[v12] = 0;
    }
  }
  return __dst;
}

uint64_t sub_238307690(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80));
  v4 = 16;
  if (v3 + 1 > 0x10)
    v4 = v3 + 1;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_21;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 252) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_21:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 4)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_21;
LABEL_14:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 253);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_238307770 + 4 * byte_238360D8E[(v5 - 1)]))();
}

void sub_2383077BC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 80));
  if (v5 + 1 > 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  v7 = v6 + 1;
  if (a3 < 0xFD)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 252) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v9 = a2 - 253;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_238307980(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  v3 = 16;
  if (v2 + 1 > 0x10)
    v3 = v2 + 1;
  if (*(unsigned __int8 *)(a1 + v3) < 3u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2383079E4 + 4 * byte_238360D9C[v4]))();
}

void sub_238307A2C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80));
  if (v4 + 1 > 0x10)
    v5 = v4 + 1;
  else
    v5 = 16;
  if (a2 > 2)
  {
    v6 = a2 - 3;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t TreeSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = TreeSet.union(_:)(a1, a2, a3, *v4, v4[1], v4[2], *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
  v7 = v6;
  v9 = v8;
  result = swift_release();
  *v4 = v5;
  v4[1] = v7;
  v4[2] = v9;
  return result;
}

uint64_t TreeSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = TreeSet.union<A>(_:)(a1, a2, a3, *v5, v5[1], v5[2], *(_QWORD *)(a4 + 16), a5, *(_QWORD *)(a4 + 24));
  v8 = v7;
  v10 = v9;
  result = swift_release();
  *v5 = v6;
  v5[1] = v8;
  v5[2] = v10;
  return result;
}

uint64_t TreeSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(_QWORD, _QWORD, _QWORD))v3;
  v11 = *(_QWORD *)(v3 + 8);
  v12 = *(_QWORD *)(v3 + 16);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v9, a1);
  v13 = TreeSet.union<A>(_:)((uint64_t)v9, v10, v11, v12, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  v15 = v14;
  v17 = v16;
  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  *(_QWORD *)v3 = v13;
  *(_QWORD *)(v3 + 8) = v15;
  *(_QWORD *)(v3 + 16) = v17;
  return result;
}

_BYTE *BitSet.subtract(_:)(int8x16_t *a1)
{
  uint64_t *v1;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char v18;

  v18 = 1;
  v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_23826C260((uint64_t)v3);
  v4 = *((_QWORD *)v3 + 2);
  if (a1[1].i64[0] < v4)
    v4 = a1[1].u64[0];
  if (v4)
  {
    if (v4 < 6 || ((v5 = 8 * v4 + 32, v3 + 32 < &a1->i8[v5]) ? (v6 = &a1[2] >= (int8x16_t *)&v3[v5]) : (v6 = 1), !v6))
    {
      v7 = 0;
LABEL_17:
      v12 = v4 - v7;
      v13 = 8 * v7 + 32;
      v14 = &v3[v13];
      v15 = (uint64_t *)((char *)a1->i64 + v13);
      do
      {
        v16 = *v15++;
        *(_QWORD *)v14 &= ~v16;
        v14 += 8;
        --v12;
      }
      while (v12);
      goto LABEL_19;
    }
    v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    v8 = a1 + 3;
    v9 = (int8x16_t *)(v3 + 48);
    v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vbicq_s8(*v9, *v8);
      v9[-1] = vbicq_s8(v9[-1], v8[-1]);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7)
      goto LABEL_17;
  }
LABEL_19:
  *v1 = (uint64_t)v3;
  return sub_2382FC0D0(&v18, v1);
}

{
  uint64_t *v1;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char v18;

  v18 = 1;
  v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_23826C260((uint64_t)v3);
  v4 = *((_QWORD *)v3 + 2);
  if (a1[1].i64[0] < v4)
    v4 = a1[1].u64[0];
  if (v4)
  {
    if (v4 < 6 || ((v5 = 8 * v4 + 32, v3 + 32 < &a1->i8[v5]) ? (v6 = &a1[2] >= (int8x16_t *)&v3[v5]) : (v6 = 1), !v6))
    {
      v7 = 0;
LABEL_17:
      v12 = v4 - v7;
      v13 = 8 * v7 + 32;
      v14 = &v3[v13];
      v15 = (uint64_t *)((char *)a1->i64 + v13);
      do
      {
        v16 = *v15++;
        *(_QWORD *)v14 &= ~v16;
        v14 += 8;
        --v12;
      }
      while (v12);
      goto LABEL_19;
    }
    v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    v8 = a1 + 3;
    v9 = (int8x16_t *)(v3 + 48);
    v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vbicq_s8(*v9, *v8);
      v9[-1] = vbicq_s8(v9[-1], v8[-1]);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7)
      goto LABEL_17;
  }
LABEL_19:
  *v1 = (uint64_t)v3;
  return sub_2382FC0D0(&v18, v1);
}

uint64_t BitSet.subtract(_:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char v6;

  if (a2 <= 0)
    v3 = 0;
  else
    v3 = result & ~(result >> 63);
  v4 = a2 & ~(a2 >> 63);
  if (v3 != v4)
  {
    v6 = 1;
    v5 = (char *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_23826C260((uint64_t)v5);
    _UnsafeBitSet.subtract(_:)(v3, v4);
    *v2 = (uint64_t)v5;
    return (uint64_t)sub_2382FC0D0(&v6, v2);
  }
  return result;
}

uint64_t BitSet.subtract<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  _QWORD v22[2];
  int8x16_t *v23[2];

  v3 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v22 - v9;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == &type metadata for BitSet)
  {
    Description[2](v13, a1, &type metadata for BitSet);
    swift_dynamicCast();
    BitSet.subtract(_:)(v23[0]);
    return swift_bridgeObjectRelease();
  }
  if (a2 == &type metadata for BitSet.Counted)
  {
    Description[2](v13, a1, &type metadata for BitSet.Counted);
    swift_dynamicCast();
    BitSet.subtract(_:)(v23[0]);
    return swift_bridgeObjectRelease();
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0);
  Description[2](v13, a1, a2);
  if ((ValueMetadata *)v14 == a2)
  {
    swift_dynamicCast();
    return BitSet.subtract(_:)((uint64_t)v23[0]->i64, (uint64_t)v23[1]->i64);
  }
  else
  {
    sub_23835AF8C();
    LOBYTE(v23[0]) = 1;
    v15 = (char *)*v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22[1] = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v15 = sub_23826C260((uint64_t)v15);
    v17 = *((_QWORD *)v15 + 2);
    v18 = sub_2383082A8();
    if ((v19 & 1) == 0)
    {
      do
      {
        if (v18 >> 6 < v17)
          *(_QWORD *)&v15[8 * (v18 >> 6) + 32] &= (-1 << v18) - 1;
        v18 = sub_2383082A8();
      }
      while ((v20 & 1) == 0);
    }
    *v3 = (uint64_t)v15;
    sub_2382FC0D0(v23, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  }
}

_BYTE *BitSet._subtract(_:)(_BYTE *result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v4;
  char *v5;
  char v6;

  if (result != (_BYTE *)a2)
  {
    v4 = (unint64_t)result;
    v6 = 1;
    v5 = (char *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_23826C260((uint64_t)v5);
    _UnsafeBitSet.subtract(_:)(v4, a2);
    *v2 = (uint64_t)v5;
    return sub_2382FC0D0(&v6, v2);
  }
  return result;
}

uint64_t sub_2383082A8()
{
  uint64_t result;
  uint64_t v1;
  char v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    sub_23835B484();
    if (v2 == 1)
      break;
    result = v1;
    if ((v1 & 0x8000000000000000) == 0)
      return result;
  }
  return 0;
}

_BYTE *BitSet._subtract(_:)(uint64_t (*a1)(void))
{
  uint64_t *v1;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v9;

  v9 = 1;
  v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_23826C260((uint64_t)v3);
  v4 = *((_QWORD *)v3 + 2);
  v5 = a1();
  if ((v6 & 1) == 0)
  {
    do
    {
      if (v5 >> 6 < v4)
        *(_QWORD *)&v3[8 * (v5 >> 6) + 32] &= (-1 << v5) - 1;
      v5 = a1();
    }
    while ((v7 & 1) == 0);
  }
  *v1 = (uint64_t)v3;
  return sub_2382FC0D0(&v9, v1);
}

uint64_t OrderedDictionary.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v8 = type metadata accessor for OrderedDictionary.Elements(0, a4, a5, a6);
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v8);
  v10 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v12, 0, 0, 0, a4, a5, v8, v9);
  swift_release();
  swift_release();
  swift_release();
  return v10;
}

unint64_t sub_2383084F4()
{
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return 0xD000000000000012;
}

uint64_t sub_2383085C0(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, OrderedDictionary.description.getter);
}

uint64_t OrderedDictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];

  v16[0] = a1;
  v16[1] = a2;
  v16[2] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = sub_2383084F4();
  v11 = v10;
  v12 = type metadata accessor for OrderedDictionary.Elements(0, a4, a5, a6);
  v13 = MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v12);
  v14 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v16, 1, v9, v11, a4, a5, v12, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_2383086C8(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, OrderedDictionary.debugDescription.getter);
}

uint64_t TreeSet<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23835BAA8();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  v10 = type metadata accessor for TreeSet(0, a5, a7, v9);
  MEMORY[0x23B831670](&protocol conformance descriptor for TreeSet<A>, v10);
  sub_23835B8D4();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t sub_2383087BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return TreeSet<>.encode(to:)(a1, *v3, v3[1], v3[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
}

uint64_t TreeSet<>.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v39 = a3;
  v33 = sub_23835B5F8();
  v36 = *(_QWORD *)(v33 - 8);
  v8 = MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a4;
  v12 = TreeSet.init()(a2, a4);
  v44 = v12;
  v45 = v13;
  v46 = v14;
  v15 = a1[3];
  v37 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_23835BA84();
  if (v4)
  {
    swift_release();
  }
  else
  {
    v31 = a2;
    v32 = v11;
    v16 = v36;
    __swift_project_boxed_opaque_existential_1(v42, v43);
    if ((sub_23835B8C8() & 1) != 0)
    {
LABEL_9:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      return v12;
    }
    v17 = v16;
    v19 = v34;
    v18 = v35;
    v20 = v31;
    v21 = (uint64_t)v32;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
      sub_23835B8B0();
      v22 = v38;
      v24 = type metadata accessor for TreeSet(0, v20, v38, v23);
      if ((sub_238282E20(v21, v24) & 1) == 0)
        break;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
      __swift_project_boxed_opaque_existential_1(v42, v43);
      if ((sub_23835B8C8() & 1) != 0)
      {
        v12 = v44;
        goto LABEL_9;
      }
    }
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v42, v43);
    sub_23835B88C();
    v40 = 0;
    v41 = 0xE000000000000000;
    sub_23835B5B0();
    sub_23835AE90();
    v47 = TreeSet.count.getter(v44, v45);
    sub_23835B880();
    sub_23835AE90();
    swift_bridgeObjectRelease();
    sub_23835AE90();
    sub_23835B5EC();
    v26 = sub_23835B604();
    swift_allocError();
    v28 = v27;
    v29 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v27, v18, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x24BEE26D8], v26);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v29);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v32, v20);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  return v12;
}

uint64_t sub_238308B74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = TreeSet<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

char *sub_238308BAC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  int v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  _BYTE v32[22];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (v4[5] != a3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = result;
  v8 = *v4;
  v9 = v4[1];
  v11 = v4[2];
  v10 = v4[3];
  v12 = v4[4];
  v37 = *v4;
  v38 = v9;
  v39 = v11;
  v40 = v10;
  v41 = v12;
  v42 = a3;
  result = (char *)sub_238269C7C();
  if ((unint64_t)result <= a4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((_QWORD *)&v27 + 1) = v12;
  v28 = MEMORY[0x24BEE4AF8];
  v29 = 0u;
  v30 = 0u;
  memset(v31, 0, 30);
  *(_QWORD *)v32 = 0;
  *(_QWORD *)&v32[8] = 0;
  *(_QWORD *)&v32[14] = 0;
  v33 = MEMORY[0x24BEE4AF8];
  v25 = v8;
  *(_QWORD *)&v26 = v9;
  *((_QWORD *)&v26 + 1) = v11;
  *(_QWORD *)&v27 = v10;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[4] = 0;
  v13 = *(_BYTE *)(v8 + 18);
  if (v13)
  {
    while (1)
    {
      result = (char *)((a4 >> ((4 * v13 + 8) & 0x3C)) & 0xF);
      if ((unint64_t)result >= *(unsigned __int16 *)(v8 + 16))
        break;
      sub_238320278(result, (uint64_t)&v28);
      v8 = v25;
      v13 = *(_BYTE *)(v25 + 18);
      if (!v13)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_6:
  result = (char *)((a4 >> 8) & 0xF);
  if ((unint64_t)result < *(unsigned __int16 *)(v8 + 16))
  {
    v34 = v8;
    v35 = v26;
    v36 = v27;
    result = (char *)sub_23826A924((uint64_t)result, (uint64_t)&v28, (uint64_t)v22);
    v4[5] = a3 + 1;
    v14 = *(_QWORD *)&v31[1];
    v15 = DWORD2(v31[1]);
    v16 = WORD6(v31[1]);
    v17 = *(_DWORD *)&v32[16];
    v18 = *(_WORD *)&v32[20];
    v19 = v33;
    *(_QWORD *)v7 = v28;
    *(_OWORD *)(v7 + 8) = v29;
    *(_OWORD *)(v7 + 24) = v30;
    *(_OWORD *)(v7 + 40) = v31[0];
    *((_QWORD *)v7 + 7) = v14;
    *((_WORD *)v7 + 34) = v16;
    *((_DWORD *)v7 + 16) = v15;
    *(_OWORD *)(v7 + 72) = *(_OWORD *)v32;
    *((_WORD *)v7 + 46) = v18;
    *((_DWORD *)v7 + 22) = v17;
    *((_QWORD *)v7 + 12) = v19;
    v20 = v22[1];
    LOWORD(v15) = v24;
    *(_QWORD *)a2 = v22[0];
    *(_QWORD *)(a2 + 8) = v20;
    *(_DWORD *)(a2 + 16) = v23;
    *(_WORD *)(a2 + 20) = v15;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

double sub_238308D70@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  double result;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  __int128 v52;
  int v53;
  __int16 v54;
  uint64_t v55;

  sub_238308BAC((char *)&v45, (uint64_t)&v40, a1, a2);
  v7 = v40;
  v6 = v41;
  v8 = sub_238262E88(a3, v40, v41, v42 | ((unint64_t)v43 << 32) | ((unint64_t)v44 << 40));
  v10 = v9;
  swift_bridgeObjectRetain();
  v11 = sub_23825E150(a3, v7, v6);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x23B8306D4](v11, v13, v15, v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v21 = sub_23835AF80();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = MEMORY[0x23B8306D4](v21, v23, v25, v27);
  v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v31 = v18 & 0xFFFFFFFFFFFFLL;
  if (v31)
  {
    swift_bridgeObjectRetain();
    sub_23826A0FC(v18, v20, (v10 << 16) & 0xFF0000 | HIWORD(v8) | (v10 << 16) & 0xFF000000 | ((unint64_t)HIBYTE(v10) << 40) | ((unint64_t)BYTE2(v10) << 32));
  }
  v32 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v32 = v28 & 0xFFFFFFFFFFFFLL;
  if (v32)
  {
    swift_bridgeObjectRetain();
    sub_238263184(v28, v30, v8 & 0xFFFFFFFFFFFFLL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v49;
  v34 = v50;
  v35 = v51;
  v36 = v53;
  v37 = v54;
  v38 = v55;
  *(_QWORD *)a4 = v45;
  *(_OWORD *)(a4 + 8) = v46;
  *(_OWORD *)(a4 + 24) = v47;
  *(_OWORD *)(a4 + 40) = v48;
  *(_QWORD *)(a4 + 56) = v33;
  *(_WORD *)(a4 + 68) = v35;
  *(_DWORD *)(a4 + 64) = v34;
  result = *(double *)&v52;
  *(_OWORD *)(a4 + 72) = v52;
  *(_WORD *)(a4 + 92) = v37;
  *(_DWORD *)(a4 + 88) = v36;
  *(_QWORD *)(a4 + 96) = v38;
  return result;
}

__n128 sub_238308FA4@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int16 v21;
  __int128 v22;
  unsigned int v23;
  unsigned __int16 v24;
  uint64_t v25;

  if (a4 == 1 || *(_QWORD *)(v5 + 40) != a2)
    sub_23831FEB0(a1 >> 11, (uint64_t)&v15);
  else
    sub_238308D70(a2, a3, (16 * (int)a1) & 0x4000 | ((unint64_t)a1 << 16) | (a1 >> 8) & 3 | 4, (uint64_t)&v15);
  result = v16;
  v8 = v17;
  v9 = v18;
  v10 = v19;
  v11 = v20 | ((unint64_t)v21 << 32);
  v12 = v22;
  v13 = v23 | ((unint64_t)v24 << 32);
  v14 = v25;
  *(_QWORD *)a5 = v15;
  *(__n128 *)(a5 + 8) = result;
  *(_OWORD *)(a5 + 24) = v8;
  *(_OWORD *)(a5 + 40) = v9;
  *(_QWORD *)(a5 + 56) = v10;
  *(_DWORD *)(a5 + 64) = v11;
  *(_WORD *)(a5 + 68) = WORD2(v11);
  *(_OWORD *)(a5 + 72) = v12;
  *(_DWORD *)(a5 + 88) = v13;
  *(_WORD *)(a5 + 92) = WORD2(v13);
  *(_QWORD *)(a5 + 96) = v14;
  return result;
}

uint64_t static _Bucket.invalid.getter()
{
  return 255;
}

uint64_t static _Bucket.bitMask.getter()
{
  return 31;
}

uint64_t _Bucket.value.getter(uint64_t result)
{
  return result;
}

BOOL static _Bucket.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t _Bucket._value.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_Bucket._value.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t static _Bucket.bitWidth.getter()
{
  return 5;
}

BOOL _Bucket.isInvalid.getter(char a1)
{
  return a1 == -1;
}

BOOL sub_2383090E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static _Bucket.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL sub_238309108(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_23830911C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_238309130(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_238309144(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t _Bucket.description.getter()
{
  sub_238305B90();
  return sub_23835AF50();
}

unint64_t sub_238309198()
{
  unint64_t result;

  result = qword_2568F1E40[0];
  if (!qword_2568F1E40[0])
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _Bucket, &type metadata for _Bucket);
    atomic_store(result, qword_2568F1E40);
  }
  return result;
}

uint64_t sub_2383091DC()
{
  sub_238305B90();
  return sub_23835AF50();
}

ValueMetadata *type metadata accessor for _Bucket()
{
  return &type metadata for _Bucket;
}

uint64_t sub_23830922C()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE v57[48];
  _OWORD v58[2];
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;

  v1 = (uint64_t)v0;
  v2 = v0[1];
  *(_OWORD *)v57 = *v0;
  *(_OWORD *)&v57[16] = v2;
  v47 = v0[1];
  *(_OWORD *)&v57[32] = v0[2];
  v45 = v0[2];
  if (*(_QWORD *)v57)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)v57 + 18);
    swift_unknownObjectRetain_n();
  }
  else
  {
    v3 = 0;
  }
  swift_unknownObjectRetain();
  if (sub_238269C7C() <= v3)
  {
    sub_23825B804((uint64_t)v0);
    sub_23825B804((uint64_t)v0);
    v4 = 0;
  }
  else
  {
    v62 = *(_QWORD *)v57;
    v63 = *(_OWORD *)&v57[8];
    v64 = *(_OWORD *)&v57[24];
    swift_unknownObjectRetain();
    v4 = sub_2382ED1C8(v3);
    sub_23825B804(v1);
    sub_23825B804(v1);
    sub_23825B804(v1);
  }
  v51 = *(_OWORD *)v57;
  v52 = v47;
  v53 = v45;
  v54 = *(_QWORD *)&v57[40];
  v55 = v3;
  v56 = v4;
  if (!v4)
  {
LABEL_47:
    swift_unknownObjectRelease();
    return sub_23835BA0C();
  }
  while (1)
  {
    v5 = *((_QWORD *)&v53 + 1);
    if (v54 != *((_QWORD *)&v53 + 1))
      break;
    v6 = v55;
    v7 = v51;
    v8 = v4 + 24 * ((v55 >> 8) & 0xF);
    v9 = *(_QWORD *)(v8 + 32);
    if (!(_QWORD)v51)
      goto LABEL_51;
    v10 = *(_QWORD *)(v8 + 24);
    v11 = ((-15 << ((4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v51 + 18) | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C));
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    if (v6 >= v11)
      goto LABEL_52;
    v13 = (4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C;
    v14 = ((v6 >> v13) & 0xF) + 1;
    if (v14 < *(unsigned __int16 *)(v4 + 16))
    {
      v55 = (v14 << v13) | ((-15 << v13) - 1) & v6;
      swift_unknownObjectRelease();
      goto LABEL_38;
    }
    v15 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
    v16 = (v6 >> v15) & 0xF;
    if (!*(_BYTE *)(v7 + 18))
    {
      if (v16 + 1 < (unint64_t)*(unsigned __int16 *)(v7 + 16))
      {
        v55 = ((v16 + 1) << v15) | ((-15 << v15) - 1) & v6;
        swift_unknownObjectRelease();
        v56 = v7;
        goto LABEL_38;
      }
      v24 = 0;
      goto LABEL_37;
    }
    v17 = *(_QWORD *)(v7 + 24 + 40 * ((v6 >> v15) & 0xF));
    v18 = (4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C;
    v19 = (v6 >> v18) & 0xF;
    if (*(_BYTE *)(v17 + 18))
    {
      v20 = *(_QWORD *)(v17 + 24 + 40 * ((v6 >> v18) & 0xF));
      v21 = *(unsigned __int8 *)(v20 + 18);
      v22 = (4 * v21 + 8) & 0x3C;
      v50[0] = (v6 >> v22) & 0xF;
      if (v21)
      {
        v46 = v17 + 24;
        v44 = v18;
        v49 = v7 + 24;
        v48 = v15;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        v23 = sub_2382EDABC(v20 + 24, v50, (uint64_t)&v54, v20, v21);
        swift_unknownObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v25 = ((v6 >> v22) & 0xF) + 1;
        if (v25 < *(unsigned __int16 *)(v20 + 16))
        {
          v55 = (v25 << v22) | ((-15 << v22) - 1) & v6;
          v56 = v20;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
LABEL_25:
          swift_unknownObjectRelease();
LABEL_31:
          swift_unknownObjectRelease_n();
          goto LABEL_38;
        }
        v46 = v17 + 24;
        v44 = v18;
        v49 = v7 + 24;
        v48 = v15;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
      }
      v26 = v19 + 1;
      if (v19 + 1 < (unint64_t)*(unsigned __int16 *)(v17 + 16))
      {
        v27 = (__int128 *)(v46 + 40 * v26);
        v29 = *v27;
        v28 = v27[1];
        v61 = *((_QWORD *)v27 + 4);
        v60[0] = v29;
        v60[1] = v28;
        v30 = *(unsigned __int8 *)(v29 + 18) + 1;
        if (((v30 >> 8) & 1) != 0)
          goto LABEL_50;
        v55 = ((-256 << (4 * (v30 & 0xF))) | 0xFF) & (v55 & ((-15 << v44) - 1) | (v26 << v44));
        v31 = v55;
        swift_unknownObjectRetain();
        v32 = sub_2382ED1C8(v31);
        sub_23825B804((uint64_t)v60);
        v56 = v32;
        swift_unknownObjectRelease();
        goto LABEL_31;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      if (v19 + 1 < (unint64_t)*(unsigned __int16 *)(v17 + 16))
      {
        v55 = ((v19 + 1) << v18) | ((-15 << v18) - 1) & v6;
        v56 = v17;
        swift_unknownObjectRetain();
        goto LABEL_31;
      }
      v49 = v7 + 24;
      v48 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
      swift_unknownObjectRetain();
    }
    v33 = v16 + 1;
    if (v16 + 1 >= (unint64_t)*(unsigned __int16 *)(v7 + 16))
    {
      swift_unknownObjectRelease();
      v24 = *(unsigned __int8 *)(v7 + 18);
LABEL_37:
      v40 = *(unsigned __int16 *)(v7 + 16);
      v41 = *(_BYTE *)(v7 + 18);
      swift_unknownObjectRelease();
      v54 = v5;
      v55 = ((-15 << ((4 * v41 + 8) & 0x3C)) - 1) & v24 | (unint64_t)(v40 << ((4 * v41 + 8) & 0x3C));
      v56 = 0;
      goto LABEL_38;
    }
    v34 = (__int128 *)(v49 + 40 * v33);
    v36 = *v34;
    v35 = v34[1];
    v59 = *((_QWORD *)v34 + 4);
    v58[0] = v36;
    v58[1] = v35;
    v37 = *(unsigned __int8 *)(v36 + 18) + 1;
    if (((v37 >> 8) & 1) != 0)
      goto LABEL_49;
    v55 = ((-256 << (4 * (v37 & 0xF))) | 0xFF) & (v55 & ((-15 << v48) - 1) | (v33 << v48));
    v38 = v55;
    swift_unknownObjectRetain();
    v39 = sub_2382ED1C8(v38);
    sub_23825B804((uint64_t)v58);
    v56 = v39;
    swift_unknownObjectRelease_n();
LABEL_38:
    if ((v9 & 0x1000000000000000) != 0)
    {
      v10 = sub_238266994();
      v43 = v42;
      swift_bridgeObjectRelease();
      v9 = v43;
      if ((v43 & 0x2000000000000000) == 0)
      {
LABEL_40:
        if ((v10 & 0x1000000000000000) == 0)
          sub_23835B634();
        goto LABEL_44;
      }
    }
    else if ((v9 & 0x2000000000000000) == 0)
    {
      goto LABEL_40;
    }
    v50[0] = v10;
    v50[1] = v9 & 0xFFFFFFFFFFFFFFLL;
LABEL_44:
    sub_23835B9F4();
    swift_bridgeObjectRelease();
    v4 = v56;
    if (!v56)
      goto LABEL_47;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  result = swift_bridgeObjectRetain();
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_238309870()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __int128 v12;
  __n128 v13[5];
  __int128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;

  sub_238263DDC((uint64_t)v0);
  sub_23830F850(v0, v13);
  v2 = *((_QWORD *)&v14 + 1);
  v1 = v14;
  v9 = v13[2];
  v10 = v13[3];
  v11 = v13[4];
  v12 = v14;
  v7 = v13[0];
  v8 = v13[1];
  if (((unint64_t)v14 ^ *((_QWORD *)&v14 + 1)) >= 0x4000)
  {
    do
    {
      v15 = v7;
      v16 = v8;
      v17 = v9;
      v18 = v10;
      v19 = v11;
      v20 = v1;
      v21 = v2;
      sub_23830EA80();
      v6 = sub_23830F018(v4, v5);
      if ((v6 & 1) == 0)
        *(_QWORD *)&v12 = *((_QWORD *)&v12 + 1);
      MEMORY[0x24BDAC7A8](v6);
      sub_23835AE00();
      swift_bridgeObjectRelease();
      v2 = *((_QWORD *)&v12 + 1);
      v1 = v12;
    }
    while ((*((_QWORD *)&v12 + 1) ^ (unint64_t)v12) >> 14);
  }
  sub_23835BA0C();
  return swift_unknownObjectRelease();
}

uint64_t BigString.hashValue.getter()
{
  sub_23835B9E8();
  sub_238309870();
  return sub_23835BA48();
}

uint64_t sub_2383099EC()
{
  sub_23835B9E8();
  sub_238309870();
  return sub_23835BA48();
}

uint64_t sub_238309A3C()
{
  return sub_238309870();
}

uint64_t sub_238309A74()
{
  sub_23835B9E8();
  sub_238309870();
  return sub_23835BA48();
}

uint64_t sub_238309AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a4;
  v5 = a3;
  swift_bridgeObjectRetain();
  if ((v4 & 0x1000000000000000) != 0)
  {
    sub_2382F977C();
    v5 = a3;
    v4 = a4;
  }
  if ((v4 & 0x2000000000000000) == 0 && (v5 & 0x1000000000000000) == 0)
    sub_23835B634();
  sub_23835B9F4();
  return swift_bridgeObjectRelease();
}

uint64_t BitArray._capacity.getter(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (!(v1 >> 58))
    return (32 * v1) & 0x7FFFFFFFFFFFFFC0;
  __break(1u);
  return result;
}

BOOL sub_238309BAC(_QWORD **a1, _QWORD **a2)
{
  return _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t Heap.description.getter()
{
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  _s19CollectionsInternal4HeapV5countSivg_0();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return 0x3C70616548;
}

uint64_t sub_238309CA8()
{
  return Heap.description.getter();
}

uint64_t sub_238309CBC(uint64_t a1)
{
  _QWORD *v1;

  return Heap.debugDescription.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t _HashNode.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL _HashNode.isCollisionNode.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v5;

  v5 = (_DWORD *)nullsub_1(a1 + 16, a1 + 32, a3, a4, a5);
  return (v5[1] & *v5) != 0;
}

uint64_t _HashNode.read<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = nullsub_1(a3 + 16, a3 + 32, a5, a6, a8);
  return a1(v9);
}

uint64_t _HashNode.hasSingletonItem.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_238309EA0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle.hasSingletonItem.getter);
}

uint64_t _HashNode.update<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;

  v5 = nullsub_1(*v3 + 16, *v3 + 32, a3[2], a3[3], a3[4]);
  return a1(v5);
}

uint64_t _HashNode.collisionHash.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  nullsub_1(a1 + 16, a1 + 32, a3, a4, a5);
  return *(_QWORD *)v5;
}

uint64_t _HashNode.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

BOOL _HashNode.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _HashNode.hasSingletonChild.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_238309EA0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle.hasSingletonChild.getter);
}

uint64_t _HashNode.raw.getter()
{
  return swift_retain();
}

uint64_t _HashNode.raw.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_HashNode.raw.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

_QWORD *(*_HashNode.count.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  return sub_2382F3E14;
}

uint64_t _HashNode.isAtrophied.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_238309EA0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle.isAtrophiedNode.getter);
}

uint64_t sub_238309EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;

  v6 = nullsub_1(a1 + 16, a1 + 32, a3, a4, a5);
  return a6(v6);
}

uint64_t type metadata accessor for _HashNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _HashNode);
}

uint64_t OrderedSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = sub_23830AA4C(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

{
  uint64_t v6;

  v6 = sub_23830AA4C(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = sub_23830AB44(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t sub_238309FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v10 < 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v11 = (unint64_t)(v10 + 63) >> 6;
  v14 = 0;
  v15 = 0;
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for OrderedSet(0, a6, a7, v12);
  sub_238329A40(v11, (void (*)(char **))sub_23830ACB4);
  if (!v7)
    goto LABEL_5;
LABEL_6:
  result = sub_238280D84(v14, v15);
  __break(1u);
  return result;
}

void sub_23830A0FC(uint64_t **a1@<X0>, int8x8_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, Swift::Int *a9@<X8>)
{
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  char v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  int8x8_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  int8x8_t *v45;
  uint8x8_t v46;
  BOOL v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  Swift::Int *v58;
  uint64_t **v59;
  Swift::Int *v60;
  char *v61;
  int8x8_t **v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  Swift::Int v66;
  Swift::Int v67;
  uint64_t v68;

  v60 = a9;
  v68 = a8;
  v64 = a5;
  v65 = a3;
  v13 = a1;
  v14 = *(_QWORD *)(a7 - 8);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v61 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v59 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v63 = (char *)&v59 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v59 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v59 - v25;
  v27 = _s19CollectionsInternal4HeapV5countSivg_0();
  if ((v27 & 0x8000000000000000) == 0)
  {
    v62 = a2;
    _UnsafeBitSet.insertAll(upTo:)(v27);
    v28 = *(_QWORD *)(a6 + 16);
    if (v28)
    {
      v59 = v13;
      swift_retain();
      swift_retain();
      for (i = 0; i != v28; ++i)
      {
        sub_23835B724();
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v24, v26, a7);
        v30 = OrderedSet._find(_:)();
        if ((v31 & 1) == 0 && (v30 & 0x8000000000000000) == 0 && (uint64_t)(v30 >> 6) < (uint64_t)v62[1])
          *(_QWORD *)&(*v62)[v30 >> 6] &= (-1 << v30) - 1;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v24, a7);
      }
      swift_release();
      swift_release();
      v13 = v59;
    }
    v32 = _s19CollectionsInternal4HeapV5countSivg_0();
    if ((v32 & 0x8000000000000000) != 0)
      goto LABEL_49;
    _UnsafeBitSet.insertAll(upTo:)(v32);
    v33 = *(_QWORD *)(a4 + 16);
    if (v33)
    {
      swift_retain();
      swift_retain();
      v34 = 0;
      v35 = v63;
      do
      {
        sub_23835B724();
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v35, a7);
        v36 = OrderedSet._find(_:)();
        if ((v37 & 1) == 0 && (v36 & 0x8000000000000000) == 0 && (uint64_t)(v36 >> 6) < (uint64_t)v13[1])
          (*v13)[v36 >> 6] &= (-1 << v36) - 1;
        ++v34;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, a7);
      }
      while (v33 != v34);
      swift_release();
      swift_release();
    }
    v39 = *v62;
    v38 = (uint64_t)v62[1];
    v40 = v13;
    v41 = *v13;
    v42 = (uint64_t)v40[1];
    v43 = 0;
    if (!v41 || !v42)
    {
LABEL_24:
      v48 = v65;
      swift_retain();
      swift_retain();
      v66 = OrderedSet._extractSubset(using:count:extraCapacity:)(v39, v38, 0, 1, v43, v48, a4, a7, v68);
      v67 = v49;
      if (v42 <= 0)
        v50 = 0;
      else
        v50 = *v41;
      v51 = 0;
      for (j = (uint64_t)v61; ; (*(void (**)(uint64_t, uint64_t))(v14 + 8))(j, a7))
      {
        if (v50)
        {
          if (v51 << 6 < 0)
            goto LABEL_45;
          v50 &= v50 - 1;
        }
        else
        {
          v55 = v51 + 1;
          if (__OFADD__(v51, 1))
            goto LABEL_46;
          if (v55 >= v42)
          {
LABEL_42:
            v57 = v67;
            v58 = v60;
            *v60 = v66;
            v58[1] = v57;
            return;
          }
          v56 = v41[v55];
          if (!v56)
          {
            while (1)
            {
              v51 = v55 + 1;
              if (__OFADD__(v55, 1))
                break;
              if (v51 >= v42)
                goto LABEL_42;
              v56 = v41[v51];
              ++v55;
              if (v56)
                goto LABEL_29;
            }
            __break(1u);
            goto LABEL_44;
          }
          ++v51;
LABEL_29:
          if (v51 << 6 < 0)
            goto LABEL_47;
          v50 = (v56 - 1) & v56;
        }
        sub_23835B724();
        v54 = type metadata accessor for OrderedSet(0, a7, v68, v53);
        OrderedSet._appendNew(_:)(j, v54);
      }
    }
    v44 = 8 * v42;
    v45 = (int8x8_t *)v41;
    while (1)
    {
      v46 = (uint8x8_t)vcnt_s8(*v45);
      v46.i16[0] = vaddlv_u8(v46);
      v47 = __OFADD__(v43, v46.u32[0]);
      v43 += v46.u32[0];
      if (v47)
        break;
      ++v45;
      v44 -= 8;
      if (!v44)
        goto LABEL_24;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
LABEL_49:
  __break(1u);
}

Swift::UInt sub_23830A5F4@<X0>(int8x8_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, Swift::Int *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  Swift::UInt result;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  Swift::Int v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  Swift::Int *v50;
  uint64_t v51;
  Swift::Int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  int8x8_t **v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t *AssociatedTypeWitness;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v52 = a9;
  v66 = a7;
  v54 = a4;
  v59 = a2;
  v57 = a1;
  v13 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v51 - v17;
  v19 = sub_23835B334();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v51 - v21;
  v53 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a8;
  v55 = a6;
  AssociatedTypeWitness = (int8x8_t *)swift_getAssociatedTypeWitness();
  v56 = AssociatedTypeWitness[-1];
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v26 = (char *)&v51 - v25;
  v64 = OrderedSet.init()();
  v65 = v27;
  v60 = a3;
  result = _s19CollectionsInternal4HeapV5countSivg_0();
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  _UnsafeBitSet.insertAll(upTo:)(result);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v24, v54, v55);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  v58 = v26;
  sub_23835B484();
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v29(v22, 1, a5) != 1)
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v45(v16, v22, a5);
    while (1)
    {
      v46 = v66;
      v47 = OrderedSet._find(_:)();
      if ((v49 & 1) != 0)
      {
        type metadata accessor for OrderedSet(0, a5, v46, v48);
        OrderedSet._append(_:)((uint64_t)v16);
      }
      else if ((v47 & 0x8000000000000000) == 0 && (uint64_t)(v47 >> 6) < (uint64_t)v57[1])
      {
        *(_QWORD *)&(*v57)[v47 >> 6] &= (-1 << v47) - 1;
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, a5);
      sub_23835B484();
      if (v29(v22, 1, a5) == 1)
        break;
      v45(v16, v22, a5);
    }
  }
  (*(void (**)(char *, int8x8_t *))(*(_QWORD *)&v56 + 8))(v58, AssociatedTypeWitness);
  v30 = (uint64_t)v57[1];
  AssociatedTypeWitness = *v57;
  v31 = v65;
  swift_retain();
  swift_retain();
  v32 = v59;
  swift_retain();
  v33 = v60;
  swift_retain();
  v34 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  swift_release();
  v35 = OrderedSet._extractSubset(using:count:extraCapacity:)(AssociatedTypeWitness, v30, 0, 1, v34, v32, v33, a5, v66);
  v62 = v35;
  v63 = v36;
  v37 = *(_QWORD *)(v31 + 16);
  if (v37)
  {
    v38 = v31 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    result = swift_retain();
    v39 = 0;
    v40 = v66;
    while (v39 < *(_QWORD *)(v31 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v18, v38 + *(_QWORD *)(v13 + 72) * v39++, a5);
      v42 = type metadata accessor for OrderedSet(0, a5, v40, v41);
      OrderedSet._appendNew(_:)((uint64_t)v18, v42);
      result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, a5);
      if (v37 == v39)
      {
        swift_release();
        v43 = v62;
        v44 = v63;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  v43 = v35;
  v44 = v36;
LABEL_17:
  swift_release();
  result = swift_release();
  v50 = v52;
  *v52 = v43;
  v50[1] = v44;
  return result;
}

uint64_t sub_23830AA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = (unint64_t)(v8 + 63) >> 6;
    v12 = 0;
    v13 = 0;
    MEMORY[0x24BDAC7A8](v8);
    type metadata accessor for OrderedSet(0, a5, a6, v10);
    sub_238329A40(v9, (void (*)(char **))sub_23830ACB4);
  }
  __break(1u);
  result = sub_238280D84(v12, v13);
  __break(1u);
  return result;
}

uint64_t sub_23830AB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = (unint64_t)(v8 + 63) >> 6;
    v12 = 0;
    v13 = 0;
    MEMORY[0x24BDAC7A8](v8);
    type metadata accessor for OrderedSet(0, a4, a6, v10);
    sub_238329A40(v9, (void (*)(char **))sub_238280D68);
  }
  __break(1u);
  result = sub_238280D84(v12, v13);
  __break(1u);
  return result;
}

Swift::UInt sub_23830AC4C@<X0>(int8x8_t **a1@<X0>, Swift::Int *a2@<X8>)
{
  uint64_t v2;

  return sub_23830A5F4(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(char **)(v2 + 40), a2);
}

uint64_t sub_23830AC70(uint64_t a1)
{
  uint64_t *v1;

  return sub_238309FE0(a1, v1[4], v1[5], v1[6], v1[7], v1[2], v1[3]);
}

void sub_23830AC90(uint64_t **a1@<X0>, Swift::Int *a2@<X8>)
{
  uint64_t v2;

  sub_23830A0FC(a1, *(int8x8_t ***)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23830ACB4(uint64_t a1)
{
  return sub_238280D68(a1);
}

uint64_t *sub_23830ACC8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = 0;
  if (result)
    v4 = &result[a2];
  else
    v4 = 0;
  v5 = *(_QWORD *)(a3 + 16);
  while (1)
  {
    if (v3 == v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a3 + 16);
      if (!result)
        goto LABEL_13;
      goto LABEL_10;
    }
    if (v3 >= v5)
      break;
    v6 = *(_QWORD *)(a3 + 32 + 8 * v3);
    v7 = v3 + 1;
    if (!result)
      goto LABEL_13;
LABEL_10:
    if (result == v4)
    {
LABEL_13:
      v9 = 0;
      v8 = 1;
      if (v3 == v5)
        return (uint64_t *)v8;
      goto LABEL_14;
    }
    v8 = 0;
    v10 = *result++;
    v9 = v10;
    if (v3 == v5)
      return (uint64_t *)v8;
LABEL_14:
    if (v6 != v9)
      LODWORD(v8) = 1;
    v3 = v7;
    if ((_DWORD)v8 == 1)
      return 0;
  }
  __break(1u);
  return result;
}

__n128 BigString.UTF8View.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  _BYTE v16[40];

  v11 = *v1;
  v12 = v1[2];
  v3 = *((_QWORD *)v1 + 4);
  v4 = *((_QWORD *)v1 + 5);
  v14 = (__n128)v1[1];
  v10 = v14;
  v15 = v12;
  v13 = v11;
  sub_238263E74((uint64_t)&v13, (uint64_t)v16);
  sub_238263DDC((uint64_t)v16);
  v5 = sub_2382685C4(0x300uLL, 0, 0, 1);
  result = v10;
  *(_OWORD *)a1 = v11;
  *(__n128 *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  return result;
}

uint64_t sub_23830ADF0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[40];

  v5 = a3;
  v6 = a2[6];
  v7 = *a2;
  v8 = a2[4];
  if (*a2)
    v9 = 2 * (v8 & 0x1FFFFFFFFFFFFFuLL) > v6 >> 10;
  else
    v9 = 0;
  if (!v9)
  {
    result = sub_23830B054(0, a3, 0, 0);
    v5 = 0;
    if (!result)
      return (uint64_t)v5;
    __break(1u);
  }
  v10 = a2;
  v11 = a2[9];
  if (v11 == 1)
    goto LABEL_32;
  v12 = *(_OWORD *)(a2 + 1);
  v13 = a2[3];
  v14 = a2[7];
  v15 = a2[8];
  v30 = v6 >> 11;
  v31 = v6;
  if (v14 != a2[5])
  {
    __break(1u);
    goto LABEL_28;
  }
  v4 = result;
  if (v11)
  {
    v16 = v11 + 24 * ((v15 >> ((4 * *(_BYTE *)(v11 + 18) + 8) & 0x3C)) & 0xF);
    v3 = *(_QWORD *)(v16 + 24);
    v7 = *(_QWORD *)(v16 + 32);
    swift_bridgeObjectRetain();
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else
  {
    v33 = v7;
    v34 = v12;
    v35 = v13;
    v36 = v8;
    swift_unknownObjectRetain();
    sub_238261C98(v15, (uint64_t)v32);
    swift_unknownObjectRelease();
    v7 = *((_QWORD *)&v32[0] + 1);
    v3 = *(_QWORD *)&v32[0];
    if ((*((_QWORD *)&v32[0] + 1) & 0x1000000000000000) == 0)
    {
LABEL_11:
      if ((v7 & 0x2000000000000000) == 0)
        goto LABEL_12;
LABEL_16:
      v18 = HIBYTE(v7) & 0xF;
      *(_QWORD *)&v32[0] = v3;
      *((_QWORD *)&v32[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      v17 = v32;
      goto LABEL_17;
    }
  }
  v3 = sub_238266994();
  v20 = v19;
  swift_bridgeObjectRelease();
  v7 = v20;
  if ((v20 & 0x2000000000000000) != 0)
    goto LABEL_16;
LABEL_12:
  if ((v3 & 0x1000000000000000) == 0)
  {
LABEL_28:
    v17 = (_OWORD *)sub_23835B634();
    goto LABEL_17;
  }
  v17 = (_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v18 = v3 & 0xFFFFFFFFFFFFLL;
LABEL_17:
  v21 = sub_23830BD34((uint64_t)v17, v18, &v31, v4, &v30, v5);
  v5 = v22;
  if ((v21 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v23 = v31 | (v30 << 11);
LABEL_25:
    v10[6] = v23;
    v10[7] = v14;
    v10[8] = v15;
    v10[9] = v11;
    return (uint64_t)v5;
  }
  v24 = ((unint64_t)v10[6] >> 11) - v10[6];
  if ((v7 & 0x1000000000000000) != 0)
  {
    result = sub_23835AEA8();
    v25 = __OFADD__(v24, result);
    v26 = v24 + result;
    if (!v25)
    {
LABEL_24:
      v27 = *((_OWORD *)v10 + 1);
      v32[0] = *(_OWORD *)v10;
      v32[1] = v27;
      v32[2] = *((_OWORD *)v10 + 2);
      sub_238263E74((uint64_t)v32, (uint64_t)v37);
      sub_238263DDC((uint64_t)v37);
      v14 = sub_2382A5854(v14, v15, v11);
      v15 = v28;
      v11 = v29;
      sub_23825B804((uint64_t)v32);
      swift_bridgeObjectRelease();
      v23 = v26 << 11;
      goto LABEL_25;
    }
  }
  else
  {
    if ((v7 & 0x2000000000000000) != 0)
      result = HIBYTE(v7) & 0xF;
    else
      result = v3 & 0xFFFFFFFFFFFFLL;
    v25 = __OFADD__(v24, result);
    v26 = v24 + result;
    if (!v25)
      goto LABEL_24;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23830B054(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[48];

  v8 = 0;
  v9 = a2[6];
  v10 = *a2;
  v11 = a2[4];
  if (*a2)
    v12 = 2 * (v11 & 0x1FFFFFFFFFFFFFuLL) > v9 >> 10;
  else
    v12 = 0;
  if (!v12)
    return v8;
  v14 = a2[9];
  if (v14 == 1)
    goto LABEL_31;
  v15 = *(_OWORD *)(a2 + 1);
  v16 = a2[3];
  v17 = a2[7];
  v18 = a2[8];
  v33 = v9 >> 11;
  v34 = v9;
  if (v17 != a2[5])
  {
    __break(1u);
    goto LABEL_27;
  }
  v5 = a4;
  v6 = a3;
  v7 = result;
  if (v14)
  {
    v19 = v14 + 24 * ((v18 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    v4 = *(_QWORD *)(v19 + 24);
    v10 = *(_QWORD *)(v19 + 32);
    swift_bridgeObjectRetain();
    if ((v10 & 0x1000000000000000) == 0)
      goto LABEL_10;
  }
  else
  {
    v36 = v10;
    v37 = v15;
    v38 = v16;
    v39 = v11;
    swift_unknownObjectRetain();
    sub_238261C98(v18, (uint64_t)v35);
    swift_unknownObjectRelease();
    v10 = *((_QWORD *)&v35[0] + 1);
    v4 = *(_QWORD *)&v35[0];
    if ((*((_QWORD *)&v35[0] + 1) & 0x1000000000000000) == 0)
    {
LABEL_10:
      if ((v10 & 0x2000000000000000) == 0)
        goto LABEL_11;
LABEL_15:
      v21 = HIBYTE(v10) & 0xF;
      *(_QWORD *)&v35[0] = v4;
      *((_QWORD *)&v35[0] + 1) = v10 & 0xFFFFFFFFFFFFFFLL;
      v20 = v35;
      goto LABEL_16;
    }
  }
  v4 = sub_238266994();
  v23 = v22;
  swift_bridgeObjectRelease();
  v10 = v23;
  if ((v23 & 0x2000000000000000) != 0)
    goto LABEL_15;
LABEL_11:
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_27:
    v20 = (_OWORD *)sub_23835B634();
    goto LABEL_16;
  }
  v20 = (_OWORD *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v21 = v4 & 0xFFFFFFFFFFFFLL;
LABEL_16:
  v24 = sub_23830BE10((_BOOL8)v20, v21, &v34, v7, &v33, v6, v5);
  v8 = v25;
  if (v24)
  {
    swift_bridgeObjectRelease();
    v26 = v34 | (v33 << 11);
LABEL_24:
    a2[6] = v26;
    a2[7] = v17;
    a2[8] = v18;
    a2[9] = v14;
    return v8;
  }
  v27 = ((unint64_t)a2[6] >> 11) - a2[6];
  if ((v10 & 0x1000000000000000) != 0)
  {
    result = sub_23835AEA8();
    v28 = __OFADD__(v27, result);
    v29 = v27 + result;
    if (!v28)
    {
LABEL_23:
      v30 = *((_OWORD *)a2 + 1);
      v35[0] = *(_OWORD *)a2;
      v35[1] = v30;
      v35[2] = *((_OWORD *)a2 + 2);
      sub_238263E74((uint64_t)v35, (uint64_t)v40);
      sub_238263DDC((uint64_t)v40);
      v17 = sub_2382A5854(v17, v18, v14);
      v18 = v31;
      v14 = v32;
      sub_23825B804((uint64_t)v35);
      swift_bridgeObjectRelease();
      v26 = v29 << 11;
      goto LABEL_24;
    }
  }
  else
  {
    if ((v10 & 0x2000000000000000) != 0)
      result = HIBYTE(v10) & 0xF;
    else
      result = v4 & 0xFFFFFFFFFFFFLL;
    v28 = __OFADD__(v27, result);
    v29 = v27 + result;
    if (!v28)
      goto LABEL_23;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t BigString.UTF8View.Iterator.next<A>(maximumCount:with:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(unint64_t, char *, uint64_t);
  uint64_t (*v34)(_QWORD, _QWORD, _QWORD);
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD v53[3];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[48];

  v6 = v5;
  v48 = a3;
  v47 = a2;
  v44 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (unint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v42 - v14);
  v16 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (unsigned __int8 *)&v42 - v18;
  v46 = *(_QWORD *)(a4 - 8);
  result = MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6
    || (v23 = *(_QWORD *)(v6 + 48), v24 = *(_QWORD *)(v6 + 32), 2 * (v24 & 0x1FFFFFFFFFFFFFuLL) <= v23 >> 10))
  {
    v6 = a5;
    v30 = (char *)v15 + *(int *)(TupleTypeMetadata2 + 48);
    a5 = v47(v30, 0, 0);
    *v15 = a5;
    v31 = v13 + *(int *)(TupleTypeMetadata2 + 48);
    *(_QWORD *)v13 = a5;
    v16 = v46;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 16))(v31, v30, a4);
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v13, TupleTypeMetadata2);
    if (!a5)
    {
      v32 = v13 + *(int *)(TupleTypeMetadata2 + 48);
      v33 = *(void (**)(unint64_t, char *, uint64_t))(v16 + 32);
      v33(v32, v30, a4);
      return ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v33)(v6, v32, a4);
    }
    goto LABEL_22;
  }
  TupleTypeMetadata2 = *(_QWORD *)(v6 + 72);
  if (TupleTypeMetadata2 == 1)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v25 = *(_OWORD *)(v6 + 8);
  v26 = *(_QWORD *)(v6 + 24);
  v27 = *(_QWORD **)(v6 + 56);
  v13 = *(_QWORD *)(v6 + 64);
  v51 = v23 >> 11;
  v52 = v23;
  if (v27 != *(_QWORD **)(v6 + 40))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = v27;
  v43 = a5;
  if (TupleTypeMetadata2)
  {
    v28 = *(_QWORD *)(TupleTypeMetadata2
                    + 24 * ((v13 >> ((4 * *(_BYTE *)(TupleTypeMetadata2 + 18) + 8) & 0x3C)) & 0xF)
                    + 24);
    v29 = swift_bridgeObjectRetain();
  }
  else
  {
    v54 = v22;
    v55 = v25;
    v56 = v26;
    v57 = v24;
    swift_unknownObjectRetain();
    sub_238261C98(v13, (uint64_t)v53);
    swift_unknownObjectRelease();
    v29 = *((_QWORD *)&v53[0] + 1);
    v28 = *(_QWORD *)&v53[0];
  }
  v49 = v28;
  v50 = v29;
  MEMORY[0x24BDAC7A8](v29);
  *(&v42 - 6) = a4;
  *(&v42 - 5) = (uint64_t)&v52;
  v34 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v47;
  *(&v42 - 4) = v44;
  *(&v42 - 3) = (uint64_t)v34;
  *(&v42 - 2) = v48;
  *(&v42 - 1) = (uint64_t)&v51;
  sub_23830B6D0((uint64_t (*)(_QWORD *, uint64_t))sub_23830C694);
  v35 = *v19;
  v36 = &v19[*(int *)(v16 + 48)];
  v16 = *(_QWORD *)(v46 + 32);
  v19 = (unsigned __int8 *)v45;
  ((void (*)(char *, unsigned __int8 *, uint64_t))v16)(v45, v36, a4);
  if (v35 != 1)
  {
    a5 = (*(_QWORD *)(v6 + 48) >> 11) - *(_QWORD *)(v6 + 48);
    if ((v50 & 0x1000000000000000) == 0)
    {
      if ((v50 & 0x2000000000000000) != 0)
      {
        result = HIBYTE(v50) & 0xF;
        v38 = a5 + result;
        if (!__OFADD__(a5, result))
        {
LABEL_18:
          v39 = *(_OWORD *)(v6 + 16);
          v53[0] = *(_OWORD *)v6;
          v53[1] = v39;
          v53[2] = *(_OWORD *)(v6 + 32);
          sub_238263E74((uint64_t)v53, (uint64_t)v58);
          sub_238263DDC((uint64_t)v58);
          v15 = (_QWORD *)sub_2382A5854((uint64_t)v15, v13, TupleTypeMetadata2);
          v13 = v40;
          TupleTypeMetadata2 = v41;
          sub_23825B804((uint64_t)v53);
          v37 = v38 << 11;
          goto LABEL_19;
        }
      }
      else
      {
        result = v49 & 0xFFFFFFFFFFFFLL;
        v38 = a5 + (v49 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(a5, v49 & 0xFFFFFFFFFFFFLL))
          goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    result = sub_23835AEA8();
    v38 = a5 + result;
    if (!__OFADD__(a5, result))
      goto LABEL_18;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v37 = v52 | (v51 << 11);
LABEL_19:
  *(_QWORD *)(v6 + 48) = v37;
  *(_QWORD *)(v6 + 56) = v15;
  *(_QWORD *)(v6 + 64) = v13;
  *(_QWORD *)(v6 + 72) = TupleTypeMetadata2;
  ((void (*)(uint64_t, unsigned __int8 *, uint64_t))v16)(v43, v19, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23830B6D0(uint64_t (*a1)(_QWORD *, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = *v1;
  v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v10;
    return a1(v5, v6);
  }
  v3 = sub_238266994();
  v8 = v7;
  swift_bridgeObjectRelease();
  *v1 = v3;
  v1[1] = v8;
  v4 = v8;
  if ((v8 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = (_QWORD *)sub_23835B634();
  }
  return a1(v5, v6);
}

uint64_t static BigString.UTF8View.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  _OWORD v6[3];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = a1[2];
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return sub_23830209C(v6, v5) & 1;
}

BOOL BigString.UTF8View.isIdentical(to:)(_OWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _OWORD v8[6];

  v2 = (uint64_t)v1;
  v4 = v1[1];
  v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  v8[2] = a1[2];
  sub_238263DDC((uint64_t)v1);
  sub_238263DDC((uint64_t)a1);
  v6 = sub_238263BF8((uint64_t)v8);
  sub_23825B804((uint64_t)a1);
  sub_23825B804(v2);
  return v6;
}

uint64_t BigString.UTF8View.hash(into:)()
{
  return sub_23830922C();
}

uint64_t BigString.UTF8View.hashValue.getter()
{
  sub_23835B9E8();
  sub_23830922C();
  return sub_23835BA48();
}

uint64_t BigString.UTF8View.startIndex.getter()
{
  return 768;
}

__n128 sub_23830B90C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  __int128 v16;
  _OWORD v17[3];
  _OWORD v18[3];
  _BYTE v19[40];

  v3 = *(__n128 *)(v1 + 16);
  v17[0] = *(_OWORD *)v1;
  v16 = v17[0];
  v4 = *(_OWORD *)(v1 + 32);
  v15 = v3;
  v17[1] = v3;
  v17[2] = v4;
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v18[1] = v3;
  v18[2] = v4;
  v18[0] = v17[0];
  sub_238263E74((uint64_t)v18, (uint64_t)v19);
  sub_238263DDC((uint64_t)v19);
  v7 = sub_2382685C4(0x300uLL, 0, 0, 1);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_23825B804((uint64_t)v17);
  result = v15;
  *(_OWORD *)a1 = v16;
  *(__n128 *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  return result;
}

uint64_t sub_23830B9C8()
{
  _QWORD *v0;

  if (*v0)
    return v0[4];
  else
    return 0;
}

uint64_t sub_23830B9DC()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  v2 = sub_23833AF1C(v4);
  sub_23825B804((uint64_t)v4);
  return v2;
}

uint64_t sub_23830BA24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23833BA2C(a1, a2, a3);
}

Swift::UInt8_optional __swiftcall BigString.UTF8View.Iterator.next()()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  __int16 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[40];

  v7 = *(_QWORD *)v0;
  v8 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)v0)
    v9 = 2 * (v8 & 0x1FFFFFFFFFFFFFuLL) > *(_QWORD *)(v0 + 48) >> 10;
  else
    v9 = 0;
  v10 = !v9;
  if (v9)
  {
    v11 = v0;
    v12 = *(_QWORD *)(v0 + 72);
    if (v12 == 1)
    {
      __break(1u);
      goto LABEL_41;
    }
    v1 = *(_QWORD *)(v0 + 56);
    if (v1 == *(_QWORD *)(v0 + 40))
    {
      v26 = v10;
      v2 = *(_QWORD *)(v0 + 64);
      v5 = *(_QWORD *)(v0 + 48);
      v3 = (16 * *(_QWORD *)(v0 + 48)) & 0x4000 | (*(_QWORD *)(v0 + 48) >> 8) & 3 | ((unint64_t)v5 << 16) | 4;
      if (v12)
      {
        v13 = v12 + 24 * ((v2 >> ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) & 0xF);
        v4 = *(_QWORD *)(v13 + 24);
        v0 = *(_QWORD *)(v13 + 32);
        v25 = *(unsigned __int8 *)(v13 + 40);
        swift_bridgeObjectRetain();
        v14 = v3;
        if ((v0 & 0x1000000000000000) == 0)
        {
LABEL_16:
          if ((v0 & 0x2000000000000000) != 0)
            v6 = HIBYTE(v0) & 0xF;
          else
            v6 = v4 & 0xFFFFFFFFFFFFLL;
          v7 = v14 >> 16;
          if (v14 >> 16 >= v6)
          {
            __break(1u);
          }
          else if ((v0 & 0x1000000000000000) == 0)
          {
            if ((v0 & 0x2000000000000000) != 0)
            {
              *(_QWORD *)&v27 = v4;
              *((_QWORD *)&v27 + 1) = v0 & 0xFFFFFFFFFFFFFFLL;
              LOBYTE(v7) = *((_BYTE *)&v27 + v7);
            }
            else if ((v4 & 0x1000000000000000) != 0)
            {
              LOBYTE(v7) = *(_BYTE *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v14 >> 16));
            }
            else
            {
              LOBYTE(v7) = *(_BYTE *)(sub_23835B634() + v7);
            }
            swift_bridgeObjectRelease();
            v17 = ((unint64_t)v5 << 16) + 65540;
            goto LABEL_26;
          }
          LOWORD(v24) = sub_23835AEE4();
          LOBYTE(v7) = v24;
          if ((v4 & 0x800000000000000) != 0)
          {
            if (v6 > v3 >> 16)
            {
LABEL_38:
              v17 = sub_23835AEB4();
              swift_bridgeObjectRelease();
LABEL_26:
              v18 = *(_QWORD *)(v11 + 48);
              if (v17 >> 14 >= 4 * v6)
              {
                v21 = *(_OWORD *)(v11 + 16);
                v27 = *(_OWORD *)v11;
                v28 = v21;
                v29 = *(_OWORD *)(v11 + 32);
                sub_238263E74((uint64_t)&v27, (uint64_t)v34);
                sub_238263DDC((uint64_t)v34);
                v1 = sub_2382A5854(v1, v2, v12);
                v2 = v22;
                v12 = v23;
                sub_23825B804((uint64_t)&v27);
                v20 = (v18 + ((v25 - (unint64_t)v18) << 11)) & 0xFFFFFFFFFFFFF800;
              }
              else
              {
                v19 = (v18 + (((v17 >> 16) - v18) << 11)) & 0xFFFFFFFFFFFFF800;
                if ((v17 & 0xC000) != 0)
                  v19 |= 0x400uLL;
                v20 = v19 & 0xFFFFFFFFFFFFFF00 | BYTE2(v17);
              }
              v10 = v26;
              *(_QWORD *)(v11 + 48) = v20;
              *(_QWORD *)(v11 + 56) = v1;
              *(_QWORD *)(v11 + 64) = v2;
              *(_QWORD *)(v11 + 72) = v12;
              goto LABEL_32;
            }
LABEL_42:
            __break(1u);
            return (Swift::UInt8_optional)v24;
          }
LABEL_41:
          v24 = sub_2382A6050(v3, v4, v0);
          if (v6 > v24 >> 16)
            goto LABEL_38;
          goto LABEL_42;
        }
      }
      else
      {
        v15 = *(_OWORD *)(v0 + 8);
        v16 = *(_QWORD *)(v0 + 24);
        v30 = *(_QWORD *)v0;
        v31 = v15;
        v32 = v16;
        v33 = v8;
        swift_unknownObjectRetain();
        sub_238261C98(v2, (uint64_t)&v27);
        swift_unknownObjectRelease();
        v0 = *((_QWORD *)&v27 + 1);
        v4 = v27;
        v25 = v28;
        v14 = v3;
        if ((*((_QWORD *)&v27 + 1) & 0x1000000000000000) == 0)
          goto LABEL_16;
      }
      v14 = v3;
      if ((v4 & 0x800000000000000) != 0)
        goto LABEL_16;
    }
    else
    {
      __break(1u);
    }
    v14 = sub_2382A6050(v3, v4, v0);
    goto LABEL_16;
  }
  LOBYTE(v7) = 0;
LABEL_32:
  LOWORD(v24) = v7 | (unsigned __int16)(v10 << 8);
  return (Swift::UInt8_optional)v24;
}

uint64_t sub_23830BD34(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a3;
  if (a2 < *a3)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a4 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!a4 || a2 - v6 < 0 || (v10 = a2, a2 - v6 >= a4))
    v10 = v6 + a4;
  v11 = v10 - v6;
  if (v10 < v6)
    goto LABEL_18;
  v12 = result + v6;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  result = sub_23830B054(v11, a6, v13, v11);
  if (result < 0 || v11 < result)
    goto LABEL_19;
  if (__OFADD__(*a5, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *a5 += result;
  v14 = *a3 + result;
  if (!__OFADD__(*a3, result))
  {
    *a3 = v14;
    return v14 < a2;
  }
LABEL_21:
  __break(1u);
  return result;
}

BOOL sub_23830BE10(_BOOL8 result, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *a3;
  if (a2 < *a3)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (a4 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (!a4 || a2 - v7 < 0 || (v8 = a2, a2 - v7 >= a4))
    v8 = v7 + a4;
  v9 = v8 < v7;
  v10 = v8 - v7;
  if (v9)
    goto LABEL_43;
  v11 = (unsigned __int8 *)(result + v7);
  if (result)
    v12 = v11;
  else
    v12 = 0;
  v13 = v10;
  if (v10 < 1)
  {
    if (a7 > 0)
      goto LABEL_19;
    v14 = v10 < a7;
  }
  else
  {
    if (a7 < 0)
      goto LABEL_20;
    v14 = v10 > (unint64_t)a7;
  }
  if (v14)
    v13 = a7;
  else
    v13 = v10;
LABEL_19:
  if (v13 < 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_20:
  v15 = 0;
  if (v12)
    v16 = &v12[v10];
  else
    v16 = 0;
  while (v12 && v12 != v16)
  {
    v17 = 0;
    v19 = *v12++;
    v18 = v19;
    if (v15 == v13)
      goto LABEL_29;
LABEL_26:
    v20 = *(unsigned __int8 *)(a6 + v15);
    v21 = v15 + 1;
    if ((v17 & 1) != 0)
      goto LABEL_33;
LABEL_30:
    v22 = 0;
    if (v15 != v13)
    {
      v15 = v21;
      if (v18 == v20)
        continue;
    }
    goto LABEL_36;
  }
  v18 = 0;
  v17 = 1;
  if (v15 != v13)
    goto LABEL_26;
LABEL_29:
  v20 = 0;
  v21 = v13;
  if ((v17 & 1) == 0)
    goto LABEL_30;
LABEL_33:
  if (v15 == v13)
    v22 = v10;
  else
    v22 = 0;
LABEL_36:
  if (v22 < 0 || v10 < v22)
    goto LABEL_45;
  if (__OFADD__(*a5, v22))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  *a5 += v22;
  v23 = *a3 + v22;
  if (!__OFADD__(*a3, v22))
  {
    *a3 = v23;
    return v23 < a2;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_23830BF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X6>, uint64_t a5@<X7>, BOOL *a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL *v25;
  uint64_t v26;

  v11 = *(_QWORD *)(a5 - 8);
  result = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v17;
  if (v19 < *v17)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v13 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v13 || a2 - v18 < 0 || (v20 = a2, a2 - v18 >= v13))
    v20 = v18 + v13;
  v21 = v20 - v18;
  if (v20 < v18)
    goto LABEL_18;
  v22 = result + v18;
  if (result)
    v23 = v22;
  else
    v23 = 0;
  result = v14(v16, v23, v21);
  if (result < 0 || v21 < result)
    goto LABEL_19;
  if (__OFADD__(*a4, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *a4 += result;
  v24 = *a3 + result;
  if (!__OFADD__(*a3, result))
  {
    *a3 = v24;
    v25 = &a6[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    *a6 = v24 < a2;
    return (*(uint64_t (**)(BOOL *, char *, uint64_t))(v11 + 32))(v25, v16, a5);
  }
LABEL_21:
  __break(1u);
  return result;
}

Swift::UInt8_optional sub_23830C0B4@<W0>(Swift::UInt8 *a1@<X8>)
{
  Swift::UInt8_optional result;

  result = BigString.UTF8View.Iterator.next()();
  *a1 = result.value;
  a1[1] = result.is_nil;
  return result;
}

uint64_t BigString.UTF8View.endIndex.getter()
{
  _QWORD *v0;

  if (*v0)
    return (v0[4] << 11) | 0x300;
  else
    return 768;
}

uint64_t BigString.UTF8View.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_238267FAC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))sub_2383358DC, a6);
}

uint64_t BigString.UTF8View.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_238267FAC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))sub_238335B14, a6);
}

unint64_t BigString.UTF8View.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_238278978(a1, a2, a3, a4, a6, a7, a8, a9) <= a5)
      return sub_23825EDD4(a1, a2, a3, a4, a5);
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_238278978(a1, a2, a3, a4, a6, a7, a8, a9) < a5)
    return 0;
  return sub_23825EDD4(a1, a2, a3, a4, a5);
}

unint64_t BigString.UTF8View.distance(from:to:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return (a5 >> 11) - (a1 >> 11);
}

unint64_t BigString.UTF8View.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_238335E58(a1, a2, a3, a4);
}

__n128 BigString.UTF8View.subscript.getter@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  _BYTE v27[40];

  v23 = *(__n128 *)(v2 + 16);
  v25 = *(_OWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v26[0] = *(_OWORD *)v2;
  v24 = v26[0];
  v26[1] = v23;
  v26[2] = v25;
  sub_238263E74((uint64_t)v26, (uint64_t)v27);
  sub_238263DDC((uint64_t)v27);
  v11 = sub_2382685C4(v7, v8, v9, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = sub_2382685C4(a1[4], a1[5], a1[6], a1[7]);
  result = v23;
  *(_OWORD *)a2 = v24;
  *(__n128 *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 72) = v17;
  *(_QWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v22;
  return result;
}

uint64_t sub_23830C34C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23830C590(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_238335B14, a2);
}

uint64_t sub_23830C358(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_23830C5F0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238335B14);
}

uint64_t sub_23830C36C(_QWORD *a1, _QWORD *a2)
{
  return (*a2 >> 11) - (*a1 >> 11);
}

void (*sub_23830C380(_QWORD *a1, unint64_t *a2))(void **a1)
{
  _OWORD *v2;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = malloc(0x31uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v2[1];
  *v5 = *v2;
  v5[1] = v10;
  v5[2] = v2[2];
  *((_BYTE *)v5 + 48) = sub_238335E58(v6, v7, v8, v9);
  return sub_2382A5D44;
}

__n128 sub_23830C3E8@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[3];
  _BYTE v32[48];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[6];
  v29 = a1[5];
  v30 = a1[4];
  v9 = a1[7];
  v10 = v2[1];
  v31[0] = *v2;
  v11 = *v2;
  v12 = v2[2];
  v31[1] = v10;
  v31[2] = v12;
  v27 = (__n128)v2[1];
  v28 = v11;
  v13 = *((_QWORD *)v2 + 4);
  v14 = *((_QWORD *)v2 + 5);
  sub_238263E74((uint64_t)v31, (uint64_t)v32);
  sub_238263DDC((uint64_t)v32);
  v15 = sub_2382685C4(v4, v5, v6, v7);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = sub_2382685C4(v30, v29, v8, v9);
  result = v27;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v24;
  *(_QWORD *)(a2 + 96) = v25;
  *(_QWORD *)(a2 + 104) = v26;
  return result;
}

unint64_t sub_23830C4E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = sub_23825EDD4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_23830C534@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = BigString.UTF8View.index(_:offsetBy:limitedBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t sub_23830C584@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23830C590(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2383358DC, a2);
}

uint64_t sub_23830C590@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a2(*a1, a1[1], a1[2], a1[3]);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

uint64_t sub_23830C5E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_23830C5F0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2383358DC);
}

uint64_t sub_23830C5F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = a4(*a1, a1[1], a1[2], a1[3]);
  *a1 = result;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

unint64_t BigString.UTF8View.index(roundingUp:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = sub_2382685C4(a1, a2, a3, a4);
  if ((result ^ a1) >= 0x400)
    return sub_2383358DC(result, v6, v7, v8);
  return result;
}

uint64_t sub_23830C694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;

  return sub_23830BF5C(a1, a2, *(_QWORD **)(v3 + 24), *(_QWORD **)(v3 + 56), *(_QWORD *)(v3 + 16), a3);
}

unint64_t sub_23830C6B8()
{
  unint64_t result;

  result = qword_2568F1EC8;
  if (!qword_2568F1EC8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UTF8View, &type metadata for BigString.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F1EC8);
  }
  return result;
}

unint64_t sub_23830C700()
{
  unint64_t result;

  result = qword_2568F1ED0;
  if (!qword_2568F1ED0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UTF8View.Iterator, &type metadata for BigString.UTF8View.Iterator);
    atomic_store(result, (unint64_t *)&qword_2568F1ED0);
  }
  return result;
}

unint64_t sub_23830C748()
{
  unint64_t result;

  result = qword_2568F1ED8;
  if (!qword_2568F1ED8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UTF8View, &type metadata for BigString.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F1ED8);
  }
  return result;
}

unint64_t sub_23830C790()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2568F1EE0;
  if (!qword_2568F1EE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F1EE8);
    v2 = sub_23830C7F4();
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0658], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568F1EE0);
  }
  return result;
}

unint64_t sub_23830C7F4()
{
  unint64_t result;

  result = qword_2568F1EF0;
  if (!qword_2568F1EF0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UTF8View, &type metadata for BigString.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F1EF0);
  }
  return result;
}

unint64_t sub_23830C83C()
{
  unint64_t result;

  result = qword_2568F1EF8;
  if (!qword_2568F1EF8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UTF8View, &type metadata for BigSubstring.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F1EF8);
  }
  return result;
}

unint64_t sub_23830C884()
{
  unint64_t result;

  result = qword_2568F1F00;
  if (!qword_2568F1F00)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UTF8View, &type metadata for BigString.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F1F00);
  }
  return result;
}

unint64_t sub_23830C8CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F1F08;
  if (!qword_2568F1F08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F1EE8);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0670], v1);
    atomic_store(result, (unint64_t *)&qword_2568F1F08);
  }
  return result;
}

unint64_t sub_23830C91C()
{
  unint64_t result;

  result = qword_2568F1F10;
  if (!qword_2568F1F10)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UTF8View, &type metadata for BigSubstring.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F1F10);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.UTF8View()
{
  return &type metadata for BigString.UTF8View;
}

ValueMetadata *type metadata accessor for BigString.UTF8View.Iterator()
{
  return &type metadata for BigString.UTF8View.Iterator;
}

uint64_t OrderedDictionary.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[8];

  v24[0] = a6;
  v24[1] = a7;
  v12 = sub_23835BA60();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0B10);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[5] = a1;
  v24[6] = a2;
  v24[7] = a3;
  v24[2] = a1;
  v24[3] = a2;
  v24[4] = a3;
  v18 = *MEMORY[0x24BEE4370];
  v19 = sub_23835BA54();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  v21 = v24[0];
  type metadata accessor for OrderedDictionary(0, a4, a5, v24[0]);
  v22 = type metadata accessor for OrderedDictionary.Elements(0, a4, a5, v21);
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v22);
  sub_23829A850((uint64_t)v14);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return sub_23835BA6C();
}

uint64_t sub_23830CB48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return OrderedDictionary.customMirror.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a2);
}

Swift::Void __swiftcall OrderedDictionary.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), v3);
  OrderedSet.swapAt(_:_:)(a1, a2);
  v6 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v6);
  sub_23835ACE0();
}

_QWORD *OrderedDictionary.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  uint64_t v15;

  v8 = a3[3];
  sub_23835B6E8();
  sub_23835B688();
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v14[0] = v12;
  v14[1] = v10;
  sub_23830D344(v14, a1, a2, a3[2], v8, a3[4], &v15);
  if (v4)
    return sub_23828CD3C(v14, v12, v10);
  sub_23828CD3C(v14, v12, v10);
  return (_QWORD *)v15;
}

uint64_t OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedDictionary<A, B>, a3);
  v5 = sub_23835B010();
  swift_release();
  swift_release();
  result = swift_release();
  if (!v3)
  {
    swift_getTupleTypeMetadata2();
    v8 = MEMORY[0x23B8309EC](v5);
    swift_retain();
    swift_retain();
    swift_retain();
    v7 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    swift_release();
    result = swift_release();
    if (v8 == v7)
    {
      MEMORY[0x24BDAC7A8](result);
      sub_23835B07C();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t OrderedDictionary<>.sort()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v4[1] = *(_OWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = v2;
  return OrderedDictionary.sort(by:)((uint64_t)sub_23830DA78, (uint64_t)v4, a1);
}

Swift::Void __swiftcall OrderedDictionary.shuffle()()
{
  _QWORD *v0;

  OrderedDictionary.shuffle<A>(using:)((uint64_t)v0, v0);
}

uint64_t OrderedDictionary.shuffle<A>(using:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v2[2];
  v5 = a2[3];
  result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result >= 2)
  {
    v7 = a2[2];
    v8 = v2;
    v9 = a2[4];
    v33 = v4;
    v34 = OrderedSet.elements.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_getTupleTypeMetadata2();
    v10 = sub_23835B070();
    sub_23829E2AC(v10, v7, v5, v9);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v11 = MEMORY[0x23B8309EC](v34, v7);
    swift_bridgeObjectRelease();
    if (v11 >= 2)
    {
      sub_23830DA98();
      v12 = 0;
      while (1)
      {
        v31[1] = v11;
        result = sub_23835B7C0();
        v31[0] = v12;
        if (__OFADD__(v12, v32))
          break;
        --v11;
        v13 = sub_23835B0D0();
        MEMORY[0x23B831670](MEMORY[0x24BEE12B8], v13);
        sub_23835ACE0();
        v31[0] = v12;
        v32 += v12;
        v14 = sub_23835B6E8();
        MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v14);
        sub_23835ACE0();
        ++v12;
        if (v11 == 1)
        {
          v4 = v33;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    v15 = v8;
    v16 = sub_23835B0D0();
    swift_bridgeObjectRetain_n();
    MEMORY[0x23B831670](MEMORY[0x24BEE12C8], v16);
    v17 = sub_23835B0DC();
    v31[0] = v17;
    v18 = sub_2382838F8();
    v19 = sub_23835B6E8();
    v20 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v19);
    v21 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v31, 0, 1, v18, v19, v20, v9);
    v22 = _s19CollectionsInternal4HeapV5countSivg_0();
    v23 = 0;
    if (v22 >= 16)
    {
      swift_retain();
      v23 = v21;
    }
    v24 = OrderedSet.init(_uniqueElements:_:)(v17, v23);
    v26 = v25;
    swift_bridgeObjectRelease();
    swift_release();
    v31[0] = v4;
    v27 = sub_23835B6E8();
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x23B831670](MEMORY[0x24BEE2A48], v27);
    v28 = sub_23835B0DC();
    v29 = _s19CollectionsInternal4HeapV5countSivg_0();
    v30 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    if (v29 != v30)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    *v15 = v24;
    v15[1] = v26;
    v15[2] = v28;
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.reverse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 32), v1);
  OrderedSet.reverse()();
  v2 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v2);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v2);
  sub_23835ACF8();
}

uint64_t sub_23830D344@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = *a1;
  v13 = a1[1];
  v14 = type metadata accessor for OrderedSet(0, a4, a6, a3);
  result = OrderedSet._partition<A>(values:by:)(v12, v13, a2, a3, v14, a5);
  if (!v7)
    *a7 = result;
  return result;
}

uint64_t sub_23830D3CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *((_QWORD *)&v27 + 1) = a2;
  *(_QWORD *)&v27 = a1;
  *(_QWORD *)&v32 = a1;
  *((_QWORD *)&v32 + 1) = a2;
  swift_getTupleTypeMetadata2();
  v9 = sub_23835AD7C();
  MEMORY[0x23B831670](MEMORY[0x24BEE09D8], v9);
  sub_23835AFF8();
  v31 = v29;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a6;
  v11 = sub_23835B5BC();
  MEMORY[0x23B831670](MEMORY[0x24BEE25B0], v11);
  sub_23835B808();
  swift_release();
  *((_QWORD *)&v29 + 1) = *((_QWORD *)&v32 + 1);
  v30 = v33;
  v12 = sub_23835B730();
  swift_retain();
  MEMORY[0x23B831670](MEMORY[0x24BEE2B40], v12);
  v13 = sub_23835B0DC();
  *(_QWORD *)&v29 = v13;
  v14 = sub_2382838F8();
  v15 = sub_23835B6E8();
  v16 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v15);
  v17 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v29, 0, 1, v14, v15, v16, a6);
  v18 = _s19CollectionsInternal4HeapV5countSivg_0();
  v19 = 0;
  if (v18 >= 16)
  {
    swift_retain();
    v19 = v17;
  }
  v20 = OrderedSet.init(_uniqueElements:_:)(v13, v19);
  v22 = v21;
  swift_release();
  swift_release();
  *a3 = v20;
  a3[1] = v22;
  swift_release();
  swift_release();
  v32 = v27;
  sub_23835AFF8();
  v31 = v29;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a4;
  v23[3] = a5;
  v23[4] = a6;
  sub_23835B808();
  swift_release();
  v29 = v32;
  v30 = v33;
  v24 = sub_23835B730();
  MEMORY[0x23B831670](MEMORY[0x24BEE2B40], v24);
  a3[2] = sub_23835B0DC();
  return swift_release();
}

uint64_t sub_23830D6D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = a1 + v12;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, a3);
}

uint64_t sub_23830D7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = a1 + v12;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v13, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, a2);
}

uint64_t sub_23830D894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a4;
  v25 = a7;
  v23 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
  v18((char *)&v22 - v16, a1, a5);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16);
  v19(&v17[*(int *)(TupleTypeMetadata2 + 48)], a2, a6);
  v18(v15, v23, a5);
  v19(&v15[*(int *)(TupleTypeMetadata2 + 48)], v24, a6);
  LOBYTE(a5) = sub_23835AC74();
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, TupleTypeMetadata2);
  v20(v17, TupleTypeMetadata2);
  return a5 & 1;
}

uint64_t sub_23830D9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48), a2, a2 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_23830DA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23830D3CC(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_23830DA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_23830D894(a1, a2, a3, a4, v4[2], v4[3], v4[4]) & 1;
}

unint64_t sub_23830DA98()
{
  unint64_t result;

  result = qword_2568F1F18;
  if (!qword_2568F1F18)
  {
    result = MEMORY[0x23B831670](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2568F1F18);
  }
  return result;
}

uint64_t sub_23830DADC()
{
  return swift_deallocObject();
}

uint64_t sub_23830DAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23830D6D4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23830DAF8()
{
  return swift_deallocObject();
}

uint64_t sub_23830DB08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23830D7B4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v21 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23835B334();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v21, a3);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  sub_23835B484();
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v18(v11, 1, v4) != 1)
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v19(v7, v11, v4);
      OrderedSet._append(_:)((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_23835B484();
    }
    while (v18(v11, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v17, AssociatedTypeWitness);
}

uint64_t OrderedSet._append(_:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;

  OrderedSet._find(_:)();
  v4 = v3;
  if ((v3 & 1) != 0)
    OrderedSet._appendNew(_:in:)(a1, v2);
  return v4 & 1;
}

void OrderedSet._appendNew(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  sub_23835B6E8();
  sub_23835B6AC();
  swift_retain();
  v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  v9 = *v2;
  if (OrderedSet._capacity.getter(v9) >= v8)
  {
    if (v9)
    {
      OrderedSet._ensureUnique()();
      v10 = *v3;
      if (*v3)
      {
        swift_retain();
        sub_23830E234((_QWORD *)(v10 + 16), v10 + 32);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    OrderedSet._regenerateHashTable()();
  }
}

void OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v6 + 16))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23835B6E8();
  sub_23835B6AC();
  swift_retain();
  v7 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  v8 = *v2;
  if (OrderedSet._capacity.getter(v8) >= v7)
  {
    if (v8)
    {
      OrderedSet._ensureUnique()();
      v9 = *v3;
      if (*v3)
      {
        swift_retain();
        sub_23830E318((_QWORD *)(v9 + 16), v9 + 32, a2);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    OrderedSet._regenerateHashTable()();
  }
}

uint64_t OrderedSet.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  char v8;

  OrderedSet._find(_:)();
  v8 = v7;
  if ((v7 & 1) != 0)
    OrderedSet._insertNew(_:at:in:)(a1, a2, v6, a3);
  return v8 & 1;
}

void OrderedSet._insertNew(_:at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = v4;
  v16 = a3;
  v17 = a1;
  v18 = a2;
  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  v12 = *v4;
  v13 = *(_QWORD *)(a4 + 24);
  if (v11 >= OrderedSet._capacity.getter(v12))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v17, v7);
    sub_23835B6E8();
    sub_23835B6B8();
    OrderedSet._regenerateHashTable()();
  }
  else
  {
    v14 = v18;
    if (!v12)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v17, v7);
      sub_23835B6E8();
      sub_23835B6B8();
      return;
    }
    OrderedSet._ensureUnique()();
    v15 = *v5;
    if (*v5)
    {
      swift_retain();
      sub_23830E3B4((_QWORD *)(v15 + 16), v15 + 32, v16, v14, (uint64_t)v5, v7, v13);
      swift_release();
      goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t sub_23830E234(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23835ABF0();
  v5 = 1 << *a1;
  v6 = __OFSUB__(v5, 1);
  v7 = v5 - 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    if (_HashTable.UnsafeHandle._startIterator(bucket:)(v7 & result, a1, a2))
    {
      while (1)
        _HashTable.BucketIterator.advance()();
    }
    swift_retain();
    v8 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    result = v8 - 1;
    if (!__OFSUB__(v8, 1))
      return _HashTable.BucketIterator.currentValue.setter(result, 0);
  }
  __break(1u);
  return result;
}

unint64_t sub_23830E318(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;

  swift_retain();
  v6 = _s19CollectionsInternal4HeapV5countSivg_0();
  result = swift_release();
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = v6 - 1 - ((uint64_t)a1[1] >> 6);
    return _HashTable.UnsafeHandle.subscript.setter((-1 << *a1) ^ ~(((v8 >> 63) & ~(-1 << *a1)) + v8), a3, a1, a2);
  }
  return result;
}

unint64_t sub_23830E3B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(a5 + 8);
  v12 = sub_23835B6E8();
  v13 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v12);
  _HashTable.UnsafeHandle.adjustContents<A>(preparingForInsertionOfElementAtOffset:in:)(a4, (uint64_t)&v15, a1, a2, v12, v13, a7);
  return _HashTable.UnsafeHandle.subscript.setter((-1 << *a1) ^ ~((((a4 - ((uint64_t)a1[1] >> 6)) >> 63) & ~(-1 << *a1)) + a4 - ((uint64_t)a1[1] >> 6)), a3, a1, a2);
}

uint64_t OrderedSet.update(_:at:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(v3 + 8);
  sub_23835B724();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v11 = sub_23835AD40();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    v13 = sub_23835B6E8();
    sub_23835B688();
    v14 = *v10;
    sub_2382E6D94(a2, *v10);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * a2, a1, v6);
    return nullsub_1(v13, v15, v16, v17, v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t OrderedSet.updateOrAppend(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((OrderedSet._append(_:)(a1) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
    v10 = a3;
    v11 = 1;
  }
  else
  {
    v12 = v7;
    v13 = *(_QWORD *)(a2 + 16);
    sub_23835B724();
    v14 = sub_23835B6E8();
    sub_23835B688();
    v15 = *(_QWORD *)(v3 + 8);
    sub_2382E6D94(v12, v15);
    v16 = *(_QWORD *)(v13 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 24))(v15+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v12, a1, v13);
    nullsub_1(v14, v17, v18, v19, v20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v10 = a3;
    v11 = 0;
    v8 = v13;
  }
  return v9(v10, v11, 1, v8);
}

uint64_t OrderedSet.updateOrInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v8 = (uint64_t *)(v4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  swift_retain();
  swift_retain();
  v23 = a2;
  v10 = OrderedSet._find(_:)();
  LOBYTE(a2) = v11;
  v13 = v12;
  swift_release();
  swift_release();
  if ((a2 & 1) != 0)
  {
    OrderedSet._insertNew(_:at:in:)(v23, a3, v13, a4);
    v16 = *(_QWORD *)(v9 - 8);
    v21 = 1;
  }
  else
  {
    sub_23835B724();
    v14 = sub_23835B6E8();
    sub_23835B688();
    v15 = *v8;
    sub_2382E6D94(v10, *v8);
    v16 = *(_QWORD *)(v9 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 24))(v15+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v10, v23, v9);
    nullsub_1(v14, v17, v18, v19, v20);
    v21 = 0;
    a3 = v10;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a1, v21, 1, v9);
  return a3;
}

uint64_t Deque.init(arrayLiteral:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  v3 = sub_23835B0D0();
  v4 = MEMORY[0x23B831670](MEMORY[0x24BEE12E0], v3);
  return Deque.init<A>(_:)((uint64_t)&v6, a2, v3, v4);
}

uint64_t sub_23830E85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_23835B0D0();
  v6 = MEMORY[0x23B831670](MEMORY[0x24BEE12E0], v5);
  result = Deque.init<A>(_:)((uint64_t)&v8, v4, v5, v6);
  *a3 = result;
  return result;
}

Swift::String_optional __swiftcall BigString.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;

  if ((*(_QWORD *)(v0 + 88) ^ *(_QWORD *)(v0 + 80)) >= 0x4000)
  {
    sub_23830EA80();
    v1 = v3;
    v2 = (void *)v4;
    if ((sub_23830F018(v3, v4) & 1) == 0)
      *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v1 = 0;
    v2 = 0;
  }
  v5 = v1;
  v6 = v2;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

double BigString.makeIterator()@<D0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 v3;
  __n128 v4;
  double result;
  __n128 v6;
  __n128 v7[6];

  sub_238263DDC((uint64_t)v1);
  sub_23830F850(v1, v7);
  v3 = v7[3];
  a1[2] = v7[2];
  a1[3] = v3;
  v4 = v7[5];
  a1[4] = v7[4];
  a1[5] = v4;
  result = v7[0].n128_f64[0];
  v6 = v7[1];
  *a1 = v7[0];
  a1[1] = v6;
  return result;
}

double sub_23830E9A8@<D0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  double result;
  __n128 v7;
  __n128 v8[6];
  __n128 v9[3];

  v3 = v1[1];
  v9[0] = *v1;
  v9[1] = v3;
  v9[2] = v1[2];
  sub_23830F850(v9, v8);
  v4 = v8[3];
  a1[2] = v8[2];
  a1[3] = v4;
  v5 = v8[5];
  a1[4] = v8[4];
  a1[5] = v5;
  result = v8[0].n128_f64[0];
  v7 = v8[1];
  *a1 = v8[0];
  a1[1] = v7;
  return result;
}

uint64_t sub_23830EA00()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  v2 = sub_23833AD6C(v4);
  sub_23825B804((uint64_t)v4);
  return v2;
}

void sub_23830EA48(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23833B8C8(a1, a2, a3);
}

void sub_23830EA80()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  int v57;
  char v58;
  char v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v1 = *(_OWORD *)(v0 + 16);
  v81 = *(_OWORD *)v0;
  v82 = v1;
  v83 = *(_OWORD *)(v0 + 32);
  v70 = *(_QWORD *)(v0 + 56);
  if (v70 != *((_QWORD *)&v83 + 1))
    goto LABEL_55;
  v2 = v0;
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v67 = v82;
  v68 = *((_QWORD *)&v81 + 1);
  v65 = v83;
  v66 = *((_QWORD *)&v82 + 1);
  if (v4)
  {
    v5 = v4 + 24 * ((v3 >> ((4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C)) & 0xF);
    v6 = *(_QWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v5 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v89 = v81;
    v90 = v82;
    v91 = v83;
    sub_238263DDC(v0);
    sub_238261C98(v3, (uint64_t)&v84);
    sub_23825B804(v0);
    v6 = v84;
    v7 = v85;
  }
  v8 = *(_QWORD *)(v2 + 88) >> 14;
  if (v8 < *(_QWORD *)(v2 + 80) >> 14)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v69 = v81;
  swift_bridgeObjectRetain();
  v9 = sub_23835AF80();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = MEMORY[0x23B8306D4](v9, v11, v13, v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  v79 = v16;
  v80 = v18;
  swift_bridgeObjectRelease();
  v19 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v19 = v6 & 0xFFFFFFFFFFFFLL;
  if (v8 < 4 * v19)
  {
    if ((v18 & 0x2000000000000000) != 0)
    {
      if ((v18 & 0xF00000000000000) != 0)
        return;
      __break(1u);
LABEL_50:
      if ((v18 & 0xF00000000000000) != 0)
        return;
LABEL_58:
      __break(1u);
      return;
    }
    if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_46;
    __break(1u);
  }
  sub_238263DDC(v2);
  v20 = sub_2382A5854(v70, v3, v4);
  v22 = v21;
  v24 = v23;
  sub_23825B804(v2);
  v76 = v20;
  v77 = v22;
  v78 = v24;
  v25 = v81;
  if ((_QWORD)v81)
  {
    v64 = v2;
    v27 = v82;
    v26 = *((_QWORD *)&v81 + 1);
    v28 = v83;
    v29 = *((_QWORD *)&v82 + 1);
    v30 = v22;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v84 = v25;
          v85 = v26;
          v86 = v27;
          v87 = v29;
          v88 = v28;
          v31 = *(unsigned __int8 *)(v25 + 18);
          sub_238263DDC(v2);
          sub_238263DDC(v2);
          v32 = *(unsigned __int16 *)(v25 + 16);
          v33 = *(_BYTE *)(v25 + 18);
          sub_23825B804(v2);
          sub_23825B804(v2);
          if (v30 >= (((-15 << ((4 * v33 + 8) & 0x3C)) - 1) & v31 | (unint64_t)(v32 << ((4 * v33 + 8) & 0x3C))))
          {
LABEL_43:
            v16 = v79;
            v18 = v80;
            goto LABEL_44;
          }
          if (v76 != v70)
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          v34 = v30;
          v35 = v78;
          if (v78)
          {
            v36 = v78 + 24 * ((v34 >> ((4 * *(_BYTE *)(v78 + 18) + 8) & 0x3C)) & 0xF);
            v37 = *(_QWORD *)(v36 + 24);
            v38 = *(_QWORD *)(v36 + 32);
            v39 = *(unsigned __int8 *)(v36 + 44);
            swift_bridgeObjectRetain();
          }
          else
          {
            sub_238263DDC(v2);
            sub_238261C98(v34, (uint64_t)&v72);
            sub_23825B804(v2);
            v37 = v72;
            v38 = v73;
            v39 = BYTE4(v74);
          }
          v40 = v37 & 0xFFFFFFFFFFFFLL;
          v71 = v34;
          if ((v38 & 0x1000000000000000) != 0)
          {
            v43 = MEMORY[0x23B83080C](15, v39, v37, v38);
            v41 = v38 & 0x2000000000000000;
          }
          else
          {
            v41 = v38 & 0x2000000000000000;
            if ((v38 & 0x2000000000000000) != 0)
              v42 = HIBYTE(v38) & 0xF;
            else
              v42 = v37 & 0xFFFFFFFFFFFFLL;
            if (v42 < v39)
              goto LABEL_53;
            v43 = (v39 << 16) | 4;
          }
          swift_bridgeObjectRetain();
          v44 = sub_23835AF80();
          v46 = v45;
          v48 = v47;
          v50 = v49;
          swift_bridgeObjectRelease();
          v72 = v44;
          v73 = v46;
          v74 = v48;
          v75 = v50;
          sub_23825C900();
          sub_23835AE78();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v41)
            v51 = HIBYTE(v38) & 0xF;
          else
            v51 = v40;
          v52 = v43 >> 14 >= 4 * v51;
          v2 = v64;
          v26 = v68;
          v25 = v69;
          v29 = v66;
          v27 = v67;
          if (!v52)
            goto LABEL_43;
          v53 = *(unsigned __int8 *)(v69 + 18);
          v54 = *(unsigned __int16 *)(v69 + 16);
          swift_unknownObjectRetain_n();
          sub_23825B804(v64);
          if (v71 >= (((-15 << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | (unint64_t)(v54 << ((4 * v53 + 8) & 0x3C))))
            goto LABEL_54;
          if (!v35)
            break;
          v55 = (4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C;
          v56 = ((v71 >> v55) & 0xF) + 1;
          if (v56 >= *(unsigned __int16 *)(v35 + 16))
            break;
          v30 = (v56 << v55) | ((-15 << v55) - 1) & v71;
          v77 = v30;
          sub_23825B804(v64);
          v28 = v65;
        }
        v57 = *(unsigned __int8 *)(v69 + 18);
        v58 = (4 * v57 + 8) & 0x3C;
        v72 = (v71 >> v58) & 0xF;
        if (v57)
          break;
        v60 = ((v71 >> v58) & 0xF) + 1;
        if (v60 >= *(unsigned __int16 *)(v69 + 16))
        {
          v61 = 0;
LABEL_41:
          v62 = *(unsigned __int16 *)(v69 + 16);
          v63 = *(_BYTE *)(v69 + 18);
          swift_unknownObjectRetain();
          sub_23825B804(v64);
          sub_23825B804(v64);
          v30 = ((-15 << ((4 * v63 + 8) & 0x3C)) - 1) & v61 | (unint64_t)(v62 << ((4 * v63 + 8) & 0x3C));
          v76 = v70;
          v77 = v30;
          v78 = 0;
          v28 = v65;
        }
        else
        {
          v30 = (v60 << v58) | ((-15 << v58) - 1) & v71;
          v77 = v30;
          sub_23825B804(v64);
          v78 = v69;
          v28 = v65;
        }
      }
      sub_238263DDC(v64);
      v59 = sub_2382EDABC(v69 + 24, &v72, (uint64_t)&v76, v69, v57);
      sub_23825B804(v64);
      if ((v59 & 1) == 0)
      {
        v61 = *(unsigned __int8 *)(v69 + 18);
        goto LABEL_41;
      }
      sub_23825B804(v64);
      v30 = v77;
      v28 = v65;
    }
  }
LABEL_44:
  if ((v18 & 0x2000000000000000) != 0)
    goto LABEL_50;
  if ((v16 & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
LABEL_46:
  if ((v16 & 0x1000000000000000) == 0)
  {
    sub_238266994();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23830F018(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  char v34;
  unint64_t v35;
  int v36;
  char v37;
  char v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v4 = *(_QWORD *)(v2 + 88);
  if (v4 >> 14 == *(_QWORD *)(v2 + 80) >> 14)
    return 0;
  v6 = *(_OWORD *)(v2 + 16);
  v61 = *(_OWORD *)v2;
  v62 = v6;
  v63 = *(_OWORD *)(v2 + 32);
  v49 = *(_QWORD *)(v2 + 56);
  if (v49 != *((_QWORD *)&v63 + 1))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v8 = *((_QWORD *)&v61 + 1);
  v7 = v61;
  v9 = *(_QWORD *)(v2 + 64);
  v10 = *(_QWORD *)(v2 + 72);
  v44 = (_QWORD *)v2;
  v47 = *((_QWORD *)&v62 + 1);
  v48 = v62;
  v46 = v63;
  if (v10)
  {
    v11 = v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF);
    v3 = *(_QWORD *)(v11 + 24);
    v2 = *(_QWORD *)(v11 + 32);
    v12 = *(unsigned __int8 *)(v11 + 40);
    v13 = *(unsigned __int8 *)(v11 + 44);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v64 = v61;
    v65 = v62;
    v66 = v63;
    swift_unknownObjectRetain();
    sub_238261C98(v9, (uint64_t)&v56);
    result = sub_23825B804((uint64_t)&v61);
    v3 = v56;
    v2 = v57;
    v12 = v58;
    v13 = BYTE4(v58);
  }
  v14 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v14 = v3 & 0xFFFFFFFFFFFFLL;
  if (v4 >> 14 >= 4 * v14)
  {
    result = swift_bridgeObjectRelease();
    v17 = v44[6];
    v18 = v17 + v12;
    if (__OFADD__(v17, v12))
      goto LABEL_56;
    swift_unknownObjectRetain();
    v19 = sub_2382A5854(v49, v9, v10);
    v21 = v20;
    v23 = v22;
    sub_23825B804((uint64_t)&v61);
    v53 = v19;
    v54 = v21;
    v55 = v23;
    if (!v7)
      return 0;
    v45 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v56 = v7;
          v57 = v8;
          v58 = v48;
          v59 = v47;
          v60 = v46;
          v24 = *(unsigned __int8 *)(v7 + 18);
          v2 = *(unsigned __int16 *)(v7 + 16);
          swift_unknownObjectRetain_n();
          sub_23825B804((uint64_t)&v61);
          sub_23825B804((uint64_t)&v61);
          if (v21 >= (((-15 << ((4 * v24 + 8) & 0x3C)) - 1) & v24 | (v2 << ((4 * v24 + 8) & 0x3C))))
            return 0;
          if (v53 != v49)
          {
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          v25 = v55;
          if (v55)
          {
            v26 = v55 + 24 * ((v21 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF);
            v27 = *(_QWORD *)(v26 + 24);
            v2 = *(_QWORD *)(v26 + 32);
            v28 = *(unsigned __int8 *)(v26 + 40);
            v3 = *(unsigned __int8 *)(v26 + 44);
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_238261C98(v21, (uint64_t)v50);
            sub_23825B804((uint64_t)&v61);
            v27 = v50[0];
            v2 = v50[1];
            v28 = v51;
            v3 = v52;
          }
          if ((v2 & 0x1000000000000000) != 0)
          {
            v3 = MEMORY[0x23B83080C](15, v3, v27, v2);
            v29 = v2 & 0x2000000000000000;
          }
          else
          {
            v29 = v2 & 0x2000000000000000;
            if ((v2 & 0x2000000000000000) != 0)
              v30 = HIBYTE(v2) & 0xF;
            else
              v30 = v27 & 0xFFFFFFFFFFFFLL;
            if (v30 < v3)
              goto LABEL_50;
            v3 = (v3 << 16) | 4;
          }
          if (v29)
            v31 = HIBYTE(v2) & 0xF;
          else
            v31 = v27 & 0xFFFFFFFFFFFFLL;
          if (v3 >> 14 < 4 * v31)
          {
            v44[8] = v21;
            v44[9] = v25;
            v44[6] = v18;
            v44[7] = v49;
            v44[10] = v3;
            sub_23825E150(v3, v27, v2);
            swift_bridgeObjectRelease();
            v43 = sub_23835B3F4();
            swift_bridgeObjectRelease();
            v44[11] = v43;
            return 1;
          }
          swift_bridgeObjectRelease();
          v32 = __OFADD__(v18, v28);
          v18 += v28;
          if (v32)
            goto LABEL_51;
          v33 = *(unsigned __int8 *)(v7 + 18);
          v2 = *(unsigned __int16 *)(v7 + 16);
          swift_unknownObjectRetain_n();
          sub_23825B804((uint64_t)&v61);
          sub_23825B804((uint64_t)&v61);
          if (v21 >= (((-15 << ((4 * v33 + 8) & 0x3C)) - 1) & v33 | (v2 << ((4 * v33 + 8) & 0x3C))))
            goto LABEL_52;
          if (!v25)
            break;
          v34 = (4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C;
          v35 = ((v21 >> v34) & 0xF) + 1;
          if (v35 >= *(unsigned __int16 *)(v25 + 16))
            break;
          v21 = (v35 << v34) | ((-15 << v34) - 1) & v21;
          v54 = v21;
          sub_23825B804((uint64_t)&v61);
          v8 = v45;
        }
        v36 = *(unsigned __int8 *)(v7 + 18);
        v37 = (4 * v36 + 8) & 0x3C;
        v50[0] = (v21 >> v37) & 0xF;
        if (v36)
          break;
        v39 = ((v21 >> v37) & 0xF) + 1;
        v8 = v45;
        if (v39 >= *(unsigned __int16 *)(v7 + 16))
        {
          v40 = 0;
LABEL_44:
          v41 = *(unsigned __int16 *)(v7 + 16);
          v42 = *(_BYTE *)(v7 + 18);
          swift_unknownObjectRetain();
          sub_23825B804((uint64_t)&v61);
          sub_23825B804((uint64_t)&v61);
          v21 = ((-15 << ((4 * v42 + 8) & 0x3C)) - 1) & v40 | (unint64_t)(v41 << ((4 * v42 + 8) & 0x3C));
          v53 = v49;
          v54 = v21;
          v55 = 0;
        }
        else
        {
          v21 = (v39 << v37) | ((-15 << v37) - 1) & v21;
          v54 = v21;
          sub_23825B804((uint64_t)&v61);
          v55 = v7;
        }
      }
      sub_238263DDC((uint64_t)&v61);
      v38 = sub_2382EDABC(v7 + 24, v50, (uint64_t)&v53, v7, v36);
      sub_23825B804((uint64_t)&v61);
      v8 = v45;
      if ((v38 & 1) == 0)
      {
        v40 = *(unsigned __int8 *)(v7 + 18);
        goto LABEL_44;
      }
      sub_23825B804((uint64_t)&v61);
      v21 = v54;
    }
  }
  v44[10] = v4;
  a2 = v13;
  if ((v2 & 0x1000000000000000) == 0)
  {
    if (v14 >= v13)
    {
      v15 = ((unint64_t)v13 << 16) | 4;
      goto LABEL_13;
    }
    __break(1u);
LABEL_56:
    __break(1u);
    return result;
  }
LABEL_54:
  v15 = MEMORY[0x23B83080C](15, a2, v3, v2);
LABEL_13:
  swift_bridgeObjectRetain();
  sub_23825E150(v15, v3, v2);
  swift_bridgeObjectRelease_n();
  v16 = sub_23835B3F4();
  swift_bridgeObjectRelease();
  v44[11] = v16;
  return 1;
}

uint64_t sub_23830F5A8@<X0>(Swift::String_optional *a1@<X8>)
{
  uint64_t result;
  Swift::String_optional v3;

  v3 = BigString.Iterator.next()();
  result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

unint64_t sub_23830F5CC@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v37 = a1[1];
  v38 = *a1;
  v35 = a1[3];
  v36 = a1[2];
  v33 = a1[5];
  v34 = a1[4];
  v12 = *((_OWORD *)a1 + 1);
  v43 = *(_OWORD *)a1;
  v44 = v12;
  v45 = *((_OWORD *)a1 + 2);
  v13 = *((_QWORD *)&v12 + 1);
  v32 = v12;
  v39 = *((_QWORD *)&v45 + 1);
  if ((_QWORD)v43)
    v14 = 2 * (v45 & 0x1FFFFFFFFFFFFFLL);
  else
    v14 = 0;
  swift_unknownObjectRetain();
  if (v14 == a2 >> 10)
  {
    result = sub_238269C7C();
    v16 = result;
    v17 = 0;
    v18 = a2 >> 11;
    v19 = 15;
    v20 = 7;
LABEL_15:
    *a6 = v38;
    a6[1] = v37;
    a6[2] = v36;
    a6[3] = v35;
    a6[4] = v34;
    a6[5] = v33;
    a6[6] = v18;
    a6[7] = v39;
    a6[8] = v16;
    a6[9] = v17;
    a6[10] = v19;
    a6[11] = v20;
    return result;
  }
  result = sub_238264714(a2, a3, a4, a5, 0);
  if (v23 != 1)
  {
    if (v21 != *((_QWORD *)&v45 + 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v24 = result;
    v16 = v22;
    v17 = v23;
    if (v23)
    {
      v25 = v23 + 24 * ((v22 >> ((4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C)) & 0xF);
      v27 = *(_QWORD *)(v25 + 24);
      v26 = *(_QWORD *)(v25 + 32);
      v28 = *(unsigned __int8 *)(v25 + 44);
      result = swift_bridgeObjectRetain();
      v29 = v28;
      if ((v26 & 0x1000000000000000) == 0)
        goto LABEL_10;
    }
    else
    {
      v46 = v43;
      v47 = v32;
      v48 = v13;
      v49 = v45;
      swift_unknownObjectRetain();
      sub_238261C98(v16, (uint64_t)&v40);
      result = sub_23825B804((uint64_t)a1);
      v27 = v40;
      v26 = v41;
      v29 = v42;
      if ((v41 & 0x1000000000000000) == 0)
      {
LABEL_10:
        v30 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0)
          v30 = v27 & 0xFFFFFFFFFFFFLL;
        if (v30 >= v29)
        {
          v31 = (v29 << 16) | 4;
LABEL_14:
          v18 = (v24 >> 11) - v24;
          v19 = (16 * (int)v24) & 0x4000 | ((unint64_t)v24 << 16) | (v24 >> 8) & 3 | 4;
          swift_bridgeObjectRetain();
          sub_23825E150(v31, v27, v26);
          swift_bridgeObjectRelease_n();
          v20 = sub_23835B3F4();
          result = swift_bridgeObjectRelease();
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v31 = MEMORY[0x23B83080C](15, v29, v27, v26);
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);
  return result;
}

__n128 sub_23830F850@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint16x8_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  uint64x2_t v21;
  uint64x2_t v22;
  int8x16_t v23;
  __n128 result;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  _QWORD v30[2];
  unsigned __int8 v31;
  __int32 v32;
  unsigned __int8 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unint64_t v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;

  v4 = a1[1];
  v5 = a1[2];
  v34 = *a1;
  v35 = v4;
  v36 = a1[2];
  v6 = v4;
  v28 = v4;
  v29 = v34;
  v27 = v5;
  v26 = v36.n128_i64[1];
  if (v34.n128_u64[0])
  {
    v7 = *(unsigned __int8 *)(v34.n128_u64[0] + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    v7 = 0;
  }
  swift_unknownObjectRetain();
  if (v7 >= sub_238269C7C())
  {
    sub_23825B804((uint64_t)a1);
    v8 = 0;
  }
  else
  {
    v40 = v34;
    v41 = v6;
    v42 = v36.n128_u64[0];
    swift_unknownObjectRetain();
    v8 = sub_2382ED1C8(v7);
    sub_23825B804((uint64_t)a1);
    sub_23825B804((uint64_t)a1);
  }
  swift_unknownObjectRetain();
  v9 = sub_238269C7C();
  sub_23825B804((uint64_t)a1);
  if (v7 >= v9)
  {
    sub_23825B804((uint64_t)a1);
    v17 = 15;
    v18 = 7;
  }
  else
  {
    if (v8)
    {
      v11 = v8 + 24 * ((v7 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
      v13 = *(_QWORD *)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 32);
      v14 = *(unsigned __int8 *)(v11 + 40);
      v10.i32[0] = *(_DWORD *)(v11 + 41);
      v25 = vmovl_u8(v10).u64[0];
      v15 = *(unsigned __int8 *)(v11 + 45);
      swift_bridgeObjectRetain();
      v16.i64[0] = v25;
    }
    else
    {
      v37 = v34;
      v38 = v6;
      v39 = v36.n128_u64[0];
      swift_unknownObjectRetain();
      sub_238261C98(v7, (uint64_t)v30);
      sub_23825B804((uint64_t)a1);
      v13 = v30[0];
      v12 = v30[1];
      v14 = v31;
      v19.i32[0] = v32;
      v16 = vmovl_u8(v19);
      v15 = v33;
    }
    v20 = vmovl_u16((uint16x4_t)(v16.i64[0] & 0xFF00FF00FF00FFLL));
    v21.i64[0] = v20.u32[0];
    v21.i64[1] = v20.u32[1];
    v22 = v21;
    v21.i64[0] = v20.u32[2];
    v21.i64[1] = v20.u32[3];
    v23 = vorrq_s8((int8x16_t)vshlq_u64(v22, (uint64x2_t)xmmword_23835C2E0), (int8x16_t)vshlq_u64(v21, (uint64x2_t)xmmword_23835C2D0));
    v17 = sub_238263B28(v13, v12, *(_QWORD *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)) | (v15 << 40) | v14);
    sub_23825E150(v17, v13, v12);
    swift_bridgeObjectRelease();
    v18 = sub_23835B3F4();
    sub_23825B804((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  *a2 = v29;
  a2[1] = v28;
  result = v27;
  a2[2] = v27;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = v26;
  a2[4].n128_u64[0] = v7;
  a2[4].n128_u64[1] = v8;
  a2[5].n128_u64[0] = v17;
  a2[5].n128_u64[1] = v18;
  return result;
}

unint64_t sub_23830FACC()
{
  unint64_t result;

  result = qword_2568F1F20;
  if (!qword_2568F1F20)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.Iterator, &type metadata for BigString.Iterator);
    atomic_store(result, (unint64_t *)&qword_2568F1F20);
  }
  return result;
}

uint64_t _s8IteratorVwcp(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *_s8IteratorVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s8IteratorVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t _s8IteratorVwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s8IteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.Iterator()
{
  return &type metadata for BigString.Iterator;
}

uint64_t OrderedSet.difference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  v51 = a7;
  v55 = sub_23835B7F0();
  v13 = sub_23835B334();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)&v50 - v15;
  v58 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  v63 = v17;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = (uint64_t *)(v17 + 16);
  v19 = swift_allocObject();
  v62 = v19;
  *(_QWORD *)(v19 + 16) = 0;
  v20 = (uint64_t *)(v19 + 16);
  v21 = swift_allocObject();
  v53 = sub_23835B7E4();
  *(_QWORD *)(v21 + 16) = sub_23835ABC0();
  v52 = (uint64_t *)(v21 + 16);
  v64 = v18;
  swift_beginAccess();
  swift_beginAccess();
  v57 = a6;
  v59 = v21;
  v61 = a1;
  while (1)
  {
    v29 = *v64;
    if (v29 >= _s19CollectionsInternal4HeapV5countSivg_0())
    {
      v30 = *v20;
      if (v30 >= _s19CollectionsInternal4HeapV5countSivg_0())
        break;
    }
    v31 = *v20;
    if (v31 == _s19CollectionsInternal4HeapV5countSivg_0())
      goto LABEL_2;
    if (v29 == _s19CollectionsInternal4HeapV5countSivg_0())
      goto LABEL_10;
    v32 = v60;
    sub_23835B724();
    v33 = OrderedSet._find(_:)();
    v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v58 + 8);
    v36(v32, a5);
    if ((v35 & 1) != 0)
    {
      v49 = 1;
      a1 = v61;
      v22 = v61;
      v23 = a2;
      v24 = v63;
      v21 = v59;
LABEL_3:
      v25 = v21;
      v26 = a3;
      v27 = a4;
LABEL_4:
      v28 = a5;
      goto LABEL_5;
    }
    if (v33 >= *v20)
    {
      v37 = v60;
      sub_23835B724();
      a6 = v57;
      v56 = OrderedSet._find(_:)();
      v39 = v38;
      result = ((uint64_t (*)(char *, uint64_t))v36)(v37, a5);
      if ((v39 & 1) != 0)
      {
        v49 = 0;
        v22 = a3;
        v23 = a4;
        a1 = v61;
        v24 = v62;
        v21 = v59;
LABEL_11:
        v25 = v21;
        v26 = a1;
        v27 = a2;
        goto LABEL_4;
      }
      v41 = *v64;
      if (v56 < *v64)
      {
        v49 = 0;
        v22 = a3;
        v23 = a4;
        a1 = v61;
        v24 = v62;
        v21 = v59;
        v25 = v59;
        v26 = v61;
        v27 = a2;
        goto LABEL_15;
      }
      a1 = v61;
      if (v41 != v56)
      {
        v42 = __OFSUB__(v56, v41);
        v43 = v56 - v41;
        a6 = v57;
        v21 = v59;
        if (v42)
          goto LABEL_32;
        if (__OFSUB__(v33, *v20))
          goto LABEL_34;
        if (v43 >= v33 - *v20)
        {
LABEL_2:
          v49 = 1;
          v22 = a1;
          v23 = a2;
          v24 = v63;
          goto LABEL_3;
        }
LABEL_10:
        v49 = 0;
        v22 = a3;
        v23 = a4;
        v24 = v62;
        goto LABEL_11;
      }
      a6 = v57;
      v21 = v59;
      if (__OFADD__(v56, 1))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *v64 = v56 + 1;
      if (__OFADD__(*v20, 1))
        goto LABEL_33;
      ++*v20;
    }
    else
    {
      v49 = 1;
      a1 = v61;
      v22 = v61;
      v23 = a2;
      v24 = v63;
      v21 = v59;
      v25 = v59;
      v26 = a3;
      v27 = a4;
LABEL_15:
      v28 = a5;
      a6 = v57;
LABEL_5:
      sub_238310260(v22, v23, v24, v25, v26, v27, v28, a6, v49);
    }
  }
  v44 = v52;
  swift_beginAccess();
  v65 = *v44;
  v45 = sub_23835B0D0();
  swift_bridgeObjectRetain();
  MEMORY[0x23B831670](MEMORY[0x24BEE12E0], v45);
  v46 = v54;
  sub_23835B7FC();
  v47 = v55;
  v48 = *(_QWORD *)(v55 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v55);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v51, v46, v47);
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_23831022C()
{
  return swift_deallocObject();
}

uint64_t sub_23831023C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_238310260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata3;
  char *v19;
  char *v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[4];
  int v27;

  v26[2] = a6;
  v26[3] = a8;
  v26[1] = a5;
  v27 = a9;
  v11 = sub_23835B7E4();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (_QWORD *)((char *)v26 - v13);
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_23835B724();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2568F07B0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v19 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 48);
  v20 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 64);
  swift_beginAccess();
  *v14 = *(_QWORD *)(a3 + 16);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v17, a7);
  *(_QWORD *)v20 = OrderedSet._find(_:)();
  v20[8] = v21 & 1;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  sub_23835B0D0();
  sub_23835B0B8();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a7);
  result = swift_beginAccess();
  v23 = *(_QWORD *)(a3 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(a3 + 16) = v25;
  return result;
}

uint64_t OrderedSet.applying(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OrderedSet.elements.getter();
  v7 = sub_23835B0D0();
  MEMORY[0x23B831670](MEMORY[0x24BEE12E8], v7);
  sub_23835B2A4();
  swift_bridgeObjectRelease();
  v8 = v14;
  if (!v14)
    return 0;
  swift_bridgeObjectRetain();
  v9 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x23B831670](MEMORY[0x24BEE12D8], v7);
  v10 = OrderedSet.init<A>(_:)((uint64_t)&v14, a4, v7, a5, v9);
  v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  v12 = MEMORY[0x23B8309EC](v8, a4);
  swift_bridgeObjectRelease();
  if (v11 != v12)
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v10;
}

uint64_t BitSet.description.getter(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = (unint64_t *)(a1 + 32);
  if (*(_QWORD *)(a1 + 16))
    v3 = *v2;
  else
    v3 = 0;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 1;
  v7 = MEMORY[0x24BEE1768];
  while (v3)
  {
    if (v5 << 6 < 0)
      goto LABEL_22;
    v9 = __rbit64(v3);
    v3 &= v3 - 1;
    v10 = (v5 << 6) | __clz(v9);
    if ((v6 & 1) == 0)
LABEL_19:
      sub_23835AE90();
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_23835CD60;
    *(_QWORD *)(v8 + 56) = v7;
    *(_QWORD *)(v8 + 32) = v10;
    sub_23835B9D0();
    result = swift_bridgeObjectRelease();
    v6 = 0;
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
    goto LABEL_23;
  v12 = *(_QWORD *)(a1 + 16);
  if (v11 >= v12)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_23835AE90();
    return 91;
  }
  v13 = v2[v11];
  if (v13)
  {
    ++v5;
LABEL_17:
    if (v5 << 6 < 0)
      goto LABEL_24;
    v3 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v5 << 6);
    if ((v6 & 1) == 0)
      goto LABEL_19;
    goto LABEL_5;
  }
  while (1)
  {
    v5 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v5 >= v12)
      goto LABEL_20;
    v13 = v2[v5];
    ++v11;
    if (v13)
      goto LABEL_17;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_238310754()
{
  uint64_t *v0;

  return BitSet.description.getter(*v0);
}

uint64_t TreeSet.isStrictSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;

  v14 = TreeSet.count.getter(a4, a5);
  if (TreeSet.count.getter(a1, a2) >= v14)
    return 0;
  else
    return _HashNode.isSubset<A>(_:of:)(0, a4, a5, a1, a2, a7, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4AE0] + 8, a8) & 1;
}

uint64_t TreeSet.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;

  v16 = TreeSet.count.getter(a4, a5);
  if (TreeDictionary.Keys.count.getter(a1, a2, a3, a7, a8, a9) >= v16)
    return 0;
  else
    return _HashNode.isSubset<A>(_:of:)(0, a4, a5, a1, a2, a7, a8, MEMORY[0x24BEE4AE0] + 8, a9);
}

uint64_t TreeSet.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t AssociatedTypeWitness;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _OWORD v98[3];

  v78 = a4;
  v79 = a2;
  v80 = a3;
  v77 = a1;
  v72 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v74 = (char *)&v58 - v11;
  v12 = sub_23835B334();
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v66 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v63 = (char *)&v58 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v58 - v18;
  v20 = *(_QWORD *)(a5 - 8);
  v21 = MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v62 = (char *)&v58 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v58 - v26;
  v28 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet(0, a5, a7, v31) == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v77, a6);
    swift_dynamicCast();
    v33 = TreeSet.isStrictSuperset(of:)(v91, *((uint64_t *)&v91 + 1), v92, v79, v80, v78, a5, a7);
    swift_release();
    return v33 & 1;
  }
  v59 = v30;
  v60 = v28;
  v67 = v27;
  TreeSet.makeIterator()(v79, &v91);
  v61 = a7;
  v68 = type metadata accessor for TreeSet.Iterator(0, a5, a7, v32);
  TreeSet.Iterator.next()(v68, (uint64_t)v19);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v76(v19, 1, a5) != 1)
  {
    v71 = v20;
    v73 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v73(v67, v19, a5);
    v34 = v72;
    v35 = sub_23835AFB0();
    if (v35 == 2)
    {
      v36 = v61;
      if (qword_2568F09D0 != -1)
        swift_once();
      v37 = MEMORY[0x24BEE4AE0] + 8;
      v81 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x24BEE4AE0] + 8, v36);
      v82 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v77, a6);
      swift_retain();
      sub_23835AF8C();
      swift_getAssociatedConformanceWitness();
      v39 = v66;
      sub_23835B484();
      v40 = v76(v39, 1, a5);
      v41 = (uint64_t)v65;
      if (v40 != 1)
      {
        while (1)
        {
          v73((char *)v41, v39, a5);
          v42 = sub_238358A4C();
          if (!_HashNode.containsKey(_:_:_:)(0, v41, v42, v79, v80, a5, v37, v36))
            break;
          v43 = (_QWORD *)type metadata accessor for _HashNode(0, a5, MEMORY[0x24BEE4AE0] + 8, v36);
          v45 = _HashNode.insert(_:_:_:)(0, v41, v44, v42, v43);
          v46 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
          v46(v41, a5);
          if ((v45 & 1) != 0)
          {
            v47 = v82;
            if (v47 == TreeSet.count.getter(v79, v80))
            {
              (*(void (**)(char *, uint64_t))(v64 + 8))(v74, AssociatedTypeWitness);
              v46((uint64_t)v67, a5);
              goto LABEL_28;
            }
          }
          sub_23835B484();
          if (v76(v39, 1, a5) == 1)
            goto LABEL_10;
        }
        v57 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
        v57(v41, a5);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v74, AssociatedTypeWitness);
        v57((uint64_t)v67, a5);
LABEL_28:
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        v85 = v93;
        v86 = v94;
        v88 = v96;
        v89 = v97;
        v87 = v95;
        v83 = v91;
        v84 = v92;
        sub_2382735AC((uint64_t)&v83);
        swift_release();
        goto LABEL_4;
      }
LABEL_10:
      (*(void (**)(char *, uint64_t))(v64 + 8))(v74, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v67, a5);
      v90[0] = v98[0];
      *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
      v85 = v93;
      v86 = v94;
      v88 = v96;
      v89 = v97;
      v87 = v95;
      v83 = v91;
      v84 = v92;
      sub_2382735AC((uint64_t)&v83);
      swift_release();
    }
    else
    {
      v48 = v35;
      MEMORY[0x24BDAC7A8](v35);
      *(&v58 - 8) = a5;
      *(&v58 - 7) = a6;
      *(&v58 - 6) = v61;
      *(&v58 - 5) = v34;
      v49 = v80;
      *(&v58 - 4) = v79;
      *(&v58 - 3) = v49;
      *(&v58 - 2) = v78;
      if ((sub_23835AFC8() & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v67, a5);
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        v85 = v93;
        v86 = v94;
        v88 = v96;
        v89 = v97;
        v87 = v95;
        v83 = v91;
        v84 = v92;
        sub_2382735AC((uint64_t)&v83);
        goto LABEL_4;
      }
      if ((v48 & 1) != 0)
      {
        v51 = v71;
        v53 = v62;
        v52 = (uint64_t)v63;
        while (1)
        {
          TreeSet.Iterator.next()(v68, v52);
          if (v76((char *)v52, 1, a5) == 1)
            break;
          v73(v53, (char *)v52, a5);
          v54 = sub_23835B034();
          v55 = *(void (**)(char *, uint64_t))(v51 + 8);
          v55(v53, a5);
          if ((v54 & 1) == 0)
          {
            v55(v67, a5);
            v50 = v96;
            v89 = v97;
            v90[0] = v98[0];
            *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
            v85 = v93;
            v86 = v94;
            goto LABEL_24;
          }
        }
        (*(void (**)(char *, uint64_t))(v51 + 8))(v67, a5);
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        v85 = v93;
        v86 = v94;
        v88 = v96;
        v89 = v97;
        v87 = v95;
        v83 = v91;
        v84 = v92;
        sub_2382735AC((uint64_t)&v83);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v52, v70);
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v67, a5);
      v89 = v97;
      v90[0] = v98[0];
      *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
      v85 = v93;
      v86 = v94;
      v50 = v96;
LABEL_24:
      v87 = v95;
      v88 = v50;
      v83 = v91;
      v84 = v92;
      sub_2382735AC((uint64_t)&v83);
    }
    v33 = 1;
    return v33 & 1;
  }
  v90[0] = v98[0];
  *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
  v85 = v93;
  v86 = v94;
  v88 = v96;
  v89 = v97;
  v87 = v95;
  v83 = v91;
  v84 = v92;
  sub_2382735AC((uint64_t)&v83);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v19, v70);
LABEL_4:
  v33 = 0;
  return v33 & 1;
}

BOOL sub_23831114C(uint64_t a1)
{
  uint64_t *v1;

  return TreeSet.contains(_:)(a1, v1[6], v1[7], v1[8], v1[2], v1[4]);
}

uint64_t Deque._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Deque._storage.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t type metadata accessor for Deque(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque);
}

uint64_t static _HashNode.build(level:item1:_:item2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[4];
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a5;
  v32 = a6;
  v28 = a1;
  v29 = a7;
  v30 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v15 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = &v27[-v19];
  v21 = &v27[*(int *)(v18 + 48) - v19];
  v22 = *(_QWORD *)(a8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v22 + 32))(&v27[-v19], a2, a8);
  v23 = *(_QWORD *)(a9 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v23 + 32))(v21, a3, a9);
  v24 = (uint64_t)&v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v17, v20, a8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v23 + 16))(v24, v21, a9);
  if (a4 == v29)
    v25 = static _HashNode._collisionNode(_:_:_:)(a4, (uint64_t)v17, v24, v31, v32, a8, a9, v30);
  else
    v25 = static _HashNode._build(level:item1:_:item2:_:)(v28, (uint64_t)v17, v24, a4, v31, v32, v29, a8, a9, v30);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v20, TupleTypeMetadata2);
  return v25;
}

uint64_t static _HashNode.build(level:child1:_:child2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  v11 = sub_238312C08(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  swift_release();
  return v11;
}

uint64_t static _HashNode.build(level:item1:_:child2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  uint64_t v22;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v15 = (a4 >> a1) & 0x1F;
  v16 = (a7 >> a1) & 0x1F;
  if ((_DWORD)v15 == (_DWORD)v16)
  {
    v19 = (a1 + 5);
    swift_retain();
    v26 = a8;
    v27 = a10;
    v28 = a11;
    v29 = static _HashNode.build(level:item1:_:child2:_:)(v19, a2, a3, a4, a5, a6, a7, a8, a10, a11);
    v30 = v20;
    v22 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v21, v29, 0, 1 << v15, v20, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238312FF8, (uint64_t)v25, a8, a10, MEMORY[0x24BEE4AE0] + 8, a11);
    swift_release();
    swift_release();
  }
  else
  {
    v22 = sub_238312D78(a2, a3, v15, a5, a6, v16, a8, a10, a9, a11);
    swift_release();
  }
  return v22;
}

uint64_t sub_238311564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a3 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1, a2, a5);
}

uint64_t static _HashNode._collisionNode(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v29 = a4;
  v30 = a5;
  v28 = a3;
  v32 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v27 - v17;
  v19 = (char *)&v27 + *(int *)(v16 + 48) - v17;
  v20 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))((char *)&v27 - v17, a2, a6);
  v21 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v19, v28, a7);
  v22 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v18, a6);
  v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 16))(v22, v19, a7);
  v34 = a6;
  v35 = a7;
  v36 = a8;
  v37 = v15;
  v38 = v29;
  v39 = v30;
  v24 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v23, 2, v32, 0, (uint64_t (*)(uint64_t))sub_238312DEC, (uint64_t)v33, a6, a7, MEMORY[0x24BEE4AE0] + 8, a8);
  v25 = *(void (**)(char *, uint64_t))(v31 + 8);
  v25(v18, TupleTypeMetadata2);
  v25(v15, TupleTypeMetadata2);
  return v24;
}

{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  void (*v29)(void);
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;

  v43 = a5;
  v44 = a8;
  v40 = a3;
  v41 = a4;
  v46 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v42 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v38 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v38 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v38 - v20;
  v39 = (char *)&v38 + *(int *)(v19 + 48) - v20;
  v22 = v39;
  v23 = *(_QWORD *)(a6 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  v24((char *)&v38 - v20, a2, a6);
  v25 = *(_QWORD *)(a7 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
  v26(v22, v40, a7);
  v27 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
  v24(v18, v41, a6);
  v26(v27, v43, a7);
  v28 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
  v29 = *(void (**)(void))(v23 + 16);
  v29();
  v30 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v30(v28, v39, a7);
  v31 = v42;
  v32 = &v42[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v29)(v42, v18, a6);
  v33 = ((uint64_t (*)(char *, char *, uint64_t))v30)(v32, v27, a7);
  v49 = a6;
  v50 = a7;
  v34 = v47;
  v51 = v44;
  v52 = v47;
  v53 = v31;
  v35 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v33, 2, v46, 0, (uint64_t (*)(uint64_t))sub_238312E08, (uint64_t)v48, a6, a7, MEMORY[0x24BEE4AE0] + 8, v44);
  v36 = *(void (**)(char *, uint64_t))(v45 + 8);
  v36(v18, TupleTypeMetadata2);
  v36(v21, TupleTypeMetadata2);
  v36(v34, TupleTypeMetadata2);
  v36(v31, TupleTypeMetadata2);
  return v35;
}

uint64_t static _HashNode._emptyNode()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (qword_2568F09D0 != -1)
    swift_once();
  v6 = _HashNode.init(storage:count:)(_emptySingleton, 0, a1, a2, a3);
  swift_retain();
  return v6;
}

uint64_t static _HashNode._regularNode(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v27 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v27 - v16;
  v18 = (char *)&v27 + *(int *)(v15 + 48) - v16;
  v19 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))((char *)&v27 - v16, a1, a4);
  v20 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, a2, a5);
  v21 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v14, v17, a4);
  v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 16))(v21, v18, a5);
  v30 = a4;
  v31 = a5;
  v32 = v27;
  v33 = v14;
  v24 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v23, v22, 1 << a3, 0, 1, 0, sub_238312DFC, (uint64_t)v29, a4, a5, MEMORY[0x24BEE4AE0] + 8, v27);
  v25 = *(void (**)(char *, uint64_t))(v28 + 8);
  v25(v17, TupleTypeMetadata2);
  v25(v14, TupleTypeMetadata2);
  return v24;
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  void (*v30)(void);
  void (*v31)(uint64_t, char *, uint64_t);
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v45 = a3;
  v46 = a6;
  v39 = a2;
  v40 = a4;
  v42 = a5;
  v43 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v44 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v41 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v47 = (uint64_t)&v37 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v37 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v37 - v21;
  v38 = (char *)&v37 + *(int *)(v20 + 48) - v21;
  v23 = v38;
  v24 = *(_QWORD *)(a7 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
  v25((char *)&v37 - v21, a1, a7);
  v26 = *(_QWORD *)(a8 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
  v27(v23, v39, a8);
  v28 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
  v25(v19, v40, a7);
  v27(v28, v42, a8);
  v42 = v47 + *(int *)(TupleTypeMetadata2 + 48);
  v29 = v42;
  v30 = *(void (**)(void))(v24 + 16);
  v30();
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 16);
  v31(v29, v38, a8);
  v32 = v41;
  v33 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v30)(v41, v19, a7);
  v31((uint64_t)v33, v28, a8);
  v49 = a7;
  v50 = a8;
  v51 = v43;
  v52 = v32;
  v34 = static _HashNode._regularNode(_:_:_:_:)(v47, v42, v45, (uint64_t)sub_238287450, (uint64_t)v48, v46, a7, a8, v43);
  v35 = *(void (**)(char *, uint64_t))(v44 + 8);
  v35(v19, TupleTypeMetadata2);
  v35(v22, TupleTypeMetadata2);
  v35(v32, TupleTypeMetadata2);
  return v34;
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = sub_238312E18(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  return v9;
}

uint64_t static _HashNode._regularNode(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x8_t a7)
{
  uint64_t v7;

  v7 = sub_238312B30(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10)
{
  uint64_t v10;

  v10 = sub_238312B90(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  swift_release();
  return v10;
}

{
  uint64_t v10;

  v10 = sub_238312D78(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  return v10;
}

uint64_t sub_238311EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v36 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v34 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v29 - v14;
  v16 = *(int *)(v13 + 48);
  v17 = (char *)&v29 + v16 - v14;
  v18 = a3 + v16;
  v19 = *(_QWORD *)(a5 - 8);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v33((char *)&v29 - v14, a3, a5);
  v20 = *(_QWORD *)(a6 - 8);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v32(v17, v18, a6);
  v21 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v31 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v31(v12, v15, a5);
  v30 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v30(v21, v17, a6);
  v22 = v35;
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
  v23(v35 + *(_QWORD *)(v34 + 72), v12, TupleTypeMetadata2);
  v24 = *(int *)(TupleTypeMetadata2 + 48);
  v25 = &v15[v24];
  v26 = v36 + v24;
  ((void (*)(char *))v33)(v15);
  v32(v25, v26, a6);
  v27 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v31(v12, v15, a5);
  v30(v27, v25, a6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v23)(v22, v12, TupleTypeMetadata2);
}

uint64_t sub_2383120B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t (*v27)(uint64_t);

  v26[2] = a5;
  v27 = a4;
  v26[0] = a1;
  v26[1] = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v26 - v16;
  v18 = *(int *)(v15 + 48);
  v19 = (char *)v26 + v18 - v16;
  v20 = a3 + v18;
  v21 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)v26 - v16, a3, a6);
  v22 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v19, v20, a7);
  v23 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v14, v17, a6);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v19, a7);
  (*(void (**)(_QWORD, char *, uint64_t))(v11 + 32))(v26[0] + *(_QWORD *)(v11 + 72), v14, TupleTypeMetadata2);
  v24 = sub_23835AD4C();
  return v27(v24);
}

uint64_t sub_238312210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v24 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v24 - v15;
  v17 = *(int *)(v14 + 48);
  v18 = (char *)&v24 + v17 - v15;
  v19 = a5 + v17;
  v20 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)&v24 - v15, a5, a6);
  v21 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v19, a7);
  v22 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v13, v16, a6);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v22, v18, a7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v13, TupleTypeMetadata2);
}

uint64_t static _HashNode._regularNode(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  __int32 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v38 = a4;
  v39 = a5;
  v11 = a3;
  v34 = a3;
  v36 = a6;
  v37 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v40 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v15 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v33 - v19;
  v21 = (char *)&v33 + *(int *)(v18 + 48) - v19;
  v22 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))((char *)&v33 - v19, a1, a7);
  v23 = *(_QWORD *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v21, a2, a8);
  v24 = 1 << v11;
  v25 = v36;
  v35 = (1 << v36) | v24;
  v26 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v17, v20, a7);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v21, a8);
  v42 = a7;
  v43 = a8;
  v27 = v37;
  v44 = v37;
  v45 = v34;
  v46 = v25;
  v47 = v17;
  v48 = v38;
  v49 = v39;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1F28);
  v30 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v29, (uint64_t)&v50, v35, 0, 2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238312FB0, (uint64_t)v41, a7, a8, v28, v27);
  v31 = *(void (**)(char *, uint64_t))(v40 + 8);
  v31(v20, TupleTypeMetadata2);
  v31(v17, TupleTypeMetadata2);
  return v30;
}

uint64_t sub_23831253C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unsigned __int8 a3@<W4>, int a4@<W5>, uint64_t a5@<X6>, uint64_t (*a6)(uint64_t)@<X7>, _BOOL4 *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _BOOL4 *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 *v37;
  uint64_t (*v38)(uint64_t);

  v37 = a7;
  v38 = a6;
  v34 = a1;
  v35 = a2;
  v32 = a3;
  v33 = a4;
  v36 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v32 - v17;
  v19 = *(int *)(v16 + 48);
  v20 = (char *)&v32 + v19 - v17;
  v21 = a5 + v19;
  v22 = *(_QWORD *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v32 - v17, a5, a9);
  v23 = *(_QWORD *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v20, v21, a10);
  v24 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v15, v18, a9);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v24, v20, a10);
  v25 = v32 < v33;
  v26 = v32 >= v33;
  if (v32 >= v33)
    v27 = 0;
  else
    v27 = *(_QWORD *)(v12 + 72);
  if (v32 >= v33)
    v28 = *(_QWORD *)(v12 + 72);
  else
    v28 = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v34 + v27, v15, TupleTypeMetadata2);
  v29 = sub_23835AD4C();
  result = v38(v29 + v28);
  v31 = v37;
  *v37 = v26;
  v31[1] = v25;
  return result;
}

uint64_t sub_23831271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  swift_getTupleTypeMetadata2();
  v15 = sub_23835AD4C();
  a5(v15);
  v18[0] = a7;
  v18[1] = a8;
  v16 = type metadata accessor for _HashNode(0, a9, a10, a11);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, v18, v16);
  return swift_retain();
}

uint64_t sub_2383127E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v18 = a5;
  v19 = a6;
  v14 = type metadata accessor for _HashNode(0, a9, a10, a11);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v15 + 32);
  v16(a1, &v18, v14);
  v18 = a7;
  v19 = a8;
  v16(a1 + *(_QWORD *)(v15 + 72), &v18, v14);
  swift_retain();
  return swift_retain();
}

uint64_t static _HashNode._build(level:item1:_:item2:_:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a7;
  v38 = a5;
  v39 = a6;
  v37 = a3;
  v40 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v41 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v15 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v35 - v19;
  v21 = v18;
  v22 = (char *)&v35 + *(int *)(v18 + 48) - v19;
  v23 = *(_QWORD *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))((char *)&v35 - v19, a2, a8);
  v24 = *(_QWORD *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v22, v37, a9);
  v36 = a4;
  v25 = (a4 >> a1) & 0x1F;
  v26 = (v42 >> a1) & 0x1F;
  LODWORD(v37) = v25;
  if ((_DWORD)v25 == (_DWORD)v26)
  {
    v27 = &v17[*(int *)(v21 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v20, a8);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v22, a9);
    v28 = v40;
    v29 = static _HashNode._build(level:item1:_:item2:_:)((a1 + 5), v17, v27, v36, v38, v39, v42, a8, a9, v40);
    v44 = a8;
    v45 = a9;
    v46 = v28;
    v47 = v29;
    v48 = v30;
    v32 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v31, v29, 0, 1 << v37, v30, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238312FF8, (uint64_t)v43, a8, a9, MEMORY[0x24BEE4AE0] + 8, v28);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v21);
    swift_release();
  }
  else
  {
    v33 = (uint64_t)&v17[*(int *)(v21 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v20, a8);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v33, v22, a9);
    v32 = static _HashNode._regularNode(_:_:_:_:)((uint64_t)v17, v33, v37, v38, v39, v26, a8, a9, v40);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v21);
  }
  return v32;
}

uint64_t sub_238312B30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x8_t a7)
{
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a4;
  v10 = a5;
  v11 = a6;
  v12 = a1;
  v13 = a2;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(a7, a1, 0, 1 << a3, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238312FF8, (uint64_t)v8, a4, a5, MEMORY[0x24BEE4AE0] + 8, a6);
}

uint64_t sub_238312B90(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = a7;
  v13 = a8;
  v14 = a10;
  v15 = a1;
  v16 = a2;
  v17 = a4;
  v18 = a5;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(a9, a1, 0, (1 << a6) | (1 << a3), a5 + a2, 0, sub_23831305C, (uint64_t)v11, a7, a8, MEMORY[0x24BEE4AE0] + 8, a10);
}

uint64_t sub_238312C08(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v15 = (a4 >> a1) & 0x1F;
  v16 = (a7 >> a1) & 0x1F;
  if ((_DWORD)v15 != (_DWORD)v16)
    return sub_238312B90(a2, a3, v15, a5, a6, v16, a8, a10, a9, a11);
  v19 = (a1 + 5);
  swift_retain();
  swift_retain();
  v20 = sub_238312C08(v19, a2, a3, a4, a5, a6, a7, a8, a10, a11);
  v22 = v21;
  swift_release();
  v23 = swift_release();
  v29 = a8;
  v30 = a10;
  v31 = a11;
  v32 = v20;
  v33 = v22;
  v25 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v24, v23, 0, 1 << v15, v22, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_238312FF8, (uint64_t)v28, a8, a10, MEMORY[0x24BEE4AE0] + 8, a11);
  swift_release();
  return v25;
}

uint64_t sub_238312D78(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int8x8_t a9, uint64_t a10)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = a7;
  v13 = a8;
  v14 = a10;
  v15 = a1;
  v16 = a2;
  v17 = a4;
  v18 = a5;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(a9, a1, 1 << a3, 1 << a6, a5 + 1, 0, sub_238312FEC, (uint64_t)v11, a7, a8, MEMORY[0x24BEE4AE0] + 8, a10);
}

uint64_t sub_238312DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2383120B4(a1, a2, *(_QWORD *)(v2 + 40), *(uint64_t (**)(uint64_t))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_238312DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_238312210(a1, a2, a3, a4, v4[5], v4[2], v4[3]);
}

uint64_t sub_238312E08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_238311EEC(a1, a2, v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_238312E18(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int8x8_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v32 = a6;
  v30 = a4;
  v31 = a5;
  v29 = a3;
  v27 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v27 - v17;
  v19 = (char *)&v27 + *(int *)(v16 + 48) - v17;
  v20 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))((char *)&v27 - v17, a1, a7);
  v21 = *(_QWORD *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v19, v27, a8);
  v22 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v18, a7);
  *(double *)&v23 = (*(double (**)(char *, char *, uint64_t))(v21 + 16))(v22, v19, a8);
  v34 = a7;
  v35 = a8;
  v36 = a9;
  v37 = v15;
  v24 = sub_238312D78((uint64_t)sub_238287280, (uint64_t)v33, v29, v30, v31, v32, a7, a8, v23, a9);
  v25 = *(void (**)(char *, uint64_t))(v28 + 8);
  v25(v18, TupleTypeMetadata2);
  v25(v15, TupleTypeMetadata2);
  return v24;
}

uint64_t sub_238312FB0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _BOOL4 *a3@<X8>)
{
  uint64_t v3;

  return sub_23831253C(a1, a2, *(_BYTE *)(v3 + 40), *(unsigned __int8 *)(v3 + 41), *(_QWORD *)(v3 + 48), *(uint64_t (**)(uint64_t))(v3 + 56), a3, *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_238312FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_238313068(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23831271C);
}

uint64_t sub_238312FF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[6];
  v9[0] = v1[5];
  v9[1] = v6;
  v7 = type metadata accessor for _HashNode(0, v3, v4, v5);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v9, v7);
  return swift_retain();
}

uint64_t sub_23831305C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_238313068(a1, a2, a3, a4, sub_2383127E8);
}

uint64_t sub_238313068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v5;

  return a5(a1, a2, a3, a4, v5[5], v5[6], v5[7], v5[8], v5[2], v5[3], v5[4]);
}

uint64_t sub_2383130A4(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  uint64_t v11;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v7 = sub_23835AEA8();
    if (v7 < 0)
      __break(1u);
    v4 = v7;
    if (v7)
      goto LABEL_6;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
      v4 = HIBYTE(a2) & 0xF;
    else
      v4 = a1 & 0xFFFFFFFFFFFFLL;
    if (v4)
    {
LABEL_6:
      v5 = (unint64_t)(v4 + 63) >> 6;
      v6 = sub_23835B088();
      *(_QWORD *)(v6 + 16) = v5;
      bzero((void *)(v6 + 32), 8 * v5);
      goto LABEL_11;
    }
  }
  v6 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_11:
  v10[2] = v4;
  v11 = v4 - 1;
  v10[0] = v6 + 32;
  v10[1] = v5;
  v8 = sub_238313284(v10, a1, a2, &v11);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

void sub_23831319C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  int v7;

  if (a2 < 0)
  {
LABEL_14:
    __break(1u);
  }
  else if (a2)
  {
    v4 = (unint64_t)(a2 + 63) >> 6;
    v5 = sub_23835B088();
    *(_QWORD *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), 8 * v4);
    if (a1)
    {
      for (i = a2 - 1; i != -1; --i)
      {
        v7 = *a1;
        if (v7 != 48)
        {
          if (v7 != 49)
          {
            swift_bridgeObjectRelease();
            return;
          }
          if ((i & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_14;
          }
          *(_QWORD *)(v5 + 32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
        }
        ++a1;
      }
    }
  }
}

unint64_t sub_238313284(_QWORD *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD *v18;

  v18 = a1;
  if ((a3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a3) & 0xF;
  else
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 1;
  v8 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  v16 = a3 & 0xFFFFFFFFFFFFFFLL;
  v15 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v10 = 15;
  while (1)
  {
    v11 = v10 & 0xC;
    result = v10;
    if (v11 == v9)
      result = sub_2382A6050(v10, a2, a3);
    v13 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a3 & 0x1000000000000000) != 0)
    {
      result = sub_23835AEE4();
      v14 = result;
      if (v11 != v9)
        goto LABEL_19;
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v17[0] = a2;
      v17[1] = v16;
      v14 = *((_BYTE *)v17 + v13);
      if (v11 != v9)
        goto LABEL_19;
    }
    else
    {
      result = v15;
      if ((a2 & 0x1000000000000000) == 0)
        result = sub_23835B634();
      v14 = *(_BYTE *)(result + v13);
      if (v11 != v9)
      {
LABEL_19:
        if ((a3 & 0x1000000000000000) == 0)
          goto LABEL_20;
        goto LABEL_23;
      }
    }
    result = sub_2382A6050(v10, a2, a3);
    v10 = result;
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_20:
      v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_25;
    }
LABEL_23:
    if (v4 <= v10 >> 16)
      goto LABEL_33;
    result = sub_23835AEB4();
    v10 = result;
LABEL_25:
    if (v14 != 48)
    {
      if (v14 != 49)
        return 0;
      if ((*a4 & 0x8000000000000000) != 0)
        goto LABEL_34;
      *(_QWORD *)(*v18 + ((*a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *a4;
    }
    --*a4;
    if (4 * v4 == v10 >> 14)
      return 1;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_238313470@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = _s19CollectionsInternal8BitArrayVyACSgSScfC_0(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _s19CollectionsInternal8BitArrayVyACSgSScfC_0(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];

  if ((a2 & 0x1000000000000000) != 0)
    return sub_2383130A4(a1, a2);
  if ((a2 & 0x2000000000000000) != 0)
  {
    v12[0] = a1;
    v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v6 = (unsigned __int8 *)v12;
    v7 = HIBYTE(a2) & 0xF;
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v4 = sub_23835B634();
      v5 = v11;
    }
    swift_bridgeObjectRetain();
    v6 = (unsigned __int8 *)v4;
    v7 = v5;
  }
  sub_23831319C(v6, v7);
  v9 = v8;
  swift_bridgeObjectRelease();
  if (v9 == 1)
    return sub_2383130A4(a1, a2);
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t sub_23831356C()
{
  unint64_t result;

  result = qword_2568F1F30;
  if (!qword_2568F1F30)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_2568F1F30);
  }
  return result;
}

uint64_t OrderedSet._find(_:)()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F09C8);
  sub_23835B694();
  return v1;
}

Swift::Int OrderedSet._extractSubset(using:count:extraCapacity:)(int8x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  Swift::Int result;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  int8x8_t *v22;
  uint8x8_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  _QWORD v35[2];
  Swift::Int v36;
  uint64_t v37;

  v16 = *(_QWORD *)(a8 - 8);
  result = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v20 & 1) != 0)
  {
    if (a1 && a2)
    {
      a3 = 0;
      v21 = 8 * a2;
      v22 = a1;
      while (1)
      {
        v23 = (uint8x8_t)vcnt_s8(*v22);
        v23.i16[0] = vaddlv_u8(v23);
        v24 = __OFADD__(a3, v23.u32[0]);
        a3 += v23.u32[0];
        if (v24)
          break;
        ++v22;
        v21 -= 8;
        if (!v21)
          goto LABEL_7;
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    goto LABEL_13;
  }
LABEL_7:
  if (!a3)
  {
LABEL_13:
    v27 = OrderedSet.init(minimumCapacity:persistent:)(a5, 0, a8, a9);
    swift_release();
    swift_release();
    return v27;
  }
  if (a3 != _s19CollectionsInternal4HeapV5countSivg_0())
  {
    result = a3 + a5;
    if (!__OFADD__(a3, a5))
    {
      v35[1] = a6;
      result = OrderedSet.init(minimumCapacity:persistent:)(result, 0, a8, a9);
      v36 = result;
      v37 = v28;
      if (a2 < 1)
        v29 = 0;
      else
        v29 = (uint64_t)*a1;
      v30 = 0;
      while (1)
      {
        if (v29)
        {
          if (v30 << 6 < 0)
            goto LABEL_38;
          v29 &= v29 - 1;
        }
        else
        {
          v33 = v30 + 1;
          if (__OFADD__(v30, 1))
            goto LABEL_39;
          if (v33 >= a2)
          {
LABEL_33:
            swift_release();
            swift_release();
            return v36;
          }
          v34 = a1[v33];
          if (!*(_QWORD *)&v34)
          {
            while (1)
            {
              v30 = v33 + 1;
              if (__OFADD__(v33, 1))
                goto LABEL_37;
              if (v30 >= a2)
                goto LABEL_33;
              v34 = a1[v30];
              ++v33;
              if (v34)
                goto LABEL_20;
            }
          }
          ++v30;
LABEL_20:
          if (v30 << 6 < 0)
            goto LABEL_40;
          v29 = (*(_QWORD *)&v34 - 1) & *(_QWORD *)&v34;
        }
        sub_23835B724();
        v32 = type metadata accessor for OrderedSet(0, a8, a9, v31);
        OrderedSet._appendNew(_:)((uint64_t)v19, v32);
        result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a8);
      }
    }
    goto LABEL_42;
  }
  v25 = OrderedSet._capacity.getter(a6);
  result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (__OFSUB__(v25, result))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v25 - result >= a5)
    return a6;
  v36 = a6;
  v37 = a7;
  if (!__OFADD__(a3, a5))
  {
    type metadata accessor for OrderedSet(0, a8, a9, v26);
    OrderedSet.reserveCapacity(_:)(a3 + a5);
    return v36;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t OrderedSet.init(_uniqueElements:_:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Void __swiftcall OrderedSet._regenerateHashTable()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Int v2;
  int64_t v4;
  Swift::Int v5;

  v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 24) & 0x3FLL;
  }
  else
  {
    v2 = 0;
  }
  if (_s19CollectionsInternal4HeapV5countSivg_0() <= 15 && v2 == 0)
  {
    swift_release();
    *v0 = 0;
  }
  else
  {
    v4 = _s19CollectionsInternal4HeapV5countSivg_0();
    v5 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v4);
    OrderedSet._regenerateHashTable(scale:reservedScale:)(v5, v2);
  }
}

Swift::Void __swiftcall OrderedSet._ensureUnique()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (!*v0 || (swift_isUniquelyReferenced_native() & 1) != 0)
    return;
  v1 = (_QWORD *)*v0;
  if (!*v0)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v2 = v1[2];
  v3 = (v2 & 0x3F) << v2;
  v4 = __OFADD__(v3, 64);
  v5 = v3 + 64;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = v5 - 1;
  v6 = v5 < 1;
  v8 = v5 + 62;
  if (!v6)
    v8 = v7;
  v9 = v8 >> 6;
  type metadata accessor for _HashTable.Storage();
  v10 = (_QWORD *)swift_allocObject();
  v11 = v1[3];
  v10[2] = v2;
  v10[3] = v11;
  memcpy(v10 + 4, v1 + 4, 8 * v9);
  swift_release();
  *v0 = v10;
}

Swift::Void __swiftcall OrderedSet._regenerateExistingHashTable()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*v1)
  {
    v2 = v0;
    OrderedSet._ensureUnique()();
    v3 = *v1;
    if (*v1)
    {
      v5 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD *)(v2 + 24);
      swift_retain();
      sub_2383143A0((_QWORD *)(v3 + 16), v3 + 32, (uint64_t)v1, v5, v4);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t OrderedSet._table.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t OrderedSet._find_inlined(_:)()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F09C8);
  sub_23835B694();
  return v1;
}

void OrderedSet._removeExistingMember(at:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  v8 = *(_QWORD *)(a3 + 16);
  swift_retain();
  v9 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = *v3;
    v12 = *(_QWORD *)(a3 + 24);
    if (v10 < OrderedSet._minimumCapacity.getter(*v4))
    {
      sub_23835B6E8();
      sub_23835B6C4();
      OrderedSet._regenerateHashTable()();
      return;
    }
    if (!v11)
      goto LABEL_7;
    OrderedSet._ensureUnique()();
    v13 = *v4;
    if (*v4)
    {
      swift_retain();
      sub_23831479C((_QWORD *)(v13 + 16), v13 + 32, a2, (uint64_t)v4, a1, v8, v12);
      swift_release();
LABEL_7:
      sub_23835B6E8();
      sub_23835B6C4();
      return;
    }
  }
  __break(1u);
}

uint64_t OrderedSet._scale.getter(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    swift_beginAccess();
    return *(_QWORD *)(v1 + 16) & 0x3FLL;
  }
  return result;
}

uint64_t OrderedSet._reservedScale.getter(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    swift_beginAccess();
    return *(_QWORD *)(v1 + 24) & 0x3FLL;
  }
  return result;
}

Swift::Void __swiftcall OrderedSet._regenerateHashTable(scale:reservedScale:)(Swift::Int scale, Swift::Int reservedScale)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2;
  v10 = v3[1];
  if (reservedScale <= scale)
    v6 = scale;
  else
    v6 = reservedScale;
  v7 = sub_23835B6E8();
  v8 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v7);
  v9 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v10, v6, 0, reservedScale, v7, v8, *(_QWORD *)(v4 + 24));
  swift_release();
  *v3 = v9;
}

uint64_t OrderedSet.elements.getter()
{
  uint64_t v0;

  v0 = sub_23835B6E8();
  swift_retain();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A48], v0);
  return sub_23835B0DC();
}

uint64_t OrderedSet._capacity.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  double v4;

  if (!a1)
    return 15;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16) & 0x3FLL;
  if (v3 < 5)
    return 15;
  v4 = (double)(1 << v3) * 0.75;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < 9.22337204e18)
    return (uint64_t)v4;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal10OrderedSetV10firstIndex2ofSiSgx_tF_0()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedSet.__storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*OrderedSet.__storage.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t OrderedSet._elements.getter()
{
  return swift_retain();
}

uint64_t OrderedSet._elements.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*OrderedSet._elements.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t (*OrderedSet._table.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return sub_238313FDC;
}

uint64_t sub_238313FDC(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *v3 = v2;
    return swift_release();
  }
  else
  {
    result = swift_release();
    *v3 = v2;
  }
  return result;
}

uint64_t OrderedSet.elements.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  swift_release();
  swift_release();
  v11 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_23835B0D0();
  v7 = *(_QWORD *)(a2 + 24);
  v8 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x23B831670](MEMORY[0x24BEE12D8], v6);
  result = OrderedSet.init<A>(_:)((uint64_t)&v11, v5, v6, v7, v8);
  *v2 = result;
  v2[1] = v10;
  return result;
}

void (*OrderedSet.elements.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[2] = a2;
  v5[3] = v2;
  v5[1] = *(_QWORD *)(v2 + 8);
  v5[4] = *(_QWORD *)(a2 + 16);
  v6 = sub_23835B6E8();
  swift_retain();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A48], v6);
  *v5 = sub_23835B0DC();
  sub_23835B070();
  v7 = sub_23835B670();
  swift_release();
  *(_QWORD *)(v2 + 8) = v7;
  return sub_23831418C;
}

void sub_23831418C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_2383141C8((uint64_t *)(*a1)[3], v1, v1[4], *(_QWORD *)(v1[2] + 24));
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t sub_2383141C8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v11;

  v11 = *a2;
  v7 = sub_23835B0D0();
  swift_bridgeObjectRetain();
  v8 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x23B831670](MEMORY[0x24BEE12D8], v7);
  *a1 = OrderedSet.init<A>(_:)((uint64_t)&v11, a3, v7, a4, v8);
  a1[1] = v9;
  swift_release();
  return swift_release();
}

uint64_t OrderedSet._minimumCapacity.getter(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned int v3;
  unint64_t v4;
  double v5;

  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)(result + 16);
    swift_beginAccess();
    v3 = *(_DWORD *)(v1 + 16);
    swift_beginAccess();
    if (((*(_DWORD *)(v1 + 24) ^ v3) & 0x3FLL) != 0)
    {
      swift_beginAccess();
      result = 0;
      v4 = *v2 & 0x3FLL;
      if (v4 >= 5)
      {
        v5 = (double)(1 << v4) * 0.25;
        if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
        {
          if (v5 > -9.22337204e18)
          {
            if (v5 < 9.22337204e18)
              return (uint64_t)v5;
            goto LABEL_12;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_12:
        __break(1u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OrderedSet._bias.getter(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    swift_beginAccess();
    return *(uint64_t *)(v1 + 24) >> 6;
  }
  return result;
}

uint64_t sub_2383143A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  _HashTable.UnsafeHandle.clear()();
  v12 = *(_QWORD *)(a3 + 8);
  v9 = sub_23835B6E8();
  v10 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v9);
  return _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)((uint64_t)&v12, a1, a2, v9, v10, a5);
}

Swift::Bool __swiftcall OrderedSet._isUnique()()
{
  return swift_isUniquelyReferenced_native();
}

uint64_t sub_23831444C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];

  if (a3)
  {
    v9 = (_QWORD *)(a3 + 16);
    v10 = a3 + 32;
    v17[0] = a1;
    v17[1] = a2;
    v11 = sub_23835AD7C();
    swift_retain();
    v12 = MEMORY[0x23B831670](MEMORY[0x24BEE09E0], v11);
    *(_QWORD *)a6 = _HashTable.UnsafeHandle._find<A>(_:in:)(a4, (uint64_t)v17, v9, v10, v11, v12, a5);
    *(_BYTE *)(a6 + 8) = v13 & 1;
    *(_QWORD *)(a6 + 16) = v14;
    return swift_release();
  }
  else
  {
    v16 = sub_23835AD7C();
    MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v16);
    result = sub_23835B25C();
    *(_QWORD *)(a6 + 16) = 0;
  }
  return result;
}

uint64_t sub_238314554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2382C3FE0(a1, a2, a3);
}

uint64_t OrderedSet._bucket(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  if (!a2)
    return 0;
  v6 = (_QWORD *)(a2 + 16);
  v7 = a2 + 32;
  swift_retain();
  sub_238314604(v6, v7, a1, a4, &v9);
  swift_release();
  return v9;
}

void sub_238314604(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v38 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23835B724();
  v12 = sub_23835ABF0();
  v13 = 1 << *a1;
  v14 = __OFSUB__(v13, 1);
  v15 = v13 - 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    v16 = v15 & v12;
    v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v12, a1, a2);
    v19 = v18;
    v30 = a5;
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a4);
    v31 = a1;
    v32 = a2;
    v33 = v16;
    v34 = v17;
    v35 = v19;
    v36 = v21;
    v22 = v30;
    v37 = 0;
    if (v17)
    {
      v23 = -1 << *a1;
      v24 = (v23 ^ ~v17) + ((uint64_t)a1[1] >> 6);
      if (v24 >= ~v23)
        v25 = ~v23;
      else
        v25 = 0;
      if (v24 - v25 == a3)
      {
LABEL_13:
        *v22 = v16;
        return;
      }
      while (1)
      {
        _HashTable.BucketIterator.advance()();
        if (!v34)
          break;
        v26 = -1 << *v31;
        v27 = (v26 ^ ~v34) + ((uint64_t)v31[1] >> 6);
        if (v27 >= ~v26)
          v28 = ~v26;
        else
          v28 = 0;
        if (v27 - v28 == a3)
        {
          v16 = v33;
          goto LABEL_13;
        }
      }
    }
  }
  __break(1u);
}

void sub_23831479C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD v15[2];
  uint64_t v16;

  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a4;
  _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a3, (uint64_t (*)(unint64_t, _QWORD))sub_238314C24, (uint64_t)v14, a1, a2);
  v16 = *(_QWORD *)(a4 + 8);
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else if (a5 + 1 >= a5)
  {
    v15[0] = a5;
    v15[1] = a5 + 1;
    v12 = sub_23835B6E8();
    v13 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v12);
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)((uint64_t)v15, (uint64_t)&v16, a1, a2, v12, v13, a7);
    return;
  }
  __break(1u);
}

uint64_t sub_238314880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23835B724();
  v8 = sub_23835ABF0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
  return v8;
}

uint64_t OrderedSet.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = (unint64_t)(result + 63) >> 6;
    MEMORY[0x24BDAC7A8](result);
    type metadata accessor for OrderedSet(0, a5, a6, v11);
    result = sub_238329A40(v10, (void (*)(char **))sub_238280D68);
    if (v6)
      return sub_238280D84(0, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_238314A2C@<X0>(int8x8_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  int8x8_t *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int8x8_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a7;
  v29 = a2;
  v31 = a1;
  v32 = a5;
  v30 = a8;
  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v15;
  v16 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v16);
  result = sub_23835B16C();
  v18 = v33;
  v19 = v34;
  if (v33 != v34)
  {
    if (v34 >= v33)
      goto LABEL_7;
    __break(1u);
    while (v19 != ++v18)
    {
LABEL_7:
      if ((uint64_t)v18 >= v19)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        return result;
      }
      sub_23835B724();
      v26 = a4(v14);
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a6);
      if (v8)
        return result;
      if ((v26 & 1) != 0)
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_13;
        *(_QWORD *)((char *)*v31 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      }
    }
  }
  v20 = *v31;
  v21 = (uint64_t)v31[1];
  v22 = sub_2382838F8();
  v23 = v29;
  swift_retain();
  swift_retain();
  result = OrderedSet._extractSubset(using:count:extraCapacity:)(v20, v21, 0, 1, v22, v23, a3, a6, v28);
  v24 = v30;
  *v30 = result;
  v24[1] = v25;
  return result;
}

uint64_t type metadata accessor for OrderedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet);
}

uint64_t sub_238314C04@<X0>(int8x8_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_238314A2C(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(uint64_t (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_238314C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_238314880(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t _UnsafeBitSet._Word.init(upTo:)(unint64_t a1)
{
  if (a1 < 0x40)
    return ~(-1 << a1);
  else
    return -1;
}

uint64_t _UnsafeBitSet._Word.formIntersection(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet._Word.contains(_:)(Swift::UInt a1)
{
  unint64_t v1;

  return (v1 >> a1) & 1;
}

uint64_t _UnsafeBitSet._Word.complement()(uint64_t a1)
{
  return ~a1;
}

uint64_t _UnsafeBitSet._Word.union(_:)(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t static _UnsafeBitSet._Word.capacity.getter()
{
  return 64;
}

BOOL _UnsafeBitSet._Word.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t _UnsafeBitSet._Word.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t _UnsafeBitSet._Word.symmetricDifference(_:)(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t static _UnsafeBitSet._Word.empty.getter()
{
  return 0;
}

Swift::UInt_optional __swiftcall _UnsafeBitSet._Word.next()()
{
  unint64_t *v0;
  unint64_t v1;
  Swift::UInt v2;
  Swift::Bool v3;
  Swift::UInt_optional result;

  v1 = *v0;
  if (*v0)
  {
    v2 = __clz(__rbit64(v1));
    *v0 = (v1 - 1) & v1;
  }
  else
  {
    v2 = 0;
  }
  v3 = v1 == 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

uint64_t _UnsafeBitSet._Word.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

unint64_t _UnsafeBitSet._Word.shiftedDown(by:)(char a1, unint64_t a2)
{
  return a2 >> a1;
}

Swift::Bool __swiftcall _UnsafeBitSet._Word.insert(_:)(Swift::UInt a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = 1 << a1;
  result = (*v1 & (1 << a1)) == 0;
  *v1 |= v2;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet._Word.remove(_:)(Swift::UInt a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = 1 << a1;
  result = (*v1 & (1 << a1)) != 0;
  *v1 &= ~v2;
  return result;
}

unint64_t static _UnsafeBitSet._Word.wordCount(forBitCount:)(unint64_t result)
{
  if (result < 0xFFFFFFFFFFFFFFC0)
    return (result + 63) >> 6;
  __break(1u);
  return result;
}

uint64_t _UnsafeBitSet._Word.formUnion(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t _UnsafeBitSet._Word.init(from:to:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = -1;
  if (a2 >= 0x41)
  {
    v3 = -1;
    goto LABEL_5;
  }
  if (a2 != 64)
  {
    v3 = ~(-1 << a2);
LABEL_5:
    if (a1 > 0x40)
      return v3 ^ v2;
    goto LABEL_6;
  }
  v3 = -1;
  if (a1 >= 0x41)
    return v3 ^ v2;
LABEL_6:
  if (a1 <= 0x3F)
    v2 = ~(-1 << a1);
  return v3 ^ v2;
}

uint64_t _UnsafeBitSet._Word.formSymmetricDifference(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.formComplement()()
{
  _QWORD *v0;

  *v0 = ~*v0;
}

uint64_t _UnsafeBitSet._Word.subtract(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

BOOL static _UnsafeBitSet._Word.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL _UnsafeBitSet._Word.isFull.getter(uint64_t a1)
{
  return a1 == -1;
}

uint64_t _UnsafeBitSet._Word.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UnsafeBitSet._Word.value.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _UnsafeBitSet._Word.description.getter()
{
  sub_23826C710();
  return sub_23835AF50();
}

uint64_t sub_238314E38()
{
  sub_23826C710();
  return sub_23835AF50();
}

Swift::UInt sub_238314E78(Swift::Int *a1, uint64_t a2)
{
  uint8x8_t v2;
  Swift::Int v3;
  Swift::UInt value;
  Swift::UInt_optional v6;

  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  v3 = *a1;
  if (*a1 < (unint64_t)v2.u32[0])
  {
    *a1 = 0;
    v6 = UInt._bit(ranked:)(v3);
    if (v6.is_nil)
    {
      __break(1u);
      return v6.value;
    }
    value = v6.value;
  }
  else
  {
    value = 0;
    *a1 -= v2.u32[0];
  }
  v6.value = value;
  return v6.value;
}

uint64_t _UnsafeBitSet._Word.count.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

Swift::UInt sub_238314EF0(uint64_t *a1, uint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  Swift::UInt value;
  Swift::UInt_optional v6;

  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  v3 = *a1;
  if (*a1 < (unint64_t)v2.u32[0])
  {
    *a1 = 0;
    v6 = UInt._bit(ranked:)((unint64_t)v2.u32[0] + ~v3);
    if (v6.is_nil)
    {
      __break(1u);
      return v6.value;
    }
    value = v6.value;
  }
  else
  {
    value = 0;
    *a1 -= v2.u32[0];
  }
  v6.value = value;
  return v6.value;
}

unint64_t _UnsafeBitSet._Word.firstMember.getter(unint64_t a1)
{
  return __clz(__rbit64(a1)) & 0x3F;
}

unint64_t _UnsafeBitSet._Word.lastMember.getter(unint64_t a1)
{
  unint64_t v1;

  v1 = __clz(a1) ^ 0x3F;
  if (a1)
    return v1;
  else
    return 0;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.update(_:to:)(Swift::UInt _, Swift::Bool to)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = 1 << _;
  if (to)
    v4 = *v2 | v3;
  else
    v4 = *v2 & ~v3;
  *v2 = v4;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.insertAll(upTo:)(Swift::UInt upTo)
{
  _QWORD *v1;

  *v1 |= ~(-1 << upTo);
}

Swift::Void __swiftcall _UnsafeBitSet._Word.removeAll(upTo:)(Swift::UInt upTo)
{
  _QWORD *v1;

  *v1 &= -1 << upTo;
}

Swift::Void __swiftcall _UnsafeBitSet._Word.removeAll(through:)(Swift::UInt through)
{
  _QWORD *v1;

  *v1 &= ((-1 << through) - 1) & (-1 << through);
}

Swift::Void __swiftcall _UnsafeBitSet._Word.removeAll(from:)(Swift::UInt from)
{
  _QWORD *v1;

  *v1 &= ~(-1 << from);
}

uint64_t _UnsafeBitSet._Word.underestimatedCount.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

void sub_238315034(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_238315040()
{
  int8x8_t *v0;
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t sub_238315054()
{
  uint64_t *v0;

  return sub_2383153AC(*v0);
}

unint64_t *sub_23831505C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t *v3;

  return sub_23832DA4C(a1, a2, a3, *v3);
}

void sub_238315064(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *v1;
  if (*v1)
  {
    v3 = __clz(__rbit64(v2));
    *v1 = (v2 - 1) & v2;
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 == 0;
}

uint64_t _UnsafeBitSet._Word.hash(into:)()
{
  return sub_23835BA00();
}

uint64_t _UnsafeBitSet._Word.hashValue.getter()
{
  sub_23835B9E8();
  sub_23835BA00();
  return sub_23835BA48();
}

uint64_t _UnsafeBitSet._Word.shiftedUp(by:)(char a1, uint64_t a2)
{
  return a2 << a1;
}

unint64_t sub_238315110()
{
  unint64_t result;

  result = qword_2568F1F38;
  if (!qword_2568F1F38)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet._Word, &type metadata for _UnsafeBitSet._Word);
    atomic_store(result, (unint64_t *)&qword_2568F1F38);
  }
  return result;
}

unint64_t sub_238315158()
{
  unint64_t result;

  result = qword_2568F1F40;
  if (!qword_2568F1F40)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet._Word, &type metadata for _UnsafeBitSet._Word);
    atomic_store(result, (unint64_t *)&qword_2568F1F40);
  }
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitSet._Word()
{
  return &type metadata for _UnsafeBitSet._Word;
}

uint64_t sub_2383151AC(uint64_t result, int8x8_t a2)
{
  unsigned int v2;
  uint8x8_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if ((_DWORD)result)
  {
    v2 = result;
    a2.i32[0] = result;
    v3 = (uint8x8_t)vcnt_s8(a2);
    v3.i16[0] = vaddlv_u8(v3);
    v4 = v3.u32[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1F50);
    v5 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v5);
    v6 = 0;
    v7 = result - 32;
    if (result < 32)
      v7 = result - 25;
    v8 = v7 >> 3;
    v5[2] = v4;
    v5[3] = 2 * v8;
    v9 = v5 + 4;
    v10 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - v4;
    v11 = v8 | 0x8000000000000000;
    do
    {
      if (!v2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v11 == v6)
        goto LABEL_31;
      *((_DWORD *)v9 + 1) = v6;
      v12 = (v2 - 1) & v2;
      *(_BYTE *)v9++ = __clz(__rbit32(v2));
      ++v6;
      v2 = v12;
    }
    while (v4 != v6);
    if (!v12)
      goto LABEL_26;
    while (1)
    {
      if (!v10)
      {
        v13 = v5[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1F50);
        v16 = (_QWORD *)swift_allocObject();
        v17 = _swift_stdlib_malloc_size(v16);
        v18 = v17 - 32;
        if (v17 < 32)
          v18 = v17 - 25;
        v19 = v18 >> 3;
        v16[2] = v15;
        v16[3] = 2 * (v18 >> 3);
        v20 = (unint64_t)(v16 + 4);
        v21 = v5[3] >> 1;
        if (v5[2])
        {
          v22 = v5 + 4;
          if (v16 != v5 || v20 >= (unint64_t)v22 + 8 * v21)
            memmove(v16 + 4, v22, 8 * v21);
          v5[2] = 0;
        }
        v9 = (_QWORD *)(v20 + 8 * v21);
        v10 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        result = swift_release();
        v5 = v16;
      }
      v23 = __OFSUB__(v10--, 1);
      if (v23)
        break;
      *(_BYTE *)v9 = __clz(__rbit32(v12));
      *((_DWORD *)v9++ + 1) = v4;
      LODWORD(v4) = v4 + 1;
      v12 &= v12 - 1;
      if (!v12)
        goto LABEL_26;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
LABEL_26:
  v24 = v5[3];
  if (v24 < 2)
    return (uint64_t)v5;
  v25 = v24 >> 1;
  v23 = __OFSUB__(v25, v10);
  v26 = v25 - v10;
  if (!v23)
  {
    v5[2] = v26;
    return (uint64_t)v5;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_2383153AC(uint64_t result)
{
  unint64_t v1;
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  if (result)
  {
    v1 = result;
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)result);
    v2.i16[0] = vaddlv_u8(v2);
    v3 = v2.u32[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1F48);
    v4 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v4);
    v5 = result - 32;
    if (result < 32)
      v5 = result - 25;
    v6 = v5 >> 3;
    v4[2] = v3;
    v4[3] = 2 * v6;
    v7 = v4 + 4;
    v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    v9 = v6 | 0x8000000000000000;
    do
    {
      if (!v1)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v9)
        goto LABEL_31;
      v10 = (v1 - 1) & v1;
      *v7++ = __clz(__rbit64(v1));
      --v9;
      v1 = v10;
      --v3;
    }
    while (v3);
    if (!v10)
      goto LABEL_26;
    while (1)
    {
      if (!v8)
      {
        v11 = v4[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1F48);
        v14 = (_QWORD *)swift_allocObject();
        v15 = _swift_stdlib_malloc_size(v14);
        v16 = v15 - 32;
        if (v15 < 32)
          v16 = v15 - 25;
        v17 = v16 >> 3;
        v14[2] = v13;
        v14[3] = 2 * (v16 >> 3);
        v18 = (unint64_t)(v14 + 4);
        v19 = v4[3] >> 1;
        if (v4[2])
        {
          v20 = v4 + 4;
          if (v14 != v4 || v18 >= (unint64_t)v20 + 8 * v19)
            memmove(v14 + 4, v20, 8 * v19);
          v4[2] = 0;
        }
        v7 = (_QWORD *)(v18 + 8 * v19);
        v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        result = swift_release();
        v4 = v14;
      }
      v21 = __OFSUB__(v8--, 1);
      if (v21)
        break;
      *v7++ = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      if (!v10)
        goto LABEL_26;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
LABEL_26:
  v22 = v4[3];
  if (v22 < 2)
    return (uint64_t)v4;
  v23 = v22 >> 1;
  v21 = __OFSUB__(v23, v8);
  v24 = v23 - v8;
  if (!v21)
  {
    v4[2] = v24;
    return (uint64_t)v4;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t _HashLevel.descend()(int a1)
{
  return (a1 + 5);
}

uint64_t _HashLevel.shift.getter(uint64_t result)
{
  return result;
}

BOOL _HashLevel.isAtRoot.getter(char a1)
{
  return a1 == 0;
}

BOOL _HashLevel.isAtBottom.getter(unsigned __int8 a1)
{
  return a1 > 0x3Fu;
}

uint64_t static _HashLevel.top.getter()
{
  return 0;
}

uint64_t static _HashLevel.limit.getter()
{
  return 13;
}

BOOL static _HashLevel.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL static _HashLevel.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t _HashLevel.ascend()(int a1)
{
  return (a1 - 5);
}

uint64_t _HashLevel.depth.getter(unsigned __int8 a1)
{
  return (13108 * a1 + 52432) >> 16;
}

uint64_t _HashLevel._shift.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashLevel._shift.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _HashLevel.init(depth:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = (unsigned __int128)(a1 * (__int128)5) >> 64;
  result = 5 * a1;
  if (v1 != result >> 63)
    __break(1u);
  return result;
}

uint64_t static _HashLevel._step.getter()
{
  return 5;
}

unint64_t sub_238315658()
{
  unint64_t result;

  result = qword_2568F1F58;
  if (!qword_2568F1F58)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _HashLevel, &type metadata for _HashLevel);
    atomic_store(result, (unint64_t *)&qword_2568F1F58);
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashLevel()
{
  return &type metadata for _HashLevel;
}

Swift::Void __swiftcall BitArray.resizingShiftLeft(by:)(Swift::Int by)
{
  char *v1;
  int64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  int64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;

  if (!by)
    return;
  v5 = v1;
  if (by >= 1)
  {
    v7 = *((_QWORD *)v1 + 1);
    v8 = v7 + by;
    if (__CFADD__(v7, by))
    {
      __break(1u);
    }
    else if (v8 < 0xFFFFFFFFFFFFFFC0)
    {
      v9 = ((v8 + 63) >> 6) - *(_QWORD *)(*(_QWORD *)v1 + 16);
      if (v9 >= 0)
      {
        sub_23829E648(v9, 0);
        *((_QWORD *)v1 + 1) = v8;
        v1 = *(char **)v1;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v5 = v1;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_7:
          v11 = *((_QWORD *)v1 + 2);
          v15 = v1 + 32;
          v16 = v11;
          v17 = v8;
          sub_2383159BC((uint64_t *)&v15, by);
          *v5 = v1;
          return;
        }
LABEL_18:
        v1 = sub_23826C260((uint64_t)v1);
        *v5 = v1;
        goto LABEL_7;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_17;
  }
  v12 = -by;
  if (__OFSUB__(0, by))
  {
    __break(1u);
    goto LABEL_20;
  }
  v2 = *((_QWORD *)v1 + 1);
  if (v2 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = *(char **)v1;
  v3 = v2 + by;
  if (v2 > v12)
  {
    v13 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v1 = v4;
    if ((v13 & 1) != 0)
    {
LABEL_12:
      v14 = *((_QWORD *)v4 + 2);
      v15 = v4 + 32;
      v16 = v14;
      v17 = v2;
      sub_23835843C(v12, v2, (uint64_t)(v4 + 32), v14, 0);
      *(_QWORD *)v1 = v4;
      sub_2382AAF58(v3);
      return;
    }
LABEL_21:
    v4 = sub_23826C260((uint64_t)v4);
    *(_QWORD *)v1 = v4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v1 + 1) = 0;
}

Swift::Void __swiftcall BitArray.resizingShiftRight(by:)(Swift::Int by)
{
  char *v1;
  _QWORD *v2;
  Swift::Int v3;
  unint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;

  if (!by)
    return;
  v2 = v1;
  v3 = by;
  if (by < 1)
  {
    v3 = -by;
    if (__OFSUB__(0, by))
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v3 < 1)
    {
LABEL_14:
      v1 = *(char **)v1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v2 = v1;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_15:
        v12 = *((_QWORD *)v1 + 2);
        v13 = v2[1];
        v14 = v1 + 32;
        v15 = v12;
        v16 = v13;
        sub_2383159BC((uint64_t *)&v14, v3);
        *v2 = v1;
        return;
      }
LABEL_20:
      v1 = sub_23826C260((uint64_t)v1);
      *v2 = v1;
      goto LABEL_15;
    }
    v8 = *((_QWORD *)v1 + 1);
    v9 = v8 - by;
    if (__CFADD__(v8, v3))
    {
      __break(1u);
    }
    else if (v9 < 0xFFFFFFFFFFFFFFC0)
    {
      v10 = ((v9 + 63) >> 6) - *(_QWORD *)(*(_QWORD *)v1 + 16);
      if (v10 >= 0)
      {
        sub_23829E648(v10, 0);
        *((_QWORD *)v1 + 1) = v9;
        goto LABEL_14;
      }
LABEL_23:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_23;
  }
  v4 = *((_QWORD *)v1 + 1);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = *(char **)v1;
  if (v4 <= by)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)v1 = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v1 + 1) = 0;
  }
  else
  {
    v6 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v1 = v5;
    if ((v6 & 1) == 0)
    {
      v5 = sub_23826C260((uint64_t)v5);
      *(_QWORD *)v1 = v5;
    }
    v7 = *((_QWORD *)v5 + 2);
    v14 = v5 + 32;
    v15 = v7;
    v16 = v4;
    sub_23835843C(v3, v4, (uint64_t)(v5 + 32), v7, 0);
    *(_QWORD *)v1 = v5;
    sub_2382AAF58(v4 - v3);
  }
}

Swift::Void __swiftcall BitArray.maskingShiftLeft(by:)(Swift::Int by)
{
  sub_238315A78(by, (uint64_t (*)(_QWORD *, uint64_t))sub_2383159BC);
}

void sub_2383159BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a2 >= 1)
  {
    v2 = a1[2];
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2 >= a2)
        v3 = a2;
      else
        v3 = a1[2];
      if (v2 >= (unint64_t)a2)
        sub_23835843C(0, v2 - v3, *a1, a1[1], v3);
      v4 = 0;
LABEL_17:
      sub_23834D644(v4, v3);
      return;
    }
    __break(1u);
    goto LABEL_19;
  }
  v5 = -a2;
  if (__OFSUB__(0, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v3 = a1[2];
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3 >= v5)
      v6 = -a2;
    else
      v6 = a1[2];
    if (v5 <= v3)
      sub_23835843C(v6, a1[2], *a1, a1[1], 0);
    v4 = v3 - v6;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall BitArray.maskingShiftRight(by:)(Swift::Int by)
{
  sub_238315A78(by, (uint64_t (*)(_QWORD *, uint64_t))sub_238315AFC);
}

uint64_t sub_238315A78(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  if (result)
  {
    v4 = result;
    v5 = *(char **)v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v2 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v5 = sub_23826C260((uint64_t)v5);
      *(_QWORD *)v2 = v5;
    }
    v7 = *((_QWORD *)v5 + 2);
    v8 = *(_QWORD *)(v2 + 8);
    v9[0] = v5 + 32;
    v9[1] = v7;
    v9[2] = v8;
    result = a2(v9, v4);
    *(_QWORD *)v2 = v5;
  }
  return result;
}

void sub_238315AFC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 >= 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if ((v2 & 0x8000000000000000) == 0)
    {
      if ((uint64_t)v2 >= a2)
        v3 = a2;
      else
        v3 = *(_QWORD *)(a1 + 16);
      if (v2 >= a2)
        sub_23835843C(v3, *(_QWORD *)(a1 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 0);
      v4 = v2 - v3;
LABEL_17:
      sub_23834D644(v4, v2);
      return;
    }
    __break(1u);
    goto LABEL_19;
  }
  v5 = -a2;
  if (__OFSUB__(0, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v6 >= v5)
      v2 = -a2;
    else
      v2 = *(_QWORD *)(a1 + 16);
    if (v5 <= v6)
      sub_23835843C(0, v6 - v2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), v2);
    v4 = 0;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_238315BAC()
{
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835BB44();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return 0x7463694465657254;
}

uint64_t TreeDictionary.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a3;
  v8 = type metadata accessor for TreeDictionary(0, a4, a5, a6);
  v9 = MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>, v8);
  return _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v11, 0, 0, 0, a4, a5, v8, v9);
}

uint64_t sub_238315D04(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, TreeDictionary.description.getter);
}

uint64_t TreeDictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];

  v16[0] = a1;
  v16[1] = a2;
  v16[2] = a3;
  v9 = sub_238315BAC();
  v11 = v10;
  v12 = type metadata accessor for TreeDictionary(0, a4, a5, a6);
  v13 = MEMORY[0x23B831670](&protocol conformance descriptor for TreeDictionary<A, B>, v12);
  v14 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v16, 1, v9, v11, a4, a5, v12, v13);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_238315DCC(_QWORD *a1, uint64_t a2)
{
  return sub_2382AC690(a1, a2, TreeDictionary.debugDescription.getter);
}

uint64_t Rope.builder<A>(removing:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, void (*a5)(_QWORD, _QWORD)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  void (*v52)(_QWORD, _QWORD);
  uint64_t v53;
  void (*v54)(_QWORD, _QWORD, _QWORD);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t AssociatedTypeWitness;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(_QWORD, _QWORD);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v138 = a5;
  v128 = a2;
  v129 = a1;
  v127 = a7;
  v12 = a4[2];
  v11 = a4[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v115 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v114 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v118 = (char *)&v110 - v15;
  v17 = type metadata accessor for Rope._Item(0, v12, v11, v16);
  v124 = *(_QWORD *)(v17 - 8);
  v125 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v112 = (uint64_t)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v113 = (uint64_t)&v110 - v20;
  v22 = type metadata accessor for Rope._Node(255, v12, v11, v21);
  v121 = sub_23835B334();
  v120 = *(_QWORD *)(v121 - 8);
  v23 = MEMORY[0x24BDAC7A8](v121);
  v119 = (char *)&v110 - v24;
  v25 = *(_QWORD *)(v22 - 8);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v117 = (char *)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v122 = (char *)&v110 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v132 = (char *)&v110 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v110 - v32;
  v126 = type metadata accessor for Rope.Builder(0, v12, v11, v34);
  v123 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v135 = (uint64_t *)((char *)&v110 - v35);
  v133 = v12;
  v134 = v11;
  v36 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v110 - v38;
  Rope._invalidateIndices()();
  v131 = (void (*)(_QWORD, _QWORD, _QWORD))a4;
  v40 = (uint64_t)a4;
  v41 = v7;
  Rope.summary.getter(v40, v42, (uint64_t)v39);
  v43 = *(uint64_t (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(a6 + 24);
  v136 = a3;
  v137 = a6;
  v44 = v43(v39, v138, a6);
  v45 = *(void (**)(char *, uint64_t))(v37 + 8);
  v46 = v36;
  v48 = v128;
  v47 = v129;
  v45(v39, v46);
  if (v47 < 0 || v44 < v48)
  {
    __break(1u);
LABEL_19:
    result = (*(uint64_t (**)(char *, uint64_t))(a6 + 8))(v39, v44);
    __break(1u);
    return result;
  }
  if (v47 == v48)
    return Rope.builder<A>(splittingAt:in:)((void (*)(_QWORD, _QWORD))v47, v136, (uint64_t)v131, (uint64_t)v138, v137, v127);
  Rope.Builder.init()(v133, v134, v49, v135);
  a6 = v120;
  v39 = v119;
  v44 = v121;
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v41, v121);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v39, 1, v22) == 1)
    goto LABEL_19;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v33, v39, v22);
  (*(void (**)(uint64_t, uint64_t))(a6 + 8))(v41, v44);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v41, 1, 1, v22);
  v143 = v48;
  v144 = v47;
  v51 = Rope._Node.header.getter();
  v52 = v138;
  v53 = v136;
  v130 = v25;
  if ((v51 & 0xFF0000) != 0)
  {
    v54 = *(void (**)(_QWORD, _QWORD, _QWORD))(v25 + 16);
    v131 = v54;
    v55 = v132;
    v56 = v130;
    while (1)
    {
      v54(v55, v33, v22);
      v57 = *(_QWORD *)v55 + 16;
      v58 = *(_QWORD *)v55
          + ((*(unsigned __int8 *)(v56 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v22);
      v59 = (uint64_t)v52;
      v60 = v22;
      v61 = v133;
      v62 = (unsigned __int16 *)nullsub_1(v57, v58, v133, v60, v134);
      v64 = v63;
      swift_unknownObjectRetain();
      v65 = v61;
      v22 = v60;
      sub_238316970(v62, v64, &v144, v53, &v143, v65, v59, v137, &v139);
      swift_unknownObjectRelease();
      v66 = *(void (**)(char *, uint64_t))(v56 + 8);
      v66(v55, v22);
      v67 = v139;
      v68 = v140;
      v69 = v141;
      v70 = v142;
      if (v139 < v141)
        break;
      Rope._Node._innerSplit(at:into:)(v139, (uint64_t)v135, v22);
      v143 = v70;
      v144 = v68;
      v71 = Rope._Node.header.getter();
      v52 = v138;
      v53 = v136;
      v54 = v131;
      if ((v71 & 0xFF0000) == 0)
        goto LABEL_12;
    }
    v131(v122, v33, v22);
    v109 = v22;
    v89 = v135;
    Rope._Node._removeSubrange<A>(from:to:in:into:)(v67, v68, v69, v70, v136, (uint64_t (*)(uint64_t *, char *, uint64_t))v135, v109, (uint64_t)v138, v137);
    v66(v33, v109);
  }
  else
  {
    v54 = *(void (**)(_QWORD, _QWORD, _QWORD))(v25 + 16);
LABEL_12:
    v72 = v117;
    v131 = v54;
    v54(v117, v33, v22);
    v73 = v22;
    v74 = *v72 + 16;
    v75 = v125;
    v76 = (uint64_t)v33;
    v77 = *v72 + ((*(unsigned __int8 *)(v124 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v125);
    v78 = v133;
    v79 = (unsigned __int16 *)nullsub_1(v74, v77, v133, v75, v134);
    v81 = v80;
    swift_unknownObjectRetain();
    sub_238317178(v79, v81, &v144, v53, v129, v128, v78, (uint64_t)v52, &v139, v137);
    swift_unknownObjectRelease();
    v138 = *(void (**)(_QWORD, _QWORD))(v130 + 8);
    v138(v72, v73);
    v82 = v139;
    v83 = v140;
    v85 = v141;
    v84 = v142;
    v136 = v76;
    v86 = v76;
    v87 = v73;
    v131(v122, v86, v73);
    if (v82 >= v85)
    {
      v90 = v113;
      v91 = v135;
      v111 = v87;
      Rope._Node._leafSplit(at:into:)(v82, (uint64_t)v135, v87, v113);
      v134 = v83;
      v92 = v137;
      v93 = *(void (**)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t))(v137 + 32);
      v94 = v118;
      v93(v84, v90, v52, v137);
      v95 = v112;
      v96 = (uint64_t)v94;
      v97 = v125;
      Rope._Item.split(at:)(v96, v125, v112);
      Rope.Builder._insertAfterTip(_:)(v95, v126, v98, v99);
      v100 = (uint64_t)v114;
      v93(v134, v90, v52, v92);
      Rope._Item.split(at:)(v100, v97, v95);
      v101 = v124;
      v102 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
      v102(v95, v97);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 16))(v95, v90, v97);
      v103 = v126;
      Rope.Builder._insertBeforeTip(_:)(v95, v126, v104, v105);
      v106 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
      v107 = v100;
      v108 = AssociatedTypeWitness;
      v106(v107, AssociatedTypeWitness);
      v106((uint64_t)v118, v108);
      v102(v90, v97);
      v138(v136, v111);
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v123 + 32))(v127, v91, v103);
    }
    v88 = v82;
    v89 = v135;
    Rope._Node._removeSubrange<A>(from:to:in:into:)(v88, v83, v85, v84, v53, (uint64_t (*)(uint64_t *, char *, uint64_t))v135, v73, (uint64_t)v52, v137);
    v138(v136, v73);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v123 + 32))(v127, v89, v126);
}

uint64_t Rope.removeSubrange<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, _QWORD *);
  uint64_t v22;
  void (*v23)(char *, _QWORD *);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v12 = type metadata accessor for Rope.Builder(0, a4[2], a4[3], (uint64_t)a4);
  v32 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v31 = (uint64_t)&v29 - v14;
  v15 = *(a5 - 1);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v29 - v19;
  Rope._invalidateIndices()();
  v21 = *(void (**)(char *, uint64_t, _QWORD *))(v15 + 16);
  v30 = a3;
  v21(v20, a3, a5);
  v21(v18, (uint64_t)v20, a5);
  if (a1 < 0)
  {
    v28 = *(void (**)(char *, _QWORD *))(v15 + 8);
    v28(v18, a5);
    result = ((uint64_t (*)(char *, _QWORD *))v28)(v20, a5);
    goto LABEL_7;
  }
  v29 = a6;
  v22 = Rope.count<A>(in:)((uint64_t)v18, (uint64_t)a4, (uint64_t)a5, a6);
  v23 = *(void (**)(char *, _QWORD *))(v15 + 8);
  v23(v18, a5);
  result = ((uint64_t (*)(char *, _QWORD *))v23)(v20, a5);
  if (v22 < v34)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (a1 != v34)
  {
    v25 = v31;
    Rope.builder<A>(removing:in:)(a1, v34, v30, a4, (void (*)(_QWORD, _QWORD))a5, v29, v31);
    (*(void (**)(uint64_t, _QWORD *))(*(a4 - 1) + 8))(v6, a4);
    v26 = v33;
    Rope.Builder.finalize()(v33, v27, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v25, v26);
  }
  return result;
}

uint64_t Rope.replaceSubrange<A, B>(_:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v27 = a6;
  v28 = a8;
  v25 = a2;
  v26 = a3;
  v29 = a4;
  v30 = a9;
  v13 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Rope.Builder(0, *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v25 - v20;
  Rope._invalidateIndices()();
  Rope.builder<A>(removing:in:)(a1, v25, v26, a5, v27, v28, (uint64_t)v21);
  (*(void (**)(uint64_t, _QWORD *))(*(a5 - 1) + 8))(v9, a5);
  v22 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, a7);
  Rope.Builder.insertBeforeTip<A>(_:)((uint64_t)v15, v18, a7, v30);
  Rope.Builder.finalize()(v18, v23, v9);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v22, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t sub_238316970@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = *a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Rope._Node(0, a6, AssociatedConformanceWitness, v18);
  v20 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v19);
  v21 = v30;
  v29 = a1;
  v31 = a4;
  v22 = a4;
  v23 = a2;
  result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v21, v22, 0, a1, a2, a6, v19, a7, v20, a8);
  if (__OFSUB__(*a5, *a3))
  {
    __break(1u);
  }
  else
  {
    v26 = result;
    v27 = v25;
    result = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v25, *a5 - *a3, v31, 1, v29, v23, a6, v19, a7, v20, a8);
    *a9 = v26;
    a9[1] = v27;
    a9[2] = result;
    a9[3] = v28;
  }
  return result;
}

uint64_t Rope._Node._removeSubrange<A>(from:to:in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t *, char *, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t *, uint64_t);
  unsigned __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t *v61;
  char *v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t *, char *, uint64_t);
  void (*v67)(uint64_t *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  void (*v81)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  void (*v87)(char *, uint64_t *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t TupleTypeMetadata2;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t *, char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;

  v111 = a2;
  v112 = a8;
  v115 = a4;
  v117 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v105 = (uint64_t)&v95 - v13;
  v15 = *(_QWORD *)(a7 + 16);
  v14 = *(_QWORD *)(a7 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v101 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v102 = AssociatedTypeWitness;
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v100 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v107 = (char *)&v95 - v19;
  v21 = type metadata accessor for Rope._Item(255, v15, v14, v20);
  v22 = swift_getTupleTypeMetadata2();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v114 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v95 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v95 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v32 = MEMORY[0x24BDAC7A8](v31);
  result = MEMORY[0x24BDAC7A8](v32);
  v40 = (char *)&v95 - v36;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v103 = v35;
  v104 = v34;
  v97 = v39;
  v98 = result;
  v99 = v38;
  v96 = v30;
  v110 = a5;
  v118 = v37;
  v113 = *(void (**)(char *, uint64_t *, uint64_t))(v37 + 16);
  v113((char *)&v95 - v36, v119, a7);
  v109 = v15;
  v42 = (void (*)(char *, uint64_t *, uint64_t))type metadata accessor for Rope.Builder(0, v15, v14, v41);
  v116 = a6;
  Rope.Builder._insertBeforeTip(slots:in:)(0, a1, v40, (uint64_t)v42);
  v43 = Rope._Node.header.getter();
  v44 = v117;
  if (v43 <= v117)
    goto LABEL_5;
  result = Rope._Node.header.getter();
  v45 = (unsigned __int16)result;
  if ((unsigned __int16)result <= v44)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v113(v40, v119, a7);
  Rope.Builder._insertAfterTip(slots:in:)(v44 + 1, v45, v40, (uint64_t)v42);
LABEL_5:
  v46 = v119;
  v47 = Rope._Node.header.getter();
  v48 = *v46;
  v108 = a1;
  if ((v47 & 0xFF0000) != 0)
  {
    v49 = v48 + ((*(unsigned __int8 *)(v118 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a7);
    v50 = v109;
    v51 = (unsigned __int16 *)nullsub_1(v48 + 16, v49, v109, a7, v14);
    v53 = v52;
    swift_unknownObjectRetain();
    v54 = v105;
    v55 = v53;
    v57 = v111;
    v56 = v112;
    v58 = v115;
    sub_238317CBC(v51, v55, v108, v117, v50, v105, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
    swift_unknownObjectRelease();
    v59 = v54 + *(int *)(TupleTypeMetadata2 + 48);
    v60 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 32);
    v60(v40, v54, a7);
    v61 = (uint64_t *)v104;
    v60(v104, v59, a7);
    v62 = v103;
    v63 = (void (*)(uint64_t, uint64_t, uint64_t))v113;
    v113(v103, (uint64_t *)v40, a7);
    v64 = v57;
    v65 = v110;
    v66 = v116;
    Rope._Node.removeSuffix<A>(from:in:into:)(v64, v110, v116, a7, v56, a9);
    v63((uint64_t)v62, (uint64_t)v61, a7);
    Rope._Node.removePrefix<A>(upTo:in:into:)(v58, v65, v66, a7, v56, a9);
    v67 = *(void (**)(uint64_t *, uint64_t))(v118 + 8);
    v67(v119, a7);
    v67(v61, a7);
    return ((uint64_t (*)(char *, uint64_t))v67)(v40, a7);
  }
  else
  {
    v95 = v27;
    v68 = v48 + ((*(unsigned __int8 *)(v114 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v21);
    v69 = v109;
    v70 = (unsigned __int16 *)nullsub_1(v48 + 16, v68, v109, v21, v14);
    v72 = v71;
    swift_unknownObjectRetain();
    v73 = v97;
    v74 = v72;
    v113 = v42;
    v76 = v111;
    v75 = v112;
    sub_238317CBC(v70, v74, v108, v44, v69, v97, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
    swift_unknownObjectRelease();
    v77 = v73 + *(int *)(v98 + 48);
    v78 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 32);
    v79 = v96;
    v78(v96, v73, v21);
    v80 = v95;
    v78(v95, v77, v21);
    v81 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(a9 + 32);
    v82 = (uint64_t)v107;
    v81(v76, v79, v75, a9);
    v83 = (uint64_t)v100;
    v81(v115, v80, v75, a9);
    v84 = v99;
    Rope._Item.split(at:)(v82, v21, v99);
    v85 = v114;
    v86 = *(void (**)(uint64_t, uint64_t))(v114 + 8);
    v86(v84, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v84, v79, v21);
    v87 = v113;
    Rope.Builder._insertBeforeTip(_:)(v84, (uint64_t)v113, v88, v89);
    v90 = v95;
    Rope._Item.split(at:)(v83, v21, v84);
    Rope.Builder._insertAfterTip(_:)(v84, (uint64_t)v87, v91, v92);
    (*(void (**)(uint64_t *, uint64_t))(v118 + 8))(v119, a7);
    v93 = v102;
    v94 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
    v94(v83, v102);
    v94((uint64_t)v107, v93);
    v86((uint64_t)v90, v21);
    return ((uint64_t (*)(char *, uint64_t))v86)(v79, v21);
  }
}

uint64_t sub_238317178@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;

  v16 = *a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Rope._Item(0, a7, AssociatedConformanceWitness, v18);
  v20 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v19);
  v21 = v16;
  v22 = a4;
  v23 = a4;
  v30 = a1;
  v24 = a2;
  result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v21, v23, 0, a1, a2, a7, v19, a8, v20, a10);
  if (__OFSUB__(a6, a5))
  {
    __break(1u);
  }
  else
  {
    v27 = result;
    v28 = v26;
    result = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v26, a6 - a5, v22, 1, v30, v24, a7, v19, a8, v20, a10);
    *a9 = v27;
    a9[1] = v28;
    a9[2] = result;
    a9[3] = v29;
  }
  return result;
}

uint64_t Rope._Node.removeSuffix<A>(from:in:into:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  void (*v79)(uint64_t *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];

  v82 = a3;
  v83 = a5;
  v84 = a2;
  v11 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v67 - v14;
  v80 = v11;
  v81 = v10;
  v73 = type metadata accessor for Rope._Item(0, v11, v10, v16);
  v75 = *(_QWORD *)(v73 - 8);
  v17 = MEMORY[0x24BDAC7A8](v73);
  v71 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v72 = (uint64_t)&v67 - v20;
  v21 = *(_QWORD *)(a4 - 8);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v67 - v25;
  v79 = *(void (**)(uint64_t *, char *, uint64_t))(v21 + 16);
  v79((uint64_t *)((char *)&v67 - v25), v6, a4);
  v87[0] = a1;
  if (a1 <= 0)
  {
    v37 = *(void (**)(char *, uint64_t))(v21 + 8);
    v37(v6, a4);
  }
  else
  {
    v68 = v15;
    v69 = v13;
    v70 = AssociatedTypeWitness;
    v74 = v6;
    v27 = &v26[*(int *)(a4 + 36)];
    v77 = *(uint64_t (**)(void))(a6 + 24);
    v78 = (uint64_t)v27;
    if (v77() <= a1)
    {
LABEL_10:
      v79((uint64_t *)v24, v26, a4);
      v64 = type metadata accessor for Rope.Builder(0, v80, v81, v63);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v24, v64, v65, v66);
      v37 = *(void (**)(char *, uint64_t))(v21 + 8);
    }
    else
    {
      v76 = a6;
      if ((Rope._Node.header.getter() & 0xFF0000) == 0)
      {
LABEL_8:
        v39 = (void (*)(char *, char *, uint64_t))v79;
        v79((uint64_t *)v24, v26, a4);
        v40 = *(_QWORD *)v24 + 16;
        v41 = *(_QWORD *)v24
            + ((*(unsigned __int8 *)(v75 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
        v42 = v73;
        MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v73);
        v43 = v80;
        v44 = nullsub_1(v40, v41, v80, v42, v81);
        v46 = v45;
        swift_unknownObjectRetain();
        v47 = (unsigned __int16 *)v44;
        v48 = v83;
        v49 = v43;
        v50 = v76;
        sub_238318D28(v47, v46, v87, v84, v49, v83, v76, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, &v85, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, 0);
        swift_unknownObjectRelease();
        v51 = *(void (**)(char *, uint64_t))(v21 + 8);
        v51(v24, a4);
        v52 = v85;
        v78 = v86;
        v39(v24, v26, a4);
        v53 = v72;
        Rope._Node._leafRemoveSuffix(returning:into:)(v52, (uint64_t)v82, a4, v72);
        v54 = (uint64_t)v68;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 32))(v78, v53, v48, v50);
        v55 = v71;
        Rope._Item.split(at:)(v54, v42, v71);
        v56 = v75;
        v57 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
        v57(v55, v42);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v53, v42);
        v59 = type metadata accessor for Rope.Builder(0, v80, v81, v58);
        Rope.Builder._insertBeforeTip(_:)(v55, v59, v60, v61);
        v51(v74, a4);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v54, v70);
        v57(v53, v42);
        return ((uint64_t (*)(char *, uint64_t))v51)(v26, a4);
      }
      v28 = v83;
      while (1)
      {
        v79((uint64_t *)v24, v26, a4);
        v29 = *(_QWORD *)v24 + 16;
        v30 = *(_QWORD *)v24
            + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
        MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a4);
        v31 = v80;
        v32 = (unsigned __int16 *)nullsub_1(v29, v30, v80, a4, v81);
        v34 = v33;
        swift_unknownObjectRetain();
        v35 = v31;
        v36 = v76;
        sub_238318D28(v32, v34, v87, v84, v35, v28, v76, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, &v85, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, 1u);
        swift_unknownObjectRelease();
        v37 = *(void (**)(char *, uint64_t))(v21 + 8);
        v37(v24, a4);
        v38 = v86;
        v87[0] = v86;
        Rope._Node._innerRemoveSuffix(descending:into:)(v85, v82, a4);
        if (v38 < 1)
          break;
        if (v38 >= ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v77)(v78, v28, v36))
          goto LABEL_10;
        if ((Rope._Node.header.getter() & 0xFF0000) == 0)
          goto LABEL_8;
      }
    }
    v37(v74, a4);
  }
  return ((uint64_t (*)(char *, uint64_t))v37)(v26, a4);
}

uint64_t Rope._Node.removePrefix<A>(upTo:in:into:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t (*v80)(void);
  char *v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t (*v85)(_QWORD *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[2];

  v85 = a3;
  v13 = *(_QWORD *)(a4 + 16);
  v12 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v75 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v73 = (char *)&v68 - v15;
  v84 = v13;
  v86 = v12;
  v17 = type metadata accessor for Rope._Item(0, v13, v12, v16);
  v76 = *(_QWORD *)(v17 - 8);
  v77 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v71 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v72 = (uint64_t)&v68 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v82 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v68 - v24;
  v87 = v26;
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v78 = v6;
  v83 = v27;
  v27((char *)&v68 - v24, v6, a4);
  v90[0] = a1;
  if (a1 < 1)
  {
LABEL_8:
    v64 = type metadata accessor for Rope.Builder(0, v84, v86, v28);
    sub_2382B4A18((uint64_t)v25, v64, v65, v66);
    v41 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v41((uint64_t)v78, a4);
    v30 = v25;
    return ((uint64_t (*)(char *, uint64_t))v41)(v30, a4);
  }
  v29 = &v25[*(int *)(a4 + 36)];
  v80 = *(uint64_t (**)(void))(a6 + 24);
  v81 = v29;
  v30 = v25;
  if (v80() <= a1)
  {
    v41 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
LABEL_10:
    v41((uint64_t)v78, a4);
  }
  else
  {
    v31 = a2;
    v79 = a6;
    while ((Rope._Node.header.getter() & 0xFF0000) != 0)
    {
      v32 = v82;
      v83(v82, v30, a4);
      v33 = *v32 + 16;
      v34 = *v32 + ((*(unsigned __int8 *)(v87 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a4);
      v35 = v84;
      v36 = (unsigned __int16 *)nullsub_1(v33, v34, v84, a4, v86);
      v38 = v37;
      swift_unknownObjectRetain();
      v39 = v35;
      v25 = v30;
      v40 = v79;
      sub_238318D28(v36, v38, v90, v31, v39, a5, v79, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, &v88, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, 1u);
      swift_unknownObjectRelease();
      v41 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      v41((uint64_t)v32, a4);
      v42 = v89;
      v90[0] = v89;
      Rope._Node._innerRemovePrefix(descending:into:)(v88, v85, a4);
      if (v42 < 1)
        goto LABEL_8;
      if (v42 >= ((uint64_t (*)(char *, uint64_t, uint64_t))v80)(v81, a5, v40))
        goto LABEL_10;
    }
    v43 = v82;
    v83(v82, v30, a4);
    v44 = *(_QWORD *)v43 + 16;
    v45 = *(_QWORD *)v43 + ((*(unsigned __int8 *)(v76 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    v46 = a5;
    v69 = a5;
    v47 = v77;
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v77);
    v70 = v31;
    v48 = v84;
    v49 = (unsigned __int16 *)nullsub_1(v44, v45, v84, v47, v86);
    v51 = v50;
    swift_unknownObjectRetain();
    v52 = v46;
    v53 = v79;
    sub_238318D28(v49, v51, v90, v31, v48, v52, v79, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, &v88, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, 1u);
    swift_unknownObjectRelease();
    v41 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v41((uint64_t)v43, a4);
    v54 = v88;
    v55 = v89;
    v83(v43, v30, a4);
    v56 = v72;
    Rope._Node._leafRemovePrefix(returning:into:)(v54, (uint64_t)v85, a4, v72);
    v57 = (uint64_t)v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 32))(v55, v56, v69, v53);
    v58 = v71;
    v59 = v77;
    Rope._Item.split(at:)(v57, v77, v71);
    v61 = type metadata accessor for Rope.Builder(0, v48, v86, v60);
    Rope.Builder._insertAfterTip(_:)(v58, v61, v62, v63);
    v41((uint64_t)v78, a4);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v57, v75);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v56, v59);
  }
  return ((uint64_t (*)(char *, uint64_t))v41)(v30, a4);
}

uint64_t sub_238317CBC@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), uint64_t a9)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v24)(uint64_t, uint64_t, uint64_t);

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = a8(255, a5, AssociatedConformanceWitness);
  v16 = a6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v17 = MEMORY[0x23B831670](a9, v15);
  v18 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v15, AssociatedConformanceWitness, v17);
  v19 = *(_QWORD *)(v15 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v24(a6, v18 + v20 * a3, v15);
  v21 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v15, AssociatedConformanceWitness, v17) + v20 * a4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v24)(v16, v21, v15);
}

uint64_t Rope._Node._innerRemoveSuffix(descending:into:)(uint64_t a1, uint64_t (*a2)(uint64_t *, char *, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t AssociatedConformanceWitness;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t *, char *, uint64_t);
  uint64_t v65;
  uint64_t *v66;

  v64 = (uint64_t (*)(uint64_t *, char *, uint64_t))a2;
  v5 = *(_QWORD *)(a3 + 16);
  v65 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v61 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v61 - v11;
  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char **)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v61 - v19;
  if (a1 == 1)
  {
    v62 = *(_QWORD *)(v13 + 32);
    v63 = (uint64_t)v18;
    ((void (*)(_QWORD *, uint64_t *, uint64_t))v62)(v16, v66, a3);
    v30 = *v16 + 16;
    v31 = *v16 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
    v61 = v20;
    v32 = v65;
    v33 = (unsigned __int16 *)nullsub_1(v30, v31, v5, a3, v65);
    v35 = v34;
    swift_unknownObjectRetain();
    sub_23831940C(v33, v35, v5, v32, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, (uint64_t)v12);
    swift_unknownObjectRelease();
    v36 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
    v36(v16, a3);
    v37 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    v38 = (uint64_t)v61;
    v39 = v12;
    v40 = (void (*)(uint64_t, char *, uint64_t))v62;
    ((void (*)(char *, char *, uint64_t))v62)(v61, v39, a3);
    v41 = v63;
    v40(v63, v37, a3);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16))(v16, v38, a3);
    v43 = type metadata accessor for Rope.Builder(0, v5, v32, v42);
    Rope.Builder._insertBeforeTip(_:)((uint64_t)v16, v43, v44, v45);
    v36((_QWORD *)v38, a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v40)(v66, v41, a3);
  }
  else if (a1)
  {
    v63 = (uint64_t)v18;
    v46 = v66;
    Rope._Node.ensureUnique()();
    if ((unsigned __int16)Rope._Node.header.getter() - 1 > a1)
    {
      v47 = *v46;
      v48 = *v46 + 16;
      v49 = v47 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
      v50 = v5;
      v61 = (char *)v5;
      v51 = v65;
      v52 = (unsigned __int16 *)nullsub_1(v48, v49, v50, a3, v65);
      v54 = v53;
      swift_unknownObjectRetain();
      sub_2383194F0(v52, v54, a1, (uint64_t)v61, v51, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
      swift_unknownObjectRelease();
      v5 = (uint64_t)v61;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v8, AssociatedTypeWitness);
    }
    Rope._Node._removeNode(at:)(a1, a3, (uint64_t)v20);
    sub_23835B994();
    v56 = v63;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v63, v20, a3);
    v58 = type metadata accessor for Rope.Builder(0, v5, v65, v57);
    Rope.Builder._insertBeforeTip(_:)(v56, v58, v59, v60);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, a3);
  }
  else
  {
    v64 = *(uint64_t (**)(uint64_t *, char *, uint64_t))(v13 + 32);
    v21 = v18;
    v22 = v66;
    v64(v18, (char *)v66, a3);
    v23 = *v21 + 16;
    v24 = *v21 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
    v25 = v65;
    v26 = (unsigned __int16 *)nullsub_1(v23, v24, v5, a3, v65);
    v28 = v27;
    swift_unknownObjectRetain();
    sub_238319374(v26, v28, v5, v25, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, (uint64_t)v20);
    swift_unknownObjectRelease();
    (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v21, a3);
    return v64(v22, v20, a3);
  }
}

uint64_t Rope._Node._leafRemoveSuffix(returning:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t AssociatedConformanceWitness;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD *, uint64_t);
  void (*v72)(_QWORD *, _QWORD *, uint64_t);
  char *v73;
  unsigned __int16 *v74;
  uint64_t AssociatedTypeWitness;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;

  v4 = a3;
  v76 = a2;
  v77 = (char *)a4;
  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v74 = (unsigned __int16 *)((char *)&v72 - v10);
  v80 = *(_QWORD *)(v4 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v73 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (void (**)(_QWORD *, _QWORD *, uint64_t))((char *)&v72 - v13);
  v78 = v7;
  v79 = v6;
  v16 = type metadata accessor for Rope._Item(255, v7, v6, v15);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v20 = (char *)&v72 - v19;
  v21 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x24BDAC7A8](v18);
  v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v72 - v25;
  if (a1 == 1)
  {
    v36 = *v81;
    v37 = *v81 + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v16);
    v38 = v37;
    v39 = v78;
    AssociatedTypeWitness = v4;
    v40 = v79;
    v74 = (unsigned __int16 *)nullsub_1(v36 + 16, v38, v78, v16, v79);
    v42 = v41;
    swift_unknownObjectRetain();
    v43 = v42;
    v44 = v39;
    sub_23831940C(v74, v43, v39, v40, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, (uint64_t)v20);
    swift_unknownObjectRelease();
    v45 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
    v46 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v46(v26, v20, v16);
    v46(v77, v45, v16);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v16);
    v48 = type metadata accessor for Rope.Builder(0, v44, v40, v47);
    Rope.Builder._insertBeforeTip(_:)((uint64_t)v24, v48, v49, v50);
    (*(void (**)(_QWORD *, uint64_t))(v80 + 8))(v81, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v16);
  }
  else if (a1)
  {
    v51 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v80 + 16);
    v51(v14, v81, v4);
    Rope._Node.ensureUnique()();
    if ((unsigned __int16)Rope._Node.header.getter() - 1 > a1)
    {
      v52 = *v14 + 16;
      v53 = *v14 + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v16);
      v54 = v78;
      v55 = v16;
      v56 = v4;
      v57 = v79;
      v58 = (unsigned __int16 *)nullsub_1(v52, v53, v78, v55, v79);
      v60 = v59;
      swift_unknownObjectRetain();
      v72 = v51;
      v61 = v74;
      sub_2383194F0(v58, v60, a1, v54, v57, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
      swift_unknownObjectRelease();
      v4 = v56;
      v62 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(unsigned __int16 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v61, v62, AssociatedConformanceWitness);
      v64 = v61;
      v51 = v72;
      (*(void (**)(unsigned __int16 *, uint64_t))(v8 + 8))(v64, v62);
    }
    v65 = v74;
    Rope._Node._removeItem(at:)((uint64_t)v77, (uint64_t)v74, a1, v4);
    (*(void (**)(unsigned __int16 *, uint64_t))(v8 + 8))(v65, AssociatedTypeWitness);
    v66 = (uint64_t)v73;
    v51(v73, v14, v4);
    v68 = type metadata accessor for Rope.Builder(0, v78, v79, v67);
    Rope.Builder._insertBeforeTip(_:)(v66, v68, v69, v70);
    v71 = *(void (**)(_QWORD *, uint64_t))(v80 + 8);
    v71(v81, v4);
    return ((uint64_t (*)(_QWORD *, uint64_t))v71)(v14, v4);
  }
  else
  {
    v27 = v81;
    v28 = *v81 + 16;
    v29 = *v81 + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v16);
    v31 = v78;
    v30 = v79;
    v32 = (unsigned __int16 *)nullsub_1(v28, v29, v78, v16, v79);
    v34 = v33;
    swift_unknownObjectRetain();
    sub_238319374(v32, v34, v31, v30, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, (uint64_t)v77);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v80 + 8))(v27, v4);
  }
}

uint64_t Rope._Node._innerRemovePrefix(descending:into:)(uint64_t a1, uint64_t (*a2)(_QWORD *, char *, uint64_t), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t AssociatedConformanceWitness;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t TupleTypeMetadata2;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(_QWORD *, char *, uint64_t);
  uint64_t (*v76)(_QWORD *, char *, uint64_t);
  uint64_t v77;

  v76 = a2;
  v6 = *(_QWORD *)(a3 + 16);
  v77 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v71 = (uint64_t)&v66 - v9;
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v75 = (uint64_t (*)(_QWORD *, char *, uint64_t))AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](v8);
  v73 = (char *)&v66 - v10;
  v70 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x24BDAC7A8](v70);
  v69 = (uint64_t)&v66 - v12;
  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t *)((char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (uint64_t *)((char *)&v66 - v18);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v66 - v20;
  v22 = v3;
  if ((unsigned __int16)Rope._Node.header.getter() - 1 == a1)
  {
    v76 = *(uint64_t (**)(_QWORD *, char *, uint64_t))(v13 + 32);
    v76(v19, (char *)v3, a3);
    v23 = *v19 + 16;
    v24 = *v19 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
    v25 = v77;
    v26 = (unsigned __int16 *)nullsub_1(v23, v24, v6, a3, v77);
    v28 = v27;
    swift_unknownObjectRetain();
    sub_2383195B0(v26, v28, v6, v25, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, (uint64_t)v21);
    swift_unknownObjectRelease();
    (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v19, a3);
    return v76(v3, v21, a3);
  }
  else
  {
    v30 = a1;
    v68 = v21;
    if ((unsigned __int16)Rope._Node.header.getter() - 2 == a1)
    {
      v75 = *(uint64_t (**)(_QWORD *, char *, uint64_t))(v13 + 32);
      v67 = v3;
      v75(v16, (char *)v3, a3);
      v31 = *v16 + 16;
      v32 = *v16 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
      v33 = v77;
      v34 = (unsigned __int16 *)nullsub_1(v31, v32, v6, a3, v77);
      v36 = v35;
      swift_unknownObjectRetain();
      v37 = v69;
      sub_23831967C(v34, v36, v6, v33, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, v69);
      swift_unknownObjectRelease();
      v38 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
      v38(v16, a3);
      v39 = v37 + *(int *)(v70 + 48);
      v40 = v68;
      v41 = v37;
      v42 = v75;
      v75(v68, (char *)v41, a3);
      v42(v19, (char *)v39, a3);
      v44 = type metadata accessor for Rope.Builder(0, v6, v33, v43);
      sub_2382B4A18((uint64_t)v19, v44, v45, v46);
      v38(v19, a3);
      return v42(v67, v40, a3);
    }
    else
    {
      Rope._Node.ensureUnique()();
      v47 = *v3;
      v48 = *v22 + 16;
      v66 = v13;
      v49 = v47 + ((*(unsigned __int8 *)(v13 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
      v50 = v77;
      v51 = (unsigned __int16 *)nullsub_1(v48, v49, v6, a3, v77);
      v53 = v52;
      swift_unknownObjectRetain();
      v54 = v71;
      sub_2383197B4(v51, v53, v30, v6, v50, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, v71);
      swift_unknownObjectRelease();
      v55 = v73;
      v56 = v54 + *(int *)(TupleTypeMetadata2 + 48);
      v58 = v74;
      v57 = (void (*)(_QWORD, _QWORD, _QWORD))v75;
      (*(void (**)(char *, uint64_t, uint64_t (*)(_QWORD *, char *, uint64_t)))(v74 + 32))(v73, v54, v75);
      v59 = v66;
      v60 = (uint64_t)v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v68, v56, a3);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, _QWORD, uint64_t))(AssociatedConformanceWitness + 56))(v55, v57, AssociatedConformanceWitness);
      sub_23835B994();
      v63 = type metadata accessor for Rope.Builder(0, v6, v50, v62);
      sub_2382B4A18(v60, v63, v64, v65);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, a3);
      return (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v58 + 8))(v55, v57);
    }
  }
}

uint64_t sub_238318D28@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(_QWORD, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v18 = *a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = a8(0, a5, AssociatedConformanceWitness);
  v21 = MEMORY[0x23B831670](a10, v20);
  result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v18, a4, a11, a1, a2, a5, v20, a6, v21, a7);
  *a9 = result;
  a9[1] = v23;
  return result;
}

uint64_t Rope._Node._leafRemovePrefix(returning:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(uint64_t, char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, _QWORD *, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t AssociatedConformanceWitness;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *, uint64_t);
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t TupleTypeMetadata2;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v83 = a2;
  v84 = a4;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Rope._Item(255, v7, v8, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v75 = (uint64_t)&v70 - v13;
  v82 = AssociatedTypeWitness;
  v79 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v78 = (char *)&v70 - v15;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v77 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = swift_getTupleTypeMetadata2();
  v18 = MEMORY[0x24BDAC7A8](v72);
  v20 = (char *)&v70 - v19;
  v21 = *(_QWORD *)(v11 - 8);
  v22 = MEMORY[0x24BDAC7A8](v18);
  v73 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v74 = (char *)&v70 - v24;
  v85 = a3;
  if ((unsigned __int16)Rope._Node.header.getter() - 1 == a1)
  {
    v25 = *v4 + 16;
    v26 = *v4 + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v11);
    v27 = (unsigned __int16 *)nullsub_1(v25, v26, v7, v11, v8);
    v29 = v28;
    swift_unknownObjectRetain();
    sub_2383195B0(v27, v29, v7, v8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, v84);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v4, v85);
  }
  else
  {
    v31 = a1;
    v80 = v21;
    v81 = v16;
    v71 = v8;
    if ((unsigned __int16)Rope._Node.header.getter() - 2 == a1)
    {
      v32 = v4;
      v33 = *v4 + 16;
      v34 = v80;
      v35 = *v4 + ((*(unsigned __int8 *)(v80 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v11);
      v36 = v35;
      v37 = v71;
      v38 = (unsigned __int16 *)nullsub_1(v33, v36, v7, v11, v71);
      v40 = v39;
      swift_unknownObjectRetain();
      sub_23831967C(v38, v40, v7, v37, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, (uint64_t)v20);
      swift_unknownObjectRelease();
      v41 = &v20[*(int *)(v72 + 48)];
      v42 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
      v42(v84, v20, v11);
      v43 = v74;
      v42((uint64_t)v74, v41, v11);
      v44 = (uint64_t)v73;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v73, v43, v11);
      v46 = type metadata accessor for Rope.Builder(0, v7, v37, v45);
      Rope.Builder._insertAfterTip(_:)(v44, v46, v47, v48);
      (*(void (**)(_QWORD *, uint64_t))(v81 + 8))(v32, v85);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v43, v11);
    }
    else
    {
      v49 = *(void (**)(char *, _QWORD *, uint64_t))(v81 + 16);
      v50 = v77;
      v70 = v4;
      v51 = v85;
      v49(v77, v4, v85);
      Rope._Node.ensureUnique()();
      v52 = *v50 + 16;
      v53 = *v50 + ((*(unsigned __int8 *)(v80 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v11);
      v54 = v52;
      v55 = v71;
      v56 = (unsigned __int16 *)nullsub_1(v54, v53, v7, v11, v71);
      v58 = v57;
      swift_unknownObjectRetain();
      v59 = v75;
      sub_2383197B4(v56, v58, v31, v7, v55, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, v75);
      swift_unknownObjectRelease();
      v60 = v59 + *(int *)(TupleTypeMetadata2 + 48);
      v62 = v78;
      v61 = v79;
      v63 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v78, v59, v82);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v84, v60, v11);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v62, v63, AssociatedConformanceWitness);
      v66 = type metadata accessor for Rope.Builder(0, v7, v55, v65);
      sub_2382B4A18((uint64_t)v50, v66, v67, v68);
      v69 = *(void (**)(_QWORD *, uint64_t))(v81 + 8);
      v69(v70, v51);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
      return ((uint64_t (*)(_QWORD *, uint64_t))v69)(v50, v51);
    }
  }
}

uint64_t sub_238319374@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a5(0, a3, a4);
  v14 = MEMORY[0x23B831670](a6, v13);
  v15 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v13, a4, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a7, v15, v13);
}

uint64_t sub_23831940C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v13 = a5(0, a3, a4);
  v14 = MEMORY[0x23B831670](a6, v13);
  v15 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v13, a4, v14);
  v16 = a7 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v17 = *(_QWORD *)(v13 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v19(a7, v15, v13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v15 + *(_QWORD *)(v17 + 72), v13);
}

uint64_t sub_2383194F0(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v13 = a6(0, a4, a5);
  v14 = MEMORY[0x23B831670](a7, v13);
  result = Rope._UnsafeHandle.childCount.getter(a1);
  v16 = result - a3;
  if (__OFSUB__(result, a3))
  {
    __break(1u);
  }
  else
  {
    result = v16 - 1;
    if (!__OFSUB__(v16, 1))
      return Rope._UnsafeHandle._removeSuffix(_:)(result, a1, a2, a4, v13, a5, v14);
  }
  __break(1u);
  return result;
}

uint64_t sub_2383195B0@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v13 = a5(0, a3, a4);
  v14 = MEMORY[0x23B831670](a6, v13);
  v15 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v13, a4, v14);
  result = Rope._UnsafeHandle.childCount.getter(a1);
  if (!__OFSUB__(result, 1))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a7, v15 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * (result - 1), v13);
  __break(1u);
  return result;
}

uint64_t sub_23831967C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  v13 = a5(0, a3, a4);
  v14 = MEMORY[0x23B831670](a6, v13);
  v15 = Rope._UnsafeHandle.children.getter(a1, a2, a3, v13, a4, v14);
  v16 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  result = Rope._UnsafeHandle.childCount.getter(a1);
  if (__OFSUB__(result, 2))
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(v13 - 8);
    v19 = *(_QWORD *)(v18 + 72);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v20(a7, v15 + v19 * (result - 2), v13);
    result = Rope._UnsafeHandle.childCount.getter(a1);
    if (!__OFSUB__(result, 1))
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(a7 + v16, v15 + (result - 1) * v19, v13);
  }
  __break(1u);
  return result;
}

uint64_t sub_2383197B4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  v15 = a6(0, a4, a5);
  v16 = MEMORY[0x23B831670](a7, v15);
  v17 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v15, a5, v16);
  v18 = *(_QWORD *)(v15 - 8);
  v19 = v17 + *(_QWORD *)(v18 + 72) * a3;
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a8 + *(int *)(TupleTypeMetadata2 + 48), v19, v15);
  result = a3 + 1;
  if (!__OFADD__(a3, 1))
    return Rope._UnsafeHandle._removePrefix(_:)(result, a1, a2, v15, v16, a8);
  __break(1u);
  return result;
}

uint64_t BitSet.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_238319938(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_2383198FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_238319938(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_238319938(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v1 = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return v1;
  v3 = (unint64_t *)(result + 32);
  while (1)
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & 0x8000000000000000) != 0)
      break;
    v6 = *(_QWORD *)(v1 + 16);
    v7 = v4 >> 6 >= v6;
    v8 = (v4 >> 6) - v6;
    if (v7)
    {
      if (v8 < -1)
        goto LABEL_13;
      sub_23829E648(v8 + 1, 0);
      v1 = v9;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23826C260(v1);
      v1 = result;
    }
    *(_QWORD *)(v1 + 8 * (v4 >> 6) + 32) |= 1 << v4;
    v9 = v1;
    if (!--v2)
      return v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t _HashNode.isEqualSet<A>(to:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;

  if (a5 == a1)
    return 1;
  v32 = v10;
  v33 = v11;
  if (a6 == a2)
  {
    v19 = _HashNode.isCollisionNode.getter(a5, a6, a7, a8, a10);
    v20 = _HashNode.isCollisionNode.getter(a1, a6, a7, a9, a10);
    if (v19)
    {
      if (v20)
      {
        nullsub_1(a5 + 16, a5 + 32, a7, a8, a10);
        v22 = v21;
        nullsub_1(a1 + 16, a1 + 32, a7, a9, a10);
        sub_238319B98(v23, v22, v30);
        return v30[0];
      }
    }
    else if (!v20)
    {
      v25 = (_DWORD *)nullsub_1(a5 + 16, a5 + 32, a7, a8, a10);
      v27 = v26;
      v28 = nullsub_1(a1 + 16, a1 + 32, a7, a9, a10);
      sub_23831A10C(v28, v29, v25, v27, a3, a4, a7, a8, &v31, a9, a10);
      return v31;
    }
  }
  return 0;
}

void sub_238319B98(_QWORD *a1@<X1>, _QWORD *a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;

  if (*a2 != *a1)
  {
    v12 = 0;
LABEL_11:
    *a3 = v12;
    return;
  }
  v13 = a3;
  v3 = _HashNode.UnsafeHandle.reverseItems.getter();
  v5 = v4;
  _HashNode.UnsafeHandle.reverseItems.getter();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x23B830CB0](v3, v5, TupleTypeMetadata2);
  if (v7 == v8)
  {
LABEL_7:
    v12 = 1;
LABEL_10:
    a3 = v13;
    goto LABEL_11;
  }
  v9 = v7;
  v10 = v8;
  if (v8 >= v7)
  {
    while (v9 < v10)
    {
      MEMORY[0x24BDAC7A8](v7);
      swift_getTupleTypeMetadata2();
      v11 = sub_23835B3A0();
      MEMORY[0x23B831670](MEMORY[0x24BEE1D30], v11);
      v7 = sub_23835B01C();
      if ((v7 & 1) == 0)
      {
        v12 = 0;
        goto LABEL_10;
      }
      if (v10 == ++v9)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_238319D90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, char *, uint64_t), uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(void);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, char *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(void);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t TupleTypeMetadata2;
  char *v72;

  v59 = a6;
  v60 = a5;
  v64 = a4;
  v66 = a10;
  v67 = a1;
  v68 = a9;
  v70 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v58 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v69 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v72 = (char *)&v52 - v15;
  v16 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_getTupleTypeMetadata2();
  v63 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v52 - v23;
  v25 = *(int *)(v22 + 48);
  v26 = (char *)&v52 + v25 - v23;
  v28 = a2 + *(_QWORD *)(v27 + 72) * (_QWORD)v64;
  v29 = (char *)(v28 + v25);
  v62 = v16;
  v64 = *(void (**)(void))(v16 + 16);
  v55 = v28;
  ((void (*)(char *))v64)((char *)&v52 - v23);
  v30 = v70;
  v31 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  v56 = v29;
  v57 = v31;
  v31(v26, v29, a8);
  v32 = &v21[*(int *)(v18 + 48)];
  v33 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v53 = v24;
  v54 = v33;
  v33(v21, v24, a7);
  v34 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v61 = a8;
  v34(v32, v26, a8);
  v35 = v64;
  v36 = v65;
  ((void (*)(char *, char *, uint64_t))v64)(v65, v21, a7);
  v37 = v18;
  v63 = *(_QWORD *)(v63 + 8);
  ((void (*)(char *, uint64_t))v63)(v21, v18);
  v38 = v67;
  LOBYTE(v32) = sub_23835AD40();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v36, a7);
  v39 = *(int *)(TupleTypeMetadata2 + 48);
  v40 = &v72[v39];
  v41 = v38 + v39;
  v35();
  (*(void (**)(char *, uint64_t))(*((_QWORD *)v68 - 1) + 16))(v40, v41);
  if ((v32 & 1) != 0)
  {
    v42 = v37;
    v43 = *(int *)(v37 + 48);
    v68 = v34;
    v44 = v53;
    v45 = &v53[v43];
    ((void (*)(char *, uint64_t, uint64_t))v35)(v53, v55, a7);
    v46 = v57;
    v47 = v61;
    v57(v45, v56, v61);
    v48 = &v21[*(int *)(v42 + 48)];
    v54(v21, v44, a7);
    v68(v48, v45, v47);
    v49 = v58;
    v46(v58, v48, v47);
    ((void (*)(char *, uint64_t))v63)(v21, v42);
    v50 = v60(v49, v40);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v49, v47);
  }
  else
  {
    v50 = 0;
  }
  (*(void (**)(char *, uint64_t))(v69 + 8))(v72, TupleTypeMetadata2);
  return v50 & 1;
}

uint64_t sub_23831A10C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a9;
  if (*a3 != *(_DWORD *)result)
    goto LABEL_5;
  v12 = result;
  if (a3[1] != *(_DWORD *)(result + 4))
    goto LABEL_5;
  v39 = a4;
  v48 = _HashNode.UnsafeHandle.reverseItems.getter();
  v49 = v18;
  v40 = a2;
  v44 = &v38;
  v46 = _HashNode.UnsafeHandle.reverseItems.getter();
  v47 = v19;
  MEMORY[0x24BDAC7A8](v46);
  v43 = a11;
  v41 = a5;
  swift_getTupleTypeMetadata2();
  v20 = sub_23835B3A0();
  v38 = a6;
  v21 = v20;
  v42 = a10;
  swift_getTupleTypeMetadata2();
  v22 = sub_23835B3A0();
  v23 = MEMORY[0x24BEE1D30];
  MEMORY[0x23B831670](MEMORY[0x24BEE1D30], v21);
  MEMORY[0x23B831670](v23, v22);
  v24 = v50;
  result = sub_23835AFE0();
  v50 = v24;
  if ((result & 1) != 0)
  {
    v25 = v43;
    v26 = _HashNode.UnsafeHandle.children.getter((uint64_t)a3, v39, a7, a8, v43);
    v28 = v27;
    v29 = v12;
    v30 = v42;
    v31 = _HashNode.UnsafeHandle.children.getter(v29, v40, a7, v42, v25);
    v48 = v26;
    v49 = v28;
    v46 = v31;
    v47 = v32;
    MEMORY[0x24BDAC7A8](v31);
    type metadata accessor for _HashNode(255, a7, a8, v25);
    v33 = sub_23835B3A0();
    type metadata accessor for _HashNode(255, a7, v30, v25);
    v34 = sub_23835B3A0();
    v35 = MEMORY[0x24BEE1D30];
    MEMORY[0x23B831670](MEMORY[0x24BEE1D30], v33);
    MEMORY[0x23B831670](v35, v34);
    v36 = v50;
    result = sub_23835AFE0();
    v50 = v36;
    v37 = result & 1;
  }
  else
  {
LABEL_5:
    v37 = 0;
  }
  *v45 = v37;
  return result;
}

uint64_t sub_23831A404(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t (*v28)(char *, char *);
  int v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a7;
  v27 = a4;
  v28 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v34 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v27 - v11;
  v13 = swift_getTupleTypeMetadata2();
  v32 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v27 - v14;
  v29 = sub_23835AD40();
  v33 = v13;
  v16 = *(int *)(v13 + 48);
  v17 = &v15[v16];
  v18 = a1 + v16;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
  v19(v15, a1, a5);
  v20 = v18;
  v21 = TupleTypeMetadata2;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v17, v20, a6);
  v22 = *(int *)(v21 + 48);
  v23 = &v12[v22];
  v24 = a2 + v22;
  v19(v12, a2, a5);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v23, v24);
  if ((v29 & 1) != 0)
    v25 = v28(v17, v23);
  else
    v25 = 0;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
  return v25 & 1;
}

uint64_t sub_23831A5DC(uint64_t a1)
{
  uint64_t v1;

  return sub_238319D90(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(void))(v1 + 64), *(uint64_t (**)(char *, char *))(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *, char *, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40)) & 1;
}

uint64_t sub_23831A614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23831A404(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32)) & 1;
}

uint64_t sub_23831A638(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  return _HashNode.isEqualSet<A>(to:by:)(*a2, a2[1], v2[6], v2[7], *a1, a1[1], v2[2], v2[3], v2[4], v2[5]) & 1;
}

unint64_t sub_23831A680(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int64_t v110;
  uint64_t v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  _BYTE v143[56];
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v2 = v1;
  v3 = a1;
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(unsigned __int16 *)(v1 + 68);
  v7 = *(unsigned int *)(v1 + 64);
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 62) = 0;
  if (v5)
  {
    v138 = v4;
    v139 = v5;
    v8 = v7 | (v6 << 32);
    LOWORD(v140) = v8;
    v9 = BYTE4(v8);
    BYTE2(v140) = BYTE2(v8);
    HIBYTE(v140) = BYTE3(v8);
    v10 = BYTE5(v8);
    v141 = BYTE4(v8);
    v142 = BYTE5(v8);
    sub_23826556C(~(_BYTE)v8, (unint64_t)v143);
    sub_23829D428((uint64_t)v143, (uint64_t)&v144);
    v11 = v147;
    if (v147)
    {
      v12 = v144;
      v13 = v145;
      v14 = v146;
      v16 = v148;
      v15 = v149;
      v17 = v150;
      result = sub_238265480(v144, v145, v146, v147);
      if ((uint64_t)result > 255)
        goto LABEL_177;
      v19 = sub_238265480(v12, v13, v14, v11);
      v20 = sub_23835AF2C();
      v21 = sub_23826648C(v12, v13, v14, v11);
      v22 = sub_238268540(v19, v20, v21, v16, v15, v17);
      sub_238268448(v22 & 0xFFFFFFFFFFFFLL);
      v134 = v12;
      v135 = v13;
      v136 = v14;
      v137 = v11;
      sub_23825C900();
      sub_23835AE78();
      sub_238266228((uint64_t)v143);
      v4 = v138;
      v5 = v139;
      v9 = v141;
      v10 = v142;
      v2 = v120;
    }
    v23 = v140;
    *(_QWORD *)(v2 + 48) = v4;
    *(_QWORD *)(v2 + 56) = v5;
    *(_DWORD *)(v2 + 64) = v23;
    *(_WORD *)(v2 + 68) = ((v10 << 40) | ((unint64_t)v9 << 32)) >> 32;
    v3 = a1;
  }
  if (*(_QWORD *)(v2 + 80))
    v122 = *(unsigned __int8 *)(v2 + 88);
  else
    v122 = 0;
  for (i = 0; ; i = v133)
  {
    v25 = v3[1];
    v26 = v3[2];
    v27 = v3[3];
    v28 = v3[4];
    swift_bridgeObjectRetain();
    v29 = sub_23835B43C();
    result = swift_bridgeObjectRelease();
    v30 = v29 + v122;
    if (__OFADD__(v29, v122))
      goto LABEL_161;
    v31 = v30 - 124;
    if (v30 >= 379)
      v31 = 255;
    v32 = v30 <= 255 ? v29 + v122 : v31;
    result = sub_238265ADC(v28, v25, v32, v26, v27);
    if ((v34 & 1) != 0 || (result ^ v33) < 0x4000)
      break;
    v3[4] = v33;
    v35 = sub_23835B46C();
    v37 = v36;
    v39 = v38;
    v41 = v40;
    v128 = sub_238265480(v35, v36, v38, v40);
    _s9_IngesterVMa();
    result = sub_2382D10F4(v35, v37, v39, v41);
    v133 = i;
    if ((v42 & 0x100) != 0)
    {
      v46 = v37 >> 14;
      if (v35 >> 14 >= v37 >> 14)
        goto LABEL_71;
      v118 = v37;
      v119 = v35;
      v47 = (v39 >> 59) & 1;
      if ((v41 & 0x1000000000000000) == 0)
        LOBYTE(v47) = 1;
      v48 = 4 << v47;
      v49 = HIBYTE(v41) & 0xF;
      if ((v41 & 0x2000000000000000) == 0)
        v49 = v39 & 0xFFFFFFFFFFFFLL;
      v130 = v49;
      v50 = v35;
      v51 = v35 >> 14;
      v52 = v35 >> 14;
      v131 = v48;
      v123 = v37 >> 14;
      while (2)
      {
        v53 = v50 & 0xC;
        v54 = (v50 & 1) == 0 || v53 == v48;
        v55 = v54;
        if (v54)
        {
          v56 = v50;
          if (v53 == v48)
          {
            result = sub_2382A6050(v50, v39, v41);
            v50 = result;
          }
          if (v130 <= v50 >> 16)
            goto LABEL_157;
          if ((v50 & 1) == 0)
          {
            result = sub_23826674C(v50, v39, v41);
            v50 = v50 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
          }
        }
        else
        {
          v56 = v50;
          if (v130 <= v50 >> 16)
            goto LABEL_158;
        }
        if ((v41 & 0x1000000000000000) != 0)
        {
          result = sub_23835ADB8();
          v50 = result;
          if (v55)
            goto LABEL_59;
        }
        else
        {
          v57 = v50 >> 16;
          if ((v41 & 0x2000000000000000) != 0)
          {
            v134 = v39;
            v135 = v41 & 0xFFFFFFFFFFFFFFLL;
            v58 = *((unsigned __int8 *)&v134 + v57);
          }
          else
          {
            result = (v41 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v39 & 0x1000000000000000) == 0)
              result = sub_23835B634();
            v58 = *(unsigned __int8 *)(result + v57);
          }
          v59 = (char)v58;
          v60 = __clz(v58 ^ 0xFF) - 24;
          if (v59 >= 0)
            LOBYTE(v60) = 1;
          v50 = ((v57 + v60) << 16) | 5;
          if (v55)
          {
LABEL_59:
            result = v56;
            if (v53 == v131)
              result = sub_2382A6050(v56, v39, v41);
            if (result >> 14 < v52 || result >> 14 >= v46)
              goto LABEL_160;
            if ((result & 1) == 0)
              sub_23826674C(result, v39, v41);
            if ((v41 & 0x1000000000000000) != 0)
            {
LABEL_66:
              sub_23835B5A4();
LABEL_68:
              result = sub_23835BAE4();
              v45 = v50 >> 14;
              if ((result & 1) != 0)
              {
                if (v45 >= v51)
                  goto LABEL_73;
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
                return result;
              }
              v51 = v50 >> 14;
              v48 = v131;
              if (v45 >= v46)
              {
                v99 = 0;
                v132 = v128;
                v37 = v118;
                v35 = v119;
                goto LABEL_135;
              }
              continue;
            }
LABEL_51:
            if ((v41 & 0x2000000000000000) != 0)
            {
              v134 = v39;
              v135 = v41 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
              sub_23835B640();
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v39 & 0x1000000000000000) == 0)
                sub_23835B634();
              swift_bridgeObjectRetain();
              sub_23835B640();
              swift_bridgeObjectRelease();
              v46 = v123;
            }
            goto LABEL_68;
          }
        }
        break;
      }
      if (v56 >> 14 < v52)
        goto LABEL_159;
      result = v56;
      if (v56 >> 14 >= v46)
        goto LABEL_159;
      if ((v41 & 0x1000000000000000) != 0)
        goto LABEL_66;
      goto LABEL_51;
    }
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v43 = sub_23835B430();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v44 = sub_23835B430();
      result = swift_bridgeObjectRelease();
      v45 = v44 >> 14;
      if (v44 >> 14 >= v43 >> 14)
      {
        v46 = v37 >> 14;
LABEL_73:
        if (v46 >= v45)
        {
          v61 = sub_23835B46C();
          v63 = v62;
          v65 = v64;
          v67 = v66;
          result = swift_bridgeObjectRelease();
          v99 = 1;
          while (1)
          {
            if ((v67 & 0x1000000000000000) != 0)
            {
              v81 = v63 >> 14;
              if (v61 >> 14 >= v63 >> 14)
                goto LABEL_134;
              v88 = v61 >> 14;
              v89 = 4 << ((v65 & 0x800000000000000) != 0);
              v90 = HIBYTE(v67) & 0xF;
              if ((v67 & 0x2000000000000000) == 0)
                v90 = v65 & 0xFFFFFFFFFFFFLL;
              v127 = v61 >> 14;
              v129 = v90;
              v91 = v61;
              while (1)
              {
                v92 = v91 & 0xC;
                v93 = v92 == v89 || (v91 & 1) == 0;
                v126 = v88;
                if (v93)
                {
                  v94 = v91;
                  if (v92 == v89)
                  {
                    result = sub_2382A6050(v91, v65, v67);
                    v92 = v91 & 0xC;
                    v94 = result;
                  }
                  if (v129 <= v94 >> 16)
                    goto LABEL_173;
                  v124 = v92;
                  if ((v94 & 1) == 0)
                    sub_23826674C(v94, v65, v67);
                  v95 = sub_23835ADB8();
                  result = v91;
                  if (v124 == 4 << ((v65 & 0x800000000000000) != 0))
                    result = sub_2382A6050(v91, v65, v67);
                  if (result >> 14 < v127 || result >> 14 >= v81)
                    goto LABEL_174;
                  if ((result & 1) == 0)
                    sub_23826674C(result, v65, v67);
                }
                else
                {
                  if (v129 <= v91 >> 16)
                    goto LABEL_175;
                  result = sub_23835ADB8();
                  if (v91 >> 14 < v127)
                    goto LABEL_176;
                  v95 = result;
                  result = v91;
                  if (v91 >> 14 >= v81)
                    goto LABEL_176;
                }
                sub_23835B5A4();
                result = sub_23835BAE4();
                v82 = v95 >> 14;
                if ((result & 1) != 0)
                  break;
                v91 = v95;
                v88 = v95 >> 14;
                v89 = 4 << ((v65 & 0x800000000000000) != 0);
                if (v82 >= v81)
                  goto LABEL_134;
              }
              if (v82 < v126)
                goto LABEL_179;
            }
            else
            {
              if ((v67 & 0x2000000000000000) != 0)
              {
                v134 = v65;
                v135 = v67 & 0xFFFFFFFFFFFFFFLL;
                v69 = &v134;
                v70 = v61;
                v71 = v63;
                v72 = v65;
                v73 = v67;
                v68 = v133;
              }
              else
              {
                v68 = v133;
                if ((v65 & 0x1000000000000000) != 0)
                  v69 = (_QWORD *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
                else
                  v69 = (_QWORD *)sub_23835B634();
                v70 = v61;
                v71 = v63;
                v72 = v65;
                v73 = v67;
              }
              v74 = sub_2382D14B0((uint64_t)v69, v70, v71, v72, v73);
              v76 = v75;
              LOBYTE(v138) = v77 & 1;
              v133 = v68;
              if ((v77 & 1) != 0)
              {
LABEL_134:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v128 = sub_23835B43C();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v132 = sub_23835B43C();
                swift_bridgeObjectRelease();
                v35 = sub_23835B46C();
                v37 = v96;
                v39 = v97;
                v41 = v98;
                goto LABEL_135;
              }
              result = v61;
              if ((v61 & 0xC) == 8)
              {
                result = sub_2382A6050(v61, v65, v67);
                v78 = v74 + (result >> 16);
                if (__OFADD__(v74, result >> 16))
                {
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
                  goto LABEL_163;
                }
              }
              else
              {
                v78 = v74 + (v61 >> 16);
                if (__OFADD__(v74, v61 >> 16))
                  goto LABEL_148;
              }
              if ((v78 & 0x8000000000000000) != 0)
                goto LABEL_149;
              if ((v67 & 0x2000000000000000) != 0)
                v79 = HIBYTE(v67) & 0xF;
              else
                v79 = v65 & 0xFFFFFFFFFFFFLL;
              if (v79 < v78)
                goto LABEL_150;
              result = v61;
              if ((v61 & 0xC) == 8)
              {
                result = sub_2382A6050(v61, v65, v67);
                v80 = v76 + (result >> 16);
                if (__OFADD__(v76, result >> 16))
                  goto LABEL_151;
              }
              else
              {
                v80 = v76 + (v61 >> 16);
                if (__OFADD__(v76, v61 >> 16))
                  goto LABEL_151;
              }
              if ((v80 & 0x8000000000000000) != 0)
                goto LABEL_152;
              if (v79 < v80)
                goto LABEL_153;
              if (v80 < v78)
                goto LABEL_154;
              v81 = v63 >> 14;
              v82 = 4 * v80;
            }
            if (v81 < v82)
              goto LABEL_155;
            v61 = sub_23835B46C();
            v63 = v83;
            v65 = v84;
            v86 = v85;
            result = swift_bridgeObjectRelease();
            v67 = v86;
            if (__OFADD__(v99++, 1))
              goto LABEL_156;
          }
        }
        goto LABEL_170;
      }
      goto LABEL_171;
    }
LABEL_71:
    v99 = 0;
    v132 = v128;
LABEL_135:
    v100 = MEMORY[0x23B8306D4](v35, v37, v39, v41);
    v102 = v101;
    if ((v101 & 0x1000000000000000) != 0)
    {
      v100 = sub_238266994();
      v114 = v113;
      swift_bridgeObjectRelease();
      v102 = v114;
    }
    swift_bridgeObjectRetain();
    v103 = sub_23835AF80();
    v105 = v104;
    v107 = v106;
    v109 = v108;
    swift_bridgeObjectRelease();
    result = sub_238265480(v103, v105, v107, v109);
    if ((uint64_t)result > 255)
      goto LABEL_162;
    v110 = sub_238265480(v103, v105, v107, v109);
    v111 = sub_23835AF2C();
    v112 = sub_23826648C(v103, v105, v107, v109);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v110 > 255)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }
    if (v111 > 255)
      goto LABEL_164;
    if (v112 > 255)
      goto LABEL_165;
    if (v99 > 255)
      goto LABEL_166;
    if (v128 > 255)
      goto LABEL_167;
    if ((v128 | v99 | v132 | v110 | v111 | v112) < 0)
      goto LABEL_168;
    if (v132 > 255)
      goto LABEL_169;
    v125 = ((_DWORD)v99 << 24) | v125 & 0xFFFF000000000000 | ((unint64_t)v128 << 32) & 0xFFFF00FFFFFF0000 | ((unint64_t)v132 << 40) | v110 | ((unint64_t)v111 << 8) | ((unint64_t)v112 << 16);
    v2 = v120;
    sub_238263184(v100, v102, v125);
    v3 = a1;
  }
  if ((v28 ^ v25) >> 14)
    goto LABEL_178;
  v115 = (char *)v3 + *(int *)(_s9_IngesterVMa() + 24);
  v116 = v2 + *(int *)(_s7BuilderVMa() + 24);
  v117 = sub_23835BAFC();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v116, v115, v117);
}

uint64_t sub_23831B34C(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE v14[48];
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v3 = sub_23835BAFC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23835BAF0();
  if (*(_QWORD *)a1)
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 16))
    {
      v7 = a1[1];
      v8 = a1[2];
      *(_OWORD *)v14 = *a1;
      *(_OWORD *)&v14[16] = v7;
      *(_OWORD *)&v14[32] = v8;
      v9 = v1 + *(int *)(_s7BuilderVMa() + 24);
      swift_unknownObjectRetain();
      sub_238268634((uint64_t)v6, v9);
      if (*(_QWORD *)v14)
      {
        v15 = *(_QWORD *)v14;
        v16 = *(_OWORD *)&v14[8];
        v17 = *(_OWORD *)&v14[24];
        sub_238269DD0((__int128 *)&v15, v10, v11, v12);
      }
    }
    sub_23825B804((uint64_t)a1);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

int64_t sub_23831B450(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t result;
  uint64_t v20;
  void (*v21)(char *, char *, unint64_t);
  char *v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, unint64_t);
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[56];
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v5 = v4;
  v63 = a3;
  v9 = sub_23835BAFC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v53 - v14;
  v16 = _s9_IngesterVMa();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (uint64_t *)((char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 ^ (unint64_t)a1) < 0x4000)
    return swift_bridgeObjectRelease();
  v57 = v13;
  v20 = _s7BuilderVMa();
  v21 = *(void (**)(char *, char *, unint64_t))(v10 + 16);
  v56 = v5 + *(int *)(v20 + 24);
  v55 = v21;
  ((void (*)(char *))v21)(v15);
  *v18 = a1;
  v18[1] = a2;
  v18[2] = v63;
  v18[3] = a4;
  if ((a4 & 0x1000000000000000) != 0)
    goto LABEL_30;
  while (1)
  {
    v18[4] = a1;
    v22 = (char *)v18 + *(int *)(v16 + 24);
    v58 = v10;
    v23 = *(void (**)(void))(v10 + 32);
    v54 = v22;
    v59 = v9;
    v23();
    v24 = *(_QWORD *)(v5 + 48);
    v25 = *(_QWORD *)(v5 + 56);
    v26 = *(unsigned __int16 *)(v5 + 68);
    v27 = *(unsigned int *)(v5 + 64);
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 62) = 0;
    v61 = v5;
    v60 = v18;
    if (!v25)
      goto LABEL_9;
    v65 = v24;
    v66 = v25;
    v28 = v27 | (v26 << 32);
    LOWORD(v67) = v28;
    v29 = BYTE4(v28);
    BYTE2(v67) = BYTE2(v28);
    HIBYTE(v67) = BYTE3(v28);
    v30 = BYTE5(v28);
    v68 = BYTE4(v28);
    v69 = BYTE5(v28);
    sub_23826556C(~(_BYTE)v28, (unint64_t)v64);
    sub_23829D428((uint64_t)v64, (uint64_t)&v77);
    a4 = v80;
    if (v80)
      break;
LABEL_8:
    v40 = v67;
    v41 = v61;
    *(_QWORD *)(v61 + 48) = v24;
    *(_QWORD *)(v41 + 56) = v25;
    *(_DWORD *)(v41 + 64) = v40;
    *(_WORD *)(v41 + 68) = ((v30 << 40) | ((unint64_t)v29 << 32)) >> 32;
LABEL_9:
    sub_23826556C(255, (unint64_t)&v65);
    sub_23829D428((uint64_t)&v65, (uint64_t)&v70);
    if (!v73)
    {
LABEL_21:
      v51 = v57;
      v52 = v59;
      v55(v57, v54, v59);
      sub_23831BD98((uint64_t)v18);
      return (*(uint64_t (**)(unint64_t, char *, unint64_t))(v58 + 40))(v56, v51, v52);
    }
    while (1)
    {
      v42 = v74;
      v63 = v75;
      v62 = v76;
      v18 = (_QWORD *)MEMORY[0x23B8306D4](v70, v71, v72);
      v44 = v43;
      if ((v43 & 0x1000000000000000) != 0)
      {
        v18 = (_QWORD *)sub_238266994();
        v50 = v49;
        swift_bridgeObjectRelease();
        v44 = v50;
      }
      swift_bridgeObjectRetain();
      a1 = sub_23835AF80();
      v9 = v45;
      v10 = v46;
      v5 = v47;
      swift_bridgeObjectRelease();
      if ((uint64_t)sub_238265480(a1, v9, v10, v5) > 255)
        break;
      v16 = sub_238265480(a1, v9, v10, v5);
      v48 = sub_23835AF2C();
      a1 = sub_23826648C(a1, v9, v10, v5);
      swift_bridgeObjectRelease();
      sub_238266228((uint64_t)&v65);
      if (v16 > 255)
        goto LABEL_23;
      if (v48 > 255)
        goto LABEL_24;
      if (a1 > 255)
        goto LABEL_25;
      if (v42 > 255)
        goto LABEL_26;
      if (v63 > 255)
        goto LABEL_27;
      if ((v63 | v42 | v62 | v16 | v48 | a1) < 0)
        goto LABEL_28;
      if (v62 > 255)
        goto LABEL_29;
      a4 = ((_DWORD)v42 << 24) | a4 & 0xFFFF000000000000 | ((unint64_t)v63 << 32) & 0xFFFF00FFFFFF0000 | ((unint64_t)v62 << 40) | v16 | ((unint64_t)v48 << 8) | ((unint64_t)a1 << 16);
      sub_238263184((uint64_t)v18, v44, a4);
      v18 = v60;
      sub_23826556C(255, (unint64_t)&v65);
      sub_23829D428((uint64_t)&v65, (uint64_t)&v70);
      if (!v73)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    sub_2382F977C();
  }
  v31 = v77;
  v16 = v78;
  v32 = v79;
  v33 = v81;
  v34 = v82;
  v35 = v83;
  result = sub_238265480(v77, v78, v79, v80);
  if (result <= 255)
  {
    v36 = sub_238265480(v31, v16, v32, a4);
    v37 = sub_23835AF2C();
    v38 = sub_23826648C(v31, v16, v32, a4);
    v39 = sub_238268540(v36, v37, v38, v33, v34, v35);
    sub_238268448(v39 & 0xFFFFFFFFFFFFLL);
    v70 = v31;
    v71 = v16;
    v72 = v32;
    v73 = a4;
    sub_23825C900();
    sub_23835AE78();
    sub_238266228((uint64_t)v64);
    v24 = v65;
    v25 = v66;
    v29 = v68;
    v30 = v69;
    v18 = v60;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

int64_t sub_23831B9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v0 = sub_23835AF80();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  swift_bridgeObjectRelease();
  return sub_23831B450(v0, v2, v4, v6);
}

void sub_23831BA80(_WORD *a1, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44[2];
  uint64_t v45;

  v7 = (unsigned __int16)*a1;
  v8 = a3;
  if (*a1)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = a3 - v9;
    if (__OFSUB__(a3, v9))
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (__OFADD__(v10, 1))
    {
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v10 + 1 < 1)
    {
      v11 = a4 - a3;
      if (__OFSUB__(a4, a3))
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v12 = 0;
      v10 = a3;
      goto LABEL_17;
    }
    if ((_DWORD)v7 != 1)
    {
      v13 = (uint64_t *)(a2 + 72);
      v12 = 1;
      while (1)
      {
        v14 = *v13;
        v13 += 5;
        v8 = v10 - v14;
        if (__OFSUB__(v10, v14))
          goto LABEL_55;
        if (__OFADD__(v8, 1))
          goto LABEL_56;
        if (v8 + 1 < 1)
          goto LABEL_16;
        ++v12;
        v10 = v8;
        if (v7 == v12)
          goto LABEL_14;
      }
    }
    v8 = a3 - v9;
  }
LABEL_14:
  if (v8)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v10 = 0;
  v12 = (unsigned __int16)*a1;
LABEL_16:
  v11 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_17:
  v15 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v12 < v7)
  {
    v16 = *(_QWORD *)(a2 + 40 * v12 + 32);
    if (v16 < v15)
    {
      v17 = (uint64_t *)(a2 + 40 * v12 + 72);
      v18 = v12;
      while (1)
      {
        v19 = __OFSUB__(v15, v16);
        v15 -= v16;
        if (v19)
          break;
        if (v7 - 1 == v18)
        {
          v18 = (unsigned __int16)*a1;
          goto LABEL_26;
        }
        ++v18;
        v20 = *v17;
        v17 += 5;
        v16 = v20;
        if (v20 >= v15)
          goto LABEL_26;
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
  }
  v18 = v12;
LABEL_26:
  v21 = (uint64_t *)(a2 + 40 * v12);
  if (v12 == v18)
  {
    if (v15 < v10 || *(_QWORD *)(a2 + 40 * v12 + 32) < v15 || v10 < 0)
      goto LABEL_62;
    if (v10 != v15)
    {
      v22 = *v21;
      v23 = *(unsigned __int8 *)(*v21 + 18);
      v24 = *v21 + 24;
      swift_unknownObjectRetain();
      v25 = v22 + 16;
      v26 = v24;
      v27 = v10;
      if (!v23)
      {
LABEL_32:
        sub_238261D7C(v25, v26, v27, v15, a5);
LABEL_52:
        swift_unknownObjectRelease();
        return;
      }
LABEL_51:
      sub_23831BA80(v25, v26, v27, v15, a5);
      goto LABEL_52;
    }
  }
  else
  {
    if (v10 < 0)
      goto LABEL_63;
    v28 = *(_QWORD *)(a2 + 40 * v12 + 32);
    if (v28 < v10)
      goto LABEL_63;
    if (v10 != v28)
    {
      v29 = *v21;
      v30 = *(unsigned __int8 *)(*v21 + 18);
      v31 = *v21 + 24;
      swift_unknownObjectRetain();
      v32 = v29 + 16;
      if (v30)
        sub_23831BA80(v32, v31, v10, v28, a5);
      else
        sub_238261D7C(v32, v31, v10, v28, a5);
      swift_unknownObjectRelease();
    }
    v33 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_64;
    if (v18 < v33)
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v33 != v18)
    {
      if (v33 >= v18)
      {
LABEL_68:
        __break(1u);
        return;
      }
      v34 = ~v12 + v18;
      v35 = a2 + 40 * v12 + 40;
      do
      {
        v36 = *(_OWORD *)(v35 + 16);
        v44[0] = *(_OWORD *)v35;
        v44[1] = v36;
        v45 = *(_QWORD *)(v35 + 32);
        swift_unknownObjectRetain();
        sub_238269DD0(v44, v37, v38, v39);
        v35 += 40;
        --v34;
      }
      while (v34);
    }
    if (v15 < 0)
      goto LABEL_66;
    v40 = (_QWORD *)(a2 + 40 * v18);
    if (v40[4] < v15)
      goto LABEL_66;
    if (v15)
    {
      v41 = *v40;
      v42 = *(unsigned __int8 *)(*v40 + 18);
      v43 = *v40 + 24;
      swift_unknownObjectRetain();
      v25 = v41 + 16;
      v26 = v43;
      v27 = 0;
      if (!v42)
        goto LABEL_32;
      goto LABEL_51;
    }
  }
}

uint64_t sub_23831BD98(uint64_t a1)
{
  uint64_t v2;

  v2 = _s9_IngesterVMa();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23831BDD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_WORD *)(a1 + 68) = *((_WORD *)a2 + 34);
    v10 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v10;
    *(_WORD *)(a1 + 92) = *((_WORD *)a2 + 46);
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
    v11 = *(int *)(a3 + 20);
    v15 = (uint64_t)a2 + v11;
    v16 = a1 + v11;
    *(_QWORD *)(a1 + 96) = a2[12];
    v12 = sub_23835BAFC();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v16, v15, v12);
    v13(v7 + *(int *)(a3 + 24), (uint64_t)a2 + *(int *)(a3 + 24), v12);
  }
  return v7;
}

uint64_t sub_23831BF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v9 = *(int *)(a3 + 20);
  v14 = a1 + v9;
  v10 = a2 + v9;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v11 = sub_23835BAFC();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, v10, v11);
  v12(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v11);
  return a1;
}

uint64_t sub_23831C014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23835BAFC();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v9);
  return a1;
}

uint64_t sub_23831C1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v12 = sub_23835BAFC();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v12);
  return a1;
}

uint64_t sub_23831C244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23835BAFC();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v12);
  return a1;
}

uint64_t sub_23831C340()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23831C34C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23835BAFC();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_23831C3C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23831C3D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23835BAFC();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t RopeMetric._nonnegativeSize(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t Deque.init(unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t *(*v14)(uint64_t *, uint64_t);
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = Deque._Storage.init(minimumCapacity:)(a1, a4, a3, a4);
  v17 = a4;
  v18 = a1;
  v19 = a2;
  v20 = a3;
  v13 = a4;
  v14 = sub_23831C5EC;
  v15 = &v16;
  swift_retain();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
  sub_23827FF04((uint64_t)sub_2382DAA90, (uint64_t)v12, v9, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v21);
  swift_release();
  if (v4)
    swift_release();
  return v9;
}

uint64_t *sub_23831C534(uint64_t *result, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t *))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;

  result[2] = 0;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (uint64_t)result;
    Deque._UnsafeHandle.buffer(for:)(0, a3);
    v9[0] = sub_23835B388();
    v9[1] = v8;
    a4(v9, &v10);
    return sub_23831C608(&v10, a3, v7, a2, (uint64_t)v9);
  }
  return result;
}

uint64_t *sub_23831C5EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23831C534(a1, a2, *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *, uint64_t *))(v2 + 32));
}

uint64_t *sub_23831C608(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*result > a2)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a2 < 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = result;
  Deque._UnsafeHandle.buffer(for:)(0, a2);
  sub_23835B388();
  v9 = v8;
  v10 = sub_23835AD4C();
  result = (uint64_t *)sub_23835AD4C();
  if (v10)
  {
    if (!result)
      goto LABEL_13;
    if ((uint64_t *)v10 == result)
      goto LABEL_8;
    __break(1u);
  }
  if (!result)
  {
LABEL_8:
    if (*(_QWORD *)(a5 + 8) == v9)
    {
      *(_QWORD *)(a3 + 8) = *v7;
      return result;
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t Deque.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v15);
  if (v16 < 1)
  {
    v12 = 1;
  }
  else
  {
    sub_23835B82C();
    v5 = sub_23835B820();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v6, v7);
      Deque._Storage._makeUniqueCopy()();
    }
    v8 = *v2;
    v9 = MEMORY[0x24BDAC7A8](v5);
    v15 = v4;
    MEMORY[0x24BDAC7A8](v9);
    v14[2] = v4;
    v14[3] = v4;
    v14[4] = sub_2382DAE24;
    v14[5] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DA654, (uint64_t)v14, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, v4, MEMORY[0x24BEE3F20], (uint64_t)&v16);
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, v12, 1, v4);
}

uint64_t Deque.prepend(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  Swift::Int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23827FD60((uint64_t)sub_23827FE58, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v16);
  v6 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    sub_23835B82C();
    v7 = sub_23835B820();
    v8 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v16);
    if (v18 < v6 || (v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v9, v10);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v6, 0);
    }
    v11 = *v2;
    v12 = MEMORY[0x24BDAC7A8](v8);
    v16 = v4;
    v17 = a1;
    MEMORY[0x24BDAC7A8](v12);
    v15[2] = v4;
    v15[3] = sub_23831CA14;
    v15[4] = v13;
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    return sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v4, v14, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v18);
  }
  return result;
}

uint64_t sub_23831CA14(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return Deque._UnsafeHandle.uncheckedPrepend(_:)(*(_QWORD *)(v2 + 24), a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t Deque.prepend<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[12];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27[2];

  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v24 = v9;
  v25 = a3;
  v26 = a4;
  if (sub_23835B0D0() == a3)
    sub_23835B964();
  result = sub_23835AFBC();
  if (LOBYTE(v27[0]) == 1)
  {
    result = sub_23835B190();
    if (result >= 1)
    {
      v11 = result;
      v12 = *v4;
      swift_retain();
      sub_23827FD60((uint64_t)sub_23827FE58, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v23);
      result = swift_release();
      v13 = v27[0] + v11;
      if (__OFADD__(v27[0], v11))
      {
        __break(1u);
      }
      else
      {
        sub_23835B82C();
        v14 = sub_23835B820();
        v15 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v23);
        if (v27[0] < v13 || (v14 & 1) == 0)
        {
          type metadata accessor for Deque._Storage(0, v9, v16, v17);
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v13, 0);
        }
        v18 = *v5;
        v19 = MEMORY[0x24BDAC7A8](v15);
        v22[8] = v9;
        v22[9] = a3;
        v22[10] = a4;
        v22[11] = v11;
        v23 = a1;
        MEMORY[0x24BDAC7A8](v19);
        v22[2] = v9;
        v22[3] = sub_23831D038;
        v22[4] = v20;
        swift_retain();
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
        sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v22, v18, (uint64_t)&type metadata for _DequeBufferHeader, v9, v21, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)v27);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_23831CCD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  Swift::Int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;

  v12 = *a3;
  swift_retain();
  sub_23827FD60((uint64_t)sub_23827FE58, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
  result = swift_release();
  v14 = v26 + a2;
  if (__OFADD__(v26, a2))
  {
    __break(1u);
  }
  else
  {
    v25 = a1;
    sub_23835B82C();
    v15 = sub_23835B820();
    v16 = sub_23827FD60((uint64_t)sub_23826B2E4, 0, *a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v24);
    if (v26 < v14 || (v15 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, a4, v17, v18);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
    }
    v19 = *a3;
    v20 = MEMORY[0x24BDAC7A8](v16);
    v23[8] = a4;
    v23[9] = a5;
    v23[10] = a6;
    v23[11] = v25;
    v24 = a2;
    MEMORY[0x24BDAC7A8](v20);
    v23[2] = a4;
    v23[3] = sub_23831D360;
    v23[4] = v21;
    swift_retain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v23, v19, (uint64_t)&type metadata for _DequeBufferHeader, a4, v22, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v26);
    return swift_release();
  }
  return result;
}

uint64_t sub_23831CEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23831CCD4(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_23831CF18(CollectionsInternal::_DequeSlot *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  Swift::Int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::Int position;
  BOOL v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  _BYTE v25[40];
  uint64_t v26;

  v23 = a4;
  v26 = a7;
  v11 = *(_QWORD *)(a6 - 8);
  v12 = (Swift::Int *)MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Deque._UnsafeHandle.availableSegments()(v12, (uint64_t)v24);
  v17 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v15, v16);
  _UnsafeMutableWrappedBuffer.suffix(_:)(a3, (uint64_t)v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v23, a6);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v14, v17, a6, v26);
  position = a1[1].position;
  v20 = __OFADD__(position, a3);
  v21 = position + a3;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    a1[1].position = v21;
    if (!__OFSUB__(0, a3))
    {
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], -a3).position;
      a1[2].position = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23831D038(CollectionsInternal::_DequeSlot *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23831CF18(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t Deque.prepend<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[12];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a2 + 16);
  v23 = v10;
  v24 = a3;
  v25 = a4;
  v26 = v5;
  if (sub_23835B0D0() == a3)
    sub_23835B964();
  result = sub_23835AFBC();
  if (v27 == 1)
  {
    v12 = *v5;
    swift_retain();
    sub_23827FD60((uint64_t)sub_23827FE58, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v21);
    swift_release();
    Deque.append<A>(contentsOf:)(a1, a2, a3, a4);
    v13 = *v5;
    swift_retain();
    sub_23827FD60((uint64_t)sub_23827FE58, 0, v13, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v21);
    v14 = swift_release();
    v15 = MEMORY[0x24BDAC7A8](v14);
    v20[8] = v10;
    v20[9] = a3;
    v20[10] = a4;
    v20[11] = v27;
    v21 = v17;
    v22 = v16;
    MEMORY[0x24BDAC7A8](v15);
    v20[2] = v10;
    v20[3] = sub_23831D340;
    v20[4] = v18;
    swift_retain();
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0938);
    sub_23827FF04((uint64_t)sub_2382DB29C, (uint64_t)v20, v13, (uint64_t)&type metadata for _DequeBufferHeader, v10, v19, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE3F20], (uint64_t)&v27);
    return swift_release();
  }
  return result;
}

uint64_t sub_23831D2A8(CollectionsInternal::_DequeSlot *a1, int a2, Swift::Int forOffset, Swift::Int a4, uint64_t a5)
{
  uint64_t result;
  CollectionsInternal::_DequeSlot v9;
  BOOL v10;
  Swift::Int v11;
  uint64_t v12;

  result = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  v9.position = a1->position;
  a1[1].position = a1->position;
  a1[2].position = result;
  v10 = __OFSUB__(v9.position, a5);
  v11 = v9.position - a5;
  if (v10)
  {
    __break(1u);
    goto LABEL_6;
  }
  v12 = a4 + v11;
  if (__OFADD__(a4, v11))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v12 >= a4)
    return Deque._UnsafeHandle.closeGap(offsets:)(a4, v12, a1);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_23831D340(CollectionsInternal::_DequeSlot *a1, int a2)
{
  Swift::Int *v2;

  return sub_23831D2A8(a1, a2, v2[5], v2[6], v2[7]);
}

Swift::Int sub_23831D360(_QWORD *a1, uint64_t a2)
{
  return sub_23831D374(a1, a2);
}

Swift::Int sub_23831D374(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque._UnsafeHandle.uncheckedPrepend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

uint64_t Deque<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  _QWORD v19[4];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - v9;
  sub_23827FD60((uint64_t)sub_23827FE58, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v18);
  sub_23835BA00();
  v19[0] = Deque.makeIterator()(a2, a3);
  v19[1] = v11;
  v19[2] = v12;
  v14 = type metadata accessor for Deque.Iterator(0, a3, v12, v13);
  Deque.Iterator.next()(v14, (uint64_t)v10);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v15(v10, 1, a3) != 1)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v16(v7, v10, a3);
      sub_23835ABFC();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
      Deque.Iterator.next()(v14, (uint64_t)v10);
    }
    while (v15(v10, 1, a3) != 1);
  }
  return swift_release();
}

uint64_t Deque<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  sub_23835B9E8();
  Deque<A>.hash(into:)((uint64_t)v5, a1, a2);
  return sub_23835BA48();
}

uint64_t sub_23831D5BC(uint64_t a1)
{
  uint64_t *v1;

  return Deque<A>.hashValue.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_23831D5D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque<A>.hash(into:)(a1, *v2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_23831D5E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  sub_23835B9E8();
  Deque<A>.hash(into:)((uint64_t)v5, *v2, *(_QWORD *)(a2 + 16));
  return sub_23835BA48();
}

uint64_t sub_23831D638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B831670](&protocol conformance descriptor for <A> Deque<A>, a1, &v4);
}

uint64_t Rope.extract<A>(from:to:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t result;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t *v44;

  v8 = v7;
  v40 = a5;
  v41 = a6;
  v39 = a3;
  *(_QWORD *)&v43 = a1;
  *((_QWORD *)&v43 + 1) = a2;
  v42 = a7;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  v11 = type metadata accessor for Rope._Node(0, v9, v10, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v36 = (char *)&v34 - v13;
  v37 = type metadata accessor for Rope.Builder(0, v9, v10, v14);
  v35 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v44 = (uint64_t *)((char *)&v34 - v15);
  v16 = sub_23835B334();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v34 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v34 = v8;
  v23((char *)&v34 - v21, v8, v16);
  v38 = v12;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v12) = v24(v22, 1, v11);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v22, v16);
  if ((_DWORD)v12 == 1)
  {
    if (v43 == 0)
      return Rope.init()(v9, v10, v26, v42);
    __break(1u);
    goto LABEL_8;
  }
  v28 = v43;
  Rope.Builder.init()(v9, v10, v26, v44);
  v23(v20, v34, v16);
  if (v24(v20, 1, v11) == 1)
  {
LABEL_8:
    result = ((uint64_t (*)(char *, uint64_t))v25)(v20, v16);
    __break(1u);
    return result;
  }
  v29 = v38;
  v30 = v36;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v36, v20, v11);
  v31 = v44;
  Rope._Node.extract<A>(from:to:in:into:)(v28, *((uint64_t *)&v28 + 1), v39, (uint64_t)v44, v11, v40, v41);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v11);
  v32 = v37;
  Rope.Builder.finalize()(v37, v33, v42);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 8))(v31, v32);
}

uint64_t Rope._Node.extract<A>(from:to:in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 24))((char *)v7 + *(int *)(a5 + 36), a6, a7);
  if (a1 < 0 || a2 < a1 || result < a2)
  {
    __break(1u);
  }
  else if (a1 != a2)
  {
    v36 = a4;
    v17 = Rope._Node.header.getter();
    v19 = *v7;
    v35 = *v8 + 16;
    if ((v17 & 0xFF0000) != 0)
    {
      v20 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80);
      v21 = v19 + ((v20 + 19) & ~v20);
      v23 = *(_QWORD *)(a5 + 16);
      v22 = *(_QWORD *)(a5 + 24);
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a5);
      v24 = (unsigned __int16 *)nullsub_1(v35, v21, v23, a5, v22);
      v26 = v25;
      swift_unknownObjectRetain();
      sub_23831E0CC(v24, v26, a1, a3, a2, v36, v23, a6, a7);
    }
    else
    {
      v28 = *(_QWORD *)(a5 + 16);
      v27 = *(_QWORD *)(a5 + 24);
      v29 = type metadata accessor for Rope._Item(0, v28, v27, v18);
      v30 = *(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80);
      v31 = v19 + ((v30 + 19) & ~v30);
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v29);
      v32 = (unsigned __int16 *)nullsub_1(v35, v31, v28, v29, v27);
      v34 = v33;
      swift_unknownObjectRetain();
      sub_23831DAD4(v32, v34, a1, a3, a2, v36, v28, a6, a7);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_23831DAD4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v88 = a6;
  v89 = a2;
  v94 = a5;
  v95 = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v83 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v81 = (char *)&v78 - v15;
  v90 = swift_getAssociatedTypeWitness();
  v87 = *(_QWORD *)(v90 - 8);
  v16 = MEMORY[0x24BDAC7A8](v90);
  v80 = (void (*)(uint64_t, uint64_t))((char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v91 = (char *)&v78 - v18;
  v92 = AssociatedConformanceWitness;
  v20 = type metadata accessor for Rope._Item(0, a7, AssociatedConformanceWitness, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v85 = (void (*)(uint64_t, char *, uint64_t, uint64_t))((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v22);
  v79 = (uint64_t)&v78 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v86 = (uint64_t)&v78 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v78 - v28;
  v30 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v20);
  v93 = a9;
  v31 = a3;
  v32 = a3;
  v33 = a1;
  v34 = a1;
  v35 = v89;
  result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v32, v95, 0, v34, v89, a7, v20, a8, v30, a9);
  v38 = v94 - v31;
  if (__OFSUB__(v94, v31))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v39 = v37;
  v94 = result;
  v40 = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v37, v38, v95, 1, v33, v35, a7, v20, a8, v30, v93);
  v84 = v41;
  v42 = Rope._UnsafeHandle.children.getter(v33, v35, a7, v20, v92, v30);
  v43 = a8;
  v44 = *(_QWORD *)(v21 + 72);
  v45 = v42 + v44 * v94;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v89 = v40;
  if (v94 == v40)
  {
    v89 = v21;
    v94 = a7;
    v46(v29, v45, v20);
    v47 = v93;
    v48 = (uint64_t)v91;
    v85 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v93 + 32);
    v85(v39, v29, v43, v93);
    v49 = v86;
    Rope._Item.split(at:)(v48, v20, v86);
    v50 = v81;
    Rope._Item.summary.getter(v20);
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 24))(v50, v43, v47);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v83);
    result = v84 - v51;
    if (!__OFSUB__(v84, v51))
    {
      v52 = (uint64_t)v80;
      v85(result, (char *)v49, v43, v47);
      v53 = v79;
      Rope._Item.split(at:)(v52, v20, v79);
      v54 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      v54(v53, v20);
      v46((char *)v53, v49, v20);
      v56 = type metadata accessor for Rope.Builder(0, v94, v92, v55);
      Rope.Builder._insertBeforeTip(_:)(v53, v56, v57, v58);
      v59 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      v60 = v90;
      v59(v52, v90);
      v54(v49, v20);
      v59(v48, v60);
      v61 = v29;
      return ((uint64_t (*)(char *, uint64_t))v54)(v61, v20);
    }
    goto LABEL_14;
  }
  v83 = v42;
  v62 = (char *)v85;
  v46((char *)v85, v45, v20);
  v63 = (uint64_t)v91;
  v81 = *(char **)(v93 + 32);
  v82 = v43;
  ((void (*)(uint64_t, char *, uint64_t))v81)(v39, v62, v43);
  Rope._Item.split(at:)(v63, v20, (uint64_t)v29);
  v80 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
  v80(v63, v90);
  v87 = *(_QWORD *)(v21 + 8);
  ((void (*)(char *, uint64_t))v87)(v62, v20);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v62, v29, v20);
  v46(v29, (uint64_t)v62, v20);
  v65 = type metadata accessor for Rope.Builder(0, a7, v92, v64);
  result = Rope.Builder._insertBeforeTip(_:)((uint64_t)v29, v65, v66, v67);
  v68 = v94 + 1;
  if (__OFADD__(v94, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v69 = v89;
  if (v89 < v68)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v68 == v89)
  {
LABEL_11:
    v46(v29, v83 + v44 * v69, v20);
    v74 = (uint64_t)v91;
    ((void (*)(uint64_t, char *, uint64_t, uint64_t))v81)(v84, v29, v82, v93);
    v75 = v86;
    Rope._Item.split(at:)(v74, v20, v86);
    v80(v74, v90);
    v54 = (void (*)(uint64_t, uint64_t))v87;
    ((void (*)(uint64_t, uint64_t))v87)(v75, v20);
    v46((char *)v75, (uint64_t)v29, v20);
    Rope.Builder._insertBeforeTip(_:)(v75, v65, v76, v77);
    v54((uint64_t)v29, v20);
    v61 = (char *)v85;
    return ((uint64_t (*)(char *, uint64_t))v54)(v61, v20);
  }
  if (v68 < v89)
  {
    v70 = ~v94 + v89;
    v71 = v83 + v44 * v68;
    do
    {
      v46(v29, v71, v20);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v29, v65, v72, v73);
      v71 += v44;
      --v70;
    }
    while (v70);
    goto LABEL_11;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_23831E0CC(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t);
  uint64_t v67;

  v62 = a6;
  v63 = a2;
  v64 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v61 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58 = (char *)&v54 - v16;
  v18 = type metadata accessor for Rope._Node(0, a7, AssociatedConformanceWitness, v17);
  v66 = *(uint64_t (**)(char *, uint64_t))(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v54 - v19;
  v21 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v18);
  v65 = a9;
  v67 = a4;
  v22 = a4;
  v23 = a1;
  v24 = a1;
  v25 = v63;
  result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(a3, v22, 0, v24, v63, a7, v18, a8, v21, a9);
  v28 = v64 - a3;
  if (__OFSUB__(v64, a3))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v29 = result;
  v64 = v27;
  v30 = v23;
  v31 = v23;
  v32 = v25;
  v33 = Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(result, v27, v28, v67, 1, v31, v25, a7, v18, a8, v21, v65);
  v59 = v34;
  v35 = Rope._UnsafeHandle.children.getter(v30, v32, a7, v18, AssociatedConformanceWitness, v21);
  v36 = *((_QWORD *)v66 + 9);
  v37 = v35 + v36 * v29;
  v57 = v29;
  v38 = a8;
  if (v29 == v33)
  {
    v39 = v66;
    (*((void (**)(char *, uint64_t, uint64_t))v66 + 2))(v20, v37, v18);
    Rope._Node.extract<A>(from:to:in:into:)(v64, v59, v67, v62, v18, a8, v65);
    return (*((uint64_t (**)(char *, uint64_t))v39 + 1))(v20, v18);
  }
  v56 = v35;
  v63 = v33;
  v40 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v58, v37 + *(int *)(v18 + 36), v61);
  v41 = v65;
  v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 24))(v40, v38, v65);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v61);
  v42 = v38;
  v43 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v66 + 2);
  v43(v20, v37, v18);
  v44 = v64;
  v45 = v62;
  v64 = v42;
  Rope._Node.extract<A>(from:to:in:into:)(v44, v55, v67, v62, v18, v42, v41);
  v46 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v66 + 1);
  result = v46(v20, v18);
  v47 = v57 + 1;
  if (__OFADD__(v57, 1))
    goto LABEL_12;
  if (v63 < v47)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v66 = v46;
  if (v47 == v63)
  {
LABEL_10:
    v43(v20, v56 + v36 * v63, v18);
    Rope._Node.extract<A>(from:to:in:into:)(0, v59, v67, v45, v18, v64, v65);
    return v66(v20, v18);
  }
  if (v47 < v63)
  {
    v48 = ~v57 + v63;
    v49 = v56 + v36 * v47;
    do
    {
      v43(v20, v49, v18);
      v51 = type metadata accessor for Rope.Builder(0, a7, AssociatedConformanceWitness, v50);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v20, v51, v52, v53);
      v49 += v36;
      --v48;
    }
    while (v48);
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

BOOL OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  return v10 < _s19CollectionsInternal4HeapV5countSivg_0() && OrderedSet.isSubset(of:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v8 >= sub_23835B10C())
    return 0;
  else
    return OrderedSet.isSubset(of:)(a1, a2, a3, a4);
}

uint64_t OrderedSet.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];

  v52 = a3;
  v12 = *(_QWORD *)(a4 - 8);
  v50 = a7;
  v51 = v12;
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v46 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v46 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)&v46 - v23;
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for OrderedSet(0, v28, v29, v28) == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, a1, a5);
    swift_dynamicCast();
    v38 = OrderedSet.isStrictSubset(of:)(v53[0], v53[1], a2, v52, a4);
    goto LABEL_9;
  }
  v30 = sub_23835B148();
  if (v30 == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, a1, a5);
    swift_dynamicCast();
    v38 = OrderedSet.isStrictSubset(of:)(v53[0], a2, v52, a4);
    swift_bridgeObjectRelease();
    return v38 & 1;
  }
  v47 = a6;
  v31 = v52;
  v48 = *(_QWORD *)(v52 + 16);
  if (!v48)
  {
    MEMORY[0x24BDAC7A8](v30);
    *(&v46 - 4) = a4;
    *(&v46 - 3) = a5;
    v39 = v50;
    *(&v46 - 2) = v47;
    *(&v46 - 1) = v39;
    swift_retain();
    swift_retain();
    v38 = sub_23835B01C();
    swift_release();
    swift_release();
    return v38 & 1;
  }
  swift_retain();
  swift_retain();
  sub_23835B724();
  v46 = a2;
  v32 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  v32(v49, v21, a4);
  v33 = sub_23835AFB0();
  v34 = v47;
  if (v33 != 2)
  {
    if ((v33 & 1) != 0)
    {
      v40 = 1;
      while (v48 != v40)
      {
        sub_23835B724();
        ++v40;
        v32(v18, v15, a4);
        v41 = sub_23835B034();
        v42 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
        v33 = v42(v18, a4);
        if ((v41 & 1) == 0)
        {
          v42(v49, a4);
          goto LABEL_18;
        }
      }
      MEMORY[0x24BDAC7A8](v33);
      *(&v46 - 6) = a4;
      *(&v46 - 5) = a5;
      v43 = v50;
      *(&v46 - 4) = v34;
      *(&v46 - 3) = v43;
      v44 = v52;
      *(&v46 - 2) = v46;
      *(&v46 - 1) = v44;
      v45 = sub_23835AFC8();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v49, a4);
      swift_release();
      swift_release();
      v38 = v45 ^ 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v49, a4);
LABEL_18:
      swift_release();
      swift_release();
      v38 = 0;
    }
    return v38 & 1;
  }
  v35 = _s19CollectionsInternal4HeapV5countSivg_0();
  result = MEMORY[0x24BDAC7A8](v35);
  *(&v46 - 8) = a4;
  *(&v46 - 7) = a5;
  *(&v46 - 6) = v34;
  *(&v46 - 5) = v37;
  *(&v46 - 4) = a1;
  *(&v46 - 3) = v46;
  *(&v46 - 2) = v31;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v53[0]) = 2;
    result = (uint64_t)sub_238329EE0((unint64_t)(result + 63) >> 6, v53, (_QWORD *(*)(char *__return_ptr, _BYTE **))sub_23831EDC0);
    if (LOBYTE(v53[0]) != 2)
    {
      v38 = v53[0] & 1;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v49, a4);
LABEL_9:
      swift_release();
      swift_release();
      return v38 & 1;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_23831EA74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  int v29;
  unint64_t result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD, _QWORD, _QWORD);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v42 = a1;
  v46 = a3;
  v47 = a7;
  v50 = a4;
  v49 = a2;
  v41 = a8;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23835B334();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - v15;
  v48 = *(char **)(a6 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v39 - v20;
  (*((void (**)(char *, uint64_t, uint64_t))v48 + 2))(v18, v49, a6);
  sub_23835AF8C();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v48 = v21;
  v49 = AssociatedTypeWitness;
  v45 = AssociatedConformanceWitness;
  sub_23835B484();
  v23 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v10 + 48);
  if (v23(v16, 1, a5) != 1)
  {
    v27 = 0;
    v43 = 0;
    v44 = v10;
    v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v28(v12, v16, a5);
    while (1)
    {
      result = OrderedSet._find(_:)();
      if ((v31 & 1) != 0)
      {
        if ((v27 & 1) != 0)
        {
          v27 = 1;
LABEL_5:
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
          v24 = v27;
          goto LABEL_6;
        }
        v38 = _s19CollectionsInternal4HeapV5countSivg_0();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
        v24 = 1;
        if (v43 == v38)
          goto LABEL_19;
      }
      else
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
          return result;
        }
        v32 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        v33 = *(_QWORD *)(*v42 + v32);
        *(_QWORD *)(*v42 + v32) = v33 | (1 << result);
        if ((v33 & (1 << result)) != 0)
          goto LABEL_5;
        v34 = v23;
        v35 = v28;
        v36 = v43 + 1;
        v37 = _s19CollectionsInternal4HeapV5countSivg_0();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
        v43 = v36;
        v24 = (v36 != v37) & v27;
        if (v36 == v37)
        {
          v28 = v35;
          v23 = v34;
          if (((v27 ^ 1) & 1) == 0)
          {
            LOBYTE(v24) = 1;
LABEL_19:
            v26 = v41;
            v25 = v40;
            goto LABEL_20;
          }
        }
        else
        {
          v28 = v35;
          v23 = v34;
        }
      }
LABEL_6:
      sub_23835B484();
      v29 = v23(v16, 1, a5);
      v27 = v24;
      v10 = v44;
      if (v29 == 1)
      {
        LOBYTE(v24) = 0;
        goto LABEL_19;
      }
      v28(v12, v16, a5);
    }
  }
  LOBYTE(v24) = 0;
  v25 = v40;
  v26 = v41;
LABEL_20:
  result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v48, v49);
  *v26 = v24;
  return result;
}

unint64_t sub_23831EDC0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;

  return sub_23831EA74(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

BOOL sub_23831EDE4()
{
  return OrderedSet.contains(_:)();
}

uint64_t BitArray.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v4 = sub_23835BA60();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0B10);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[2] = a1;
  v15[3] = a2;
  v15[0] = a1;
  v15[1] = a2;
  v11 = *MEMORY[0x24BEE4368];
  v12 = sub_23835BA54();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE43C0], v4);
  sub_2382C97B4();
  swift_bridgeObjectRetain_n();
  return sub_23835BA6C();
}

uint64_t sub_23831EF7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v1 = sub_23835BA60();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0B10);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0[1];
  v14 = *v0;
  v15 = v8;
  v13[0] = v14;
  v13[1] = v8;
  v9 = *MEMORY[0x24BEE4368];
  v10 = sub_23835BA54();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v7, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  sub_2382C97B4();
  swift_bridgeObjectRetain_n();
  return sub_23835BA6C();
}

uint64_t sub_23831F0DC(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = (uint64_t)v4;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_23826C24C(v4);
  v4 = (_QWORD *)result;
  *v2 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4[2] > a2)
    return (uint64_t)nullsub_1;
LABEL_7:
  __break(1u);
  return result;
}

void sub_23831F154()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[13];

  v1 = v0[6];
  v2 = v0[10];
  v3 = v1 >> 10;
  v4 = v2 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = v0;
  v7 = *v0;
  v6 = v0[1];
  v8 = v0[2];
  v9 = v0[3];
  v10 = v0[4];
  v11 = v0[5];
  v44 = v0[8];
  v45 = v0[7];
  v43 = v0[9];
  v12 = v0[11];
  v13 = v0[12];
  v14 = v0[13];
  v51[6] = *v0;
  v51[7] = v6;
  v49 = v8;
  v50 = v6;
  v51[8] = v8;
  v51[9] = v9;
  v47 = v10;
  v48 = v9;
  v51[10] = v10;
  v51[11] = v11;
  v46 = v11;
  v15 = sub_23825C960(v2, v12, v13, v14, 0xFFFFFFFFFFFFFFFFLL);
  v19 = (v15 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v19 < v3 || v19 >= v4)
    goto LABEL_10;
  sub_23825D9F4(v15 & 0xFFFFFFFFFFFFF8FFLL | 0x300, v16, v17, v18, v51);
  swift_unknownObjectRetain();
  v20 = sub_23825C960(v2, v12, v13, v14, 0xFFFFFFFFFFFFFFFFLL);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_unknownObjectRelease();
  v27 = (v20 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v27 < v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= v27)
  {
    swift_unknownObjectRetain();
    v28 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v1, v45, v44, v43);
    v30 = v29;
    v32 = v31;
    v33 = v22;
    v35 = v34;
    v36 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v20 & 0xFFFFFFFFFFFFF8FFLL | 0x300, v33, v24, v26);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_unknownObjectRelease();
    *v5 = v7;
    v5[1] = v50;
    v5[2] = v49;
    v5[3] = v48;
    v5[4] = v47;
    v5[5] = v46;
    v5[6] = v28;
    v5[7] = v30;
    v5[8] = v32;
    v5[9] = v35;
    v5[10] = v36;
    v5[11] = v38;
    v5[12] = v40;
    v5[13] = v42;
    return;
  }
LABEL_12:
  __break(1u);
}

void sub_23831F340()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0[6];
  v2 = v0[10];
  v3 = v1 >> 10;
  v4 = v2 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = v0;
  v6 = *v0;
  v38 = v0[8];
  v39 = v0[7];
  v37 = v0[9];
  v8 = v0[11];
  v7 = v0[12];
  v9 = v0[13];
  v44 = v0[1];
  v42 = v0[3];
  v43 = v0[2];
  v40 = v0[5];
  v41 = v0[4];
  v13 = sub_238278EB4(v2, v8, v7, v9, 0xFFFFFFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFF8FFLL;
  if (v13 >> 10 < v3 || v13 >> 10 >= v4)
    goto LABEL_10;
  sub_2383360EC(v13 | 0x100, v10, v11, v12);
  swift_unknownObjectRetain();
  v14 = sub_238278EB4(v2, v8, v7, v9, 0xFFFFFFFFFFFFFFFFLL);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_unknownObjectRelease();
  v21 = (v14 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v21 < v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= v21)
  {
    swift_unknownObjectRetain();
    v22 = sub_2382644F4(v1, v39, v38, v37);
    v24 = v23;
    v26 = v25;
    v27 = v16;
    v29 = v28;
    v30 = sub_2382644F4(v14 & 0xFFFFFFFFFFFFF8FFLL | 0x100, v27, v18, v20);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    swift_unknownObjectRelease();
    *v5 = v6;
    v5[1] = v44;
    v5[2] = v43;
    v5[3] = v42;
    v5[4] = v41;
    v5[5] = v40;
    v5[6] = v22;
    v5[7] = v24;
    v5[8] = v26;
    v5[9] = v29;
    v5[10] = v30;
    v5[11] = v32;
    v5[12] = v34;
    v5[13] = v36;
    return;
  }
LABEL_12:
  __break(1u);
}

unint64_t sub_23831F530(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = -(uint64_t)result;
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = v1;
  v4 = v1[6];
  result = v1[10];
  v5 = result >> 10;
  if (result >> 10 < v4 >> 10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = *v1;
  v35 = v1[1];
  v33 = v1[3];
  v34 = v1[2];
  v31 = v1[5];
  v32 = v1[4];
  v28 = v1[7];
  v29 = v1[9];
  v7 = v1[8];
  result = sub_238336000(result, v1[11], v1[12], v1[13], v2, v4, v28, v7, v29);
  if (v10 != 2)
  {
    v11 = result;
    if (result >> 10 >= v4 >> 10)
    {
      if (v5 >= result >> 10)
      {
        v12 = v10;
        v13 = v8;
        v14 = v9;
        swift_unknownObjectRetain();
        v30 = sub_2382644F4(v4, v28, v7, v29);
        v16 = v15;
        v18 = v17;
        v20 = v19;
        v21 = sub_2382644F4(v11, v13, v14, v12);
        v23 = v22;
        v25 = v24;
        v27 = v26;
        swift_unknownObjectRelease();
        *v3 = v6;
        v3[1] = v35;
        v3[2] = v34;
        v3[3] = v33;
        v3[4] = v32;
        v3[5] = v31;
        v3[6] = v30;
        v3[7] = v16;
        v3[8] = v18;
        v3[9] = v20;
        v3[10] = v21;
        v3[11] = v23;
        v3[12] = v25;
        v3[13] = v27;
        return 1;
      }
      goto LABEL_10;
    }
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_23831F6B4(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = -(uint64_t)result;
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = v1;
  v4 = v1[6];
  result = v1[10];
  v5 = result >> 10;
  if (result >> 10 < v4 >> 10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = *v1;
  v35 = v1[1];
  v33 = v1[3];
  v34 = v1[2];
  v31 = v1[5];
  v32 = v1[4];
  v28 = v1[7];
  v29 = v1[9];
  v7 = v1[8];
  result = BigString.index(_:offsetBy:limitedBy:)(result, v1[11], v1[12], v1[13], v2, v4, v28, v7, v29);
  if (v10 != 2)
  {
    v11 = result;
    if (result >> 10 >= v4 >> 10)
    {
      if (v5 >= result >> 10)
      {
        v12 = v10;
        v13 = v8;
        v14 = v9;
        swift_unknownObjectRetain();
        v30 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v28, v7, v29);
        v16 = v15;
        v18 = v17;
        v20 = v19;
        v21 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v11, v13, v14, v12);
        v23 = v22;
        v25 = v24;
        v27 = v26;
        swift_unknownObjectRelease();
        *v3 = v6;
        v3[1] = v35;
        v3[2] = v34;
        v3[3] = v33;
        v3[4] = v32;
        v3[5] = v31;
        v3[6] = v30;
        v3[7] = v16;
        v3[8] = v18;
        v3[9] = v20;
        v3[10] = v21;
        v3[11] = v23;
        v3[12] = v25;
        v3[13] = v27;
        return 1;
      }
      goto LABEL_10;
    }
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23831F838()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[13];

  v1 = v0[6];
  v2 = v0[10];
  v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = v0;
  v6 = *v0;
  v5 = v0[1];
  v7 = v0[2];
  v8 = v0[3];
  v9 = v0[4];
  v10 = v0[5];
  v11 = v0[7];
  v12 = v0[8];
  v13 = v0[9];
  v37 = v0[12];
  v38 = v0[11];
  v36 = v0[13];
  v44[6] = *v0;
  v44[7] = v5;
  v42 = v7;
  v43 = v5;
  v44[8] = v7;
  v44[9] = v8;
  v40 = v9;
  v41 = v8;
  v44[10] = v9;
  v44[11] = v10;
  v39 = v10;
  sub_23825D9F4(v1, v11, v12, v13, v44);
  swift_unknownObjectRetain();
  v14 = sub_23825C960(v1, v11, v12, v13, 1uLL);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_unknownObjectRelease();
  v21 = (v14 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v2 >> 10 < v21)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v21 >= v3)
  {
    swift_unknownObjectRetain();
    v22 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v14 & 0xFFFFFFFFFFFFF8FFLL | 0x300, v16, v18, v20);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v29 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v2, v38, v37, v36);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    swift_unknownObjectRelease();
    *v4 = v6;
    v4[1] = v43;
    v4[2] = v42;
    v4[3] = v41;
    v4[4] = v40;
    v4[5] = v39;
    v4[6] = v22;
    v4[7] = v24;
    v4[8] = v26;
    v4[9] = v28;
    v4[10] = v29;
    v4[11] = v31;
    v4[12] = v33;
    v4[13] = v35;
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_23831F9FC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0[6];
  v2 = v0[10];
  v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >> 10 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = v0;
  v5 = *v0;
  v6 = v0[7];
  v7 = v0[8];
  v8 = v0[9];
  v32 = v0[12];
  v33 = v0[11];
  v31 = v0[13];
  v38 = v0[1];
  v36 = v0[3];
  v37 = v0[2];
  v34 = v0[5];
  v35 = v0[4];
  sub_2383360EC(v1, v6, v7, v8);
  swift_unknownObjectRetain();
  v9 = sub_238278EB4(v1, v6, v7, v8, 1uLL);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_unknownObjectRelease();
  v16 = (v9 & 0xFFFFFFFFFFFFF8FFLL) >> 10;
  if (v2 >> 10 < v16)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v16 >= v3)
  {
    swift_unknownObjectRetain();
    v17 = sub_2382644F4(v9 & 0xFFFFFFFFFFFFF8FFLL | 0x100, v11, v13, v15);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v24 = sub_2382644F4(v2, v33, v32, v31);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    swift_unknownObjectRelease();
    *v4 = v5;
    v4[1] = v38;
    v4[2] = v37;
    v4[3] = v36;
    v4[4] = v35;
    v4[5] = v34;
    v4[6] = v17;
    v4[7] = v19;
    v4[8] = v21;
    v4[9] = v23;
    v4[10] = v24;
    v4[11] = v26;
    v4[12] = v28;
    v4[13] = v30;
    return;
  }
LABEL_9:
  __break(1u);
}

unint64_t sub_23831FBB0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (result)
  {
    v2 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v3 = v1;
      result = v1[6];
      v4 = v1[10];
      v5 = result >> 10;
      if (v4 >> 10 >= result >> 10)
      {
        v6 = *v1;
        v35 = v1[1];
        v33 = v1[3];
        v34 = v1[2];
        v31 = v1[5];
        v32 = v1[4];
        v28 = v1[13];
        v29 = v1[12];
        v30 = v1[11];
        result = BigString.index(_:offsetBy:limitedBy:)(result, v1[7], v1[8], v1[9], v2, v4, v30, v29, v28);
        if (v9 == 2)
        {
LABEL_13:
          __break(1u);
          return result;
        }
        v10 = result;
        if (v4 >> 10 >= result >> 10)
        {
          if (result >> 10 >= v5)
          {
            v11 = v7;
            v12 = v8;
            v13 = v9;
            swift_unknownObjectRetain();
            v14 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v10, v11, v12, v13);
            v16 = v15;
            v18 = v17;
            v20 = v19;
            v21 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v30, v29, v28);
            v23 = v22;
            v25 = v24;
            v27 = v26;
            result = swift_unknownObjectRelease();
            *v3 = v6;
            v3[1] = v35;
            v3[2] = v34;
            v3[3] = v33;
            v3[4] = v32;
            v3[5] = v31;
            v3[6] = v14;
            v3[7] = v16;
            v3[8] = v18;
            v3[9] = v20;
            v3[10] = v21;
            v3[11] = v23;
            v3[12] = v25;
            v3[13] = v27;
            return result;
          }
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

unint64_t sub_23831FD30(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (result)
  {
    v2 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v3 = v1;
      result = v1[6];
      v4 = v1[10];
      v5 = result >> 10;
      if (v4 >> 10 >= result >> 10)
      {
        v6 = *v1;
        v35 = v1[1];
        v33 = v1[3];
        v34 = v1[2];
        v31 = v1[5];
        v32 = v1[4];
        v28 = v1[13];
        v29 = v1[12];
        v30 = v1[11];
        result = sub_238336000(result, v1[7], v1[8], v1[9], v2, v4, v30, v29, v28);
        if (v9 == 2)
        {
LABEL_13:
          __break(1u);
          return result;
        }
        v10 = result;
        if (v4 >> 10 >= result >> 10)
        {
          if (result >> 10 >= v5)
          {
            v11 = v7;
            v12 = v8;
            v13 = v9;
            swift_unknownObjectRetain();
            v14 = sub_2382644F4(v10, v11, v12, v13);
            v16 = v15;
            v18 = v17;
            v20 = v19;
            v21 = sub_2382644F4(v4, v30, v29, v28);
            v23 = v22;
            v25 = v24;
            v27 = v26;
            result = swift_unknownObjectRelease();
            *v3 = v6;
            v3[1] = v35;
            v3[2] = v34;
            v3[3] = v33;
            v3[4] = v32;
            v3[5] = v31;
            v3[6] = v14;
            v3[7] = v16;
            v3[8] = v18;
            v3[9] = v20;
            v3[10] = v21;
            v3[11] = v23;
            v3[12] = v25;
            v3[13] = v27;
            return result;
          }
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

void sub_23831FEB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  _BYTE v68[22];
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;

  v3 = a1;
  ++v2[5];
  v5 = MEMORY[0x24BEE4AF8];
  v64 = MEMORY[0x24BEE4AF8];
  v65 = 0u;
  v66 = 0u;
  memset(v67, 0, 30);
  *(_QWORD *)v68 = 0;
  *(_QWORD *)&v68[8] = 0;
  *(_QWORD *)&v68[14] = 0;
  v69 = MEMORY[0x24BEE4AF8];
  v6 = *v2;
  if (*v2 && *(_WORD *)(v6 + 16))
  {
    v7 = *(_OWORD *)(v2 + 1);
    v8 = *(_OWORD *)(v2 + 3);
    v63 = a1;
    v60 = v6;
    v61 = v7;
    v62 = v8;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    v2[4] = 0;
    if (!*(_BYTE *)(v6 + 18))
    {
LABEL_26:
      v17 = sub_238324850(v6 + 16, v6 + 24, &v63);
      v19 = v18;
      v70 = v6;
      v71 = v61;
      v72 = v62;
      swift_unknownObjectRetain();
      sub_23826A924(v17, (uint64_t)&v64, (uint64_t)&v55);
      v21 = v55;
      v20 = v56;
      v22 = v57 | ((unint64_t)v58 << 32) | ((unint64_t)v59 << 40);
      v23 = sub_23826313C(v19, v55, v56);
      v24 = sub_238262E88(v23, v21, v20, v22);
      v26 = v25;
      v53 = v24;
      v54 = HIBYTE(v25);
      swift_bridgeObjectRetain();
      v27 = sub_23825E150(v23, v21, v20);
      v29 = v28;
      v31 = v30;
      v33 = v32;
      swift_bridgeObjectRelease();
      v34 = MEMORY[0x23B8306D4](v27, v29, v31, v33);
      v36 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v37 = sub_23835AF80();
      v39 = v38;
      v41 = v40;
      v43 = v42;
      swift_bridgeObjectRelease();
      v44 = MEMORY[0x23B8306D4](v37, v39, v41, v43);
      v46 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23826A0FC(v34, v36, (v26 << 16) & 0xFF0000 | HIWORD(v53) | (v26 << 16) & 0xFF000000 | (v54 << 40) | ((unint64_t)BYTE2(v26) << 32));
      swift_bridgeObjectRetain();
      sub_238263184(v44, v46, v53 & 0xFFFFFFFFFFFFLL);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47 = *(_QWORD *)&v67[1];
      v48 = DWORD2(v67[1]);
      v49 = WORD6(v67[1]);
      v50 = *(_DWORD *)&v68[16];
      v51 = *(_WORD *)&v68[20];
      v52 = v69;
      *(_QWORD *)a2 = v64;
      *(_OWORD *)(a2 + 8) = v65;
      *(_OWORD *)(a2 + 24) = v66;
      *(_OWORD *)(a2 + 40) = v67[0];
      *(_QWORD *)(a2 + 56) = v47;
      *(_WORD *)(a2 + 68) = v49;
      *(_DWORD *)(a2 + 64) = v48;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)v68;
      *(_WORD *)(a2 + 92) = v51;
      *(_DWORD *)(a2 + 88) = v50;
      *(_QWORD *)(a2 + 96) = v52;
      return;
    }
    while (1)
    {
      v10 = *(unsigned __int16 *)(v6 + 16);
      if (*(_WORD *)(v6 + 16))
      {
        v11 = *(_QWORD *)(v6 + 56);
        v12 = __OFSUB__(v3, v11);
        v13 = v3 - v11;
        if (v12)
          goto LABEL_30;
        if (v13 <= 0)
        {
          v9 = 0;
        }
        else
        {
          if ((_DWORD)v10 == 1)
            goto LABEL_33;
          v14 = *(_QWORD *)(v6 + 96);
          v3 = v13 - v14;
          if (__OFSUB__(v13, v14))
            goto LABEL_31;
          if (v3 >= 1)
          {
            if ((_DWORD)v10 == 2)
              goto LABEL_33;
            v15 = (_QWORD *)(v6 + 136);
            v9 = 2;
            while (v10 != v9)
            {
              v16 = v3 - *v15;
              if (__OFSUB__(v3, *v15))
                goto LABEL_29;
              if (v16 < 1)
                goto LABEL_6;
              ++v9;
              v15 += 5;
              v3 = v16;
              if (v10 == v9)
                goto LABEL_33;
            }
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            return;
          }
          v9 = 1;
          v3 = v13;
        }
      }
      else
      {
        if (v3)
          goto LABEL_33;
        v9 = -1;
      }
LABEL_6:
      sub_238320278((void *)v9, (uint64_t)&v64);
      v6 = v60;
      if (!*(_BYTE *)(v60 + 18))
      {
        v63 = v3;
        goto LABEL_26;
      }
    }
  }
  if (a1)
    goto LABEL_32;
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a2 + 8) = 0uLL;
  *(_OWORD *)(a2 + 24) = 0uLL;
  *(_OWORD *)(a2 + 40) = 0uLL;
  *(_OWORD *)(a2 + 54) = 0uLL;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 86) = 0;
  *(_QWORD *)(a2 + 96) = v5;
}

void sub_238320278(void *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t *v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  _QWORD v62[5];
  __int128 v63[2];
  _OWORD v64[2];
  uint64_t v65;
  _QWORD v66[5];
  __int128 v67[2];
  uint64_t v68;
  __int128 v69[2];
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v3 = (uint64_t *)v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v6 = v2[1];
    v71 = *v2;
    v72 = v6;
    v73 = *((_QWORD *)v2 + 4);
    sub_238259B30((uint64_t)v60);
    swift_unknownObjectRelease();
    v7 = v60[1];
    *v2 = v60[0];
    v2[1] = v7;
    *((_QWORD *)v2 + 4) = v61;
  }
  v8 = *(unsigned __int16 *)(*(_QWORD *)v2 + 16);
  if ((void *)(v8 - 2) == a1)
  {
    sub_238320630((void *)(v8 - 1), (uint64_t)v62);
    v9 = v62[0];
    v54 = v62[1];
    v10 = v62[3];
    v51 = v62[4];
    v52 = v62[2];
    *(_QWORD *)&v69[0] = 0;
    swift_unknownObjectRetain();
    MEMORY[0x23B831730](v69, 8);
    v11 = *(_QWORD *)&v69[0];
    v12 = *(_QWORD **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_23826C274(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = sub_23826C274((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v15 = &v12[6 * v14];
    v15[4] = v9;
    v15[5] = v54;
    v15[6] = v52;
    v15[7] = v10;
    v15[8] = v51;
    v15[9] = v11;
    sub_23825B804((uint64_t)v62);
    *(_QWORD *)(a2 + 96) = v12;
  }
  if (a1 == (void *)1)
  {
    sub_238320630(0, (uint64_t)v63);
    sub_238269DD0(v63, v16, v17, v18);
    a1 = 0;
  }
  sub_238320630(a1, (uint64_t)v64);
  v22 = *((_OWORD *)v3 + 1);
  v67[0] = *(_OWORD *)v3;
  v67[1] = v22;
  v68 = v3[4];
  v23 = v68;
  v24 = *v3;
  v25 = *(_OWORD *)(v3 + 1);
  v26 = *(_OWORD *)(v3 + 3);
  v27 = v64[1];
  *(_OWORD *)v3 = v64[0];
  *((_OWORD *)v3 + 1) = v27;
  v3[4] = v65;
  v59 = v23;
  v57 = v67[0];
  v58 = v22;
  if (*(_WORD *)(*(_QWORD *)&v67[0] + 16))
  {
    if (a1)
    {
      if (a1 == (void *)*(unsigned __int16 *)(*(_QWORD *)&v67[0] + 16))
      {
        sub_238269DD0(v67, v19, v20, v21);
      }
      else
      {
        sub_2383525B0((uint64_t)a1, (uint64_t)v66);
        v35 = v66[0];
        v36 = v66[1];
        v37 = a2;
        v38 = v66[2];
        v39 = v66[3];
        v40 = v66[4];
        v69[0] = v57;
        v69[1] = v58;
        v70 = v59;
        swift_unknownObjectRetain();
        sub_238269DD0(v69, v41, v42, v43);
        v56 = 0;
        swift_unknownObjectRetain();
        MEMORY[0x23B831730](&v56, 8);
        v44 = v56;
        v45 = v37;
        v46 = *(_QWORD **)(v37 + 96);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = sub_23826C274(0, v46[2] + 1, 1, v46);
        v48 = v46[2];
        v47 = v46[3];
        if (v48 >= v47 >> 1)
          v46 = sub_23826C274((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
        v46[2] = v48 + 1;
        v49 = &v46[6 * v48];
        v49[4] = v35;
        v49[5] = v36;
        v49[6] = v38;
        v49[7] = v39;
        v49[8] = v40;
        v49[9] = v44;
        sub_23825B804((uint64_t)v66);
        sub_23825B804((uint64_t)v69);
        *(_QWORD *)(v45 + 96) = v46;
      }
    }
    else
    {
      v53 = v26;
      v55 = v25;
      *(_QWORD *)&v69[0] = 0;
      swift_unknownObjectRetain();
      MEMORY[0x23B831730](v69, 8);
      v28 = *(_QWORD *)&v69[0];
      v29 = *(_QWORD **)(a2 + 96);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v29 = sub_23826C274(0, v29[2] + 1, 1, v29);
      v31 = v29[2];
      v30 = v29[3];
      v33 = v53;
      v32 = v55;
      if (v31 >= v30 >> 1)
      {
        v50 = sub_23826C274((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v33 = v53;
        v32 = v55;
        v29 = v50;
      }
      v29[2] = v31 + 1;
      v34 = &v29[6 * v31];
      v34[4] = v24;
      *(_OWORD *)(v34 + 5) = v32;
      *(_OWORD *)(v34 + 7) = v33;
      v34[9] = v28;
      sub_23825B804((uint64_t)v67);
      *(_QWORD *)(a2 + 96) = v29;
    }
  }
  else
  {
    sub_23825B804((uint64_t)v67);
  }
}

uint64_t sub_238320630@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  __int128 v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v5 = v2[1];
    v28 = *v2;
    v29 = v5;
    v30 = *((_QWORD *)v2 + 4);
    sub_238259B30((uint64_t)v23);
    swift_unknownObjectRelease();
    v6 = v23[1];
    *v2 = v23[0];
    v2[1] = v6;
    *((_QWORD *)v2 + 4) = v24;
  }
  v7 = (_WORD *)(*(_QWORD *)v2 + 16);
  v8 = *(_QWORD *)v2 + 24;
  swift_unknownObjectRetain();
  sub_238353B4C(a1, v7, v8, (uint64_t)&v25);
  v9 = *((_QWORD *)&v25 + 1);
  v11 = v26;
  v10 = v27;
  result = swift_unknownObjectRelease();
  v13 = *((_QWORD *)v2 + 1);
  v14 = __OFSUB__(v13, v9);
  v15 = v13 - v9;
  if (v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  *((_QWORD *)v2 + 1) = v15;
  v16 = *((_QWORD *)v2 + 2);
  v14 = __OFSUB__(v16, (_QWORD)v11);
  v17 = v16 - v11;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *((_QWORD *)v2 + 2) = v17;
  v18 = *((_QWORD *)v2 + 3);
  v14 = __OFSUB__(v18, *((_QWORD *)&v11 + 1));
  v19 = v18 - *((_QWORD *)&v11 + 1);
  if (v14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((_QWORD *)v2 + 3) = v19;
  v20 = *((_QWORD *)v2 + 4);
  v14 = __OFSUB__(v20, v10);
  v21 = v20 - v10;
  if (!v14)
  {
    *((_QWORD *)v2 + 4) = v21;
    v22 = v26;
    *(_OWORD *)a2 = v25;
    *(_OWORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 32) = v27;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_238320750(_QWORD *a1))(void **a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  if (v1[7])
    return sub_2382A5D44;
  v5 = v3;
  v6 = v1[1];
  if (v6 && *(_WORD *)(v6 + 16))
  {
    v3[15] = sub_2383537D0(v3);
    return (void (*)(void **))sub_238320818;
  }
  else
  {
    v3[12] = sub_23831F0DC((uint64_t)v3, *(_QWORD *)(*v1 + 16) - 1);
    v5[13] = sub_23832D4C4();
    v5[14] = sub_2383537D0(v5 + 8);
    return (void (*)(void **))sub_238320814;
  }
}

void sub_238320818(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 120))(*a1, 0);
  free(v1);
}

void (*sub_238320848(_QWORD *a1))(void **)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  v3 = malloc(0x78uLL);
  *a1 = v3;
  if (*(_QWORD *)(v1 + 80))
    return sub_238325E9C;
  v5 = v3;
  v6 = v3 + 8;
  v3[12] = sub_23831F0DC((uint64_t)v3, *(_QWORD *)(*(_QWORD *)(v1 + 96) + 16) - 1);
  v5[13] = sub_23832D4C4();
  v5[14] = sub_238320930(v6);
  return (void (*)(void **))sub_238320814;
}

void sub_2383208D8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  void (*v4)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(_QWORD *)a1 + 32;
  v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104);
  v4 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 96);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(*(_QWORD *)a1 + 64, 0);
  v3(v2, 0);
  v4(v1, 0);
  free(v1);
}

void (*sub_238320930(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = sub_2383548E0(v3, *(unsigned __int8 *)(*(_QWORD *)v1 + 18));
  return sub_2382BBFC8;
}

uint64_t sub_23832097C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if (v3 < 1)
  {
    return sub_23825B804(a3);
  }
  else if (v3 == 1)
  {
    v5 = *(_QWORD *)a3 + 24;
    if (*(_BYTE *)(*(_QWORD *)a3 + 18))
    {
      v6 = v5 + 40 * result;
      v17 = *(_QWORD *)v6;
      v18 = *(_OWORD *)(v6 + 8);
      v19 = *(_OWORD *)(v6 + 24);
      swift_unknownObjectRetain_n();
      sub_238269DD0((__int128 *)&v17, v7, v8, v9);
      sub_23825B804(a3);
      return swift_unknownObjectRelease();
    }
    else
    {
      v13 = v5 + 24 * result;
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(unsigned int *)(v13 + 16) | ((unint64_t)*(unsigned __int8 *)(v13 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v13 + 21) << 40);
      swift_bridgeObjectRetain_n();
      sub_238263184(v14, v15, v16);
      sub_23825B804(a3);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_238320AE8(result, a2, (uint64_t)&v17);
    swift_unknownObjectRetain();
    sub_238269DD0((__int128 *)&v17, v10, v11, v12);
    sub_23825B804(a3);
    return sub_23825B804((uint64_t)&v17);
  }
  return result;
}

_WORD *sub_238320AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  _WORD *result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v7 = *v3;
  v8 = *(_BYTE *)(v7 + 18);
  v9 = a2 - a1;
  v10 = __OFSUB__(a2, a1);
  if (*(_BYTE *)(v7 + 18))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542CACA8);
    v11 = swift_allocObject();
    *(_WORD *)(v11 + 16) = 0;
    result = (_WORD *)(v11 + 16);
    *(_BYTE *)(v11 + 18) = v8;
    if (!v10)
    {
      sub_2383240A8(result, v11 + 24, v9, v7 + 24, a1, a2);
      result = (_WORD *)sub_238295C60(v11, &v16);
LABEL_9:
      v14 = v17;
      v15 = v18;
      *(_QWORD *)a3 = v16;
      *(_OWORD *)(a3 + 8) = v14;
      *(_OWORD *)(a3 + 24) = v15;
      return result;
    }
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542CB268);
    v13 = swift_allocObject();
    *(_WORD *)(v13 + 16) = 0;
    result = (_WORD *)(v13 + 16);
    *(_BYTE *)(v13 + 18) = 0;
    if (!v10)
    {
      sub_238323FB8(result, v13 + 24, v9, v7 + 24, a1, a2);
      result = (_WORD *)sub_23826A418(v13, &v16);
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_238320C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[5];

  v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = a3;
  if (v12 < 1)
    return sub_23825B804(a3);
  v3 = v4;
  if (v12 != 1)
  {
    sub_238320AE8(a1, a2, (uint64_t)v44);
    v4 = v44[0];
    v7 = v44[1];
    v8 = v44[2];
    v9 = v44[3];
    v10 = v44[4];
    v43 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x23B831730](&v43, 8);
    v11 = v43;
    v6 = *(_QWORD **)(v3 + 96);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_13:
      v27 = v6[2];
      v28 = v6[3];
      v29 = v27 + 1;
      if (v27 >= v28 >> 1)
      {
        v41 = v27 + 1;
        v35 = v6;
        v36 = v6[2];
        v37 = sub_23826C274((_QWORD *)(v28 > 1), v27 + 1, 1, v35);
        v27 = v36;
        v29 = v41;
        v6 = v37;
      }
      v6[2] = v29;
      v30 = &v6[6 * v27];
      v30[4] = v4;
      v30[5] = v7;
      v30[6] = v8;
      v30[7] = v9;
      v30[8] = v10;
      v30[9] = v11;
      sub_23825B804(v5);
      result = sub_23825B804((uint64_t)v44);
LABEL_16:
      *(_QWORD *)(v3 + 96) = v6;
      return result;
    }
LABEL_19:
    v6 = sub_23826C274(0, v6[2] + 1, 1, v6);
    goto LABEL_13;
  }
  v13 = *(_QWORD *)a3 + 24;
  if (*(_BYTE *)(*(_QWORD *)a3 + 18))
  {
    v14 = (uint64_t *)(v13 + 40 * a1);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    v19 = v14[4];
    v44[0] = 0;
    swift_unknownObjectRetain_n();
    MEMORY[0x23B831730](v44, 8);
    v20 = v44[0];
    v6 = *(_QWORD **)(v3 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_23826C274(0, v6[2] + 1, 1, v6);
    v21 = v6[2];
    v22 = v6[3];
    v23 = v21 + 1;
    if (v21 >= v22 >> 1)
    {
      v42 = v21 + 1;
      v38 = v6;
      v39 = v6[2];
      v40 = sub_23826C274((_QWORD *)(v22 > 1), v21 + 1, 1, v38);
      v21 = v39;
      v23 = v42;
      v6 = v40;
    }
    v6[2] = v23;
    v24 = &v6[6 * v21];
    v24[4] = v15;
    v24[5] = v16;
    v24[6] = v17;
    v24[7] = v18;
    v24[8] = v19;
    v24[9] = v20;
    sub_23825B804(v5);
    result = swift_unknownObjectRelease();
    goto LABEL_16;
  }
  v31 = v13 + 24 * a1;
  v32 = *(_QWORD *)v31;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(unsigned int *)(v31 + 16) | ((unint64_t)*(unsigned __int8 *)(v31 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v31 + 21) << 40);
  swift_bridgeObjectRetain_n();
  sub_23826A0FC(v32, v33, v34);
  sub_23825B804(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_238320EB4(uint64_t result, _WORD *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v18;

  if (result < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18 = result;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (result)
  {
    v7 = (uint64_t *)(a3 + 16);
    v8 = result;
    while (1)
    {
      v9 = *(v7 - 1);
      v10 = *v7;
      v11 = v7[1];
      v12 = v7[2];
      result = swift_unknownObjectRelease();
      v13 = __OFADD__(v6, v9);
      v6 += v9;
      if (v13)
        break;
      v13 = __OFADD__(v5, v10);
      v5 += v10;
      if (v13)
        goto LABEL_15;
      v13 = __OFADD__(v4, v11);
      v4 += v11;
      if (v13)
        goto LABEL_16;
      v13 = __OFADD__(v3, v12);
      v3 += v12;
      if (v13)
        goto LABEL_17;
      v7 += 5;
      if (!--v8)
        goto LABEL_9;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  v14 = (unsigned __int16)*a2 - v18;
  if (v14 < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *a2 = v14;
  v15 = &a3[40 * v18];
  if (v18 > 0 || &v15[40 * (unsigned __int16)v14] <= a3)
    memmove(a3, v15, 40 * (unsigned __int16)v14);
  return v6;
}

uint64_t sub_238320FC4(uint64_t result, _WORD *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  uint64_t v19;

  if (result < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v19 = result;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (result)
  {
    v7 = a3 + 19;
    v8 = result;
    while (1)
    {
      v9 = *(v7 - 3);
      v10 = *(v7 - 2);
      v11 = *(v7 - 1);
      v12 = *v7;
      result = swift_bridgeObjectRelease();
      v13 = __OFADD__(v6, v12);
      v6 += v12;
      if (v13)
        break;
      v13 = __OFADD__(v5, v11);
      v5 += v11;
      if (v13)
        goto LABEL_15;
      v13 = __OFADD__(v4, v10);
      v4 += v10;
      if (v13)
        goto LABEL_16;
      v13 = __OFADD__(v3, v9);
      v3 += v9;
      if (v13)
        goto LABEL_17;
      v7 += 24;
      if (!--v8)
        goto LABEL_9;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  v14 = (unsigned __int16)*a2 - v19;
  if (v14 < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *a2 = v14;
  v15 = &a3[24 * v19];
  v16 = 24 * (unsigned __int16)v14;
  if (v19 > 0 || &v15[v16] <= a3)
    memmove(a3, v15, v16);
  return v6;
}

uint64_t sub_2383210DC(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int16 *v20;

  v3 = *a2;
  v4 = v3 - result;
  v5 = __OFSUB__(v3, result);
  if (__OFSUB__(v3, result))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v4 > v3)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v4 == v3)
  {
    v6 = 0;
    if (!v5)
    {
LABEL_8:
      if ((v4 & 0x8000000000000000) == 0)
      {
        if (!((unint64_t)v4 >> 16))
        {
          *a2 = v4;
          return v6;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v4 < v3)
  {
    v19 = result;
    v20 = a2;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = (unsigned __int8 *)(24 * *a2 - 24 * result + a3 + 19);
    v11 = result;
    while (1)
    {
      v12 = *(v10 - 3);
      v13 = *(v10 - 2);
      v14 = *(v10 - 1);
      v15 = *v10;
      result = swift_bridgeObjectRelease();
      v16 = __OFADD__(v6, v15);
      v6 += v15;
      if (v16)
        break;
      v16 = __OFADD__(v9, v14);
      v9 += v14;
      if (v16)
        goto LABEL_24;
      v16 = __OFADD__(v8, v13);
      v8 += v13;
      if (v16)
        goto LABEL_25;
      v16 = __OFADD__(v7, v12);
      v7 += v12;
      if (v16)
        goto LABEL_26;
      v10 += 24;
      if (!--v11)
      {
        a2 = v20;
        v17 = *v20;
        v16 = __OFSUB__(v17, v19);
        v4 = v17 - v19;
        v18 = v16;
        if ((v18 & 1) == 0)
          goto LABEL_8;
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_238321220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v6 = *(_QWORD *)v2;
  if (a1 == 1)
  {
    v10 = *(_QWORD *)(v6 + 24);
    v11 = *(_QWORD *)(v6 + 32);
    v12 = *(unsigned int *)(v6 + 40);
    v13 = *(unsigned __int8 *)(v6 + 44);
    v14 = *(unsigned __int8 *)(v6 + 45);
    v15 = *(_QWORD *)(v6 + 56);
    v16 = *(_WORD *)(v6 + 68);
    *(_QWORD *)a2 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(a2 + 8) = v15;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v6 + 64);
    *(_WORD *)(a2 + 20) = v16;
    v17 = v12 | (v13 << 32) | (v14 << 40);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_238263184(v10, v11, v17);
    sub_23825B804(v3);
    return swift_bridgeObjectRelease();
  }
  if (!a1)
  {
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_WORD *)(v6 + 44);
    *(_QWORD *)a2 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v6 + 40);
    *(_WORD *)(a2 + 20) = v8;
    swift_bridgeObjectRetain();
    return sub_23825B804(v2);
  }
  v18 = *(_OWORD *)(v2 + 16);
  v34 = *(_OWORD *)v2;
  v35 = v18;
  v36 = *(_QWORD *)(v2 + 32);
  swift_unknownObjectRetain();
  v19 = v34;
  result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    v39 = v34;
    v40 = v35;
    v41 = v36;
    sub_238259B30((uint64_t)&v34);
    result = swift_unknownObjectRelease();
    v19 = v34;
  }
  v20 = *(unsigned __int16 *)(v19 + 16);
  if (v20 - 1 <= a1)
    goto LABEL_15;
  v21 = __OFSUB__(v20, a1);
  v22 = v20 - a1;
  if (v21)
  {
    __break(1u);
    goto LABEL_17;
  }
  v23 = v22 - 1;
  if (__OFSUB__(v22, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  v24 = sub_2383210DC(v23, (unsigned __int16 *)(v19 + 16), v19 + 24);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  result = swift_unknownObjectRelease();
  if (__OFSUB__(*((_QWORD *)&v34 + 1), v24))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *((_QWORD *)&v34 + 1) -= v24;
  if (__OFSUB__((_QWORD)v35, v26))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)&v35 = v35 - v26;
  if (__OFSUB__(*((_QWORD *)&v35 + 1), v28))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *((_QWORD *)&v35 + 1) -= v28;
  if (!__OFSUB__(v36, v30))
  {
    v36 -= v30;
LABEL_15:
    sub_23826A814((unsigned __int8 *)a2, a1);
    v37[0] = v34;
    v37[1] = v35;
    v38 = v36;
    swift_unknownObjectRetain();
    sub_238269DD0(v37, v31, v32, v33);
    sub_23825B804(v3);
    return swift_unknownObjectRelease();
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_238321484(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;

  v7 = v2;
  v9 = *v2;
  v10 = *(unsigned __int16 *)(*v2 + 16);
  if (v10 - 1 == a1)
  {
    v11 = v9 + 40 * a1;
    v12 = *(_QWORD *)(v11 + 24);
    v54 = *(_OWORD *)(v11 + 32);
    v13 = *(_QWORD *)(v11 + 48);
    v14 = *(_QWORD *)(v11 + 56);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
    *v7 = v12;
    *(_OWORD *)(v7 + 1) = v54;
    v7[3] = v13;
    v7[4] = v14;
    return result;
  }
  if (v10 - 2 == a1)
  {
    v17 = (uint64_t *)(v9 + 24 + 40 * a1);
    v18 = *v17;
    v51 = v17[1];
    v50 = v17[2];
    v52 = v17[3];
    v55 = v17[4];
    v19 = (uint64_t *)(v9 + 24 + 40 * ((int)v10 - 1));
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = v19[3];
    v49 = v19[4];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)&v60[0] = 0;
    swift_unknownObjectRetain();
    MEMORY[0x23B831730](v60, 8);
    v24 = *(_QWORD *)&v60[0];
    v25 = *(_QWORD **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = sub_23826C274(0, v25[2] + 1, 1, v25);
    v27 = v25[2];
    v26 = v25[3];
    v28 = v27 + 1;
    if (v27 >= v26 >> 1)
    {
      v48 = sub_23826C274((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
      v28 = v27 + 1;
      v25 = v48;
    }
    v25[2] = v28;
    v29 = &v25[6 * v27];
    v29[4] = v20;
    v29[5] = v21;
    v29[6] = v22;
    v29[7] = v23;
    v29[8] = v49;
    v29[9] = v24;
    result = swift_unknownObjectRelease();
    *(_QWORD *)(a2 + 96) = v25;
    *v7 = v18;
    v7[1] = v51;
    v7[2] = v50;
    v7[3] = v52;
    v7[4] = v55;
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v30 = *((_OWORD *)v2 + 1);
    v60[0] = *(_OWORD *)v2;
    v60[1] = v30;
    v61 = v2[4];
    sub_238259B30((uint64_t)v58);
    swift_unknownObjectRelease();
    v31 = v58[1];
    *(_OWORD *)v2 = v58[0];
    *((_OWORD *)v2 + 1) = v31;
    v2[4] = v59;
  }
  v32 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  v33 = *v7;
  v34 = (char *)(*v7 + 24);
  v35 = &v34[40 * a1];
  v36 = *(_QWORD *)v35;
  v53 = *(_OWORD *)(v35 + 24);
  v56 = *(_OWORD *)(v35 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5 = sub_238320EB4(v32, (_WORD *)(v33 + 16), v34);
  v3 = v37;
  v9 = v38;
  v32 = v39;
  swift_unknownObjectRelease();
  v40 = v7[1];
  v4 = v40 - v5;
  if (__OFSUB__(v40, v5))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v41 = v7[2];
  v42 = __OFSUB__(v41, v3);
  v3 = v41 - v3;
  if (v42)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v43 = v7[3];
  v42 = __OFSUB__(v43, v9);
  v9 = v43 - v9;
  if (v42)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v44 = v7[4];
  v5 = v44 - v32;
  if (__OFSUB__(v44, v32))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v32 = *v7;
  *v7 = v36;
  *(_OWORD *)(v7 + 1) = v56;
  *(_OWORD *)(v7 + 3) = v53;
  v57 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x23B831730](&v57, 8);
  v6 = v57;
  v7 = *(_QWORD **)(a2 + 96);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
    v7 = sub_23826C274(0, v7[2] + 1, 1, v7);
  v46 = v7[2];
  v45 = v7[3];
  if (v46 >= v45 >> 1)
    v7 = sub_23826C274((_QWORD *)(v45 > 1), v46 + 1, 1, v7);
  v7[2] = v46 + 1;
  v47 = &v7[6 * v46];
  v47[4] = v32;
  v47[5] = v4;
  v47[6] = v3;
  v47[7] = v9;
  v47[8] = v5;
  v47[9] = v6;
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a2 + 96) = v7;
  return result;
}

uint64_t sub_2383217F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[10];

  v4 = (uint64_t)v3;
  v6 = *v3;
  v7 = *(unsigned __int16 *)(*v3 + 16);
  if (v7 - 1 == a1)
  {
    v8 = v6 + 24 * *(unsigned __int16 *)(*v3 + 16);
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_WORD *)(v8 + 20);
    *(_QWORD *)a3 = *(_QWORD *)v8;
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v8 + 16);
    *(_WORD *)(a3 + 20) = v10;
    swift_bridgeObjectRetain();
    return sub_23825B804((uint64_t)v3);
  }
  v13 = a1;
  if (v7 - 2 == a1)
  {
    v14 = v6 + 24 * *(unsigned __int16 *)(*v3 + 16);
    v15 = *(_QWORD *)(v14 - 16);
    v16 = *(_WORD *)(v14 - 4);
    v17 = *(_QWORD *)v14;
    v18 = *(_QWORD *)(v14 + 8);
    v19 = *(unsigned int *)(v14 + 16);
    v20 = *(unsigned __int8 *)(v14 + 20);
    v21 = *(unsigned __int8 *)(v14 + 21);
    *(_QWORD *)a3 = *(_QWORD *)(v14 - 24);
    *(_QWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v14 - 8);
    *(_WORD *)(a3 + 20) = v16;
    v22 = v19 | (v20 << 32) | (v21 << 40);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23826A0FC(v17, v18, v22);
    sub_23825B804(v4);
    return swift_bridgeObjectRelease();
  }
  v24 = v3[1];
  v23 = v3[2];
  v26 = v3[3];
  v25 = v3[4];
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v45[5] = v6;
    v45[6] = v24;
    v45[7] = v23;
    v45[8] = v26;
    v45[9] = v25;
    sub_238259B30((uint64_t)v45);
    swift_unknownObjectRelease();
    v6 = v45[0];
    v24 = v45[1];
    v23 = v45[2];
    v26 = v45[3];
    v25 = v45[4];
  }
  v27 = (_QWORD *)(v13 + 1);
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v39 = v26;
  v40 = v23;
  v38 = v25;
  v43 = a2;
  v28 = v6 + 24 + 24 * v13;
  v42 = *(_WORD *)(v28 + 20);
  v29 = *(_QWORD *)(v28 + 8);
  v41 = *(_QWORD *)v28;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a2 = v24;
  v30 = *(_DWORD *)(v28 + 16);
  v23 = sub_238320FC4(v13 + 1, (_WORD *)(v6 + 16), (unsigned __int8 *)(v6 + 24));
  v25 = v31;
  v13 = v32;
  v27 = v33;
  swift_unknownObjectRelease();
  *(_QWORD *)a3 = v41;
  *(_QWORD *)(a3 + 8) = v29;
  *(_DWORD *)(a3 + 16) = v30;
  *(_WORD *)(a3 + 20) = v42;
  v26 = a2 - v23;
  if (__OFSUB__(a2, v23))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v34 = __OFSUB__(v40, v25);
  v25 = v40 - v25;
  if (v34)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  a2 = v39 - v13;
  if (__OFSUB__(v39, v13))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = v38 - (_QWORD)v27;
  if (__OFSUB__(v38, v27))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v44 = 0;
  swift_unknownObjectRetain_n();
  MEMORY[0x23B831730](&v44, 8);
  v23 = v44;
  v27 = *(_QWORD **)(v43 + 96);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_21:
    v27 = sub_23826C274(0, v27[2] + 1, 1, v27);
  v36 = v27[2];
  v35 = v27[3];
  if (v36 >= v35 >> 1)
    v27 = sub_23826C274((_QWORD *)(v35 > 1), v36 + 1, 1, v27);
  v27[2] = v36 + 1;
  v37 = &v27[6 * v36];
  v37[4] = v6;
  v37[5] = v26;
  v37[6] = v25;
  v37[7] = a2;
  v37[8] = v13;
  v37[9] = v23;
  swift_unknownObjectRelease();
  sub_23825B804(v4);
  *(_QWORD *)(v43 + 96) = v27;
  return swift_unknownObjectRelease();
}

__n128 BigSubstring.UnicodeScalarView.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  result = (__n128)a2[2];
  v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.UnicodeScalarView.init(_:in:)@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _OWORD v31[3];
  _BYTE v32[40];

  v6 = *(__n128 *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 32);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v27 = v6;
  v31[0] = *(_OWORD *)a1;
  v30 = v31[0];
  v11 = *(_OWORD *)(a1 + 32);
  v31[1] = v6;
  v31[2] = v11;
  sub_238263E74((uint64_t)v31, (uint64_t)v32);
  sub_238263DDC((uint64_t)v32);
  v12 = sub_2382644F4(v7, v8, v9, v10);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = sub_2382644F4(a2[4], a2[5], a2[6], a2[7]);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  sub_23825B804(a1);
  result = v27;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 40) = v28;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v14;
  *(_QWORD *)(a3 + 64) = v16;
  *(_QWORD *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 80) = v19;
  *(_QWORD *)(a3 + 88) = v21;
  *(_QWORD *)(a3 + 96) = v23;
  *(_QWORD *)(a3 + 104) = v25;
  return result;
}

__n128 BigSubstring.unicodeScalars.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v12 = *(_OWORD *)v1;
  v10 = *(_OWORD *)(v1 + 32);
  v11 = *(_OWORD *)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 64);
  v9 = *(_OWORD *)(v1 + 48);
  v7 = *(__n128 *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v2 + 104);
  sub_238263DDC(v2);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  result = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(__n128 *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = v5;
  return result;
}

__n128 BigSubstring.unicodeScalars.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 result;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __int128 v30;

  v2 = v1;
  swift_unknownObjectRelease();
  v30 = *(_OWORD *)a1;
  v28 = *(__n128 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 104);
  sub_238263DDC(a1);
  v11 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v5, v6, v7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v26, v8, v9, v10);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  sub_23825B804(a1);
  result = v28;
  *(_OWORD *)v2 = v30;
  *(__n128 *)(v2 + 16) = v28;
  *(_QWORD *)(v2 + 32) = v27;
  *(_QWORD *)(v2 + 40) = v29;
  *(_QWORD *)(v2 + 48) = v11;
  *(_QWORD *)(v2 + 56) = v13;
  *(_QWORD *)(v2 + 64) = v15;
  *(_QWORD *)(v2 + 72) = v17;
  *(_QWORD *)(v2 + 80) = v18;
  *(_QWORD *)(v2 + 88) = v20;
  *(_QWORD *)(v2 + 96) = v22;
  *(_QWORD *)(v2 + 104) = v24;
  return result;
}

void (*BigSubstring.unicodeScalars.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (*result)(char **, char);

  v3 = malloc(0x190uLL);
  *a1 = v3;
  v4 = *(_OWORD *)(v1 + 16);
  *v3 = *(_OWORD *)v1;
  v3[1] = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v3[2] = *(_OWORD *)(v1 + 32);
  v3[3] = v5;
  v6 = *(_OWORD *)(v1 + 80);
  v3[4] = *(_OWORD *)(v1 + 64);
  v3[5] = v6;
  v3[6] = *(_OWORD *)(v1 + 96);
  *((_QWORD *)v3 + 48) = 0;
  *((_QWORD *)v3 + 49) = v1;
  MEMORY[0x23B831730](v3 + 24, 8);
  v7 = *((_QWORD *)v3 + 48);
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = 768;
  *(_OWORD *)(v1 + 72) = xmmword_23835C2C0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 1;
  result = sub_238321E60;
  *(_QWORD *)(v1 + 88) = 0;
  return result;
}

void sub_238321E60(char **a1, char a2)
{
  char *v2;
  _QWORD *v3;
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *a1;
  v3 = (_QWORD *)*((_QWORD *)*a1 + 49);
  if ((a2 & 1) != 0)
  {
    v4 = v2 + 112;
    v5 = *(_OWORD *)v2;
    v6 = v2 + 208;
    v7 = (uint64_t)(v2 + 344);
  }
  else
  {
    v6 = v2 + 160;
    v5 = *(_OWORD *)v2;
    v4 = v2 + 256;
    v7 = (uint64_t)(v2 + 304);
  }
  v8 = *((_OWORD *)v2 + 1);
  v9 = *((_OWORD *)v2 + 2);
  *v4 = v5;
  v4[1] = v8;
  v4[2] = v9;
  v37 = *((_QWORD *)v2 + 1);
  v38 = *(_QWORD *)v2;
  v35 = *((_QWORD *)v2 + 3);
  v36 = *((_QWORD *)v2 + 2);
  v33 = *((_QWORD *)v2 + 5);
  v34 = *((_QWORD *)v2 + 4);
  v6[1] = v8;
  v6[2] = v9;
  *v6 = v5;
  v10 = v7;
  sub_238263E74((uint64_t)v6, v7);
  v11 = *((_QWORD *)v2 + 6);
  v12 = *((_QWORD *)v2 + 7);
  v13 = *((_QWORD *)v2 + 8);
  v14 = *((_QWORD *)v2 + 9);
  v15 = *((_QWORD *)v2 + 11);
  v16 = *((_QWORD *)v2 + 12);
  v30 = *((_QWORD *)v2 + 13);
  v31 = *((_QWORD *)v2 + 10);
  sub_238263DDC(v10);
  sub_238263DDC(v10);
  v32 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v11, v12, v13, v14);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v31, v15, v16, v30);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_23825B804((uint64_t)v4);
  swift_unknownObjectRelease();
  *v3 = v38;
  v3[1] = v37;
  v3[2] = v36;
  v3[3] = v35;
  v3[4] = v34;
  v3[5] = v33;
  v3[6] = v32;
  v3[7] = v18;
  v3[8] = v20;
  v3[9] = v22;
  v3[10] = v23;
  v3[11] = v25;
  v3[12] = v27;
  v3[13] = v29;
  swift_unknownObjectRelease();
  free(v2);
}

uint64_t BigSubstring.UnicodeScalarView.base.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

__n128 BigSubstring.UnicodeScalarView.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[7];

  sub_2383250CC(a1, a2, (unint64_t *)v7);
  swift_bridgeObjectRelease();
  v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 BigSubstring.UnicodeScalarView.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[7];

  sub_238325380(a1, a2, (unint64_t *)v9);
  (*((void (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_2383220B0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[7];

  sub_2383250CC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (unint64_t *)v6);
  swift_bridgeObjectRelease();
  v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t BigSubstring.UnicodeScalarView.description.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[3];

  v1 = v0[1];
  v8[0] = *v0;
  v8[1] = v1;
  v2 = v0[3];
  v8[2] = v0[2];
  v3 = v0[4];
  v4 = v0[5];
  v7[0] = v2;
  v7[1] = v3;
  v5 = v0[6];
  v7[2] = v4;
  v7[3] = v5;
  sub_238263DDC((uint64_t)v0);
  return sub_2382673CC((uint64_t)v8, (uint64_t)v7);
}

uint64_t BigSubstring.UnicodeScalarView.debugDescription.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[4];
  _OWORD v9[3];

  v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  v2 = v0[3];
  v9[2] = v0[2];
  v3 = v0[4];
  v4 = v0[5];
  v8[0] = v2;
  v8[1] = v3;
  v5 = v0[6];
  v8[2] = v4;
  v8[3] = v5;
  sub_238263DDC((uint64_t)v0);
  sub_2382673CC((uint64_t)v9, (uint64_t)v8);
  v6 = sub_23835ADAC();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static BigSubstring.UnicodeScalarView.== infix(_:_:)(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];
  _OWORD v14[3];
  _OWORD v15[4];
  _OWORD v16[3];

  v2 = a1[1];
  v16[0] = *a1;
  v16[1] = v2;
  v3 = a1[3];
  v16[2] = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v15[0] = v3;
  v15[1] = v4;
  v6 = a1[6];
  v15[2] = v5;
  v15[3] = v6;
  v7 = *a2;
  v8 = a2[2];
  v9 = a2[3];
  v14[1] = a2[1];
  v14[2] = v8;
  v10 = a2[5];
  v11 = a2[4];
  v13[3] = a2[6];
  v14[0] = v7;
  v13[1] = v11;
  v13[2] = v10;
  v13[0] = v9;
  return sub_238301EC8((uint64_t *)v16, (unint64_t *)v15, (uint64_t *)v14, (unint64_t *)v13) & 1;
}

uint64_t sub_238322248(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[3];
  _OWORD v13[4];
  _OWORD v14[3];
  _OWORD v15[4];

  v2 = a1[1];
  v12[0] = *a1;
  v12[1] = v2;
  v3 = a1[3];
  v12[2] = a1[2];
  v13[0] = v3;
  v4 = a1[5];
  v13[1] = a1[4];
  v13[2] = v4;
  v5 = a1[6];
  v6 = *a2;
  v7 = a2[2];
  v8 = a2[3];
  v14[1] = a2[1];
  v14[2] = v7;
  v13[3] = v5;
  v14[0] = v6;
  v9 = a2[6];
  v10 = a2[4];
  v15[2] = a2[5];
  v15[3] = v9;
  v15[0] = v8;
  v15[1] = v10;
  return sub_238301EC8((uint64_t *)v12, (unint64_t *)v13, (uint64_t *)v14, (unint64_t *)v15) & 1;
}

uint64_t BigSubstring.UnicodeScalarView.hash(into:)()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_2383350E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), (uint64_t)v3);
  return sub_23835BA0C();
}

uint64_t BigSubstring.UnicodeScalarView.hashValue.getter()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];

  sub_23835B9E8();
  v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_2383350E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), (uint64_t)v3);
  sub_23835BA0C();
  return sub_23835BA48();
}

uint64_t sub_238322380()
{
  uint64_t v0;
  __int128 v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD v11[3];

  v1 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v1;
  v11[2] = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  sub_23835B9E8();
  sub_2383350E4(v2, v3, v4, v5, v6, v7, v9, v8, (uint64_t)v11);
  sub_23835BA0C();
  return sub_23835BA48();
}

uint64_t sub_238322430()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_2383350E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), (uint64_t)v3);
  return sub_23835BA0C();
}

uint64_t sub_23832248C()
{
  uint64_t v0;
  __int128 v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD v11[3];

  v1 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v1;
  v11[2] = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  sub_23835B9E8();
  sub_2383350E4(v2, v3, v4, v5, v6, v7, v9, v8, (uint64_t)v11);
  sub_23835BA0C();
  return sub_23835BA48();
}

uint64_t BigSubstring.UnicodeScalarView.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t BigSubstring.UnicodeScalarView.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

unint64_t BigSubstring.UnicodeScalarView.Iterator.next()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 48) >> 10 >= *(_QWORD *)(v0 + 80) >> 10)
  {
    v3 = 0;
    LOBYTE(v2) = 1;
  }
  else
  {
    BigString.UnicodeScalarView.Iterator.next()();
    v2 = HIDWORD(v1) & 1;
    v3 = v1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

void sub_2383225A0(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v1 + 48) >> 10 >= *(_QWORD *)(v1 + 80) >> 10)
  {
    LODWORD(v3) = 0;
    LOBYTE(v4) = 1;
  }
  else
  {
    BigString.UnicodeScalarView.Iterator.next()();
    v4 = HIDWORD(v3) & 1;
  }
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
}

__n128 BigSubstring.UnicodeScalarView.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 result;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __int128 v30;

  v2 = v1;
  v30 = *(_OWORD *)v1;
  v28 = *(__n128 *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 48);
  v29 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v26 = *(_QWORD *)(v1 + 80);
  v27 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 104);
  sub_238263DDC(v1);
  sub_238263DDC(v1);
  v11 = sub_2382644F4(v4, v5, v6, v7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_238263DDC(v1);
  v18 = sub_238264714(v26, v8, v9, v10, 1);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  sub_23825B804(v2);
  sub_23825B804(v2);
  result = v28;
  *(_OWORD *)a1 = v30;
  *(__n128 *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v22;
  *(_QWORD *)(a1 + 104) = v24;
  return result;
}

uint64_t sub_238322710@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *v1;
  v30 = v1[2];
  v31 = v1[1];
  v28 = v1[4];
  v29 = v1[3];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = v1[11];
  v26 = v1[10];
  v27 = v1[5];
  v10 = v1[12];
  v9 = v1[13];
  swift_unknownObjectRetain_n();
  v11 = sub_2382644F4(v4, v5, v6, v7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_unknownObjectRetain();
  v18 = sub_238264714(v26, v8, v10, v9, 1);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  result = swift_unknownObjectRelease_n();
  *a1 = v3;
  a1[1] = v31;
  a1[2] = v30;
  a1[3] = v29;
  a1[4] = v28;
  a1[5] = v27;
  a1[6] = v11;
  a1[7] = v13;
  a1[8] = v15;
  a1[9] = v17;
  a1[10] = v18;
  a1[11] = v20;
  a1[12] = v22;
  a1[13] = v24;
  return result;
}

unint64_t sub_238322838()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  _OWORD v6[7];

  v1 = v0[5];
  v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  v3 = v0[3];
  v6[2] = v0[2];
  v6[3] = v3;
  v4 = sub_23833B7BC((uint64_t)v6);
  sub_23825B804((uint64_t)v6);
  return v4;
}

uint64_t sub_238322890(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23833C108(a1, a2, a3);
}

unint64_t BigSubstring.UnicodeScalarView.count.getter()
{
  _QWORD *v0;
  unint64_t result;
  unint64_t v2;

  result = v0[6];
  v2 = v0[10];
  if (v2 >> 10 >= result >> 10)
    return sub_238278254(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.distance(from:to:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = result >> 10;
  v10 = *(_QWORD *)(v8 + 48) >> 10;
  v11 = *(_QWORD *)(v8 + 80) >> 10;
  if (v11 >= a5 >> 10 && a5 >> 10 >= v10 && v9 >= v10 && v11 >= v9)
    return sub_238278254(result, a2, a3, a4, a5, a6, a7, a8);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(after:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result >> 10 < *(_QWORD *)(v4 + 80) >> 10)
    return sub_238278EB4(result, a2, a3, a4, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(before:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (*(_QWORD *)(v4 + 48) >> 10 < result >> 10)
    return sub_238278EB4(result, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(_:offsetBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  v6 = *(_QWORD *)(v5 + 48) >> 10;
  v7 = *(_QWORD *)(v5 + 80) >> 10;
  if (result >> 10 >= v6 && v7 >= result >> 10)
  {
    result = sub_238278EB4(result, a2, a3, a4, a5);
    v9 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v9 >= v6 && v7 >= v9)
      return result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v10 = *(_QWORD *)(v9 + 48) >> 10;
  v11 = *(_QWORD *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  result = sub_238336000(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10))
    goto LABEL_13;
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result >> 10 >= *(_QWORD *)(v4 + 48) >> 10 && result >> 10 < *(_QWORD *)(v4 + 80) >> 10)
    return sub_2383360EC(result, a2, a3, a4);
  __break(1u);
  return result;
}

unint64_t *BigSubstring.UnicodeScalarView.subscript.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v4 = *result;
  v5 = result[4];
  if (*result >> 10 >= *(_QWORD *)(v2 + 48) >> 10 && *(_QWORD *)(v2 + 80) >> 10 >= v5 >> 10)
  {
    v26 = *(_OWORD *)v2;
    v25 = *(_OWORD *)(v2 + 16);
    v8 = result[6];
    v7 = result[7];
    v9 = result[5];
    v11 = result[2];
    v10 = result[3];
    v12 = result[1];
    v23 = *(_QWORD *)(v2 + 32);
    v24 = *(_QWORD *)(v2 + 40);
    sub_238263DDC(v2);
    v13 = sub_2382644F4(v4, v12, v11, v10);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    result = (unint64_t *)sub_2382644F4(v5, v9, v8, v7);
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v24;
    *(_QWORD *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = v17;
    *(_QWORD *)(a2 + 72) = v19;
    *(_QWORD *)(a2 + 80) = result;
    *(_QWORD *)(a2 + 88) = v20;
    *(_QWORD *)(a2 + 96) = v21;
    *(_QWORD *)(a2 + 104) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_238322CC4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = *(_QWORD *)a1;
  if (*(_QWORD *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_238278EB4(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_238322D38(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (*(_QWORD *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_238278EB4(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *(_QWORD *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t sub_238322DB4(_QWORD *a1, unint64_t *a2)
{
  uint64_t v2;
  _OWORD *v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = malloc(0x34uLL);
  *a1 = v5;
  result = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_OWORD *)(v2 + 16);
  *v5 = *(_OWORD *)v2;
  v5[1] = v10;
  v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(_QWORD *)(v2 + 48) >> 10 || result >> 10 >= *(_QWORD *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    *((_DWORD *)v5 + 12) = sub_2383360EC(result, v7, v8, v9);
    return (unint64_t)sub_2382A5D44;
  }
  return result;
}

unint64_t *sub_238322E40@<X0>(unint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *result;
  v5 = result[4];
  if (*result >> 10 >= (unint64_t)v2[6] >> 10 && (unint64_t)v2[10] >> 10 >= v5 >> 10)
  {
    v26 = v2[4];
    v27 = v2[5];
    v7 = v2[2];
    v8 = *v2;
    v9 = v2[1];
    v28 = result[7];
    v24 = result[6];
    v25 = v2[3];
    v23 = result[5];
    v11 = result[2];
    v10 = result[3];
    v12 = result[1];
    swift_unknownObjectRetain();
    v13 = sub_2382644F4(v4, v12, v11, v10);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    result = (unint64_t *)sub_2382644F4(v5, v23, v24, v28);
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v25;
    a2[4] = v26;
    a2[5] = v27;
    a2[6] = v13;
    a2[7] = v15;
    a2[8] = v17;
    a2[9] = v19;
    a2[10] = result;
    a2[11] = v20;
    a2[12] = v21;
    a2[13] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_238322F58()
{
  _QWORD *v0;
  unint64_t result;
  unint64_t v2;

  result = v0[6];
  v2 = v0[10];
  if (v2 >> 10 >= result >> 10)
    return sub_238278254(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  __break(1u);
  return result;
}

unint64_t sub_238322FB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = *(_QWORD *)a1;
  v7 = *(_QWORD *)(v3 + 48) >> 10;
  v8 = *(_QWORD *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    result = sub_238278EB4(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
    v13 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v13 >= v7 && v8 >= v13)
    {
      *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_238323058@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = *(_QWORD *)a1;
  v8 = *(_QWORD *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (v9 = *(_QWORD *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }
  else
  {
    result = sub_238336000(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_238323110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(v2 + 80) >> 10;
  if (v6 >= *(_QWORD *)a2 >> 10)
  {
    v7 = *(_QWORD *)(v2 + 48) >> 10;
    if (v5 >> 10 >= v7 && result >> 10 >= v7 && v6 >= result >> 10)
      return sub_238278254(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  __break(1u);
  return result;
}

unint64_t sub_2383231A0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = *(_QWORD *)a1;
  if (result >> 10 >= *(_QWORD *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_238278EB4(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1uLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_238323214(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result >> 10 >= *(_QWORD *)(v1 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_238278EB4(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1uLL);
    *(_QWORD *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result >> 10 >= *(_QWORD *)(v4 + 48) >> 10 && *(_QWORD *)(v4 + 80) >> 10 >= result >> 10)
    return sub_2382644F4(result, a2, a3, a4);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UnicodeScalarView.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = result >> 10;
  if (result >> 10 >= *(_QWORD *)(v4 + 48) >> 10 && *(_QWORD *)(v4 + 80) >> 10 >= v5)
  {
    result = sub_2382644F4(result, a2, a3, a4);
    if (v5 != result >> 10)
      return sub_238278EB4(result, v7, v8, v9, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_238323350(_QWORD *result, void (*a2)(_OWORD *))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[3];

  v3 = *(_QWORD *)(v2 + 48);
  if (*result >> 10 < v3 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v2 + 80);
  if (v4 >> 10 < result[4] >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v6 = v3 >> 11;
  v7 = v4 >> 11;
  v8 = *(_OWORD *)(v2 + 16);
  v13[0] = *(_OWORD *)v2;
  v13[1] = v8;
  v9 = *(_OWORD *)(v2 + 32);
  v13[2] = v9;
  if (*(_QWORD *)&v13[0])
    v10 = v9;
  else
    v10 = 0;
  v12 = 0;
  MEMORY[0x23B831730](&v12, 8);
  v11 = v12;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = v11;
  a2(v13);
  sub_23832343C((uint64_t *)v2, v13, v10, v6, v7);
  return (_QWORD *)swift_unknownObjectRelease();
}

uint64_t sub_23832343C(uint64_t *a1, _OWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];
  _BYTE v43[40];

  v9 = a2[1];
  v10 = a2[2];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v9;
  *((_OWORD *)a1 + 2) = v10;
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  v12 = a1[4];
  if (*a1)
    v13 = a1[4];
  else
    v13 = 0;
  v14 = v13 - a3;
  if (__OFSUB__(v13, a3))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = a1[3];
  v16 = a1[5];
  v37 = *a1;
  v38 = *(_OWORD *)(a1 + 1);
  v39 = v15;
  v40 = v12;
  v41 = v16;
  swift_unknownObjectRetain();
  v17 = sub_23825EDD4(0x300uLL, 0, 0, 1, a4);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  result = swift_unknownObjectRelease();
  v24 = *((_OWORD *)a1 + 1);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v24;
  v36[2] = *((_OWORD *)a1 + 2);
  v25 = __OFADD__(a5, v14);
  v26 = a5 + v14;
  if (v25)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v27 = v17 & 0xFFFFFFFFFFFFF8FFLL;
  v28 = *((_OWORD *)a1 + 1);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v28;
  v42[2] = *((_OWORD *)a1 + 2);
  sub_238263E74((uint64_t)v42, (uint64_t)v43);
  sub_238263DDC((uint64_t)v43);
  v29 = sub_23825EDD4(0x300uLL, 0, 0, 1, v26);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  result = sub_23825B804((uint64_t)v36);
  if ((v29 & 0xFFFFFFFFFFFFF8FFLL) >> 10 >= v27 >> 10)
  {
    a1[6] = v27 | 0x100;
    a1[7] = v19;
    a1[8] = v21;
    a1[9] = v23;
    a1[10] = v29 & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    a1[11] = v31;
    a1[12] = v33;
    a1[13] = v35;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

double BigSubstring.UnicodeScalarView.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  v4 = 0;
  MEMORY[0x23B831730](&v4, 8);
  v2 = v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 768;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 72) = xmmword_23835C2C0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 1;
  return result;
}

uint64_t BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_23832509C(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t sub_238323670(uint64_t a1, unint64_t *a2, uint64_t a3, ValueMetadata *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v9, v10);
  return BigString.UnicodeScalarView.replaceSubrange<A>(_:with:)(a2, (uint64_t)v7, a4);
}

__n128 BigSubstring.UnicodeScalarView.init(repeating:count:)@<Q0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[7];

  sub_238325694(a1, a2, v7);
  v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t BigSubstring.UnicodeScalarView.append(_:)(int a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[3];

  v5 = v1;
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 48);
  if (v6 >> 10 < v7 >> 10)
  {
    __break(1u);
  }
  else
  {
    LODWORD(v1) = a1;
    v2 = *(_QWORD *)(v5 + 88);
    v3 = *(_QWORD *)(v5 + 96);
    v4 = *(_QWORD *)(v5 + 104);
    v8 = *(_OWORD *)(v5 + 16);
    v21[0] = *(_OWORD *)v5;
    v21[1] = v8;
    v18 = *(_OWORD *)(v5 + 32);
    v19 = *(_QWORD *)&v21[0];
    v21[2] = v18;
    v20 = 0;
    MEMORY[0x23B831730](&v20, 8);
    v9 = v20;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = v9;
    if (v1 <= 0x7F)
    {
      v10 = v1 + 1;
      goto LABEL_4;
    }
  }
  v15 = (v1 & 0x3F) << 8;
  if (v1 >= 0x800)
  {
    v16 = (v15 | (v1 >> 6) & 0x3F) << 8;
    v17 = (((v16 | (v1 >> 12) & 0x3F) << 8) | (v1 >> 18)) - 2122219023;
    v10 = (v16 | (v1 >> 12)) + 8487393;
    if (WORD1(v1))
      v10 = v17;
  }
  else
  {
    v10 = (v15 | (v1 >> 6)) + 33217;
  }
LABEL_4:
  if (v19)
    v11 = v18;
  else
    v11 = 0;
  v20 = (v10 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v10) >> 3))));
  v12 = MEMORY[0x23B83074C](&v20);
  BigString.insert(contentsOf:at:)(v12, v13, v6, v2, v3, v4);
  sub_23832343C((uint64_t *)v5, v21, v11, v7 >> 11, v6 >> 11);
  return swift_unknownObjectRelease();
}

uint64_t BigSubstring.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  sub_238325930();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t BigSubstring.UnicodeScalarView.insert(_:at:)(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];

  v6 = *(_QWORD *)(v5 + 48);
  if (a2 >> 10 < v6 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(v5 + 80);
  if (a2 >> 10 > v7 >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v12 = result;
  v13 = v6 >> 11;
  v14 = v7 >> 11;
  v15 = *(_OWORD *)(v5 + 16);
  v20[0] = *(_OWORD *)v5;
  v20[1] = v15;
  v16 = *(_OWORD *)(v5 + 32);
  v20[2] = v16;
  if (*(_QWORD *)&v20[0])
    v17 = v16;
  else
    v17 = 0;
  v19 = 0;
  MEMORY[0x23B831730](&v19, 8);
  v18 = v19;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v18;
  BigString.UnicodeScalarView.insert(_:at:)(v12, a2, a3, a4, a5);
  sub_23832343C((uint64_t *)v5, v20, v17, v13, v14);
  return swift_unknownObjectRelease();
}

uint64_t BigSubstring.UnicodeScalarView.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_238325984(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
}

unint64_t BigSubstring.UnicodeScalarView.remove(at:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = v4[2];
  v26 = v4[1];
  v27 = v5;
  v25 = *v4;
  v6 = *((_QWORD *)v4 + 10);
  v7 = result >> 10;
  if (result >> 10 >= v6 >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = (uint64_t *)v4;
  v11 = result;
  v20 = v4[1];
  v21 = *v4;
  v19 = v4[2];
  result = sub_238278EB4(result, a2, a3, a4, 1uLL);
  v12 = (result >> 10) & 0x3FFFFFFFFFFFFELL;
  if (v12 < v7)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v6 >> 10 < v12)
    goto LABEL_11;
  v13 = *((_QWORD *)v4 + 6);
  if (v7 < v13 >> 10)
    goto LABEL_11;
  v14 = v13 >> 11;
  v15 = v6 >> 11;
  v24[0] = v21;
  v24[1] = v20;
  if ((_QWORD)v25)
    v16 = v27;
  else
    v16 = 0;
  v24[2] = v19;
  v23 = 0;
  MEMORY[0x23B831730](&v23, 8);
  v17 = v23;
  *v4 = 0u;
  v4[1] = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = v17;
  v18 = _s19CollectionsInternal9BigStringV17UnicodeScalarViewV6remove2ats0E0O0F0VAC5IndexV_tF_0(v11, a2, a3, a4);
  sub_23832343C(v8, v24, v16, v14, v15);
  swift_unknownObjectRelease();
  return v18;
}

unint64_t *BigSubstring.UnicodeScalarView.removeSubrange(_:)(unint64_t *result)
{
  __int128 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[4];

  v2 = *result;
  v3 = *((_QWORD *)v1 + 6);
  v4 = *result >> 10;
  if (v4 < v3 >> 10)
  {
    __break(1u);
    goto LABEL_14;
  }
  v5 = result[4];
  v6 = *((_QWORD *)v1 + 10);
  v7 = v5 >> 10;
  if (v5 >> 10 > v6 >> 10)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = *((_QWORD *)v1 + 4);
  v9 = *((_QWORD *)v1 + 5);
  v10 = v1[1];
  if (*(_QWORD *)v1)
    v11 = *((_QWORD *)v1 + 4);
  else
    v11 = 0;
  v16 = *v1;
  v17 = v10;
  *(_QWORD *)&v18 = v8;
  *((_QWORD *)&v18 + 1) = v9;
  v15 = 0;
  result = (unint64_t *)MEMORY[0x23B831730](&v15, 8);
  v13 = v15;
  *v1 = 0u;
  v1[1] = 0u;
  *((_QWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 5) = v13;
  if (2 * (v11 & 0x1FFFFFFFFFFFFFuLL) < v7)
    goto LABEL_15;
  if (v4 == v7)
  {
LABEL_12:
    sub_23832343C((uint64_t *)v1, &v16, v11, v3 >> 11, v6 >> 11);
    return (unint64_t *)swift_unknownObjectRelease();
  }
  result = (unint64_t *)(v2 >> 11);
  v14 = v5 >> 11;
  if (v5 >> 11 < v2 >> 11)
    goto LABEL_16;
  *((_QWORD *)&v18 + 1) = v9 + 1;
  if (v11 >= v14)
  {
    if (result != (unint64_t *)v14)
    {
      sub_23825A61C((uint64_t)result, v14, v12, (uint64_t)&v15);
      swift_unknownObjectRelease();
      sub_238265C60((uint64_t *)v19);
      v16 = v19[0];
      v17 = v19[1];
      v18 = v19[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_238323D4C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  v6 = a1[3];
  v8[2] = a1[2];
  v8[3] = v6;
  sub_23832509C(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

__n128 sub_238323DA8@<Q0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[7];

  sub_238325694(*a1, a2, v7);
  v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_238323DF8@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[7];

  sub_238325380(a1, a2, (unint64_t *)v9);
  (*((void (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t sub_238323E68(int *a1)
{
  return BigSubstring.UnicodeScalarView.append(_:)(*a1);
}

uint64_t sub_238323E70(uint64_t a1, uint64_t a2)
{
  sub_238325930();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_238323EAC(unsigned int *a1, uint64_t a2)
{
  return BigSubstring.UnicodeScalarView.insert(_:at:)(*a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_238323EC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_238325984(a1, *a2, a2[1], a2[2], a2[3]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

unint64_t sub_238323F14@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result;

  result = BigSubstring.UnicodeScalarView.remove(at:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

void sub_238323F48(uint64_t a1@<X8>)
{
  int v2;
  char v3;

  sub_23831F340();
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = v3 & 1;
}

void sub_238323F78(_DWORD *a1@<X8>)
{
  int v2;

  sub_23831F9FC();
  *a1 = v2;
}

uint64_t sub_238323FA4(uint64_t (*a1)(int *))
{
  return sub_23832E20C(a1);
}

_WORD *sub_238323FB8(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *i;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *result = a3;
  if (__OFSUB__(a6, a5))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_2542CACC0);
  swift_arrayInitWithCopy();
  v8 = 0;
  v9 = 0;
  v10 = 0;
  result = 0;
  if (a3)
  {
    v11 = 24 * a3;
    for (i = (unsigned __int8 *)(a2 + 19); ; i += 24)
    {
      v13 = *i;
      v14 = __OFADD__(result, v13);
      result = (_WORD *)((char *)result + v13);
      if (v14)
        break;
      v15 = *(i - 1);
      v14 = __OFADD__(v10, v15);
      v10 += v15;
      if (v14)
        goto LABEL_13;
      v16 = *(i - 2);
      v14 = __OFADD__(v9, v16);
      v9 += v16;
      if (v14)
        goto LABEL_14;
      v17 = *(i - 3);
      v14 = __OFADD__(v8, v17);
      v8 += v17;
      if (v14)
        goto LABEL_15;
      v11 -= 24;
      if (!v11)
        return result;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

_WORD *sub_2383240A8(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *result = a3;
  if (__OFSUB__(a6, a5))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542CACA0);
  swift_arrayInitWithCopy();
  v8 = 0;
  v9 = 0;
  v10 = 0;
  result = 0;
  if (a3)
  {
    v11 = (_QWORD *)(a2 + 32);
    v12 = 40 * a3;
    while (1)
    {
      v13 = *(v11 - 3);
      v14 = __OFADD__(result, v13);
      result = (_WORD *)((char *)result + v13);
      if (v14)
        break;
      v15 = *(v11 - 2);
      v14 = __OFADD__(v10, v15);
      v10 += v15;
      if (v14)
        goto LABEL_13;
      v16 = *(v11 - 1);
      v14 = __OFADD__(v9, v16);
      v9 += v16;
      if (v14)
        goto LABEL_14;
      v14 = __OFADD__(v8, *v11);
      v8 += *v11;
      if (v14)
        goto LABEL_15;
      v11 += 5;
      v12 -= 40;
      if (!v12)
        return result;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_238324198(unsigned __int16 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;

  v4 = *a3;
  result = *a1;
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 *)(a2 + 16);
    v7 = __OFSUB__(v4, v6);
    v8 = v4 - v6;
    if (!v7)
    {
      if (__OFADD__(v8, 1))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (v8 + 1 < 1)
        return 0;
      if ((_DWORD)result == 1)
      {
        v4 = v8;
        goto LABEL_13;
      }
      v9 = (unsigned __int8 *)(a2 + 40);
      v10 = 1;
      while (1)
      {
        v11 = *v9;
        v9 += 24;
        v4 = v8 - v11;
        if (__OFSUB__(v8, v11))
          break;
        if (__OFADD__(v4, 1))
          goto LABEL_17;
        if (v4 + 1 < 1)
          return v10;
        ++v10;
        v8 = v4;
        if (result == v10)
          goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if (v4)
LABEL_20:
    __break(1u);
  return result;
}

void sub_238324238(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  uint64_t v92;
  _QWORD v93[5];
  _QWORD v94[5];
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99[2];
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v3 = *v1;
  v2 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v92 = a1;
  if (a1 < 1)
  {
LABEL_62:
    swift_unknownObjectRelease();
    return;
  }
  if (v6 <= a1)
  {
    swift_unknownObjectRetain();
LABEL_60:
    *(_QWORD *)&v95 = v3;
    *((_QWORD *)&v95 + 1) = v2;
    v96 = v5;
    v97 = v4;
    v98 = v6;
    swift_unknownObjectRetain();
    sub_238269DD0(&v95, v48, v49, v50);
LABEL_61:
    sub_23825B804(v82);
    goto LABEL_62;
  }
  if (!*(_BYTE *)(v3 + 18))
  {
    swift_unknownObjectRetain();
LABEL_64:
    v51 = v3;
    v52 = sub_238324198((unsigned __int16 *)(v3 + 16), v3 + 24, &v92);
    v54 = v53;
    *(_QWORD *)&v95 = v51;
    *((_QWORD *)&v95 + 1) = v2;
    v96 = v5;
    v97 = v4;
    v98 = v6;
    swift_unknownObjectRetain();
    sub_238321220(v52, (uint64_t)&v87);
    v56 = v87;
    v55 = v88;
    v57 = v89 | ((unint64_t)v90 << 32) | ((unint64_t)v91 << 40);
    v58 = sub_23826313C(v54, v87, v88);
    v59 = sub_238262E88(v58, v56, v55, v57);
    swift_bridgeObjectRetain();
    v60 = sub_23825E150(v58, v56, v55);
    v62 = v61;
    v64 = v63;
    v66 = v65;
    swift_bridgeObjectRelease();
    MEMORY[0x23B8306D4](v60, v62, v64, v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v67 = sub_23835AF80();
    v69 = v68;
    v71 = v70;
    v73 = v72;
    swift_bridgeObjectRelease();
    v74 = MEMORY[0x23B8306D4](v67, v69, v71, v73);
    v76 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_238263184(v74, v76, v59 & 0xFFFFFFFFFFFFLL);
    sub_23825B804(v82);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    v7 = v92;
    v8 = *(unsigned __int16 *)(v3 + 16);
    if (!*(_WORD *)(v3 + 16))
      break;
    v9 = *(_QWORD *)(v3 + 56);
    v10 = v92 - v9;
    if (__OFSUB__(v92, v9))
      goto LABEL_71;
    if (v10 <= 0)
    {
      v21 = *(_QWORD *)(v3 + 24);
      v2 = *(_QWORD *)(v3 + 32);
      v5 = *(_QWORD *)(v3 + 40);
      v4 = *(_QWORD *)(v3 + 48);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v3 = v21;
      v6 = v9;
LABEL_53:
      if (v7 <= 0)
        goto LABEL_61;
      if (v7 >= v6)
        goto LABEL_60;
      goto LABEL_55;
    }
    if ((_DWORD)v8 == 1)
      goto LABEL_86;
    v11 = *(_QWORD *)(v3 + 96);
    v7 = v10 - v11;
    if (__OFSUB__(v10, v11))
      goto LABEL_77;
    if (v7 >= 1)
    {
      if ((_DWORD)v8 == 2)
        goto LABEL_86;
      v12 = (_QWORD *)(v3 + 136);
      v13 = 2;
      while (v8 != v13)
      {
        v14 = v7 - *v12;
        if (__OFSUB__(v7, *v12))
          goto LABEL_66;
        if (v14 < 1)
          goto LABEL_20;
        ++v13;
        v12 += 5;
        v7 = v14;
        if (v8 == v13)
          goto LABEL_86;
      }
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v92 = v10;
    v42 = *(_OWORD *)(v3 + 24);
    v43 = *(_OWORD *)(v3 + 40);
    v100 = *(_QWORD *)(v3 + 56);
    v99[0] = v42;
    v99[1] = v43;
    v44 = (_QWORD *)v3;
    v3 = *(_QWORD *)(v3 + 64);
    v2 = v44[9];
    v5 = v44[10];
    v4 = v44[11];
    sub_238263DDC((uint64_t)v99);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    sub_238269DD0(v99, v45, v46, v47);
    v6 = v11;
    if (v10 >= v11)
      goto LABEL_60;
LABEL_55:
    if (!*(_BYTE *)(v3 + 18))
      goto LABEL_64;
  }
  if (v92)
    goto LABEL_86;
  v13 = -1;
LABEL_20:
  v92 = v7;
  v83 = v7;
  if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
  {
    v84 = v4;
  }
  else
  {
    v110 = v3;
    v111 = v2;
    v112 = v5;
    v113 = v4;
    v114 = v6;
    sub_238259B30((uint64_t)v93);
    swift_unknownObjectRelease();
    v3 = v93[0];
    v2 = v93[1];
    v5 = v93[2];
    v84 = v93[3];
    v6 = v93[4];
  }
  v15 = *(unsigned __int16 *)(v3 + 16);
  if (v13 >= v15 - 1)
  {
    v20 = v84;
LABEL_44:
    if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
    {
      v86 = v6;
      v31 = v5;
    }
    else
    {
      v105 = v3;
      v106 = v2;
      v107 = v5;
      v108 = v20;
      v109 = v6;
      sub_238259B30((uint64_t)v94);
      swift_unknownObjectRelease();
      v3 = v94[0];
      v2 = v94[1];
      v31 = v94[2];
      v20 = v94[3];
      v86 = v94[4];
    }
    v32 = (_QWORD *)(v3 + 40 * v13);
    v33 = v13;
    v35 = v32[3];
    v34 = v32[4];
    v32 += 3;
    v36 = v32[2];
    v4 = v32[3];
    v37 = v32[4];
    memmove(v32, v32 + 5, 40 * (*(unsigned __int16 *)(v3 + 16) + ~v33));
    v38 = *(unsigned __int16 *)(v3 + 16);
    swift_unknownObjectRetain();
    if (!v38)
      goto LABEL_72;
    *(_WORD *)(v3 + 16) = v38 - 1;
    swift_unknownObjectRelease();
    if (__OFSUB__(v2, v34))
      goto LABEL_73;
    if (__OFSUB__(v31, v36))
      goto LABEL_74;
    if (__OFSUB__(v20, v4))
      goto LABEL_75;
    if (__OFSUB__(v86, v37))
      goto LABEL_76;
    *(_QWORD *)&v101 = v3;
    *((_QWORD *)&v101 + 1) = v2 - v34;
    v102 = v31 - v36;
    v103 = v20 - v4;
    v104 = v86 - v37;
    sub_238269DD0(&v101, v39, v40, v41);
    v3 = v35;
    v6 = v37;
    v5 = v36;
    v2 = v34;
    v7 = v83;
    goto LABEL_53;
  }
  if (v13 + 1 > v15)
    goto LABEL_78;
  v80 = v13;
  v81 = v13 + 1 - v15;
  if (v13 + 1 == v15)
  {
    swift_unknownObjectRetain();
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
LABEL_37:
    v30 = v81 + v15;
    if (v81 + v15 < 0)
      goto LABEL_79;
    if (v30 >> 16)
      goto LABEL_80;
    *(_WORD *)(v3 + 16) = v30;
    swift_unknownObjectRelease();
    v29 = __OFSUB__(v2, v19);
    v2 -= v19;
    if (v29)
      goto LABEL_81;
    v29 = __OFSUB__(v5, v18);
    v5 -= v18;
    if (v29)
      goto LABEL_82;
    v20 = v84 - v17;
    if (__OFSUB__(v84, v17))
      goto LABEL_83;
    v29 = __OFSUB__(v6, v16);
    v6 -= v16;
    if (v29)
      goto LABEL_84;
    v13 = v80;
    goto LABEL_44;
  }
  if (v13 + 1 >= v15)
    goto LABEL_85;
  v85 = v6;
  v77 = v2;
  v78 = v5;
  swift_unknownObjectRetain();
  v16 = 0;
  v22 = v13;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v79 = v3;
  v23 = (uint64_t *)(v3 + 40 * v22 + 96);
  v24 = ~v22 + v15;
  while (1)
  {
    v25 = *(v23 - 3);
    v27 = *(v23 - 2);
    v26 = *(v23 - 1);
    v28 = *v23;
    swift_unknownObjectRelease();
    v29 = __OFADD__(v19, v25);
    v19 += v25;
    if (v29)
      break;
    v29 = __OFADD__(v18, v27);
    v18 += v27;
    if (v29)
      goto LABEL_68;
    v29 = __OFADD__(v17, v26);
    v17 += v26;
    if (v29)
      goto LABEL_69;
    v29 = __OFADD__(v16, v28);
    v16 += v28;
    if (v29)
      goto LABEL_70;
    v23 += 5;
    if (!--v24)
    {
      v5 = v78;
      v3 = v79;
      v15 = *(unsigned __int16 *)(v79 + 16);
      v2 = v77;
      v6 = v85;
      goto LABEL_37;
    }
  }
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
}

uint64_t sub_238324850(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;

  v4 = *a3;
  v5 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result)
    goto LABEL_9;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = __OFSUB__(v4, v6);
  v8 = v4 - v6;
  if (v7)
  {
    __break(1u);
  }
  else if (v8 < 1)
  {
    return 0;
  }
  else if ((_DWORD)v5 == 1)
  {
    do
    {
LABEL_8:
      __break(1u);
LABEL_9:
      ;
    }
    while (v4);
    return -1;
  }
  else
  {
    v9 = (unsigned __int8 *)(a2 + 40);
    result = 1;
    v4 = v8;
    while (1)
    {
      v10 = *v9;
      v9 += 24;
      v11 = v4 - v10;
      if (v11 < 1)
        break;
      ++result;
      v4 = v11;
      if (v5 == result)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_2383248C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  _BYTE v60[32];
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v7 = v2;
  v9 = *(_QWORD **)v2;
  v10 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v60 = *(_OWORD *)v2;
  *(_OWORD *)&v60[16] = v10;
  v61 = *(_QWORD *)(v2 + 32);
  v59 = a1;
  if (a1 < 1)
  {
    v52 = *(_QWORD *)&v60[8];
    v12 = *(_QWORD *)v60;
    v4 = *(_QWORD *)&v60[24];
    v3 = *(_QWORD *)&v60[16];
    v5 = v61;
    swift_unknownObjectRetain();
    v62 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x23B831730](&v62, 8);
    v6 = v62;
    v9 = *(_QWORD **)(a2 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_35:
      v9 = sub_23826C274(0, v9[2] + 1, 1, v9);
    v22 = v9[2];
    v21 = v9[3];
    if (v22 >= v21 >> 1)
      v9 = sub_23826C274((_QWORD *)(v21 > 1), v22 + 1, 1, v9);
    v9[2] = v22 + 1;
    v23 = &v9[6 * v22];
    v23[4] = v12;
    v23[5] = v52;
    v23[6] = v3;
    v23[7] = v4;
    v23[8] = v5;
    v23[9] = v6;
    sub_23825B804(v7);
    result = swift_unknownObjectRelease();
    *(_QWORD *)(a2 + 96) = v9;
  }
  else
  {
    v11 = a1;
    v12 = *(_QWORD *)(v2 + 32);
    if (v12 <= a1)
    {
      return swift_unknownObjectRelease();
    }
    else if (*((_BYTE *)v9 + 18))
    {
      result = swift_unknownObjectRetain();
      while (1)
      {
        v14 = *((unsigned __int16 *)v9 + 8);
        if (!*((_WORD *)v9 + 8))
          break;
        v15 = v9[7];
        v16 = __OFSUB__(v11, v15);
        v17 = v11 - v15;
        if (v16)
          goto LABEL_33;
        if (v17 <= 0)
        {
          result = 0;
        }
        else
        {
          if ((_DWORD)v14 == 1)
            break;
          v18 = v9[12];
          v11 = v17 - v18;
          if (__OFSUB__(v17, v18))
            goto LABEL_34;
          if (v11 >= 1)
          {
            if ((_DWORD)v14 != 2)
            {
              v19 = v9 + 17;
              result = 2;
              while (v14 != result)
              {
                v20 = v11 - *v19;
                if (__OFSUB__(v11, *v19))
                  goto LABEL_32;
                if (v20 < 1)
                  goto LABEL_20;
                ++result;
                v19 += 5;
                v11 = v20;
                if (v14 == result)
                  goto LABEL_36;
              }
              __break(1u);
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
            break;
          }
          result = 1;
          v11 = v17;
        }
LABEL_20:
        result = sub_238321484(result, a2);
        v12 = v61;
        if (v11 >= v61)
        {
          sub_23825B804(v7);
          return swift_unknownObjectRelease();
        }
        v9 = *(_QWORD **)v60;
        if (!*(_BYTE *)(*(_QWORD *)v60 + 18))
        {
          v59 = v11;
          goto LABEL_28;
        }
      }
LABEL_36:
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain();
LABEL_28:
      v24 = sub_238324850((uint64_t)(v9 + 2), (uint64_t)(v9 + 3), &v59);
      v26 = v25;
      v62 = v9;
      v63 = *(_OWORD *)&v60[8];
      v64 = *(_QWORD *)&v60[24];
      v65 = v12;
      swift_unknownObjectRetain();
      sub_2383217F4(v24, a2, (uint64_t)&v54);
      v28 = v54;
      v27 = v55;
      v29 = v56 | ((unint64_t)v57 << 32) | ((unint64_t)v58 << 40);
      v30 = sub_23826313C(v26, v54, v55);
      v31 = sub_238262E88(v30, v28, v27, v29);
      v50 = v32;
      v51 = HIBYTE(v32);
      v53 = HIWORD(v31);
      swift_bridgeObjectRetain();
      v33 = sub_23825E150(v30, v28, v27);
      v35 = v34;
      v37 = v36;
      v39 = v38;
      swift_bridgeObjectRelease();
      v40 = MEMORY[0x23B8306D4](v33, v35, v37, v39);
      v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v43 = sub_23835AF80();
      v45 = v44;
      v47 = v46;
      v49 = v48;
      swift_bridgeObjectRelease();
      MEMORY[0x23B8306D4](v43, v45, v47, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23826A0FC(v40, v42, (v50 << 16) & 0xFF0000 | v53 | (v50 << 16) & 0xFF000000 | (v51 << 40) | ((unint64_t)BYTE2(v50) << 32));
      sub_23825B804(v7);
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_238324CAC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = (uint64_t)v5;
    v11 = result;
    v12 = *v5;
    swift_unknownObjectRetain();
    sub_23832097C(0, v11, (uint64_t)v5);
    v13 = *(unsigned __int16 *)(v12 + 16);
    if (v13 > a3)
    {
      swift_unknownObjectRetain();
      sub_238320C14(a3 + 1, v13, v6);
    }
    v14 = v12 + 24;
    if (*(_BYTE *)(v12 + 18))
    {
      v15 = (__int128 *)(v14 + 40 * v11);
      v16 = *v15;
      v17 = v15[1];
      v77 = *((_QWORD *)v15 + 4);
      v76[0] = v16;
      v76[1] = v17;
      v18 = (__int128 *)(v14 + 40 * a3);
      v20 = *v18;
      v19 = v18[1];
      v75 = *((_QWORD *)v18 + 4);
      v74[0] = v20;
      v74[1] = v19;
      sub_238263DDC((uint64_t)v76);
      sub_238263DDC((uint64_t)v76);
      sub_238263DDC((uint64_t)v74);
      sub_238324238(a2);
      swift_unknownObjectRetain();
      sub_2383248C4(a4, a5);
      sub_23825B804(v6);
      sub_23825B804((uint64_t)v74);
      return sub_23825B804((uint64_t)v76);
    }
    else
    {
      v21 = v14 + 24 * v11;
      v23 = *(_QWORD *)v21;
      v22 = *(_QWORD *)(v21 + 8);
      v24 = v14 + 24 * a3;
      v73 = v6;
      v25 = *(_QWORD *)v24;
      v26 = *(_QWORD *)(v24 + 8);
      v70 = *(_QWORD *)v24;
      v27 = *(unsigned int *)(v24 + 16);
      v28 = *(unsigned __int8 *)(v24 + 20);
      v29 = *(unsigned __int8 *)(v24 + 21);
      v30 = *(unsigned int *)(v21 + 16) | ((unint64_t)*(unsigned __int8 *)(v21 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v21 + 21) << 40);
      v31 = sub_23826313C(a2, *(_QWORD *)v21, v22);
      v71 = v27 | (v28 << 32) | (v29 << 40);
      v32 = sub_23826313C(a4, v25, v26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = sub_238262E88(v31, v23, v22, v30);
      swift_bridgeObjectRetain();
      v34 = sub_23825E150(v31, v23, v22);
      v36 = v35;
      v38 = v37;
      v40 = v39;
      swift_bridgeObjectRelease();
      MEMORY[0x23B8306D4](v34, v36, v38, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v41 = sub_23835AF80();
      v43 = v42;
      v45 = v44;
      v47 = v46;
      swift_bridgeObjectRelease();
      v48 = MEMORY[0x23B8306D4](v41, v43, v45, v47);
      v50 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_238263184(v48, v50, v33 & 0xFFFFFFFFFFFFLL);
      v72 = sub_238262E88(v32, v70, v26, v71);
      LODWORD(v45) = v51;
      v69 = HIBYTE(v51);
      swift_bridgeObjectRetain();
      v52 = sub_23825E150(v32, v70, v26);
      v54 = v53;
      v56 = v55;
      v58 = v57;
      swift_bridgeObjectRelease();
      v68 = MEMORY[0x23B8306D4](v52, v54, v56, v58);
      v60 = v59;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v61 = sub_23835AF80();
      v63 = v62;
      v65 = v64;
      v67 = v66;
      swift_bridgeObjectRelease();
      MEMORY[0x23B8306D4](v61, v63, v65, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23826A0FC(v68, v60, ((_DWORD)v45 << 16) & 0xFF0000 | HIWORD(v72) | ((_DWORD)v45 << 16) & 0xFF000000 | (v69 << 40) | ((unint64_t)BYTE2(v45) << 32));
      sub_23825B804(v73);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *sub_23832509C(_QWORD *a1)
{
  return sub_238323350(a1, (void (*)(_OWORD *))sub_238325E90);
}

void sub_2383250CC(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;

  swift_bridgeObjectRetain();
  sub_238330138(a1, a2, &v42);
  v6 = v42.n128_u64[1];
  v7 = v42.n128_u64[0];
  v45 = v42;
  v46 = v43;
  v47 = v44;
  v8 = v42.n128_u64[0];
  v9 = v44;
  v40 = *((_QWORD *)&v43 + 1);
  v41 = v43;
  v39 = *((_QWORD *)&v44 + 1);
  v10 = v44;
  if (!v42.n128_u64[0])
    goto LABEL_8;
  if ((v44 & 0x8000000000000000) != 0)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    return;
  }
  if (!*(_WORD *)(v42.n128_u64[0] + 16) || (_QWORD)v44 == 0)
  {
LABEL_8:
    swift_unknownObjectRetain();
    v12 = sub_238269C7C();
    LOBYTE(v13) = 0;
    v14 = 0;
  }
  else
  {
    v15 = *(unsigned __int8 *)(v42.n128_u64[0] + 18);
    if (*(_BYTE *)(v42.n128_u64[0] + 18))
    {
      v38 = v42.n128_u64[0];
      swift_unknownObjectRetain_n();
      v13 = 0;
      v16 = v8;
      do
      {
        v17 = *(unsigned __int16 *)(v16 + 16);
        if (*(_WORD *)(v16 + 16))
        {
          v19 = 0;
          v20 = (uint64_t *)(v16 + 56);
          while (1)
          {
            v21 = *v20;
            v20 += 5;
            v22 = v13 - v21;
            if (__OFSUB__(v13, v21))
              break;
            if (__OFADD__(v22, 1))
              goto LABEL_42;
            if (v22 + 1 < 1)
            {
              v17 = v19;
              goto LABEL_12;
            }
            ++v19;
            v13 = v22;
            if (v17 == v19)
              goto LABEL_21;
          }
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v22 = v13;
LABEL_21:
        if (v22)
          goto LABEL_43;
        v13 = 0;
LABEL_12:
        v18 = (4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C;
        v15 = ((-15 << v18) - 1) & v15 | (v17 << v18);
        v14 = *(_QWORD *)(v16 + 24 + 40 * v17);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        v16 = v14;
      }
      while (*(_BYTE *)(v14 + 18));
      v23 = v15 & 0xFFFFFFFFFFFFF0FFLL;
      v7 = v38;
      v24 = *(unsigned __int16 *)(v14 + 16);
      if (!*(_WORD *)(v14 + 16))
        goto LABEL_31;
      goto LABEL_24;
    }
    swift_unknownObjectRetain_n();
    v23 = 0;
    v13 = 0;
    v14 = v8;
    v24 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16))
    {
LABEL_24:
      v25 = 0;
      v26 = (unsigned __int8 *)(v14 + 40);
      while (1)
      {
        v27 = *v26;
        v26 += 24;
        v28 = v13 - v27;
        if (__OFSUB__(v13, v27))
          break;
        if (__OFADD__(v28, 1))
          goto LABEL_45;
        if (v28 + 1 < 1)
        {
          v24 = v25;
          goto LABEL_35;
        }
        ++v25;
        v13 = v28;
        if (v24 == v25)
          goto LABEL_32;
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_31:
    v28 = v13;
LABEL_32:
    if (v28)
      goto LABEL_48;
    v13 = 0;
LABEL_35:
    swift_unknownObjectRelease();
    if (v13 < 0)
      goto LABEL_46;
    v12 = v23 | (v24 << 8);
  }
  if (v8)
    v29 = (v9 << 11) | 0x300;
  else
    v29 = 768;
  v30 = v13 | 0x300;
  v31 = sub_2382644F4(v29, 0, 0, 1);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_23825B804((uint64_t)&v42);
  *a3 = v7;
  a3[1] = v6;
  a3[2] = v41;
  a3[3] = v40;
  a3[4] = v10;
  a3[5] = v39;
  a3[6] = v30;
  a3[7] = *((_QWORD *)&v10 + 1);
  a3[8] = v12;
  a3[9] = v14;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
}

void sub_238325380(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  __int128 v48;
  __int128 v49;
  __n128 v50;
  __int128 v51;
  __int128 v52;
  __n128 v53;
  __int128 v54;
  __int128 v55;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  BigString.UnicodeScalarView.init<A>(_:)((uint64_t)v6, a2, &v47);
  v50 = v47;
  v51 = v48;
  v52 = v49;
  v53 = v47;
  v8 = v47.n128_u64[1];
  v9 = v47.n128_u64[0];
  v54 = v48;
  v55 = v49;
  v10 = v47.n128_u64[0];
  v11 = v49;
  v45 = *((_QWORD *)&v48 + 1);
  v46 = v48;
  v43 = *((_QWORD *)&v49 + 1);
  v42 = *((_QWORD *)&v49 + 1);
  v44 = v49;
  if (!v47.n128_u64[0])
    goto LABEL_19;
  if ((v49 & 0x8000000000000000) != 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  if (*(_WORD *)(v47.n128_u64[0] + 16) && (_QWORD)v49)
  {
    v12 = *(unsigned __int8 *)(v47.n128_u64[0] + 18);
    if (*(_BYTE *)(v47.n128_u64[0] + 18))
    {
      v41 = v47.n128_u64[0];
      swift_unknownObjectRetain_n();
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = *(unsigned __int16 *)(v14 + 16);
        if (*(_WORD *)(v14 + 16))
        {
          v18 = 0;
          v19 = (uint64_t *)(v14 + 56);
          while (1)
          {
            v20 = *v19;
            v19 += 5;
            v21 = v13 - v20;
            if (__OFSUB__(v13, v20))
              break;
            if (__OFADD__(v21, 1))
              goto LABEL_39;
            if (v21 + 1 < 1)
            {
              v15 = v18;
              goto LABEL_8;
            }
            ++v18;
            v13 = v21;
            if (v15 == v18)
              goto LABEL_17;
          }
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v21 = v13;
LABEL_17:
        if (v21)
          goto LABEL_40;
        v13 = 0;
LABEL_8:
        v16 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
        v12 = ((-15 << v16) - 1) & v12 | (v15 << v16);
        v17 = *(_QWORD *)(v14 + 24 + 40 * v15);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        v14 = v17;
      }
      while (*(_BYTE *)(v17 + 18));
      v23 = v12 & 0xFFFFFFFFFFFFF0FFLL;
      v9 = v41;
      v24 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16))
        goto LABEL_28;
      goto LABEL_21;
    }
    swift_unknownObjectRetain_n();
    v23 = 0;
    v13 = 0;
    v17 = v10;
    v24 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
LABEL_21:
      v25 = 0;
      v26 = (unsigned __int8 *)(v17 + 40);
      while (1)
      {
        v27 = *v26;
        v26 += 24;
        v28 = v13 - v27;
        if (__OFSUB__(v13, v27))
          break;
        if (__OFADD__(v28, 1))
          goto LABEL_42;
        if (v28 + 1 < 1)
        {
          v24 = v25;
          goto LABEL_32;
        }
        ++v25;
        v13 = v28;
        if (v24 == v25)
          goto LABEL_29;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_28:
    v28 = v13;
LABEL_29:
    if (v28)
      goto LABEL_45;
    v13 = 0;
LABEL_32:
    swift_unknownObjectRelease();
    if (v13 < 0)
      goto LABEL_43;
    v22 = v23 | (v24 << 8);
  }
  else
  {
LABEL_19:
    swift_unknownObjectRetain();
    v22 = sub_238269C7C();
    LOBYTE(v13) = 0;
    v17 = 0;
  }
  if (v10)
    v29 = (v11 << 11) | 0x300;
  else
    v29 = 768;
  v30 = v13 | 0x300;
  v31 = sub_2382644F4(v29, 0, 0, 1);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_23825B804((uint64_t)&v47);
  *a3 = v9;
  a3[1] = v8;
  v38 = v45;
  a3[2] = v46;
  a3[3] = v38;
  v39 = v43;
  a3[4] = v44;
  a3[5] = v39;
  v40 = v42;
  a3[6] = v30;
  a3[7] = v40;
  a3[8] = v22;
  a3[9] = v17;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
}

void sub_238325694(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  sub_238331410(a1, a2, &v39);
  v42 = v39;
  v43 = v40;
  v44 = v41;
  v45 = v39;
  v4 = *((_QWORD *)&v39 + 1);
  v5 = v39;
  v46 = v40;
  v47 = v41;
  v6 = v39;
  v7 = v41;
  v37 = *((_QWORD *)&v40 + 1);
  v38 = v40;
  v36 = *((_QWORD *)&v41 + 1);
  v8 = v41;
  if (!(_QWORD)v39)
    goto LABEL_19;
  if ((v41 & 0x8000000000000000) != 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  if (*(_WORD *)(v39 + 16) && (_QWORD)v41)
  {
    v9 = *(unsigned __int8 *)(v39 + 18);
    if (*(_BYTE *)(v39 + 18))
    {
      v35 = v39;
      swift_unknownObjectRetain_n();
      v10 = 0;
      v11 = v6;
      do
      {
        v12 = *(unsigned __int16 *)(v11 + 16);
        if (*(_WORD *)(v11 + 16))
        {
          v15 = 0;
          v16 = (uint64_t *)(v11 + 56);
          while (1)
          {
            v17 = *v16;
            v16 += 5;
            v18 = v10 - v17;
            if (__OFSUB__(v10, v17))
              break;
            if (__OFADD__(v18, 1))
              goto LABEL_39;
            if (v18 + 1 < 1)
            {
              v12 = v15;
              goto LABEL_8;
            }
            ++v15;
            v10 = v18;
            if (v12 == v15)
              goto LABEL_17;
          }
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v18 = v10;
LABEL_17:
        if (v18)
          goto LABEL_40;
        v10 = 0;
LABEL_8:
        v13 = (4 * *(_BYTE *)(v11 + 18) + 8) & 0x3C;
        v9 = ((-15 << v13) - 1) & v9 | (v12 << v13);
        v14 = *(_QWORD *)(v11 + 24 + 40 * v12);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        v11 = v14;
      }
      while (*(_BYTE *)(v14 + 18));
      v20 = v9 & 0xFFFFFFFFFFFFF0FFLL;
      v5 = v35;
      v21 = *(unsigned __int16 *)(v14 + 16);
      if (!*(_WORD *)(v14 + 16))
        goto LABEL_28;
      goto LABEL_21;
    }
    swift_unknownObjectRetain_n();
    v20 = 0;
    v10 = 0;
    v14 = v6;
    v21 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
LABEL_21:
      v22 = 0;
      v23 = (unsigned __int8 *)(v14 + 40);
      while (1)
      {
        v24 = *v23;
        v23 += 24;
        v25 = v10 - v24;
        if (__OFSUB__(v10, v24))
          break;
        if (__OFADD__(v25, 1))
          goto LABEL_42;
        if (v25 + 1 < 1)
        {
          v21 = v22;
          goto LABEL_32;
        }
        ++v22;
        v10 = v25;
        if (v21 == v22)
          goto LABEL_29;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_28:
    v25 = v10;
LABEL_29:
    if (v25)
      goto LABEL_45;
    v10 = 0;
LABEL_32:
    swift_unknownObjectRelease();
    if (v10 < 0)
      goto LABEL_43;
    v19 = v20 | (v21 << 8);
  }
  else
  {
LABEL_19:
    swift_unknownObjectRetain();
    v19 = sub_238269C7C();
    LOBYTE(v10) = 0;
    v14 = 0;
  }
  if (v6)
    v26 = (v7 << 11) | 0x300;
  else
    v26 = 768;
  v27 = v10 | 0x300;
  v28 = sub_2382644F4(v26, 0, 0, 1);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_23825B804((uint64_t)&v39);
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v38;
  a3[3] = v37;
  a3[4] = v8;
  a3[5] = v36;
  a3[6] = v27;
  a3[7] = *((_QWORD *)&v8 + 1);
  a3[8] = v19;
  a3[9] = v14;
  a3[10] = v28;
  a3[11] = v30;
  a3[12] = v32;
  a3[13] = v34;
}

_QWORD *sub_238325930()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[8];

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v5[0] = v0[10];
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  v5[4] = v5[0];
  v5[5] = v1;
  v5[6] = v2;
  v5[7] = v3;
  return sub_238323350(v5, (void (*)(_OWORD *))sub_238325E58);
}

_QWORD *sub_238325984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = a5;
  return sub_238323350(v6, (void (*)(_OWORD *))sub_238325E58);
}

uint64_t _s19CollectionsInternal12BigSubstringV17UnicodeScalarViewV9removeAll15keepingCapacityySb_tF_0()
{
  __int128 *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];

  v1 = *((_QWORD *)v0 + 5);
  v2 = *((_QWORD *)v0 + 6);
  v3 = *((_QWORD *)v0 + 10);
  v4 = *((_QWORD *)v0 + 4);
  v5 = v0[1];
  if (*(_QWORD *)v0)
    v6 = *((_QWORD *)v0 + 4);
  else
    v6 = 0;
  v14 = *v0;
  v15 = v5;
  *(_QWORD *)&v16 = v4;
  *((_QWORD *)&v16 + 1) = v1;
  v13 = 0;
  result = MEMORY[0x23B831730](&v13, 8);
  v9 = v13;
  *v0 = 0u;
  v0[1] = 0u;
  *((_QWORD *)v0 + 4) = 0;
  *((_QWORD *)v0 + 5) = v9;
  v10 = v3 >> 10;
  if (2 * (v6 & 0x1FFFFFFFFFFFFFuLL) < v3 >> 10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v11 = v2 >> 11;
  v12 = v3 >> 11;
  if (v10 == v2 >> 10)
  {
LABEL_10:
    sub_23832343C((uint64_t *)v0, &v14, v6, v11, v12);
    return swift_unknownObjectRelease();
  }
  if (v12 < v11)
    goto LABEL_12;
  *((_QWORD *)&v16 + 1) = v1 + 1;
  if (v6 >= v12)
  {
    if (v11 != v12)
    {
      sub_23825A61C(v2 >> 11, v12, v8, (uint64_t)&v13);
      swift_unknownObjectRelease();
      sub_238265C60((uint64_t *)v17);
      v14 = v17[0];
      v15 = v17[1];
      v16 = v17[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_238325B44()
{
  unint64_t result;

  result = qword_2568F1F60;
  if (!qword_2568F1F60)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1F60);
  }
  return result;
}

unint64_t sub_238325B8C()
{
  unint64_t result;

  result = qword_2568F1F68;
  if (!qword_2568F1F68)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1F68);
  }
  return result;
}

unint64_t sub_238325BD4()
{
  unint64_t result;

  result = qword_2568F1F70;
  if (!qword_2568F1F70)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1F70);
  }
  return result;
}

unint64_t sub_238325C1C()
{
  unint64_t result;

  result = qword_2568F1F78;
  if (!qword_2568F1F78)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView.Iterator, &type metadata for BigSubstring.UnicodeScalarView.Iterator);
    atomic_store(result, (unint64_t *)&qword_2568F1F78);
  }
  return result;
}

unint64_t sub_238325C64()
{
  unint64_t result;

  result = qword_2568F1F80;
  if (!qword_2568F1F80)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1F80);
  }
  return result;
}

unint64_t sub_238325CAC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2568F1F88;
  if (!qword_2568F1F88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F1F90);
    v2 = sub_238325D10();
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0658], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568F1F88);
  }
  return result;
}

unint64_t sub_238325D10()
{
  unint64_t result;

  result = qword_2568F1F98;
  if (!qword_2568F1F98)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1F98);
  }
  return result;
}

unint64_t sub_238325D5C()
{
  unint64_t result;

  result = qword_2568F1FA0;
  if (!qword_2568F1FA0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1FA0);
  }
  return result;
}

unint64_t sub_238325DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F1FA8;
  if (!qword_2568F1FA8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F1F90);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0670], v1);
    atomic_store(result, (unint64_t *)&qword_2568F1FA8);
  }
  return result;
}

unint64_t sub_238325DF4()
{
  unint64_t result;

  result = qword_2568F1FB0;
  if (!qword_2568F1FB0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UnicodeScalarView, &type metadata for BigSubstring.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F1FB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.UnicodeScalarView()
{
  return &type metadata for BigSubstring.UnicodeScalarView;
}

ValueMetadata *type metadata accessor for BigSubstring.UnicodeScalarView.Iterator()
{
  return &type metadata for BigSubstring.UnicodeScalarView.Iterator;
}

void sub_238325E5C()
{
  uint64_t v0;

  sub_23833150C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(ValueMetadata **)(v0 + 16));
}

uint64_t sub_238325E90(uint64_t a1)
{
  uint64_t v1;

  return sub_238323670(a1, *(unint64_t **)(v1 + 32), *(_QWORD *)(v1 + 40), *(ValueMetadata **)(v1 + 16));
}

uint64_t Rope.insert(_:at:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  sub_2383285BC(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 16) - 8) + 8))(a1);
}

uint64_t Rope._Node.prepend(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t started;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for Rope._Item(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, a1, v7);
  started = Rope._Node._startPath.getter();
  Rope._Node.insert(_:at:)((uint64_t)v10, started, a2, v12, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
}

void Rope.insert(_:at:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;

  v5 = v4;
  v70 = a2;
  v71 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = type metadata accessor for Rope._Item(0, v7, v8, a4);
  MEMORY[0x24BDAC7A8](v9);
  v67 = (uint64_t)&v57 - v10;
  v12 = type metadata accessor for Rope._Node(255, v7, v8, v11);
  v13 = sub_23835B334();
  v68 = *(_QWORD *)(v13 - 8);
  v69 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v62 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v63 = (char *)&v57 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v64 = (uint64_t)&v57 - v19;
  v66 = *(char **)(v12 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v61 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v60 = (char *)&v57 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v65 = (char *)&v57 - v25;
  v26 = *(_QWORD *)(v7 - 8);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v57 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v72 = v5;
  v33(v32, v5, a3);
  v37 = Rope._endPath.getter(a3, v34, v35, v36);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v38 = (unint64_t)v70;
  v39 = v37;
  v40 = v71;
  LOBYTE(v30) = static _RopePath.== infix(_:_:)((uint64_t)v70, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v40, v7);
  if ((v30 & 1) != 0)
  {
    Rope.append(_:)((uint64_t)v29, a3, v41, v42);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v40, v7);
    return;
  }
  v59 = v26;
  v43 = v67;
  Rope._Item.init(_:)((uint64_t)v29, v7, v67);
  v44 = v66;
  v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v66 + 6);
  v46 = v72;
  v47 = v45(v72, 1, v12);
  v58 = v8;
  if (v47 == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v49 = v43;
  v50 = v64;
  Rope._Node.insert(_:at:)(v49, v38, v12, v48, v64);
  v51 = v45(v50, 1, v12);
  v52 = v65;
  if (v51 != 1)
  {
    v53 = v44;
    v70 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v44 + 4);
    v70(v65, v50, v12);
    v44 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v62, v46, v69);
    if (v45((uint64_t)v44, 1, v12) != 1)
    {
      v54 = (uint64_t)v60;
      v70(v60, (uint64_t)v44, v12);
      v55 = (uint64_t)v61;
      (*((void (**)(char *, char *, uint64_t))v53 + 2))(v61, v52, v12);
      v56 = v63;
      static Rope._Node.createInner(children:_:)(v54, v55, v7, v58);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v40, v7);
      (*((void (**)(char *, uint64_t))v53 + 1))(v52, v12);
      (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v53 + 7))(v56, 0, 1, v12);
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 40))(v46, v56, v69);
      goto LABEL_8;
    }
LABEL_11:
    (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v69);
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v40, v7);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v50, v69);
LABEL_8:
  Rope._invalidateIndices()();
}

uint64_t Rope._Node.insert(_:at:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v22 = a5;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v23 = type metadata accessor for Rope._Item(0, v7, v8, a4);
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v10 = (char *)&v21 - v9;
  Rope._Node.ensureUnique()();
  v11 = Rope._Node.header.getter();
  v12 = HIWORD(v11);
  v13 = BYTE2(v11);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = _RopePath.subscript.getter(v12, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  result = Rope._Node.header.getter();
  if (!v13)
  {
    if (v16 > (unsigned __int16)result)
      goto LABEL_8;
    v20 = v21;
    v19 = v23;
    v18 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v10, v24, v23);
    Rope._Node._leafInsert(_:at:)(v10, v16, a3, v22);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  if (v16 < (unsigned __int16)result)
  {
    MEMORY[0x24BDAC7A8](result);
    *(&v21 - 4) = v7;
    *(&v21 - 3) = v8;
    v18 = v24;
    *(&v21 - 2) = v24;
    *(&v21 - 1) = a2;
    Rope._Node._innerInsert(at:with:)(v16, (void (*)(uint64_t))sub_2383286BC, (uint64_t)(&v21 - 6), a3, v22);
    v19 = v23;
    v20 = v21;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

void Rope.insert<A>(_:at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  _QWORD v63[2];
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v78 = a6;
  v79 = a1;
  v81 = a3;
  v82 = a5;
  v80 = a2;
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(a4 + 24);
  v10 = type metadata accessor for Rope._Item(0, v8, v9, a4);
  MEMORY[0x24BDAC7A8](v10);
  v76 = (uint64_t)v63 - v11;
  v13 = type metadata accessor for Rope._Node(255, v8, v9, v12);
  v14 = sub_23835B334();
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v67 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v68 = (char *)v63 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v69 = (uint64_t)v63 - v20;
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v66 = (char *)v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v65 = (char *)v63 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v70 = (char *)v63 - v26;
  v27 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v34 = (char *)v63 - v33;
  v35 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)v63 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v77 = v6;
  v38(v37, v6, a4);
  Rope.summary.getter(a4, v39, (uint64_t)v34);
  v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  v41 = v78;
  v40(v37, a4);
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 24))(v34, v82, v41);
  v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  v44 = v34;
  v45 = v79;
  v46 = v80;
  v43(v44, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v45, v8);
  if (v42 == v46)
  {
    Rope.append(_:)((uint64_t)v29, a4, v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v45, v8);
    return;
  }
  v63[1] = a4;
  v64 = v27;
  Rope._Item.init(_:)((uint64_t)v29, v8, v76);
  v49 = v71;
  v50 = v72;
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  v52 = v77;
  if (v51(v77, 1, v72) == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v53 = v69;
  Rope._Node.insert<A>(_:at:in:)(v76, v46, v81, v50, v82, v41, v69);
  v54 = v51(v53, 1, v50);
  v56 = v73;
  v55 = v74;
  if (v54 != 1)
  {
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
    v57(v70, v53, v50);
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
    v46 = (uint64_t)v67;
    v58(v67, v52, v55);
    if (v51(v46, 1, v50) != 1)
    {
      v59 = (uint64_t)v65;
      v57(v65, v46, v50);
      v60 = (uint64_t)v66;
      v61 = v70;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v66, v70, v50);
      v62 = v68;
      static Rope._Node.createInner(children:_:)(v59, v60, v8, v75);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v45, v8);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v61, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v62, 0, 1, v50);
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 40))(v52, v62, v74);
      goto LABEL_8;
    }
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v46, v74);
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v45, v8);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v55);
LABEL_8:
  Rope._invalidateIndices()();
}

uint64_t Rope._Node.insert<A>(_:at:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  void (*v19)(uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a3;
  v57 = a6;
  v54 = a2;
  v55 = a5;
  v52 = a7;
  v53 = a1;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  v58 = type metadata accessor for Rope._Item(0, v9, v10, a4);
  v11 = *(_QWORD *)(v58 - 8);
  v12 = MEMORY[0x24BDAC7A8](v58);
  v14 = (char *)&v49 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (uint64_t *)((char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  Rope._Node.ensureUnique()();
  v18 = Rope._Node.header.getter() & 0xFF0000;
  v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  v51 = v7;
  v19(v17, v7, a4);
  v20 = *v17;
  if (v18)
  {
    v21 = v20 + ((*(unsigned __int8 *)(v15 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a4);
    v22 = nullsub_1(v20 + 16, v21, v9, a4, v10);
    v24 = v23;
    swift_unknownObjectRetain();
    v25 = (unsigned __int16 *)v22;
    v26 = v55;
    v27 = v56;
    v28 = v57;
    v54 = sub_238327520(v25, v24, v54, v56, v9, v55, v57, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
    v30 = v29;
    swift_unknownObjectRelease();
    v31 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, a4);
    MEMORY[0x24BDAC7A8](v31);
    *(&v49 - 6) = v9;
    *(&v49 - 5) = v26;
    v33 = v53;
    v32 = v54;
    *(&v49 - 4) = v28;
    *(&v49 - 3) = v33;
    v47 = v30;
    v48 = v27;
    Rope._Node._innerInsert(at:with:)(v32, (void (*)(uint64_t))sub_2383286C8, (uint64_t)(&v49 - 8), a4, v52);
    v34 = v33;
    v35 = v58;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v34, v35);
  }
  v50 = v20 + 16;
  v36 = v11;
  v37 = v20 + ((*(unsigned __int8 *)(v11 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v38 = v58;
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v58);
  v39 = (unsigned __int16 *)nullsub_1(v50, v37, v9, v38, v10);
  v41 = v40;
  swift_unknownObjectRetain();
  v42 = sub_238327520(v39, v41, v54, v56, v9, v55, v57, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
  v44 = v43;
  swift_unknownObjectRelease();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, a4);
  if (!v44)
  {
    v34 = v53;
    v46 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v14, v53, v58);
    v11 = v36;
    Rope._Node._leafInsert(_:at:)(v14, v42, a4, v52);
    v35 = v46;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v34, v35);
  }
  __break(1u);
  return result;
}

uint64_t sub_238326D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = type metadata accessor for Rope._Item(0, a4, a5, a4);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v16 - v10, a2);
  v14 = type metadata accessor for Rope._Node(0, a4, a5, v13);
  return Rope._Node.insert(_:at:)(v11, a3, v14);
}

uint64_t Rope._Node._innerInsert(at:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  char *v56;
  uint64_t v57;

  v6 = v5;
  v55 = a2;
  v56 = (char *)a3;
  v57 = a5;
  v49 = *(_QWORD *)(a4 - 8);
  v9 = v49;
  v10 = MEMORY[0x24BDAC7A8](a1);
  v46 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v47 = (char *)&v44 - v12;
  v13 = sub_23835B334();
  v53 = *(_QWORD *)(v13 - 8);
  v54 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v52 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v51 = (uint64_t)&v44 - v16;
  v18 = *(_QWORD *)(a4 + 16);
  v17 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v44 - v21;
  v50 = (char *)v6 + *(int *)(a4 + 36);
  (*(void (**)(char *))(v20 + 16))((char *)&v44 - v21);
  v48 = v6;
  v23 = *v6;
  v24 = v23 + ((*(unsigned __int8 *)(v9 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a4);
  v25 = nullsub_1(v23 + 16, v24, v18, a4, v17);
  v27 = v26;
  swift_unknownObjectRetain();
  v28 = v25;
  v29 = AssociatedTypeWitness;
  v30 = v52;
  v31 = v27;
  v32 = v20;
  v33 = v51;
  v45 = a1;
  v34 = v18;
  v35 = v53;
  v36 = v17;
  v37 = v49;
  sub_2383275EC(v28, v31, a1, v55, (uint64_t)v56, v34, v36, v51);
  v38 = v54;
  swift_unknownObjectRelease();
  v39 = *(void (**)(char *, char *, uint64_t))(v32 + 24);
  v56 = v22;
  v39(v50, v22, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v30, v33, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v30, 1, a4) == 1)
  {
    v40 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v40(v33, v38);
    v40((uint64_t)v30, v38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v57, 1, 1, a4);
  }
  else
  {
    v41 = v47;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v47, v30, a4);
    v42 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v46, v41, a4);
    Rope._Node._applySpawn(_:of:)(v42, v45, a4, v57);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v41, a4);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v38);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v56, v29);
}

uint64_t Rope._Node._leafInsert(_:at:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v26 = *(_QWORD *)(a3 - 8);
  v27 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v9 = type metadata accessor for Rope._Item(0, *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  v13 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v25 = a1;
  v13(v12, a1, v9);
  if ((Rope._Item.isUndersized.getter(v9) & 1) != 0
    && (unsigned __int16)Rope._Node.header.getter()
    && (Rope._Node._rebalanceBeforeInsert(_:at:)((uint64_t)v12, v27, a3) & 1) != 0)
  {
    goto LABEL_14;
  }
  if (!Rope._Node.isFull.getter())
  {
    sub_2382C0650((uint64_t)v12, v27, a3);
LABEL_14:
    v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v25, v9);
    v20(v12, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(a4, 1, 1, a3);
  }
  v24 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  result = v16(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v18 < 0)
      v18 = result + 2;
    if (v27 >= v18 >> 1)
    {
      result = v16(AssociatedTypeWitness, AssociatedConformanceWitness);
      v21 = result + 1;
      if (!__OFADD__(result, 1))
      {
        if (v21 < 0)
          v21 = result + 2;
        Rope._Node.split(keeping:)(v21 >> 1, a3);
      }
      goto LABEL_21;
    }
    v23 = Rope._Node.header.getter();
    result = v16(AssociatedTypeWitness, AssociatedConformanceWitness);
    v19 = result + 1;
    if (!__OFADD__(result, 1))
    {
      if (v19 < 0)
        v19 = result + 2;
      Rope._Node.split(keeping:)((unsigned __int16)v23 - (v19 >> 1), a3);
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_238327420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Rope._Item(0, a5, AssociatedConformanceWitness, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - v16;
  (*(void (**)(char *, uint64_t))(v18 + 16))((char *)&v22 - v16, a2);
  v20 = type metadata accessor for Rope._Node(0, a5, AssociatedConformanceWitness, v19);
  return Rope._Node.insert<A>(_:at:in:)(v17, a3, a4, v20, a6, a7);
}

uint64_t sub_238327520(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t), uint64_t a9)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = a8(0, a5, AssociatedConformanceWitness);
  v19 = MEMORY[0x23B831670](a9, v18);
  return Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(a3, a4, 0, a1, a2, a5, v18, a6, v19, a7);
}

uint64_t sub_2383275EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v23)(char *, uint64_t);
  _QWORD v25[3];
  void (*v26)(uint64_t);

  v25[2] = a5;
  v26 = a4;
  v25[1] = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)v25 - v15;
  v18 = type metadata accessor for Rope._Node(0, a6, a7, v17);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v18);
  v19 = Rope._UnsafeHandle.mutableChildPtr(at:)(a3, a1, a2, a6, v18);
  v20 = v19 + *(int *)(v18 + 36);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21(v16, v20, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v16, AssociatedTypeWitness);
  v26(v19);
  v21(v16, v20, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  return ((uint64_t (*)(char *, uint64_t))v23)(v16, AssociatedTypeWitness);
}

uint64_t Rope._Node._applySpawn(_:of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  unsigned __int16 v54;
  void (*v55)(uint64_t, uint64_t);
  char *v56;
  uint64_t AssociatedConformanceWitness;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;

  v5 = v4;
  v66 = a4;
  v9 = *(_QWORD *)(a3 + 24);
  v67 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v58 - v12;
  v14 = sub_23835B334();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v63 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v64 = (uint64_t)&v58 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v61 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v69 = (uint64_t *)((char *)&v58 - v22);
  v70 = v23;
  v24 = *(uint64_t (**)(void))(v23 + 16);
  v65 = a1;
  result = v24();
  v26 = a2 + 1;
  if (!__OFADD__(a2, 1))
  {
    v62 = v15;
    v59 = v13;
    v71 = a2 + 1;
    v68 = v9;
    if (a2 >= 1)
    {
      v27 = *v5;
      v28 = *v5 + 16;
      v29 = (*(unsigned __int8 *)(v70 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      v60 = AssociatedTypeWitness;
      v30 = v27 + v29;
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
      v31 = v67;
      v32 = (_WORD *)nullsub_1(v28, v30, v67, a3, v68);
      v34 = v33;
      swift_unknownObjectRetain();
      AssociatedTypeWitness = v60;
      sub_238327C6C(v32, v34, a2, (uint64_t)&v71, v31, v68);
      swift_unknownObjectRelease();
      v26 = v71;
    }
    if (v26 < (unsigned __int16)Rope._Node.header.getter())
    {
      v35 = *v5 + 16;
      v36 = *v5 + ((*(unsigned __int8 *)(v70 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
      MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a3);
      v37 = v36;
      v39 = v67;
      v38 = v68;
      v40 = (unsigned __int16 *)nullsub_1(v35, v37, v67, a3, v68);
      v41 = v11;
      v42 = v14;
      v44 = v43;
      swift_unknownObjectRetain();
      v45 = v44;
      v46 = v42;
      v47 = v41;
      v48 = v64;
      sub_238327EAC(v40, v45, v69, (uint64_t)&v71, v39, v38, v64);
      swift_unknownObjectRelease();
      v50 = v62;
      v49 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v63, v48, v46);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v49, 1, AssociatedTypeWitness) != 1)
      {
        v56 = v59;
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v59, v49, AssociatedTypeWitness);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v56, AssociatedTypeWitness, AssociatedConformanceWitness);
        v55 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
        v55(v65, a3);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v56, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v64, v46);
        goto LABEL_12;
      }
      v51 = v49;
      v52 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v52(v48, v46);
      v52((uint64_t)v51, v46);
    }
    if (Rope._Node.isFull.getter())
    {
      v53 = swift_getAssociatedConformanceWitness();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(AssociatedTypeWitness, v53);
      if (!__OFADD__(result, 1))
      {
        v54 = Rope._Node.header.getter();
        Rope._Node.split(keeping:)(v54 >> 1, a3);
      }
      goto LABEL_14;
    }
    sub_2382C04EC((uint64_t)v69, v71, a3);
    v55 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v55(v65, a3);
LABEL_12:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v66, 1, 1, a3);
    return ((uint64_t (*)(uint64_t *, uint64_t))v55)(v69, a3);
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_238327C6C(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  void (*v25)(char *, uint64_t);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  uint64_t v38;

  v12 = type metadata accessor for Rope._Node(0, a5, a6, a4);
  v13 = *(_QWORD **)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v31 - v17;
  v35 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v12);
  v36 = a1;
  result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v12, a6, v35);
  v38 = a3;
  v20 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  v21 = result;
  v33 = a2;
  v34 = (_QWORD *)a4;
  v22 = v13[9];
  v23 = a5;
  v24 = (void (*)(char *))v13[2];
  v32 = (uint64_t *)(result + v22 * v20);
  v24(v18);
  v37 = Rope._Node.header.getter();
  v25 = (void (*)(char *, uint64_t))v13[1];
  v25(v18, v12);
  v26 = (uint64_t *)(v21 + v22 * v38);
  ((void (*)(char *, uint64_t *, uint64_t))v24)(v16, v26, v12);
  v27 = v23;
  LODWORD(v22) = (unsigned __int16)Rope._Node.header.getter();
  v25(v16, v12);
  v28 = v22 + (unsigned __int16)v37;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (result < v28)
    return result;
  static Rope._Node.redistributeChildren(_:_:to:)(v32, v26, v28, v27, a6);
  Rope._UnsafeHandle._removeChild(at:)(v38, v36);
  result = ((uint64_t (*)(char *, uint64_t))v25)(v18, v12);
  if (__OFSUB__(*v34, 1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  --*v34;
  return result;
}

uint64_t sub_238327EAC@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;

  v38 = a7;
  v39 = (uint64_t *)a4;
  v12 = type metadata accessor for Rope._Node(0, a5, a6, a4);
  v13 = *(_QWORD **)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v34 - v17;
  v19 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v12);
  v20 = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v12, a6, v19);
  v21 = (void (*)(char *, uint64_t *, uint64_t))v13[2];
  v36 = a3;
  v21(v18, a3, v12);
  v37 = Rope._Node.header.getter();
  v22 = (void (*)(char *, uint64_t))v13[1];
  v22(v18, v12);
  v23 = *v39;
  v24 = v13[9];
  v35 = v20;
  v21(v16, (uint64_t *)(v20 + v24 * v23), v12);
  LOWORD(a3) = Rope._Node.header.getter();
  v22(v16, v12);
  v25 = (unsigned __int16)a3 + (unsigned __int16)v37;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness) >= v25)
  {
    v31 = v36;
    v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v32 = v38;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v38, (char *)v36 + *(int *)(v12 + 36), AssociatedTypeWitness);
    static Rope._Node.redistributeChildren(_:_:to:)(v31, (uint64_t *)(v35 + *v39 * v24), 0, a5, a6);
    v29 = 0;
    v30 = v32;
  }
  else
  {
    v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v29 = 1;
    v30 = v38;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v30, v29, 1, AssociatedTypeWitness);
}

uint64_t Rope._Node._rebalanceBeforeInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a2;
  v32 = a1;
  v33 = a3;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v28 - v11;
  v29 = (char *)&v28 + *(int *)(v10 + 48) - v11;
  v13 = *v3;
  v14 = *v3 + 16;
  v16 = type metadata accessor for Rope._Item(0, v5, v4, v15);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80);
  v18 = v13 + ((v17 + 19) & ~v17);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v16);
  v19 = nullsub_1(v14, v18, v5, v16, v4);
  v21 = v20;
  swift_unknownObjectRetain();
  sub_2383282D8(v19, v21, v31, v32, v5, v4, v12);
  swift_unknownObjectRelease();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v29, AssociatedTypeWitness, AssociatedConformanceWitness);
  v24 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
  v25 = *v12;
  *v9 = v25;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(_BYTE *, char *, uint64_t))(v26 + 32))(v24, v23, AssociatedTypeWitness);
  (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v24, AssociatedTypeWitness);
  return v25;
}

uint64_t sub_2383282D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  int v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  _BYTE *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;

  v33 = a2;
  v34 = a4;
  v32 = a1;
  v38 = a7;
  v9 = type metadata accessor for Rope._Item(0, a5, a6, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v35 = (uint64_t)&v31 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v31 - v19;
  v36 = a5;
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v9);
  if (a3 < 1)
  {
    v21 = Rope._UnsafeHandle.mutableChildPtr(at:)(a3, v32, v33, a5, v9);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v22(v12, v21, v9);
    Rope._Item.summary.getter(v9);
    v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v12, v9);
    v24 = Rope._Item.rebalance(prevNeighbor:)(v34, v9);
  }
  else
  {
    v21 = Rope._UnsafeHandle.mutableChildPtr(at:)(a3 - 1, v32, v33, a5, v9);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v22(v12, v21, v9);
    Rope._Item.summary.getter(v9);
    v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v12, v9);
    v24 = Rope._Item.rebalance(nextNeighbor:)(v34, v9);
  }
  LODWORD(v34) = v24;
  v22(v12, v21, v9);
  Rope._Item.summary.getter(v9);
  v23(v12, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = v35;
  RopeSummary.subtracting(_:)((uint64_t)v20, AssociatedTypeWitness, AssociatedConformanceWitness, v35);
  v27 = v37;
  v28 = *(void (**)(char *, uint64_t))(v37 + 8);
  v28(v16, AssociatedTypeWitness);
  v28(v20, AssociatedTypeWitness);
  v29 = &v38[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  *v38 = v34 & 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v27 + 32))(v29, v26, AssociatedTypeWitness);
}

void sub_2383285BC(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rope.validate(_:)(v12, v13, v14, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  Rope.insert(_:at:)((uint64_t)v11, a3, a5, v16);
}

void sub_238328664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t);
  uint64_t v6;

  Rope._invalidateIndices()();
  v4 = Rope.startIndex.getter(a2);
  sub_2383285BC(a1, v4, v5, v6, a2);
}

uint64_t sub_2383286BC(uint64_t a1)
{
  uint64_t *v1;

  return sub_238326D64(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_2383286C8(uint64_t a1)
{
  uint64_t *v1;

  return sub_238327420(a1, v1[5], v1[6], v1[7], v1[2], v1[3], v1[4]);
}

Swift::Bool __swiftcall _UnsafeBitSet.insert(_:)(Swift::UInt a1)
{
  _QWORD *v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Bool result;

  v2 = (a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v3 = 1 << a1;
  v4 = *(_QWORD *)(*v1 + v2);
  result = (v4 & (1 << a1)) == 0;
  *(_QWORD *)(*v1 + v2) = v4 | v3;
  return result;
}

uint64_t static _UnsafeBitSet.withTemporaryBitSet<A>(wordCount:run:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a5;
  v9 = sub_23835B334();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v20 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))((char *)&v20 - v14, 1, 1, a4);
  v22 = a4;
  v23 = v15;
  v24 = a2;
  v25 = a3;
  v17 = v26;
  sub_238329A40(a1, (void (*)(char **))sub_238280D68);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v18 = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, a4);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v18, v13, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  __break(1u);
  return result;
}

uint64_t static _UnsafeBitSet.withTemporaryBitSet<A>(capacity:run:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a3;
  v10 = sub_23835B334();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v21 - v16;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v22 = a5;
    v18 = *(_QWORD *)(a4 - 8);
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))((char *)&v21 - v16, 1, 1, a4);
    MEMORY[0x24BDAC7A8](v19);
    *(&v21 - 4) = a4;
    *(&v21 - 3) = (uint64_t)v17;
    v20 = v23;
    *(&v21 - 2) = a2;
    *(&v21 - 1) = v20;
    sub_238329A40((unint64_t)(a1 + 63) >> 6, (void (*)(char **))sub_23830ACB4);
    if (v5)
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, a4);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v14, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
  }
  __break(1u);
  return result;
}

uint64_t _UnsafeBitSet.wordCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

int8x8_t *_UnsafeBitSet.count.getter(int8x8_t *result, uint64_t a2)
{
  int8x8_t *v2;
  uint64_t v3;
  uint8x8_t v4;
  BOOL v5;

  if (result)
  {
    if (a2)
    {
      v2 = result;
      result = 0;
      v3 = 8 * a2;
      while (1)
      {
        v4 = (uint8x8_t)vcnt_s8(*v2);
        v4.i16[0] = vaddlv_u8(v4);
        v5 = __OFADD__(result, v4.u32[0]);
        result = (int8x8_t *)((char *)result + v4.u32[0]);
        if (v5)
          break;
        ++v2;
        v3 -= 8;
        if (!v3)
          return result;
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t *_UnsafeBitSet.startIndex.getter(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (!a2)
    return (unint64_t *)(a2 << 6);
  v2 = *result;
  if (*result)
  {
    v3 = 0;
    return (unint64_t *)(__clz(__rbit64(v2)) | v3);
  }
  v4 = a2 - 1;
  if (a2 == 1)
    return (unint64_t *)(a2 << 6);
  v5 = result + 1;
  v3 = 64;
  while (1)
  {
    v6 = *v5++;
    v2 = v6;
    if (v6)
      break;
    v3 += 64;
    if (!--v4)
    {
      result = (unint64_t *)(a2 << 6);
      if (((a2 << 6) & 0x8000000000000000) == 0)
        return result;
      __break(1u);
      break;
    }
  }
  if ((v3 & 0x8000000000000000) == 0)
    return (unint64_t *)(__clz(__rbit64(v2)) | v3);
  __break(1u);
  return result;
}

unint64_t _UnsafeBitSet.index(after:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = a3 << 6;
  if (a3 << 6 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result <= a1)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v5 = a1 >> 6;
  v6 = ((-1 << a1) - 1) & (-1 << a1) & *(_QWORD *)(a2 + 8 * (a1 >> 6));
  if (v6)
    goto LABEL_4;
  if ((uint64_t)++v5 < a3)
  {
    while (1)
    {
      v6 = *(_QWORD *)(a2 + 8 * v5);
      if (v6)
        break;
      if (a3 == ++v5)
        return result;
    }
LABEL_4:
    v7 = v5 << 6;
    if ((v7 & 0x8000000000000000) == 0)
      return __clz(__rbit64(v6)) + v7;
    goto LABEL_12;
  }
  return result;
}

unint64_t _UnsafeBitSet.index(before:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (a3 << 6 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3 << 6 >= result)
  {
    v3 = result >> 6;
    if ((result & 0x3F) != 0)
    {
      v4 = *(_QWORD *)(a2 + 8 * v3) & ~(-1 << (result & 0x3F));
      if (v4)
        return ((v3 << 6) | 0x3F) - __clz(v4);
    }
    while (1)
    {
      v5 = v3 - 1;
      if (v3 < 1)
        break;
      v4 = *(_QWORD *)(a2 - 8 + 8 * v3--);
      if (v4)
      {
        v3 = v5;
        return ((v3 << 6) | 0x3F) - __clz(v4);
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t _UnsafeBitSet.distance(from:to:)(unint64_t result, unint64_t a2, uint64_t a3, int64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int8x16_t *v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t *v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  BOOL v25;

  v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v4 < result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v4 < a2)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a2 <= result)
    v5 = result;
  else
    v5 = a2;
  if (a2 >= result)
    v6 = result;
  else
    v6 = a2;
  v7 = v6 >> 6;
  v8 = v6 & 0x3F;
  v9 = v5 >> 6;
  v10 = v5 & 0x3F;
  if (v7 != v9)
  {
    if (v7 >= a4)
      return 0;
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(a3 + 8 * v7) & (-1 << v8)));
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    v14 = v7 + 1;
    if (v7 + 1 < v9)
    {
      v15 = v9 + ~v7;
      if (v15 < 4)
        goto LABEL_21;
      v14 += v15 & 0xFFFFFFFFFFFFFFFCLL;
      v16 = 0uLL;
      v17 = (int64x2_t)(unint64_t)v13;
      v18 = (int8x16_t *)(a3 + 8 * v7 + 24);
      v19 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = (int64x2_t)vpadalq_u32((uint64x2_t)v17, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v18[-1]))));
        v16 = (int64x2_t)vpadalq_u32((uint64x2_t)v16, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v18))));
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      v13 = vaddvq_s64(vaddq_s64(v16, v17));
      if (v15 != (v15 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_21:
        v20 = v9 - v14;
        v21 = (int8x8_t *)(a3 + 8 * v14);
        do
        {
          v22 = *v21++;
          v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          v13 += v23.u32[0];
          --v20;
        }
        while (v20);
      }
      v14 = v9;
    }
    if (v14 < a4)
    {
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(a3 + 8 * v14) & ~(-1 << v10)));
      v24.i16[0] = vaddlv_u8(v24);
      v13 += v24.u32[0];
      if (a2 < result)
      {
        v25 = __OFSUB__(0, v13);
        v13 = -v13;
        if (v25)
        {
          __break(1u);
          return 0;
        }
      }
      return v13;
    }
    if (a2 >= result)
      return v13;
    v25 = __OFSUB__(0, v13);
    v13 = -v13;
    if (!v25)
      return v13;
LABEL_36:
    __break(1u);
    return result;
  }
  if (v7 >= a4)
    return 0;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(a3 + 8 * v7) & ((-1 << v10) ^ (-1 << v8))));
  v11.i16[0] = vaddlv_u8(v11);
  if (a2 >= result)
    return v11.u32[0];
  else
    return -(uint64_t)v11.u32[0];
}

Swift::UInt _UnsafeBitSet.index(_:offsetBy:)(Swift::UInt result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v8;
  Swift::UInt v9;
  char v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = a4 << 6;
  if (a4 << 6 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v5 = result;
  if (v4 < result)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v4 == result)
    goto LABEL_6;
  if ((uint64_t)(result >> 6) >= a4)
    goto LABEL_40;
  if (((*(_QWORD *)(a3 + 8 * (result >> 6)) >> result) & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_6:
  if (!a2)
    return v5;
  if (a2 >= 0)
    v8 = a2;
  else
    v8 = -a2;
  v24 = v8;
  if (a2 < 1)
  {
    v24 = v8 - 1;
    v11 = result >> 6;
    if (result < 0x40 || (result & 0x3F) != 0)
    {
      if (v11 >= a4)
        goto LABEL_29;
      v13 = ~(-1 << (result & 0x3F));
      v12 = result >> 6;
    }
    else
    {
      v12 = v11 - 1;
      if (v11 > a4)
      {
LABEL_28:
        v11 = v12;
LABEL_29:
        v20 = v11 << 6;
        v21 = a3 - 8;
        do
        {
          v22 = v11 - 1;
          if (v11 < 1)
          {
            __break(1u);
            goto LABEL_38;
          }
          result = sub_238314EF0(&v24, *(_QWORD *)(v21 + 8 * v11));
          v20 -= 64;
          v11 = v22;
        }
        while ((v23 & 1) != 0);
        if (v20 < 0)
          goto LABEL_43;
        return result + v20;
      }
      v13 = -1;
    }
    result = sub_238314EF0(&v24, *(_QWORD *)(a3 + 8 * v12) & v13);
    if ((v19 & 1) == 0)
      return result + (v12 << 6);
    goto LABEL_28;
  }
  v9 = result >> 6;
  if ((uint64_t)(result >> 6) >= a4)
    goto LABEL_42;
  result = sub_238314E78(&v24, *(_QWORD *)(a3 + 8 * v9) & (-1 << result));
  if ((v10 & 1) == 0)
    return result + (v5 & 0xFFFFFFFFFFFFFFC0);
  if ((uint64_t)(v9 + 1) >= a4)
  {
LABEL_22:
    if (!v24)
      return v4;
    goto LABEL_44;
  }
  v14 = ~v9 << 6;
  v15 = ~v9 + a4;
  v16 = (uint64_t *)(a3 + 8 * v9 + 8);
  while (1)
  {
    v17 = *v16++;
    result = sub_238314E78(&v24, v17);
    if ((v18 & 1) == 0)
      break;
    v14 -= 64;
    if (!--v15)
      goto LABEL_22;
  }
  if (v14 <= 0)
    return result - v14;
LABEL_45:
  __break(1u);
  return result;
}

Swift::UInt _UnsafeBitSet.index(_:offsetBy:limitedBy:)(Swift::UInt result, uint64_t a2, Swift::UInt a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v10;
  int64_t v11;
  char v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  int64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  Swift::UInt v24;
  char v25;
  Swift::UInt v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  char v30;
  uint64_t v31;

  v5 = a5 << 6;
  if (a5 << 6 < 0)
  {
    __break(1u);
    goto LABEL_56;
  }
  v6 = result;
  if (v5 < result)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v5 < a3)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v5 == result)
    goto LABEL_7;
  if ((uint64_t)(result >> 6) >= a5)
    goto LABEL_58;
  if (((*(_QWORD *)(a4 + 8 * (result >> 6)) >> result) & 1) == 0)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
LABEL_7:
  if (!a2)
    return v6;
  if (a2 >= 0)
    v10 = a2;
  else
    v10 = -a2;
  v31 = v10;
  if (a2 < 1)
  {
    if (result < a3)
      return _UnsafeBitSet.index(_:offsetBy:)(result, a2, a4, a5);
    v31 = v10 - 1;
    v21 = result >> 6;
    if (result < 0x40 || (result & 0x3F) != 0)
    {
      if (v21 >= a5)
      {
LABEL_40:
        if ((uint64_t)(a3 >> 6) >= v21)
          return 0;
        v27 = (v21 << 6) - 64;
        v28 = a4 - 8;
        while (1)
        {
          v29 = sub_238314EF0(&v31, *(_QWORD *)(v28 + 8 * v21));
          if ((v30 & 1) == 0)
            break;
          --v21;
          v27 -= 64;
          if ((uint64_t)(a3 >> 6) >= v21)
            return 0;
        }
        v26 = v29 + v27;
LABEL_51:
        if (v26 >= a3)
          return v26;
        else
          return 0;
      }
      v23 = ~(-1 << (result & 0x3F));
      v22 = result >> 6;
    }
    else
    {
      v22 = v21 - 1;
      if (v21 > a5)
      {
LABEL_39:
        v21 = v22;
        goto LABEL_40;
      }
      v23 = -1;
    }
    v24 = sub_238314EF0(&v31, *(_QWORD *)(a4 + 8 * v22) & v23);
    if ((v25 & 1) == 0)
    {
      v26 = v24 + (v22 << 6);
      goto LABEL_51;
    }
    goto LABEL_39;
  }
  if (a3 < result)
    return _UnsafeBitSet.index(_:offsetBy:)(result, a2, a4, a5);
  v11 = result >> 6;
  if ((uint64_t)(result >> 6) < a5)
  {
    result = sub_238314E78(&v31, *(_QWORD *)(a4 + 8 * v11) & (-1 << result));
    if ((v12 & 1) == 0)
    {
      v13 = result + (v6 & 0xFFFFFFFFFFFFFFC0);
      goto LABEL_47;
    }
  }
  v14 = a5 - 1;
  if (__OFSUB__(a5, 1))
    goto LABEL_60;
  if ((uint64_t)(a3 >> 6) < v14)
    v14 = a3 >> 6;
  v15 = v14 - v11;
  if (v14 <= v11)
  {
LABEL_25:
    if (v31)
      v20 = 0;
    else
      v20 = v5 == a3;
    if (v20)
      return v5;
    else
      return 0;
  }
  v16 = ~v11 << 6;
  v17 = (uint64_t *)(a4 + 8 * v11 + 8);
  while (1)
  {
    v18 = *v17++;
    result = sub_238314E78(&v31, v18);
    if ((v19 & 1) == 0)
      break;
    v16 -= 64;
    if (!--v15)
      goto LABEL_25;
  }
  if (v16 <= 0)
  {
    v13 = result - v16;
LABEL_47:
    if (v13 <= a3)
      return v13;
    else
      return 0;
  }
LABEL_61:
  __break(1u);
  return result;
}

unint64_t sub_238329148(unint64_t result, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (a4)
  {
    v4 = *a3;
    if (!*a3)
      goto LABEL_7;
    v5 = 0;
    while (1)
    {
      v6 = a4 << 6;
      if (a4 << 6 < 0)
        goto LABEL_21;
      v5 |= __clz(__rbit64(v4));
      if (v6 >= v5)
        goto LABEL_9;
      __break(1u);
LABEL_7:
      v7 = a4 - 1;
      if (a4 == 1)
        break;
      v8 = a3 + 1;
      v5 = 64;
      while (1)
      {
        v9 = *v8++;
        v4 = v9;
        if (v9)
          break;
        v5 += 64;
        if (!--v7)
        {
          v6 = a4 << 6;
          v5 = a4 << 6;
          if (((a4 << 6) & 0x8000000000000000) == 0)
            goto LABEL_9;
          __break(1u);
          break;
        }
      }
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_19;
      }
    }
  }
  v6 = a4 << 6;
  v5 = a4 << 6;
LABEL_9:
  if (v5 > result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet.contains(_:)(Swift::UInt a1)
{
  uint64_t v1;
  int64_t v2;
  _BOOL8 v3;

  if ((uint64_t)(a1 >> 6) >= v2)
    LOBYTE(v3) = 0;
  else
    return (*(_QWORD *)(v1 + 8 * (a1 >> 6)) >> a1) & 1;
  return v3;
}

Swift::Bool __swiftcall _UnsafeBitSet.remove(_:)(Swift::UInt a1)
{
  _QWORD *v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Bool result;

  if ((int64_t)(a1 >> 6) >= v1[1])
    return 0;
  v2 = 8 * (a1 >> 6);
  v3 = *(_QWORD *)(*v1 + v2);
  v4 = 1 << a1;
  result = (v3 & (1 << a1)) != 0;
  *(_QWORD *)(*v1 + v2) = v3 & ~v4;
  return result;
}

uint64_t _UnsafeBitSet.endIndex.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2 << 6;
  if (a2 << 6 < 0)
    __break(1u);
  return result;
}

uint64_t _UnsafeBitSet.capacity.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2 << 6;
  if (a2 << 6 < 0)
    __break(1u);
  return result;
}

BOOL _UnsafeBitSet.isEmpty.getter(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (!a2)
    return 1;
  if (*a1)
    return 0;
  if (a2 == 1)
    return 1;
  v3 = a2 - 2;
  v4 = a1 + 1;
  do
  {
    v6 = *v4++;
    v5 = v6;
    result = v6 == 0;
    v7 = v3-- != 0;
  }
  while (v7 && !v5);
  return result;
}

Swift::Bool __swiftcall _UnsafeBitSet.update(_:to:)(Swift::UInt _, Swift::Bool to)
{
  uint64_t *v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = _ >> 6;
  v4 = *v2;
  v5 = 1 << _;
  if (to)
    v6 = *(_QWORD *)(v4 + 8 * v3) | v5;
  else
    v6 = *(_QWORD *)(v4 + 8 * v3) & ~v5;
  *(_QWORD *)(v4 + 8 * v3) = v6;
  return v3 == v2[1] - 1;
}

unint64_t static _UnsafeBitSet.wordCount(forCapacity:)(unint64_t result)
{
  if (result < 0xFFFFFFFFFFFFFFC0)
    return (result + 63) >> 6;
  __break(1u);
  return result;
}

Swift::UInt_optional __swiftcall _UnsafeBitSet.Iterator.next()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::Bool v3;
  Swift::UInt v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::UInt_optional result;

  v1 = v0[3];
  if (!v1)
  {
    v5 = v0[2];
    v6 = __OFADD__(v5, 1);
    v7 = v5 + 1;
    if (v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v8 = v0[1];
    if (v7 >= v8)
    {
LABEL_13:
      v4 = 0;
      v3 = 1;
      goto LABEL_18;
    }
    v0[2] = v7;
    v9 = *v0;
    v10 = *(_QWORD *)(*v0 + 8 * v7);
    v0[3] = v10;
    if (v10)
    {
      v11 = v7;
LABEL_8:
      v0[3] = (v10 - 1) & v10;
      if (((v11 << 6) & 0x8000000000000000) == 0)
      {
        v3 = 0;
        v4 = __clz(__rbit64(v10)) + (v11 << 6);
        goto LABEL_18;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    while (1)
    {
      v11 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      if (v11 >= v8)
        goto LABEL_13;
      v0[2] = v11;
      v10 = *(_QWORD *)(v9 + 8 * v11);
      v0[3] = v10;
      ++v7;
      if (v10)
        goto LABEL_8;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v0[3] = (v1 - 1) & v1;
  v2 = v0[2] << 6;
  if (v2 < 0)
    goto LABEL_15;
  v3 = 0;
  v4 = v2 | __clz(__rbit64(v1));
LABEL_18:
  result.value = v4;
  result.is_nil = v3;
  return result;
}

uint64_t sub_238329400(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;

  v10 = sub_23835B334();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - v12;
  result = a3(a1);
  if (!v5)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v13, 0, 1, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
  }
  return result;
}

uint64_t static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)(uint64_t a1, void (*a2)(char **))
{
  return sub_238329A40(a1, a2);
}

Swift::Bool __swiftcall _UnsafeBitSet.isWithinBounds(_:)(Swift::UInt a1)
{
  uint64_t v1;

  if (v1 << 6 < 0)
    __break(1u);
  else
    LOBYTE(a1) = v1 << 6 > a1;
  return a1;
}

Swift::Void __swiftcall _UnsafeBitSet.insertAll(upTo:)(Swift::UInt upTo)
{
  void **v1;
  Swift::UInt v2;
  size_t v3;

  if (upTo)
  {
    v2 = upTo & 0x3F;
    v3 = 8 * (upTo >> 6);
    if (upTo >= 0x40)
      memset(*v1, 255, v3);
    if (v2)
      *(_QWORD *)((char *)*v1 + v3) |= ~(-1 << v2);
  }
}

int8x8_t *_UnsafeBitSet.underestimatedCount.getter(int8x8_t *result, uint64_t a2)
{
  int8x8_t *v2;
  uint64_t v3;
  uint8x8_t v4;
  BOOL v5;

  if (result)
  {
    if (a2)
    {
      v2 = result;
      result = 0;
      v3 = 8 * a2;
      while (1)
      {
        v4 = (uint8x8_t)vcnt_s8(*v2);
        v4.i16[0] = vaddlv_u8(v4);
        v5 = __OFADD__(result, v4.u32[0]);
        result = (int8x8_t *)((char *)result + v4.u32[0]);
        if (v5)
          break;
        ++v2;
        v3 -= 8;
        if (!v3)
          return result;
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _UnsafeBitSet.Iterator._index.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafeBitSet.Iterator._index.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafeBitSet.Iterator._index.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _UnsafeBitSet.Iterator._word.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t _UnsafeBitSet.Iterator._word.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*_UnsafeBitSet.Iterator._word.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

Swift::UInt sub_238329614@<X0>(uint64_t a1@<X8>)
{
  Swift::UInt_optional v3;

  v3 = _UnsafeBitSet.Iterator.next()();
  *(_QWORD *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void sub_238329640(uint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = *(uint64_t **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  if (v3 < 1)
    v4 = 0;
  else
    v4 = (uint64_t *)*v2;
  *a1 = v2;
  a1[1] = (uint64_t *)v3;
  a1[2] = 0;
  a1[3] = v4;
}

uint64_t sub_238329664()
{
  uint64_t v0;
  int8x8_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint8x8_t v5;
  BOOL v6;

  v1 = *(int8x8_t **)v0;
  if (!*(_QWORD *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 8);
  if (!v2)
    return 0;
  result = 0;
  v4 = 8 * v2;
  while (1)
  {
    v5 = (uint8x8_t)vcnt_s8(*v1);
    v5.i16[0] = vaddlv_u8(v5);
    v6 = __OFADD__(result, v5.u32[0]);
    result += v5.u32[0];
    if (v6)
      break;
    ++v1;
    v4 -= 8;
    if (!v4)
      return result;
  }
  __break(1u);
  return result;
}

unint64_t **sub_2383296B0()
{
  uint64_t v0;

  return sub_23833B3DC(*(unint64_t ***)v0, *(_QWORD *)(v0 + 8));
}

unint64_t **sub_2383296B8(unint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23832D890(a1, a2, a3, *(unint64_t **)v3, *(_QWORD *)(v3 + 8));
}

unint64_t sub_2383296C4@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t result;

  result = _UnsafeBitSet.index(before:)(*a1, *v2, v2[1]);
  *a2 = result;
  return result;
}

unint64_t sub_2383296F0(unint64_t *a1)
{
  uint64_t *v1;
  unint64_t result;

  result = _UnsafeBitSet.index(before:)(*a1, *v1, v1[1]);
  *a1 = result;
  return result;
}

Swift::UInt sub_23832971C@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X8>)
{
  uint64_t *v3;
  Swift::UInt result;

  result = _UnsafeBitSet.index(_:offsetBy:)(*a1, a2, *v3, v3[1]);
  *a3 = result;
  return result;
}

unint64_t sub_23832974C(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v2;

  return _UnsafeBitSet.distance(from:to:)(*a1, *a2, *v2, v2[1]);
}

unint64_t *sub_23832975C@<X0>(unint64_t **a1@<X8>)
{
  uint64_t v1;
  unint64_t *result;

  result = _UnsafeBitSet.startIndex.getter(*(unint64_t **)v1, *(_QWORD *)(v1 + 8));
  *a1 = result;
  return result;
}

void sub_238329784(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8) << 6;
  if (v2 < 0)
    __break(1u);
  else
    *a1 = v2;
}

unint64_t sub_23832979C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = sub_238329148(*a1, a1[1], *(unint64_t **)v2, *(_QWORD *)(v2 + 8));
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

_QWORD *sub_2383297D0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_238336D34(*(_QWORD **)v1, *(_QWORD *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

BOOL sub_2383297FC()
{
  _QWORD *v0;
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v1 = v0[1];
  if (!v1)
    return 1;
  if (*(_QWORD *)*v0)
    return 0;
  if (v1 == 1)
    return 1;
  v3 = v1 - 2;
  v4 = (uint64_t *)(*v0 + 8);
  do
  {
    v6 = *v4++;
    v5 = v6;
    result = v6 == 0;
    v7 = v3-- != 0;
  }
  while (v7 && !v5);
  return result;
}

Swift::UInt sub_23832984C@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  Swift::UInt result;
  char v7;

  result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1]);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t sub_238329884@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t result;

  result = _UnsafeBitSet.index(after:)(*a1, *v2, v2[1]);
  *a2 = result;
  return result;
}

unint64_t sub_2383298B0(unint64_t *a1)
{
  uint64_t *v1;
  unint64_t result;

  result = _UnsafeBitSet.index(after:)(*a1, *v1, v1[1]);
  *a1 = result;
  return result;
}

uint64_t sub_2383298DC(uint64_t isStackAllocationSafe, void (*a2)(char **))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (isStackAllocationSafe < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v3 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000) >> 61)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (8 * isStackAllocationSafe >= 1025)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v7 = (char *)swift_slowAlloc();
      v8 = v7;
      v10 = v7;
      v11 = v3;
      if (v3)
      {
        if (v3 < 1)
          goto LABEL_18;
        bzero(v7, 8 * v3);
      }
      a2(&v10);
      return MEMORY[0x23B831718](v8, -1, -1);
    }
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  v10 = (char *)&v9 - v5;
  v11 = v3;
  if (!v3)
    goto LABEL_8;
  if (v3 < 1)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  bzero((char *)&v9 - v5, 8 * v3);
LABEL_8:
  result = ((uint64_t (*)(char **))a2)(&v10);
  if (v2)
    return swift_willThrow();
  return result;
}

uint64_t sub_238329A40(uint64_t a1, void (*a2)(char **))
{
  return sub_2383298DC(a1, a2);
}

unint64_t sub_238329A58()
{
  unint64_t result;

  result = qword_2568F1FB8;
  if (!qword_2568F1FB8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet.Iterator, &type metadata for _UnsafeBitSet.Iterator);
    atomic_store(result, (unint64_t *)&qword_2568F1FB8);
  }
  return result;
}

unint64_t sub_238329AA0()
{
  unint64_t result;

  result = qword_2568F1FC0;
  if (!qword_2568F1FC0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet, &type metadata for _UnsafeBitSet);
    atomic_store(result, (unint64_t *)&qword_2568F1FC0);
  }
  return result;
}

uint64_t sub_238329AE4()
{
  return sub_238329B80(&qword_2568F1FC8, &qword_2568F1FD0, MEMORY[0x24BEE0658]);
}

unint64_t sub_238329B10()
{
  unint64_t result;

  result = qword_2568F1FD8;
  if (!qword_2568F1FD8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet, &type metadata for _UnsafeBitSet);
    atomic_store(result, (unint64_t *)&qword_2568F1FD8);
  }
  return result;
}

uint64_t sub_238329B54()
{
  return sub_238329B80(&qword_2568F1FE0, &qword_2568F1FE8, MEMORY[0x24BEE4218]);
}

uint64_t sub_238329B80(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = sub_238329B10();
    result = MEMORY[0x23B831670](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_238329BE4()
{
  unint64_t result;

  result = qword_2568F1FF0;
  if (!qword_2568F1FF0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet, &type metadata for _UnsafeBitSet);
    atomic_store(result, (unint64_t *)&qword_2568F1FF0);
  }
  return result;
}

unint64_t sub_238329C2C()
{
  unint64_t result;

  result = qword_2568F1FF8;
  if (!qword_2568F1FF8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for _UnsafeBitSet.Index, &type metadata for _UnsafeBitSet.Index);
    atomic_store(result, (unint64_t *)&qword_2568F1FF8);
  }
  return result;
}

uint64_t sub_238329C70()
{
  return sub_23829B310(&qword_2568F2000, &qword_2568F1FD0, MEMORY[0x24BEE0670]);
}

uint64_t sub_238329C9C()
{
  return sub_23829B310(&qword_2568F2008, &qword_2568F1FE8, MEMORY[0x24BEE4238]);
}

ValueMetadata *type metadata accessor for _UnsafeBitSet()
{
  return &type metadata for _UnsafeBitSet;
}

uint64_t getEnumTagSinglePayload for _UnsafeBitSet.Iterator(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _UnsafeBitSet.Iterator(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitSet.Iterator()
{
  return &type metadata for _UnsafeBitSet.Iterator;
}

_QWORD *sub_238329D34(uint64_t isStackAllocationSafe, _BYTE *a2, _QWORD *(*a3)(char *__return_ptr, _BYTE **))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *result;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE v11[7];
  char v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (isStackAllocationSafe < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000) >> 61)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  if (8 * isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v13 = &v11[-v7];
    v14 = v4;
    if (!v4)
      goto LABEL_8;
    if (v4 >= 1)
    {
      bzero(&v11[-v7], 8 * v4);
LABEL_8:
      result = a3(&v12, &v13);
      if (v3)
        return (_QWORD *)swift_willThrow();
      *a2 = v12;
      return result;
    }
    goto LABEL_19;
  }
  v9 = (_BYTE *)swift_slowAlloc();
  v10 = v9;
  v13 = v9;
  v14 = v4;
  if (v4)
  {
    if (v4 < 1)
      goto LABEL_20;
    bzero(v9, 8 * v4);
  }
  a3(&v12, &v13);
  if (!v3)
    *a2 = v12;
  return (_QWORD *)MEMORY[0x23B831718](v10, -1, -1);
}

_QWORD *sub_238329EC8(uint64_t a1, _BYTE *a2, _QWORD *(*a3)(char *__return_ptr, _BYTE **))
{
  return sub_238329D34(a1, a2, a3);
}

_QWORD *sub_238329EE0(uint64_t a1, _BYTE *a2, _QWORD *(*a3)(char *__return_ptr, _BYTE **))
{
  return sub_238329EC8(a1, a2, a3);
}

uint64_t _HashNode.removing(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(uint64_t, char *, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t TupleTypeMetadata2;
  uint64_t v92;
  char *v93;
  uint64_t v94;

  v93 = (char *)a4;
  v94 = a5;
  v92 = a9;
  v15 = type metadata accessor for _HashNode.Builder(0, a6, a7, a8);
  v86 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v85 = (uint64_t)&v69 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v87 = v15;
  v17 = swift_getTupleTypeMetadata2();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v80 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v84 = (char *)&v69 - v21;
  v88 = sub_23835B334();
  v90 = *(_QWORD *)(v88 - 8);
  v22 = MEMORY[0x24BDAC7A8](v88);
  v82 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v89 = (char *)&v69 - v24;
  v25 = a1;
  v26 = a1;
  v83 = (char *)a2;
  v27 = a3;
  v28 = a3;
  v29 = (uint64_t)v93;
  v30 = _HashNode.find(_:_:_:)(v26, a2, v28, (uint64_t)v93, v94, a6, a7, a8);
  if (v30 == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v92, 1, 1, v17);
  v32 = v30;
  v81 = v18;
  if ((v30 & 1) != 0)
  {
    v78 = (v27 >> v25) & 0x1F;
    v79 = HIDWORD(v30);
    v34 = nullsub_1(v29 + 16, v29 + 32, a6, a7, a8);
    v35 = v32 & 0xFFFFFFFF00000000 | 1;
    v36 = v89;
    sub_23832C0E4(v34, v37, v35, v25, (uint64_t)v83, v27, a6, a7, a8);
    v38 = v82;
    v39 = v88;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v82, v36, v88);
    v40 = v81;
    v41 = a6;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v38, 1, v17) == 1)
    {
      v42 = *(void (**)(char *, uint64_t))(v90 + 8);
      v42(v89, v39);
      v42(v38, v39);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v92, 1, 1, v17);
    }
    else
    {
      v43 = *(int *)(TupleTypeMetadata2 + 48);
      v44 = v84;
      v83 = &v84[v43];
      v45 = *(int *)(v17 + 48);
      v76 = &v84[v45];
      v72 = (uint64_t)&v38[v45];
      v74 = &v38[v43];
      v73 = a8;
      v46 = *(_QWORD *)(v41 - 8);
      v75 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
      v75(v84, v38, v41);
      v47 = v17;
      v77 = v17;
      v71 = *(_QWORD *)(a7 - 8);
      v82 = *(char **)(v71 + 32);
      v48 = (uint64_t)v83;
      ((void (*)(char *, char *, uint64_t))v82)(v83, v74, a7);
      v74 = *(char **)(v86 + 32);
      v49 = v86;
      v50 = v76;
      v51 = v72;
      v72 = v25;
      v52 = v87;
      ((void (*)(char *, uint64_t, uint64_t))v74)(v76, v51, v87);
      v53 = v80;
      v70 = &v80[*(int *)(v47 + 48)];
      v54 = &v80[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v80, v44, v41);
      v55 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v54, v48, a7);
      v56 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v57 = (uint64_t)v70;
      v56(v70, v50, v52);
      _HashNode.replacingChild(_:at:_:with:)(v72, v78, v79, v57, (uint64_t)v93, v94, v41, a7, v85, v73);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v88);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, a7);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v41);
      v58 = *(int *)(v77 + 48);
      v59 = TupleTypeMetadata2;
      v60 = v92;
      v61 = &v53[v58];
      v93 = &v53[v58];
      v94 = v92 + v58;
      v62 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
      v63 = (void (*)(uint64_t, char *, uint64_t))v75;
      v75(v53, v84, v41);
      v64 = v82;
      ((void (*)(char *, char *, uint64_t))v82)(v62, v83, a7);
      v65 = v52;
      v66 = v74;
      ((void (*)(char *, char *, uint64_t))v74)(v61, v76, v65);
      v67 = v60 + *(int *)(v59 + 48);
      v63(v60, v53, v41);
      ((void (*)(uint64_t, char *, uint64_t))v64)(v67, v62, a7);
      v68 = v87;
      ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v94, v85, v87);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v60, 0, 1, v77);
      return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v93, v68);
    }
  }
  else
  {
    v33 = v92;
    _HashNode._removingItemFromLeaf(_:at:_:)(v92, v92 + *(int *)(TupleTypeMetadata2 + 48), v92 + *(int *)(v17 + 48), v25, (v27 >> v25) & 0x1F, SHIDWORD(v30), v29, v94, a6, a7, a8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v33, 0, 1, v17);
  }
}

uint64_t _HashNode.remove(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  void (*v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  Swift::Bool v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD, _QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v53;
  char *v54;
  uint64_t (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(uint64_t, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, char *, uint64_t);
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  void (*v96)(uint64_t, char *, uint64_t);
  void (*v97)(uint64_t, char *, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  void (*v128)(void);
  char *v129;
  char *v130;
  void (*v131)(char *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t (*v146)(char *, char *, uint64_t);
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(void);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(_QWORD, _QWORD, _QWORD);
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;

  v160 = a3;
  v161 = a5;
  v156 = (char *)a2;
  v162 = (char *)a1;
  v8 = a4[2];
  v7 = a4[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = (void (*)(_QWORD, _QWORD, _QWORD))a4[4];
  v155 = v8;
  v157 = v7;
  v159 = v10;
  v145 = type metadata accessor for _HashNode.Builder(255, v8, v7, (uint64_t)v10);
  v11 = swift_getTupleTypeMetadata2();
  v12 = sub_23835B334();
  v147 = *(char **)(v12 - 8);
  v148 = (char *)v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v150 = (uint64_t)&v134 - v14;
  v151 = v11;
  v149 = *(char **)(v11 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v141 = (char *)&v134 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v146 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v134 - v17);
  v18 = sub_23835B334();
  v153 = swift_getTupleTypeMetadata2();
  v19 = MEMORY[0x24BDAC7A8](v153);
  v139 = (char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v138 = (char *)&v134 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v152 = (void (*)(void))((char *)&v134 - v24);
  v142 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v140 = (uint64_t)&v134 - v25;
  v154 = TupleTypeMetadata2;
  v26 = swift_getTupleTypeMetadata2();
  v158 = *(_QWORD *)(v26 - 8);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v134 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v134 - v30;
  v163 = v32;
  v33 = sub_23835B334();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v134 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v134 - v38;
  v144 = a4;
  v40 = _HashNode.isUnique()();
  v42 = *v5;
  v41 = v5[1];
  v143 = v5;
  if (v40)
  {
    v149 = v37;
    v136 = v39;
    v137 = v34;
    v150 = v33;
    v135 = v31;
    v43 = (uint64_t)v152;
    v44 = v153;
    v148 = v29;
    v151 = v18;
    v45 = (int)v162;
    v46 = v155;
    v47 = (uint64_t)v156;
    v48 = v159;
    v49 = v160;
    v50 = v157;
    v51 = _HashNode.find(_:_:_:)((uint64_t)v162, (uint64_t)v156, v160, v42, v41, v155, v157, (uint64_t)v159);
    if (v51 == 2)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56))(v161, 1, 1, v163);
    }
    else
    {
      v60 = v51;
      if ((v51 & 1) != 0)
      {
        v153 = HIDWORD(v51);
        v101 = nullsub_1(v42 + 16, v42 + 32, v46, v50, v48);
        v102 = v136;
        sub_23832BEB8(v101, v103, v60 & 0xFFFFFFFF00000000 | 1, v45, v47, v49, v46, v50, (uint64_t)v48);
        v104 = v137;
        v106 = v149;
        v105 = v150;
        (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v149, v102, v150);
        v107 = v158;
        v108 = v163;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v106, 1, v163) == 1)
        {
          v109 = *(void (**)(char *, uint64_t))(v104 + 8);
          v109(v102, v105);
          v109(v106, v105);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v161, 1, 1, v108);
        }
        else
        {
          v110 = *(int *)(v154 + 48);
          v111 = v106;
          v112 = &v135[v110];
          v147 = &v135[v110];
          v113 = *(int *)(v108 + 48);
          v156 = &v135[v113];
          v114 = v46;
          v115 = &v111[v113];
          v116 = v45;
          v117 = &v111[v110];
          v152 = *(void (**)(void))(*(_QWORD *)(v46 - 8) + 32);
          v152();
          v149 = *(char **)(*(_QWORD *)(v50 - 8) + 32);
          ((void (*)(char *, char *, uint64_t))v149)(v112, v117, v50);
          v146 = *(uint64_t (**)(char *, char *, uint64_t))(v142 + 32);
          v118 = (uint64_t)v156;
          v119 = v151;
          v120 = v146(v156, v115, v151);
          MEMORY[0x24BDAC7A8](v120);
          *(&v134 - 6) = v46;
          *(&v134 - 5) = v50;
          v121 = v160;
          *(&v134 - 4) = (uint64_t)v159;
          *(&v134 - 3) = v121;
          LOBYTE(v133) = v116;
          _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)(v116, (uint64_t (*)(uint64_t))sub_2382B8CF4, (int *)&v134 - 16, v153, v118, v144, v140);
          (*(void (**)(char *, uint64_t))(v137 + 8))(v136, v105);
          v122 = *(int *)(v108 + 48);
          v123 = v161;
          v162 = (char *)(v161 + v122);
          v124 = v148;
          v125 = &v148[v122];
          v160 = (unint64_t)&v148[v122];
          v126 = v154;
          v127 = &v148[*(int *)(v154 + 48)];
          v128 = v152;
          ((void (*)(char *, char *, uint64_t))v152)(v148, v135, v114);
          v129 = v149;
          ((void (*)(char *, char *, uint64_t))v149)(v127, v147, v50);
          v130 = v125;
          v131 = (void (*)(char *, uint64_t, uint64_t))v146;
          v146(v130, v156, v119);
          v132 = v123 + *(int *)(v126 + 48);
          ((void (*)(uint64_t, char *, uint64_t))v128)(v123, v124, v114);
          ((void (*)(uint64_t, char *, uint64_t))v129)(v132, v127, v50);
          v131(v162, v140, v119);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v158 + 56))(v123, 0, 1, v163);
          return (*(uint64_t (**)(unint64_t, uint64_t))(v142 + 8))(v160, v119);
        }
      }
      else
      {
        v61 = v154;
        v160 = v43 + *(int *)(v154 + 48);
        v156 = (char *)(v43 + *(int *)(v44 + 48));
        MEMORY[0x24BDAC7A8](v51);
        *(&v134 - 4) = v46;
        *(&v134 - 3) = v50;
        _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(v43, v62, v45, v63, v64, (void (*)(unint64_t))sub_23829949C, (uint64_t)(&v134 - 6), v144, v61);
        v65 = v161;
        v159 = (void (*)(_QWORD, _QWORD, _QWORD))(v161 + *(int *)(v163 + 48));
        v66 = v138;
        v162 = &v138[*(int *)(v44 + 48)];
        v67 = (uint64_t)v162;
        v68 = &v138[*(int *)(v61 + 48)];
        v69 = *(_QWORD *)(v46 - 8);
        v70 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
        v150 = v69;
        v70(v138, v43, v46);
        v71 = *(_QWORD *)(v50 - 8);
        v72 = v68;
        (*(void (**)(char *, unint64_t, uint64_t))(v71 + 16))(v68, v160, v50);
        (*(void (**)(uint64_t, char *, uint64_t))(v142 + 16))(v67, v156, v151);
        v73 = v65 + *(int *)(v61 + 48);
        v74 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
        v75 = v65;
        v76 = v46;
        v74(v75, v66, v46);
        v77 = *(void (**)(uint64_t, char *, uint64_t))(v71 + 32);
        v77(v73, v72, v50);
        v78 = v139;
        v79 = &v139[*(int *)(v153 + 48)];
        v80 = &v139[*(int *)(v61 + 48)];
        v74((uint64_t)v139, (char *)v152, v46);
        v77((uint64_t)v80, (char *)v160, v50);
        v81 = v142;
        v82 = *(void (**)(char *, char *, uint64_t))(v142 + 32);
        v83 = v151;
        v82(v79, v156, v151);
        v82((char *)v159, v79, v83);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v158 + 56))(v161, 0, 1, v163);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v80, v50);
        (*(void (**)(char *, uint64_t))(v150 + 8))(v78, v76);
        return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v162, v83);
      }
    }
  }
  else
  {
    v54 = v147;
    v53 = v148;
    v55 = v146;
    v56 = v150;
    v57 = v155;
    v58 = v157;
    _HashNode.removing(_:_:_:)((uint64_t)v162, (uint64_t)v156, v160, v42, v41, v155, v157, (uint64_t)v159, v150);
    v59 = v151;
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v149 + 6))(v56, 1, v151) == 1)
    {
      (*((void (**)(uint64_t, char *))v54 + 1))(v56, v53);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56))(v161, 1, 1, v163);
    }
    else
    {
      v84 = *(int *)(v154 + 48);
      v85 = (char *)v55 + v84;
      v156 = (char *)v55 + v84;
      v86 = *(int *)(v59 + 48);
      v87 = (uint64_t)v55 + v86;
      v88 = v56 + v86;
      v89 = v56 + v84;
      v159 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v57 - 8) + 32);
      v159(v55, v56, v57);
      v153 = *(_QWORD *)(*(_QWORD *)(v58 - 8) + 32);
      ((void (*)(char *, uint64_t, uint64_t))v153)(v85, v89, v58);
      v160 = *(_QWORD *)(v145 - 8);
      v152 = *(void (**)(void))(v160 + 32);
      v149 = (char *)v87;
      ((void (*)(uint64_t, uint64_t))v152)(v87, v88);
      v90 = v161;
      _HashNode.applyReplacement(_:_:)((int)v162, v87, v144, (char *)(v161 + *(int *)(v163 + 48)));
      v91 = *(int *)(v59 + 48);
      v92 = v141;
      v93 = &v141[v91];
      v162 = &v141[v91];
      v94 = v154;
      v95 = &v141[*(int *)(v154 + 48)];
      v96 = (void (*)(uint64_t, char *, uint64_t))v159;
      v159(v141, v55, v57);
      v97 = (void (*)(uint64_t, char *, uint64_t))v153;
      ((void (*)(char *, char *, uint64_t))v153)(v95, v156, v58);
      v98 = v93;
      v99 = v145;
      ((void (*)(char *, char *, uint64_t))v152)(v98, v149, v145);
      v100 = v90 + *(int *)(v94 + 48);
      v96(v90, v92, v57);
      v97(v100, v95, v58);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v158 + 56))(v90, 0, 1, v163);
      return (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v162, v99);
    }
  }
}

uint64_t _HashNode.remove(_:at:)(char *a1, char *a2, char *a3, uint64_t a4, char *a5, uint64_t a6, Swift::Int a7, _QWORD *a8)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  Swift::UInt v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  char *v46;
  Swift::Int v47;
  void (*v48)(char *, uint64_t, uint64_t);
  _QWORD *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t, uint64_t);
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t);
  void (*v88)(char *, Swift::Int, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  Swift::Int v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;

  v109 = a5;
  v110 = a7;
  v105 = (char *)a6;
  v111 = a4;
  v112 = a3;
  v113 = a1;
  v114 = a2;
  v11 = a8[2];
  v10 = a8[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = a8[4];
  v106 = v11;
  v107 = v13;
  v108 = v10;
  v104 = type metadata accessor for _HashNode.Builder(255, v11, v10, v13);
  v102 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](v102);
  v103 = (uint64_t *)((char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v101 = (char *)&v95 - v16;
  v17 = sub_23835B334();
  v100 = (char *)swift_getTupleTypeMetadata2();
  v18 = MEMORY[0x24BDAC7A8](v100);
  v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v95 - v21;
  v23 = swift_getTupleTypeMetadata2();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v95 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v95 - v30;
  if (_HashNode.isUnique()())
  {
    v96 = v29;
    v97 = v31;
    v98 = v22;
    v99 = v23;
    v101 = v20;
    v102 = (uint64_t)v26;
    v32 = v110;
    v33 = v111;
    v34 = v106;
    v103 = a8;
    v104 = v17;
    v36 = v107;
    v35 = v108;
    v37 = TupleTypeMetadata2;
    if (BYTE4(v110) == v111)
    {
      v38 = (_DWORD *)nullsub_1(*v8 + 16, *v8 + 32, v106, v108, v107);
      v39 = _HashNode.UnsafeHandle.itemBucket(at:)(v32, v38);
      v40 = (uint64_t)v97;
      v109 = &v97[*(int *)(TupleTypeMetadata2 + 48)];
      v41 = v99;
      v105 = &v97[*(int *)(v99 + 48)];
      MEMORY[0x24BDAC7A8](v39);
      v91 = v34;
      v92 = v35;
      _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(v40, v42, v33, v43, v32, (void (*)(unint64_t))sub_23829949C, (uint64_t)(&v95 - 6), v103, v37);
      v44 = v96;
      v45 = (uint64_t)&v96[*(int *)(v41 + 48)];
      v46 = &v96[*(int *)(v37 + 48)];
      v47 = *(_QWORD *)(v34 - 8);
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
      v110 = v47;
      v111 = v45;
      v48(v96, v40, v34);
      v49 = *(_QWORD **)(v35 - 8);
      v50 = (void (*)(char *, char *, uint64_t))v49[2];
      v103 = v49;
      v50(v46, v109, v35);
      v51 = v104;
      v107 = *(_QWORD *)(v104 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v107 + 16))(v45, v105, v104);
      v52 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 32);
      v52((uint64_t)v113, v44, v34);
      v53 = (void (*)(uint64_t, char *, uint64_t))v49[4];
      v53((uint64_t)v114, v46, v35);
      v54 = v102;
      v55 = v102 + *(int *)(v99 + 48);
      v56 = v102 + *(int *)(v37 + 48);
      v52(v102, (char *)v40, v34);
      v53(v56, v109, v35);
      v57 = v107;
      v58 = *(void (**)(uint64_t, char *, uint64_t))(v107 + 32);
      v58(v55, v105, v51);
      v58((uint64_t)v112, (char *)v55, v51);
      ((void (*)(uint64_t, uint64_t))v103[1])(v56, v35);
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v54, v34);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v111, v51);
    }
    else
    {
      v73 = TupleTypeMetadata2;
      v74 = v109;
      v75 = ((unint64_t)v109 >> v111) & 0x1F;
      v76 = nullsub_1(*v8 + 16, *v8 + 32, v106, v108, v107);
      v77 = (uint64_t)v98;
      sub_23832C3D0(v76, v78, v75, v33, (uint64_t)v74, (uint64_t)v105, v32 & 0x1FFFFFFFFFFLL, v34, (uint64_t)v98, v35, v36);
      v79 = v73;
      v110 = v77 + *(int *)(v73 + 48);
      v80 = (uint64_t)v100;
      v81 = v77 + *((int *)v100 + 12);
      v82 = MEMORY[0x24BDAC7A8](v33);
      v91 = v34;
      v92 = v35;
      v93 = v36;
      LODWORD(v94) = v75;
      _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)(v82, (uint64_t (*)(uint64_t))sub_23832D49C, (int *)&v95 - 12, v75, v81, v103, (uint64_t)v112);
      v83 = *(int *)(v80 + 48);
      v84 = (uint64_t)v101;
      v85 = &v101[v83];
      v86 = &v101[*(int *)(v79 + 48)];
      v87 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
      v87(v101, v77, v34);
      v88 = *(void (**)(char *, Swift::Int, uint64_t))(*(_QWORD *)(v35 - 8) + 32);
      v88(v86, v110, v35);
      v89 = v104;
      v90 = *(_QWORD *)(v104 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v85, v81, v104);
      v87(v113, v84, v34);
      v88(v114, (Swift::Int)v86, v35);
      return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v85, v89);
    }
  }
  else
  {
    v61 = (uint64_t)v101;
    v60 = v102;
    v100 = &v101[*(int *)(TupleTypeMetadata2 + 48)];
    v62 = (uint64_t)&v101[*(int *)(v102 + 48)];
    v63 = v108;
    v64 = v106;
    v65 = v111;
    _HashNode.removing(_:at:)((uint64_t)v101, (uint64_t)v100, v62, v111, v109, (uint64_t)v105, v110 & 0x1FFFFFFFFFFLL, *v8, v8[1], v106, v108, v107);
    _HashNode.applyReplacement(_:_:)(v65, v62, a8, v112);
    v66 = v103;
    v67 = (char *)v103 + *(int *)(v60 + 48);
    v68 = (char *)v103 + *(int *)(TupleTypeMetadata2 + 48);
    v69 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 32);
    v69((char *)v103, v61, v64);
    v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32);
    v70(v68, v100, v63);
    v71 = v104;
    v72 = *(_QWORD *)(v104 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v67, v62, v104);
    v69(v113, (uint64_t)v66, v64);
    v70(v114, v68, v63);
    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v67, v71);
  }
}

uint64_t _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(uint64_t a1, uint64_t a2, int a3, char a4, unsigned int a5, void (*a6)(unint64_t), uint64_t a7, _QWORD *a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a3;
  v41 = a2;
  v38 = a1;
  v16 = a8[2];
  v15 = a8[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v39 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v40 = TupleTypeMetadata2;
  v18 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v35 = (uint64_t)&v34 - v19;
  v37 = *(_QWORD *)(a9 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  _HashNode.removeItem<A>(at:_:by:)(a4, a5, a6, a7, a8);
  v22 = *v9;
  v23 = v9[1];
  v24 = a8[4];
  if ((_HashNode.isAtrophied.getter(*v9, v23, v16, v15, v24) & 1) != 0)
  {
    v25 = _HashNode.removeSingletonChild()(a8);
    v23 = v26;
    swift_release();
    *v9 = v25;
    v9[1] = v23;
    v22 = v25;
  }
  if ((_HashNode.hasSingletonItem.getter(v22, v23, v16, v15, v24) & 1) == 0)
    goto LABEL_8;
  if (!(_BYTE)v36)
  {
    if (_HashNode.isCollisionNode.getter(v22, v23, v16, v15, v24))
      _HashNode._convertToRegularNode()();
LABEL_8:
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v38, v21, a9);
    v32 = 1;
    v27 = v40;
    v30 = v41;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v30, v32, 1, v27);
  }
  v27 = v40;
  v28 = v35;
  v29 = v35 + *(int *)(v40 + 48);
  _HashNode.removeSingletonItem()(v35, v29, a8);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v38, v21, a9);
  v30 = v41;
  v31 = v41 + *(int *)(v27 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v41, v28, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v31, v29, v15);
  v32 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v30, v32, 1, v27);
}

uint64_t _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)@<X0>(int a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, int *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t (*v73)(uint64_t);
  int8x8_t v74;
  uint8x8_t v75;
  uint64_t v76;
  uint64_t *v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  _QWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  int *v108;
  uint64_t (*v109)(uint64_t);
  void (*v110)(char *, char *, uint64_t);
  void (*v111)(void);
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v8 = v7;
  LODWORD(v103) = a4;
  v108 = a3;
  v109 = a2;
  LODWORD(v110) = a1;
  v10 = a6[2];
  v11 = a6[3];
  v114 = a7;
  v115 = v10;
  v116 = v11;
  v117 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_23835B334();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v96 - v16;
  v18 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v107 = (char *)v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v105 = (char *)v96 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v106 = (char *)v96 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v113 = (char *)v96 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v104 = (char *)v96 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v112 = (char *)v96 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v102 = (char *)v96 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v96 - v33;
  v35 = v8[1];
  v8[1] = v35 - 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v117, v13);
  v117 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    if ((_HashNode.isAtrophied.getter(*v8, v8[1], v115, v116, a6[4]) & 1) != 0)
    {
      v36 = v8;
      v37 = _HashNode.removeSingletonChild()(a6);
      v39 = v38;
      swift_release();
      *v36 = v37;
      v36[1] = v39;
    }
    v40 = 1;
    v41 = v114;
    v42 = v117;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v40, 1, TupleTypeMetadata2);
  }
  v100 = TupleTypeMetadata2;
  v101 = v34;
  v43 = *(int *)(TupleTypeMetadata2 + 48);
  v44 = &v34[v43];
  v45 = &v17[v43];
  v46 = v115;
  v98 = *(_QWORD *)(v115 - 8);
  v111 = *(void (**)(void))(v98 + 32);
  ((void (*)(char *, char *, uint64_t))v111)(v34, v17, v115);
  v47 = v116;
  v97 = *(_QWORD *)(v116 - 8);
  v48 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
  v99 = (uint64_t)v44;
  v48(v44, v45, v116);
  v49 = v8;
  v50 = *v8;
  v51 = a6;
  v52 = a6[4];
  v53 = v46;
  if ((_HashNode.hasSingletonChild.getter(v50, v35 - 1, v46, v47, v52) & 1) != 0 && (_BYTE)v110)
  {
    v54 = v52;
    v42 = v117;
    if (qword_2568F09D0 != -1)
      swift_once();
    v55 = v53;
    v56 = _HashNode.init(storage:count:)(_emptySingleton, 0, v53, v47, v54);
    v58 = v57;
    swift_retain();
    swift_release();
    *v49 = v56;
    v49[1] = v58;
    TupleTypeMetadata2 = v100;
    v41 = v114;
    v59 = (char *)(v114 + *(int *)(v100 + 48));
    ((void (*)(uint64_t, char *, uint64_t))v111)(v114, v101, v55);
    v48(v59, (char *)v99, v47);
    v40 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v40, 1, TupleTypeMetadata2);
  }
  v110 = v48;
  v60 = v49;
  v49[1] = v35 - 2;
  v61 = nullsub_1(v50 + 16, v50 + 32, v46, v47, v52);
  result = v109(v61);
  v63 = *(_QWORD *)(v117 + 72);
  v64 = __OFSUB__(v63, 16);
  v65 = v63 - 16;
  if (!v64)
  {
    v66 = result;
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(1, v65 & ~(v65 >> 63));
    _HashNode.removeChild(at:_:)(v66, v103, v51);
    swift_release();
    v67 = v52;
    v96[1] = v52;
    v68 = v100;
    v69 = v102;
    v70 = &v102[*(int *)(v100 + 48)];
    v103 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
    v103(v102, v101, v46);
    v98 = *(_QWORD *)(v97 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v98)(v70, v99, v47);
    v71 = v112;
    v72 = &v112[*(int *)(v68 + 48)];
    ((void (*)(char *, char *, uint64_t))v111)(v112, v69, v53);
    v110(v72, v70, v47);
    v108 = (int *)nullsub_1(*v60 + 16, *v60 + 32, v53, v47, v67);
    v109 = v73;
    v74.i32[0] = *v108 & ~(-1 << v66);
    v75 = (uint8x8_t)vcnt_s8(v74);
    v75.i16[0] = vaddlv_u8(v75);
    LODWORD(v102) = v75.i32[0];
    v76 = *(int *)(v68 + 48);
    v99 = v66;
    v77 = v60;
    v78 = v103;
    v79 = &v104[v76];
    v103(v104, v71, v53);
    v80 = (void (*)(char *, char *, uint64_t))v98;
    ((void (*)(char *, char *, uint64_t))v98)(v79, v72, v47);
    v81 = &v113[*(int *)(v68 + 48)];
    v82 = v47;
    v83 = v113;
    v111();
    v84 = v79;
    v42 = v117;
    v110(v81, v84, v82);
    ++v77[1];
    v85 = v106;
    v86 = &v106[*(int *)(v68 + 48)];
    v78(v106, v83, v53);
    v87 = v78;
    v88 = v81;
    v89 = v80;
    v80(v86, v88, v82);
    v109 = (uint64_t (*)(uint64_t))_HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(v102, v99, v108, (uint64_t)v109);
    v90 = v105;
    v91 = &v105[*(int *)(v68 + 48)];
    v87(v105, v85, v53);
    v89(v91, v86, v82);
    v92 = (uint64_t)v107;
    v93 = &v107[*(int *)(v68 + 48)];
    ((void (*)(char *, char *, uint64_t))v111)(v107, v90, v53);
    v94 = v93;
    TupleTypeMetadata2 = v68;
    v110(v94, v91, v82);
    sub_2382F7024(v92, (uint64_t)v109, v68);
    v95 = *(void (**)(char *, uint64_t))(v42 + 8);
    v95(v113, v68);
    v95(v85, v68);
    v95(v112, v68);
    v95(v101, v68);
    v40 = 1;
    v41 = v114;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v40, 1, TupleTypeMetadata2);
  }
  __break(1u);
  return result;
}

uint64_t _HashNode._removingChild(_:at:_:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int *v18;
  uint64_t v19;

  v18 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a8);
  return sub_23832D0F4(v18, v19, a2, a3, a1, a4, a5, a6, a9, a7, a8);
}

uint64_t sub_23832BEB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;

  v13 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(HIDWORD(a3), a1, a2);
  v14 = type metadata accessor for _HashNode(0, a7, a8, a9);
  return _HashNode.remove(_:_:_:)(v13, a5, a6, v14);
}

uint64_t _HashNode._removingItemFromLeaf(_:at:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int32 *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a8;
  v26 = a1;
  HIDWORD(v24) = a5;
  v27 = a2;
  v28 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = type metadata accessor for _HashNode.Builder(255, a9, a10, a11);
  v16 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - v17;
  v19 = (__int32 *)nullsub_1(a7 + 16, a7 + 32, a9, a10, a11);
  sub_23832C8F8(v19, v20, a6, a4, a7, v25, SHIDWORD(v24), a9, (uint64_t)v18, a10, a11);
  v21 = &v18[*(int *)(v16 + 48)];
  v22 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a9 - 8) + 32))(v26, v18, a9);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(v27, v22, a10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v28, v21, v15);
}

uint64_t sub_23832C0E4(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(HIDWORD(a3), a1, a2, a7, a8, a9);
  v16 = *v14;
  v15 = v14[1];
  swift_retain();
  _HashNode.removing(_:_:_:)((a4 + 5), a5, a6, v16, v15, a7, a8, a9);
  return swift_release();
}

uint64_t _HashNode.removing(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, Swift::Int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _DWORD *v21;
  int v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v32 = a5;
  v33 = a6;
  v36 = a2;
  v37 = a3;
  v34 = a9;
  v35 = a1;
  v15 = BYTE4(a7);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = type metadata accessor for _HashNode.Builder(255, a10, a11, a12);
  v31 = TupleTypeMetadata2;
  v18 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v29 - v19;
  if (v15 == a4)
  {
    v21 = (_DWORD *)nullsub_1(a8 + 16, a8 + 32, a10, a11, a12);
    v22 = _HashNode.UnsafeHandle.itemBucket(at:)(a7, v21);
    return _HashNode._removingItemFromLeaf(_:at:_:)(v35, v36, v37, a4, v22, a7, a8, v34, a10, a11, a12);
  }
  else
  {
    v24 = v32;
    v30 = ((unint64_t)v32 >> a4) & 0x1F;
    v25 = nullsub_1(a8 + 16, a8 + 32, a10, a11, a12);
    sub_23832C4EC(v25, v26, v30, a4, v24, v33, a7 & 0x1FFFFFFFFFFLL, a8, (uint64_t)v20, v34, a10, a11, a12);
    v27 = &v20[*(int *)(v18 + 48)];
    v28 = &v20[*(int *)(v31 + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(v35, v20, a10);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a11 - 8) + 32))(v36, v28, a11);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v37, v27, v17);
  }
}

uint64_t sub_23832C3D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_23835B334();
  v17 = a9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v18 = a9 + *(int *)(TupleTypeMetadata2 + 48);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  v19 = type metadata accessor for _HashNode(0, a8, a10, a11);
  return _HashNode.remove(_:at:)(a9, v18, v17, (a4 + 5), a5, a6, a7 & 0x1FFFFFFFFFFLL, v19);
}

Swift::UInt sub_23832C4EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  void (*v57)(char *, char *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  Swift::UInt value;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  Swift::UInt_optional v78;

  v73 = a8;
  v64 = a7;
  v65 = a6;
  v67 = a5;
  v77 = a4;
  v63 = a2;
  v70 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v69 = type metadata accessor for _HashNode.Builder(255, a11, a12, a13);
  v16 = swift_getTupleTypeMetadata2();
  v71 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v72 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v66 = (char *)&v53 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v53 - v21;
  v78 = UInt32._bit(ranked:)(a3);
  value = v78.value;
  if (v78.is_nil)
  {
    __break(1u);
  }
  else
  {
    v62 = a10;
    v58 = TupleTypeMetadata2;
    v23 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
    v24 = *(int *)(v16 + 48);
    v75 = v22;
    v25 = &v22[v24];
    v76 = v25;
    v26 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, v63, a11, a12, a13);
    v27 = v16;
    v59 = v16;
    v29 = *v26;
    v28 = v26[1];
    v61 = a13;
    v74 = a11;
    v30 = (v77 + 5);
    LODWORD(v63) = a3;
    v31 = v64 & 0x1FFFFFFFFFFLL;
    swift_retain();
    v52 = v28;
    v32 = v75;
    v33 = v23;
    v56 = v23;
    _HashNode.removing(_:at:)(v75, v23, v25, v30, v67, v65, v31, v29, v52, a11, a12, a13);
    swift_release();
    v34 = *(int *)(v27 + 48);
    v35 = v58;
    v36 = v70;
    v64 = v70 + v34;
    v37 = v66;
    v38 = &v66[v34];
    v67 = &v66[v34];
    v39 = &v66[*(int *)(v58 + 48)];
    v40 = *(_QWORD *)(v74 - 8);
    v57 = *(void (**)(char *, char *))(v40 + 16);
    v60 = v40;
    v57(v66, v32);
    v53 = *(_QWORD *)(a12 - 8);
    v55 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v55(v39, v33, a12);
    v41 = v69;
    v65 = *(_QWORD *)(v69 - 8);
    v54 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
    v54(v38, v76, v69);
    v42 = v36 + *(int *)(v35 + 48);
    v43 = v36;
    v44 = v74;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v43, v37, v74);
    v45 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v42, v39, a12);
    v46 = v59;
    v47 = v72;
    v48 = (uint64_t)&v72[*(int *)(v59 + 48)];
    v49 = &v72[*(int *)(v35 + 48)];
    v50 = v75;
    ((void (*)(char *, char *, uint64_t))v57)(v72, v75, v44);
    v55(v49, v56, a12);
    v54((char *)v48, v76, v41);
    _HashNode.replacingChild(_:at:_:with:)(v77, value, v63, v48, v73, v62, v44, a12, v64, v61);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v46);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v49, a12);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v44);
    v78.value = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v67, v41);
  }
  return v78.value;
}

Swift::Void __swiftcall _HashNode._convertToRegularNode()()
{
  _QWORD *v0;
  _QWORD *v1;
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)nullsub_1(*v1 + 16, *v1 + 32, v0[2], v0[3], v0[4]);
  *v2 = 1 << *v3;
  v2[1] = 0;
  v2[3] += 8;
}

uint64_t sub_23832C8F8@<X0>(__int32 *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  _BYTE *v23;
  __int32 v24;
  __int32 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  void (*v40)(uint64_t, _BYTE *, uint64_t);
  void (*v41)(uint64_t, _BYTE *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  int8x8_t v46;
  unsigned int v47;
  uint8x8_t v48;
  BOOL v49;
  BOOL v50;
  int v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void (*v69)(uint64_t, _BYTE *, uint64_t);
  void (*v70)(uint64_t, _BYTE *, uint64_t);
  uint64_t v71;
  char *v72;
  _BYTE *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[4];
  unsigned int v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v111 = a6;
  v112 = a2;
  v119 = a4;
  LODWORD(v113) = a3;
  v114 = a9;
  v115 = type metadata accessor for _HashNode.Builder.Kind(0, a8, a10, a11);
  MEMORY[0x24BDAC7A8](v115);
  v116 = (uint64_t *)&v105[-v15];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v18 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  result = MEMORY[0x24BDAC7A8](v18);
  v23 = &v105[-v20];
  v24 = *a1;
  v25 = a1[1];
  if ((v25 & *a1) == 0)
  {
    LODWORD(v109) = a7;
    v22.i32[0] = v24;
    v46 = vcnt_s8(v22);
    v46.i16[0] = vaddlv_u8((uint8x8_t)v46);
    v47 = v46.i32[0];
    if (!v24
      || ((v46.i32[0] = v25, v48 = (uint8x8_t)vcnt_s8(v46), v48.i16[0] = vaddlv_u8(v48), v47 <= 1)
        ? (v49 = v25 == 0)
        : (v49 = 1),
          !v49 ? (v50 = v48.i32[0] > 1u) : (v50 = 1),
          v50))
    {
      if (v47 == 2 && v25 == 0)
      {
        v111 = v21;
        v109 = &v105[-v20];
        v52 = v24 - 1;
        v53 = v113;
        if (v24)
          v54 = (_DWORD)v113 == 1;
        else
          v54 = 1;
        if (v54)
          v52 = -1;
        v55 = v52 & v24;
        if (!v55)
        {
          __break(1u);
          return result;
        }
        v106 = 1 - v113;
        LODWORD(v108) = __clz(__rbit32(v55));
        type metadata accessor for _HashNode.Builder(255, a8, a10, a11);
        v56 = swift_getTupleTypeMetadata2();
        v57 = v114;
        v107 = (_BYTE *)(v114 + *(int *)(v56 + 48));
        v58 = v112;
        v110 = a11;
        v59 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v53, a1, v112, a8, a10, a11);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v57, v59, TupleTypeMetadata2);
        v60 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v106, a1, v58, a8, a10, a11);
        v61 = *(int *)(TupleTypeMetadata2 + 48);
        v62 = v109;
        v63 = &v109[v61];
        v64 = v60 + v61;
        v65 = *(_QWORD *)(a8 - 8);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16))(v109, v60, a8);
        v66 = *(_QWORD *)(a10 - 8);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v66 + 16))(v63, v64, a10);
        v67 = v111;
        v68 = (_BYTE *)(v111 + *(int *)(TupleTypeMetadata2 + 48));
        v69 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v65 + 32);
        v69(v111, v62, a8);
        v70 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v66 + 32);
        v70((uint64_t)v68, v63, a10);
        v42 = *(int *)(swift_getTupleTypeMetadata2() + 48);
        v71 = *(int *)(TupleTypeMetadata2 + 48);
        v44 = v116;
        v72 = (char *)v116 + v71;
        v69((uint64_t)v116, (_BYTE *)v67, a8);
        v70((uint64_t)v72, v68, a10);
        goto LABEL_26;
      }
    }
    else
    {
      v87 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, v112, a8, a10, a11);
      v89 = *v87;
      v88 = v87[1];
      v90 = *v87;
      v108 = v88;
      if (_HashNode.isCollisionNode.getter(v90, v88, a8, a10, a11))
      {
        v91 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
        v110 = a11;
        v92 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, v112, a8, a10, a11);
        v93 = v92 + *(int *)(TupleTypeMetadata2 + 48);
        v113 = *(_QWORD *)(a8 - 8);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v113 + 16))(v23, v92, a8);
        v94 = *(_QWORD *)(a10 - 8);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 16))(v91, v93, a10);
        type metadata accessor for _HashNode.Builder(255, a8, a10, a11);
        v95 = (_BYTE *)(v114 + *(int *)(swift_getTupleTypeMetadata2() + 48));
        v96 = v114 + *(int *)(TupleTypeMetadata2 + 48);
        (*(void (**)(void))(v113 + 32))();
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v94 + 32))(v96, v91, a10);
        v97 = (uint64_t)v116;
        v98 = v108;
        *v116 = v89;
        *(_QWORD *)(v97 + 8) = v98;
        swift_storeEnumTagMultiPayload();
        _HashNode.Builder.init(_:_:)(v119, v97, a8, a10, v110, v95);
        return swift_retain();
      }
    }
    v99 = sub_2382838F8();
    v117 = _HashNode.copy(withFreeSpace:)(v99, a5, v111, a8, a10, a11);
    v118 = v100;
    v101 = (uint64_t)&v23[*(int *)(TupleTypeMetadata2 + 48)];
    v102 = (_QWORD *)type metadata accessor for _HashNode(0, a8, a10, a11);
    _HashNode.removeItem(at:_:)((uint64_t)v23, v101, (char)v109, v113, v102);
    type metadata accessor for _HashNode.Builder(255, a8, a10, a11);
    v83 = (_BYTE *)(v114 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    v103 = v114 + *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(void))(*(_QWORD *)(a8 - 8) + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(v103, v101, a10);
    v104 = v118;
    v86 = v116;
    *v116 = v117;
    v86[1] = v104;
LABEL_31:
    swift_storeEnumTagMultiPayload();
    v73 = v83;
    v74 = v119;
    v75 = (uint64_t)v86;
    v76 = a8;
    v77 = a10;
    v78 = a11;
    return _HashNode.Builder.init(_:_:)(v74, v75, v76, v77, v78, v73);
  }
  if (v24 != 2)
  {
    v79 = sub_2382838F8();
    v117 = _HashNode.copy(withFreeSpace:)(v79, a5, v111, a8, a10, a11);
    v118 = v80;
    v81 = (uint64_t)&v23[*(int *)(TupleTypeMetadata2 + 48)];
    v82 = (_QWORD *)type metadata accessor for _HashNode(0, a8, a10, a11);
    _HashNode.removeItem(at:_:)((uint64_t)v23, v81, a7, v113, v82);
    type metadata accessor for _HashNode.Builder(255, a8, a10, a11);
    v83 = (_BYTE *)(v114 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    v84 = v114 + *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(void))(*(_QWORD *)(a8 - 8) + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(v84, v81, a10);
    v85 = v118;
    v86 = v116;
    *v116 = v117;
    v86[1] = v85;
    goto LABEL_31;
  }
  v26 = v113;
  v106 = 1 - v113;
  v109 = &v105[-v20];
  v27 = v112;
  LODWORD(v108) = (*v112 >> v119) & 0x1F;
  v111 = v21;
  type metadata accessor for _HashNode.Builder(255, a8, a10, a11);
  v28 = swift_getTupleTypeMetadata2();
  v29 = v114;
  v107 = (_BYTE *)(v114 + *(int *)(v28 + 48));
  v110 = a11;
  v30 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v26, a1, v27, a8, a10, a11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v29, v30, TupleTypeMetadata2);
  v31 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v106, a1, v27, a8, a10, a11);
  v32 = *(int *)(TupleTypeMetadata2 + 48);
  v33 = v109;
  v34 = &v109[v32];
  v35 = v31 + v32;
  v36 = *(_QWORD *)(a8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v36 + 16))(v109, v31, a8);
  v37 = *(_QWORD *)(a10 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v37 + 16))(v34, v35, a10);
  v38 = v111;
  v39 = (_BYTE *)(v111 + *(int *)(TupleTypeMetadata2 + 48));
  v40 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v36 + 32);
  v40(v111, v33, a8);
  v41 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v37 + 32);
  v41((uint64_t)v39, v34, a10);
  v42 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v43 = *(int *)(TupleTypeMetadata2 + 48);
  v44 = v116;
  v45 = (char *)v116 + v43;
  v40((uint64_t)v116, (_BYTE *)v38, a8);
  v41((uint64_t)v45, v39, a10);
LABEL_26:
  *((_BYTE *)v44 + v42) = v108;
  swift_storeEnumTagMultiPayload();
  v73 = v107;
  v74 = v119;
  v75 = (uint64_t)v44;
  v76 = a8;
  v77 = a10;
  v78 = v110;
  return _HashNode.Builder.init(_:_:)(v74, v75, v76, v77, v78, v73);
}

uint64_t sub_23832D0F4@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  int8x8_t v29;
  uint8x8_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v39 = a6;
  v40 = a7;
  v45 = a5;
  LODWORD(v42) = a4;
  LODWORD(v41) = a3;
  v48 = a2;
  v44 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - v17;
  v43 = type metadata accessor for _HashNode.Builder.Kind(0, a8, a10, a11);
  MEMORY[0x24BDAC7A8](v43);
  v20 = (uint64_t *)((char *)&v39 - v19);
  v21 = *a1;
  if (!*a1)
  {
    v29 = (int8x8_t)a1[1];
    if (v29.i32[0])
    {
      v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.i32[0] == 2)
      {
        v31 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor((1 - v42), a1, v48, a8, a10, a11);
        v32 = *v31;
        v33 = v31[1];
        if (_HashNode.isCollisionNode.getter(*v31, v33, a8, a10, a11))
        {
          *v20 = v32;
          v20[1] = v33;
          swift_storeEnumTagMultiPayload();
          _HashNode.Builder.init(_:_:)(v45, (uint64_t)v20, a8, a10, a11, v44);
          return swift_retain();
        }
      }
    }
    goto LABEL_9;
  }
  if ((v21 & (v21 - 1)) != 0
    || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)a1[1]), v22.i16[0] = vaddlv_u8(v22), v22.i32[0] != 1))
  {
LABEL_9:
    if (!_HashNode.UnsafeHandle.hasSingletonChild.getter(a1))
    {
      v35 = sub_2382838F8();
      v46 = _HashNode.copy(withFreeSpace:)(v35, v39, v40, a8, a10, a11);
      v47 = v36;
      v37 = (_QWORD *)type metadata accessor for _HashNode(0, a8, a10, a11);
      _HashNode.removeChild(at:_:)(v41, v42, v37);
      swift_release();
      v38 = v47;
      *v20 = v46;
      v20[1] = v38;
    }
    goto LABEL_11;
  }
  v23 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, v48, a8, a10, a11);
  v24 = *(int *)(TupleTypeMetadata2 + 48);
  v25 = &v18[v24];
  v48 = v23 + v24;
  v42 = *(_QWORD *)(a8 - 8);
  (*(void (**)(char *))(v42 + 16))(v18);
  v41 = *(_QWORD *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v25, v48, a10);
  LODWORD(v48) = __clz(__rbit32(v21));
  v26 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  v42 = *(_QWORD *)(v42 + 32);
  ((void (*)(char *, char *, uint64_t))v42)(v16, v18, a8);
  v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v27(v26, v25, a10);
  v41 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v28 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
  ((void (*)(uint64_t *, char *, uint64_t))v42)(v20, v16, a8);
  v27(v28, v26, a10);
  *((_BYTE *)v20 + v41) = v48;
LABEL_11:
  swift_storeEnumTagMultiPayload();
  return _HashNode.Builder.init(_:_:)(v45, (uint64_t)v20, a8, a10, a11, v44);
}

Swift::UInt sub_23832D49C()
{
  uint64_t v0;
  Swift::UInt_optional v2;

  v2 = UInt32._bit(ranked:)(*(unsigned int *)(v0 + 40));
  if (v2.is_nil)
    __break(1u);
  return v2.value;
}

uint64_t (*sub_23832D4C4())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  _QWORD *v0;
  uint64_t (*result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  if (*v0)
    return nullsub_1;
  __break(1u);
  return result;
}

uint64_t sub_23832D4E0(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  BigString.UTF16View.makeIterator()(&v17);
  result = sub_23825B804(v3);
  v14 = v19;
  v15 = v20;
  v16 = v21;
  v12 = v17;
  v13 = v18;
  if (!a2)
  {
    a3 = 0;
    v10 = v20;
    a1[2] = v19;
    a1[3] = v10;
    a1[4] = v21;
    v11 = v18;
    *a1 = v17;
    a1[1] = v11;
    return a3;
  }
  if (!a3)
  {
LABEL_9:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *(Swift::UInt16_optional *)&v8 = BigString.UTF16View.Iterator.next()();
    for (i = 0; (v8 & 0x10000) == 0; ++i)
    {
      *(_WORD *)(a2 + 2 * i) = v8;
      if (a3 - 1 == i)
        goto LABEL_9;
      *(Swift::UInt16_optional *)&v8 = BigString.UTF16View.Iterator.next()();
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return i;
  }
  __break(1u);
  return result;
}

uint64_t sub_23832D5E0(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  BigString.UnicodeScalarView.makeIterator()(&v17);
  result = sub_23825B804(v3);
  v14 = v19;
  v15 = v20;
  v16 = v21;
  v12 = v17;
  v13 = v18;
  if (!a2)
  {
    a3 = 0;
    v10 = v20;
    a1[2] = v19;
    a1[3] = v10;
    a1[4] = v21;
    v11 = v18;
    *a1 = v17;
    a1[1] = v11;
    return a3;
  }
  if (!a3)
  {
LABEL_9:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    BigString.UnicodeScalarView.Iterator.next()();
    for (i = 0; (v8 & 0x100000000) == 0; ++i)
    {
      *(_DWORD *)(a2 + 4 * i) = v8;
      if (a3 - 1 == i)
        goto LABEL_9;
      BigString.UnicodeScalarView.Iterator.next()();
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v16;
    return i;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23832D6E0(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if (!a3)
    goto LABEL_7;
  if (a3 < 0)
  {
    __break(1u);
  }
  else if ((a5 & 0x8000000000000000) == 0)
  {
    v5 = a5;
    if (!a5)
    {
LABEL_9:
      *result = a4;
      result[1] = a5;
      result[2] = v5;
      return (_QWORD *)v5;
    }
    *a2 = *(_BYTE *)(a4 + 32) & 1;
    if (a3 != 1)
    {
      v5 = a5;
      if (a5 == 1)
        goto LABEL_9;
      v6 = 0;
      while (1)
      {
        v7 = v6 + 1;
        a2[v6 + 1] = (*(_QWORD *)(a4 + 32 + (((unint64_t)(v6 + 1) >> 3) & 0xFFFFFFFFFFFFF8)) >> (v6 + 1)) & 1;
        if (a3 - 2 == v6)
          break;
        ++v6;
        if (a5 - 1 == v7)
        {
          v5 = a5;
          goto LABEL_9;
        }
      }
    }
LABEL_7:
    v5 = a3;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23832D784(_QWORD *result, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = (unint64_t *)(a4 + 32);
  if (!*(_QWORD *)(a4 + 16))
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_21:
    v6 = 0;
    a3 = 0;
    goto LABEL_25;
  }
  v5 = *v4;
  if (!a2)
    goto LABEL_21;
LABEL_3:
  if (!a3)
  {
    v6 = 0;
    goto LABEL_25;
  }
  if (a3 < 0)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v6 = 0;
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      if (v6 << 6 < 0)
        goto LABEL_28;
      v9 = __rbit64(v5);
      v5 &= v5 - 1;
      v8 = (v6 << 6) | __clz(v9);
      goto LABEL_9;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_29;
    v11 = *(_QWORD *)(a4 + 16);
    if (v10 >= v11)
      break;
    v12 = v4[v10];
    if (!v12)
    {
      while (1)
      {
        v6 = v10 + 1;
        if (__OFADD__(v10, 1))
          break;
        if (v6 >= v11)
        {
          v5 = 0;
          v6 = v11 - 1;
          goto LABEL_23;
        }
        v12 = v4[v6];
        ++v10;
        if (v12)
          goto LABEL_7;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    ++v6;
LABEL_7:
    if (v6 << 6 < 0)
      goto LABEL_30;
    v5 = (v12 - 1) & v12;
    v8 = __clz(__rbit64(v12)) + (v6 << 6);
LABEL_9:
    ++v7;
    *a2++ = v8;
    if (v7 == a3)
      goto LABEL_25;
  }
  v5 = 0;
LABEL_23:
  a3 = v7;
LABEL_25:
  *result = a4;
  result[1] = v6;
  result[2] = v5;
  return (_QWORD *)a3;
}

unint64_t **sub_23832D890(unint64_t **result, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a5 >= 1)
  {
    v5 = *a4;
    if (a2)
      goto LABEL_3;
LABEL_21:
    v6 = 0;
    a3 = 0;
LABEL_24:
    *result = a4;
    result[1] = (unint64_t *)a5;
    result[2] = (unint64_t *)v6;
    result[3] = (unint64_t *)v5;
    return (unint64_t **)a3;
  }
  v5 = 0;
  if (!a2)
    goto LABEL_21;
LABEL_3:
  if (!a3)
  {
    v6 = 0;
    goto LABEL_24;
  }
  if (a3 < 0)
    goto LABEL_30;
  v6 = 0;
  v7 = 0;
  while (v5)
  {
    if (v6 << 6 < 0)
      goto LABEL_27;
    v9 = __rbit64(v5);
    v5 &= v5 - 1;
    v8 = (v6 << 6) | __clz(v9);
LABEL_9:
    ++v7;
    *a2++ = v8;
    if (v7 == a3)
      goto LABEL_24;
  }
  v10 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_28;
  if (v10 >= a5)
  {
    v5 = 0;
    a3 = v7;
    goto LABEL_24;
  }
  v11 = a4[v10];
  if (v11)
  {
    ++v6;
LABEL_7:
    if (v6 << 6 < 0)
      goto LABEL_29;
    v5 = (v11 - 1) & v11;
    v8 = __clz(__rbit64(v11)) + (v6 << 6);
    goto LABEL_9;
  }
  while (1)
  {
    v6 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v6 >= a5)
    {
      v5 = 0;
      v6 = a5 - 1;
      a3 = v7;
      goto LABEL_24;
    }
    v11 = a4[v6];
    ++v10;
    if (v11)
      goto LABEL_7;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

unsigned int *sub_23832D998(unsigned int *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;

  if (!a2)
  {
LABEL_7:
    v5 = 0;
    a3 = 0;
LABEL_16:
    *result = a4;
    result[1] = v5;
    return (unsigned int *)a3;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      v4 = __clz(__rbit32(a4));
      a4 &= a4 - 1;
      *(_BYTE *)a2 = v4;
      *(_DWORD *)(a2 + 4) = 0;
      if (a3 == 1)
      {
        v5 = 1;
      }
      else if (a4)
      {
        v6 = 0;
        v7 = (_DWORD *)(a2 + 12);
        while (1)
        {
          v8 = v6;
          v9 = __clz(__rbit32(a4));
          a4 &= a4 - 1;
          *((_BYTE *)v7 - 4) = v9;
          *v7 = v6 + 1;
          if (a3 - 2 == v6)
            break;
          ++v6;
          v7 += 2;
          if (!a4)
          {
            a3 = v8 + 2;
            break;
          }
        }
        v5 = v8 + 2;
      }
      else
      {
        v5 = 1;
        a3 = 1;
      }
      goto LABEL_16;
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t *sub_23832DA4C(unint64_t *result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *result = a4;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      v4 = __clz(__rbit64(a4));
      a4 &= a4 - 1;
      *a2 = v4;
      if (a3 != 1)
      {
        if (a4)
        {
          v5 = 0;
          while (1)
          {
            v6 = __clz(__rbit64(a4));
            a4 &= a4 - 1;
            a2[v5 + 1] = v6;
            if (a3 - 2 == v5)
              break;
            ++v5;
            if (!a4)
            {
              a3 = v5 + 1;
              goto LABEL_12;
            }
          }
        }
        else
        {
          a3 = 1;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_23832DAD0(uint64_t (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[32];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v4 = v2;
  v112 = a2;
  v5 = *v2;
  v55 = *(_OWORD *)(v2 + 1);
  v52 = *(_OWORD *)(v2 + 3);
  v7 = v2[5];
  v6 = v2[6];
  v8 = v4[7];
  v9 = v4[8];
  v10 = v4[9];
  v54 = v4[10];
  v59 = *(_OWORD *)(v4 + 11);
  v58 = v4[13];
  *(_QWORD *)v71 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x23B831730](v71, 8);
  v77 = 0u;
  v78 = 0u;
  v79 = 0;
  v80 = *(_QWORD *)v71;
  v45 = *(_QWORD *)v71;
  v81 = 768;
  v82 = 0;
  v84 = xmmword_23835C2C0;
  v83 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  v108 = v5;
  v109 = v55;
  v110 = v52;
  v111 = v7;
  sub_23830F5CC(&v108, v6, v8, v9, v10, v88);
  v56 = v88[0];
  v11 = v89;
  v12 = v90;
  v51 = v92;
  v53 = v88[1];
  v13 = v91;
  v14 = v93;
  v15 = v94;
  v16 = v95;
  swift_unknownObjectRelease();
  *(_OWORD *)&v71[8] = v59;
  *(_QWORD *)v71 = v54;
  *(_QWORD *)&v71[24] = v58;
  v72 = v56;
  v73 = v53;
  *(_QWORD *)&v74 = v11;
  *((_QWORD *)&v74 + 1) = v12;
  *(_OWORD *)&v75[8] = v51;
  *(_QWORD *)v75 = v13;
  *(_QWORD *)&v75[24] = v14;
  *(_QWORD *)&v76 = v15;
  v17 = v13 + (v15 >> 16);
  *((_QWORD *)&v76 + 1) = v16;
  if (__OFADD__(v13, v15 >> 16))
  {
LABEL_23:
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v53 = 0;
    v49 = 0;
    *(_QWORD *)&v51 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v18 = v54 >> 11;
    v54 = 768;
    *(_QWORD *)&v56 = 0;
    v16 = 1;
    v46 = 1;
    v47 = 0;
    v58 = 768;
    *(_QWORD *)&v59 = 0;
    while (v17 < v18 && (*((_QWORD *)&v76 + 1) ^ v15) >= 0x4000)
    {
      v100 = v72;
      v101 = v73;
      v102 = v74;
      v104 = *(_OWORD *)&v75[8];
      v103 = v13;
      v105 = *(_QWORD *)&v75[24];
      v106 = v15;
      v107 = *((_QWORD *)&v76 + 1);
      sub_23830EA80();
      v20 = v19;
      v22 = v21;
      if ((sub_23830F018(v19, v21) & 1) == 0)
        *(_QWORD *)&v76 = *((_QWORD *)&v76 + 1);
      v62[0] = v20;
      v62[1] = v22;
      result = a1(v62);
      if (v3)
      {
        swift_bridgeObjectRelease();
        v67 = v74;
        v68 = *(_OWORD *)v75;
        v69 = *(_OWORD *)&v75[16];
        v70 = v76;
        v63 = *(_OWORD *)v71;
        v64 = *(_OWORD *)&v71[16];
        v65 = v72;
        v66 = v73;
        sub_23827BB08((uint64_t)&v63);
        return swift_unknownObjectRelease();
      }
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v13 = *(_QWORD *)v75;
        v15 = v76;
        v17 = *(_QWORD *)v75 + ((unint64_t)v76 >> 16);
        if (__OFADD__(*(_QWORD *)v75, (unint64_t)v76 >> 16))
          goto LABEL_23;
      }
      else
      {
        if (v54 >> 10 < v58 >> 10)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        v24 = v56;
        if (!(_QWORD)v59)
          v24 = 0;
        v60 = v24;
        swift_bridgeObjectRetain();
        v57 = sub_23835AF80();
        v48 = v26;
        v50 = v25;
        v28 = v27;
        swift_bridgeObjectRelease();
        _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v57, v50, v48, v28, v54, v51, v53, v16);
        result = v77;
        if ((_QWORD)v77)
          v29 = v79;
        else
          v29 = 0;
        v30 = v29 - v60;
        if (__OFSUB__(v29, v60))
          goto LABEL_27;
        v43 = *((_QWORD *)&v77 + 1);
        v96 = v77;
        v42 = *((_QWORD *)&v78 + 1);
        v44 = v78;
        v97 = v78;
        *(_QWORD *)&v56 = v79;
        v98 = v79;
        v45 = v80;
        v99 = v80;
        *(_QWORD *)&v59 = swift_unknownObjectRetain();
        v31 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v58 & 0xFFFFFFFFFFFFF800, 0, 0, 1);
        v47 = v32;
        v49 = v33;
        v46 = v34;
        result = swift_unknownObjectRelease();
        if (__OFADD__(v30, v54 >> 11))
          goto LABEL_28;
        swift_unknownObjectRetain();
        v35 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0((v30 + (v54 >> 11)) << 11, 0, 0, 1);
        v37 = v36;
        v39 = v38;
        v41 = v40;
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease();
        if (v35 >> 10 < v31 >> 10)
          goto LABEL_29;
        v58 = v31;
        v81 = v31;
        v82 = v47;
        v83 = v49;
        *(_QWORD *)&v84 = v46;
        *((_QWORD *)&v84 + 1) = v35;
        *(_QWORD *)&v51 = v37;
        v85 = v37;
        *(_QWORD *)&v53 = v39;
        v86 = v39;
        v87 = v41;
        v13 = *(_QWORD *)v75;
        v15 = v76;
        v17 = *(_QWORD *)v75 + ((unint64_t)v76 >> 16);
        v54 = v35;
        v16 = v41;
        if (__OFADD__(*(_QWORD *)v75, (unint64_t)v76 >> 16))
          goto LABEL_23;
      }
    }
  }
  swift_unknownObjectRelease();
  v67 = v74;
  v68 = *(_OWORD *)v75;
  v69 = *(_OWORD *)&v75[16];
  v70 = v76;
  v63 = *(_OWORD *)v71;
  v64 = *(_OWORD *)&v71[16];
  v65 = v72;
  v66 = v73;
  result = sub_23827BB08((uint64_t)&v63);
  *v4 = v59;
  v4[1] = v43;
  v4[2] = v44;
  v4[3] = v42;
  v4[4] = v56;
  v4[5] = v45;
  v4[6] = v58;
  v4[7] = v47;
  v4[8] = v49;
  v4[9] = v46;
  v4[10] = v54;
  v4[11] = v51;
  v4[12] = v53;
  v4[13] = v16;
  return result;
}

uint64_t sub_23832E004(uint64_t (*a1)(_QWORD *))
{
  __n128 *v1;
  uint64_t v2;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD v30[2];
  __n128 v31[5];
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  unint64_t v43;
  unint64_t v44;
  __n128 v45[3];
  _OWORD v46[3];
  _BYTE v47[48];
  _QWORD *v48;

  v4 = v1[1];
  v45[0] = *v1;
  v45[1] = v4;
  v6 = *v1;
  v5 = v1[1];
  v45[2] = v1[2];
  v46[0] = v6;
  v31[0].n128_u64[0] = 0;
  v7 = v1[2];
  v46[1] = v5;
  v46[2] = v7;
  sub_238263E74((uint64_t)v46, (uint64_t)v47);
  sub_238263DDC((uint64_t)v47);
  MEMORY[0x23B831730](v31, 8);
  v8 = v31[0].n128_u64[0];
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v37 = v31[0].n128_u64[0];
  sub_23830F850(v45, v31);
  v9 = v32;
  v10 = v33;
  if ((v33 ^ v32) >= 0x4000)
  {
    while (1)
    {
      v38 = v31[0];
      v39 = v31[1];
      v40 = v31[2];
      v41 = v31[3];
      v42 = v31[4];
      v43 = v9;
      v44 = v10;
      sub_23830EA80();
      v24 = v23;
      v26 = v25;
      if ((sub_23830F018(v23, v25) & 1) == 0)
        v32 = v33;
      v30[0] = v24;
      v30[1] = v26;
      v27 = a1(v30);
      if (v2)
        break;
      if ((v27 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = sub_23835AF80();
        v18 = v17;
        v20 = v19;
        v22 = v21;
        swift_bridgeObjectRelease();
        _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v16, v18, v20, v22);
      }
      v9 = v32;
      v10 = v33;
      if ((v33 ^ v32) < 0x4000)
      {
        v14 = *((_QWORD *)&v34 + 1);
        v15 = v34;
        v12 = *((_QWORD *)&v35 + 1);
        v13 = v35;
        v11 = v36;
        v8 = v37;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
LABEL_11:
    sub_23825B804((uint64_t)v45);
    result = swift_unknownObjectRelease();
    v29 = v48;
    *v48 = v15;
    v29[1] = v14;
    v29[2] = v13;
    v29[3] = v12;
    v29[4] = v11;
    v29[5] = v8;
  }
  return result;
}

uint64_t sub_23832E20C(uint64_t (*a1)(int *))
{
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD v47[6];
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v3 = v1;
  v4 = *v1;
  v6 = v1[2];
  v5 = v1[3];
  v34 = v6;
  v35 = v1[1];
  v7 = v1[4];
  v8 = v1[5];
  v32 = v7;
  v33 = v5;
  v31 = v8;
  v39 = v1[7];
  v41 = v1[6];
  v36 = v1[9];
  v37 = v1[8];
  v68 = v1[10];
  v44 = v1[12];
  v45 = v1[11];
  v43 = v1[13];
  v47[0] = 0;
  swift_unknownObjectRetain();
  MEMORY[0x23B831730](v47, 8);
  v56 = 0u;
  v57 = 0u;
  *(_QWORD *)&v58 = 0;
  *((_QWORD *)&v58 + 1) = v47[0];
  *(_QWORD *)&v60[0] = 0;
  v59 = 0x300uLL;
  *(_OWORD *)((char *)v60 + 8) = xmmword_23835C2C0;
  *((_QWORD *)&v60[1] + 1) = 0;
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = 1;
  v62 = v4;
  v63 = v35;
  v64 = v6;
  v65 = v5;
  v66 = v7;
  v67 = v8;
  swift_unknownObjectRetain_n();
  v9 = sub_2382644F4(v41, v39, v37, v36);
  v40 = v11;
  v42 = v10;
  v38 = v12;
  swift_unknownObjectRetain();
  v13 = sub_238264714(v68, v45, v44, v43, 1);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_unknownObjectRelease_n();
  v47[0] = v4;
  v47[1] = v35;
  v47[2] = v34;
  v47[3] = v33;
  v47[4] = v32;
  v47[5] = v31;
  v48 = v9;
  v49 = v42;
  v50 = v40;
  v51 = v38;
  v52 = v13;
  v53 = v15;
  v54 = v17;
  v55 = v19;
  while (v13 >> 10 > v48 >> 10)
  {
    BigString.UnicodeScalarView.Iterator.next()();
    if ((v20 & 0x100000000) != 0)
      break;
    v21 = v20;
    v46 = v20;
    v22 = a1(&v46);
    if (v2)
    {
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    if ((v22 & 1) == 0)
      BigSubstring.UnicodeScalarView.append(_:)(v21);
  }
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  v24 = v57;
  v25 = v58;
  *v3 = v56;
  v3[1] = v24;
  v26 = v59;
  v27 = v60[0];
  v3[2] = v25;
  v3[3] = v26;
  v28 = v60[1];
  v29 = v61;
  v3[4] = v27;
  v3[5] = v28;
  v3[6] = v29;
  return result;
}

uint64_t sub_23832E448(uint64_t (*a1)(unsigned int *))
{
  _OWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD v31[10];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];
  _OWORD v37[3];
  _BYTE v38[48];
  unsigned int v39;

  v3 = v1;
  v5 = v1[1];
  v36[0] = *v1;
  v36[1] = v5;
  v7 = *v1;
  v6 = v1[1];
  v36[2] = v1[2];
  v31[0] = 0;
  v37[0] = v7;
  v37[1] = v6;
  v37[2] = v1[2];
  sub_238263E74((uint64_t)v37, (uint64_t)v38);
  sub_238263DDC((uint64_t)v38);
  MEMORY[0x23B831730](v31, 8);
  v8 = v31[0];
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = v31[0];
  BigString.UnicodeScalarView.makeIterator()(v31);
  sub_23825B804((uint64_t)v36);
  BigString.UnicodeScalarView.Iterator.next()();
  if ((v9 & 0x100000000) == 0)
  {
    v10 = v9;
    while (1)
    {
      v39 = v10;
      result = a1(&v39);
      if (v2)
      {
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      if ((result & 1) == 0)
      {
        if ((v10 & 0xFFFFFF80) != 0)
        {
          v16 = (v10 & 0x3F) << 8;
          v17 = (v16 | (v10 >> 6)) + 33217;
          v18 = (v16 | (v10 >> 6) & 0x3F) << 8;
          v19 = (((v18 | (v10 >> 12) & 0x3F) << 8) | (v10 >> 18)) - 2122219023;
          v20 = (v18 | (v10 >> 12)) + 8487393;
          if (HIWORD(v10))
            v20 = v19;
          if (v10 >= 0x800)
            v17 = v20;
        }
        else
        {
          if (v10 > 0xFF)
          {
            __break(1u);
            return result;
          }
          v17 = (v10 + 1);
        }
        v30 = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v17) >> 3)) & 7)));
        MEMORY[0x23B83074C](&v30);
        v21 = sub_23835AF80();
        v23 = v22;
        v25 = v24;
        v27 = v26;
        swift_bridgeObjectRelease();
        _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v21, v23, v25, v27);
      }
      BigString.UnicodeScalarView.Iterator.next()();
      v10 = v28;
      if ((v28 & 0x100000000) != 0)
      {
        v14 = *((_QWORD *)&v32 + 1);
        v15 = v32;
        v12 = *((_QWORD *)&v33 + 1);
        v13 = v33;
        v11 = v34;
        v8 = v35;
        goto LABEL_17;
      }
    }
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
LABEL_17:
  sub_23825B804((uint64_t)v36);
  result = swift_unknownObjectRelease();
  *v3 = v15;
  v3[1] = v14;
  v3[2] = v13;
  v3[3] = v12;
  v3[4] = v11;
  v3[5] = v8;
  return result;
}

unint64_t sub_23832E6D0(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v5;

  v4 = a2 ^ a1;
  if ((a2 ^ a1) >= 0x4000)
  {
    sub_2382668C8(a1, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      v5 = sub_23835B5A4();
    }
    else
    {
      if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
        sub_23835B634();
      v5 = sub_23835B640();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v4 < 0x4000) << 32);
}

unint64_t sub_23832E7A0(unint64_t result)
{
  __int128 *v1;
  __int128 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v1[2];
      v9 = v1[1];
      v10 = v2;
      v8 = *v1;
      if ((_QWORD)v8)
        v3 = ((_QWORD)v10 << 11) | 0x300;
      else
        v3 = 768;
      result = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)(0x300uLL, 0, 0, 1, result, v3, 0, 0, 1);
      if (v6 != 2)
      {
        v7[0] = 768;
        v7[1] = 0;
        v7[2] = 0;
        v7[3] = 1;
        v7[4] = result;
        v7[5] = v4;
        v7[6] = v5;
        v7[7] = v6;
        return (unint64_t)BigString.UnicodeScalarView.removeSubrange(_:)(v7, v4, v5);
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_23832E854(unint64_t result)
{
  __int128 *v1;
  __int128 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v1[2];
      v9 = v1[1];
      v10 = v2;
      v8 = *v1;
      if ((_QWORD)v8)
        v3 = ((_QWORD)v10 << 11) | 0x300;
      else
        v3 = 768;
      result = BigString.index(_:offsetBy:limitedBy:)(0x300uLL, 0, 0, 1, result, v3, 0, 0, 1);
      if (v6 != 2)
      {
        v7[0] = 768;
        v7[1] = 0;
        v7[2] = 0;
        v7[3] = 1;
        v7[4] = result;
        v7[5] = v4;
        v7[6] = v5;
        v7[7] = v6;
        return (unint64_t)BigString.removeSubrange(_:)(v7, v4, v5);
      }
    }
    __break(1u);
  }
  return result;
}

void sub_23832E908()
{
  __int128 *v0;
  __int128 v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[8];
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = v0[2];
  v10 = v0[1];
  v11 = v1;
  v9 = *v0;
  if ((_QWORD)v9)
    v2 = (_QWORD)v11 == 0;
  else
    v2 = 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!((_QWORD)v11 << 11))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = ((_QWORD)v11 << 11) | 0x300;
  sub_23825D9F4(0x300uLL, 0, 0, 1, v8);
  if ((uint64_t)_s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(0x300uLL, 0, 0, 1, v3, 0, 0, 1) >= 1)
  {
    v4 = sub_23825C960(0x300uLL, 0, 0, 1, 1uLL);
    v8[0] = 768;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 1;
    v8[4] = v4 & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    v8[5] = v5;
    v8[6] = v6;
    v8[7] = v7;
    BigString.removeSubrange(_:)((unint64_t *)v8, v5, v6);
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_23832EA18()
{
  __int128 *v0;
  __int128 v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6[8];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = v0[2];
  v8 = v0[1];
  v9 = v1;
  v7 = *v0;
  if ((_QWORD)v7)
    v2 = ((_QWORD)v9 << 11) | 0x300;
  else
    v2 = 768;
  if (v2 < 0x400)
  {
    __break(1u);
  }
  else
  {
    sub_2383360EC(0x300uLL, 0, 0, 1);
    if ((uint64_t)sub_238278254(0x300uLL, 0, 0, 1, v2, 0, 0, 1) >= 1)
    {
      v6[0] = 768;
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = 1;
      v6[4] = sub_238278EB4(0x300uLL, 0, 0, 1, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
      v6[5] = v3;
      v6[6] = v4;
      v6[7] = v5;
      BigString.UnicodeScalarView.removeSubrange(_:)(v6, v3, v4);
      return;
    }
  }
  __break(1u);
}

void BigString.UnicodeScalarView.Iterator.next()()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[48];

  v4 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)v0)
    v5 = 2 * (v4 & 0x1FFFFFFFFFFFFFuLL) > *(_QWORD *)(v0 + 48) >> 10;
  else
    v5 = 0;
  v6 = !v5;
  if (!v5)
  {
LABEL_35:
    LOBYTE(v32) = v6;
    return;
  }
  v7 = v0;
  v8 = *(_QWORD *)(v0 + 72);
  if (v8 != 1)
  {
    if (*(_QWORD *)(v0 + 56) == *(_QWORD *)(v0 + 40))
    {
      v9 = *(_QWORD *)(v0 + 64);
      v3 = (16 * *(_QWORD *)(v0 + 48)) & 0x4000 | ((unint64_t)*(_QWORD *)(v0 + 48) << 16) | (*(_QWORD *)(v0 + 48) >> 8) & 3 | 4;
      v30 = v9;
      v31 = *(_QWORD *)(v0 + 56);
      if (v8)
      {
        v10 = v8 + 24 * ((v9 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v0 = *(_QWORD *)(v10 + 24);
        v2 = *(_QWORD *)(v10 + 32);
        v29 = *(unsigned __int8 *)(v10 + 40);
        swift_bridgeObjectRetain();
      }
      else
      {
        v11 = *(_OWORD *)(v0 + 8);
        v12 = *(_QWORD *)(v0 + 24);
        v35 = *(_QWORD *)v0;
        v36 = v11;
        v37 = v12;
        v38 = v4;
        swift_unknownObjectRetain();
        sub_238261C98(v9, (uint64_t)&v32);
        swift_unknownObjectRelease();
        v2 = *((_QWORD *)&v32 + 1);
        v0 = v32;
        v29 = v33;
      }
      sub_23826720C(v3, v0, v2);
      v1 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x1000000000000000) == 0)
      {
        v13 = v2 & 0x2000000000000000;
        if ((v2 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v32 = v0;
          *((_QWORD *)&v32 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain();
          sub_23835B640();
          swift_bridgeObjectRelease();
          v14 = sub_23826720C(v3, v0, v2) >> 16;
          *(_QWORD *)&v32 = v0;
          *((_QWORD *)&v32 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
          v16 = *((unsigned __int8 *)&v32 + v14);
        }
        else
        {
          if ((v0 & 0x1000000000000000) == 0)
            sub_23835B634();
          swift_bridgeObjectRetain();
          sub_23835B640();
          swift_bridgeObjectRelease();
          v14 = sub_23826720C(v3, v0, v2) >> 16;
          if ((v0 & 0x1000000000000000) != 0)
            v15 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          else
            v15 = sub_23835B634();
          v16 = *(unsigned __int8 *)(v15 + v14);
        }
        swift_bridgeObjectRelease();
        v17 = __clz(v16 ^ 0xFF) - 24;
        if ((v16 & 0x80u) == 0)
          v18 = 1;
        else
          v18 = v17;
        v19 = ((v14 + v18) << 16) | 5;
        v1 = HIBYTE(v2) & 0xF;
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    sub_23835B5A4();
    sub_23826720C(v3, v0, v2);
    v19 = sub_23835ADB8();
    swift_bridgeObjectRelease();
    v13 = v2 & 0x2000000000000000;
LABEL_26:
    if (v13)
      v20 = v1;
    else
      v20 = v0 & 0xFFFFFFFFFFFFLL;
    v21 = *(_QWORD *)(v7 + 48);
    if (v19 >> 14 >= 4 * v20)
    {
      v26 = *(_OWORD *)(v7 + 16);
      v32 = *(_OWORD *)v7;
      v33 = v26;
      v34 = *(_OWORD *)(v7 + 32);
      sub_238263E74((uint64_t)&v32, (uint64_t)v39);
      sub_238263DDC((uint64_t)v39);
      v24 = sub_2382A5854(v31, v30, v8);
      v25 = v27;
      v8 = v28;
      sub_23825B804((uint64_t)&v32);
      v23 = (v21 + ((v29 - (unint64_t)v21) << 11)) & 0xFFFFFFFFFFFFF800;
    }
    else
    {
      v22 = (v21 + (((v19 >> 16) - v21) << 11)) & 0xFFFFFFFFFFFFF800;
      if ((v19 & 0xC000) != 0)
        v22 |= 0x400uLL;
      v23 = v22 & 0xFFFFFFFFFFFFFF00 | BYTE2(v19);
      v25 = v30;
      v24 = v31;
    }
    *(_QWORD *)(v7 + 48) = v23;
    *(_QWORD *)(v7 + 56) = v24;
    *(_QWORD *)(v7 + 64) = v25;
    *(_QWORD *)(v7 + 72) = v8;
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t BigString.UnicodeScalarView.replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  void *Description;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  void (*v11)(char *, ValueMetadata *, __n128);
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[40];

  Description = a3[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x24BEE0AB0])
  {
    v13 = *(_QWORD *)a2;
    v14 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    v15 = sub_2382FE358(a1, v13, v14);
    (*((void (**)(uint64_t, _QWORD, __n128))Description + 1))(a2, MEMORY[0x24BEE0AB0], v15);
    return swift_bridgeObjectRelease();
  }
  if (a3 == (ValueMetadata *)MEMORY[0x24BEE1D90])
  {
    swift_bridgeObjectRetain_n();
    v16 = sub_23835B454();
    sub_2382FE768(a1, v16, v17, v18, v19);
    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, _QWORD))Description + 1))(a2, MEMORY[0x24BEE1D90]);
    return swift_bridgeObjectRelease();
  }
  if (a3 == &type metadata for BigString.UnicodeScalarView)
  {
    v20 = *(_OWORD *)(a2 + 16);
    v24 = *(__n128 *)a2;
    v25 = v20;
    v26 = *(_OWORD *)(a2 + 32);
    v27 = v24;
    v28 = v20;
    v29 = v26;
    sub_238263E74((uint64_t)&v27, (uint64_t)v31);
    sub_238263DDC((uint64_t)v31);
    sub_2382D4DE0(a1, &v24);
    sub_23825B804((uint64_t)&v24);
    return (*((uint64_t (**)(uint64_t, ValueMetadata *))Description + 1))(a2, &type metadata for BigString.UnicodeScalarView);
  }
  else if (a3 == &type metadata for BigSubstring.UnicodeScalarView)
  {
    v21 = *(_OWORD *)(a2 + 16);
    v24 = *(__n128 *)a2;
    v25 = v21;
    v22 = *(__n128 *)(a2 + 48);
    v26 = *(_OWORD *)(a2 + 32);
    v27 = v22;
    v23 = *(_OWORD *)(a2 + 80);
    v28 = *(_OWORD *)(a2 + 64);
    v29 = v23;
    v30 = *(_OWORD *)(a2 + 96);
    swift_unknownObjectRetain();
    sub_23825F734(a1, (__int128 *)&v24, v27.n128_u64);
    swift_unknownObjectRelease();
    return (*((uint64_t (**)(uint64_t, ValueMetadata *))Description + 1))(a2, &type metadata for BigSubstring.UnicodeScalarView);
  }
  else
  {
    (*((void (**)(char *, uint64_t, ValueMetadata *))Description + 2))(v8, a2, a3);
    v10 = sub_238342D50((uint64_t)v8, (uint64_t)a3, &v27);
    v11 = (void (*)(char *, ValueMetadata *, __n128))*((_QWORD *)Description + 1);
    v11(v8, a3, v10);
    sub_2382D4DE0(a1, &v27);
    sub_23825B804((uint64_t)&v27);
    return ((uint64_t (*)(uint64_t, ValueMetadata *))v11)(a2, a3);
  }
}

__n128 BigString.UnicodeScalarView.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, __n128 *a3@<X8>)
{
  void (**Description)(uint64_t, _QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, ValueMetadata *);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  void (*v20)(uint64_t, ValueMetadata *);
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __n128 result;
  __n128 v25;
  __n128 v26;
  _OWORD v27[2];
  unint64_t v28;
  unint64_t v29;
  __int128 v30[3];
  __n128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;

  Description = (void (**)(uint64_t, _QWORD))a2[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x24BEE0AB0])
  {
    v13 = *(_QWORD *)a1;
    v14 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    sub_238330138(v13, v14, &v31);
    v25 = v31;
    v26 = v32;
    v11 = *((_QWORD *)&v33 + 1);
    v10 = v33;
    Description[1](a1, MEMORY[0x24BEE0AB0]);
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x24BEE1D90])
  {
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_238330450(v15, v16, v17, v18, (uint64_t)&v31);
    v25 = v31;
    v26 = v32;
    v11 = *((_QWORD *)&v33 + 1);
    v10 = v33;
    Description[1](a1, MEMORY[0x24BEE1D90]);
  }
  else if (a2 == &type metadata for BigString.UnicodeScalarView)
  {
    v19 = *(__n128 *)(a1 + 16);
    v25 = *(__n128 *)a1;
    v26 = v19;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v20 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    swift_unknownObjectRetain();
    v20(a1, &type metadata for BigString.UnicodeScalarView);
  }
  else if (a2 == &type metadata for BigSubstring.UnicodeScalarView)
  {
    v21 = *(_OWORD *)(a1 + 16);
    v30[0] = *(_OWORD *)a1;
    v30[1] = v21;
    v22 = *(__n128 *)(a1 + 48);
    v30[2] = *(_OWORD *)(a1 + 32);
    v31 = v22;
    v23 = *(_OWORD *)(a1 + 80);
    v32 = *(__n128 *)(a1 + 64);
    v33 = v23;
    v34 = *(_OWORD *)(a1 + 96);
    swift_unknownObjectRetain();
    sub_238342810(v30, v31.n128_u64, v27);
    v25 = (__n128)v27[0];
    v26 = (__n128)v27[1];
    v10 = v28;
    v11 = v29;
    ((void (**)(uint64_t, ValueMetadata *))Description)[1](a1, &type metadata for BigSubstring.UnicodeScalarView);
  }
  else
  {
    ((void (*)(char *, uint64_t, ValueMetadata *))Description[2])(v8, a1, a2);
    sub_238342D50((uint64_t)v8, (uint64_t)a2, &v31);
    v25 = v31;
    v26 = v32;
    v11 = *((_QWORD *)&v33 + 1);
    v10 = v33;
    v12 = (void (*)(uint64_t, ValueMetadata *))Description[1];
    v12((uint64_t)v8, a2);
    v12(a1, a2);
  }
  result = v26;
  *a3 = v25;
  a3[1] = result;
  a3[2].n128_u64[0] = v10;
  a3[2].n128_u64[1] = v11;
  return result;
}

uint64_t BigString.UnicodeScalarView.startIndex.getter()
{
  return 768;
}

uint64_t BigString.UnicodeScalarView.endIndex.getter()
{
  _QWORD *v0;

  if (*v0)
    return (v0[4] << 11) | 0x300;
  else
    return 768;
}

double BigString.UnicodeScalarView.init(repeating:count:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  sub_238331410(a1, a2, v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

unint64_t BigString.UnicodeScalarView.insert(_:at:)(unsigned int a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  if (a1 > 0x7F)
  {
    v13 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v14 = (v13 | (a1 >> 6) & 0x3F) << 8;
      v15 = (((v14 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v9 = (v14 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v9 = v15;
    }
    else
    {
      v9 = (v13 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v9 = a1 + 1;
  }
  v16 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v9) >> 3))));
  v10 = MEMORY[0x23B83074C](&v16);
  return BigString.insert(contentsOf:at:)(v10, v11, a2, a3, a4, a5);
}

uint64_t BigString.UnicodeScalarView.insert<A>(contentsOf:at:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, ValueMetadata *a6)
{
  sub_23833150C(a1, a2, a3, a4, a5, a6);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a6[-1].Description + 1))(a1, a6);
}

unint64_t *BigString.UnicodeScalarView.removeSubrange(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = result[4];
  v5 = 2 * (v3[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v3)
    v5 = 0;
  if (v5 < v4 >> 10)
  {
    __break(1u);
  }
  else
  {
    v6 = *result;
    if (v4 >> 10 == *result >> 10)
      return result;
    result = (unint64_t *)(v6 >> 11);
    if (v4 >> 11 >= v6 >> 11)
      return (unint64_t *)sub_2382FEC48((uint64_t)result, v4 >> 11, a3);
  }
  __break(1u);
  return result;
}

__n128 BigString.unicodeScalars.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __n128 result;

  swift_unknownObjectRelease();
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  return result;
}

double BigString.UnicodeScalarView.init(stringLiteral:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  double result;
  __n128 v5;
  __n128 v6;
  __n128 v7[3];

  sub_238330138(a1, a2, v7);
  result = v7[0].n128_f64[0];
  v5 = v7[1];
  v6 = v7[2];
  *a3 = v7[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

double BigString.UnicodeScalarView.init(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  double result;
  __n128 v5;
  __n128 v6;
  __n128 v7[3];

  sub_238330138(a1, a2, v7);
  result = v7[0].n128_f64[0];
  v5 = v7[1];
  v6 = v7[2];
  *a3 = v7[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

double sub_23832F608@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  double result;
  __n128 v5[2];
  __int128 v6;

  sub_238330138(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v5);
  v3 = v5[1];
  *(__n128 *)a2 = v5[0];
  *(__n128 *)(a2 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t BigString.UnicodeScalarView.description.getter()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  sub_238263DDC((uint64_t)v0);
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v3);
}

uint64_t BigString.UnicodeScalarView.debugDescription.getter()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  sub_238263DDC((uint64_t)v0);
  _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v4);
  v2 = sub_23835ADAC();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static BigString.UnicodeScalarView.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  _OWORD v6[3];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = a1[2];
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return sub_23830209C(v6, v5) & 1;
}

BOOL BigString.UnicodeScalarView.isIdentical(to:)(_OWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _OWORD v8[6];

  v2 = (uint64_t)v1;
  v4 = v1[1];
  v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  v8[2] = a1[2];
  sub_238263DDC((uint64_t)v1);
  sub_238263DDC((uint64_t)a1);
  v6 = sub_238263BF8((uint64_t)v8);
  sub_23825B804((uint64_t)a1);
  sub_23825B804(v2);
  return v6;
}

uint64_t BigString.UnicodeScalarView.hash(into:)()
{
  return sub_23830922C();
}

uint64_t BigString.UnicodeScalarView.hashValue.getter()
{
  sub_23835B9E8();
  sub_23830922C();
  return sub_23835BA48();
}

void BigString.UnicodeScalarView.makeIterator()(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  if (!*v1)
    goto LABEL_8;
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (*(_WORD *)(v3 + 16))
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v27 = v1[3];
      v13 = *(unsigned __int8 *)(v3 + 18);
      if (*(_BYTE *)(v3 + 18))
      {
        swift_unknownObjectRetain_n();
        v11 = 0;
        v14 = v3;
        do
        {
          v15 = *(unsigned __int16 *)(v14 + 16);
          if (*(_WORD *)(v14 + 16))
          {
            v17 = 0;
            v18 = (uint64_t *)(v14 + 56);
            while (1)
            {
              v19 = *v18;
              v18 += 5;
              v20 = v11 - v19;
              if (__OFSUB__(v11, v19))
                break;
              if (__OFADD__(v20, 1))
                goto LABEL_39;
              if (v20 + 1 < 1)
              {
                v15 = v17;
                goto LABEL_12;
              }
              ++v17;
              v11 = v20;
              if (v15 == v17)
                goto LABEL_21;
            }
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          v20 = v11;
LABEL_21:
          if (v20)
            goto LABEL_40;
          v11 = 0;
LABEL_12:
          v16 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
          v13 = ((-15 << v16) - 1) & v13 | (v15 << v16);
          v12 = *(_QWORD *)(v14 + 24 + 40 * v15);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          v14 = v12;
        }
        while (*(_BYTE *)(v12 + 18));
        v21 = v13 & 0xFFFFFFFFFFFFF0FFLL;
        v22 = *(unsigned __int16 *)(v12 + 16);
        if (!*(_WORD *)(v12 + 16))
          goto LABEL_31;
        goto LABEL_24;
      }
      swift_unknownObjectRetain_n();
      v21 = 0;
      v11 = 0;
      v12 = v3;
      v22 = *(unsigned __int16 *)(v3 + 16);
      if (*(_WORD *)(v3 + 16))
      {
LABEL_24:
        v23 = 0;
        v24 = (unsigned __int8 *)(v12 + 40);
        while (1)
        {
          v25 = *v24;
          v24 += 24;
          v26 = v11 - v25;
          if (__OFSUB__(v11, v25))
            break;
          if (__OFADD__(v26, 1))
            goto LABEL_42;
          if (v26 + 1 < 1)
          {
            v22 = v23;
            goto LABEL_35;
          }
          ++v23;
          v11 = v26;
          if (v22 == v23)
            goto LABEL_32;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_31:
      v26 = v11;
LABEL_32:
      if (v26)
        goto LABEL_45;
      v11 = 0;
LABEL_35:
      swift_unknownObjectRelease();
      if (v11 < 0)
        goto LABEL_43;
      v10 = v21 | (v22 << 8);
      v5 = v27;
LABEL_37:
      *a1 = v3;
      a1[1] = v4;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v11 | 0x300;
      a1[7] = v7;
      a1[8] = v10;
      a1[9] = v12;
      return;
    }
LABEL_8:
    sub_238263DDC((uint64_t)v1);
    v10 = sub_238269C7C();
    LOBYTE(v11) = 0;
    v12 = 0;
    goto LABEL_37;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

__n128 sub_23832FA6C@<Q0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[5];
  _OWORD v7[3];

  v3 = v1[1];
  v7[0] = *v1;
  v7[1] = v3;
  v7[2] = v1[2];
  BigString.UnicodeScalarView.makeIterator()(v6);
  sub_23825B804((uint64_t)v7);
  v4 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v6[4];
  result = (__n128)v6[1];
  *(_OWORD *)a1 = v6[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_23832FACC()
{
  _QWORD *v0;

  if (*v0)
    return v0[2];
  else
    return 0;
}

uint64_t sub_23832FAE0()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  v2 = sub_23833AFE8(v4);
  sub_23825B804((uint64_t)v4);
  return v2;
}

uint64_t sub_23832FB28(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_23832D5E0(a1, a2, a3);
}

void sub_23832FB60(uint64_t a1@<X8>)
{
  int v2;
  char v3;

  BigString.UnicodeScalarView.Iterator.next()();
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = v3 & 1;
}

uint64_t BigString.UnicodeScalarView.count.getter()
{
  _QWORD *v0;

  if (*v0)
    return v0[2];
  else
    return 0;
}

unint64_t BigString.UnicodeScalarView.index(after:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_23832FBB0(a1, a2, a3, a4, 1uLL);
}

unint64_t BigString.UnicodeScalarView.index(before:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_23832FBB0(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t sub_23832FBB0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_238278EB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t BigString.UnicodeScalarView.index(_:offsetBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_238278EB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_238278254(a1, a2, a3, a4, a6, a7, a8, a9) <= a5)
      return sub_238278EB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_238278254(a1, a2, a3, a4, a6, a7, a8, a9) < a5)
    return 0;
  return sub_238278EB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t BigString.UnicodeScalarView.distance(from:to:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_238278254(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t BigString.UnicodeScalarView.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_2383360EC(a1, a2, a3, a4);
}

unint64_t sub_23832FDB0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_238330030(a1, 0xFFFFFFFFFFFFFFFFLL, a2);
}

unint64_t sub_23832FDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238330094(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

void (*sub_23832FDCC(_QWORD *a1, unint64_t *a2))(void **a1)
{
  _OWORD *v2;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = malloc(0x34uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v2[1];
  *v5 = *v2;
  v5[1] = v10;
  v5[2] = v2[2];
  *((_DWORD *)v5 + 12) = sub_2383360EC(v6, v7, v8, v9);
  return sub_2382A5D44;
}

__n128 sub_23832FE34@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[3];
  _BYTE v32[48];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[6];
  v29 = a1[5];
  v30 = a1[4];
  v9 = a1[7];
  v10 = v2[1];
  v31[0] = *v2;
  v11 = *v2;
  v12 = v2[2];
  v31[1] = v10;
  v31[2] = v12;
  v27 = (__n128)v2[1];
  v28 = v11;
  v13 = *((_QWORD *)v2 + 4);
  v14 = *((_QWORD *)v2 + 5);
  sub_238263E74((uint64_t)v31, (uint64_t)v32);
  sub_238263DDC((uint64_t)v32);
  v15 = sub_2382644F4(v4, v5, v6, v7);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = sub_2382644F4(v30, v29, v8, v9);
  result = v27;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v24;
  *(_QWORD *)(a2 + 96) = v25;
  *(_QWORD *)(a2 + 104) = v26;
  return result;
}

unint64_t sub_23832FF2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = sub_238278EB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_23832FF88@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

unint64_t sub_23832FFD8(uint64_t a1, uint64_t a2)
{
  return sub_238278254(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

unint64_t sub_238330028@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_238330030(a1, 1uLL, a2);
}

unint64_t sub_238330030@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = sub_238278EB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_23833008C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238330094(a1, a2, a3, 1uLL);
}

unint64_t sub_238330094(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_238278EB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  *(_QWORD *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  return result;
}

double BigString.UnicodeScalarView.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  v4 = 0;
  MEMORY[0x23B831730](&v4, 8);
  v2 = v4;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v2;
  return result;
}

__n128 sub_238330138@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 *v32;
  __n128 result;
  uint64_t v34;
  __n128 *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  char *v40;
  _OWORD v41[2];
  unint64_t v42;
  unint64_t v43;

  v35 = a3;
  v5 = _s7BuilderVMa();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)v7 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 54) = 0u;
  *((_QWORD *)v7 + 9) = 0;
  *((_QWORD *)v7 + 10) = 0;
  *(_QWORD *)(v7 + 86) = 0;
  *((_QWORD *)v7 + 12) = v8;
  sub_23835BAF0();
  v40 = v7;
  sub_23835BAF0();
  v39.n128_u64[0] = HIBYTE(a2) & 0xF;
  v38.n128_u64[0] = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v9 = HIBYTE(a2) & 0xF;
  else
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    v36 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v37 = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = 0;
    v12 = 0xE000000000000000;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        sub_23835B5A4();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v41[0] = a1;
          *((_QWORD *)&v41[0] + 1) = v37;
        }
        else if ((a1 & 0x1000000000000000) == 0)
        {
          sub_23835B634();
        }
        sub_23835B640();
      }
      v14 = v13;
      *(_QWORD *)&v41[0] = v10;
      *((_QWORD *)&v41[0] + 1) = v12;
      sub_23835ADE8();
      v12 = *((_QWORD *)&v41[0] + 1);
      v10 = *(_QWORD *)&v41[0];
      if ((*((_QWORD *)&v41[0] + 1) & 0x1000000000000000) != 0)
      {
        if (sub_23835AEA8() < 124)
          goto LABEL_6;
      }
      else if ((*((_QWORD *)&v41[0] + 1) & 0x2000000000000000) != 0
             || (*(_QWORD *)&v41[0] & 0xFFFFFFFFFFFFuLL) < 0x7C)
      {
        goto LABEL_6;
      }
      swift_bridgeObjectRetain();
      v15 = sub_23835AF80();
      v17 = v16;
      v19 = v18;
      v21 = v20;
      swift_bridgeObjectRelease();
      sub_23831B450(v15, v17, v19, v21);
      swift_bridgeObjectRelease();
      v10 = 0;
      v12 = 0xE000000000000000;
LABEL_6:
      v11 += v14;
      if (v11 >= v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRetain();
  v22 = sub_23835AF80();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  swift_bridgeObjectRelease();
  v29 = (uint64_t)v40;
  sub_23831B450(v22, v24, v26, v28);
  sub_2382B2104(v29, v29);
  sub_238265C60((uint64_t *)v41);
  v38 = (__n128)v41[1];
  v39 = (__n128)v41[0];
  v30 = v42;
  v31 = v43;
  swift_bridgeObjectRelease();
  sub_238268088(v29);
  swift_bridgeObjectRelease();
  v32 = v35;
  result = v38;
  *v35 = v39;
  v32[1] = result;
  v32[2].n128_u64[0] = v30;
  v32[2].n128_u64[1] = v31;
  return result;
}

uint64_t sub_238330450@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;

  v10 = _s7BuilderVMa();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)v12 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *((_QWORD *)v12 + 9) = 0;
  *((_QWORD *)v12 + 10) = 0;
  *(_QWORD *)(v12 + 86) = 0;
  *((_QWORD *)v12 + 12) = v13;
  sub_23835BAF0();
  v55 = v12;
  sub_23835BAF0();
  v54 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14)
  {
LABEL_42:
    swift_bridgeObjectRetain();
    v38 = sub_23835AF80();
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_bridgeObjectRelease();
    v45 = v42;
    v46 = (uint64_t)v55;
    sub_23831B450(v38, v40, v45, v44);
    sub_2382B2104(v46, v46);
    sub_238265C60((uint64_t *)v60);
    v58 = v60[1];
    v59 = v60[0];
    v47 = v61;
    v48 = v62;
    swift_bridgeObjectRelease();
    sub_238268088(v46);
    result = swift_bridgeObjectRelease();
    v49 = v58;
    *(_OWORD *)a5 = v59;
    *(_OWORD *)(a5 + 16) = v49;
    *(_QWORD *)(a5 + 32) = v47;
    *(_QWORD *)(a5 + 40) = v48;
    return result;
  }
  v56 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v57 = a4 & 0xFFFFFFFFFFFFFFLL;
  v14 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v53 = HIBYTE(a4) & 0xF;
  v51 = a5;
  v52 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a4) & 0xF;
  else
    v16 = a3 & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)&v59 = v16;
  swift_bridgeObjectRetain();
  v17 = 0;
  v18 = 0xE000000000000000;
  v19 = a1;
  v20 = v54;
  *(_QWORD *)&v58 = v15;
  while (1)
  {
    sub_2382668C8(v19, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      result = sub_23835B5A4();
    }
    else
    {
      if ((a4 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v60[0] = a3;
        *((_QWORD *)&v60[0] + 1) = v57;
      }
      else if ((a3 & 0x1000000000000000) == 0)
      {
        sub_23835B634();
      }
      result = sub_23835B640();
    }
    if ((v19 & 0xC) != v15 && (v19 & 1) != 0)
      break;
    if ((v19 & 0xC) == v15)
    {
      result = sub_2382A6050(v19, a3, a4);
      v19 = result;
    }
    if ((unint64_t)v59 <= v19 >> 16)
      goto LABEL_43;
    if ((v19 & 1) != 0)
      goto LABEL_24;
    v19 = v19 & 0xC | sub_23826674C(v19, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) != 0)
    {
LABEL_34:
      v19 = sub_23835ADB8();
      goto LABEL_35;
    }
LABEL_25:
    v22 = v19 >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v60[0] = a3;
      *((_QWORD *)&v60[0] + 1) = v57;
      v24 = *((unsigned __int8 *)v60 + v22);
    }
    else
    {
      v23 = v56;
      if ((a3 & 0x1000000000000000) == 0)
        v23 = sub_23835B634();
      v24 = *(unsigned __int8 *)(v23 + v22);
    }
    v25 = (char)v24;
    v26 = __clz(v24 ^ 0xFF) - 24;
    if (v25 >= 0)
      LOBYTE(v26) = 1;
    v19 = ((v22 + v26) << 16) | 5;
    v15 = v58;
LABEL_35:
    *(_QWORD *)&v60[0] = v17;
    *((_QWORD *)&v60[0] + 1) = v18;
    sub_23835ADE8();
    v18 = *((_QWORD *)&v60[0] + 1);
    v17 = *(_QWORD *)&v60[0];
    if ((*((_QWORD *)&v60[0] + 1) & 0x1000000000000000) != 0)
    {
      if (sub_23835AEA8() < 124)
        goto LABEL_8;
    }
    else if ((*((_QWORD *)&v60[0] + 1) & 0x2000000000000000) != 0 || (*(_QWORD *)&v60[0] & 0xFFFFFFFFFFFFuLL) < 0x7C)
    {
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    v27 = sub_23835AF80();
    v29 = v28;
    v30 = a1;
    v31 = a2;
    v33 = v32;
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = v33;
    a2 = v31;
    a1 = v30;
    v20 = v54;
    v37 = v35;
    v15 = v58;
    sub_23831B450(v27, v29, v36, v37);
    swift_bridgeObjectRelease();
    v17 = 0;
    v18 = 0xE000000000000000;
LABEL_8:
    if (v20 == v19 >> 14)
    {
      swift_bridgeObjectRelease();
      a5 = v51;
      goto LABEL_42;
    }
  }
  if ((unint64_t)v59 > v19 >> 16)
  {
LABEL_24:
    if ((a4 & 0x1000000000000000) != 0)
      goto LABEL_34;
    goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  sub_2382FE358(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  v2 = sub_23835B454();
  sub_2382FE768(a1, v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1, _OWORD *a2)
{
  __int128 v3;
  _OWORD v5[3];

  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  sub_2382D4DE0(a1, v5);
  return sub_23825B804((uint64_t)a2);
}

double BigString.UnicodeScalarView.init(_:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  double result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];

  sub_238330450(a1, a2, a3, a4, (uint64_t)v9);
  result = *(double *)v9;
  v7 = v9[1];
  v8 = v9[2];
  *a5 = v9[0];
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

__n128 BigString.UnicodeScalarView.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

double BigString.UnicodeScalarView.init(_:)@<D0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  _OWORD v11[3];
  _OWORD v12[4];
  __int128 v13[3];

  v3 = a1[1];
  v13[0] = *a1;
  v13[1] = v3;
  v4 = a1[3];
  v13[2] = a1[2];
  v5 = a1[4];
  v6 = a1[5];
  v12[0] = v4;
  v12[1] = v5;
  v7 = a1[6];
  v12[2] = v6;
  v12[3] = v7;
  sub_238342810(v13, (unint64_t *)v12, v11);
  result = *(double *)v11;
  v9 = v11[1];
  v10 = v11[2];
  *a2 = v11[0];
  a2[1] = v9;
  a2[2] = v10;
  return result;
}

__n128 BigString.UnicodeScalarView.init<A>(repeating:count:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __n128 v11;
  __int128 v12;
  __int128 v13[3];
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  sub_2383430DC(a1, a3, v13);
  sub_2382FF278(v13, a2, (uint64_t)v14);
  v11 = (__n128)v14[1];
  v12 = v14[0];
  v8 = v15;
  v9 = v16;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  result = v11;
  *(_OWORD *)a4 = v12;
  *(__n128 *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 32) = v8;
  *(_QWORD *)(a4 + 40) = v9;
  return result;
}

double BigString.UnicodeScalarView.init(repeating:count:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[3];
  __int128 v9[3];

  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v9[2] = a1[2];
  sub_2382FF278(v9, a2, (uint64_t)v8);
  result = *(double *)v8;
  v6 = v8[1];
  v7 = v8[2];
  *a3 = v8[0];
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

__n128 BigString.UnicodeScalarView.init(repeating:count:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  __int128 v15;
  __int128 v16[3];
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[4];
  __int128 v21[3];

  v6 = a1[1];
  v21[0] = *a1;
  v21[1] = v6;
  v7 = a1[3];
  v21[2] = a1[2];
  v8 = a1[4];
  v9 = a1[5];
  v20[0] = v7;
  v20[1] = v8;
  v10 = a1[6];
  v20[2] = v9;
  v20[3] = v10;
  sub_238263DDC((uint64_t)a1);
  sub_238342810(v21, (unint64_t *)v20, v16);
  sub_2382FF278(v16, a2, (uint64_t)v17);
  v14 = (__n128)v17[1];
  v15 = v17[0];
  v11 = v18;
  v12 = v19;
  sub_23825B804((uint64_t)a1);
  result = v14;
  *(_OWORD *)a3 = v15;
  *(__n128 *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 40) = v12;
  return result;
}

unint64_t BigString.UnicodeScalarView.append(_:)(unsigned int a1)
{
  unsigned int v1;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  if (a1 > 0x7F)
  {
    v3 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v4 = (v3 | (a1 >> 6) & 0x3F) << 8;
      v5 = (((v4 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v1 = (v4 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v1 = v5;
    }
    else
    {
      v1 = (v3 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v1 = a1 + 1;
  }
  v6 = (v1 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v1) >> 3))));
  MEMORY[0x23B83074C](&v6);
  return BigString.append(contentsOf:)();
}

uint64_t BigString.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2)
{
  sub_238331A54(a1, a2);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

uint64_t BigString.UnicodeScalarView.append(contentsOf:)()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  swift_bridgeObjectRetain();
  v0 = sub_23835B454();
  _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v0, v1, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.append(contentsOf:)(_QWORD *a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, uint64_t);
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[3];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = v1;
  v4 = sub_23835BAFC();
  v5 = MEMORY[0x24BDAC7A8](v4);
  result = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v27 - v9;
  v11 = *a1;
  if (*a1)
  {
    v13 = a1[1];
    v12 = a1[2];
    v15 = a1[3];
    v14 = a1[4];
    v16 = a1[5];
    v51 = *a1;
    v52 = v13;
    v53 = v12;
    v54 = v15;
    v55 = v14;
    if (!v14)
      return sub_23825B804((uint64_t)a1);
    if (*v1)
    {
      v17 = v1[4];
      if (v17)
      {
        v30 = *v1;
        v31 = v17;
        v32 = v16;
        v33 = v8;
        v34 = v7;
        v35 = result;
        v29 = v1[1];
        v28 = v1[2];
        v27 = v1[3];
        sub_238261C98(*(unsigned __int8 *)(v11 + 18), (uint64_t)&v45);
        v18 = sub_2382672A8(v45, v46);
        result = swift_bridgeObjectRelease();
        if ((v18 & 0x100000000) != 0)
        {
          __break(1u);
        }
        else
        {
          *(_QWORD *)&v39 = v11;
          *((_QWORD *)&v39 + 1) = v13;
          *(_QWORD *)&v40 = v12;
          *((_QWORD *)&v40 + 1) = v15;
          v41 = v14;
          swift_unknownObjectRetain();
          sub_23835BAF0();
          v19 = v2[5];
          v45 = v30;
          v46 = v29;
          v47 = v28;
          v48 = v27;
          v49 = v31;
          v50 = v19;
          LOBYTE(v42[0]) = 0;
          v20 = v33;
          v21 = sub_2382600B8((v31 << 11) | 0x300, 0, 0, (uint64_t *)1, v18, v33);
          v22 = *(unsigned __int8 *)(v11 + 18);
          v23 = v32;
          v38[0] = v32;
          v38[1] = v22;
          v38[2] = 0;
          MEMORY[0x24BDAC7A8](v21);
          *(&v27 - 2) = (unint64_t)v10;
          *(&v27 - 1) = v20;
          v36 = 0;
          v37 = 1;
          sub_238294E18(v42, (uint64_t)v38, &v39, (uint64_t)&v36, (void (*)(_QWORD *__return_ptr))sub_238263370, (uint64_t)(&v27 - 4));
          v42[0] = v39;
          v42[1] = v40;
          v43 = v41;
          v44 = v23 + 1;
          swift_unknownObjectRetain();
          sub_238259194((uint64_t *)v42);
          sub_23825B804((uint64_t)a1);
          v24 = *(void (**)(unint64_t, uint64_t))(v34 + 8);
          v25 = v35;
          v24(v20, v35);
          v24((unint64_t)v10, v25);
          return swift_unknownObjectRelease();
        }
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    v26 = *((_OWORD *)a1 + 1);
    *(_OWORD *)v1 = *(_OWORD *)a1;
    *((_OWORD *)v1 + 1) = v26;
    *((_OWORD *)v1 + 2) = *((_OWORD *)a1 + 2);
  }
  return result;
}

uint64_t BigString.UnicodeScalarView.append(contentsOf:)(__int128 *a1)
{
  sub_23833173C(a1);
  return sub_23825B804((uint64_t)a1);
}

uint64_t BigString.UnicodeScalarView.insert(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRetain();
  v12 = sub_23835B454();
  _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v12, v13, v14, v15, a5, a6, a7, a8);
  return swift_bridgeObjectRelease();
}

uint64_t BigString.UnicodeScalarView.insert(contentsOf:at:)(_OWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  __int128 v5;
  _OWORD v7[3];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[2] = a1[2];
  return _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(v7, a2, a3, a4, a5);
}

__n128 BigString.UnicodeScalarView.insert(contentsOf:at:)(__int128 *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[4];
  __int128 v12[3];

  v5 = a1[1];
  v12[0] = *a1;
  v12[1] = v5;
  v6 = a1[3];
  v12[2] = a1[2];
  v7 = a1[4];
  v8 = a1[5];
  v11[0] = v6;
  v11[1] = v7;
  v9 = a1[6];
  v11[2] = v8;
  v11[3] = v9;
  sub_23825FABC(v12, (unint64_t *)v11, a2, a3, a4, a5);
  return result;
}

Swift::Void __swiftcall BigString.UnicodeScalarView.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = 0;
  MEMORY[0x23B831730](&v3, 8);
  v2 = v3;
  swift_unknownObjectRelease();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v2;
}

uint64_t sub_2383311EC(_OWORD *a1, uint64_t a2, ValueMetadata *a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[4];

  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  return BigString.UnicodeScalarView.replaceSubrange<A>(_:with:)((unint64_t *)v6, a2, a3);
}

double sub_238331220@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  sub_238331410(*a1, a2, v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

double sub_238331260@<D0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  double result;
  __n128 v6[2];
  __int128 v7;

  BigString.UnicodeScalarView.init<A>(_:)(a1, a2, v6);
  v4 = v6[1];
  *(__n128 *)a3 = v6[0];
  *(__n128 *)(a3 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a3 + 32) = v7;
  return result;
}

unint64_t sub_23833129C(unsigned int *a1)
{
  return BigString.UnicodeScalarView.append(_:)(*a1);
}

uint64_t sub_2383312A4(uint64_t a1, ValueMetadata *a2)
{
  sub_238331A54(a1, a2);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

unint64_t sub_2383312E0(unsigned int *a1, uint64_t a2)
{
  return BigString.UnicodeScalarView.insert(_:at:)(*a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_2383312F4(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  sub_23833150C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
}

unint64_t sub_238331348@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result;

  result = _s19CollectionsInternal9BigStringV17UnicodeScalarViewV6remove2ats0E0O0F0VAC5IndexV_tF_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

void sub_23833137C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

void sub_23833138C(_DWORD *a1@<X8>)
{
  int v2;

  sub_23832EA18();
  *a1 = v2;
}

double sub_2383313B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  v3 = 0;
  MEMORY[0x23B831730](&v3, 8);
  v1 = v3;
  swift_unknownObjectRelease();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = v1;
  return result;
}

uint64_t sub_2383313FC(uint64_t (*a1)(unsigned int *))
{
  return sub_23832E448(a1);
}

double sub_238331410@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  __int128 v14[3];
  _OWORD v15[3];

  if (a1 > 0x7F)
  {
    v11 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v12 = (v11 | (a1 >> 6) & 0x3F) << 8;
      v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v5 = (v12 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v5 = v13;
    }
    else
    {
      v5 = (v11 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v5 = a1 + 1;
  }
  *(_QWORD *)&v15[0] = (v5 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v5) >> 3))));
  v6 = MEMORY[0x23B83074C](v15);
  sub_238264D30(v6, v7, v14);
  sub_2382FF278(v14, a2, (uint64_t)v15);
  result = *(double *)v15;
  v9 = v15[1];
  v10 = v15[2];
  *a3 = v15[0];
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

void sub_23833150C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, ValueMetadata *a6)
{
  void (**Description)(char *);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[40];

  Description = (void (**)(char *))a6[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15 == MEMORY[0x24BEE0AB0])
  {
    v18 = *(_QWORD *)v12;
    v19 = *(_QWORD *)(v12 + 8);
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v18, v19, a2, a3, a4, a5);
    return;
  }
  if (a6 == (ValueMetadata *)MEMORY[0x24BEE1D90])
  {
    swift_bridgeObjectRetain_n();
    v20 = sub_23835B454();
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(v20, v21, v22, v23, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    return;
  }
  if (a6 == &type metadata for BigString.UnicodeScalarView)
  {
    v24 = *(_OWORD *)(v12 + 16);
    v28 = *(__n128 *)v12;
    v29 = v24;
    v30 = *(_OWORD *)(v12 + 32);
    v31 = v28;
    v32 = v24;
    v33 = v30;
    sub_238263E74((uint64_t)&v31, (uint64_t)v35);
    sub_238263DDC((uint64_t)v35);
    v17 = &v28;
    goto LABEL_9;
  }
  if (a6 != &type metadata for BigSubstring.UnicodeScalarView)
  {
    Description[2](v14);
    v16 = sub_238342D50((uint64_t)v14, (uint64_t)a6, &v31);
    ((void (*)(char *, ValueMetadata *, __n128))Description[1])(v14, a6, v16);
    v17 = &v31;
LABEL_9:
    _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(v17, a2, a3, a4, a5);
    return;
  }
  v25 = *(_OWORD *)(v12 + 16);
  v28 = *(__n128 *)v12;
  v29 = v25;
  v26 = *(__n128 *)(v12 + 48);
  v30 = *(_OWORD *)(v12 + 32);
  v31 = v26;
  v27 = *(_OWORD *)(v12 + 80);
  v32 = *(_OWORD *)(v12 + 64);
  v33 = v27;
  v34 = *(_OWORD *)(v12 + 96);
  swift_unknownObjectRetain();
  sub_23825FABC((__int128 *)&v28, v31.n128_u64, a2, a3, a4, a5);
}

void sub_23833173C(__int128 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[3];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[4];
  __int128 v59[3];
  _OWORD v60[3];
  _BYTE v61[40];
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = v1;
  v4 = sub_23835BAFC();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v11 = (char *)&v36 - v10;
  v12 = a1[1];
  v59[0] = *a1;
  v59[1] = v12;
  v13 = a1[3];
  v59[2] = a1[2];
  v15 = a1[4];
  v14 = a1[5];
  v58[0] = v13;
  v58[1] = v15;
  v16 = a1[6];
  v58[2] = v14;
  v58[3] = v16;
  if (((unint64_t)v14 ^ *(_QWORD *)&v58[0]) < 0x800)
    return;
  v17 = *v1;
  if (!*v1)
  {
    sub_238263DDC((uint64_t)a1);
LABEL_9:
    sub_238342810(v59, (unint64_t *)v58, &v67);
    v27 = v68;
    *(_OWORD *)v1 = v67;
    *((_OWORD *)v1 + 1) = v27;
    *((_OWORD *)v1 + 2) = v69;
    return;
  }
  v18 = v1[4];
  if (!v18)
  {
    sub_238263DDC((uint64_t)a1);
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  v44 = v9;
  v45 = v8;
  v19 = v1[1];
  v41 = v1[2];
  v42 = v19;
  v40 = v1[3];
  v20 = a1[1];
  v60[0] = *a1;
  v60[1] = v20;
  v60[2] = a1[2];
  sub_238263E74((uint64_t)v60, (uint64_t)v61);
  sub_238263DDC((uint64_t)a1);
  sub_238263DDC((uint64_t)v61);
  sub_238342810(v59, (unint64_t *)v58, &v53);
  v21 = v53;
  v43 = v57;
  v49 = v53;
  v50 = v54;
  v51 = v55;
  v52 = v56;
  v70 = v53;
  v38 = v54;
  v39 = *((_QWORD *)&v53 + 1);
  v71 = v54;
  v72 = v55;
  v36 = v56;
  v37 = v55;
  v73 = v56;
  v22 = *(unsigned __int8 *)(v53 + 18);
  swift_unknownObjectRetain();
  sub_238261C98(v22, (uint64_t)&v67);
  v23 = sub_2382672A8(v67, *((unint64_t *)&v67 + 1));
  swift_bridgeObjectRelease();
  if ((v23 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_23825B804((uint64_t)&v53);
    sub_23835BAF0();
    v24 = v2[5];
    *(_QWORD *)&v67 = v17;
    *((_QWORD *)&v67 + 1) = v42;
    *(_QWORD *)&v68 = v41;
    *((_QWORD *)&v68 + 1) = v40;
    *(_QWORD *)&v69 = v18;
    *((_QWORD *)&v69 + 1) = v24;
    LOBYTE(v62) = 0;
    v25 = sub_2382600B8((v18 << 11) | 0x300, 0, 0, (uint64_t *)1, v23, (unint64_t)v7);
    if (v21)
      v26 = *(unsigned __int8 *)(v21 + 18);
    else
      v26 = 0;
    v28 = v43;
    v48[0] = v43;
    v48[1] = v26;
    v48[2] = 0;
    MEMORY[0x24BDAC7A8](v25);
    *(&v36 - 2) = (uint64_t)v11;
    *(&v36 - 1) = (uint64_t)v7;
    v46 = 0;
    v47 = 1;
    if (v21)
    {
      sub_238294E18(&v62, (uint64_t)v48, &v49, (uint64_t)&v46, (void (*)(_QWORD *__return_ptr))sub_238300210, (uint64_t)(&v36 - 4));
      ++v28;
      v30 = *((_QWORD *)&v49 + 1);
      v29 = v49;
      v31 = v50;
      v32 = v51;
      v33 = v52;
    }
    else
    {
      v29 = 0;
      v31 = v38;
      v30 = v39;
      v33 = v36;
      v32 = v37;
    }
    *(_QWORD *)&v62 = v29;
    *((_QWORD *)&v62 + 1) = v30;
    v63 = v31;
    v64 = v32;
    v65 = v33;
    v66 = v28;
    swift_unknownObjectRetain();
    sub_238259194((uint64_t *)&v62);
    sub_23825B804((uint64_t)a1);
    v34 = v45;
    v35 = *(void (**)(char *, uint64_t))(v44 + 8);
    v35(v7, v45);
    v35(v11, v34);
    swift_unknownObjectRelease();
  }
}

unint64_t sub_238331A54(uint64_t a1, ValueMetadata *a2)
{
  void (**Description)(char *);
  _OWORD *v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[40];

  Description = (void (**)(char *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == (ValueMetadata *)MEMORY[0x24BEE0AB0])
  {
    swift_bridgeObjectRetain();
    return BigString.append(contentsOf:)();
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x24BEE1D90])
  {
    swift_bridgeObjectRetain_n();
    v9 = sub_23835B454();
    _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v9, v10, v11, v12);
    return swift_bridgeObjectRelease();
  }
  else if (a2 == &type metadata for BigString.UnicodeScalarView)
  {
    v13 = v4[1];
    v17[0] = *v4;
    v17[1] = v13;
    v18 = v4[2];
    v19 = (__n128)v17[0];
    v20 = v13;
    v21 = v18;
    sub_238263E74((uint64_t)&v19, (uint64_t)v26);
    sub_238263DDC((uint64_t)v26);
    return BigString.UnicodeScalarView.append(contentsOf:)(v17);
  }
  else if (a2 == &type metadata for BigSubstring.UnicodeScalarView)
  {
    v14 = v4[5];
    v23 = v4[4];
    v24 = v14;
    v25 = v4[6];
    v15 = v4[1];
    v19 = *(__n128 *)v4;
    v20 = v15;
    v16 = v4[3];
    v21 = v4[2];
    v22 = v16;
    sub_238263DDC((uint64_t)&v19);
    sub_23833173C((__int128 *)&v19);
    return sub_23825B804((uint64_t)&v19);
  }
  else
  {
    Description[2](v6);
    v7 = sub_238342D50((uint64_t)v6, (uint64_t)a2, &v19);
    ((void (*)(char *, ValueMetadata *, __n128))Description[1])(v6, a2, v7);
    return _s19CollectionsInternal9BigStringV6append10contentsOfyACn_tF_0((uint64_t)&v19);
  }
}

unint64_t sub_238331C20()
{
  unint64_t result;

  result = qword_2568F2010;
  if (!qword_2568F2010)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView, &type metadata for BigString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F2010);
  }
  return result;
}

unint64_t sub_238331C68()
{
  unint64_t result;

  result = qword_2568F2018;
  if (!qword_2568F2018)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView, &type metadata for BigString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F2018);
  }
  return result;
}

unint64_t sub_238331CB0()
{
  unint64_t result;

  result = qword_2568F2020;
  if (!qword_2568F2020)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView, &type metadata for BigString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F2020);
  }
  return result;
}

unint64_t sub_238331CF8()
{
  unint64_t result;

  result = qword_2568F2028;
  if (!qword_2568F2028)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView.Iterator, &type metadata for BigString.UnicodeScalarView.Iterator);
    atomic_store(result, (unint64_t *)&qword_2568F2028);
  }
  return result;
}

unint64_t sub_238331D40()
{
  unint64_t result;

  result = qword_2568F2030;
  if (!qword_2568F2030)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView, &type metadata for BigString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F2030);
  }
  return result;
}

unint64_t sub_238331D88()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2568F2038;
  if (!qword_2568F2038)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F2040);
    v2 = sub_238331DEC();
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0658], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568F2038);
  }
  return result;
}

unint64_t sub_238331DEC()
{
  unint64_t result;

  result = qword_2568F2048;
  if (!qword_2568F2048)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView, &type metadata for BigString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F2048);
  }
  return result;
}

unint64_t sub_238331E34()
{
  unint64_t result;

  result = qword_2568F2050;
  if (!qword_2568F2050)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigString.UnicodeScalarView, &type metadata for BigString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&qword_2568F2050);
  }
  return result;
}

unint64_t sub_238331E7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F2058[0];
  if (!qword_2568F2058[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F2040);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0670], v1);
    atomic_store(result, qword_2568F2058);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.UnicodeScalarView()
{
  return &type metadata for BigString.UnicodeScalarView;
}

ValueMetadata *type metadata accessor for BigString.UnicodeScalarView.Iterator()
{
  return &type metadata for BigString.UnicodeScalarView.Iterator;
}

uint64_t _DequeBufferHeader.capacity.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_DequeBufferHeader.capacity.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _DequeBufferHeader.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_DequeBufferHeader.count.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.startSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _DequeBufferHeader.startSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_DequeBufferHeader.startSlot.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.description.getter()
{
  sub_23835B5B0();
  sub_23835AE90();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return 0;
}

uint64_t sub_2383320D4()
{
  return _DequeBufferHeader.description.getter();
}

uint64_t getEnumTagSinglePayload for _DequeBufferHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _DequeBufferHeader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

uint64_t static OrderedSet._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

unint64_t sub_23833213C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = a2 >> 14;
  if (a2 >> 14 == result >> 14)
    return result;
  v8 = result;
  v18 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v19 = a4 & 0xFFFFFFFFFFFFFFLL;
  v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  if ((a4 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a4) & 0xF;
  else
    v11 = a3 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v12 = v8;
  while (1)
  {
    sub_2382668C8(v12, v8, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      result = sub_23835B5A4();
    }
    else
    {
      if ((a4 & 0x2000000000000000) != 0)
      {
        v20 = a3;
        v21 = v19;
      }
      else if ((a3 & 0x1000000000000000) == 0)
      {
        sub_23835B634();
      }
      result = sub_23835B640();
    }
    if ((v12 & 0xC) != v10 && (v12 & 1) != 0)
      break;
    if ((v12 & 0xC) == v10)
    {
      result = sub_2382A6050(v12, a3, a4);
      v12 = result;
      if (v11 <= result >> 16)
        goto LABEL_39;
    }
    else if (v11 <= v12 >> 16)
    {
      goto LABEL_39;
    }
    if ((v12 & 1) != 0)
      goto LABEL_24;
    v12 = v12 & 0xC | sub_23826674C(v12, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_25:
      v13 = v12 >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        v20 = a3;
        v21 = v19;
        v15 = *((unsigned __int8 *)&v20 + v13);
      }
      else
      {
        v14 = v18;
        if ((a3 & 0x1000000000000000) == 0)
          v14 = sub_23835B634();
        v15 = *(unsigned __int8 *)(v14 + v13);
      }
      v16 = (char)v15;
      v17 = __clz(v15 ^ 0xFF) - 24;
      if (v16 >= 0)
        LOBYTE(v17) = 1;
      v12 = ((v13 + v17) << 16) | 5;
      goto LABEL_9;
    }
LABEL_8:
    v12 = sub_23835ADB8();
LABEL_9:
    sub_23835BAE4();
    if (v4 == v12 >> 14)
      return swift_bridgeObjectRelease();
  }
  if (v11 > v12 >> 16)
  {
LABEL_24:
    if ((a4 & 0x1000000000000000) == 0)
      goto LABEL_25;
    goto LABEL_8;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t Rope.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  v8 = Rope.startIndex.getter(a1);
  return Rope.Iterator.init(_:from:)((uint64_t)v6, v8, v9, v10, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t Rope.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v2 + *(int *)(v6 + 36));
  if (!v9[2])
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  MEMORY[0x24BDAC7A8](v6);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(&v18 - 4) = v10;
  *(&v18 - 3) = v11;
  *(&v18 - 2) = v2;
  Rope._UnmanagedLeaf.read<A>(body:)((uint64_t (*)(uint64_t))sub_2383328B8, (uint64_t)(&v18 - 6), v12, v10, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  v14 = type metadata accessor for Rope(0, v10, v11, v13);
  Rope.formIndex(after:)(v9, v14, v15, v16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v8, v14);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 0, 1, v10);
}

uint64_t Rope.Iterator.init(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v14 = type metadata accessor for Rope(0, a5, a6, a4);
  Rope.validate(_:)(a2, a3, a4, v14);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a7, a1, v14);
  v17 = (uint64_t *)(a7 + *(int *)(type metadata accessor for Rope.Iterator(0, a5, a6, v16) + 36));
  *v17 = a2;
  v17[1] = a3;
  v17[2] = a4;
  Rope.grease(_:)(v17, v14, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
}

uint64_t Rope.makeIterator(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v5, v14);
  return Rope.Iterator.init(_:from:)((uint64_t)v12, a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t Rope.Iterator._rope.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for Rope(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t Rope.Iterator._index.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t Rope.Iterator._index.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5 = (_QWORD *)(v4 + *(int *)(a4 + 36));
  *v5 = result;
  v5[1] = a2;
  v5[2] = a3;
  return result;
}

uint64_t (*Rope.Iterator._index.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t sub_238332754@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v24;

  v12 = type metadata accessor for Rope._Item(0, a4, a5, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - v14;
  v16 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v12);
  v17 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v12, a5, v16);
  v19 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for Rope.Iterator(0, a4, a5, v18) + 36) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = _RopePath.subscript.getter(0, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17 + *(_QWORD *)(v13 + 72) * v22, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, v15, a4);
}

uint64_t sub_2383328B8@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_238332754(a1, a2, v3[4], v3[2], v3[3], a3);
}

uint64_t type metadata accessor for Rope.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Rope.Iterator);
}

void sub_2383328D4()
{
  JUMPOUT(0x23B831670);
}

uint64_t sub_2383328E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  Rope.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_238332914(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>, a1);
  return sub_23835B1F0();
}

uint64_t sub_238332948(uint64_t a1)
{
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>, a1);
  return sub_23835B1FC();
}

uint64_t sub_23833297C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Rope(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2383329F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  __int128 v20;
  unint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 <= 7
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0
    && (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) == 0 || ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE8))
  {
    v12 = AssociatedTypeWitness;
    v13 = ~v6;
    if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v13))
      {
LABEL_14:
        memcpy(a1, a2, v7);
LABEL_17:
        *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
        v19 = ((unint64_t)a2 + v8 + 15) & 0xFFFFFFFFFFFFFFF8;
        v20 = *(_OWORD *)v19;
        v21 = ((unint64_t)a1 + v8 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v21 + 16) = *(_QWORD *)(v19 + 16);
        *(_OWORD *)v21 = v20;
        return a1;
      }
    }
    else
    {
      v14 = *a2;
      if ((unint64_t)*a2 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *a1 = *a2;
    v15 = (char *)a2 + v6;
    v16 = ((unint64_t)a1 + v6 + 8) & v13;
    v17 = (unint64_t)(v15 + 8) & v13;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v18(v16, v17, v12);
    goto LABEL_17;
  }
  v11 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  swift_retain();
  return a1;
}

uint64_t *sub_238332B84(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = (v6 + 8) & ~v6;
  v9 = *(_QWORD *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    v10 = *a2;
    if ((unint64_t)*a2 >= 0xFFFFFFFF)
      LODWORD(v10) = -1;
    v11 = v8 + v9;
    if ((_DWORD)v10 != -1)
      goto LABEL_5;
LABEL_7:
    *a1 = *a2;
    v12 = (char *)a2 + v6;
    v13 = ((unint64_t)a1 + v6 + 8) & v7;
    v14 = (unint64_t)(v12 + 8) & v7;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v15(v13, v14, AssociatedTypeWitness);
    goto LABEL_8;
  }
  v11 = v8 + v9;
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v7))
    goto LABEL_7;
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  v16 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v17 = (unint64_t)a1 + v16 + 7;
  v18 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)v18;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_OWORD *)v17 = v19;
  return a1;
}

_QWORD *sub_238332CD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(unint64_t, uint64_t, uint64_t);
  int v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v13 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v13)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL)
      LODWORD(v10) = -1;
    v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v11)
  {
    *a1 = *a2;
    v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v14(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
  v15 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v16 = (_QWORD *)(((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  return a1;
}

uint64_t *sub_238332EC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = (v6 + 8) & ~v6;
  v9 = *(_QWORD *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    v10 = *a2;
    if ((unint64_t)*a2 >= 0xFFFFFFFF)
      LODWORD(v10) = -1;
    v11 = v8 + v9;
    if ((_DWORD)v10 != -1)
      goto LABEL_5;
LABEL_7:
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v6 + 8) & v7, ((unint64_t)a2 + v6 + 8) & v7, AssociatedTypeWitness);
    goto LABEL_8;
  }
  v11 = v8 + v9;
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v7))
    goto LABEL_7;
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  v12 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v13 = (unint64_t)a1 + v12 + 7;
  v14 = ((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)v13 = v15;
  return a1;
}

_QWORD *sub_23833300C(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(unint64_t, uint64_t, uint64_t);
  int v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v13 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v13)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL)
      LODWORD(v10) = -1;
    v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v11)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
  v14 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = (_QWORD *)(((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  v15[2] = v16[2];
  return a1;
}

uint64_t sub_2383331E4(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 < a2)
  {
    v8 = a2 - v6 + 2;
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if ((v5 & 0x80000000) != 0)
  {
    v13 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
  }
  else
  {
    v12 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    v13 = v12 + 1;
  }
  if (v13 >= 2)
    return v13 - 1;
  else
    return 0;
}

void sub_238333348(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 1;
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v7 - 1 >= a3)
  {
    v12 = 0;
    if (a2 <= v8)
      goto LABEL_16;
  }
  else
  {
    v10 = a3 - v7 + 2;
    if ((((((((_DWORD)v9 + 8) & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE8)
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v8)
LABEL_16:
      __asm { BR              X14 }
  }
  if ((((((((_DWORD)v9 + 8) & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v13 = a2 - v7;
    bzero(a1, ((((((v9 + 8) & ~v9) + *(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_23833347C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x238333574);
}

void sub_238333484()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23833348CLL);
  JUMPOUT(0x238333574);
}

void sub_2383334E8()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x238333574);
}

void sub_238333504()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x238333574);
}

void sub_23833350C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x238333574);
}

void sub_238333514(uint64_t a1, size_t a2)
{
  int v2;
  unsigned int v3;
  char *v4;
  int v5;
  uint64_t v6;

  *(_WORD *)&v4[v6] = 0;
  if (v5)
  {
    if (v5 + 1 <= v3)
      JUMPOUT(0x2383334F0);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v2 = a2;
      else
        v2 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x238333574);
}

void sub_238333548()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x238333574);
}

void sub_238333558()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x238333574);
}

void sub_238333560()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x238333574);
}

uint64_t static OrderedDictionary._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t BitSet.debugDescription.getter(uint64_t a1)
{
  return sub_2383335B0(0x746553746942, 0xE600000000000000, a1);
}

uint64_t sub_2383335B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  swift_bridgeObjectRetain();
  sub_23835AE90();
  v4 = (unint64_t *)(a3 + 32);
  if (*(_QWORD *)(a3 + 16))
    v5 = *v4;
  else
    v5 = 0;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 1;
  v9 = MEMORY[0x24BEE1768];
  while (v5)
  {
    if (v7 << 6 < 0)
      goto LABEL_22;
    v11 = __rbit64(v5);
    v5 &= v5 - 1;
    v12 = (v7 << 6) | __clz(v11);
    if ((v8 & 1) == 0)
LABEL_19:
      sub_23835AE90();
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(qword_2568F0D38);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23835CD60;
    *(_QWORD *)(v10 + 56) = v9;
    *(_QWORD *)(v10 + 32) = v12;
    sub_23835B580();
    result = swift_bridgeObjectRelease();
    v8 = 0;
  }
  v13 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_23;
  v14 = *(_QWORD *)(a3 + 16);
  if (v13 >= v14)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_23835AE90();
    return a1;
  }
  v15 = v4[v13];
  if (v15)
  {
    ++v7;
LABEL_17:
    if (v7 << 6 < 0)
      goto LABEL_24;
    v5 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v7 << 6);
    if ((v8 & 1) == 0)
      goto LABEL_19;
    goto LABEL_5;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v14)
      goto LABEL_20;
    v15 = v4[v7];
    ++v13;
    if (v15)
      goto LABEL_17;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_23833378C()
{
  uint64_t *v0;

  return sub_2383335B0(0x746553746942, 0xE600000000000000, *v0);
}

uint64_t TreeSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = TreeSet.count.getter(a4, a5);
  if (v16 >= TreeSet.count.getter(a1, a2))
    return 0;
  else
    return TreeSet.isSubset(of:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t TreeSet.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = TreeSet.count.getter(a4, a5);
  if (v17 >= TreeDictionary.Keys.count.getter(a1, a2, a3, a7, a8, a9))
    return 0;
  else
    return TreeSet.isSubset<A>(of:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t TreeSet.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  void (*v52)(char *, uint64_t);
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t AssociatedTypeWitness;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[3];

  v76 = a4;
  v86 = a2;
  v87 = a3;
  v83 = a1;
  v81 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v79 = (char *)&v69 - v11;
  v12 = sub_23835B334();
  v73 = *(_QWORD *)(v12 - 8);
  v74 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v78 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v69 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v69 - v19;
  v21 = *(_QWORD *)(a5 - 8);
  v22 = MEMORY[0x24BDAC7A8](v18);
  v72 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v69 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v75 = (char *)&v69 - v28;
  v29 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet(0, a5, a7, v32) == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v83, a6);
    swift_dynamicCast();
    v38 = TreeSet.isStrictSubset(of:)(v98, *((uint64_t *)&v98 + 1), v99, v86, v87, v76, a5, a7);
    swift_release();
    return v38 & 1;
  }
  v69 = v29;
  v70 = v31;
  v77 = a6;
  TreeSet.makeIterator()(v86, &v98);
  v34 = type metadata accessor for TreeSet.Iterator(0, a5, a7, v33);
  TreeSet.Iterator.next()(v34, (uint64_t)v20);
  v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v85(v20, 1, a5) == 1)
  {
    v35 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v20, v74);
    MEMORY[0x24BDAC7A8](v35);
    v36 = v77;
    *(&v69 - 4) = a5;
    *(&v69 - 3) = v36;
    v37 = v81;
    *(&v69 - 2) = a7;
    *(&v69 - 1) = v37;
    v38 = sub_23835B01C();
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    v92 = v100;
    v93 = v101;
    v95 = v103;
    v96 = v104;
    v94 = v102;
    v90 = v98;
    v91 = v99;
    sub_2382735AC((uint64_t)&v90);
    return v38 & 1;
  }
  v84 = a7;
  v39 = v75;
  v82 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v82(v75, v20, a5);
  v40 = v21;
  v41 = v83;
  v42 = v77;
  v43 = sub_23835AFB0();
  if (v43 == 2)
  {
    v75 = *(char **)(v40 + 8);
    ((void (*)(char *, uint64_t))v75)(v39, a5);
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    v92 = v100;
    v93 = v101;
    v95 = v103;
    v96 = v104;
    v94 = v102;
    v90 = v98;
    v91 = v99;
    sub_2382735AC((uint64_t)&v90);
    if (qword_2568F09D0 != -1)
      swift_once();
    v44 = MEMORY[0x24BEE4AE0] + 8;
    v88 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x24BEE4AE0] + 8, v84);
    v89 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v70, v41, v42);
    swift_retain();
    sub_23835AF8C();
    swift_getAssociatedConformanceWitness();
    v46 = v78;
    sub_23835B484();
    v47 = v85(v46, 1, a5);
    v48 = (uint64_t)v72;
    if (v47 == 1)
    {
LABEL_9:
      (*(void (**)(char *, uint64_t))(v71 + 8))(v79, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v74);
      swift_release();
      v38 = 0;
      return v38 & 1;
    }
    v53 = 0;
    v54 = 0;
    while (1)
    {
      v82((char *)v48, v46, a5);
      v55 = v84;
      v56 = sub_238358A4C();
      if (!_HashNode.containsKey(_:_:_:)(0, v48, v56, v86, v87, a5, v44, v55))
      {
        ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
        if ((v53 & 1) != 0)
          goto LABEL_32;
        v53 = 0;
        v54 = 1;
        goto LABEL_18;
      }
      if ((v53 & 1) != 0)
        break;
      v57 = (_QWORD *)type metadata accessor for _HashNode(0, a5, MEMORY[0x24BEE4AE0] + 8, v55);
      if ((_HashNode.insert(_:_:_:)(0, v48, v58, v56, v57) & 1) == 0)
      {
        ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
        v53 = 0;
        goto LABEL_18;
      }
      v59 = v89;
      v60 = TreeSet.count.getter(v86, v87);
      v46 = v78;
      if (v59 == v60)
      {
        if ((v54 & 1) != 0)
        {
          ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
LABEL_32:
          (*(void (**)(char *, uint64_t))(v71 + 8))(v79, AssociatedTypeWitness);
          swift_release();
          v38 = 1;
          return v38 & 1;
        }
        v61 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x24BEE4AE0] + 8, v84);
        v63 = v62;
        swift_retain();
        ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
        swift_release();
        v54 = 0;
        v88 = v61;
        v89 = v63;
        v46 = v78;
        v53 = 1;
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
        v53 = 0;
      }
LABEL_19:
      sub_23835B484();
      if (v85(v46, 1, a5) == 1)
        goto LABEL_9;
    }
    ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
    v53 = 1;
LABEL_18:
    v46 = v78;
    goto LABEL_19;
  }
  v49 = v87;
  if ((v43 & 1) != 0)
  {
    do
    {
      TreeSet.Iterator.next()(v34, (uint64_t)v17);
      if (v85(v17, 1, a5) == 1)
      {
        v64 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v17, v74);
        MEMORY[0x24BDAC7A8](v64);
        v65 = v77;
        *(&v69 - 8) = a5;
        *(&v69 - 7) = v65;
        v66 = v81;
        *(&v69 - 6) = v84;
        *(&v69 - 5) = v66;
        *(&v69 - 4) = v86;
        *(&v69 - 3) = v49;
        *(&v69 - 2) = v76;
        v67 = sub_23835AFC8();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v75, a5);
        v97[0] = v105[0];
        *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
        v92 = v100;
        v93 = v101;
        v95 = v103;
        v96 = v104;
        v94 = v102;
        v90 = v98;
        v91 = v99;
        sub_2382735AC((uint64_t)&v90);
        v38 = v67 ^ 1;
        return v38 & 1;
      }
      v82(v26, v17, a5);
      v51 = sub_23835B034();
      v52 = *(void (**)(char *, uint64_t))(v40 + 8);
      v52(v26, a5);
    }
    while ((v51 & 1) != 0);
    v52(v75, a5);
    v50 = v103;
    v96 = v104;
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    v92 = v100;
    v93 = v101;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v75, a5);
    v96 = v104;
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    v92 = v100;
    v93 = v101;
    v50 = v103;
  }
  v94 = v102;
  v95 = v50;
  v90 = v98;
  v91 = v99;
  sub_2382735AC((uint64_t)&v90);
  v38 = 0;
  return v38 & 1;
}

uint64_t static Deque<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for Deque(0, a3, a3, a4);
  MEMORY[0x23B831670](&protocol conformance descriptor for Deque<A>, v4);
  return sub_23835B028() & 1;
}

uint64_t sub_23833427C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Deque<A>.== infix(_:_:)(*a1, *a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t _RopeStorageHeader.childCount.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t static Rope._Storage.create(height:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return sub_23835B610();
}

unint64_t _RopeStorageHeader.childCount.setter(unint64_t result)
{
  _WORD *v1;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (!(result >> 16))
  {
    *v1 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _RopeStorageHeader._childCount.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_RopeStorageHeader._childCount.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t _RopeStorageHeader.height.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t _RopeStorageHeader.init(height:)(unsigned __int8 a1)
{
  return a1 << 16;
}

unint64_t *(*_RopeStorageHeader.childCount.modify(_QWORD *a1))(unint64_t *result, char a2)
{
  unsigned __int16 *v1;

  *a1 = *v1;
  a1[1] = v1;
  return sub_2382FB6C8;
}

void sub_2383343D8(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = v2;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _RopeStorageHeader(unsigned __int16 *a1, int a2)
{
  int v2;

  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for _RopeStorageHeader(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 0x1FFFFFF) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (!a3)
    v3 = 0;
  if (a2)
  {
    *(_WORD *)result = a2 - 1;
    *(_BYTE *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else if (v3)
  {
    if (v3 == 2)
      *(_WORD *)(result + 3) = 0;
    else
      *(_BYTE *)(result + 3) = 0;
  }
  return result;
}

Swift::Void __swiftcall OrderedSet.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  _QWORD *v1;

  sub_23835B6E8();
  sub_23835B6D0();
  if (keepingCapacity)
  {
    if (*v1)
    {
      OrderedSet._ensureUnique()();
      if (*v1)
        _HashTable.UnsafeHandle.clear()();
      else
        __break(1u);
    }
  }
  else
  {
    swift_release();
    *v1 = 0;
  }
}

void OrderedSet.remove(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = OrderedSet._bucket(for:)(a1, *v2, v2[1], *(_QWORD *)(a2 + 16));
  OrderedSet._removeExistingMember(at:in:)(a1, v5, a2);
}

void OrderedSet.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v3;
  if (!*v3)
    goto LABEL_14;
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  if (v9 < 1)
    return;
  v10 = *(char **)(a3 + 16);
  swift_retain();
  v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  v12 = __OFSUB__(v11, v9);
  v13 = v11 - v9;
  if (v12)
    goto LABEL_17;
  swift_retain();
  swift_retain();
  v14 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  swift_release();
  if (v14 >= 0)
    v15 = v14;
  else
    v15 = v14 + 1;
  if (v13 <= v15 >> 1 || (v16 = *(_QWORD *)(a3 + 24), v13 < OrderedSet._minimumCapacity.getter(v8)))
  {
    v17 = sub_23835B6E8();
    MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v17);
    sub_23835B298();
    OrderedSet._regenerateHashTable()();
    return;
  }
  OrderedSet._ensureUnique()();
  v18 = *v3;
  if (!*v4)
    goto LABEL_18;
  swift_retain();
  sub_238334854((_QWORD *)(v18 + 16), v18 + 32, (uint64_t)v4, a1, a2, v10, v16);
  swift_release();
LABEL_14:
  v19 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v19);
  sub_23835B298();
}

Swift::Void __swiftcall OrderedSet.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  if (_s19CollectionsInternal4HeapV5countSivg_0() < a1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = _s19CollectionsInternal4HeapV5countSivg_0();
  v5 = __OFSUB__(v4, a1);
  v6 = v4 - a1;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v7 >= v6)
  {
    OrderedSet.removeSubrange(_:)(v6, v7, v2);
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall OrderedSet.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    if (_s19CollectionsInternal4HeapV5countSivg_0() >= a1)
    {
      OrderedSet.removeSubrange(_:)(0, a1, v2);
      return;
    }
  }
  __break(1u);
}

void sub_238334854(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;

  v58 = a7;
  v10 = a1;
  v46 = *((_QWORD *)a6 - 1);
  MEMORY[0x24BDAC7A8](a1);
  v44 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v12;
  v48 = v13;
  v14 = sub_23835B70C();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = sub_23835B508();
  v45 = v16;
  v49 = a6;
  if (v21 == sub_23835B538())
  {
    v22 = a3;
    v23 = a2;
    swift_unknownObjectRelease();
    v24 = v58;
LABEL_9:
    v59[0] = v47;
    v59[1] = v48;
    v60 = *(_QWORD *)(v22 + 8);
    v42 = sub_23835B6E8();
    v43 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v42);
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)((uint64_t)v59, (uint64_t)&v60, v10, v23, v42, v43, v24);
  }
  else
  {
    v56 = v10;
    v57 = a2;
    v25 = a3;
    v54 = v20 >> 1;
    v55 = v21;
    v26 = v21;
    v27 = (uint64_t)v44;
    v28 = v14;
    v29 = v49;
    v31 = v45;
    v30 = v46;
    v52 = v18;
    v53 = v28;
    v50 = v25;
    v51 = v20;
    while (1)
    {
      sub_23835B520();
      if (v55 < v18 || v54 <= v26)
        break;
      (*(void (**)(uint64_t, uint64_t, char *))(v30 + 16))(v27, v31 + *(_QWORD *)(v30 + 72) * v26, v29);
      v59[0] = *(_QWORD *)(v25 + 8);
      v32 = sub_23835B6E8();
      v33 = MEMORY[0x23B831670](MEMORY[0x24BEE2A58], v32);
      v34 = v57;
      v35 = v56;
      v36 = v58;
      v37 = _HashTable.UnsafeHandle._find<A>(_:in:)(v27, (uint64_t)v59, v56, v57, v32, v33, v58);
      if ((v38 & 1) != 0)
        goto LABEL_11;
      ++v26;
      MEMORY[0x24BDAC7A8](v37);
      *(&v44 - 4) = v29;
      *(&v44 - 3) = (char *)v36;
      *(&v44 - 2) = v39;
      _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v40, (uint64_t (*)(unint64_t, _QWORD))sub_2383350E0, (uint64_t)(&v44 - 6), v35, v34);
      (*(void (**)(uint64_t, char *))(v30 + 8))(v27, v29);
      v18 = v52;
      v41 = sub_23835B538();
      v25 = v50;
      if (v26 == v41)
      {
        v22 = v50;
        v10 = v56;
        v23 = v57;
        swift_unknownObjectRelease();
        v24 = v58;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
}

void OrderedSet.removeSubrange<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x23B831670](&protocol conformance descriptor for OrderedSet<A>);
  sub_23835B040();
  OrderedSet.removeSubrange(_:)(v3, v4, a2);
}

void OrderedSet.removeLast()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v20 = v2[1];
  v10 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v10);
  if ((sub_23835B22C() & 1) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (!v9)
  {
    MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v10);
    MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v10);
    sub_23835B2B0();
    return;
  }
  v18 = a2;
  swift_retain();
  v11 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
    goto LABEL_11;
  v13 = v9;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = OrderedSet._minimumCapacity.getter(v13);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A38], v10);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v10);
  if (v12 < v15)
  {
    sub_23835B2B0();
    OrderedSet._regenerateHashTable()();
    return;
  }
  sub_23835B2B0();
  OrderedSet._ensureUnique()();
  v16 = *v3;
  v17 = v18;
  if (!*v3)
    goto LABEL_12;
  swift_retain();
  sub_238334DE8((_QWORD *)(v16 + 16), v16 + 32, (uint64_t)v8, (uint64_t)v3, v6, v14);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v17, v8, v6);
}

unint64_t sub_238334DE8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[7];
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  result = sub_23835ABF0();
  v12 = 1 << *a1;
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = v14 & result;
    v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a1, a2);
    v28 = a1;
    v29 = a2;
    v30 = v15;
    v31 = v16;
    v32 = v17;
    v33 = v18;
    v34 = 0;
    swift_retain();
    v19 = _s19CollectionsInternal4HeapV5countSivg_0();
    v20 = swift_release();
    if (v16)
    {
      v21 = -1 << *a1;
      v22 = (v21 ^ ~v16) + ((uint64_t)a1[1] >> 6);
      v23 = v22 >= ~v21 ? ~v21 : 0;
      if (v22 - v23 != v19)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          if (!v31)
            break;
          v24 = -1 << *v28;
          v25 = (v24 ^ ~v31) + ((uint64_t)v28[1] >> 6);
          v26 = v25 >= ~v24 ? ~v24 : 0;
        }
        while (v25 - v26 != v19);
        v15 = v30;
      }
    }
    MEMORY[0x24BDAC7A8](v20);
    v27[2] = a5;
    v27[3] = a6;
    v27[4] = a4;
    return _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v15, (uint64_t (*)(unint64_t, _QWORD))sub_2383350C4, (uint64_t)v27, a1, a2);
  }
  return result;
}

void OrderedSet.removeFirst()(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v2);
  if ((sub_23835B22C() & 1) != 0)
    __break(1u);
  else
    OrderedSet.remove(at:)(0, a1);
}

void OrderedSet.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A40], v5);
  MEMORY[0x23B831670](MEMORY[0x24BEE2A68], v5);
  sub_23835B2D4();
  type metadata accessor for OrderedSet(0, v4, *(_QWORD *)(a3 + 24), v6);
  OrderedSet._regenerateHashTable()();
}

uint64_t sub_2383350C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_238314880(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

unint64_t sub_2383350E4(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE v66[48];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;

  if (a5 >> 10 < result >> 10)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (result >> 10 >= a5 >> 10)
    return result;
  v13 = sub_238264714(result, a2, a3, a4, 0);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  result = sub_238264714(a5, a6, a7, a8, 1);
  if (v19 == 1)
    goto LABEL_43;
  v63 = v15;
  v64 = v17;
  v65 = v19;
  if (v21 == 1)
  {
LABEL_44:
    __break(1u);
    return result;
  }
  v22 = result;
  if (v17 == v20)
  {
    if (v15 == *(_QWORD *)(a9 + 40))
    {
      if (v19)
      {
        result = swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a9 + 8);
        v30 = *(_OWORD *)(a9 + 24);
        *(_QWORD *)v66 = *(_QWORD *)a9;
        *(_OWORD *)&v66[8] = v29;
        *(_OWORD *)&v66[24] = v30;
        swift_unknownObjectRetain();
        sub_238261C98(v17, (uint64_t)v72);
        result = sub_23825B804(a9);
      }
      if (((16 * v22) & 0x4000 | ((unint64_t)v22 << 16)) >= ((16 * (int)v13) & 0x4000 | ((unint64_t)v13 << 16)))
        goto LABEL_34;
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  v23 = *(_OWORD *)(a9 + 16);
  *(_OWORD *)v66 = *(_OWORD *)a9;
  *(_OWORD *)&v66[16] = v23;
  *(_OWORD *)&v66[32] = *(_OWORD *)(a9 + 32);
  if (v15 != *(_QWORD *)&v66[40])
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v24 = *(_OWORD *)v66;
  v61 = *(_QWORD *)&v66[32];
  v60 = v20;
  v25 = *(_OWORD *)&v66[16];
  v59 = v15;
  if (v19)
  {
    v26 = v19 + 24 * ((v17 >> ((4 * *(_BYTE *)(v19 + 18) + 8) & 0x3C)) & 0xF);
    v28 = *(_QWORD *)(v26 + 24);
    v27 = *(_QWORD *)(v26 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v72[0] = *(_OWORD *)v66;
    v72[1] = *(_OWORD *)&v66[16];
    v73 = *(_QWORD *)&v66[32];
    swift_unknownObjectRetain();
    sub_238261C98(v17, (uint64_t)v70);
    sub_23825B804(a9);
    v27 = *((_QWORD *)&v70[0] + 1);
    v28 = *(_QWORD *)&v70[0];
  }
  v31 = sub_23825E150((16 * (int)v13) & 0x4000 | ((unint64_t)v13 << 16) | (v13 >> 8) & 3 | 4, v28, v27);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  swift_bridgeObjectRelease();
  sub_238309AC0(v31, v33, v35, v37);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  result = sub_238269C7C();
  if (v17 >= result)
    goto LABEL_40;
  if (v19
    && (v38 = (4 * *(_BYTE *)(v19 + 18) + 8) & 0x3C,
        v39 = ((v17 >> v38) & 0xF) + 1,
        v39 < *(unsigned __int16 *)(v19 + 16)))
  {
    v40 = (v39 << v38) | ((-15 << v38) - 1) & v17;
    result = sub_23825B804(a9);
    v41 = v59;
    v42 = *(_QWORD *)&v66[8];
  }
  else
  {
    v42 = *(_QWORD *)&v66[8];
    v70[0] = *(_OWORD *)v66;
    v70[1] = *(_OWORD *)&v66[16];
    v71 = *(_QWORD *)&v66[32];
    swift_unknownObjectRetain();
    v43 = sub_23826A744((uint64_t)&v63);
    sub_23825B804(a9);
    v41 = v59;
    if ((v43 & 1) != 0)
    {
      result = sub_23825B804(a9);
      v40 = v64;
    }
    else
    {
      v40 = sub_238269C7C();
      result = sub_23825B804(a9);
      v63 = v59;
      v65 = 0;
    }
  }
  if (v40 < v60)
  {
    if (v63 == v41)
    {
      v44 = v65;
      while (1)
      {
        if (v44)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          v67 = v24;
          v68 = v25;
          v69 = v61;
          swift_unknownObjectRetain();
          sub_238261C98(v40, (uint64_t)&v62);
          sub_23825B804(a9);
        }
        v45 = sub_23835AF80();
        v47 = v46;
        v49 = v48;
        v51 = v50;
        swift_bridgeObjectRelease();
        sub_238309AC0(v45, v47, v49, v51);
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_41;
  }
  if (v63 != v41)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v65)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_QWORD *)&v67 = v24;
    *((_QWORD *)&v67 + 1) = v42;
    v68 = v25;
    v69 = v61;
    swift_unknownObjectRetain();
    sub_238261C98(v40, (uint64_t)&v62);
    sub_23825B804(a9);
  }
LABEL_34:
  v52 = sub_23835AF80();
  v54 = v53;
  v56 = v55;
  v58 = v57;
  swift_bridgeObjectRelease();
  sub_238309AC0(v52, v54, v56, v58);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23833564C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_238335D70(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_23825C0EC, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23825B864);
}

unint64_t sub_238335684(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  _QWORD v21[4];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)v5;
  v8 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)v5)
    v9 = 2 * (v8 & 0x1FFFFFFFFFFFFFuLL) > a1 >> 10;
  else
    v9 = 0;
  if (v9)
  {
    v4 = v5;
    v20 = *(_OWORD *)(v5 + 8);
    v10 = *(_QWORD *)(v5 + 24);
    v11 = *(_QWORD *)(v5 + 40);
    result = sub_238264714(a1, a2, a3, a4, 0);
    if (v15 != 1)
    {
      if (v13 == v11)
      {
        v16 = result;
        v17 = v14;
        if (v15)
        {
          v18 = v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF);
          v5 = *(_QWORD *)(v18 + 24);
          v4 = *(_QWORD *)(v18 + 32);
          swift_bridgeObjectRetain();
        }
        else
        {
          v21[3] = v7;
          v22 = v20;
          v23 = v10;
          v24 = v8;
          swift_unknownObjectRetain();
          sub_238261C98(v17, (uint64_t)v21);
          sub_23825B804(v5);
          v5 = v21[0];
          v4 = v21[1];
        }
        v6 = (16 * (int)v16) & 0x4000 | ((unint64_t)v16 << 16) | (v16 >> 8) & 3 | 4;
        if ((v4 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
          goto LABEL_13;
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      v6 = sub_2382A6050(v6, v5, v4);
LABEL_13:
      v19 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000) == 0)
        v19 = v5 & 0xFFFFFFFFFFFFLL;
      if (v6 >> 16 >= v19)
      {
        __break(1u);
LABEL_29:
        v5 = sub_23835AF08();
        swift_bridgeObjectRelease();
        return v5;
      }
      if ((v4 & 0x1000000000000000) != 0)
        goto LABEL_29;
      if ((v6 & 1) == 0)
        sub_23826674C(v6, v5, v4);
      v5 = sub_23835B58C();
      result = swift_bridgeObjectRelease();
      if ((v6 & 0xC000) == 0x4000)
        break;
      if (!WORD1(v5))
        return v5;
      result = (unsigned __int16)((v5 + 67043328) >> 10) + 55296;
      if ((result & 0x10000) == 0)
        return result;
      __break(1u);
    }
    if (v5 >= 0x10000)
      return v5 & 0x3FF | 0xFFFFDC00;
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_238335878(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;

  v5 = result >> 10;
  if ((result & 0x400) == 0)
  {
    result = sub_2382644F4(result, a2, a3, a4);
    if (v5 == result >> 10)
      return result;
    return sub_23825B864(result, v6, v7, v8, 1uLL);
  }
  if (*v4)
    v9 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) > v5;
  else
    v9 = 0;
  if (!v9)
  {
    __break(1u);
    return result;
  }
  result = sub_238264714(result, a2, a3, a4, 0);
  if (v5 != result >> 10)
    return sub_23825B864(result, v6, v7, v8, 1uLL);
  return result;
}

unint64_t sub_2383358DC(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  _BYTE v31[32];
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v10 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v5;
  *(_OWORD *)&v31[16] = v10;
  v32 = *(_OWORD *)(v5 + 32);
  v11 = *(_QWORD *)v31;
  if (!*(_QWORD *)v31 || (v9 = v32, 2 * ((unint64_t)v32 & 0x1FFFFFFFFFFFFFLL) <= a1 >> 10))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    result = sub_2382A6050(v8, v9, v5);
    v8 = result;
LABEL_22:
    v21 = v5 & 0x2000000000000000;
    v22 = HIBYTE(v5) & 0xF;
    v23 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0x2000000000000000) != 0)
      v25 = HIBYTE(v5) & 0xF;
    else
      v25 = v9 & 0xFFFFFFFFFFFFLL;
    if (v25 > v8 >> 16)
    {
      v20 = sub_23835AEB4();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
LABEL_28:
    __break(1u);
    return result;
  }
  v4 = v5;
  v26 = *(_DWORD *)&v31[8];
  result = sub_238264714(a1, a2, a3, a4, 0);
  if (v15 == 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  v16 = v13;
  if (v13 != *((_QWORD *)&v32 + 1))
    goto LABEL_20;
  v7 = result;
  v17 = v14;
  v6 = v15;
  v8 = (16 * (int)result) & 0x4000 | (result >> 8) & 3 | ((unint64_t)result << 16) | 4;
  if (v15)
  {
    v18 = v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF);
    v9 = *(_QWORD *)(v18 + 24);
    v5 = *(_QWORD *)(v18 + 32);
    v19 = *(unsigned __int8 *)(v18 + 40);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v33 = *(_QWORD *)v31;
    v34 = *(_OWORD *)&v31[8];
    v35 = *(_QWORD *)&v31[24];
    v36 = v32;
    swift_unknownObjectRetain();
    sub_238261C98(v17, (uint64_t)v29);
    result = sub_23825B804(v5);
    v9 = v29[0];
    v5 = v29[1];
    v19 = v30;
  }
  v11 = v7;
  v27 = v17;
  v28 = v16;
  v26 = v19;
  if ((v5 & 0x1000000000000000) != 0 && (v9 & 0x800000000000000) == 0)
    goto LABEL_21;
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_22;
  swift_bridgeObjectRelease();
  v20 = ((unint64_t)v7 << 16) + 65540;
  v21 = v5 & 0x2000000000000000;
  v22 = HIBYTE(v5) & 0xF;
  v23 = v9 & 0xFFFFFFFFFFFFLL;
LABEL_12:
  if (v21)
    v24 = v22;
  else
    v24 = v23;
  if (v20 >> 14 != 4 * v24)
    return (v7 & 0xFFFFFFFFFFFFF800 | BYTE2(v20)) + 2048;
  swift_unknownObjectRetain();
  sub_2382A5854(v28, v27, v6);
  sub_23825B804(v4);
  return ((v7 >> 11) - v11 + v26) << 11;
}

unint64_t sub_238335B14(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  _BYTE v25[24];
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  if (result < 0x400)
    goto LABEL_21;
  v5 = v4;
  result = sub_238264714(result, a2, a3, a4, 1);
  if (v8 != 1)
  {
    v9 = result;
    v10 = v6;
    v11 = v7;
    v12 = v8;
    v26 = v6;
    v27 = v7;
    v28 = v8;
    if ((_BYTE)result)
    {
      LOBYTE(v13) = result - 1;
      v14 = (result & 0xFFFFFFFFFFFFF800) - 2048;
      return v14 | v13;
    }
    if (v6 != v5[5])
      goto LABEL_22;
    v15 = *v5;
    v16 = v5[1];
    v17 = v5[2];
    v18 = v5[3];
    v24 = v5[4];
    if (*v5)
    {
      v19 = *(unsigned __int8 *)(v15 + 18);
      swift_unknownObjectRetain();
      if (v19 < v11)
        goto LABEL_8;
    }
    else
    {
      v19 = 0;
      if (v7)
      {
LABEL_8:
        if (v12)
        {
          v20 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C;
          if (((v11 >> v20) & 0xF) != 0)
          {
            v11 = ((((v11 >> v20) & 0xF) - 1) << v20) | ((-15 << v20) - 1) & v11;
            result = sub_23825B804((uint64_t)v5);
LABEL_14:
            v22 = v12 + 24 * ((v11 >> ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) & 0xF);
            v23 = *(unsigned __int8 *)(v22 + 40);
            if (*(_BYTE *)(v22 + 40))
            {
LABEL_15:
              v13 = v23 + 0xFFFFFFFFFFFFLL;
              v14 = ((v13 & 0xFFFFFFFFFFFFLL) - v23 + (v9 >> 11)) << 11;
              return v14 | v13;
            }
            goto LABEL_20;
          }
        }
        v34 = v15;
        v35 = v16;
        v19 = v16;
        v16 = v17;
        v36 = v17;
        v37 = v18;
        v17 = v18;
        v18 = v24;
        v38 = v24;
        swift_unknownObjectRetain();
        v21 = sub_23826A4AC((uint64_t)&v26);
        sub_23825B804((uint64_t)v5);
        result = sub_23825B804((uint64_t)v5);
        if ((v21 & 1) == 0)
        {
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        if (v26 != v10)
        {
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        v11 = v27;
        v12 = v28;
        if (v28)
          goto LABEL_14;
LABEL_19:
        v29 = v15;
        v30 = v19;
        v31 = v16;
        v32 = v17;
        v33 = v18;
        swift_unknownObjectRetain();
        sub_238261C98(v11, (uint64_t)v25);
        sub_23825B804((uint64_t)v5);
        v23 = v25[16];
        result = swift_bridgeObjectRelease();
        if (v23)
          goto LABEL_15;
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_238335D38(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_238335D70(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_238278978, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23825EDD4);
}

uint64_t sub_238335D70(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a11)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || a10(a1, a2, a3, a4, a6, a7, a8, a9) <= a5)
      return a11(a1, a2, a3, a4, a5);
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && a10(a1, a2, a3, a4, a6, a7, a8, a9) < a5)
    return 0;
  return a11(a1, a2, a3, a4, a5);
}

unint64_t sub_238335E58(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)v5)
    v8 = 2 * (v7 & 0x1FFFFFFFFFFFFFuLL) > result >> 10;
  else
    v8 = 0;
  if (!v8)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = v5;
  v21 = *(_OWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 40);
  result = sub_238264714(result, a2, a3, a4, 0);
  if (v13 != 1)
  {
    if (v11 == v10)
    {
      v14 = result;
      v15 = v12;
      if (v13)
      {
        v16 = v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF);
        v5 = *(_QWORD *)(v16 + 24);
        v4 = *(_QWORD *)(v16 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        v24 = v6;
        v25 = v21;
        v26 = v9;
        v27 = v7;
        swift_unknownObjectRetain();
        sub_238261C98(v15, (uint64_t)&v22);
        sub_23825B804(v5);
        v5 = v22;
        v4 = v23;
      }
      result = (16 * (int)v14) & 0x4000 | ((unint64_t)v14 << 16) | (v14 >> 8) & 3 | 4;
      if ((v4 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
      {
LABEL_13:
        v17 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0)
          v17 = v5 & 0xFFFFFFFFFFFFLL;
        v18 = result >> 16;
        if (result >> 16 >= v17)
        {
          __break(1u);
        }
        else if ((v4 & 0x1000000000000000) == 0)
        {
          if ((v4 & 0x2000000000000000) != 0)
          {
            v22 = v5;
            v23 = v4 & 0xFFFFFFFFFFFFFFLL;
            v20 = *((unsigned __int8 *)&v22 + v18);
          }
          else
          {
            if ((v5 & 0x1000000000000000) != 0)
              v19 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
            else
              v19 = sub_23835B634();
            v20 = *(unsigned __int8 *)(v19 + v18);
          }
          goto LABEL_22;
        }
        v20 = sub_23835AEE4();
LABEL_22:
        swift_bridgeObjectRelease();
        return v20;
      }
LABEL_24:
      result = sub_2382A6050(result, v5, v4);
      goto LABEL_13;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

unint64_t sub_238336000(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_238278254(a1, a2, a3, a4, a6, a7, a8, a9) <= a5)
      return sub_238278EB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_238278254(a1, a2, a3, a4, a6, a7, a8, a9) < a5)
    return 0;
  return sub_238278EB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
}

unint64_t sub_2383360EC(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)v4)
    v7 = 2 * (v6 & 0x1FFFFFFFFFFFFFuLL) > a1 >> 10;
  else
    v7 = 0;
  if (!v7)
  {
    __break(1u);
    goto LABEL_18;
  }
  v21 = *(_OWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(v4 + 40);
  result = sub_238264714(a1, a2, a3, a4, 0);
  if (v13 != 1)
  {
    if (v11 == v9)
    {
      v14 = result;
      v15 = v12;
      if (v13)
      {
        v16 = v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF);
        v18 = *(_QWORD *)(v16 + 24);
        v17 = *(_QWORD *)(v16 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        v24 = v5;
        v25 = v21;
        v26 = v8;
        v27 = v6;
        swift_unknownObjectRetain();
        sub_238261C98(v15, (uint64_t)&v22);
        sub_23825B804(v4);
        v18 = v22;
        v17 = v23;
      }
      sub_23826720C((16 * (int)v14) & 0x4000 | ((unint64_t)v14 << 16) | (v14 >> 8) & 3 | 4, v18, v17);
      if ((v17 & 0x1000000000000000) == 0)
      {
        if ((v17 & 0x2000000000000000) != 0)
        {
          v22 = v18;
          v23 = v17 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v18 & 0x1000000000000000) == 0)
        {
          sub_23835B634();
        }
        v19 = sub_23835B640();
        goto LABEL_17;
      }
LABEL_19:
      v19 = sub_23835B5A4();
LABEL_17:
      v20 = v19;
      swift_bridgeObjectRelease();
      return v20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t static BigString._minimumCapacity.getter()
{
  return 0x3DFFFFFFFFF84;
}

uint64_t static BigString._maximumCapacity.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _HashNode.compactMapValues<A>(_:_:)@<X0>(unsigned int a1@<W0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int *v18;
  uint64_t *v19;

  v18 = (int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  return sub_23833633C(v18, v19, a1, a4, a5, a2, a3, a6, a9, a7, a8, a10);
}

uint64_t sub_23833633C@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t result;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  char *v91;
  int v92;
  int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;
  unsigned int v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  char *v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  char *v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  int *v147;
  uint64_t v148;
  uint64_t *v149;
  void (*v150)(char *);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v13 = v12;
  v150 = a6;
  v151 = a7;
  v154 = a5;
  v148 = a4;
  v149 = a2;
  v144 = a3;
  v147 = a1;
  v119 = a9;
  v138 = *(_QWORD *)(a8 - 8);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v134 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = *(_QWORD *)(a10 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v137 = (void (*)(char *, char *, uint64_t))((char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v17);
  v129 = (char *)&v119 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v146 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v21 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v121 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v120 = (char *)&v119 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v128 = (char *)&v119 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v127 = (char *)&v119 - v27;
  v133 = sub_23835B334();
  v132 = *(_QWORD *)(v133 - 8);
  v28 = MEMORY[0x24BDAC7A8](v133);
  v136 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v126 = (char *)&v119 - v31;
  v143 = *(_QWORD *)(a11 - 8);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v124 = (char *)&v119 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v131 = (char *)&v119 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v125 = (char *)&v119 - v36;
  v37 = type metadata accessor for _HashNode.Builder.Kind(0, a8, a11, a12);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v119 - v38;
  v142 = type metadata accessor for _HashNode.Builder(0, a8, a11, a12);
  v130 = *(_QWORD *)(v142 - 8);
  v40 = MEMORY[0x24BDAC7A8](v142);
  v123 = (char *)&v119 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x24BDAC7A8](v40);
  v140 = (char *)&v119 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)&v119 - v44;
  v46 = a10;
  swift_storeEnumTagMultiPayload();
  v141 = v45;
  v152 = a11;
  v47 = (uint64_t)v39;
  v48 = a12;
  _HashNode.Builder.init(_:_:)(v144, v47, a8, a11, a12, v45);
  v153 = a8;
  v49 = _HashNode.isCollisionNode.getter(v148, v154, a8, a10, a12);
  v148 = TupleTypeMetadata2;
  if (v49)
  {
    v124 = (char *)_HashNode.UnsafeHandle.reverseItems.getter();
    result = MEMORY[0x23B830CB0]();
    if ((char *)result != v51)
    {
      if ((uint64_t)v51 >= result)
      {
        v123 = v51;
        while (result < (uint64_t)v51)
        {
          v52 = v153;
          v53 = v148;
          v54 = *(int *)(v148 + 48);
          v55 = v127;
          v56 = &v127[v54];
          v57 = *(_QWORD *)(v146 + 72);
          v147 = (int *)result;
          v154 = v13;
          v58 = &v124[v57 * result + v54];
          v59 = v138;
          v60 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
          v136 = &v124[v57 * result];
          v145 = v60;
          ((void (*)(char *))v60)(v127);
          v61 = v139;
          v62 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
          v140 = v58;
          v62(v56, v58, v46);
          v63 = v128;
          v64 = v46;
          v65 = &v128[*(int *)(v53 + 48)];
          v66 = v52;
          v67 = v129;
          v68 = v55;
          v69 = v64;
          v135 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
          v135(v128, v68, v66);
          v70 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
          v70(v65, v56, v69);
          v137 = v62;
          v62(v67, v65, v69);
          v71 = *(void (**)(char *, uint64_t))(v146 + 8);
          v71(v63, v53);
          v72 = v126;
          v73 = v154;
          v150(v67);
          v154 = v73;
          if (v73)
          {
            (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v69);
            return (*(uint64_t (**)(_BYTE *, uint64_t))(v130 + 8))(v141, v142);
          }
          (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v69);
          v74 = v143;
          v75 = v152;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v72, 1, v152) == 1)
          {
            (*(void (**)(char *, uint64_t))(v132 + 8))(v72, v133);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v125, v72, v75);
            v76 = v148;
            v77 = v120;
            v122 = &v120[*(int *)(v148 + 48)];
            v78 = v122;
            v79 = v153;
            v145(v120, v136, v153);
            v137(v78, v140, v69);
            v80 = v121;
            v81 = &v121[*(int *)(v76 + 48)];
            v135(v121, v77, v79);
            v70(v81, v122, v69);
            v82 = (uint64_t)v134;
            v145(v134, v80, v79);
            v71(v80, v76);
            v83 = (uint64_t)v131;
            v84 = v125;
            v85 = v152;
            (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v131, v125, v152);
            _HashNode.Builder.addNewCollision(_:_:_:)(v144, v82, v83, *v149, v142);
            (*(void (**)(char *, uint64_t))(v74 + 8))(v84, v85);
          }
          v13 = v154;
          v46 = v69;
          v51 = v123;
          result = (uint64_t)v147 + 1;
          if (v123 == (char *)v147 + 1)
            return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v130 + 32))(v119, v141, v142);
        }
        __break(1u);
      }
      __break(1u);
      return result;
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v130 + 32))(v119, v141, v142);
  }
  v86 = v12;
  v135 = (void (*)(char *, char *, uint64_t))a10;
  v87 = (uint64_t)v147;
  v88 = *v147;
  if (*v147)
  {
    v89 = 0;
    v90 = v139;
    v91 = (char *)v137;
    while (1)
    {
      LODWORD(v146) = v88;
      LODWORD(v145) = v89;
      v97 = v135;
      v98 = _HashNode.UnsafeHandle.itemPtr(at:)(v89, v87, (uint64_t)v149);
      (*(void (**)(char *, uint64_t, _QWORD))(v90 + 16))(v91, v98 + *(int *)(TupleTypeMetadata2 + 48), v97);
      v99 = v48;
      v100 = v136;
      v150(v91);
      if (v86)
        break;
      v154 = 0;
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v90 + 8))(v91, v97);
      v101 = v143;
      v102 = v152;
      v103 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48))(v100, 1, v152);
      v104 = v100;
      if (v103 == 1)
      {
        (*(void (**)(char *, uint64_t))(v132 + 8))(v100, v133);
        TupleTypeMetadata2 = v148;
        v92 = v146;
      }
      else
      {
        v92 = v146;
        v93 = __clz(__rbit32(v146));
        v94 = v124;
        (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v124, v104, v102);
        v95 = (uint64_t)v134;
        (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v134, v98, v153);
        v96 = (uint64_t)v131;
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v131, v94, v102);
        _HashNode.Builder.addNewItem(_:_:at:)(v144, v95, v96, v93, v142);
        v90 = v139;
        (*(void (**)(char *, uint64_t))(v101 + 8))(v94, v102);
        TupleTypeMetadata2 = v148;
      }
      v89 = (_DWORD)v145 + 1;
      v88 = (v92 - 1) & v92;
      v48 = v99;
      v87 = (uint64_t)v147;
      v86 = v154;
      if (!v88)
        goto LABEL_18;
    }
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v90 + 8))(v91, v97);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v130 + 8))(v141, v142);
  }
  else
  {
LABEL_18:
    v105 = *(_DWORD *)(v87 + 4);
    if (!v105)
      return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v130 + 32))(v119, v141, v142);
    v154 = v48;
    v106 = 0;
    LODWORD(v148) = v144 + 5;
    v107 = v135;
    v108 = v86;
    v109 = (uint64_t)v123;
    v110 = v154;
    while (1)
    {
      v111 = v153;
      v112 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v106, v147, v149, v153, v107, v110);
      v113 = *v112;
      v114 = v112[1];
      swift_retain();
      _HashNode.compactMapValues<A>(_:_:)(v148, v150, v151, v113, v114, v111, v107, v152, v110);
      if (v108)
        break;
      swift_release();
      v106 = (v106 + 1);
      v115 = (v105 - 1) & v105;
      v116 = __clz(__rbit32(v105));
      v117 = v130;
      v118 = v142;
      (*(void (**)(uint64_t, char *, uint64_t))(v130 + 16))(v109, v140, v142);
      _HashNode.Builder.addNewChildBranch(_:_:at:)(v144, v109, v116, v118);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v140, v118);
      v105 = v115;
      if (!v115)
        return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v130 + 32))(v119, v141, v142);
    }
    (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v141, v142);
    return swift_release();
  }
}

_QWORD *sub_238336D34(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    if (*result)
      goto LABEL_3;
    if (a2 != 1)
    {
      if (!result[1])
      {
        v2 = a2 - 2;
        if (a2 == 2)
          return result;
        v3 = result + 2;
        v4 = 128;
        while (!*v3++)
        {
          v4 += 64;
          if (!--v2)
          {
            if (((a2 << 6) & 0x8000000000000000) == 0)
              return result;
            __break(1u);
            break;
          }
        }
        if (v4 < 0)
        {
          __break(1u);
          goto LABEL_16;
        }
      }
LABEL_3:
      if (((a2 << 6) & 0x8000000000000000) == 0)
        return result;
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

uint64_t BitSet.Counted._bits.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*BitSet.Counted._bits.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t BitSet.Counted._count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t BitSet.Counted._count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*BitSet.Counted._count.modify())(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t BitSet.Counted.init()()
{
  return MEMORY[0x24BEE4AF8];
}

int8x8_t *BitSet.Counted.init(_:)(int8x8_t *result)
{
  int8x8_t v1;
  uint64_t v2;
  int8x8_t *v3;
  uint64_t v4;
  uint8x8_t v5;
  BOOL v6;

  v1 = result[2];
  if (v1)
  {
    v2 = 0;
    v3 = result + 4;
    v4 = 8 * *(_QWORD *)&v1;
    while (1)
    {
      v5 = (uint8x8_t)vcnt_s8(*v3);
      v5.i16[0] = vaddlv_u8(v5);
      v6 = __OFADD__(v2, v5.u32[0]);
      v2 += v5.u32[0];
      if (v6)
        break;
      ++v3;
      v4 -= 8;
      if (!v4)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.init<A>(words:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238336FF4(a1, a2, a3, (uint64_t (*)(void))sub_2383397A8);
}

int64_t BitSet.Counted.init<A>(bitPattern:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v16 - v6;
  sub_23835B4CC();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = sub_2383397A8((uint64_t)v7, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8) + 8), v9, v10, v11, v12, v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v14;
}

int64_t BitSet.Counted.init(_:)(int64_t a1)
{
  int64_t result;
  uint64_t v2;
  uint64_t v3;
  int8x8_t *v4;
  uint64_t v5;
  uint8x8_t v6;
  BOOL v7;

  result = _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(a1);
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (int8x8_t *)(result + 32);
    v5 = 8 * v2;
    while (1)
    {
      v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7)
        break;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238336FF4(a1, a2, a3, (uint64_t (*)(void))sub_238339804);
}

uint64_t sub_238336FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;

  v6 = a4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

unint64_t BitSet.Counted.init(_:)(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t *v4;
  uint64_t v5;
  uint8x8_t v6;
  BOOL v7;

  if (((a2 | result) & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  result = (unint64_t)_s19CollectionsInternal6BitSetV6_rangeACSnySuG_tcfC_0(result, a2);
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (int8x8_t *)(result + 32);
    v5 = 8 * v2;
    while (1)
    {
      v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7)
        break;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

int8x8_t ***(*BitSet.Counted.uncounted.modify(_QWORD *a1))(int8x8_t ***result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_2383370C4;
}

int8x8_t ***sub_2383370C4(int8x8_t ***result, char a2)
{
  int8x8_t *v2;
  int8x8_t *v3;
  int8x8_t v4;
  int8x8_t *v5;
  uint64_t v6;
  uint8x8_t v7;
  BOOL v8;
  uint64_t v9;
  uint8x8_t v10;

  v2 = **result;
  v3 = v2 + 4;
  v4 = v2[2];
  v5 = 0;
  if ((a2 & 1) == 0)
  {
    if (v4)
    {
      v9 = 8 * *(_QWORD *)&v4;
      do
      {
        v10 = (uint8x8_t)vcnt_s8(*v3);
        v10.i16[0] = vaddlv_u8(v10);
        v8 = __OFADD__(v5, v10.u32[0]);
        v5 = (int8x8_t *)((char *)v5 + v10.u32[0]);
        if (v8)
          goto LABEL_13;
        ++v3;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_11:
    (*result)[1] = v5;
    return result;
  }
  if (!*(_QWORD *)&v4)
    goto LABEL_11;
  v6 = 8 * *(_QWORD *)&v4;
  while (1)
  {
    v7 = (uint8x8_t)vcnt_s8(*v3);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = __OFADD__(v5, v7.u32[0]);
    v5 = (int8x8_t *)((char *)v5 + v7.u32[0]);
    if (v8)
      break;
    ++v3;
    v6 -= 8;
    if (!v6)
      goto LABEL_11;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t BitSet.Counted.uncounted.setter(int8x8_t *a1)
{
  int8x8_t **v1;
  uint64_t result;
  int8x8_t v4;
  int8x8_t *v5;
  int8x8_t *v6;
  uint64_t v7;
  uint8x8_t v8;
  BOOL v9;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  v4 = a1[2];
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 4;
    v7 = 8 * *(_QWORD *)&v4;
    while (1)
    {
      v8 = (uint8x8_t)vcnt_s8(*v6);
      v8.i16[0] = vaddlv_u8(v8);
      v9 = __OFADD__(v5, v8.u32[0]);
      v5 = (int8x8_t *)((char *)v5 + v8.u32[0]);
      if (v9)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v5 = 0;
LABEL_7:
    v1[1] = v5;
  }
  return result;
}

uint64_t BitSet.counted.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int8x8_t *v3;
  uint64_t v4;
  uint8x8_t v5;
  BOOL v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return swift_bridgeObjectRetain();
  v2 = 0;
  v3 = (int8x8_t *)(result + 32);
  v4 = 8 * v1;
  while (1)
  {
    v5 = (uint8x8_t)vcnt_s8(*v3);
    v5.i16[0] = vaddlv_u8(v5);
    v6 = __OFADD__(v2, v5.u32[0]);
    v2 += v5.u32[0];
    if (v6)
      break;
    ++v3;
    v4 -= 8;
    if (!v4)
      return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t (*BitSet.counted.modify(uint64_t (*result)(uint64_t a1)))(uint64_t a1)
{
  int8x8_t **v1;
  int8x8_t *v2;
  int8x8_t v3;
  uint64_t v4;
  int8x8_t *v5;
  uint64_t v6;
  uint8x8_t v7;
  BOOL v8;

  *((_QWORD *)result + 2) = v1;
  v2 = *v1;
  v3 = (*v1)[2];
  if (v3)
  {
    v4 = 0;
    v5 = v2 + 4;
    v6 = 8 * *(_QWORD *)&v3;
    while (1)
    {
      v7 = (uint8x8_t)vcnt_s8(*v5);
      v7.i16[0] = vaddlv_u8(v7);
      v8 = __OFADD__(v4, v7.u32[0]);
      v4 += v7.u32[0];
      if (v8)
        break;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_7:
    *(_QWORD *)result = v2;
    *((_QWORD *)result + 1) = v4;
    *v1 = (int8x8_t *)sub_238319938(MEMORY[0x24BEE4AF8]);
    return sub_2383372A8;
  }
  return result;
}

uint64_t sub_2383372A8(uint64_t a1)
{
  **(_QWORD **)(a1 + 16) = *(_QWORD *)a1;
  return swift_bridgeObjectRelease();
}

uint64_t BitSet.counted.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  sub_238319938(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t BitSet.Counted.underestimatedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t BitSet.Counted.makeIterator()()
{
  return swift_bridgeObjectRetain();
}

Swift::Bool_optional __swiftcall BitSet.Counted._customContainsEquatableElement(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 < 0 || (unint64_t)a1 >> 6 >= *(_QWORD *)(v1 + 16))
    LOBYTE(v2) = 0;
  else
    return (Swift::Bool_optional)((*(_QWORD *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1);
  return (Swift::Bool_optional)v2;
}

Swift::Bool_optional sub_238337370(Swift::Int *a1)
{
  return BitSet.Counted._customContainsEquatableElement(_:)(*a1);
}

uint64_t sub_23833737C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_23833B304(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *sub_2383373B0(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_23832D784(a1, a2, a3, *v3);
}

BOOL BitSet.Counted.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

_QWORD *BitSet.Counted.startIndex.getter(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = result[2];
  if (!v1)
    return (_QWORD *)(v1 << 6);
  v2 = result[4];
  if (v2)
  {
    v3 = 0;
    return (_QWORD *)(__clz(__rbit64(v2)) | v3);
  }
  if (v1 == 1)
    return (_QWORD *)(v1 << 6);
  v2 = result[5];
  if (v2)
  {
    v3 = 64;
    return (_QWORD *)(__clz(__rbit64(v2)) | v3);
  }
  v4 = v1 - 2;
  if (v1 == 2)
    return (_QWORD *)(v1 << 6);
  v5 = result + 6;
  v3 = 128;
  while (1)
  {
    v6 = *v5++;
    v2 = v6;
    if (v6)
      break;
    v3 += 64;
    if (!--v4)
    {
      result = (_QWORD *)(v1 << 6);
      if (((v1 << 6) & 0x8000000000000000) == 0)
        return result;
      goto LABEL_17;
    }
  }
  if ((v3 & 0x8000000000000000) == 0)
    return (_QWORD *)(__clz(__rbit64(v2)) | v3);
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t BitSet.Counted.endIndex.getter(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16) << 6;
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t BitSet.Counted.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238337474(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD))_UnsafeBitSet.index(after:));
}

uint64_t BitSet.Counted.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238337474(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD))_UnsafeBitSet.index(before:));
}

uint64_t sub_238337474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  return a4(a1, a2 + 32, *(_QWORD *)(a2 + 16));
}

uint64_t BitSet.Counted.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23833749C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))_UnsafeBitSet.distance(from:to:));
}

uint64_t BitSet.Counted.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23833749C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))_UnsafeBitSet.index(_:offsetBy:));
}

uint64_t sub_23833749C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  return a5(a1, a2, a3 + 32, *(_QWORD *)(a3 + 16));
}

Swift::UInt BitSet.Counted.index(_:offsetBy:limitedBy:)(Swift::UInt a1, uint64_t a2, Swift::UInt a3, uint64_t a4)
{
  Swift::UInt result;
  char v5;

  result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4 + 32, *(_QWORD *)(a4 + 16));
  if ((v5 & 1) != 0)
    return 0;
  return result;
}

unint64_t BitSet.Counted._customIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
    return 0;
  if (result >> 6 >= *(_QWORD *)(a2 + 16))
    return 0;
  if ((*(_QWORD *)(a2 + 8 * (result >> 6) + 32) & (1 << result)) == 0)
    return 0;
  return result;
}

unint64_t BitSet.Counted._customLastIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
    return 0;
  if (result >> 6 >= *(_QWORD *)(a2 + 16))
    return 0;
  if ((*(_QWORD *)(a2 + 8 * (result >> 6) + 32) & (1 << result)) == 0)
    return 0;
  return result;
}

_QWORD *sub_238337584@<X0>(_QWORD *a1@<X8>)
{
  _QWORD **v1;
  _QWORD *result;

  result = BitSet.Counted.startIndex.getter(*v1);
  *a1 = result;
  return result;
}

_QWORD *sub_2383375AC@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  v7 = *(_QWORD **)v2;
  v6 = *(_QWORD *)(v2 + 8);
  result = BitSet.Counted.startIndex.getter(v7);
  v9 = v7[2] << 6;
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v9 < (unint64_t)result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < (unint64_t)result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 >= v5)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = (unint64_t)v7;
    a2[3] = v6;
    return (_QWORD *)swift_bridgeObjectRetain();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_238337628@<X0>(_QWORD *a1@<X8>)
{
  _QWORD **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = sub_2383396A0(*v1);
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return swift_bridgeObjectRetain();
}

BOOL sub_238337654()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == 0;
}

uint64_t sub_238337664@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23829B020(a1, (uint64_t (*)(_QWORD, _QWORD))BitSet.Counted._customIndexOfEquatableElement(_:), a2);
}

uint64_t sub_238337670@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23829B020(a1, (uint64_t (*)(_QWORD, _QWORD))BitSet.Counted._customLastIndexOfEquatableElement(_:), a2);
}

uint64_t BitSet.Counted.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  _BYTE v7[24];
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23835BAA8();
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v4; ++i)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_23835B8EC();
      if (v2)
        break;
    }
    swift_bridgeObjectRelease();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t BitSet.Counted.init(from:)(uint64_t a1)
{
  return sub_2383398C4(a1);
}

uint64_t sub_238337760@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_2383398C4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_238337788(_QWORD *a1)
{
  uint64_t *v1;

  return BitSet.Counted.encode(to:)(a1, *v1);
}

uint64_t BitSet.Counted.debugDescription.getter(uint64_t a1)
{
  return sub_2383335B0(0x432E746553746942, 0xEE006465746E756FLL, a1);
}

uint64_t sub_2383377CC()
{
  uint64_t *v0;

  return sub_2383335B0(0x432E746553746942, 0xEE006465746E756FLL, *v0);
}

uint64_t BitSet.Counted.customMirror.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = sub_23835BA60();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0B10);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = a1;
  v13[1] = a1;
  v9 = *MEMORY[0x24BEE4378];
  v10 = sub_23835BA54();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  sub_238270F4C();
  swift_bridgeObjectRetain_n();
  return sub_23835BA6C();
}

uint64_t sub_238337950()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = sub_23835BA60();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0B10);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *v0;
  v12[1] = v12[0];
  v8 = *MEMORY[0x24BEE4378];
  v9 = sub_23835BA54();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  sub_238270F4C();
  swift_bridgeObjectRetain_n();
  return sub_23835BA6C();
}

BOOL static BitSet.Counted.== infix(_:_:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return a2 == a4 && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a1, a3);
}

uint64_t BitSet.Counted.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23835BA00();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 8;
      result = sub_23835BA00();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BitSet.Counted.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23835B9E8();
  v2 = *(_QWORD *)(a1 + 16);
  sub_23835BA00();
  if (v2)
  {
    v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_23835BA00();
      --v2;
    }
    while (v2);
  }
  return sub_23835BA48();
}

uint64_t sub_238337B7C()
{
  uint64_t *v0;

  return BitSet.Counted.hashValue.getter(*v0);
}

uint64_t BitSet.Counted.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int8x8_t *v5;
  uint64_t v6;
  uint8x8_t v7;
  BOOL v8;

  v1 = sub_238319938(a1);
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
    return v1;
  v4 = 0;
  v5 = (int8x8_t *)(v1 + 32);
  v6 = 8 * v3;
  while (1)
  {
    v7 = (uint8x8_t)vcnt_s8(*v5);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = __OFADD__(v4, v7.u32[0]);
    v4 += v7.u32[0];
    if (v8)
      break;
    ++v5;
    v6 -= 8;
    if (!v6)
      return v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_238337BF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  uint64_t v8;
  uint8x8_t v9;
  BOOL v10;

  v3 = sub_238319938(a1);
  result = swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = (int8x8_t *)(v3 + 32);
    v8 = 8 * v5;
    while (1)
    {
      v9 = (uint8x8_t)vcnt_s8(*v7);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = __OFADD__(v6, v9.u32[0]);
      v6 += v9.u32[0];
      if (v10)
        break;
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v6 = 0;
LABEL_7:
    *a2 = v3;
    a2[1] = v6;
  }
  return result;
}

char *BitSet.Counted.init(reservingCapacity:)(uint64_t a1)
{
  return sub_23826C3AC(0, ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6, 0, MEMORY[0x24BEE4AF8]);
}

Swift::Void __swiftcall BitSet.Counted.reserveCapacity(_:)(Swift::Int a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v5;

  v2 = ((a1 & (unint64_t)~(a1 >> 63)) + 64) >> 6;
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v2 > *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v3 + 2) <= v2)
      v5 = v2;
    else
      v5 = *((_QWORD *)v3 + 2);
    v3 = sub_23826C3AC(isUniquelyReferenced_nonNull_native, v5, 0, v3);
  }
  *v1 = v3;
}

uint64_t BitSet.Counted.subscript.getter(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0 || a1 >> 6 >= *(_QWORD *)(a2 + 16))
    return 0;
  else
    return (*(_QWORD *)(a2 + 8 * (a1 >> 6) + 32) >> a1) & 1;
}

Swift::Bool __swiftcall BitSet.Counted.contains(_:)(Swift::Int a1)
{
  uint64_t v1;
  _BOOL8 v2;

  if (a1 < 0 || (unint64_t)a1 >> 6 >= *(_QWORD *)(v1 + 16))
    LOBYTE(v2) = 0;
  else
    return (*(_QWORD *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1;
  return v2;
}

uint64_t BitSet.Counted.subscript.setter(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if ((result & 1) != 0)
  {
    result = *(_OWORD *)&BitSet.insert(_:)(a2);
    if ((result & 1) == 0)
      return result;
    v4 = v2[1];
    v5 = __OFADD__(v4, 1);
    v6 = v4 + 1;
    if (!v5)
      goto LABEL_12;
    __break(1u);
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    v7 = (char *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_23826C260((uint64_t)v7);
    if (a2 >> 6 >= *((_QWORD *)v7 + 2))
    {
      v13 = 0;
      *v2 = (uint64_t)v7;
      return (uint64_t)sub_2382FC0D0(&v13, v2);
    }
    else
    {
      v8 = &v7[8 * (a2 >> 6)];
      v9 = 1 << a2;
      v10 = *((_QWORD *)v8 + 4);
      v11 = v10 & (1 << a2);
      *((_QWORD *)v8 + 4) = v10 & ~v9;
      v13 = v11 != 0;
      *v2 = (uint64_t)v7;
      result = (uint64_t)sub_2382FC0D0(&v13, v2);
      if (v11)
      {
        v12 = v2[1];
        v5 = __OFSUB__(v12, 1);
        v6 = v12 - 1;
        if (!v5)
        {
LABEL_12:
          v2[1] = v6;
          return result;
        }
        __break(1u);
      }
    }
  }
  return result;
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall BitSet.Counted.insert(_:)(Swift::Int a1)
{
  uint64_t v1;
  Swift::Bool inserted;
  Swift::Int memberAfterInsert;
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  Swift::tuple_inserted_Bool_memberAfterInsert_Int result;

  v4 = BitSet.insert(_:)(a1);
  memberAfterInsert = v4.memberAfterInsert;
  inserted = v4.inserted;
  if (v4.inserted)
  {
    v5 = *(_QWORD *)(v1 + 8);
    v6 = __OFADD__(v5, 1);
    v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
      goto LABEL_6;
    }
    *(_QWORD *)(v1 + 8) = v7;
  }
  inserted = v4.inserted;
LABEL_6:
  result.memberAfterInsert = memberAfterInsert;
  result.inserted = inserted;
  return result;
}

Swift::Int_optional __swiftcall BitSet.Counted.remove(_:)(Swift::Int a1)
{
  uint64_t *v1;
  unint64_t v2;
  char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  Swift::Bool v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  Swift::Int_optional result;

  if (a1 < 0)
    goto LABEL_9;
  v2 = a1;
  v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_23826C260((uint64_t)v3);
  if (v2 >> 6 >= *((_QWORD *)v3 + 2))
  {
    v13 = 0;
    *v1 = (uint64_t)v3;
    sub_2382FC0D0(&v13, v1);
LABEL_9:
    v2 = 0;
    v5 = 1;
    goto LABEL_10;
  }
  v4 = &v3[8 * (v2 >> 6)];
  v5 = 1;
  v6 = *((_QWORD *)v4 + 4);
  v7 = v6 & (1 << v2);
  *((_QWORD *)v4 + 4) = v6 & ~(1 << v2);
  v13 = v7 != 0;
  *v1 = (uint64_t)v3;
  v8 = sub_2382FC0D0(&v13, v1);
  if (v7)
  {
    v10 = v1[1];
    v11 = __OFSUB__(v10, 1);
    v12 = v10 - 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_13;
    }
    v5 = 0;
    v1[1] = v12;
  }
  else
  {
    v2 = 0;
  }
LABEL_10:
  v8 = (_BYTE *)v2;
  v9 = v5;
LABEL_13:
  result.value = (Swift::Int)v8;
  result.is_nil = v9;
  return result;
}

uint64_t (*BitSet.Counted.subscript.modify(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0 || a2 >> 6 >= *(_QWORD *)(*(_QWORD *)v2 + 16))
    LOBYTE(v3) = 0;
  else
    v3 = (*(_QWORD *)(*(_QWORD *)v2 + 8 * (a2 >> 6) + 32) >> a2) & 1;
  *(_BYTE *)(a1 + 16) = v3;
  return sub_238337FBC;
}

uint64_t sub_238337FBC(uint64_t a1)
{
  return BitSet.Counted.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(_QWORD *)a1);
}

unint64_t BitSet.Counted.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;

  sub_2382E30BC(a3 + 32, *(_QWORD *)(a3 + 16), a1, a2, &v5);
  v3 = v5;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t BitSet.Counted.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_2382E3450(a1, a2);
  swift_bridgeObjectRetain();
  return v2;
}

_BYTE *BitSet.Counted.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *result;
  BOOL v8;

  v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_23826C260((uint64_t)v3);
  if (a1 >> 6 >= *((_QWORD *)v3 + 2))
  {
    v8 = 0;
    *v1 = (uint64_t)v3;
    result = sub_2382FC0D0(&v8, v1);
  }
  else
  {
    v4 = &v3[8 * (a1 >> 6)];
    v5 = *((_QWORD *)v4 + 4);
    v6 = v5 & (1 << a1);
    *((_QWORD *)v4 + 4) = v5 & ~(1 << a1);
    v8 = v6 != 0;
    *v1 = (uint64_t)v3;
    result = sub_2382FC0D0(&v8, v1);
    if (v6)
    {
      --v1[1];
      return (_BYTE *)a1;
    }
  }
  __break(1u);
  return result;
}

int64_t BitSet.Counted.filter(_:)(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int64_t v7;
  int64_t result;
  uint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  uint8x8_t v13;
  BOOL v14;
  uint64_t v15[2];

  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = sub_23835B088();
    *(_QWORD *)(v7 + 16) = v6;
    bzero((void *)(v7 + 32), 8 * v6);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
    v6 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  }
  v15[0] = v7 + 32;
  v15[1] = v6;
  sub_2382E3304(v15, a3, a1);
  if (v3)
    return swift_bridgeObjectRelease();
  result = _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0(v7);
  v9 = *(_QWORD *)(result + 16);
  if (v9)
  {
    v10 = 0;
    v11 = (int8x8_t *)(result + 32);
    v12 = 8 * v9;
    while (1)
    {
      v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14)
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.sorted()()
{
  return swift_bridgeObjectRetain();
}

Swift::Int_optional __swiftcall BitSet.Counted.min()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  Swift::Bool v3;
  unint64_t v4;
  Swift::Int_optional result;

  v1 = v0;
  v2 = BitSet.Counted.startIndex.getter(v0);
  v4 = v1[2] << 6;
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2 == (_QWORD *)v4;
    if (v2 == (_QWORD *)v4)
      v2 = 0;
  }
  result.value = (Swift::Int)v2;
  result.is_nil = v3;
  return result;
}

Swift::Int_optional __swiftcall BitSet.Counted.max()()
{
  Swift::Int v0;
  _BOOL8 v1;
  _BOOL8 v2;
  uint64_t v3;
  Swift::Int_optional result;

  v2 = v1;
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 16);
    if (v3 << 6 < 0)
    {
      __break(1u);
      goto LABEL_7;
    }
    v0 = _UnsafeBitSet.index(before:)(v3 << 6, v0 + 32, v3);
  }
  else
  {
    v0 = 0;
  }
  LOBYTE(v1) = !v2;
LABEL_7:
  result.is_nil = v1;
  result.value = v0;
  return result;
}

int64_t static BitSet.Counted.random(upTo:)(unint64_t a1)
{
  int64_t result;
  uint64_t v2;
  uint64_t v3;
  int8x8_t *v4;
  uint64_t v5;
  uint8x8_t v6;
  BOOL v7;

  result = sub_2382AB680(a1);
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (int8x8_t *)(result + 32);
    v5 = 8 * v2;
    while (1)
    {
      v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7)
        break;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    __break(1u);
  }
  return result;
}

int64_t static BitSet.Counted.random<A>(upTo:using:)(unint64_t a1)
{
  int64_t result;
  uint64_t v2;
  uint64_t v3;
  int8x8_t *v4;
  uint64_t v5;
  uint8x8_t v6;
  BOOL v7;

  result = static BitSet.random<A>(upTo:using:)(a1);
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (int8x8_t *)(result + 32);
    v5 = 8 * v2;
    while (1)
    {
      v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      v7 = __OFADD__(v3, v6.u32[0]);
      v3 += v6.u32[0];
      if (v7)
        break;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall BitSet.Counted.update(with:)(Swift::Int with)
{
  Swift::Bool inserted;
  Swift::Int v3;
  Swift::Bool v4;
  Swift::Int v5;
  Swift::Int_optional result;

  inserted = BitSet.insert(_:)(with).inserted;
  if (inserted)
    v3 = with;
  else
    v3 = 0;
  v4 = !inserted;
  v5 = v3;
  result.value = v5;
  result.is_nil = v4;
  return result;
}

BOOL sub_2383383DC(Swift::Int *a1)
{
  return BitSet.Counted.contains(_:)(*a1);
}

uint64_t sub_2383383E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_238338424(a1, (uint64_t (*)(_QWORD, _QWORD))BitSet.union(_:), a2);
}

uint64_t BitSet.Counted.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2383386BC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.union(_:));
}

{
  return sub_238338A50(a1, a2, a3, a4, (uint64_t (*)(void))BitSet.union(_:));
}

uint64_t sub_238338400@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_238338628(a1, (uint64_t (*)(_QWORD, _QWORD))BitSet.intersection(_:), a2);
}

uint64_t BitSet.Counted.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2383386BC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.intersection(_:));
}

uint64_t sub_238338418@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_238338424(a1, (uint64_t (*)(_QWORD, _QWORD))BitSet.symmetricDifference(_:), a2);
}

uint64_t sub_238338424@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t *v9;
  uint64_t v10;
  uint8x8_t v11;
  BOOL v12;

  result = a2(*a1, *v3);
  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v8 = 0;
    v9 = (int8x8_t *)(result + 32);
    v10 = 8 * v7;
    while (1)
    {
      v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      v12 = __OFADD__(v8, v11.u32[0]);
      v8 += v11.u32[0];
      if (v12)
        break;
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v8 = 0;
LABEL_7:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t BitSet.Counted.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2383386BC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.symmetricDifference(_:));
}

{
  return sub_238338A50(a1, a2, a3, a4, (uint64_t (*)(void))BitSet.symmetricDifference(_:));
}

uint64_t sub_2383384CC(Swift::Int *a1, Swift::Int *a2)
{
  uint64_t v2;
  uint64_t result;
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v5 = BitSet.insert(_:)(*a2);
  result = *(_QWORD *)&v5.inserted;
  if (!v5.inserted)
    goto LABEL_4;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (!v7)
  {
    *(_QWORD *)(v2 + 8) = v8;
LABEL_4:
    *a1 = v5.memberAfterInsert;
    return v5.inserted;
  }
  __break(1u);
  return result;
}

Swift::Int sub_238338510@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4;

  v4 = BitSet.Counted.remove(_:)(*a1);
  *(_QWORD *)a2 = v4.value;
  *(_BYTE *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

uint64_t sub_238338540(uint64_t *a1, uint64_t a2)
{
  BitSet.Counted.formUnion(_:)(*a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t BitSet.Counted.formUnion(_:)(uint64_t a1, uint64_t a2)
{
  return sub_2383385BC(a1, a2, (uint64_t (*)(void))BitSet.formUnion(_:));
}

uint64_t sub_238338574(uint64_t *a1, uint64_t a2)
{
  return BitSet.Counted.formIntersection(_:)(*a1, a2);
}

uint64_t BitSet.Counted.formIntersection(_:)(uint64_t a1, uint64_t a2)
{
  return sub_2383385BC(a1, a2, (uint64_t (*)(void))BitSet.formIntersection(_:));
}

uint64_t sub_238338588(uint64_t *a1, uint64_t a2)
{
  BitSet.Counted.formSymmetricDifference(_:)(*a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t BitSet.Counted.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2)
{
  return sub_2383385BC(a1, a2, (uint64_t (*)(void))BitSet.formSymmetricDifference(_:));
}

uint64_t sub_2383385BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int8x8_t **v3;
  uint64_t result;
  int8x8_t v5;
  int8x8_t *v6;
  int8x8_t *v7;
  uint64_t v8;
  uint8x8_t v9;
  BOOL v10;

  result = a3();
  v5 = (*v3)[2];
  if (v5)
  {
    v6 = 0;
    v7 = *v3 + 4;
    v8 = 8 * *(_QWORD *)&v5;
    while (1)
    {
      v9 = (uint8x8_t)vcnt_s8(*v7);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = __OFADD__(v6, v9.u32[0]);
      v6 = (int8x8_t *)((char *)v6 + v9.u32[0]);
      if (v10)
        break;
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v6 = 0;
LABEL_7:
    v3[1] = v6;
  }
  return result;
}

uint64_t sub_23833861C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_238338628(a1, (uint64_t (*)(_QWORD, _QWORD))BitSet.subtracting(_:), a2);
}

uint64_t sub_238338628@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t *v9;
  uint64_t v10;
  uint8x8_t v11;
  BOOL v12;

  result = a2(*a1, *v3);
  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v8 = 0;
    v9 = (int8x8_t *)(result + 32);
    v10 = 8 * v7;
    while (1)
    {
      v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      v12 = __OFADD__(v8, v11.u32[0]);
      v8 += v11.u32[0];
      if (v12)
        break;
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v8 = 0;
LABEL_7:
    result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t BitSet.Counted.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2383386BC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))BitSet.subtracting(_:));
}

uint64_t sub_2383386BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  BOOL v11;

  result = a5(a1, a3);
  v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    v7 = 0;
    v8 = (int8x8_t *)(result + 32);
    v9 = 8 * v6;
    while (1)
    {
      v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        return result;
    }
    __break(1u);
  }
  return result;
}

BOOL sub_23833871C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(a1 + 8) >= *(_QWORD *)(v1 + 8) && BitSet.isSubset(of:)(*(_QWORD **)a1, *(_QWORD **)v1);
}

BOOL BitSet.Counted.isSubset(of:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return a2 >= a4 && BitSet.isSubset(of:)(a1, a3);
}

BOOL BitSet.Counted.isDisjoint(with:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return BitSet.isDisjoint(with:)(a1, a3);
}

BOOL sub_238338760(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 8) >= *(_QWORD *)(a1 + 8) && BitSet.isSubset(of:)(*(_QWORD **)v1, *(_QWORD **)a1);
}

BOOL BitSet.Counted.isSuperset(of:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return a4 >= a2 && BitSet.isSubset(of:)(a3, a1);
}

uint64_t sub_2383387A8@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = sub_238339804(a1, a2);
  v8 = v7;
  result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  *a3 = v6;
  a3[1] = v8;
  return result;
}

_BYTE *sub_238338800(int8x16_t **a1)
{
  return BitSet.Counted.subtract(_:)(*a1);
}

_BYTE *BitSet.Counted.subtract(_:)(int8x16_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE *result;
  uint64_t v18;
  uint64_t v19;
  int8x8_t *v20;
  uint64_t v21;
  uint8x8_t v22;
  BOOL v23;
  char v24;

  v24 = 1;
  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_26;
  while (1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (a1[1].i64[0] < v4)
      v4 = a1[1].u64[0];
    if (v4)
    {
      if (v4 < 6
        || ((v5 = 8 * v4 + 32, v3 + 32 < (unint64_t)a1->u64 + v5)
          ? (v6 = (unint64_t)&a1[2] >= v3 + v5)
          : (v6 = 1),
            !v6))
      {
        v7 = 0;
LABEL_16:
        v12 = v4 - v7;
        v13 = 8 * v7 + 32;
        v14 = (_QWORD *)(v3 + v13);
        v15 = (uint64_t *)((char *)a1->i64 + v13);
        do
        {
          v16 = *v15++;
          *v14++ &= ~v16;
          --v12;
        }
        while (v12);
        goto LABEL_18;
      }
      v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      v8 = a1 + 3;
      v9 = (int8x16_t *)(v3 + 48);
      v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v11 = vbicq_s8(*v9, *v8);
        v9[-1] = vbicq_s8(v9[-1], v8[-1]);
        *v9 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v4 != v7)
        goto LABEL_16;
    }
LABEL_18:
    *v1 = v3;
    result = sub_2382FC0D0(&v24, v1);
    v18 = *(_QWORD *)(*v1 + 16);
    if (!v18)
      break;
    v19 = 0;
    v20 = (int8x8_t *)(*v1 + 32);
    v21 = 8 * v18;
    while (1)
    {
      v22 = (uint8x8_t)vcnt_s8(*v20);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = __OFADD__(v19, v22.u32[0]);
      v19 += v22.u32[0];
      if (v23)
        break;
      ++v20;
      v21 -= 8;
      if (!v21)
        goto LABEL_24;
    }
    __break(1u);
LABEL_26:
    v3 = (uint64_t)sub_23826C260(v3);
  }
  v19 = 0;
LABEL_24:
  v1[1] = v19;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE *result;
  uint64_t v18;
  uint64_t v19;
  int8x8_t *v20;
  uint64_t v21;
  uint8x8_t v22;
  BOOL v23;
  char v24;

  v24 = 1;
  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_26;
  while (1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (a1[1].i64[0] < v4)
      v4 = a1[1].u64[0];
    if (v4)
    {
      if (v4 < 6
        || ((v5 = 8 * v4 + 32, v3 + 32 < (unint64_t)a1->u64 + v5)
          ? (v6 = (unint64_t)&a1[2] >= v3 + v5)
          : (v6 = 1),
            !v6))
      {
        v7 = 0;
LABEL_16:
        v12 = v4 - v7;
        v13 = 8 * v7 + 32;
        v14 = (_QWORD *)(v3 + v13);
        v15 = (uint64_t *)((char *)a1->i64 + v13);
        do
        {
          v16 = *v15++;
          *v14++ &= ~v16;
          --v12;
        }
        while (v12);
        goto LABEL_18;
      }
      v7 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      v8 = a1 + 3;
      v9 = (int8x16_t *)(v3 + 48);
      v10 = v4 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v11 = vbicq_s8(*v9, *v8);
        v9[-1] = vbicq_s8(v9[-1], v8[-1]);
        *v9 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v4 != v7)
        goto LABEL_16;
    }
LABEL_18:
    *v1 = v3;
    result = sub_2382FC0D0(&v24, v1);
    v18 = *(_QWORD *)(*v1 + 16);
    if (!v18)
      break;
    v19 = 0;
    v20 = (int8x8_t *)(*v1 + 32);
    v21 = 8 * v18;
    while (1)
    {
      v22 = (uint8x8_t)vcnt_s8(*v20);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = __OFADD__(v19, v22.u32[0]);
      v19 += v22.u32[0];
      if (v23)
        break;
      ++v20;
      v21 -= 8;
      if (!v21)
        goto LABEL_24;
    }
    __break(1u);
LABEL_26:
    v3 = (uint64_t)sub_23826C260(v3);
  }
  v19 = 0;
LABEL_24:
  v1[1] = v19;
  return result;
}

uint64_t BitSet.Counted.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238338BC0(a1, a2, a3, (uint64_t (*)(void))BitSet.union(_:));
}

uint64_t BitSet.Counted.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_238338AB8(a1, a2, a3, a4, a5, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))BitSet.union<A>(_:));
}

uint64_t BitSet.Counted.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238338BC0(a1, a2, a3, (uint64_t (*)(void))BitSet.intersection(_:));
}

int8x8_t *BitSet.Counted.intersection(_:)(uint64_t a1, uint64_t a2, int8x8_t *a3)
{
  int8x8_t *result;
  int8x8_t v6;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  BOOL v11;

  swift_bridgeObjectRetain();
  BitSet.formIntersection(_:)(a1, a2);
  result = a3;
  v6 = a3[2];
  if (v6)
  {
    v7 = 0;
    v8 = a3 + 4;
    v9 = 8 * *(_QWORD *)&v6;
    while (1)
    {
      v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_238338AB8(a1, a2, a3, a4, a5, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))BitSet.intersection<A>(_:));
}

uint64_t BitSet.Counted.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238338BC0(a1, a2, a3, (uint64_t (*)(void))BitSet.symmetricDifference(_:));
}

uint64_t sub_238338A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  BOOL v11;

  result = a5();
  v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    v7 = 0;
    v8 = (int8x8_t *)(result + 32);
    v9 = 8 * v6;
    while (1)
    {
      v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t BitSet.Counted.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_238338AB8(a1, a2, a3, a4, a5, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))BitSet.symmetricDifference<A>(_:));
}

uint64_t sub_238338AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t *v19;
  uint64_t v20;
  uint8x8_t v21;
  BOOL v22;
  uint64_t v23;

  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v14);
  result = a6(v13, a2, a4, a5);
  v16 = result;
  v17 = *(_QWORD *)(result + 16);
  if (v17)
  {
    v18 = 0;
    v19 = (int8x8_t *)(result + 32);
    v20 = 8 * v17;
    while (1)
    {
      v21 = (uint8x8_t)vcnt_s8(*v19);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = __OFADD__(v18, v21.u32[0]);
      v18 += v21.u32[0];
      if (v22)
        break;
      ++v19;
      v20 -= 8;
      if (!v20)
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
    return v16;
  }
  return result;
}

uint64_t BitSet.Counted.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_238338BC0(a1, a2, a3, (uint64_t (*)(void))BitSet.subtracting(_:));
}

uint64_t sub_238338BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  uint64_t v8;
  uint8x8_t v9;
  BOOL v10;

  result = a4();
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = 0;
    v7 = (int8x8_t *)(result + 32);
    v8 = 8 * v5;
    while (1)
    {
      v9 = (uint8x8_t)vcnt_s8(*v7);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = __OFADD__(v6, v9.u32[0]);
      v6 += v9.u32[0];
      if (v10)
        break;
      ++v7;
      v8 -= 8;
      if (!v8)
        return result;
    }
    __break(1u);
  }
  return result;
}

char *BitSet.Counted.subtracting(_:)(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14[2];
  char v15;

  if (a2 <= 0)
    v4 = 0;
  else
    v4 = a1 & ~(a1 >> 63);
  v5 = a2 & ~(a2 >> 63);
  if (v4 != v5)
  {
    v15 = 1;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_14;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  for (i = *((_QWORD *)a3 + 2); i; i = *(_QWORD *)(v14[0] + 16))
  {
    v7 = 0;
    v8 = (int8x8_t *)(a3 + 32);
    v9 = 8 * i;
    while (1)
    {
      v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        return a3;
    }
    __break(1u);
LABEL_14:
    a3 = sub_23826C260((uint64_t)a3);
LABEL_11:
    v12 = *((_QWORD *)a3 + 2);
    v14[0] = (uint64_t)(a3 + 32);
    v14[1] = v12;
    _UnsafeBitSet.subtract(_:)(v4, v5);
    v14[0] = (uint64_t)a3;
    sub_2382FC0D0(&v15, v14);
    a3 = (char *)v14[0];
  }
  return a3;
}

uint64_t BitSet.Counted.subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t *v10;
  uint64_t v11;
  uint8x8_t v12;
  BOOL v13;

  result = sub_2382F0274(a1, a2, a4);
  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  if (v8)
  {
    v9 = 0;
    v10 = (int8x8_t *)(result + 32);
    v11 = 8 * v8;
    while (1)
    {
      v12 = (uint8x8_t)vcnt_s8(*v10);
      v12.i16[0] = vaddlv_u8(v12);
      v13 = __OFADD__(v9, v12.u32[0]);
      v9 += v12.u32[0];
      if (v13)
        break;
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    (*((void (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a1, a4);
    return v7;
  }
  return result;
}

uint64_t BitSet.Counted.formUnion(_:)(uint64_t a1)
{
  return sub_238338F48(a1, (uint64_t (*)(void))BitSet.formUnion(_:));
}

unint64_t BitSet.Counted.formUnion(_:)(unint64_t result, unint64_t a2)
{
  char **v2;
  char **v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int8x8_t *v11;
  uint64_t v12;
  uint8x8_t v13;
  BOOL v14;

  if (((a2 | result) & 0x8000000000000000) != 0)
    goto LABEL_16;
  v2 = v3;
  v4 = a2;
  v5 = result;
  v6 = *v3;
  if (result == a2)
    goto LABEL_8;
  v7 = (a2 + 63) >> 6;
  v8 = *((_QWORD *)v6 + 2);
  result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_23829E648(result, 0);
    v6 = *v3;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_17;
  while (1)
  {
    result = _UnsafeBitSet.formUnion(_:)(v5, v4);
    *v2 = v6;
LABEL_8:
    v9 = *((_QWORD *)v6 + 2);
    if (!v9)
      break;
    v10 = 0;
    v11 = (int8x8_t *)(v6 + 32);
    v12 = 8 * v9;
    while (1)
    {
      v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14)
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    v6 = sub_23826C260((uint64_t)v6);
  }
  v10 = 0;
LABEL_14:
  v2[1] = v10;
  return result;
}

uint64_t BitSet.Counted.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2383390D0(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))BitSet.formUnion<A>(_:));
}

uint64_t BitSet.Counted.formIntersection(_:)(uint64_t a1)
{
  return sub_238338F48(a1, (uint64_t (*)(void))BitSet.formIntersection(_:));
}

_BYTE *BitSet.Counted.formIntersection(_:)(uint64_t a1, uint64_t a2)
{
  int8x8_t **v2;
  _BYTE *result;
  int8x8_t v4;
  int8x8_t *v5;
  int8x8_t *v6;
  uint64_t v7;
  uint8x8_t v8;
  BOOL v9;

  result = BitSet.formIntersection(_:)(a1, a2);
  v4 = (*v2)[2];
  if (v4)
  {
    v5 = 0;
    v6 = *v2 + 4;
    v7 = 8 * *(_QWORD *)&v4;
    while (1)
    {
      v8 = (uint8x8_t)vcnt_s8(*v6);
      v8.i16[0] = vaddlv_u8(v8);
      v9 = __OFADD__(v5, v8.u32[0]);
      v5 = (int8x8_t *)((char *)v5 + v8.u32[0]);
      if (v9)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v5 = 0;
LABEL_7:
    v2[1] = v5;
  }
  return result;
}

uint64_t BitSet.Counted.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2383390D0(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))BitSet.formIntersection<A>(_:));
}

uint64_t BitSet.Counted.formSymmetricDifference(_:)(uint64_t a1)
{
  return sub_238338F48(a1, (uint64_t (*)(void))BitSet.formSymmetricDifference(_:));
}

uint64_t sub_238338F48(uint64_t a1, uint64_t (*a2)(void))
{
  int8x8_t **v2;
  uint64_t result;
  int8x8_t v4;
  int8x8_t *v5;
  int8x8_t *v6;
  uint64_t v7;
  uint8x8_t v8;
  BOOL v9;

  result = a2();
  v4 = (*v2)[2];
  if (v4)
  {
    v5 = 0;
    v6 = *v2 + 4;
    v7 = 8 * *(_QWORD *)&v4;
    while (1)
    {
      v8 = (uint8x8_t)vcnt_s8(*v6);
      v8.i16[0] = vaddlv_u8(v8);
      v9 = __OFADD__(v5, v8.u32[0]);
      v5 = (int8x8_t *)((char *)v5 + v8.u32[0]);
      if (v9)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v5 = 0;
LABEL_7:
    v2[1] = v5;
  }
  return result;
}

uint64_t BitSet.Counted.formSymmetricDifference(_:)(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  uint8x8_t v13;
  BOOL v14;
  char v15;

  if (((a2 | result) & 0x8000000000000000) != 0)
    goto LABEL_16;
  v2 = v3;
  v4 = a2;
  v5 = result;
  if (result == a2)
    goto LABEL_8;
  v7 = (a2 + 63) >> 6;
  v6 = (char *)*v3;
  v8 = *(_QWORD *)(*v3 + 16);
  result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_23829E648(result, 0);
    v6 = (char *)*v3;
  }
  v15 = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_17;
  while (1)
  {
    _UnsafeBitSet.formSymmetricDifference(_:)(v5, v4);
    *v2 = (uint64_t)v6;
    result = (uint64_t)sub_2382FC0D0(&v15, v2);
LABEL_8:
    v9 = *(_QWORD *)(*v2 + 16);
    if (!v9)
      break;
    v10 = 0;
    v11 = (int8x8_t *)(*v2 + 32);
    v12 = 8 * v9;
    while (1)
    {
      v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14)
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    v6 = sub_23826C260((uint64_t)v6);
  }
  v10 = 0;
LABEL_14:
  v2[1] = v10;
  return result;
}

uint64_t BitSet.Counted.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2383390D0(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))BitSet.formSymmetricDifference<A>(_:));
}

uint64_t sub_2383390D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t))
{
  int8x8_t **v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  int8x8_t v13;
  int8x8_t *v14;
  int8x8_t *v15;
  uint64_t v16;
  uint8x8_t v17;
  BOOL v18;
  uint64_t v19;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  result = a4(v11, a2, a3);
  v13 = (*v4)[2];
  if (v13)
  {
    v14 = 0;
    v15 = *v4 + 4;
    v16 = 8 * *(_QWORD *)&v13;
    while (1)
    {
      v17 = (uint8x8_t)vcnt_s8(*v15);
      v17.i16[0] = vaddlv_u8(v17);
      v18 = __OFADD__(v14, v17.u32[0]);
      v14 = (int8x8_t *)((char *)v14 + v17.u32[0]);
      if (v18)
        break;
      ++v15;
      v16 -= 8;
      if (!v16)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v14 = 0;
LABEL_7:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    v4[1] = v14;
  }
  return result;
}

uint64_t BitSet.Counted.subtract(_:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  BOOL v11;
  char v12;

  if (a2 <= 0)
    v4 = 0;
  else
    v4 = result & ~(result >> 63);
  v5 = a2 & ~(a2 >> 63);
  if (v4 == v5)
    goto LABEL_7;
  v12 = 1;
  v3 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_15;
  while (1)
  {
    _UnsafeBitSet.subtract(_:)(v4, v5);
    *v2 = v3;
    result = (uint64_t)sub_2382FC0D0(&v12, v2);
LABEL_7:
    v6 = *(_QWORD *)(*v2 + 16);
    if (!v6)
      break;
    v7 = 0;
    v8 = (int8x8_t *)(*v2 + 32);
    v9 = 8 * v6;
    while (1)
    {
      v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = __OFADD__(v7, v10.u32[0]);
      v7 += v10.u32[0];
      if (v11)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    v3 = (uint64_t)sub_23826C260(v3);
  }
  v7 = 0;
LABEL_13:
  v2[1] = v7;
  return result;
}

uint64_t BitSet.Counted.subtract<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  int8x8_t **v2;
  uint64_t result;
  int8x8_t v6;
  int8x8_t *v7;
  int8x8_t *v8;
  uint64_t v9;
  uint8x8_t v10;
  BOOL v11;

  result = BitSet.subtract<A>(_:)(a1, a2);
  v6 = (*v2)[2];
  if (v6)
  {
    v7 = 0;
    v8 = *v2 + 4;
    v9 = 8 * *(_QWORD *)&v6;
    while (1)
    {
      v10 = (uint8x8_t)vcnt_s8(*v8);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = __OFADD__(v7, v10.u32[0]);
      v7 = (int8x8_t *)((char *)v7 + v10.u32[0]);
      if (v11)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v7 = 0;
LABEL_7:
    result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
    v2[1] = v7;
  }
  return result;
}

BOOL BitSet.Counted.isEqualSet(to:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return a4 == a2 && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a3, a1);
}

BOOL BitSet.Counted.isEqualSet(to:)(_QWORD *a1, _QWORD *a2)
{
  return _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a2, a1);
}

unint64_t BitSet.Counted.isEqualSet(to:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) != 0 || a2 - result != a4 || (a2 & 0x8000000000000000) != 0)
  {
    return 0;
  }
  else
  {
    return _UnsafeBitSet.isEqualSet(to:)(result, a2, (_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16));
  }
  return result;
}

uint64_t BitSet.Counted.isEqualSet<A>(to:)(uint64_t a1, int8x8_t *a2, uint64_t a3, ValueMetadata *a4)
{
  if (sub_23835AFA4() <= a3)
    return BitSet.isEqualSet<A>(to:)(a1, a2, a4);
  else
    return 0;
}

uint64_t BitSet.Counted.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_238339674(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))_UnsafeBitSet.isSubset(of:));
}

uint64_t BitSet.Counted.isSubset<A>(of:)(uint64_t a1, char *a2, uint64_t a3, ValueMetadata *a4)
{
  return BitSet.isSubset<A>(of:)(a1, a2, a4);
}

BOOL BitSet.Counted.isSuperset(of:)(_QWORD *a1, _QWORD *a2)
{
  return BitSet.isSubset(of:)(a2, a1);
}

uint64_t BitSet.Counted.isSuperset(of:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1 == a2)
    return 1;
  if (((a2 | a1) & 0x8000000000000000) != 0)
    return 0;
  return _UnsafeBitSet.isSuperset(of:)(a1, a2, a3 + 32, *(_QWORD *)(a3 + 16));
}

uint64_t BitSet.Counted.isSuperset<A>(of:)(uint64_t a1, _QWORD *a2, uint64_t a3, ValueMetadata *a4)
{
  return BitSet.isSuperset<A>(of:)(a1, a2, a4);
}

BOOL BitSet.Counted.isStrictSubset(of:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return a4 < a2 && BitSet.isStrictSubset(of:)(a1, a3);
}

uint64_t BitSet.Counted.isStrictSubset(of:)(uint64_t result, int64_t a2, uint64_t a3, int64_t a4)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else if (a2 - result <= a4)
  {
    return 0;
  }
  else
  {
    return BitSet.isStrictSubset(of:)(result, a2, a3);
  }
  return result;
}

unint64_t BitSet.Counted.isStrictSubset<A>(of:)(uint64_t a1, int8x8_t *a2, uint64_t a3, ValueMetadata *a4, uint64_t a5)
{
  return BitSet.isStrictSubset<A>(of:)(a1, a2, a4, a5);
}

BOOL BitSet.Counted.isStrictSuperset(of:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return a2 < a4 && BitSet.isStrictSubset(of:)(a3, a1);
}

BOOL BitSet.Counted.isStrictSuperset(of:)(_QWORD *a1, _QWORD *a2)
{
  return BitSet.isStrictSubset(of:)(a2, a1);
}

_QWORD *BitSet.Counted.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t *a2, uint64_t a3, ValueMetadata *a4, uint64_t a5)
{
  return BitSet.isStrictSuperset<A>(of:)(a1, a2, a4, a5);
}

uint64_t BitSet.Counted.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_238339674(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))_UnsafeBitSet.isDisjoint(with:));
}

uint64_t sub_238339674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  if (a2 <= 0)
    v5 = 0;
  else
    v5 = a1 & ~(a1 >> 63);
  return a5(v5, a2 & ~(a2 >> 63), a3 + 32, *(_QWORD *)(a3 + 16));
}

BOOL BitSet.Counted.isDisjoint<A>(with:)(uint64_t a1, _QWORD *a2, uint64_t a3, ValueMetadata *a4)
{
  return BitSet.isDisjoint<A>(with:)(a1, a2, a4);
}

_QWORD *sub_2383396A0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = result[2];
  if (v1)
  {
    if (result[4])
      goto LABEL_3;
    if (v1 != 1)
    {
      if (!result[5])
      {
        v2 = v1 - 2;
        if (v1 == 2)
          return result;
        v3 = result + 6;
        v4 = 128;
        while (!*v3++)
        {
          v4 += 64;
          if (!--v2)
          {
            if (((v1 << 6) & 0x8000000000000000) == 0)
              return result;
            __break(1u);
            break;
          }
        }
        if (v4 < 0)
        {
          __break(1u);
          goto LABEL_16;
        }
      }
LABEL_3:
      if (((v1 << 6) & 0x8000000000000000) == 0)
        return result;
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

_QWORD *sub_238339730(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = result[2];
  if (v1)
  {
    if (result[4])
      goto LABEL_3;
    v2 = v1 - 1;
    if (v1 != 1)
    {
      v3 = result + 5;
      v4 = 64;
      while (!*v3++)
      {
        v4 += 64;
        if (!--v2)
        {
          if (((v1 << 6) & 0x8000000000000000) == 0)
            return result;
          __break(1u);
          break;
        }
      }
      if (v4 < 0)
      {
        __break(1u);
        goto LABEL_14;
      }
LABEL_3:
      if (((v1 << 6) & 0x8000000000000000) == 0)
        return result;
LABEL_14:
      __break(1u);
    }
  }
  return result;
}

int64_t sub_2383397A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t result;
  uint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  uint8x8_t v13;
  BOOL v14;

  result = sub_2382E41A8(a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = *(_QWORD *)(result + 16);
  if (v9)
  {
    v10 = 0;
    v11 = (int8x8_t *)(result + 32);
    v12 = 8 * v9;
    while (1)
    {
      v13 = (uint8x8_t)vcnt_s8(*v11);
      v13.i16[0] = vaddlv_u8(v13);
      v14 = __OFADD__(v10, v13.u32[0]);
      v10 += v13.u32[0];
      if (v14)
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_238339804(uint64_t a1, ValueMetadata *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int8x8_t *v9;
  uint64_t v10;
  uint8x8_t v11;
  BOOL v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  result = BitSet.init<A>(_:)((uint64_t)v4, a2);
  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v8 = 0;
    v9 = (int8x8_t *)(result + 32);
    v10 = 8 * v7;
    while (1)
    {
      v11 = (uint8x8_t)vcnt_s8(*v9);
      v11.i16[0] = vaddlv_u8(v11);
      v12 = __OFADD__(v8, v11.u32[0]);
      v8 += v11.u32[0];
      if (v12)
        break;
      ++v9;
      v10 -= 8;
      if (!v10)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2383398C4(uint64_t a1)
{
  uint64_t v1;
  int64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int8x8_t *v10;
  uint64_t v11;
  uint8x8_t v12;
  BOOL v13;
  _QWORD v14[4];
  _QWORD v15[4];

  sub_23827DFC4(a1, (uint64_t)v15);
  v3 = (int64_t)__swift_project_boxed_opaque_existential_1(v15, v15[3]);
  sub_23835BA84();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v3;
  }
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  v4 = sub_23835B8A4();
  v6 = sub_2382C7250(v14, v4, v5 & 1);
  v3 = _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0((int64_t)v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  v8 = *(_QWORD *)(v3 + 16);
  if (!v8)
  {
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v3;
  }
  v9 = 0;
  v10 = (int8x8_t *)(v3 + 32);
  v11 = 8 * v8;
  while (1)
  {
    v12 = (uint8x8_t)vcnt_s8(*v10);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = __OFADD__(v9, v12.u32[0]);
    v9 += v12.u32[0];
    if (v13)
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t sub_238339A08()
{
  unint64_t result;

  result = qword_2568F20E0;
  if (!qword_2568F20E0)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitSet.Counted, &type metadata for BitSet.Counted);
    atomic_store(result, (unint64_t *)&qword_2568F20E0);
  }
  return result;
}

uint64_t sub_238339A4C()
{
  return sub_238339AE8(&qword_2568F20E8, &qword_2568F20F0, MEMORY[0x24BEE0658]);
}

unint64_t sub_238339A78()
{
  unint64_t result;

  result = qword_2568F20F8;
  if (!qword_2568F20F8)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitSet.Counted, &type metadata for BitSet.Counted);
    atomic_store(result, (unint64_t *)&qword_2568F20F8);
  }
  return result;
}

uint64_t sub_238339ABC()
{
  return sub_238339AE8(&qword_2568F2100, &qword_2568F2108, MEMORY[0x24BEE4218]);
}

uint64_t sub_238339AE8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = sub_238339A78();
    result = MEMORY[0x23B831670](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_238339B4C()
{
  unint64_t result;

  result = qword_2568F2110;
  if (!qword_2568F2110)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitSet.Counted, &type metadata for BitSet.Counted);
    atomic_store(result, (unint64_t *)&qword_2568F2110);
  }
  return result;
}

uint64_t sub_238339B90()
{
  return sub_23829B310(&qword_2568F2118, &qword_2568F20F0, MEMORY[0x24BEE0670]);
}

uint64_t sub_238339BBC()
{
  return sub_23829B310(&qword_2568F2120, &qword_2568F2108, MEMORY[0x24BEE4238]);
}

unint64_t sub_238339BEC()
{
  unint64_t result;

  result = qword_2568F2128;
  if (!qword_2568F2128)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitSet.Counted, &type metadata for BitSet.Counted);
    atomic_store(result, (unint64_t *)&qword_2568F2128);
  }
  return result;
}

unint64_t sub_238339C34()
{
  unint64_t result;

  result = qword_2568F2130;
  if (!qword_2568F2130)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BitSet.Counted, &type metadata for BitSet.Counted);
    atomic_store(result, (unint64_t *)&qword_2568F2130);
  }
  return result;
}

ValueMetadata *type metadata accessor for BitSet.Counted()
{
  return &type metadata for BitSet.Counted;
}

__n128 BigSubstring.UTF8View.init(_:in:)@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _OWORD v31[3];
  _BYTE v32[40];

  v6 = *(__n128 *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 32);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v27 = v6;
  v31[0] = *(_OWORD *)a1;
  v30 = v31[0];
  v11 = *(_OWORD *)(a1 + 32);
  v31[1] = v6;
  v31[2] = v11;
  sub_238263E74((uint64_t)v31, (uint64_t)v32);
  sub_238263DDC((uint64_t)v32);
  v12 = sub_2382685C4(v7, v8, v9, v10);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = sub_2382685C4(a2[4], a2[5], a2[6], a2[7]);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  sub_23825B804(a1);
  result = v27;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 40) = v28;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v14;
  *(_QWORD *)(a3 + 64) = v16;
  *(_QWORD *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 80) = v19;
  *(_QWORD *)(a3 + 88) = v21;
  *(_QWORD *)(a3 + 96) = v23;
  *(_QWORD *)(a3 + 104) = v25;
  return result;
}

__n128 BigSubstring.UTF8View.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  result = (__n128)a2[2];
  v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.utf8.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v12 = *(_OWORD *)v1;
  v10 = *(_OWORD *)(v1 + 32);
  v11 = *(_OWORD *)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 64);
  v9 = *(_OWORD *)(v1 + 48);
  v7 = *(__n128 *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v2 + 104);
  sub_238263DDC(v2);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  result = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(__n128 *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = v5;
  return result;
}

uint64_t BigSubstring.UTF8View.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t BigSubstring.UTF8View.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t BigSubstring.UTF8View.base.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

uint64_t static BigSubstring.UTF8View.== infix(_:_:)(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];
  _OWORD v14[3];
  _OWORD v15[4];
  _OWORD v16[3];

  v2 = a1[1];
  v16[0] = *a1;
  v16[1] = v2;
  v3 = a1[3];
  v16[2] = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v15[0] = v3;
  v15[1] = v4;
  v6 = a1[6];
  v15[2] = v5;
  v15[3] = v6;
  v7 = *a2;
  v8 = a2[2];
  v9 = a2[3];
  v14[1] = a2[1];
  v14[2] = v8;
  v10 = a2[5];
  v11 = a2[4];
  v13[3] = a2[6];
  v14[0] = v7;
  v13[1] = v11;
  v13[2] = v10;
  v13[0] = v9;
  return sub_238301EC8((uint64_t *)v16, (unint64_t *)v15, (uint64_t *)v14, (unint64_t *)v13) & 1;
}

BOOL BigSubstring.UTF8View.isIdentical(to:)(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _OWORD v8[6];

  v2 = (uint64_t)v1;
  v4 = v1[1];
  v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a1 + 32);
  sub_238263DDC((uint64_t)v1);
  sub_238263DDC(a1);
  v6 = sub_238263BF8((uint64_t)v8);
  sub_23825B804(a1);
  sub_23825B804(v2);
  return v6
      && (*(_QWORD *)(a1 + 48) ^ *(_QWORD *)(v2 + 48)) <= 1023
      && (*(_QWORD *)(v2 + 80) ^ *(_QWORD *)(a1 + 80)) < 0x400uLL;
}

uint64_t BigSubstring.UTF8View.hash(into:)()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_2383350E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), (uint64_t)v3);
  return sub_23835BA0C();
}

uint64_t BigSubstring.UTF8View.hashValue.getter()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];

  sub_23835B9E8();
  v1 = *(_OWORD *)(v0 + 16);
  v3[0] = *(_OWORD *)v0;
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 32);
  sub_2383350E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), (uint64_t)v3);
  sub_23835BA0C();
  return sub_23835BA48();
}

Swift::UInt8_optional __swiftcall BigSubstring.UTF8View.Iterator.next()()
{
  uint64_t v0;
  unsigned int v1;
  int v2;

  if (*(_QWORD *)(v0 + 48) >> 10 >= *(_QWORD *)(v0 + 80) >> 10)
  {
    LOBYTE(v1) = 0;
    LOWORD(v2) = 1;
  }
  else
  {
    LOWORD(v1) = BigString.UTF8View.Iterator.next()();
    v2 = (v1 >> 8) & 1;
  }
  return (Swift::UInt8_optional)(v1 | (unsigned __int16)((_WORD)v2 << 8));
}

__int16 sub_23833A1C4@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;
  int v4;

  if (*(_QWORD *)(v1 + 48) >> 10 >= *(_QWORD *)(v1 + 80) >> 10)
  {
    LOWORD(v3) = 0;
    LOBYTE(v4) = 1;
  }
  else
  {
    LOWORD(v3) = BigString.UTF8View.Iterator.next()();
    v4 = (v3 >> 8) & 1;
  }
  *a1 = v3;
  a1[1] = v4;
  return v3;
}

__n128 BigSubstring.UTF8View.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;

  v18 = *(_OWORD *)v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);
  v16 = *(_OWORD *)(v1 + 16);
  v17 = *(__n128 *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 104);
  sub_238263DDC(v1);
  v11 = sub_2382685C4(v5, v6, v7, v8);
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  result = v17;
  *(__n128 *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  return result;
}

__n128 sub_23833A2C4@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;

  v3 = v1->n128_u64[0];
  v4 = v1->n128_u64[1];
  v5 = v1[1].n128_u64[0];
  v6 = v1[1].n128_u64[1];
  v7 = v1[2].n128_u64[0];
  v8 = v1[3].n128_i64[1];
  v19 = v1[3].n128_u64[0];
  v20 = v1[2].n128_u64[1];
  v10 = v1[4].n128_u64[0];
  v9 = v1[4].n128_i64[1];
  v23 = v1[5];
  v21 = v1[6].n128_u64[1];
  v22 = v1[6].n128_u64[0];
  swift_unknownObjectRetain();
  v11 = sub_2382685C4(v19, v8, v10, v9);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_unknownObjectRelease();
  a1->n128_u64[0] = v3;
  a1->n128_u64[1] = v4;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u64[0] = v7;
  a1[2].n128_u64[1] = v20;
  a1[3].n128_u64[0] = v11;
  a1[3].n128_u64[1] = v13;
  a1[4].n128_u64[0] = v15;
  a1[4].n128_u64[1] = v17;
  result = v23;
  a1[5] = v23;
  a1[6].n128_u64[0] = v22;
  a1[6].n128_u64[1] = v21;
  return result;
}

uint64_t sub_23833A3A8()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  _OWORD v6[7];

  v1 = v0[5];
  v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  v3 = v0[3];
  v6[2] = v0[2];
  v6[3] = v3;
  v4 = sub_23833B6E4((uint64_t)v6);
  sub_23825B804((uint64_t)v6);
  return v4;
}

uint64_t sub_23833A400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23833BF58(a1, a2, a3);
}

unint64_t BigSubstring.UTF8View.count.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 80);
  if (v2 >> 10 >= v1 >> 10)
    return (v2 >> 11) - (v1 >> 11);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.distance(from:to:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = result >> 10;
  v7 = *(_QWORD *)(v5 + 48) >> 10;
  v8 = *(_QWORD *)(v5 + 80) >> 10;
  if (v8 >= a5 >> 10 && a5 >> 10 >= v7 && v6 >= v7 && v8 >= v6)
    return (a5 >> 11) - (result >> 11);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(after:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result >> 10 < *(_QWORD *)(v4 + 80) >> 10)
    return sub_2383358DC(result, a2, a3, a4);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(before:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (*(_QWORD *)(v4 + 48) >> 10 < result >> 10)
    return sub_238335B14(result, a2, a3, a4);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(_:offsetBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(v5 + 48) >> 10;
  v7 = *(_QWORD *)(v5 + 80) >> 10;
  if (result >> 10 < v6 || v7 < result >> 10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  result = sub_23825EDD4(result, a2, a3, a4, a5);
  if (result >> 10 < v6 || v7 < result >> 10)
    goto LABEL_12;
  return result;
}

unint64_t BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v10 = *(_QWORD *)(v9 + 48) >> 10;
  v11 = *(_QWORD *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  result = sub_238335D38(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10))
    goto LABEL_13;
  return result;
}

unint64_t BigSubstring.UTF8View.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result >> 10 >= *(_QWORD *)(v4 + 48) >> 10 && result >> 10 < *(_QWORD *)(v4 + 80) >> 10)
    return sub_238335E58(result, a2, a3, a4);
  __break(1u);
  return result;
}

unint64_t *BigSubstring.UTF8View.subscript.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v4 = *result;
  v5 = result[4];
  if (*result >> 10 >= *(_QWORD *)(v2 + 48) >> 10 && *(_QWORD *)(v2 + 80) >> 10 >= v5 >> 10)
  {
    v26 = *(_OWORD *)v2;
    v25 = *(_OWORD *)(v2 + 16);
    v8 = result[6];
    v7 = result[7];
    v9 = result[5];
    v11 = result[2];
    v10 = result[3];
    v12 = result[1];
    v23 = *(_QWORD *)(v2 + 32);
    v24 = *(_QWORD *)(v2 + 40);
    sub_238263DDC(v2);
    v13 = sub_2382685C4(v4, v12, v11, v10);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    result = (unint64_t *)sub_2382685C4(v5, v9, v8, v7);
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v24;
    *(_QWORD *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = v17;
    *(_QWORD *)(a2 + 72) = v19;
    *(_QWORD *)(a2 + 80) = result;
    *(_QWORD *)(a2 + 88) = v20;
    *(_QWORD *)(a2 + 96) = v21;
    *(_QWORD *)(a2 + 104) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_23833A7AC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = *(_QWORD *)a1;
  if (*(_QWORD *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_238335B14(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_23833A814(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (*(_QWORD *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_238335B14(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t sub_23833A884(_QWORD *a1, unint64_t *a2)
{
  uint64_t v2;
  _OWORD *v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = malloc(0x31uLL);
  *a1 = v5;
  result = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *(_OWORD *)(v2 + 16);
  *v5 = *(_OWORD *)v2;
  v5[1] = v10;
  v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(_QWORD *)(v2 + 48) >> 10 || result >> 10 >= *(_QWORD *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v5 + 48) = sub_238335E58(result, v7, v8, v9);
    return (unint64_t)sub_2382A5D44;
  }
  return result;
}

unint64_t *sub_23833A910@<X0>(unint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *result;
  v5 = result[4];
  if (*result >> 10 >= (unint64_t)v2[6] >> 10 && (unint64_t)v2[10] >> 10 >= v5 >> 10)
  {
    v26 = v2[4];
    v27 = v2[5];
    v7 = v2[2];
    v8 = *v2;
    v9 = v2[1];
    v28 = result[7];
    v24 = result[6];
    v25 = v2[3];
    v23 = result[5];
    v11 = result[2];
    v10 = result[3];
    v12 = result[1];
    swift_unknownObjectRetain();
    v13 = sub_2382685C4(v4, v12, v11, v10);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    result = (unint64_t *)sub_2382685C4(v5, v23, v24, v28);
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v25;
    a2[4] = v26;
    a2[5] = v27;
    a2[6] = v13;
    a2[7] = v15;
    a2[8] = v17;
    a2[9] = v19;
    a2[10] = result;
    a2[11] = v20;
    a2[12] = v21;
    a2[13] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_23833AA28()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 80);
  if (v2 >> 10 >= v1 >> 10)
    return (v2 >> 11) - (v1 >> 11);
  __break(1u);
  return result;
}

unint64_t sub_23833AA4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = *(_QWORD *)a1;
  v7 = *(_QWORD *)(v3 + 48) >> 10;
  v8 = *(_QWORD *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    result = sub_23825EDD4(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
    if (result >> 10 >= v7 && v8 >= result >> 10)
    {
      *a3 = result;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_23833AAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = *(_QWORD *)a1;
  v8 = *(_QWORD *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (v9 = *(_QWORD *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }
  else
  {
    result = sub_238335D38(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_23833AB9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *result >> 10;
  v4 = *(_QWORD *)(v2 + 48) >> 10;
  v5 = *(_QWORD *)(v2 + 80) >> 10;
  v6 = *a2 >> 10;
  if (v5 >= v6 && v6 >= v4 && v3 >= v4 && v5 >= v3)
    return (_QWORD *)((*a2 >> 11) - (*result >> 11));
  __break(1u);
  return result;
}

unint64_t sub_23833ABE0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = *(_QWORD *)a1;
  if (result >> 10 >= *(_QWORD *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_2383358DC(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_23833AC48(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result >> 10 >= *(_QWORD *)(v1 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    result = sub_2383358DC(result, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t BigSubstring.UTF8View.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result >> 10 >= *(_QWORD *)(v4 + 48) >> 10 && *(_QWORD *)(v4 + 80) >> 10 >= result >> 10)
    return sub_2382685C4(result, a2, a3, a4);
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF8View.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = result >> 10;
  if (result >> 10 >= *(_QWORD *)(v4 + 48) >> 10 && *(_QWORD *)(v4 + 80) >> 10 >= v5)
  {
    result = sub_2382685C4(result, a2, a3, a4);
    if (v5 != result >> 10)
      return sub_2383358DC(result, v7, v8, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23833AD6C(_QWORD *a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[12];

  v1 = a1[1];
  if (*a1)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v3 = (uint64_t *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2178);
    v3 = (uint64_t *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 17;
    v3[2] = v1;
    v3[3] = 2 * (v5 >> 4);
  }
  swift_unknownObjectRetain();
  sub_23833B8C8((uint64_t)v9, v3 + 4, v1);
  v7 = v6;
  result = swift_unknownObjectRelease();
  if (v7 == v1)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

uint64_t sub_23833AE44(_QWORD *a1)
{
  uint64_t v1;
  BOOL v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[5];

  v1 = a1[3];
  if (*a1)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2188);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 31;
    v3[2] = v1;
    v3[3] = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  swift_unknownObjectRetain();
  v6 = sub_23832D4E0(v8, (uint64_t)(v3 + 4), v1);
  result = swift_unknownObjectRelease();
  if (v6 == v1)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

uint64_t sub_23833AF1C(_QWORD *a1)
{
  uint64_t v1;
  BOOL v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[10];

  v1 = a1[4];
  if (*a1)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_2542CAF98);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v3[2] = v1;
    v3[3] = 2 * v4 - 64;
  }
  swift_unknownObjectRetain();
  v5 = sub_23833BA2C(v7, (uint64_t)(v3 + 4), v1);
  result = swift_unknownObjectRelease();
  if (v5 == v1)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

uint64_t sub_23833AFE8(_QWORD *a1)
{
  uint64_t v1;
  BOOL v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[5];

  v1 = a1[2];
  if (*a1)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2170);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 29;
    v3[2] = v1;
    v3[3] = 2 * (v5 >> 2);
  }
  swift_unknownObjectRetain();
  v6 = sub_23832D5E0(v8, (uint64_t)(v3 + 4), v1);
  result = swift_unknownObjectRelease();
  if (v6 == v1)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

uint64_t sub_23833B0C4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD v7[3];

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      v3 = result;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2180);
      v4 = swift_allocObject();
      v5 = _swift_stdlib_malloc_size((const void *)v4);
      *(_QWORD *)(v4 + 16) = a2;
      *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
      v6 = sub_23832D6E0(v7, (_BYTE *)(v4 + 32), a2, v3, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v6 == (_QWORD *)a2)
        return v4;
      __break(1u);
    }
    return MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

int64_t sub_23833B17C(int64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int8x8_t *v6;
  uint8x8_t v7;
  BOOL v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *i;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = result;
  v3 = 0;
  v4 = (unint64_t *)(result + 32);
  v5 = 8 * v1;
  v6 = (int8x8_t *)(result + 32);
  do
  {
    v7 = (uint8x8_t)vcnt_s8(*v6);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = __OFADD__(v3, v7.u32[0]);
    v3 += v7.u32[0];
    if (v8)
      goto LABEL_29;
    ++v6;
    v5 -= 8;
  }
  while (v5);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  if (v3 <= 0)
    goto LABEL_34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2168);
  v9 = (unint64_t *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v9);
  v10 = result - 32;
  if (result < 32)
    v10 = result - 25;
  v9[2] = v3;
  v9[3] = 2 * (v10 >> 3);
  if (*(_QWORD *)(v2 + 16))
    v11 = *v4;
  else
    v11 = 0;
  v12 = 0;
  v13 = 0;
  for (i = v9 + 4; ; ++i)
  {
    if (v11)
    {
      if (v12 << 6 < 0)
        goto LABEL_30;
      v15 = __rbit64(v11);
      v11 &= v11 - 1;
      v16 = (v12 << 6) | __clz(v15);
      goto LABEL_15;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_31;
    v18 = *(_QWORD *)(v2 + 16);
    if (v17 >= v18)
      goto LABEL_33;
    v19 = v4[v17];
    if (!v19)
      break;
    ++v12;
LABEL_26:
    if (v12 << 6 < 0)
      goto LABEL_32;
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_15:
    ++v13;
    *i = v16;
    if (v13 == v3)
      return (int64_t)v9;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v18)
      goto LABEL_33;
    v19 = v4[v12];
    ++v17;
    if (v19)
      goto LABEL_26;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_23833B304(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD v9[3];

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 <= 0)
  {
    v4 = (unint64_t *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2168);
    v4 = (unint64_t *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = a2;
    v4[3] = 2 * (v6 >> 3);
  }
  v7 = sub_23832D784(v9, v4 + 4, a2, a1);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (v7 == (_QWORD *)a2)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

unint64_t **sub_23833B3DC(unint64_t **result, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int8x8_t *v6;
  uint8x8_t v7;
  BOOL v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t *v12;

  if (result && a2)
  {
    v3 = (unint64_t *)result;
    v4 = 0;
    v5 = 8 * a2;
    v6 = (int8x8_t *)result;
    while (1)
    {
      v7 = (uint8x8_t)vcnt_s8(*v6);
      v7.i16[0] = vaddlv_u8(v7);
      v8 = __OFADD__(v4, v7.u32[0]);
      v4 += v7.u32[0];
      if (v8)
        break;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        if (!v4)
          return (unint64_t **)MEMORY[0x24BEE4AF8];
        if (v4 <= 0)
        {
          v9 = (unint64_t *)MEMORY[0x24BEE4AF8];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2568F1F48);
          v9 = (unint64_t *)swift_allocObject();
          v10 = _swift_stdlib_malloc_size(v9);
          v11 = v10 - 32;
          if (v10 < 32)
            v11 = v10 - 25;
          v9[2] = v4;
          v9[3] = 2 * (v11 >> 3);
        }
        result = sub_23832D890(&v12, v9 + 4, v4, v3, a2);
        if (result == (unint64_t **)v4)
          return (unint64_t **)v9;
LABEL_16:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  return (unint64_t **)MEMORY[0x24BEE4AF8];
}

unint64_t sub_23833B4D0(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  result = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >> 10 < result >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_OWORD *)(a1 + 16);
    v18 = *(_OWORD *)a1;
    v19 = v10;
    v20 = *(_OWORD *)(a1 + 32);
    v11 = _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, v9, v7, v8, v3, v6, v4, v5);
    if (!v11)
      return MEMORY[0x24BEE4AF8];
    v12 = (unint64_t *)v11;
    if (v11 <= 0)
    {
      v13 = (uint64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2178);
      v13 = (uint64_t *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = (uint64_t)v12;
      v13[3] = 2 * (v15 >> 4);
    }
    sub_238263DDC(a1);
    v16 = sub_23833BB94(v17, v13 + 4, v12);
    result = sub_23827BB08((uint64_t)v17);
    if ((unint64_t *)v16 == v12)
      return (unint64_t)v13;
  }
  __break(1u);
  return result;
}

unint64_t sub_23833B5DC(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD v17[14];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  result = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >> 10 < result >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_OWORD *)(a1 + 16);
    v18 = *(_OWORD *)a1;
    v19 = v10;
    v20 = *(_OWORD *)(a1 + 32);
    v11 = sub_23825C0EC(result, v9, v7, v8, v3, v6, v4, v5);
    if (!v11)
      return MEMORY[0x24BEE4AF8];
    v12 = v11;
    if (v11 <= 0)
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2188);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 31;
      v13[2] = v12;
      v13[3] = v15 & 0xFFFFFFFFFFFFFFFELL;
    }
    sub_238263DDC(a1);
    v16 = sub_23833BDC0((uint64_t)v17, (uint64_t)(v13 + 4), v12);
    result = swift_unknownObjectRelease();
    if (v16 == v12)
      return (unint64_t)v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_23833B6E4(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  _QWORD v10[14];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(_QWORD *)(result + 80);
  if (v2 >> 10 < v1 >> 10)
  {
    __break(1u);
  }
  else
  {
    v3 = v2 >> 11;
    v4 = v1 >> 11;
    v5 = v3 - v4;
    if (v3 == v4)
      return MEMORY[0x24BEE4AF8];
    v7 = result;
    if (v5 <= 0)
    {
      v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_2542CAF98);
      v6 = (_QWORD *)swift_allocObject();
      v8 = _swift_stdlib_malloc_size(v6);
      v6[2] = v5;
      v6[3] = 2 * v8 - 64;
    }
    sub_238263DDC(v7);
    v9 = sub_23833BF58((uint64_t)v10, (uint64_t)(v6 + 4), v5);
    result = swift_unknownObjectRelease();
    if (v9 == v5)
      return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

unint64_t sub_23833B7BC(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[14];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  result = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >> 10 < result >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_OWORD *)(a1 + 16);
    v18 = *(_OWORD *)a1;
    v19 = v10;
    v20 = *(_OWORD *)(a1 + 32);
    v11 = sub_238278254(result, v9, v7, v8, v3, v6, v4, v5);
    if (!v11)
      return MEMORY[0x24BEE4AF8];
    v12 = v11;
    if (v11 <= 0)
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2568F2170);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 29;
      v13[2] = v12;
      v13[3] = 2 * (v15 >> 2);
    }
    sub_238263DDC(a1);
    v16 = sub_23833C108(v17, (uint64_t)(v13 + 4), v12);
    result = swift_unknownObjectRelease();
    if (v16 == v12)
      return (unint64_t)v13;
  }
  __break(1u);
  return result;
}

void sub_23833B8C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __n128 *v3;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  sub_23830F850(v3, &v23);
  v19 = v25;
  v20 = v26;
  v21 = v27;
  v22 = v28;
  v17 = v23;
  v18 = v24;
  if (!a2)
  {
    v9 = v26;
    *(_OWORD *)(a1 + 32) = v25;
    *(_OWORD *)(a1 + 48) = v9;
    v10 = v28;
    *(_OWORD *)(a1 + 64) = v27;
    *(_OWORD *)(a1 + 80) = v10;
    v11 = v24;
    *(__n128 *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v11;
    return;
  }
  if (!a3)
  {
LABEL_13:
    *(__n128 *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = v19;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = v22;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = *((_QWORD *)&v28 + 1);
    v7 = v28;
    if ((*((_QWORD *)&v28 + 1) ^ (unint64_t)v28) < 0x4000)
    {
LABEL_12:
      *(__n128 *)a1 = v17;
      *(_OWORD *)(a1 + 16) = v18;
      *(_OWORD *)(a1 + 32) = v19;
      *(_OWORD *)(a1 + 48) = v20;
      *(_OWORD *)(a1 + 64) = v21;
      *(_QWORD *)(a1 + 80) = v7;
      *(_QWORD *)(a1 + 88) = v8;
      return;
    }
    v12 = 0;
    while (1)
    {
      v29 = v17;
      v30 = v18;
      v31 = v19;
      v32 = v20;
      v33 = v21;
      v34 = v7;
      v35 = v8;
      sub_23830EA80();
      v14 = v13;
      v16 = v15;
      if ((sub_23830F018(v13, v15) & 1) == 0)
        *(_QWORD *)&v22 = *((_QWORD *)&v22 + 1);
      *a2 = v14;
      a2[1] = v16;
      if (a3 - 1 == v12)
        goto LABEL_13;
      v8 = *((_QWORD *)&v22 + 1);
      v7 = v22;
      ++v12;
      a2 += 2;
      if ((*((_QWORD *)&v22 + 1) ^ (unint64_t)v22) < 0x4000)
        goto LABEL_12;
    }
  }
  __break(1u);
}

uint64_t sub_23833BA2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt8_optional v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  _BYTE v32[48];

  v4 = v3;
  v29 = *(_OWORD *)(v3 + 16);
  v30 = *(_OWORD *)(v3 + 32);
  v31[0] = *(_OWORD *)v3;
  v26 = *(_QWORD *)(v3 + 8);
  v27 = *(_QWORD *)v3;
  v7 = *(_QWORD *)(v3 + 24);
  v25 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v31[1] = v29;
  v31[2] = v30;
  sub_238263E74((uint64_t)v31, (uint64_t)v32);
  sub_238263DDC((uint64_t)v32);
  v10 = sub_2382685C4(0x300uLL, 0, 0, 1);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  result = sub_23825B804(v4);
  v19 = v25;
  v18 = v26;
  v20 = v27;
  v28 = v14;
  if (!a2)
  {
    v21 = 0;
    goto LABEL_11;
  }
  v21 = a3;
  if (!a3)
  {
LABEL_11:
    *a1 = v20;
    a1[1] = v18;
    a1[2] = v19;
    a1[3] = v7;
    a1[4] = v9;
    a1[5] = v8;
    a1[6] = v10;
    a1[7] = v12;
    a1[8] = v14;
    a1[9] = v16;
    return v21;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v22 = BigString.UTF8View.Iterator.next()();
    v23 = 0;
    if ((*(_WORD *)&v22 & 0x100) != 0)
    {
LABEL_7:
      v20 = v27;
      v18 = v26;
      v19 = v25;
      v21 = v23;
    }
    else
    {
      while (1)
      {
        *(_BYTE *)(a2 + v23) = v22.value;
        if (a3 - 1 == v23)
          break;
        v22 = BigString.UTF8View.Iterator.next()();
        ++v23;
        if ((*(_WORD *)&v22 & 0x100) != 0)
          goto LABEL_7;
      }
      v20 = v27;
      v18 = v26;
      v19 = v25;
    }
    v14 = v28;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_23833BB94(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  __int128 *v12;
  int64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  __int128 v50;
  _QWORD v51[12];
  _OWORD v52[6];
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v6 = *(_OWORD *)(v3 + 16);
  v52[0] = *(_OWORD *)v3;
  v52[1] = v6;
  v52[2] = *(_OWORD *)(v3 + 32);
  v42 = *(_QWORD *)(v3 + 88);
  v43 = *(_QWORD *)(v3 + 80);
  v40 = *(_QWORD *)(v3 + 104);
  v41 = *(_QWORD *)(v3 + 96);
  sub_23830F5CC(v52, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), v51);
  v38 = v51[0];
  v39 = v51[2];
  v36 = v51[1];
  v37 = v51[3];
  v7 = v51[5];
  v35 = v51[4];
  v9 = v51[6];
  v8 = (unint64_t *)v51[7];
  v10 = (unint64_t *)v51[8];
  v11 = (unint64_t *)v51[9];
  v13 = v51[10];
  v12 = (__int128 *)v51[11];
  result = sub_23825B804(v3);
  v16 = v35;
  v15 = v36;
  v17 = v37;
  v18 = v38;
  v20 = v39;
  v19 = v40;
  v22 = v41;
  v21 = v42;
  v23 = v43;
  *(_QWORD *)&v44 = v43;
  *((_QWORD *)&v44 + 1) = v42;
  *(_QWORD *)&v45 = v41;
  *((_QWORD *)&v45 + 1) = v40;
  *(_QWORD *)&v46 = v38;
  *((_QWORD *)&v46 + 1) = v36;
  *(_QWORD *)&v47 = v39;
  *((_QWORD *)&v47 + 1) = v37;
  *(_QWORD *)&v48 = v35;
  *((_QWORD *)&v48 + 1) = v7;
  *(_QWORD *)v49 = v9;
  *(_QWORD *)&v49[8] = v8;
  *(_QWORD *)&v49[16] = v10;
  *(_QWORD *)&v49[24] = v11;
  *(_QWORD *)&v50 = v13;
  *((_QWORD *)&v50 + 1) = v12;
  if (!a2)
    goto LABEL_14;
  v10 = a3;
  v8 = a1;
  if (!a3)
  {
LABEL_15:
    v28 = *(_OWORD *)v49;
    *((_OWORD *)v8 + 4) = v48;
    *((_OWORD *)v8 + 5) = v28;
    v29 = v50;
    *((_OWORD *)v8 + 6) = *(_OWORD *)&v49[16];
    *((_OWORD *)v8 + 7) = v29;
    *(_OWORD *)v8 = v44;
    *((_OWORD *)v8 + 1) = v45;
    v30 = v46;
    v31 = v47;
LABEL_17:
    *((_OWORD *)v8 + 2) = v30;
    *((_OWORD *)v8 + 3) = v31;
    return (uint64_t)v10;
  }
  if (((unint64_t)a3 & 0x8000000000000000) == 0)
  {
    v21 = *(_QWORD *)v49;
    v24 = v50;
    v22 = *(_QWORD *)v49 + ((unint64_t)v50 >> 16);
    if (!__OFADD__(*(_QWORD *)v49, (unint64_t)v50 >> 16))
    {
      v11 = 0;
      v12 = &v46;
      v13 = v43 >> 11;
      a1 = (unint64_t *)((char *)a3 - 1);
      while (v22 < v13 && (*((_QWORD *)&v50 + 1) ^ v24) >= 0x4000)
      {
        v52[3] = v46;
        v52[4] = v47;
        v52[5] = v48;
        v53 = v21;
        v54 = *(_OWORD *)&v49[8];
        v55 = *(_QWORD *)&v49[24];
        v56 = v24;
        v57 = *((_QWORD *)&v50 + 1);
        sub_23830EA80();
        v7 = v25;
        v9 = v26;
        if ((sub_23830F018(v25, v26) & 1) == 0)
          *(_QWORD *)&v50 = *((_QWORD *)&v50 + 1);
        *a2 = v7;
        a2[1] = v9;
        if (a1 == v11)
          goto LABEL_15;
        v21 = *(_QWORD *)v49;
        v24 = v50;
        v22 = *(_QWORD *)v49 + ((unint64_t)v50 >> 16);
        v11 = (unint64_t *)((char *)v11 + 1);
        a2 += 2;
        if (__OFADD__(*(_QWORD *)v49, (unint64_t)v50 >> 16))
          goto LABEL_13;
      }
      v32 = *(_OWORD *)v49;
      *((_OWORD *)v8 + 4) = v48;
      *((_OWORD *)v8 + 5) = v32;
      v33 = v50;
      *((_OWORD *)v8 + 6) = *(_OWORD *)&v49[16];
      *((_OWORD *)v8 + 7) = v33;
      *(_OWORD *)v8 = v44;
      *((_OWORD *)v8 + 1) = v45;
      v30 = v46;
      v31 = v47;
      v10 = v11;
      goto LABEL_17;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    v27 = v10;
    v10 = 0;
    *a1 = v23;
    a1[1] = v21;
    a1[2] = v22;
    a1[3] = v19;
    a1[4] = v18;
    a1[5] = v15;
    a1[6] = v20;
    a1[7] = v17;
    a1[8] = v16;
    a1[9] = v7;
    a1[10] = v9;
    a1[11] = (unint64_t)v8;
    a1[12] = (unint64_t)v27;
    a1[13] = (unint64_t)v11;
    a1[14] = v13;
    a1[15] = (unint64_t)v12;
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23833BDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[4];

  v5 = *(_OWORD *)(v3 + 16);
  v42[0] = *(_OWORD *)v3;
  v42[1] = v5;
  v42[2] = *(_OWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 96);
  v28 = *(_QWORD *)(v3 + 88);
  v29 = *(_QWORD *)(v3 + 80);
  v7 = *(_QWORD *)(v3 + 104);
  sub_2382A60C8(v42, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), (uint64_t)v35);
  v26 = v35[0];
  v27 = v35[1];
  v8 = v36;
  v9 = v37;
  v10 = v38;
  v11 = v39;
  v12 = v40;
  v13 = v41;
  result = sub_23825B804(v3);
  v16 = v26;
  v15 = v27;
  v17 = v6;
  v18 = v29;
  v19 = v28;
  *(_QWORD *)&v31 = v8;
  *((_QWORD *)&v31 + 1) = v9;
  v32 = v10;
  *(_QWORD *)&v33 = v11;
  *((_QWORD *)&v33 + 1) = v12;
  v34 = v7;
  *(_QWORD *)&v20 = v8;
  *((_QWORD *)&v20 + 1) = v9;
  *(_QWORD *)&v21 = v11;
  *((_QWORD *)&v21 + 1) = v12;
  if (!a2)
  {
    v22 = 0;
    goto LABEL_15;
  }
  v22 = a3;
  if (!a3)
  {
LABEL_15:
    *(_OWORD *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v15;
    *(_OWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 56) = v21;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v19;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v7;
    return v22;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v29 >> 10 <= v10 >> 10)
    {
      v23 = 0;
LABEL_13:
      v16 = v26;
      v15 = v27;
      v20 = v31;
      v21 = v33;
      v18 = v29;
      v19 = v28;
      v17 = v6;
      v22 = v23;
    }
    else
    {
      v23 = 0;
      while (1)
      {
        *(Swift::UInt16_optional *)&v24 = BigString.UTF16View.Iterator.next()();
        if ((v24 & 0x10000) != 0)
        {
          v10 = v32;
          goto LABEL_13;
        }
        *(_WORD *)(a2 + 2 * v23) = v24;
        v10 = v32;
        if (a3 - 1 == v23)
          break;
        ++v23;
        if (v29 >> 10 <= v32 >> 10)
          goto LABEL_13;
      }
      v16 = v26;
      v15 = v27;
      v20 = v31;
      v21 = v33;
      v18 = v29;
      v19 = v28;
      v17 = v6;
    }
    v7 = v34;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_23833BF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt8_optional v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v37;
  unint64_t v38;
  __int128 v39;

  v4 = v3;
  v33 = *(_OWORD *)(v3 + 16);
  v34 = *(_OWORD *)v3;
  v6 = *(_QWORD *)(v3 + 32);
  v35 = *(_QWORD *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(_QWORD *)(v3 + 72);
  v12 = *(_QWORD *)(v3 + 80);
  v11 = *(_QWORD *)(v3 + 88);
  v31 = *(_QWORD *)(v3 + 104);
  v32 = *(_QWORD *)(v3 + 96);
  sub_238263DDC(v3);
  v13 = sub_2382685C4(v7, v8, v9, v10);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  result = sub_23825B804(v4);
  v22 = v31;
  v21 = v32;
  v23 = v33;
  v24 = v34;
  *(_QWORD *)&v37 = v6;
  *((_QWORD *)&v37 + 1) = v35;
  v38 = v13;
  *(_QWORD *)&v39 = v12;
  *((_QWORD *)&v39 + 1) = v11;
  *(_QWORD *)&v25 = v6;
  *((_QWORD *)&v25 + 1) = v35;
  *(_QWORD *)&v26 = v12;
  *((_QWORD *)&v26 + 1) = v11;
  if (!a2)
  {
    v27 = 0;
    goto LABEL_15;
  }
  v27 = a3;
  if (!a3)
  {
LABEL_15:
    *(_OWORD *)a1 = v24;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = v19;
    *(_OWORD *)(a1 + 80) = v26;
    *(_QWORD *)(a1 + 96) = v21;
    *(_QWORD *)(a1 + 104) = v22;
    return v27;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v12 >> 10 <= v13 >> 10)
    {
      v28 = 0;
LABEL_13:
      v24 = v34;
      v23 = v33;
      v25 = v37;
      v26 = v39;
      v27 = v28;
    }
    else
    {
      v28 = 0;
      while (1)
      {
        v29 = BigString.UTF8View.Iterator.next()();
        if ((*(_WORD *)&v29 & 0x100) != 0)
        {
          v13 = v38;
          goto LABEL_13;
        }
        *(_BYTE *)(a2 + v28) = v29.value;
        v13 = v38;
        if (a3 - 1 == v28)
          break;
        ++v28;
        if (v12 >> 10 <= v38 >> 10)
          goto LABEL_13;
      }
      v24 = v34;
      v23 = v33;
      v25 = v37;
      v26 = v39;
    }
    v21 = v32;
    v22 = v31;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_23833C108(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = (uint64_t)v3;
  v46 = *v3;
  v44 = v3[2];
  v45 = v3[1];
  v42 = v3[4];
  v43 = v3[3];
  v6 = v3[6];
  v7 = v3[7];
  v8 = v3[8];
  v9 = v3[9];
  v40 = v3[10];
  v41 = v3[5];
  v11 = v3[11];
  v10 = v3[12];
  v12 = v3[13];
  sub_238263DDC((uint64_t)v3);
  sub_238263DDC((uint64_t)v3);
  v13 = sub_2382644F4(v6, v7, v8, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  sub_238263DDC((uint64_t)v3);
  v20 = sub_238264714(v40, v11, v10, v12, 1);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_23825B804(v4);
  sub_23825B804(v4);
  result = sub_23825B804(v4);
  v28 = v22;
  v29 = v19;
  v31 = v41;
  v30 = v42;
  v33 = v43;
  v32 = v44;
  v35 = v45;
  v34 = v46;
  v48 = v13;
  v49 = v19;
  v50 = v22;
  if (!a2)
  {
    v36 = 0;
    goto LABEL_14;
  }
  v36 = a3;
  if (!a3)
  {
LABEL_14:
    *a1 = v34;
    a1[1] = v35;
    a1[2] = v32;
    a1[3] = v33;
    a1[4] = v30;
    a1[5] = v31;
    a1[6] = v13;
    a1[7] = v15;
    a1[8] = v17;
    a1[9] = v29;
    a1[10] = v20;
    a1[11] = v28;
    a1[12] = v24;
    a1[13] = v26;
    return v36;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v20 >> 10 <= v13 >> 10)
    {
      v37 = 0;
LABEL_13:
      v34 = v46;
      v35 = v45;
      v32 = v44;
      v33 = v43;
      v30 = v42;
      v31 = v41;
      v29 = v49;
      v28 = v50;
      v36 = v37;
    }
    else
    {
      v37 = 0;
      while (1)
      {
        BigString.UnicodeScalarView.Iterator.next()();
        if ((v38 & 0x100000000) != 0)
        {
          v13 = v48;
          goto LABEL_13;
        }
        *(_DWORD *)(a2 + 4 * v37) = v38;
        if (a3 - 1 == v37)
          break;
        v13 = v48;
        ++v37;
        if (v20 >> 10 <= v48 >> 10)
          goto LABEL_13;
      }
      v34 = v46;
      v35 = v45;
      v32 = v44;
      v33 = v43;
      v30 = v42;
      v31 = v41;
      v13 = v48;
      v29 = v49;
      v28 = v50;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t *sub_23833C324(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t *v14;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = a4;
  if (!a4)
  {
LABEL_23:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (uint64_t *)v5;
  }
  v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6)
        v6 = a3 - 2;
      if (v6 >= a3 - 1)
        v6 = a3 - 1;
      v7 = v6 + 1;
      if (v7 > 4)
      {
        v10 = v7 & 3;
        if ((v7 & 3) == 0)
          v10 = 4;
        v11 = v7 - v10;
        v8 = v7 - v10 + 1;
        v9 = &a2[v11];
        v12 = vdupq_n_s64(a5);
        v13 = (int64x2_t *)(a2 + 3);
        do
        {
          v13[-1] = v12;
          *v13 = v12;
          v13 += 2;
          v11 -= 4;
        }
        while (v11);
      }
      else
      {
        v8 = 1;
        v9 = a2;
      }
      v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8)
          goto LABEL_22;
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_23833C400()
{
  unint64_t result;

  result = qword_2568F2138;
  if (!qword_2568F2138)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UTF8View, &type metadata for BigSubstring.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F2138);
  }
  return result;
}

unint64_t sub_23833C448()
{
  unint64_t result;

  result = qword_2568F2140;
  if (!qword_2568F2140)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UTF8View.Iterator, &type metadata for BigSubstring.UTF8View.Iterator);
    atomic_store(result, (unint64_t *)&qword_2568F2140);
  }
  return result;
}

unint64_t sub_23833C490()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2568F2148;
  if (!qword_2568F2148)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F2150);
    v2 = sub_23830C83C();
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0658], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568F2148);
  }
  return result;
}

unint64_t sub_23833C4F8()
{
  unint64_t result;

  result = qword_2568F2158;
  if (!qword_2568F2158)
  {
    result = MEMORY[0x23B831670](&protocol conformance descriptor for BigSubstring.UTF8View, &type metadata for BigSubstring.UTF8View);
    atomic_store(result, (unint64_t *)&qword_2568F2158);
  }
  return result;
}

unint64_t sub_23833C540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568F2160;
  if (!qword_2568F2160)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2568F2150);
    result = MEMORY[0x23B831670](MEMORY[0x24BEE0670], v1);
    atomic_store(result, (unint64_t *)&qword_2568F2160);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.UTF8View()
{
  return &type metadata for BigSubstring.UTF8View;
}

ValueMetadata *type metadata accessor for BigSubstring.UTF8View.Iterator()
{
  return &type metadata for BigSubstring.UTF8View.Iterator;
}

uint64_t Rope.remove(at:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return Rope._remove(at:)(a5, a1, a2, a3, a4);
}

uint64_t Rope._remove(at:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v9;
  void (*v10)(_QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *TupleTypeMetadata;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  BOOL v52;
  void (*v53)(char *, uint64_t);
  int *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  int v64;
  uint64_t v65;
  char *v66;
  int v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t AssociatedConformanceWitness;
  uint64_t v78;
  int *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, char *, _QWORD *);
  char *v111;
  unsigned int (*v112)(char *, uint64_t, uint64_t);
  void (*v113)(uint64_t, char *, uint64_t);
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int v120;
  _BOOL4 v121;
  char *v122;
  int *v123;
  _QWORD *v124;
  unsigned __int16 *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  void (*v129)(_QWORD, _QWORD);
  char *v130;
  char v131[40];
  unint64_t v132[4];

  v6 = v5;
  v7 = a5;
  v123 = a2;
  v124 = (_QWORD *)a4;
  v115 = a1;
  v10 = (void (*)(_QWORD, _QWORD))a5[2];
  v9 = a5[3];
  v11 = type metadata accessor for Rope._Node(255, (uint64_t)v10, v9, a4);
  v118 = sub_23835B334();
  v125 = *(unsigned __int16 **)(v118 - 8);
  v12 = MEMORY[0x24BDAC7A8](v118);
  v102 = (char *)&AssociatedTypeWitness - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v105 = (char *)&AssociatedTypeWitness - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)&AssociatedTypeWitness - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v119 = (char *)&AssociatedTypeWitness - v19;
  v20 = *(_QWORD *)(v11 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v103 = (char *)&AssociatedTypeWitness - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v108 = (char *)&AssociatedTypeWitness - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v104 = (char *)&AssociatedTypeWitness - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v106 = (char *)&AssociatedTypeWitness - v28;
  MEMORY[0x24BDAC7A8](v27);
  v116 = (char *)&AssociatedTypeWitness - v29;
  strcpy(v131, "removed delta needsFixing pathIsAtEnd ");
  v132[0] = type metadata accessor for Rope._Item(255, (uint64_t)v10, v9, v30);
  v128 = (char *)v9;
  v129 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v132[1] = AssociatedTypeWitness;
  v132[2] = MEMORY[0x24BEE1328];
  v132[3] = MEMORY[0x24BEE1328];
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v127 = *((_QWORD *)TupleTypeMetadata - 1);
  v32 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v114 = (char *)&AssociatedTypeWitness - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v126 = (char *)&AssociatedTypeWitness - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&AssociatedTypeWitness - v37;
  v39 = *(v7 - 1);
  MEMORY[0x24BDAC7A8](v36);
  v41 = (char *)&AssociatedTypeWitness - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = *(void (**)(char *, char *, _QWORD *))(v39 + 16);
  v110(v41, v5, v7);
  v42 = v41;
  Rope.validate(_:)((uint64_t)v123, a3, (uint64_t)v124, (uint64_t)v7);
  v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  v111 = v41;
  v124 = v7;
  v109 = v43;
  v43(v41, (uint64_t)v7);
  v132[0] = a3;
  v117 = v20;
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v44(v6, 1, v11) == 1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v45 = TupleTypeMetadata[16];
  v122 = &v38[TupleTypeMetadata[12]];
  v123 = TupleTypeMetadata;
  v46 = TupleTypeMetadata[20];
  v47 = Rope._Node.remove(at:)((uint64_t)v38, (uint64_t)v122, v132, v11);
  LODWORD(v113) = v47;
  v120 = v47 & 1;
  v121 = (unsigned __int16)v47 > 0xFFu;
  v38[v45] = v47 & 1;
  v130 = v38;
  v38[v46] = (unsigned __int16)v47 > 0xFFu;
  v48 = (void (*)(char *, char *))*((_QWORD *)v125 + 2);
  v42 = v119;
  v7 = (_QWORD *)v118;
  v48(v119, v6);
  v112 = v44;
  if (v44(v42, 1, v11) == 1)
  {
LABEL_18:
    result = (*((uint64_t (**)(char *, _QWORD *))v125 + 1))(v42, v7);
    __break(1u);
    return result;
  }
  v49 = v117;
  v50 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
  v51 = v116;
  v50(v116, v42, v11);
  v52 = Rope._Node.isEmpty.getter();
  v53 = *(void (**)(char *, uint64_t))(v49 + 8);
  v53(v51, v11);
  if (!v52)
  {
    v42 = v107;
    ((void (*)(char *, char *, _QWORD *))v48)(v107, v6, v7);
    v62 = v112;
    if (v112(v42, 1, v11) != 1)
    {
      v63 = v106;
      v50(v106, v42, v11);
      v64 = (unsigned __int16)Rope._Node.header.getter();
      v53(v63, v11);
      v65 = (uint64_t)v108;
      if (v64 != 1)
        goto LABEL_12;
      v42 = v105;
      ((void (*)(char *, char *, _QWORD *))v48)(v105, v6, v7);
      if (v62(v42, 1, v11) != 1)
      {
        v66 = v104;
        v50(v104, v42, v11);
        v67 = Rope._Node.header.getter();
        v53(v66, v11);
        v68 = v112;
        if ((v67 & 0xFF0000) == 0)
          goto LABEL_12;
        v42 = v102;
        ((void (*)(char *, char *, _QWORD *))v48)(v102, v6, v7);
        if (v68(v42, 1, v11) != 1)
        {
          v7 = v103;
          v50(v103, v42, v11);
          v42 = (char *)*v7;
          v69 = *v7 + 16;
          v70 = *v7 + ((*(unsigned __int8 *)(v49 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
          MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v11);
          v71 = v69;
          v72 = (uint64_t)v128;
          v73 = v129;
          v125 = (unsigned __int16 *)nullsub_1(v71, v70, v129, v11, v128);
          v75 = v74;
          swift_unknownObjectRetain();
          sub_23833D900(v125, v75, (uint64_t)v73, v72, v65);
          swift_unknownObjectRelease();
          v53((char *)v7, v11);
          if (v112(v6, 1, v11) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v49 + 40))(v6, v65, v11);
            v76 = AssociatedTypeWitness;
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            type metadata accessor for _RopePath(0, v76, AssociatedConformanceWitness, v78);
            _RopePath.popRoot()();
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
    }
    goto LABEL_18;
  }
  (*((void (**)(char *, _QWORD *))v125 + 1))(v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v6, 1, 1, v11);
  v54 = v123;
  v55 = v126;
  v56 = &v126[v123[12]];
  v57 = v123[16];
  v58 = v123[20];
  v60 = type metadata accessor for Rope._Item(0, (uint64_t)v129, (uint64_t)v128, v59);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v55, v130, v60);
  v61 = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v56, v122, v61);
  v55[v57] = v120;
  v55[v58] = v121;
  (*(void (**)(char *, int *))(v127 + 8))(v55, v54);
LABEL_12:
  LODWORD(v125) = (unsigned __int16)v113;
  Rope._invalidateIndices()();
  v79 = v123;
  v80 = v114;
  v81 = (uint64_t)&v114[v123[12]];
  v82 = v123[16];
  v117 = v123[20];
  v112 = (unsigned int (*)(char *, uint64_t, uint64_t))v6;
  v83 = v129;
  v85 = type metadata accessor for Rope._Item(0, (uint64_t)v129, (uint64_t)v128, v84);
  v116 = *(char **)(v85 - 8);
  v119 = (char *)*((_QWORD *)v116 + 2);
  v86 = v130;
  ((void (*)(char *, char *, uint64_t))v119)(v80, v130, v85);
  v87 = swift_getAssociatedTypeWitness();
  v118 = *(_QWORD *)(v87 - 8);
  v88 = v83;
  v113 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 16);
  v128 = (char *)v81;
  v89 = (uint64_t)v122;
  v113(v81, v122, v87);
  LOBYTE(v83) = v120;
  v80[v82] = v120;
  LOBYTE(v82) = v121;
  v80[v117] = v121;
  (*(void (**)(uint64_t, char *, _QWORD *))(*(v88 - 1) + 16))(v115, v80, v88);
  v129 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v116 + 1);
  v129(v80, v85);
  v90 = v126;
  v91 = &v126[v79[12]];
  v117 = v79[16];
  v92 = v79[20];
  ((void (*)(char *, char *, uint64_t))v119)(v126, v86, v85);
  v113((uint64_t)v91, (char *)v89, v87);
  v90[v117] = (char)v83;
  v90[v92] = v82;
  v93 = *(void (**)(char *, uint64_t))(v118 + 8);
  v93(v91, v87);
  v129(v90, v85);
  if (v125 < 0x100)
  {
    (*(void (**)(char *, int *))(v127 + 8))(v130, v79);
    v99 = v132[0];
  }
  else
  {
    v94 = v111;
    v95 = (uint64_t)v124;
    v110(v111, (char *)v112, v124);
    v99 = Rope._endPath.getter(v95, v96, v97, v98);
    v109(v94, v95);
    (*(void (**)(char *, int *))(v127 + 8))(v130, v79);
  }
  v93(v128, v87);
  return v99;
}

uint64_t Rope.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = Rope._remove(at:)(a3, *(int **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (_QWORD *)a2);
  v7 = *(_QWORD *)(v3 + *(int *)(a2 + 36));
  v10 = Rope._unmanagedLeaf(at:)(v6, a2, v8, v9);
  result = Rope.Index.init(version:path:leaf:)(v7, v6, v10, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t Rope._Node.remove(at:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *TupleTypeMetadata;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t *v62;
  int v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  void (*v73)(unint64_t *, uint64_t, uint64_t);
  char *v74;
  char *v75;
  void (**v76)(unint64_t *, uint64_t);
  char v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  char v98;
  char *v99;
  char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t TupleTypeMetadata2;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  _QWORD *v123;
  uint64_t v124;
  char v125[48];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v5 = v4;
  v122 = a3;
  v114 = a2;
  v113 = a1;
  v8 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  v9 = type metadata accessor for Rope._Item(255, v8, v7, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v117 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v118 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v107 = (void (*)(char *, uint64_t))((char *)&v102 - v14);
  MEMORY[0x24BDAC7A8](v13);
  v108 = (uint64_t)&v102 - v15;
  strcpy(v125, "removed delta needsFixing pathIsAtEnd ");
  v120 = v9;
  v126 = v9;
  v127 = AssociatedTypeWitness;
  v128 = MEMORY[0x24BEE1328];
  v129 = MEMORY[0x24BEE1328];
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v110 = *((_QWORD *)TupleTypeMetadata - 1);
  v17 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v109 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v102 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v115 = (char *)&v102 - v22;
  Rope._Node.ensureUnique()();
  v23 = Rope._Node.header.getter();
  v24 = BYTE2(v23);
  v25 = HIWORD(v23);
  v26 = *v122;
  v112 = v7;
  v111 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = _RopePath.subscript.getter(v25, v26, AssociatedTypeWitness, AssociatedConformanceWitness);
  v124 = a4;
  v29 = v5;
  result = Rope._Node.header.getter();
  v116 = v28;
  if (v28 >= (unsigned __int16)result)
  {
    __break(1u);
    goto LABEL_19;
  }
  v123 = v5;
  if (v24)
  {
    LODWORD(v108) = v25;
    v31 = (uint64_t)v115;
    TupleTypeMetadata2 = (uint64_t)&v115[TupleTypeMetadata[12]];
    v32 = (char *)TupleTypeMetadata[20];
    v117 = TupleTypeMetadata[16];
    v118 = v32;
    v33 = *v29 + 16;
    v34 = v124;
    v35 = *(unsigned __int8 *)(*(_QWORD *)(v124 - 8) + 80);
    v36 = *v29 + ((v35 + 19) & ~v35);
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v124);
    v121 = AssociatedTypeWitness;
    v37 = v111;
    v38 = AssociatedConformanceWitness;
    v39 = v112;
    v40 = (unsigned __int16 *)nullsub_1(v33, v36, v111, v34, v112);
    v42 = v41;
    swift_unknownObjectRetain();
    sub_23833DA30(v40, v42, (uint64_t)v122, v37, v39, v31);
    swift_unknownObjectRelease();
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 56);
    v44 = TupleTypeMetadata2;
    v45 = v121;
    v102 = v38;
    v43(TupleTypeMetadata2, v121, v38);
    v46 = &v21[TupleTypeMetadata[12]];
    v116 = TupleTypeMetadata[16];
    v112 = TupleTypeMetadata[20];
    v47 = v120;
    v48 = *(_QWORD *)(v120 - 8);
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    v49(v21, v31, v120);
    v50 = v45;
    v51 = *(_QWORD *)(v45 - 8);
    v52 = *(void (**)(char *, uint64_t))(v51 + 16);
    v53 = v44;
    v54 = v50;
    v52(v46, v53);
    v21[v116] = *(_BYTE *)(v31 + v117);
    LODWORD(v116) = v118[v31];
    v21[v112] = v116;
    v106 = v51;
    v55 = *(void (**)(char *, uint64_t))(v51 + 8);
    v55(v46, v54);
    v103 = v48;
    v56 = *(void (**)(char *, uint64_t))(v48 + 8);
    v56(v21, v47);
    v57 = &v21[TupleTypeMetadata[12]];
    v112 = TupleTypeMetadata[16];
    v58 = v21;
    v111 = (uint64_t)TupleTypeMetadata;
    v59 = TupleTypeMetadata[20];
    v105 = v49;
    v49(v58, v31, v47);
    v60 = v121;
    v104 = v52;
    ((void (*)(char *, uint64_t, uint64_t))v52)(v57, TupleTypeMetadata2, v121);
    LODWORD(v49) = *(unsigned __int8 *)(v31 + v117);
    v58[v112] = (char)v49;
    v58[v59] = v118[v31];
    v112 = (uint64_t)v55;
    v55(v57, v60);
    v61 = v58;
    v107 = v56;
    v56(v58, v47);
    if ((_DWORD)v49 == 1)
    {
      v62 = v122;
      v63 = Rope._Node.fixDeficiency(on:)(v122, v124);
      v64 = v108;
      if ((v116 & v63 & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      v62 = v122;
      v64 = v108;
      if (!(_DWORD)v116)
      {
LABEL_11:
        LODWORD(v122) = 0;
LABEL_13:
        v87 = (int *)v111;
        v88 = v61;
        v89 = (uint64_t)&v61[*(int *)(v111 + 48)];
        v116 = v89;
        v90 = *(int *)(v111 + 64);
        v111 = *(int *)(v111 + 80);
        v91 = v115;
        v92 = v120;
        v93 = (void (*)(char *, char *, uint64_t))v105;
        v105(v88, (uint64_t)v115, v120);
        v94 = v89;
        v95 = TupleTypeMetadata2;
        v96 = v121;
        v97 = (void (*)(char *, uint64_t, uint64_t))v104;
        ((void (*)(uint64_t, uint64_t, uint64_t))v104)(v94, TupleTypeMetadata2, v121);
        LODWORD(v117) = v91[v117];
        v88[v90] = v117;
        v98 = v118[(_QWORD)v91];
        v88[v111] = v98;
        (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v113, v88, v92);
        v99 = v109;
        v100 = &v109[v87[12]];
        v118 = (char *)v87[16];
        v113 = v87[20];
        v93(v109, v91, v92);
        v97(v100, v95, v96);
        v118[(_QWORD)v99] = v117;
        v99[v113] = v98;
        (*(void (**)(uint64_t, char *, uint64_t))(v106 + 32))(v114, v100, v96);
        v77 = Rope._Node.isUndersized.getter();
        (*(void (**)(char *, int *))(v110 + 8))(v91, v87);
        v107(v99, v92);
        ((void (*)(uint64_t, uint64_t))v112)(v116, v96);
        v79 = (int)v122;
        goto LABEL_14;
      }
    }
    v80 = *v62;
    v81 = v121;
    v82 = v102;
    v83 = _RopePath.subscript.getter(v64, *v62, v121, v102);
    if (v83 >= (unsigned __int16)Rope._Node.header.getter() - 1)
    {
      LODWORD(v122) = 1;
      goto LABEL_13;
    }
    result = _RopePath.subscript.getter(v64, v80, v81, v82);
    v85 = result + 1;
    if (!__OFADD__(result, 1))
    {
      v86 = type metadata accessor for _RopePath(0, v81, v82, v84);
      _RopePath.subscript.setter(v85, v64, v86);
      _RopePath.clear(below:)(v64);
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  v65 = TupleTypeMetadata2;
  v66 = v108;
  v67 = v108 + *(int *)(TupleTypeMetadata2 + 48);
  Rope._Node._removeItem(at:)(v108, v67, v116, v124);
  v68 = (char *)v107;
  v122 = (unint64_t *)((char *)v107 + *(int *)(v65 + 48));
  v69 = v122;
  v70 = v120;
  v71 = *(_QWORD *)(v120 - 8);
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v72((char *)v107, v66, v120);
  v115 = *(char **)(AssociatedTypeWitness - 8);
  v73 = (void (*)(unint64_t *, uint64_t, uint64_t))*((_QWORD *)v115 + 2);
  v73(v69, v67, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v113, v68, v70);
  v74 = v118;
  v75 = &v118[*(int *)(v65 + 48)];
  v72(v118, v66, v70);
  v73((unint64_t *)v75, v67, AssociatedTypeWitness);
  v76 = (void (**)(unint64_t *, uint64_t))v115;
  (*((void (**)(uint64_t, char *, uint64_t))v115 + 4))(v114, v75, AssociatedTypeWitness);
  v77 = Rope._Node.isUndersized.getter();
  v78 = (unsigned __int16)Rope._Node.header.getter();
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v66, v65);
  v79 = v116 == v78;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v70);
  v76[1](v122, AssociatedTypeWitness);
LABEL_14:
  if (v79)
    v101 = 256;
  else
    v101 = 0;
  return v101 & 0xFFFFFFFE | v77 & 1;
}

uint64_t sub_23833D900@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];

  v10 = type metadata accessor for Rope._Node(255, a3, a4, a4);
  v11 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v19 - v12;
  v14 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v10);
  v19[0] = Rope._UnsafeHandle.children.getter(a1, a2, a3, v10, a4, v14);
  v19[1] = v15;
  v16 = sub_23835AD7C();
  MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v16);
  sub_23835B214();
  v17 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v10);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a5, v13, v10);
  __break(1u);
  return result;
}

uint64_t sub_23833DA30@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int *TupleTypeMetadata;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  type metadata accessor for Rope._Item(255, a4, a5, a3);
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v12 = a6 + TupleTypeMetadata[12];
  v13 = TupleTypeMetadata[16];
  v14 = TupleTypeMetadata[20];
  v16 = type metadata accessor for Rope._Node(0, a4, a5, v15);
  v17 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v16);
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a4, v16, a5, v17);
  result = Rope._Node.remove(at:)(a6, v12, a3, v16);
  *(_BYTE *)(a6 + v13) = result & 1;
  *(_BYTE *)(a6 + v14) = (unsigned __int16)result > 0xFFu;
  return result;
}

uint64_t Rope._Node.fixDeficiency(on:)(unint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v14;

  v5 = *v2;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  v7 = v5 + ((v6 + 19) & ~v6);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node);
  v10 = nullsub_1(v5 + 16, v7, v8, a2, v9);
  v12 = v11;
  swift_unknownObjectRetain();
  sub_23833F4B8(v10, v12, a1, v8, v9, (char *)&v14);
  swift_unknownObjectRelease();
  return v14;
}

uint64_t Rope.remove<A>(at:in:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, void (*a5)(char *, char *, uint64_t), uint64_t a6)
{
  void (*v6)(char *, uint64_t);
  void (*v7)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *TupleTypeMetadata;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  unsigned int (*v47)(void (*)(char *, uint64_t), uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void (*v52)(char *, void (*)(char *, uint64_t), uint64_t);
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  BOOL v56;
  void (*v57)(char *, uint64_t);
  int *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  int v64;
  char *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  BOOL v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, char *, uint64_t);
  uint64_t v101;
  uint64_t result;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  void (*v110)(char *, void (*)(char *, uint64_t), uint64_t);
  void (*v111)(char *, uint64_t);
  char *v112;
  uint64_t v113;
  int v114;
  _BOOL4 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int (*v123)(uint64_t, uint64_t, uint64_t);
  int *v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  char *v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  char v135[40];
  unint64_t v136[4];

  v7 = v6;
  v125 = a5;
  v126 = a6;
  v132 = (char *)a2;
  v133 = a3;
  v122 = a1;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  v11 = type metadata accessor for Rope._Node(255, v9, v10, a4);
  v120 = sub_23835B334();
  v128 = *(_QWORD *)(v120 - 8);
  v12 = MEMORY[0x24BDAC7A8](v120);
  v103 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v107 = (char *)&v103 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v109 = (char *)&v103 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v119 = (char *)&v103 - v19;
  v127 = *(_QWORD *)(v11 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v104 = (uint64_t *)((char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = MEMORY[0x24BDAC7A8](v20);
  v105 = (uint64_t)&v103 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v106 = (char *)&v103 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v108 = (char *)&v103 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v118 = (char *)&v103 - v28;
  strcpy(v135, "removed delta needsFixing pathIsAtEnd ");
  v136[0] = type metadata accessor for Rope._Item(255, v9, v10, v29);
  v136[1] = swift_getAssociatedTypeWitness();
  v136[2] = MEMORY[0x24BEE1328];
  v136[3] = MEMORY[0x24BEE1328];
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v113 = *((_QWORD *)TupleTypeMetadata - 1);
  v31 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v117 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v103 - v34;
  v36 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rope._invalidateIndices()();
  v110 = *(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v36 + 16);
  v110(v38, v6, a4);
  v42 = Rope._height.getter(a4, v39, v40, v41);
  v43 = *(void (**)(char *, uint64_t))(v36 + 8);
  v112 = v38;
  v44 = v38;
  v45 = v127;
  v121 = a4;
  v111 = v43;
  v43(v44, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v129 = v10;
  v134 = v9;
  swift_getAssociatedConformanceWitness();
  v116 = AssociatedTypeWitness;
  v136[0] = _RopePath.init(height:)(v42);
  v47 = *(unsigned int (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v45 + 48);
  if (v47(v7, 1, v11) == 1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v48 = (uint64_t)&v35[TupleTypeMetadata[12]];
  v49 = TupleTypeMetadata[16];
  v124 = TupleTypeMetadata;
  v50 = TupleTypeMetadata[20];
  v131 = v48;
  v51 = Rope._Node.remove<A>(at:in:initializing:)((uint64_t)v35, v48, (uint64_t)v132, v133, v136, v11, (uint64_t)v125, v126);
  v114 = v51;
  v130 = v51 & 1;
  v35[v49] = v51 & 1;
  v132 = v35;
  v115 = (unsigned __int16)v51 > 0xFFu;
  v35[v50] = v115;
  v52 = *(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v128 + 16);
  AssociatedTypeWitness = (uint64_t)v119;
  v133 = v7;
  v53 = v7;
  v7 = (void (*)(char *, uint64_t))v120;
  v52(v119, v53, v120);
  v123 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
  if (v47((void (*)(char *, uint64_t))AssociatedTypeWitness, 1, v11) == 1)
  {
LABEL_18:
    (*(void (**)(uint64_t, _QWORD))(v128 + 8))(AssociatedTypeWitness, v7);
    __break(1u);
    goto LABEL_19;
  }
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  v55 = v118;
  v54(v118, AssociatedTypeWitness, v11);
  v56 = Rope._Node.isEmpty.getter();
  v57 = *(void (**)(char *, uint64_t))(v45 + 8);
  v57(v55, v11);
  v58 = v124;
  v59 = v134;
  if (!v56)
  {
    AssociatedTypeWitness = (uint64_t)v109;
    v62 = v133;
    v52(v109, v133, (uint64_t)v7);
    if (v123(AssociatedTypeWitness, 1, v11) == 1)
      goto LABEL_18;
    v63 = v108;
    v54(v108, AssociatedTypeWitness, v11);
    v64 = (unsigned __int16)Rope._Node.header.getter();
    v57(v63, v11);
    if (v64 != 1)
      goto LABEL_12;
    AssociatedTypeWitness = (uint64_t)v107;
    v52(v107, v62, (uint64_t)v7);
    if (v123(AssociatedTypeWitness, 1, v11) == 1)
      goto LABEL_18;
    v65 = v106;
    v54(v106, AssociatedTypeWitness, v11);
    v66 = Rope._Node.header.getter();
    v57(v65, v11);
    if ((v66 & 0xFF0000) == 0)
      goto LABEL_12;
    AssociatedTypeWitness = (uint64_t)v103;
    v52(v103, v62, (uint64_t)v7);
    if (v123(AssociatedTypeWitness, 1, v11) == 1)
    {
LABEL_19:
      result = (*(uint64_t (**)(uint64_t, _QWORD))(v128 + 8))(AssociatedTypeWitness, v7);
      __break(1u);
      return result;
    }
    v7 = v62;
    v67 = v104;
    v54((char *)v104, AssociatedTypeWitness, v11);
    AssociatedTypeWitness = *v67;
    v68 = *v67 + 16;
    v69 = v127;
    v70 = *v67 + ((*(unsigned __int8 *)(v127 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v11);
    v71 = (unsigned __int16 *)nullsub_1(v68, v70, v59, v11, v129);
    v73 = v72;
    swift_unknownObjectRetain();
    v74 = v105;
    sub_23833F03C(v71, v73, v59, v105);
    swift_unknownObjectRelease();
    v57((char *)v67, v11);
    if (v123((uint64_t)v7, 1, v11) != 1)
    {
      (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v69 + 40))(v7, v74, v11);
      v58 = v124;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v60 = v133;
  (*(void (**)(_QWORD, _QWORD))(v128 + 8))(v133, v7);
  (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(v45 + 56))(v60, 1, 1, v11);
LABEL_12:
  LODWORD(v126) = (unsigned __int16)v114;
  v75 = v117;
  v76 = &v117[v58[12]];
  v77 = v58[16];
  v78 = v58;
  v79 = v58[20];
  v80 = type metadata accessor for Rope._Item(0, v59, v129, v61);
  v81 = *(_QWORD *)(v80 - 8);
  v125 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v125(v75, v132, v80);
  v82 = v116;
  v83 = *(_QWORD *)(v116 - 8);
  v84 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
  v84(v76, v131, v116);
  v75[v77] = v130;
  v85 = v115;
  v75[v79] = v115;
  v128 = *(_QWORD *)(v83 + 8);
  ((void (*)(char *, uint64_t))v128)(v76, v82);
  v127 = *(_QWORD *)(v81 + 8);
  ((void (*)(char *, uint64_t))v127)(v75, v80);
  if (v126 < 0x100)
  {
    v94 = v134;
    v129 = Rope.Index.init(version:path:leaf:)(*(_QWORD *)((char *)v133 + *(int *)(v121 + 36)), v136[0], 0, v134, v129);
    v126 = v95;
    v133 = v96;
    v97 = &v75[v78[12]];
    v98 = v78[16];
    v99 = v78[20];
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v75, v132, v80);
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v97, v131, v82);
    v75[v98] = v130;
    v75[v99] = v85;
    v93 = v129;
    v100 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
    v101 = v94;
    v86 = v97;
    v100(v122, v75, v101);
    ((void (*)(char *, uint64_t))v127)(v75, v80);
  }
  else
  {
    v86 = &v75[v78[12]];
    v87 = v78[16];
    v88 = v75;
    v89 = v78[20];
    v90 = (uint64_t)v132;
    v125(v88, v132, v80);
    v84(v86, v131, v82);
    v88[v87] = v130;
    v88[v89] = v85;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(v134 - 8) + 16))(v122, v88);
    ((void (*)(char *, uint64_t))v127)(v88, v80);
    v91 = v112;
    v92 = v121;
    v110(v112, v133, v121);
    v93 = Rope.endIndex.getter(v92);
    v111(v91, v92);
    (*(void (**)(uint64_t, int *))(v113 + 8))(v90, v78);
  }
  ((void (*)(char *, uint64_t))v128)(v86, v82);
  return v93;
}

uint64_t Rope._Node.remove<A>(at:in:initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  int *TupleTypeMetadata;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  int v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)(uint64_t *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t *v87;
  void (**v88)(uint64_t, char *, uint64_t);
  void (*v89)(char *, uint64_t, uint64_t);
  void (*v90)(unint64_t *, uint64_t, uint64_t);
  char *v91;
  char *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  char *v109;
  int *v110;
  void (*v111)(char *, char *, uint64_t);
  char *v112;
  char *v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  char *v117;
  void (**v118)(uint64_t, char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t TupleTypeMetadata2;
  char *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char v138[48];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v9 = v8;
  v127 = a8;
  v128 = a7;
  v134 = a5;
  v126 = a4;
  v125 = a3;
  v122 = a2;
  v121 = a1;
  v12 = *(_QWORD *)(a6 + 16);
  v11 = *(_QWORD *)(a6 + 24);
  v13 = type metadata accessor for Rope._Item(255, v12, v11, (uint64_t)a4);
  v129 = v11;
  v130 = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v16 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v133 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v131 = (char *)&v115 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (void (**)(uint64_t, char *, uint64_t))((char *)&v115 - v21);
  v123 = *(void (**)(char *, char *, uint64_t))(a6 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (uint64_t *)((char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  strcpy(v138, "removed delta needsFixing pathIsAtEnd ");
  v135 = v13;
  v139 = v13;
  v140 = AssociatedTypeWitness;
  v124 = AssociatedTypeWitness;
  v141 = MEMORY[0x24BEE1328];
  v142 = MEMORY[0x24BEE1328];
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v26 = *((_QWORD *)TupleTypeMetadata - 1);
  v27 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v120 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v115 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (uint64_t)&v115 - v32;
  Rope._Node.ensureUnique()();
  v34 = Rope._Node.header.getter();
  v136 = a6;
  v137 = v9;
  if (BYTE2(v34))
  {
    v119 = v26;
    v35 = HIWORD(v34);
    v133 = (char *)(v33 + TupleTypeMetadata[12]);
    v36 = TupleTypeMetadata[20];
    v131 = (char *)TupleTypeMetadata[16];
    TupleTypeMetadata2 = v36;
    v37 = *v9 + 16;
    v38 = *v9 + ((*((unsigned __int8 *)v123 + 80) + 19) & ~(unint64_t)*((unsigned __int8 *)v123 + 80));
    MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, a6);
    v39 = v130;
    v40 = (unsigned __int16 *)nullsub_1(v37, v38, v130, a6, v129);
    v42 = v41;
    swift_unknownObjectRetain();
    v116 = v35;
    sub_23833F250(v40, v42, v125, (uint64_t)v126, (uint64_t)v134, v35, v39, v128, v33, v127);
    swift_unknownObjectRelease();
    v43 = v124;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v45 = *(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 56);
    v46 = v133;
    v115 = AssociatedConformanceWitness;
    v45(v133, v43);
    v47 = &v31[TupleTypeMetadata[12]];
    v48 = TupleTypeMetadata[20];
    v128 = TupleTypeMetadata[16];
    v129 = v48;
    v49 = v135;
    v50 = *(_QWORD *)(v135 - 8);
    v130 = *(_QWORD *)(v50 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v130)(v31, v33, v135);
    v51 = *(_QWORD *)(v43 - 8);
    v52 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v52(v47, v46, v43);
    v31[v128] = v131[v33];
    LODWORD(v128) = *(unsigned __int8 *)(v33 + TupleTypeMetadata2);
    v31[v129] = v128;
    v125 = v51;
    v53 = *(void (**)(char *, uint64_t))(v51 + 8);
    v53(v47, v43);
    v118 = (void (**)(uint64_t, char *, uint64_t))v50;
    v54 = *(void (**)(char *, uint64_t))(v50 + 8);
    v54(v31, v49);
    v55 = &v31[TupleTypeMetadata[12]];
    v127 = TupleTypeMetadata[16];
    v129 = (uint64_t)TupleTypeMetadata;
    v56 = TupleTypeMetadata[20];
    ((void (*)(char *, uint64_t, uint64_t))v130)(v31, v33, v49);
    v123 = v52;
    v52(v55, v133, v43);
    LODWORD(v51) = v131[v33];
    v31[v127] = v51;
    v31[v56] = *(_BYTE *)(v33 + TupleTypeMetadata2);
    v127 = (uint64_t)v53;
    v53(v55, v43);
    v117 = v31;
    v126 = v54;
    v54(v31, v49);
    v57 = v43;
    if ((_DWORD)v51 == 1)
    {
      v58 = v134;
      v59 = Rope._Node.fixDeficiency(on:)(v134, v136);
      v60 = (int *)v129;
      if ((v128 & v59 & 1) == 0)
      {
LABEL_4:
        v61 = v43;
LABEL_11:
        LODWORD(v134) = 0;
LABEL_13:
        v104 = v117;
        v105 = &v117[v60[12]];
        v106 = v60[16];
        v128 = v60[20];
        v129 = (uint64_t)v105;
        v107 = v135;
        v108 = (void (*)(char *, uint64_t, uint64_t))v130;
        ((void (*)(char *, uint64_t, uint64_t))v130)(v117, v33, v135);
        v109 = v133;
        v110 = v60;
        v111 = v123;
        v123(v105, v133, v61);
        LODWORD(v131) = v131[v33];
        v104[v106] = (char)v131;
        LOBYTE(v105) = *(_BYTE *)(v33 + TupleTypeMetadata2);
        v104[v128] = (char)v105;
        v118[4](v121, v104, v107);
        v112 = v120;
        v113 = &v120[v110[12]];
        TupleTypeMetadata2 = v110[16];
        v128 = v110[20];
        v108(v120, v33, v107);
        v111(v113, v109, v61);
        v112[TupleTypeMetadata2] = (char)v131;
        v112[v128] = (char)v105;
        (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v122, v113, v61);
        v94 = Rope._Node.isUndersized.getter();
        (*(void (**)(uint64_t, int *))(v119 + 8))(v33, v110);
        v126(v112, v107);
        ((void (*)(uint64_t, uint64_t))v127)(v129, v61);
        v96 = (int)v134;
        goto LABEL_14;
      }
    }
    else
    {
      v58 = v134;
      v60 = (int *)v129;
      if (!(_DWORD)v128)
        goto LABEL_4;
    }
    v97 = *v58;
    v98 = v116;
    v99 = v115;
    v100 = _RopePath.subscript.getter(v116, *v58, v43, v115);
    if (v100 >= (unsigned __int16)Rope._Node.header.getter() - 1)
    {
      v61 = v57;
      LODWORD(v134) = 1;
      goto LABEL_13;
    }
    result = _RopePath.subscript.getter(v98, v97, v57, v99);
    v102 = result + 1;
    if (!__OFADD__(result, 1))
    {
      v61 = v57;
      v103 = type metadata accessor for _RopePath(0, v57, v99, v101);
      _RopePath.subscript.setter(v102, v98, v103);
      _RopePath.clear(below:)(v98);
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  v118 = v22;
  v119 = v15;
  v62 = v124;
  v63 = (uint64_t (**)(uint64_t *, uint64_t))v123;
  (*((void (**)(uint64_t *, _QWORD *, uint64_t))v123 + 2))(v24, v9, a6);
  v64 = *v24;
  v65 = *v24 + 16;
  v66 = v135;
  v120 = *(char **)(v135 - 8);
  v67 = v64 + ((v120[80] + 19) & ~(unint64_t)v120[80]);
  MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v135);
  v68 = v130;
  v69 = (unsigned __int16 *)nullsub_1(v65, v67, v130, v66, v129);
  v71 = v70;
  swift_unknownObjectRetain();
  v72 = sub_23833F190(v69, v71, v125, (uint64_t)v126, v68, v128, v127);
  v74 = v73;
  v75 = v136;
  swift_unknownObjectRelease();
  result = v63[1](v24, v75);
  if (v74)
  {
    __break(1u);
    goto LABEL_19;
  }
  v77 = v62;
  v78 = swift_getAssociatedConformanceWitness();
  v80 = type metadata accessor for _RopePath(0, v62, v78, v79);
  _RopePath.subscript.setter(v72, 0, v80);
  v81 = v72;
  v128 = v72;
  v82 = TupleTypeMetadata2;
  v83 = v66;
  v84 = (uint64_t)v118;
  v85 = (uint64_t)v118 + *(int *)(TupleTypeMetadata2 + 48);
  Rope._Node._removeItem(at:)((uint64_t)v118, v85, v81, v75);
  v86 = v131;
  v134 = (unint64_t *)&v131[*(int *)(v82 + 48)];
  v87 = v134;
  v88 = (void (**)(uint64_t, char *, uint64_t))v120;
  v89 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v120 + 2);
  v89(v131, v84, v83);
  v130 = *(_QWORD *)(v77 - 8);
  v90 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v130 + 16);
  v90(v87, v85, v77);
  v88[4](v121, v86, v83);
  v91 = v133;
  v92 = &v133[*(int *)(v82 + 48)];
  v89(v133, v84, v83);
  v90((unint64_t *)v92, v85, v77);
  v93 = v130;
  (*(void (**)(uint64_t, char *, uint64_t))(v130 + 32))(v122, v92, v77);
  v94 = Rope._Node.isUndersized.getter();
  v95 = (unsigned __int16)Rope._Node.header.getter();
  (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v84, v82);
  v96 = v128 == v95;
  (*((void (**)(char *, uint64_t))v120 + 1))(v91, v83);
  (*(void (**)(unint64_t *, uint64_t))(v93 + 8))(v134, v77);
LABEL_14:
  if (v96)
    v114 = 256;
  else
    v114 = 0;
  return v114 & 0xFFFFFFFE | v94 & 1;
}

uint64_t sub_23833F03C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Rope._Node(255, a3, AssociatedConformanceWitness, v9);
  v11 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v19 - v12;
  v14 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v10);
  v19[0] = Rope._UnsafeHandle.children.getter(a1, a2, a3, v10, AssociatedConformanceWitness, v14);
  v19[1] = v15;
  v16 = sub_23835AD7C();
  MEMORY[0x23B831670](MEMORY[0x24BEE09E8], v16);
  sub_23835B214();
  v17 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v10);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a4, v13, v10);
  __break(1u);
  return result;
}

uint64_t sub_23833F190(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for Rope._Item(0, a5, AssociatedConformanceWitness, v15);
  v17 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Item, v16);
  return Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(a3, a4, 0, a1, a2, a5, v16, a6, v17, a7);
}

uint64_t sub_23833F250@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *TupleTypeMetadata;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for Rope._Node(0, a7, AssociatedConformanceWitness, v17);
  v38 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v18);
  v19 = a1;
  v20 = a8;
  v21 = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(a3, a4, 0, v19, a2, a7, v18, a8, v38, a10);
  v37 = v22;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = swift_getAssociatedConformanceWitness();
  v26 = type metadata accessor for _RopePath(0, AssociatedTypeWitness, v24, v25);
  _RopePath.subscript.setter(v21, a6, v26);
  type metadata accessor for Rope._Item(255, a7, AssociatedConformanceWitness, v27);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v29 = a9 + TupleTypeMetadata[12];
  v30 = TupleTypeMetadata[16];
  v31 = TupleTypeMetadata[20];
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a7, v18, AssociatedConformanceWitness, v38);
  result = Rope._Node.remove<A>(at:in:initializing:)(a9, v29, v37, a4, a5, v18, v20, a10);
  *(_BYTE *)(a9 + v30) = result & 1;
  *(_BYTE *)(a9 + v31) = (unsigned __int16)result > 0xFFu;
  return result;
}

void sub_23833F4B8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *);
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *);
  unsigned __int16 v40;
  void (*v41)(char *, uint64_t);
  unint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t *, uint64_t);
  uint64_t v51;
  uint64_t *v52;
  void (*v53)(char *, uint64_t);
  unsigned __int8 v54;
  unsigned __int16 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t *, uint64_t);
  uint64_t *v75;
  void (*v76)(char *, uint64_t);
  unint64_t v77;
  _WORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;

  v90 = a6;
  v11 = type metadata accessor for Rope._Node(0, a4, a5, a4);
  v88 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v73 - v12;
  v83 = MEMORY[0x23B831670](&protocol conformance descriptor for Rope<A>._Node, v11);
  v84 = a2;
  v89 = Rope._UnsafeHandle.mutableChildren.getter((unsigned __int16 *)a1, a2, a4, v11, a5, v83);
  v15 = v14;
  v16 = *(unsigned __int8 *)(a1 + 2);
  v85 = a3;
  v17 = *a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v86 = v16;
  v87 = AssociatedTypeWitness;
  v20 = _RopePath.subscript.getter(v16, v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v15 < 2)
  {
    v34 = 1;
LABEL_27:
    *v90 = v34;
    return;
  }
  v21 = v20;
  v22 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  v79 = a5;
  v80 = a4;
  v78 = (_WORD *)a1;
  v81 = v20 - 1;
  v82 = AssociatedConformanceWitness;
  if (v22 < 0)
  {
    v32 = 0;
LABEL_8:
    v35 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      if (v35 >= v15)
      {
        v49 = v88;
        v38 = *(_QWORD *)(v88 + 72);
        v47 = v80;
        if ((v22 & 0x8000000000000000) == 0)
        {
          v77 = v32;
          v50 = *(void (**)(char *, uint64_t *, uint64_t))(v88 + 16);
          v42 = v38 * v21;
          v48 = v79;
LABEL_15:
          v51 = v89;
          v52 = (uint64_t *)(v89 + v42);
          v50(v13, v52, v11);
          LODWORD(v88) = Rope._Node.header.getter();
          v53 = *(void (**)(char *, uint64_t))(v49 + 8);
          v53(v13, v11);
          static Rope._Node.redistributeChildren(_:_:to:)((uint64_t *)(v51 + v38 * v81), v52, v77 >> 1, v47, v48);
          v54 = v86 - 1;
          if (((v86 - 1) & 0xFFFFFF00) == 0)
          {
            v50(v13, v52, v11);
            v55 = Rope._Node.header.getter();
            v53(v13, v11);
            v56 = v55 - (unint64_t)(unsigned __int16)v88;
            v57 = v87;
            v58 = v82;
            v59 = _RopePath.subscript.getter(v54, *v85, v87, v82);
            v61 = __OFADD__(v59, v56);
            v62 = v59 + v56;
            if (!v61)
            {
              v63 = type metadata accessor for _RopePath(0, v57, v58, v60);
              v64 = v62;
              v65 = v54;
LABEL_21:
              _RopePath.subscript.setter(v64, v65, v63);
              v34 = 1;
              goto LABEL_27;
            }
            goto LABEL_31;
          }
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v45 = 0;
        v42 = v38 * v21;
        v72 = v38 * v35;
        v48 = v79;
      }
      else
      {
        v76 = (void (*)(char *, uint64_t))(v21 + 1);
        v77 = v32;
        v37 = v88;
        v36 = v89;
        v38 = *(_QWORD *)(v88 + 72);
        v73 = v38 * v35;
        v39 = *(void (**)(char *))(v88 + 16);
        v75 = (uint64_t *)(v89 + v38 * v35);
        v39(v13);
        v40 = Rope._Node.header.getter();
        v41 = *(void (**)(char *, uint64_t))(v37 + 8);
        v41(v13, v11);
        v42 = v38 * v21;
        v43 = (uint64_t *)(v36 + v42);
        v74 = (void (*)(char *, uint64_t *, uint64_t))v39;
        v39(v13);
        v44 = (unsigned __int16)Rope._Node.header.getter();
        v41(v13, v11);
        v45 = v44 + v40;
        v46 = (*(uint64_t (**)(void))(v82 + 16))();
        v47 = v80;
        if (v46 >= v45)
        {
          static Rope._Node.redistributeChildren(_:_:to:)(v43, v75, v45, v80, v79);
          Rope._UnsafeHandle._removeChild(at:)((uint64_t)v76, v78);
          v41(v13, v11);
LABEL_26:
          v34 = 0;
          goto LABEL_27;
        }
        v48 = v79;
        if ((v81 & 0x8000000000000000) == 0)
        {
          v49 = v88;
          v50 = v74;
          goto LABEL_15;
        }
        v72 = v73;
      }
      static Rope._Node.redistributeChildren(_:_:to:)((uint64_t *)(v89 + v42), (uint64_t *)(v89 + v72), (unint64_t)v45 >> 1, v47, v48);
      goto LABEL_26;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v24 = v88;
  v23 = v89;
  v25 = *(_QWORD *)(v88 + 72);
  v26 = *(void (**)(char *))(v88 + 16);
  v75 = (uint64_t *)(v89 + v25 * v22);
  v26(v13);
  v27 = (unsigned __int16)Rope._Node.header.getter();
  v28 = *(void (**)(char *, uint64_t))(v24 + 8);
  v29 = v21;
  v30 = v82;
  v28(v13, v11);
  v77 = v29;
  v31 = (uint64_t *)(v23 + v25 * v29);
  ((void (*)(char *, uint64_t *, uint64_t))v26)(v13, v31, v11);
  LOWORD(v29) = Rope._Node.header.getter();
  v76 = v28;
  v28(v13, v11);
  v74 = (void (*)(char *, uint64_t *, uint64_t))v27;
  v32 = v27 + (unsigned __int16)v29;
  v33 = v87;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v87, v30) < v32)
  {
    v22 = v81;
    v21 = v77;
    goto LABEL_8;
  }
  static Rope._Node.redistributeChildren(_:_:to:)(v75, v31, v32, v80, v79);
  Rope._UnsafeHandle._removeChild(at:)(v77, v78);
  v76(v13, v11);
  v67 = type metadata accessor for _RopePath(0, v33, v30, v66);
  v68 = v86;
  v69 = v85;
  _RopePath.subscript.setter(v81, v86, v67);
  v70 = v68 - 1;
  if ((v70 & 0xFFFFFF00) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v71 = _RopePath.subscript.getter(v70, *v69, v33, v30);
  v61 = __OFADD__(v71, v74);
  v64 = (uint64_t)v74 + v71;
  if (!v61)
  {
    v65 = v70;
    v63 = v67;
    goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

uint64_t _HashNode.isSubset<A>(_:of:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned __int8 v33;

  result = 1;
  if (a5 >= 1 && a4 != a2)
  {
    if (a3 < a5)
      return 0;
    v18 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a9);
    v29 = a8;
    v19 = _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9);
    if (v18)
    {
      v20 = _HashNode.collisionHash.getter(a4, a5, a6, a7, a9);
      if (!v19)
      {
        v25 = nullsub_1(a2 + 16, a2 + 32, a6, v29, a9);
        sub_23834002C(v25, v26, (v20 >> a1) & 0x1F, a4, a5, a1, a6, a7, &v31, v27, v29, a9);
        return v31;
      }
      if (v20 == _HashNode.collisionHash.getter(a2, a3, a6, v29, a9))
      {
        nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
        nullsub_1(a2 + 16, a2 + 32, a6, v29, a9);
        sub_23833FC50((char *)&v30);
        return v30;
      }
      return 0;
    }
    v21 = a4 + 16;
    v22 = a4 + 32;
    if (v19)
    {
      v23 = nullsub_1(v21, v22, a6, a7, a9);
      sub_238340128(v23, v24, a1, a2, a6, a7, v29, &v32, a9);
      return v32;
    }
    else
    {
      nullsub_1(v21, v22, a6, a7, a9);
      sub_238340350(v28, a2, a6, v29, (char *)&v33, a9);
      return v33;
    }
  }
  return result;
}

uint64_t sub_23833FC50@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  _HashNode.UnsafeHandle.reverseItems.getter();
  _HashNode.UnsafeHandle.reverseItems.getter();
  v1 = _HashNode.UnsafeHandle.reverseItems.getter();
  v3 = v2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = MEMORY[0x23B830CB0](v1, v3, TupleTypeMetadata2);
  if (result == v6)
  {
LABEL_6:
    v9 = 1;
LABEL_8:
    *a1 = v9;
  }
  else
  {
    v7 = result;
    v8 = v6;
    if (v6 >= result)
    {
      while (v7 < v8)
      {
        result = sub_23833FDC4();
        if ((result & 1) == 0)
        {
          v9 = 0;
          goto LABEL_8;
        }
        if (v8 == ++v7)
          goto LABEL_6;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23833FDC4()
{
  uint64_t v0;

  swift_getTupleTypeMetadata2();
  v0 = sub_23835B3A0();
  MEMORY[0x23B831670](MEMORY[0x24BEE1D30], v0);
  return sub_23835B01C() & 1;
}

uint64_t sub_23833FE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v36 = a8;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v34 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v15 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v31 - v19;
  v21 = *(int *)(v18 + 48);
  v22 = (char *)&v31 + v21 - v19;
  v24 = a2 + *(_QWORD *)(v23 + 72) * a4 + v21;
  v25 = *(void (**)(char *))(v12 + 16);
  v25((char *)&v31 - v19);
  v26 = a6;
  v32 = a6;
  v27 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v22, v24, v26);
  v28 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v20, a5);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v28, v22, v32);
  v29 = v34;
  ((void (*)(char *, char *, uint64_t))v25)(v34, v17, a5);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, TupleTypeMetadata2);
  LOBYTE(v17) = sub_23835AD40();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v29, a5);
  return v17 & 1;
}

uint64_t sub_23834002C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, int8x8_t a10@<D0>, uint64_t a11, uint64_t a12)
{
  int v13;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v13 = *(_DWORD *)(result + 4);
  if ((v13 & (1 << a3)) != 0)
  {
    a10.i32[0] = v13 & ((1 << a3) - 1);
    v15 = (uint8x8_t)vcnt_s8(a10);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = (a6 + 5);
    v20 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v15.u32[0], result, a2, a7, a11, a12);
    v21 = *v20;
    v22 = v20[1];
    swift_retain();
    LOBYTE(a8) = _HashNode.isSubset<A>(_:of:)(v16, v21, v22, a4, a5, a7, a8, a11, a12);
    result = swift_release();
    v23 = a8 & 1;
  }
  else
  {
    v23 = 0;
  }
  *a9 = v23;
  return result;
}

uint64_t sub_238340128@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, BOOL *a8@<X8>, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 || (v15 = result, result = _HashNode.UnsafeHandle.hasSingletonItem.getter((int *)result), (result & 1) == 0))
  {
    *a8 = 0;
  }
  else
  {
    v16 = nullsub_1(a4 + 16, a4 + 32, a5, a7, a9);
    return sub_2383401F4(v16, v17, v15, a2, 0, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_2383401F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, BOOL *a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL *v32;

  v30 = a2;
  v31 = a8;
  v29 = a5;
  v28 = a1;
  v32 = a9;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, v17, v18, v19, v20, a10);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v22(v16, v21, a6);
  v23 = sub_238358A4C();
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v16, a6);
  v25 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a3, a4, a6, a7, a10);
  v22(v16, v25, a6);
  LOBYTE(a7) = _HashNode.UnsafeHandle.find(_:_:_:)(v29, (uint64_t)v16, v23, v28, v30, a6, v31, a10);
  result = ((uint64_t (*)(char *, uint64_t))v24)(v16, a6);
  *v32 = a7 != 2;
  return result;
}

uint64_t sub_238340350@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X7>, char *a5@<X8>, uint64_t a6)
{
  _DWORD *v9;

  v9 = (_DWORD *)nullsub_1(a2 + 16, a2 + 32, a3, a4, a6);
  return sub_2383403F4(v9, a1, a3, a5, a6);
}

uint64_t sub_2383403F4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, char *a4@<X8>, uint64_t a5)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int8x8_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  __n128 (*v28)(uint64_t, uint64_t);
  __n128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;

  v66 = a4;
  v73 = a2;
  v6 = a1;
  v7 = MEMORY[0x24BDAC7A8](a1);
  result = MEMORY[0x24BDAC7A8](v7);
  v18 = v10[1];
  v19 = *(_DWORD *)(result + 4);
  if ((v18 & ~v19) == 0)
  {
    v20 = *v10;
    if ((*v10 & ~(*v6 | v19)) == 0)
    {
      v69 = v9;
      v70 = v12;
      v67 = v6;
      v68 = a5;
      v71 = v13;
      v72 = v10;
      if (v20)
      {
        v64 = (char *)&v59 - v14;
        v65 = v15;
        v62 = v16;
        v22 = 0;
        v60 = v11;
        v61 = v11 + 5;
        do
        {
          v34 = 1 << __clz(__rbit32(v20));
          if ((v34 & *v6) != 0)
          {
            v17.i32[0] = (v34 - 1) & *v6;
            v35 = (uint8x8_t)vcnt_s8(v17);
            v35.i16[0] = vaddlv_u8(v35);
            v36 = v35.u32[0];
            v37 = v68;
            v38 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v22, v72, v73, a3, v70, v68);
            v39 = v6;
            v41 = v64;
            v40 = v65;
            v42 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
            v42(v64, v38, a3);
            v43 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v36, v39, v69, a3, v71, v37);
            v44 = v62;
            v42(v62, v43, a3);
            LOBYTE(v36) = sub_23835AD40();
            v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
            v45((uint64_t)v44, a3);
            result = ((uint64_t (*)(char *, uint64_t))v45)(v41, a3);
            if ((v36 & 1) == 0)
              goto LABEL_3;
          }
          else
          {
            v23 = v68;
            v24 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v22, v72, v73, a3, v70, v68);
            v26 = (uint64_t)v64;
            v25 = v65;
            v27 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
            v27(v64, v24, a3);
            v63 = sub_238358A4C();
            v28 = *(__n128 (**)(uint64_t, uint64_t))(v25 + 8);
            v29 = v28(v26, a3);
            v29.n128_u32[0] = v6[1] & (v34 - 1);
            v29.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v29.n128_u64[0]);
            v29.n128_u16[0] = vaddlv_u8((uint8x8_t)v29.n128_u64[0]);
            v30 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v29.n128_u32[0], v6, v69, a3, v71, v23);
            v32 = *v30;
            v31 = v30[1];
            v33 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v22, v72, v73, a3, v70, v23);
            v27((char *)v26, v33, a3);
            swift_retain();
            LOBYTE(v31) = _HashNode.containsKey(_:_:_:)(v61, v26, v63, v32, v31, a3, v71, v23);
            swift_release();
            result = ((uint64_t (*)(uint64_t, uint64_t))v28)(v26, a3);
            if ((v31 & 1) == 0)
              goto LABEL_3;
          }
          v22 = (v22 + 1);
          v20 &= v20 - 1;
          v6 = v67;
        }
        while (v20);
        v18 = v72[1];
        v11 = v60;
      }
      if (!v18)
      {
        v21 = 1;
        goto LABEL_4;
      }
      v46 = 0;
      LODWORD(v65) = v11 + 5;
      v48 = v70;
      v47 = v71;
      v49 = v68;
      while (1)
      {
        v17.i32[0] = v6[1] & ~(-1 << __clz(__rbit32(v18)));
        v50 = (uint8x8_t)vcnt_s8(v17);
        v50.i16[0] = vaddlv_u8(v50);
        v51 = v50.u32[0];
        v52 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v46, v72, v73, a3, v48, v49);
        v53 = v6;
        v54 = *v52;
        v55 = v52[1];
        v56 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v51, v53, v69, a3, v47, v49);
        v58 = *v56;
        v57 = v56[1];
        swift_retain();
        swift_retain();
        LOBYTE(v55) = _HashNode.isSubset<A>(_:of:)(v65, v58, v57, v54, v55, a3, v48, v47, v49);
        swift_release();
        result = swift_release();
        if ((v55 & 1) == 0)
          break;
        v46 = (v46 + 1);
        v21 = 1;
        v18 &= v18 - 1;
        v6 = v67;
        if (!v18)
          goto LABEL_4;
      }
    }
  }
LABEL_3:
  v21 = 0;
LABEL_4:
  *v66 = v21;
  return result;
}

uint64_t sub_2383407E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_23833FE6C(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]) & 1;
}

_BYTE *BitSet.formSymmetricDifference(_:)(int8x16_t *a1)
{
  char *v1;
  uint64_t *v2;
  int8x16_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *result;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint64_t v14;
  int8x16_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v4 = a1[1].u64[0];
  if (v4 << 6 >= 0xFFFFFFFFFFFFFFC0)
  {
    __break(1u);
LABEL_24:
    v1 = sub_23826C260((uint64_t)v1);
LABEL_6:
    v8 = *((_QWORD *)v1 + 2);
    if (v4 < v8)
      v8 = v4;
    if (!v8)
      goto LABEL_22;
    if (v8 >= 6
      && ((v9 = 8 * v8 + 32, v1 + 32 < &v3->i8[v9]) ? (v10 = &v3[2] >= (int8x16_t *)&v1[v9]) : (v10 = 1), v10))
    {
      v11 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      v12 = v3 + 3;
      v13 = (int8x16_t *)(v1 + 48);
      v14 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v15 = veorq_s8(*v13, *v12);
        v13[-1] = veorq_s8(v13[-1], v12[-1]);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v8 == v11)
        goto LABEL_22;
    }
    else
    {
      v11 = 0;
    }
    v16 = v8 - v11;
    v17 = 8 * v11 + 32;
    v18 = &v1[v17];
    v19 = (uint64_t *)((char *)v3->i64 + v17);
    do
    {
      v20 = *v19++;
      *(_QWORD *)v18 ^= v20;
      v18 += 8;
      --v16;
    }
    while (v16);
LABEL_22:
    *v2 = (uint64_t)v1;
    return sub_2382FC0D0(&v21, v2);
  }
  v3 = a1;
  v5 = ((v4 << 6) + 63) >> 6;
  v1 = (char *)*v2;
  v6 = *(_QWORD *)(*v2 + 16);
  result = (_BYTE *)(v5 - v6);
  if (v5 <= v6)
  {
LABEL_5:
    v21 = 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_6;
    goto LABEL_24;
  }
  if ((uint64_t)(v5 - v6) >= 0)
  {
    sub_23829E648((uint64_t)result, 0);
    v1 = (char *)*v2;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.formSymmetricDifference(_:)(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (((a2 | result) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    v6 = sub_23826C260((uint64_t)v6);
    goto LABEL_7;
  }
  v4 = a2;
  v5 = result;
  if (result == a2)
    return result;
  v2 = v3;
  v7 = (a2 + 63) >> 6;
  v6 = (char *)*v3;
  v8 = *(_QWORD *)(*v3 + 16);
  result = v7 - v8;
  if (v7 > v8)
  {
    if ((uint64_t)(v7 - v8) < 0)
    {
      __break(1u);
      return result;
    }
    sub_23829E648(result, 0);
    v6 = (char *)*v3;
  }
  v9 = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_10;
LABEL_7:
  _UnsafeBitSet.formSymmetricDifference(_:)(v5, v4);
  *v2 = (uint64_t)v6;
  return (uint64_t)sub_2382FC0D0(&v9, v2);
}

uint64_t BitSet.formSymmetricDifference<A>(_:)(uint64_t a1, ValueMetadata *a2)
{
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int8x16_t *v8;
  uint64_t v10[2];

  Description = (void (**)(char *, _QWORD, ValueMetadata *))a2[-1].Description;
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0BA0);
  Description[2](v6, a1, a2);
  if ((ValueMetadata *)v7 == a2)
  {
    swift_dynamicCast();
    BitSet.formSymmetricDifference(_:)(v10[0], v10[1]);
  }
  else
  {
    v8 = (int8x16_t *)BitSet.init<A>(_:)((uint64_t)v6, a2);
    BitSet.formSymmetricDifference(_:)(v8);
    swift_bridgeObjectRelease();
  }
  return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a2);
}

uint64_t OrderedSet.isEqualSet<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t AssociatedTypeWitness;
  uint64_t v51;
  uint64_t v52[5];

  v51 = a2;
  v45 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v48 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - v15;
  v46 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v49 = (char *)&v44 - v19;
  v20 = *(_QWORD *)(a5 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v44 - v24;
  if (type metadata accessor for OrderedSet(0, a4, a6, v26) == a5)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v25, a1, a5);
    swift_dynamicCast();
    v30 = OrderedSet.isEqualSet(to:)(v52[0], v52[1], v51, a3, a4, a6);
    swift_release();
    swift_release();
    return v30 & 1;
  }
  v44 = v17;
  v47 = a3;
  v52[0] = a3;
  v27 = sub_23835B6E8();
  MEMORY[0x23B831670](MEMORY[0x24BEE2A60], v27);
  v28 = sub_23835B22C();
  if ((v28 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](v28);
    *(&v44 - 4) = a4;
    *(&v44 - 3) = a5;
    v29 = v46;
    *(&v44 - 2) = a6;
    *(&v44 - 1) = v29;
    v30 = sub_23835AFC8();
    return v30 & 1;
  }
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v31(v23, a1, a5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2568F0D00);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    v32 = sub_23835AFA4();
    if (_s19CollectionsInternal4HeapV5countSivg_0() >= v32)
    {
      v31(v25, a1, a5);
      sub_23835AF8C();
      swift_getAssociatedConformanceWitness();
      sub_23835B484();
      v33 = v45;
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      if (v34(v16, 1, a4) == 1)
      {
        v35 = 0;
LABEL_15:
        (*(void (**)(char *, uint64_t))(v44 + 8))(v49, AssociatedTypeWitness);
        result = _s19CollectionsInternal4HeapV5countSivg_0();
        if (result >= v35)
        {
          v30 = v35 == _s19CollectionsInternal4HeapV5countSivg_0();
          return v30 & 1;
        }
        goto LABEL_21;
      }
      v35 = 0;
      v41 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v42 = v48;
      while (1)
      {
        v41(v42, v16, a4);
        v43 = OrderedSet.contains(_:)();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v42, a4);
        if (!v43)
          break;
        ++v35;
        sub_23835B484();
        if (v34(v16, 1, a4) == 1)
          goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v44 + 8))(v49, AssociatedTypeWitness);
    }
    v30 = 0;
    return v30 & 1;
  }
  v36 = v47;
  v37 = _s19CollectionsInternal4HeapV5countSivg_0();
  result = MEMORY[0x24BDAC7A8](v37);
  *(&v44 - 8) = a4;
  *(&v44 - 7) = a5;
  v39 = v46;
  *(&v44 - 6) = a6;
  *(&v44 - 5) = v39;
  v40 = v51;
  *(&v44 - 4) = a1;
  *(&v44 - 3) = v40;
  *(&v44 - 2) = v36;
  if (result < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  LOBYTE(v52[0]) = 2;
  result = (uint64_t)sub_238329EC8((unint64_t)(result + 63) >> 6, v52, (_QWORD *(*)(char *__return_ptr, _BYTE **))sub_2383413D0);
  if (LOBYTE(v52[0]) != 2)
  {
    v30 = v52[0] & 1;
    return v30 & 1;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t OrderedSet.isEqualSet(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(a6) = static OrderedSet.UnorderedView.== infix(_:_:)(a3, a4, a1, a2, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a6 & 1;
}

{
  swift_retain();
  swift_retain();
  LOBYTE(a6) = static OrderedSet.UnorderedView.== infix(_:_:)(a3, a4, a1, a2, a5, a6);
  swift_release();
  swift_release();
  return a6 & 1;
}

unint64_t sub_23834110C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, BOOL *a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  unint64_t result;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v34 = a8;
  v38 = a3;
  v39 = a7;
  v42 = a4;
  v41 = a2;
  v37 = a1;
  v35 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23835B334();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - v14;
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v33 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v41, a6);
  sub_23835AF8C();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v40 = v21;
  v41 = AssociatedTypeWitness;
  v36 = AssociatedConformanceWitness;
  sub_23835B484();
  v23 = v35;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v25 = 0;
  if (v24(v15, 1, a5) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v40, v41);
    result = _s19CollectionsInternal4HeapV5countSivg_0();
    v32 = v25 == result;
LABEL_8:
    *v34 = v32;
  }
  else
  {
    v25 = 0;
    v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    while (1)
    {
      v26(v11, v15, a5);
      result = OrderedSet._find(_:)();
      if ((v28 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v11, a5);
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v40, v41);
        v32 = 0;
        goto LABEL_8;
      }
      v29 = result;
      if ((result & 0x8000000000000000) != 0)
        break;
      v30 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
      v31 = *(_QWORD *)(*v37 + v30);
      *(_QWORD *)(*v37 + v30) = v31 | (1 << result);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, a5);
      v25 += ((unint64_t)~v31 >> v29) & 1;
      sub_23835B484();
      if (v24(v15, 1, a5) == 1)
        goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_2383413D0@<X0>(_QWORD *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t *v2;

  return sub_23834110C(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

uint64_t Deque<A>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[5];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v21[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23835B334();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v7;
  sub_23835BAA8();
  v21[2] = Deque.makeIterator()(a2, a3);
  v21[3] = v14;
  v21[4] = v15;
  v17 = type metadata accessor for Deque.Iterator(0, a3, v15, v16);
  Deque.Iterator.next()(v17, (uint64_t)v12);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v12, 1, a3) != 1)
  {
    v21[0] = *(_QWORD *)(v13 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v21[0])(v9, v12, a3);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      v19 = v24;
      sub_23835B8E0();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v9, a3);
      if (v19)
        break;
      v24 = 0;
      Deque.Iterator.next()(v17, (uint64_t)v12);
    }
    while (v18(v12, 1, a3) != 1);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t sub_2383415E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Deque<A>.encode(to:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

_QWORD *Deque<A>.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v20 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = Deque.init()(v9);
  v10 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23835BA84();
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v11 = sub_23835B8A4();
    if ((v14 & 1) == 0)
    {
      v15 = v11;
      type metadata accessor for Deque(0, a2, v12, v13);
      Deque.reserveCapacity(_:)(v15);
    }
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v21, v22);
      if ((sub_23835B8C8() & 1) != 0)
        break;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
      sub_23835B8B0();
      v18 = type metadata accessor for Deque(0, a2, v16, v17);
      Deque.append(_:)((uint64_t)v8, v18);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v10 = (_QWORD *)v23;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v10;
}

_QWORD *sub_2383417E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  result = Deque<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  if (!v4)
    *a4 = result;
  return result;
}

void sub_238341814()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[48];
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
    return;
  v2 = (_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v0;
  *(_OWORD *)&v15[16] = v5;
  *(_OWORD *)&v15[32] = *(_OWORD *)(v0 + 32);
  if (v3 != *(_QWORD *)&v15[40])
  {
    __break(1u);
    goto LABEL_11;
  }
  v13 = *(_OWORD *)&v15[8];
  v14 = *(_OWORD *)&v15[24];
  v6 = *(_QWORD *)v15;
  swift_unknownObjectRetain();
  sub_238263DDC((uint64_t)v15);
  swift_bridgeObjectRetain();
  v7 = sub_238269C7C();
  sub_23825B804((uint64_t)v15);
  if (v4 >= v7)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v8 = v2[7];
  v9 = (4 * *(_BYTE *)(v1 + 18) + 8) & 0x3C;
  v10 = ((v8 >> v9) & 0xF) + 1;
  if (v10 < *(unsigned __int16 *)(v1 + 16))
  {
    v2[7] = (v10 << v9) | ((-15 << v9) - 1) & v8;
LABEL_8:
    sub_23825B804((uint64_t)v15);
    return;
  }
  v16 = v6;
  v17 = v13;
  v18 = v14;
  swift_unknownObjectRetain();
  v11 = sub_23826A744((uint64_t)(v2 + 6));
  sub_23825B804((uint64_t)v15);
  if ((v11 & 1) != 0)
    goto LABEL_8;
  v12 = sub_238269C7C();
  sub_23825B804((uint64_t)v15);
  v2[6] = v3;
  v2[7] = v12;
  v2[8] = 0;
}

void sub_238341994(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_238341814();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t _s13ChunkIteratorVwcp(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *_s13ChunkIteratorVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s13ChunkIteratorVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t _s13ChunkIteratorVwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s13ChunkIteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *_s13ChunkIteratorVMa()
{
  return &_s13ChunkIteratorVN;
}

uint64_t sub_238341BD8()
{
  sub_23835B5B0();
  swift_bridgeObjectRelease();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  sub_23835B880();
  sub_23835AE90();
  swift_bridgeObjectRelease();
  sub_23835AE90();
  return 11050466;
}

uint64_t sub_238341D4C()
{
  return sub_238341BD8();
}

uint64_t sub_238341D58()
{
  return 15;
}

uint64_t sub_238341D60()
{
  return 4;
}

double sub_238341D68@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_238341D74()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == 0;
}

_QWORD *sub_238341D84(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (__OFADD__(*v1, *result))
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = result[2];
  v2 = result[3];
  v4 = result[1];
  *v1 += *result;
  v5 = v1[1];
  v6 = __OFADD__(v5, v4);
  v7 = v5 + v4;
  if (v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v1[1] = v7;
  v8 = v1[2];
  v6 = __OFADD__(v8, v3);
  v9 = v8 + v3;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v1[2] = v9;
  v10 = v1[3];
  v6 = __OFADD__(v10, v2);
  v11 = v10 + v2;
  if (!v6)
  {
    v1[3] = v11;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_238341DE4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (__OFSUB__(*v1, *result))
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = result[2];
  v2 = result[3];
  v4 = result[1];
  *v1 -= *result;
  v5 = v1[1];
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if (v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v1[1] = v7;
  v8 = v1[2];
  v6 = __OFSUB__(v8, v3);
  v9 = v8 - v3;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v1[2] = v9;
  v10 = v1[3];
  v6 = __OFSUB__(v10, v2);
  v11 = v10 - v2;
  if (!v6)
  {
    v1[3] = v11;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

BOOL sub_238341E44(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

unint64_t sub_238341E80(uint64_t a1)
{
  unint64_t result;

  result = sub_238341EA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_238341EA4()
{
  unint64_t result;

  result = qword_2568F2190[0];
  if (!qword_2568F2190[0])
  {
    result = MEMORY[0x23B831670](&unk_238362AD8, &_s7SummaryVN);
    atomic_store(result, qword_2568F2190);
  }
  return result;
}

uint64_t OrderedSet.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = sub_2382EECD4(a1, a2, *v3, v3[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  v6 = v5;
  swift_release();
  result = swift_release();
  *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t OrderedSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = sub_2382EEE40(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  v6 = v5;
  swift_release();
  result = swift_release();
  *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t sub_238341FA4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  __int128 v69;
  __int128 v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92[5];
  _QWORD v93[4];
  int64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105[5];
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD v117[5];
  __int128 v118;
  __int128 v119;
  uint64_t *v120;
  _QWORD v121[7];

  v7 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  v9 = a1[3];
  v11 = a1[4];
  v12 = *((_OWORD *)a1 + 1);
  v99 = *(_OWORD *)a1;
  v100 = v12;
  v101 = (uint64_t *)a1[4];
  v13 = *v4;
  if (!v13[2])
  {
LABEL_65:
    v73 = v11;
    v74 = v9;
    v92[0] = 0;
    v75 = v7;
    swift_unknownObjectRetain();
    MEMORY[0x23B831730](v92, 8);
    v76 = v92[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v77 = v13;
    else
      v77 = sub_23826C274(0, v13[2] + 1, 1, v13);
    v79 = v77[2];
    v78 = v77[3];
    if (v79 >= v78 >> 1)
      v77 = sub_23826C274((_QWORD *)(v78 > 1), v79 + 1, 1, v77);
    v77[2] = v79 + 1;
    v80 = &v77[6 * v79];
    v80[4] = v75;
    v80[5] = v8;
    v80[6] = v10;
    v80[7] = v74;
    v80[8] = v73;
    v80[9] = v76;
    v71 = v77;
LABEL_70:
    result = swift_unknownObjectRelease();
    *v88 = v71;
    return result;
  }
  while (2)
  {
    v121[0] = v7;
    v121[1] = v8;
    v121[2] = v10;
    v121[3] = v9;
    v121[4] = v11;
    v14 = v13[2];
    if (!v14)
    {
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      a4 = sub_23826C274((_QWORD *)(v14 > 1), (int64_t)v13, 1, a4);
LABEL_62:
      a4[2] = (uint64_t)v13;
      v68 = &a4[6 * v7];
      v69 = v102;
      v70 = v104;
      *((_OWORD *)v68 + 3) = v103;
      *((_OWORD *)v68 + 4) = v70;
      *((_OWORD *)v68 + 2) = v69;
      v71 = a4;
      sub_23825B804((uint64_t)&v102);
      goto LABEL_70;
    }
    v86 = v11;
    v87 = v9;
    v91 = (uint64_t *)v7;
    v7 = (unint64_t)v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      result = (uint64_t)v13;
    else
      result = (uint64_t)sub_23826C24C(v13);
    v14 = *(_QWORD *)(result + 16);
    v16 = (uint64_t)v91;
    if (!v14)
      goto LABEL_72;
    v84 = v10;
    v85 = v8;
    v17 = v14 - 1;
    v18 = result + 32;
    v19 = (int64_t *)(result + 32 + 48 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = v19[2];
    v23 = v19[3];
    v24 = v19[4];
    v25 = v19[5];
    *(_QWORD *)(result + 16) = v17;
    v94 = v21;
    v95 = v20;
    v96 = v22;
    v97 = v23;
    v98 = v24;
    v89 = result + 32;
    v90 = (uint64_t *)result;
    while (1)
    {
      v26 = v24;
      v27 = v23;
      v28 = (uint64_t *)v22;
      v29 = v20;
      v10 = v21;
      v30 = v25;
      v31 = v21 ? *(unsigned __int8 *)(v21 + 18) : 0;
      if (v31 >= *(unsigned __int8 *)(v16 + 18))
        break;
      v32 = *(_QWORD *)(result + 16);
      if (!v32)
      {
        v94 = v21;
        v95 = v20;
        v96 = v22;
        v97 = v23;
        v98 = v24;
        v92[0] = 0;
        v63 = v16;
        v64 = v22;
        v65 = v20;
        v66 = v30;
        swift_unknownObjectRetain();
        MEMORY[0x23B831730](v92, 8);
        v67 = v92[0];
        v92[0] = v63;
        v92[1] = v85;
        v92[2] = v84;
        v92[3] = v87;
        v92[4] = v86;
        v93[0] = v67;
        v111 = v21;
        v112 = (uint64_t *)v65;
        v113 = (uint64_t *)v64;
        v114 = (uint64_t *)v23;
        v115 = v24;
        v116 = v66;
        sub_23835270C((uint64_t)&v111, v92, (uint64_t *)&v102);
        sub_238263E74((uint64_t)&v102, (uint64_t)&v106);
        sub_238263DDC((uint64_t)&v106);
        a4 = v90;
        v7 = v90[2];
        v14 = v90[3];
        v13 = (uint64_t *)(v7 + 1);
        if (v7 >= v14 >> 1)
          goto LABEL_83;
        goto LABEL_62;
      }
      v33 = v32 - 1;
      v34 = (uint64_t *)(v18 + 48 * v33);
      v6 = *v34;
      v35 = v34[1];
      v8 = v34[2];
      v7 = v34[3];
      v21 = *v34;
      v5 = v34[4];
      v25 = v34[5];
      *(_QWORD *)(result + 16) = v33;
      v20 = v35;
      v22 = v8;
      v23 = v7;
      v24 = v5;
      if (v10)
      {
        if (*(_WORD *)(v10 + 16))
        {
          v25 = v30;
          v21 = v10;
          v20 = v29;
          v22 = (int64_t)v28;
          v23 = v27;
          v24 = v26;
          if (v6)
          {
            if (*(_WORD *)(v6 + 16))
            {
              v111 = v6;
              v112 = (uint64_t *)v35;
              v113 = (uint64_t *)v8;
              v114 = (uint64_t *)v7;
              v115 = v5;
              *(_QWORD *)&v102 = v10;
              *((_QWORD *)&v102 + 1) = v29;
              *(_QWORD *)&v103 = v28;
              *((_QWORD *)&v103 + 1) = v27;
              *(_QWORD *)&v104 = v26;
              if (*(unsigned __int8 *)(v6 + 18) >= *(unsigned __int8 *)(v10 + 18))
              {
                v13 = &v111;
                sub_238352A50(v93, (uint64_t *)&v102, &v106);
                if (v106)
                {
                  v45 = v111;
                  v46 = *(unsigned __int8 *)(v111 + 18) + 1;
                  v14 = v46 >> 8;
                  if ((v46 & 0x100) != 0)
                    goto LABEL_74;
                  v83 = v106;
                  v13 = v107;
                  v47 = v108;
                  v48 = v109;
                  v49 = v110;
                  v8 = (uint64_t)v112;
                  v7 = (unint64_t)v113;
                  v51 = v114;
                  v50 = v115;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_2542CACA8);
                  v52 = swift_allocObject();
                  v53 = v13;
                  *(_WORD *)(v52 + 16) = 0;
                  *(_BYTE *)(v52 + 18) = v46;
                  v54 = (uint64_t *)((char *)v13 + v8);
                  if (__OFADD__(v8, v13))
                    goto LABEL_76;
                  v55 = (char *)(v7 + v47);
                  if (__OFADD__(v7, v47))
                    goto LABEL_78;
                  v14 = v47;
                  v23 = (uint64_t)v51 + v48;
                  if (__OFADD__(v51, v48))
                    goto LABEL_80;
                  v24 = v50 + v49;
                  if (__OFADD__(v50, v49))
                    goto LABEL_82;
                  v21 = v52;
                  *(_QWORD *)(v52 + 24) = v45;
                  *(_QWORD *)(v52 + 32) = v8;
                  *(_QWORD *)(v52 + 40) = v7;
                  *(_QWORD *)(v52 + 48) = v51;
                  *(_QWORD *)(v52 + 56) = v50;
                  *(_QWORD *)(v52 + 64) = v83;
                  *(_QWORD *)(v52 + 72) = v53;
                  *(_QWORD *)(v52 + 80) = v14;
                  *(_QWORD *)(v52 + 88) = v48;
                  *(_QWORD *)(v52 + 96) = v49;
                  *(_WORD *)(v52 + 16) = 2;
                  v106 = 0;
                  v7 = (unint64_t)v54;
                  v5 = (unint64_t)v55;
                  swift_unknownObjectRetain();
                  MEMORY[0x23B831730](&v106, 8);
                  v25 = v106;
                  v6 = v102;
                  swift_unknownObjectRelease();
                }
                else
                {
                  v21 = v111;
                  v7 = (unint64_t)v112;
                  v5 = (unint64_t)v113;
                  v23 = (uint64_t)v114;
                  v24 = v115;
                  v106 = 0;
                  swift_unknownObjectRetain();
                  MEMORY[0x23B831730](&v106, 8);
                  v25 = v106;
                  swift_unknownObjectRelease();
                }
              }
              else
              {
                v13 = (uint64_t *)&v102;
                sub_238352DB0(v93, &v111, &v106);
                if (v106)
                {
                  v36 = *(unsigned __int8 *)(v106 + 18) + 1;
                  v14 = v36 >> 8;
                  if ((v36 & 0x100) != 0)
                    goto LABEL_73;
                  v37 = v107;
                  v38 = v108;
                  v6 = v109;
                  v39 = v110;
                  v8 = *((_QWORD *)&v102 + 1);
                  v81 = v102;
                  v82 = v106;
                  v40 = *((_QWORD *)&v103 + 1);
                  v7 = v103;
                  v41 = v104;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_2542CACA8);
                  v42 = swift_allocObject();
                  *(_WORD *)(v42 + 16) = 0;
                  *(_BYTE *)(v42 + 18) = v36;
                  if (__OFADD__(v37, v8))
                    goto LABEL_75;
                  v43 = (char *)(v38 + v7);
                  if (__OFADD__(v38, v7))
                    goto LABEL_77;
                  v14 = v40;
                  v44 = __OFADD__(v6, v40);
                  v23 = v6 + v40;
                  if (v44)
                    goto LABEL_79;
                  v24 = v39 + v41;
                  if (__OFADD__(v39, v41))
                    goto LABEL_81;
                  v21 = v42;
                  *(_QWORD *)(v42 + 24) = v82;
                  *(_QWORD *)(v42 + 32) = v37;
                  *(_QWORD *)(v42 + 40) = v38;
                  *(_QWORD *)(v42 + 48) = v6;
                  *(_QWORD *)(v42 + 56) = v39;
                  *(_QWORD *)(v42 + 64) = v81;
                  *(_QWORD *)(v42 + 72) = v8;
                  *(_QWORD *)(v42 + 80) = v7;
                  *(_QWORD *)(v42 + 88) = v14;
                  *(_QWORD *)(v42 + 96) = v41;
                  *(_WORD *)(v42 + 16) = 2;
                  v106 = 0;
                  v7 = (unint64_t)v37 + v8;
                  v5 = (unint64_t)v43;
                }
                else
                {
                  v7 = *((_QWORD *)&v102 + 1);
                  v21 = v102;
                  v23 = *((_QWORD *)&v103 + 1);
                  v5 = v103;
                  v24 = v104;
                  v106 = 0;
                }
                MEMORY[0x23B831730](&v106, 8);
                v25 = v106;
              }
              swift_unknownObjectRelease();
              v22 = v5;
              v20 = v7;
              result = (uint64_t)v90;
              v16 = (uint64_t)v91;
              v18 = v89;
            }
            else
            {
              v24 = v26;
              v23 = v27;
              v7 = (unint64_t)v28;
              v5 = v29;
              v25 = v30;
              swift_unknownObjectRelease();
              v18 = v89;
              result = (uint64_t)v90;
              v16 = (uint64_t)v91;
              v21 = v10;
              v20 = v5;
              v22 = v7;
            }
          }
        }
        else
        {
          swift_unknownObjectRelease();
          v18 = v89;
          result = (uint64_t)v90;
          v16 = (uint64_t)v91;
          v21 = v6;
          v20 = v35;
          v22 = v8;
          v23 = v7;
          v24 = v5;
        }
      }
    }
    v94 = v21;
    v95 = v20;
    v96 = v22;
    v97 = v23;
    v98 = v24;
    if (v21)
    {
      v56 = *(unsigned __int8 *)(v16 + 18);
      if (*(unsigned __int8 *)(v21 + 18) == v56)
      {
        v21 = (int64_t)&v94;
        v57 = sub_23835315C((uint64_t *)&v99);
        v8 = v95;
        v10 = v96;
        if (v57)
        {
          v7 = v94;
          v58 = v97;
          v59 = v98;
          swift_unknownObjectRelease();
          v11 = v59;
          v9 = v58;
LABEL_51:
          *(_QWORD *)&v99 = v7;
          goto LABEL_52;
        }
        v117[0] = v94;
        v117[1] = v95;
        v117[2] = v96;
        v117[3] = v97;
        v117[4] = v98;
        v7 = (unint64_t)v101;
        v120 = v101;
        v118 = v99;
        v119 = v100;
        v5 = v94;
        v62 = *(unsigned __int8 *)(v94 + 18) + 1;
        if (((v62 >> 8) & 1) == 0)
        {
          v6 = v97;
          v23 = v98;
          v21 = *((_QWORD *)&v119 + 1);
          v24 = v119;
          v25 = *((_QWORD *)&v118 + 1);
          sub_238354020(v62, (uint64_t)v105);
          v44 = __OFADD__(v8, v25);
          v8 += v25;
          if (!v44)
          {
            v44 = __OFADD__(v10, v24);
            v10 += v24;
            if (!v44)
            {
              v44 = __OFADD__(v6, v21);
              v6 += v21;
              if (!v44)
              {
                v24 = v23 + v7;
                if (!__OFADD__(v23, v7))
                {
                  v7 = v105[0];
                  sub_238354070((_WORD *)(v105[0] + 16), v105[0] + 24, (uint64_t)v117, (uint64_t)&v118);
                  swift_unknownObjectRelease();
                  sub_23825B804((uint64_t)&v118);
                  *(_QWORD *)&v99 = v7;
                  v9 = v6;
                  v11 = v24;
LABEL_52:
                  *((_QWORD *)&v99 + 1) = v8;
                  *(_QWORD *)&v100 = v10;
                  *((_QWORD *)&v100 + 1) = v9;
                  v101 = (uint64_t *)v11;
                  v13 = v90;
                  if (v90[2])
                    continue;
                  goto LABEL_65;
                }
                goto LABEL_90;
              }
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
    }
    else
    {
      v56 = *(unsigned __int8 *)(v16 + 18);
      if (!*(_BYTE *)(v16 + 18))
        goto LABEL_93;
    }
    break;
  }
  if (*(_WORD *)(v16 + 16) != 15 || *(_WORD *)(v21 + 16) == 15)
    goto LABEL_63;
  if (v21)
  {
    v60 = *(unsigned __int8 *)(v21 + 18);
    v56 = *(unsigned __int8 *)(v16 + 18);
  }
  else
  {
    v60 = 0;
  }
  v61 = v56 + 1;
  if (((v61 >> 8) & 1) != 0)
  {
    __break(1u);
    goto LABEL_86;
  }
  if (v60 != v61)
  {
LABEL_63:
    v23 = v25;
    v6 = v20;
    v8 = v22;
    v5 = v27;
    v25 = v24;
    v7 = *(_QWORD *)(result + 16);
    v24 = *(_QWORD *)(result + 24);
    v21 = v7 + 1;
    swift_unknownObjectRetain();
    if (v7 < v24 >> 1)
    {
LABEL_64:
      v90[2] = v21;
      v72 = &v90[6 * v7];
      v72[4] = v10;
      v72[5] = v6;
      v72[6] = v8;
      v72[7] = v5;
      v72[8] = v25;
      v72[9] = v23;
      swift_unknownObjectRelease();
      v13 = v90;
      v7 = (unint64_t)v91;
      v10 = v84;
      v8 = v85;
      v11 = v86;
      v9 = v87;
      goto LABEL_65;
    }
LABEL_91:
    v90 = sub_23826C274((_QWORD *)(v24 > 1), v21, 1, v90);
    goto LABEL_64;
  }
  if (v21)
  {
    sub_238353200((uint64_t)v121);
    v7 = v94;
    v8 = v95;
    v10 = v96;
    v9 = v97;
    v11 = v98;
    goto LABEL_51;
  }
  __break(1u);
LABEL_93:
  __break(1u);
  return result;
}

uint64_t String.init(_:)(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[3];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v3);
}

double sub_238342810@<D0>(__int128 *a1@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  double result;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v28 = a3;
  v27 = sub_23835BAFC();
  v26 = *(_QWORD *)(v27 - 8);
  v5 = MEMORY[0x24BDAC7A8](v27);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v25 - v8;
  v10 = a1[1];
  v39 = *a1;
  v40 = v10;
  v41 = a1[2];
  v11 = *a2;
  v12 = a2[1];
  v13 = (uint64_t *)a2[3];
  v14 = a2[2];
  sub_23826136C(*a2 >> 11, a2[4] >> 11, (uint64_t)v36);
  v15 = v38;
  v25 = v36[0];
  v33 = v36[0];
  v34 = v36[1];
  v35 = v37;
  LOBYTE(v29) = 1;
  sub_2382600B8(v11, v12, v14, v13, 0x100000000uLL, (unint64_t)v9);
  v16 = sub_23835BAF0();
  if ((_QWORD)v25)
    v17 = *(unsigned __int8 *)(v25 + 18);
  else
    v17 = 0;
  v32[0] = v15;
  v32[1] = v17;
  v32[2] = 0;
  MEMORY[0x24BDAC7A8](v16);
  *((_QWORD *)&v25 - 2) = v9;
  *((_QWORD *)&v25 - 1) = v7;
  v30 = 0;
  v31 = 1;
  if (v18)
  {
    sub_238294E18(&v29, (uint64_t)v32, &v33, (uint64_t)&v30, (void (*)(_QWORD *__return_ptr))sub_238263370, (uint64_t)(&v25 - 2));
    sub_23825B804((uint64_t)a1);
    ++v15;
  }
  else
  {
    sub_23825B804((uint64_t)a1);
  }
  v19 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20 = v27;
  v19(v7, v27);
  v19(v9, v20);
  v21 = v35;
  result = *(double *)&v33;
  v23 = v34;
  v24 = v28;
  *v28 = v33;
  v24[1] = v23;
  *((_QWORD *)v24 + 4) = v21;
  *((_QWORD *)v24 + 5) = v15;
  return result;
}

__n128 sub_238342A24@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 *v26;
  __n128 result;
  __n128 v28;
  __n128 v29;
  __n128 *v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD v33[2];
  unint64_t v34;
  unint64_t v35;

  v30 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29.n128_u64[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v28 - v9;
  v11 = _s7BuilderVMa();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)v13 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 54) = 0u;
  *((_QWORD *)v13 + 9) = 0;
  *((_QWORD *)v13 + 10) = 0;
  *(_QWORD *)(v13 + 86) = 0;
  *((_QWORD *)v13 + 12) = v14;
  sub_23835BAF0();
  sub_23835BAF0();
  v31 = 0;
  v32 = 0xE000000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  sub_23835B484();
  v15 = *((_QWORD *)&v33[0] + 1);
  if (*((_QWORD *)&v33[0] + 1))
  {
    v16 = *(_QWORD *)&v33[0];
    do
    {
      MEMORY[0x23B8307C4](v16, v15);
      swift_bridgeObjectRelease();
      if ((v32 & 0x1000000000000000) != 0)
      {
        if (sub_23835AEA8() < 124)
          goto LABEL_3;
      }
      else if ((v32 & 0x2000000000000000) != 0 || (v31 & 0xFFFFFFFFFFFFuLL) < 0x7C)
      {
        goto LABEL_3;
      }
      swift_bridgeObjectRetain();
      v17 = sub_23835AF80();
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_bridgeObjectRelease();
      sub_23831B450(v17, v19, v21, v23);
      swift_bridgeObjectRelease();
      v31 = 0;
      v32 = 0xE000000000000000;
LABEL_3:
      sub_23835B484();
      v15 = *((_QWORD *)&v33[0] + 1);
      v16 = *(_QWORD *)&v33[0];
    }
    while (*((_QWORD *)&v33[0] + 1));
  }
  (*(void (**)(char *, uint64_t))(v29.n128_u64[0] + 8))(v10, AssociatedTypeWitness);
  swift_bridgeObjectRetain();
  sub_23831B9F0();
  sub_2382B2104((uint64_t)v13, (uint64_t)v13);
  sub_238265C60((uint64_t *)v33);
  v28 = (__n128)v33[1];
  v29 = (__n128)v33[0];
  v24 = v34;
  v25 = v35;
  sub_238265FE8((uint64_t)v13, (uint64_t (*)(_QWORD))_s7BuilderVMa);
  swift_bridgeObjectRelease();
  v26 = v30;
  result = v28;
  *v30 = v29;
  v26[1] = result;
  v26[2].n128_u64[0] = v24;
  v26[2].n128_u64[1] = v25;
  return result;
}

__n128 sub_238342D50@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 *v24;
  __n128 result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 *v37;
  _OWORD v38[2];
  unint64_t v39;
  unint64_t v40;

  v37 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36.n128_u64[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v35 - v9;
  v11 = _s7BuilderVMa();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)v13 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 54) = 0u;
  *((_QWORD *)v13 + 9) = 0;
  *((_QWORD *)v13 + 10) = 0;
  *(_QWORD *)(v13 + 86) = 0;
  *((_QWORD *)v13 + 12) = v14;
  sub_23835BAF0();
  sub_23835BAF0();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  sub_23835AF8C();
  swift_getAssociatedConformanceWitness();
  sub_23835B484();
  if ((BYTE4(v38[0]) & 1) == 0)
  {
    v26 = 0;
    v27 = 0xE000000000000000;
    do
    {
      *(_QWORD *)&v38[0] = v26;
      *((_QWORD *)&v38[0] + 1) = v27;
      sub_23835ADE8();
      v27 = *((_QWORD *)&v38[0] + 1);
      v26 = *(_QWORD *)&v38[0];
      if ((*((_QWORD *)&v38[0] + 1) & 0x1000000000000000) != 0)
      {
        if (sub_23835AEA8() < 124)
          goto LABEL_4;
      }
      else if ((*((_QWORD *)&v38[0] + 1) & 0x2000000000000000) != 0
             || (*(_QWORD *)&v38[0] & 0xFFFFFFFFFFFFuLL) < 0x7C)
      {
        goto LABEL_4;
      }
      swift_bridgeObjectRetain();
      v28 = sub_23835AF80();
      v30 = v29;
      v32 = v31;
      v34 = v33;
      swift_bridgeObjectRelease();
      sub_23831B450(v28, v30, v32, v34);
      swift_bridgeObjectRelease();
      v26 = 0;
      v27 = 0xE000000000000000;
LABEL_4:
      sub_23835B484();
    }
    while ((BYTE4(v38[0]) & 1) == 0);
  }
  (*(void (**)(char *, uint64_t))(v36.n128_u64[0] + 8))(v10, AssociatedTypeWitness);
  swift_bridgeObjectRetain();
  v15 = sub_23835AF80();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease();
  sub_23831B450(v15, v17, v19, v21);
  sub_2382B2104((uint64_t)v13, (uint64_t)v13);
  sub_238265C60((uint64_t *)v38);
  v35 = (__n128)v38[1];
  v36 = (__n128)v38[0];
  v22 = v39;
  v23 = v40;
  sub_238265FE8((uint64_t)v13, (uint64_t (*)(_QWORD))_s7BuilderVMa);
  swift_bridgeObjectRelease();
  v24 = v37;
  result = v35;
  *v37 = v36;
  v24[1] = result;
  v24[2].n128_u64[0] = v22;
  v24[2].n128_u64[1] = v23;
  return result;
}

